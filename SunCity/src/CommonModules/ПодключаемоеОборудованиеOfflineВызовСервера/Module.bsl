////////////////////////////////////////////////////////////////////////////////
// ПодключаемоеОборудованиеOfflineВызовСервера содержит процедуры и функции 
// для работы с офлайн оборудованием.
//  
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Заполнение переопределяемых процедур модуля МенеджерОфлайнОборудованияПереопределяемый

// Заполняет настройки подключаемого оборудования.
//
// Параметры:
//  ОфлайнОборудование - СправочникСсылка.ПодключаемоеОборудование - экземпляр оборудования для заполнения настроек.
//  НастройкиОборудования - Структура - структура настроек оборудования для заполнения.
//
Процедура ЗаполнитьНастройкиККМ(ОфлайнОборудование, НастройкиОборудования) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПравилоОбмена.Склад КАК Склад,
	|	ПравилоОбмена.Склад.Организация КАК Организация,
	|	ПравилоОбмена.Склад.Организация.Наименование КАК НаименованиеОрганизации,
	|	ПравилоОбмена.Склад.Магазин КАК Магазин,
	|	ПравилоОбмена.Склад.Магазин.Наименование КАК НаименованиеМагазина,
	|	ПравилоОбмена.Склад.Организация.ИНН КАК ИНН,
	|	ПравилоОбмена.Склад.Организация.КПП КАК КПП
	|ИЗ
	|	Справочник.ПравилаОбменаСПодключаемымОборудованием КАК ПравилоОбмена
	|ГДЕ
	|	ПравилоОбмена.Ссылка = &ПравилоОбмена";
	
	Запрос.УстановитьПараметр("ПравилоОбмена",
		ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ОфлайнОборудование, "ПравилоОбмена"));
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Если Выборка.Следующий() Тогда
		
		НастройкиОборудования.НаименованиеОрганизации = Выборка.НаименованиеОрганизации;
		НастройкиОборудования.НаименованиеМагазина = Выборка.НаименованиеМагазина;
		НастройкиОборудования.ИНН = Выборка.ИНН;
		НастройкиОборудования.КПП = Выборка.КПП;
		
		//МестоТочкиПродажи
		НастройкиОборудования.АдресТочкиПродажи = ОбщегоНазначенияРТ.АдресМагазина(Выборка.Магазин);
		
		//АдресТочкиПродажи
		
		//СистемыНалогообложения
		ДатаСеанса = ТекущаяДатаСеанса();
		
		СистемаНалогообложенияККТ = ПодключаемоеОборудованиеРТ.ПолучитьСистемуНалогообложения(ДатаСеанса, 
																							  Выборка.Организация,
																							  Выборка.Магазин,
																							  Выборка.Склад);
																							
		НастройкиОборудования.СистемыНалогообложения.Добавить(СистемаНалогообложенияККТ);
		
		//ЭлектроннаяПочтаОтправителяЧека
		СистемнаяУчетнаяЗапись = РаботаСПочтовымиСообщениями.СистемнаяУчетнаяЗапись();
		Если ЗначениеЗаполнено(СистемнаяУчетнаяЗапись) Тогда
			НастройкиОборудования.ЭлектроннаяПочтаОтправителяЧека = СистемнаяУчетнаяЗапись.АдресЭлектроннойПочты;
		КонецЕсли;
		
	КонецЕсли;
	
	
	
	
	// виды электронной оплаты
	Запрос = Новый Запрос;
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КассыККМ.Ссылка КАК Ссылка,
	|	КассыККМ.СоответствиеВидовОплаты КАК СоответствиеВидовОплаты
	|ПОМЕСТИТЬ КассыККМ
	|ИЗ
	|	Справочник.КассыККМ КАК КассыККМ
	|ГДЕ
	|	КассыККМ.ОфлайнОборудование = &ОфлайнОборудование
	|	И НЕ КассыККМ.ПометкаУдаления
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СоответствиеВидов.КодВидаОплатыККМOffline КАК КодВидаОплаты,
	|	СоответствиеВидов.ВидОплаты КАК ВидОплаты,
	|	СоответствиеВидов.ВидОплаты.ТипОплаты КАК ТипОплаты,
	|	СоответствиеВидов.ВидОплаты.Наименование КАК ВидОплатыНаименование
	|ИЗ
	|	Справочник.СоответствиеВидовОплатыСККМOffline.СоответствиеВидовОплаты КАК СоответствиеВидов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ КассыККМ КАК КассыККМ
	|		ПО СоответствиеВидов.Ссылка = КассыККМ.СоответствиеВидовОплаты";
	
	Запрос.УстановитьПараметр("ОфлайнОборудование", ОфлайнОборудование);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Если Выборка.ТипОплаты = Перечисления.ТипыОплатЧекаККМ.Наличные Тогда
			Продолжить;
		КонецЕсли;
		
		ВидОплаты = Неопределено;
		ТипОплаты = Неопределено;
		
		Если Выборка.ТипОплаты = Перечисления.ТипыОплатЧекаККМ.ПлатежнаяКарта Тогда
			
			ВидОплаты = Выборка.ВидОплаты;
			ТипЭлектроннойОплаты = МенеджерОфлайнОборудования.ТипЭлектроннойОплатыПлатежнаяКарта();
			
		ИначеЕсли Выборка.ТипОплаты = Перечисления.ТипыОплатЧекаККМ.БанковскийКредит Тогда
			
			ВидОплаты = Выборка.ВидОплаты;
			ТипЭлектроннойОплаты = МенеджерОфлайнОборудования.ТипЭлектроннойОплатыБанковскийКредит();
			
		ИначеЕсли Выборка.ТипОплаты = Перечисления.ТипыОплатЧекаККМ.ПодарочныйСертификат Тогда
			
			ВидОплаты = Выборка.ВидОплаты;
			ТипЭлектроннойОплаты = МенеджерОфлайнОборудования.ТипЭлектроннойОплатыПодарочныйСертификат();
			
		ИначеЕсли Выборка.ТипОплаты = Перечисления.ТипыОплатЧекаККМ.Бонусы Тогда
			
			ВидОплаты = Выборка.ВидОплаты;
			ТипЭлектроннойОплаты = МенеджерОфлайнОборудования.ТипЭлектроннойОплатыБонусы();
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ВидОплаты) Тогда
			
			ВидОплатыККМ = МенеджерОфлайнОборудования.ПолучитьЗаписьВидЭлектроннойОплаты();
			
			ВидОплатыККМ.Код 						= Выборка.КодВидаОплаты;
			ВидОплатыККМ.Наименование 				= Выборка.ВидОплатыНаименование;
			ВидОплатыККМ.ТипЭлектроннойОплаты 		= ТипЭлектроннойОплаты;
			ВидОплатыККМ.УникальныйИдентификатор 	= Выборка.ВидОплаты.УникальныйИдентификатор();
			
			НастройкиОборудования.ВидыЭлектроннойОплаты.Добавить(ВидОплатыККМ);
			
		КонецЕсли;
			
	КонецЦикла;
	
КонецПроцедуры

// Заполняет прайс лист подключаемого оборудования.
//
// Параметры:
//  ОфлайнОборудование - СправочникСсылка.ПодключаемоеОборудование - экземпляр оборудования для выгрузки прайс-листа.
//  ПрайсЛист - Структура - структура прайс листа для выгрузки.
//  ПолнаяВыгрузка - Булево - признак полной выгрузки прайс листа.
//
Процедура ЗаполнитьПрайсЛистККМ(ОфлайнОборудование, ПрайсЛист, ПолнаяВыгрузка) Экспорт
	
	Параметры = ПараметрыУстройства(ОфлайнОборудование);
	
	Если Параметры = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Параметры.ПравилоОбмена) Тогда
		Возврат;
	КонецЕсли;
	
	Параметры.Вставить("ЧастичнаяВыгрузка", НЕ ПолнаяВыгрузка);
	
	Параметры.Вставить("КассаККМ",
		Справочники.КассыККМ.ПолучитьКассуККМПоЭкземпляруОборудования(ОфлайнОборудование));
	
	ТоварыКВыгрузке = ТоварыКВыгрузкеККМ(ОфлайнОборудование, Параметры);
	
	ЗаполнитьСтруктуруПрайсЛистаИзДанныхКВыгрузке(ПрайсЛист, ТоварыКВыгрузке);
	
КонецПроцедуры

// Заполняет прайс лист подключаемого оборудования по штрихкоду.
//
// Параметры:
//  ОфлайнОборудование - СправочникСсылка.ПодключаемоеОборудование - экземпляр оборудования для выгрузки прай-листа.
//  ПрайсЛист - Структура - структура прайс листа для выгрузки.
//  Штрихкод - Строка - штрихкод по которому заполняется прайс лист.
//
Процедура ЗаполнитьПрайсЛистККМПоШтрихкоду(ОфлайнОборудование, ПрайсЛист, Штрихкод) Экспорт
	
	Параметры = ПараметрыУстройства(ОфлайнОборудование);
	
	Если Параметры = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Параметры.ПравилоОбмена) Тогда
		Возврат;
	КонецЕсли;
	
	Параметры.Вставить("ЧастичнаяВыгрузка", Ложь);
	
	Параметры.Вставить("КассаККМ",
		Справочники.КассыККМ.ПолучитьКассуККМПоЭкземпляруОборудования(ОфлайнОборудование));
	
	ШтрихкодАвтопроверки = ПроверитьТипШтрихкода(Штрихкод);
	
	Если ШтрихкодАвтопроверки Тогда
		Штрихкод = ШтрихкодПоКодуАвтопроверки(Штрихкод);
	КонецЕсли;
	
	ТоварыКВыгрузке = ТоварыКВыгрузкеККМ(ОфлайнОборудование, Параметры, Штрихкод);
	
	ЗаполнитьСтруктуруПрайсЛистаИзДанныхКВыгрузке(ПрайсЛист, ТоварыКВыгрузке);
	
КонецПроцедуры

// Заполняет заказы подключаемого оборудования.
//
// Параметры:
//  ОфлайнОборудование - СправочникСсылка.ПодключаемоеОборудование - экземпляр оборудования для заполнения заказов.
//  ЗаказыККМ - Структура - заказы ккм для выгрузки.
//
Процедура ЗаполнитьЗаказыККМ(ОфлайнОборудование, ЗаказыККМ) Экспорт
	
	Параметры = ПараметрыУстройства(ОфлайнОборудование);
	
	Если Параметры = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЗаказПокупателяИзменения.Ссылка КАК Заказ,
	|	ВЫРАЗИТЬ(ЗаказПокупателяИзменения.Ссылка.ВладелецДисконтнойКарты КАК Справочник.ФизическиеЛица) КАК ФизическоеЛицо,
	|	ВЫРАЗИТЬ(ЗаказПокупателяИзменения.Ссылка.ВладелецДисконтнойКарты КАК Справочник.Контрагенты) КАК Контрагент
	|ПОМЕСТИТЬ ЗарегистрированныеЗаказы
	|ИЗ
	|	Документ.ЗаказПокупателя.Изменения КАК ЗаказПокупателяИзменения
	|ГДЕ
	|	ЗаказПокупателяИзменения.Узел = &Узел
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Заказ,
	|	ФизическоеЛицо
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗарегистрированныеЗаказы.Заказ КАК Заказ,
	|	ЗарегистрированныеЗаказы.Заказ.КассаККМ КАК КассаККМ,
	|	ЗарегистрированныеЗаказы.Заказ.Номер КАК Номер,
	|	ЗарегистрированныеЗаказы.Заказ.Дата КАК Дата,
	|	ЗарегистрированныеЗаказы.Заказ.Комментарий КАК Комментарий,
	|	ЗарегистрированныеЗаказы.Заказ.ЖелаемаяДатаПродажи КАК ЖелаемаяДатаПродажи,
	|	ЗарегистрированныеЗаказы.Заказ.АдресДоставки КАК АдресДоставки,
	|	ЗарегистрированныеЗаказы.Заказ.НомерЗаказаНаСайте КАК НомерЗаказаНаСайте,
	|	ЗарегистрированныеЗаказы.Заказ.ДатаЗаказаНаСайте КАК ДатаЗаказаНаСайте,
	|	ЗарегистрированныеЗаказы.Заказ.Статус КАК Статус,
	|	ЗарегистрированныеЗаказы.Заказ.Отменено КАК Отменено,
	|	ЗарегистрированныеЗаказы.ФизическоеЛицо КАК ФизическоеЛицо,
	|	ВЫБОР
	|		КОГДА ЗарегистрированныеЗаказы.Контрагент ЕСТЬ NULL
	|			ТОГДА ЗарегистрированныеЗаказы.Заказ.Контрагент
	|		ИНАЧЕ ЗарегистрированныеЗаказы.Контрагент
	|	КОНЕЦ КАК Контрагент,
	|	ВЫБОР
	|		КОГДА ЗарегистрированныеЗаказы.Контрагент ЕСТЬ NULL
	|			ТОГДА ПРЕДСТАВЛЕНИЕ(ЗарегистрированныеЗаказы.Заказ.Контрагент)
	|		ИНАЧЕ ПРЕДСТАВЛЕНИЕ(ЗарегистрированныеЗаказы.Контрагент)
	|	КОНЕЦ КАК КонтрагентПредставление,
	|	ЗарегистрированныеЗаказы.Заказ.ДисконтнаяКарта КАК ДисконтнаяКарта
	|ИЗ
	|	ЗарегистрированныеЗаказы КАК ЗарегистрированныеЗаказы
	|ГДЕ
	|	НЕ(ЗарегистрированныеЗаказы.Заказ.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПокупателей.Закрыт)
	|				И НЕ ЗарегистрированныеЗаказы.Заказ.Отменено)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗаказПокупателяТовары.Ссылка КАК Заказ,
	|	ЗаказПокупателяТовары.НомерСтроки КАК НомерСтроки,
	|	ЗаказПокупателяТовары.Номенклатура КАК Номенклатура,
	|	ЗаказПокупателяТовары.Характеристика КАК Характеристика,
	|	ЗаказПокупателяТовары.Количество КАК Количество,
	|	ЗаказПокупателяТовары.Упаковка КАК Упаковка,
	|	ЗаказПокупателяТовары.КоличествоУпаковок КАК КоличествоУпаковок,
	|	ЗаказПокупателяТовары.Цена КАК Цена,
	|	ЗаказПокупателяТовары.Продавец КАК Продавец,
	|	ЗаказПокупателяТовары.ПроцентАвтоматическойСкидки КАК ПроцентАвтоматическойСкидки,
	|	ЗаказПокупателяТовары.ПроцентРучнойСкидки КАК ПроцентРучнойСкидки,
	|	ЗаказПокупателяТовары.Сумма КАК Сумма,
	|	ЗаказПокупателяТовары.СтавкаНДС КАК СтавкаНДС,
	|	ЗаказПокупателяТовары.СуммаНДС КАК СуммаНДС,
	|	ЗаказПокупателяТовары.СуммаАвтоматическойСкидки КАК СуммаАвтоматическойСкидки,
	|	ЗаказПокупателяТовары.СуммаРучнойСкидки КАК СуммаРучнойСкидки,
	|	ЗаказПокупателяТовары.КлючСвязи КАК КлючСвязи,
	|	ЗаказПокупателяТовары.КодСтроки КАК КодСтроки,
	|	ЗаказПокупателяТовары.Резервировать КАК Резервировать,
	|	ЗаказПокупателяТовары.Отменено КАК Отменено,
	|	ЗаказПокупателяТовары.ПричинаОтмены КАК ПричинаОтмены,
	|	ЗаказПокупателяТовары.ПродажаПодарка КАК ПродажаПодарка,
	|	КодыТоваровSKU.SKU КАК КодSKU
	|ИЗ
	|	ЗарегистрированныеЗаказы КАК ЗарегистрированныеЗаказы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказПокупателя.Товары КАК ЗаказПокупателяТовары
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КодыТоваровSKU КАК КодыТоваровSKU
	|			ПО ЗаказПокупателяТовары.Номенклатура = КодыТоваровSKU.Номенклатура
	|				И ЗаказПокупателяТовары.Характеристика = КодыТоваровSKU.Характеристика
	|				И ЗаказПокупателяТовары.Упаковка = КодыТоваровSKU.Упаковка
	|		ПО ЗарегистрированныеЗаказы.Заказ = ЗаказПокупателяТовары.Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	Заказ,
	|	НомерСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ФИОФизЛицСрезПоследних.ФизЛицо КАК ФизическоеЛицо,
	|	ФИОФизЛицСрезПоследних.Фамилия КАК Фамилия,
	|	ФИОФизЛицСрезПоследних.Имя КАК Имя,
	|	ФИОФизЛицСрезПоследних.Отчество КАК Отчество
	|ИЗ
	|	РегистрСведений.ФИОФизЛиц.СрезПоследних(
	|			,
	|			ФизЛицо В
	|				(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|					Т.ФизическоеЛицо
	|				ИЗ
	|					ЗарегистрированныеЗаказы КАК Т)) КАК ФИОФизЛицСрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОплатаКартой.ЗаказПокупателя КАК ЗаказПокупателя,
	|	ВЫБОР
	|		КОГДА ОплатаКартой.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПоступлениеОплатыОтКлиента)
	|			ТОГДА ОплатаКартой.СуммаДокумента
	|		КОГДА ОплатаКартой.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратОплатыКлиенту)
	|			ТОГДА -ОплатаКартой.СуммаДокумента
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СуммаКарта,
	|	0 КАК СуммаНаличные
	|ПОМЕСТИТЬ Предоплаты
	|ИЗ
	|	ЗарегистрированныеЗаказы КАК ЗарегистрированныеЗаказы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ОплатаОтПокупателяПлатежнойКартой КАК ОплатаКартой
	|		ПО ЗарегистрированныеЗаказы.Заказ = ОплатаКартой.ЗаказПокупателя
	|ГДЕ
	|	ОплатаКартой.Проведен
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ПриходныйОрдер.ЗаказПокупателя,
	|	0,
	|	ПриходныйОрдер.СуммаДокумента
	|ИЗ
	|	ЗарегистрированныеЗаказы КАК ЗарегистрированныеЗаказы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПриходныйКассовыйОрдер КАК ПриходныйОрдер
	|		ПО ЗарегистрированныеЗаказы.Заказ = ПриходныйОрдер.ЗаказПокупателя
	|ГДЕ
	|	ПриходныйОрдер.Проведен
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВЫРАЗИТЬ(РасходныйОрдерРасшифровка.ДокументРасчетовСКонтрагентом КАК Документ.ПриходныйКассовыйОрдер).ЗаказПокупателя,
	|	0,
	|	-РасходныйОрдерРасшифровка.Сумма
	|ИЗ
	|	ЗарегистрированныеЗаказы КАК ЗарегистрированныеЗаказы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РасходныйКассовыйОрдер.РасшифровкаПлатежа КАК РасходныйОрдерРасшифровка
	|		ПО (ЗарегистрированныеЗаказы.Заказ = ВЫРАЗИТЬ(РасходныйОрдерРасшифровка.ДокументРасчетовСКонтрагентом КАК Документ.ПриходныйКассовыйОрдер).ЗаказПокупателя)
	|ГДЕ
	|	РасходныйОрдерРасшифровка.ДокументРасчетовСКонтрагентом ССЫЛКА Документ.ПриходныйКассовыйОрдер
	|	И РасходныйОрдерРасшифровка.Ссылка.Проведен
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Предоплаты.ЗаказПокупателя КАК Заказ,
	|	СУММА(Предоплаты.СуммаКарта) КАК СуммаКарта,
	|	СУММА(Предоплаты.СуммаНаличные) КАК СуммаНаличные
	|ИЗ
	|	Предоплаты КАК Предоплаты
	|
	|СГРУППИРОВАТЬ ПО
	|	Предоплаты.ЗаказПокупателя";
	
	Запрос.УстановитьПараметр("Узел", Параметры.УзелИнформационнойБазы);
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	// Заказы
	РезультатЗаказы = РезультатЗапроса[1];
	ВыборкаЗаказы = РезультатЗаказы.Выбрать();
	
	// Товары заказов
	РезультатТовары = РезультатЗапроса[2];
	ТаблицаТовары = РезультатТовары.Выгрузить();
	
	// ФИО клиентов
	РезультатФИО = РезультатЗапроса[3];
	ТаблицаФИО = РезультатФИО.Выгрузить();
	
	// Предоплаты
	РезультатПредоплаты = РезультатЗапроса[5];
	ТаблицаПредоплаты = РезультатПредоплаты.Выгрузить();
	
	// структуры для поиска
	ПараметрыОтбораФИО = Новый Структура;
	ПараметрыОтбораФИО.Вставить("ФизическоеЛицо");
	
	ПараметрыОтбораТоваров = Новый Структура;
	ПараметрыОтбораТоваров.Вставить("Заказ");
	
	ПараметрыОтбораПредоплаты = Новый Структура;
	ПараметрыОтбораПредоплаты.Вставить("Заказ");
	
	Пока ВыборкаЗаказы.Следующий() Цикл
		
		ЗаказККМ = МенеджерОфлайнОборудования.ПолучитьЗаписьЗаказа();
		
		// СсылкаЗаказа
		ЗаказККМ.СсылкаЗаказа = ВыборкаЗаказы.Заказ;
		
		// УникальныйИдентификатор
		ЗаказККМ.УникальныйИдентификатор = ВыборкаЗаказы.Заказ.УникальныйИдентификатор();
		
		// Комментарий
		ЗаказККМ.Комментарий = ВыборкаЗаказы.Комментарий;
		
		// НомерЗаказа
		ЗаказККМ.НомерЗаказа = ?(
			ЗначениеЗаполнено(ВыборкаЗаказы.НомерЗаказаНаСайте),
			ВыборкаЗаказы.НомерЗаказаНаСайте,
			ВыборкаЗаказы.Номер);
			
		// ДатаЗаказа
		ЗаказККМ.ДатаЗаказа = ?(
			ЗначениеЗаполнено(ВыборкаЗаказы.ДатаЗаказаНаСайте),
			ВыборкаЗаказы.ДатаЗаказаНаСайте,
			ВыборкаЗаказы.Дата);
			
		// ДатаДоставки
		ЗаказККМ.ДатаДоставки  = ВыборкаЗаказы.ЖелаемаяДатаПродажи;
		
		// Статус
		Если ВыборкаЗаказы.Статус = Перечисления.СтатусыЗаказовПокупателей.Закрыт Тогда
			
			ЗаказККМ.СтатусЗаказа = "Отменен"; // выполненные заказы не должны выгружаться, условие в запросе
			
		ИначеЕсли ВыборкаЗаказы.Статус = Перечисления.СтатусыЗаказовПокупателей.НеСогласован Тогда
			
			ЗаказККМ.СтатусЗаказа  = "НеСогласован";
			
		ИначеЕсли ВыборкаЗаказы.Статус = Перечисления.СтатусыЗаказовПокупателей.Согласован Тогда
			
			ЗаказККМ.СтатусЗаказа  = "Согласован";
			
		КонецЕсли;
		
		// ФИО
		Если ЗначениеЗаполнено(ВыборкаЗаказы.ФизическоеЛицо) Тогда
			
			ПараметрыОтбораФИО.ФизическоеЛицо = ВыборкаЗаказы.ФизическоеЛицо;
			НайденныеФИО = ТаблицаФИО.НайтиСтроки(ПараметрыОтбораФИО);
			
			Если НЕ НайденныеФИО.Количество() = 0 Тогда
				
				ЗаказККМ.ФамилияКлиента = НайденныеФИО[0].Фамилия;
				ЗаказККМ.ИмяКлиента = НайденныеФИО[0].Имя;
				
			КонецЕсли;
			
		Иначе
			
			ЗаказККМ.ФамилияКлиента = ВыборкаЗаказы.КонтрагентПредставление;
		КонецЕсли;
		
		
		// НомерТелефонаКлиента
		Если ЗначениеЗаполнено(ВыборкаЗаказы.ДисконтнаяКарта) Тогда
			ЗаказККМ.НомерТелефонаКлиента = ТелефонИзКонтактнойИнформации(ВыборкаЗаказы.ДисконтнаяКарта);
		КонецЕсли;
			
		Если ЗначениеЗаполнено(ВыборкаЗаказы.ФизическоеЛицо) И НЕ ЗначениеЗаполнено(ЗаказККМ.НомерТелефонаКлиента) Тогда
			ЗаказККМ.НомерТелефонаКлиента = ТелефонИзКонтактнойИнформации(ВыборкаЗаказы.ФизическоеЛицо);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ВыборкаЗаказы.Контрагент) И НЕ ЗначениеЗаполнено(ЗаказККМ.НомерТелефонаКлиента) Тогда
			ЗаказККМ.НомерТелефонаКлиента = ТелефонИзКонтактнойИнформации(ВыборкаЗаказы.Контрагент);
		КонецЕсли;
		
		
		// АдресЭлектроннойПочты
		Если ЗначениеЗаполнено(ВыборкаЗаказы.ДисконтнаяКарта) Тогда
			ЗаказККМ.EmailКлиента = АдресЭлектроннойПочтыИзКонтактнойИнформации(ВыборкаЗаказы.ДисконтнаяКарта);
		КонецЕсли;
			
		Если ЗначениеЗаполнено(ВыборкаЗаказы.ФизическоеЛицо) И НЕ ЗначениеЗаполнено(ЗаказККМ.EmailКлиента) Тогда
			ЗаказККМ.EmailКлиента = АдресЭлектроннойПочтыИзКонтактнойИнформации(ВыборкаЗаказы.ФизическоеЛицо);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ВыборкаЗаказы.Контрагент) И НЕ ЗначениеЗаполнено(ЗаказККМ.EmailКлиента) Тогда
			ЗаказККМ.EmailКлиента = АдресЭлектроннойПочтыИзКонтактнойИнформации(ВыборкаЗаказы.Контрагент);
		КонецЕсли;
		
		
		// Адрес доставки
		Если ЗначениеЗаполнено(ВыборкаЗаказы.АдресДоставки) Тогда
			ЗаказККМ.ГородДоставки = ВыборкаЗаказы.АдресДоставки;
		КонецЕсли;
		
		// Ссылка заказа
		ЗаказККМ.СсылкаЗаказа = ВыборкаЗаказы.Заказ;
		
		// Товары
		
		ПараметрыОтбораТоваров.Заказ = ВыборкаЗаказы.Заказ;
		НайденныеТовары = ТаблицаТовары.НайтиСтроки(ПараметрыОтбораТоваров);
		
		Для Каждого ЗаписьТовары Из НайденныеТовары Цикл
			
			СтруктураЗаписиТовары = МенеджерОфлайнОборудования.ПолучитьЗаписьТовараЗаказа();
			
			СтруктураЗаписиТовары.Код 			= Формат(ЗаписьТовары.КодSKU, "ЧГ=0");
			СтруктураЗаписиТовары.Количество 	= ЗаписьТовары.КоличествоУпаковок;
			СтруктураЗаписиТовары.Цена 			= ЗаписьТовары.Цена;
			СтруктураЗаписиТовары.Сумма 		= ЗаписьТовары.Сумма;
			
			СтруктураЗаписиТовары.УникальныйИдентификаторТовара = ЗаписьТовары.Номенклатура.УникальныйИдентификатор();
			
			Если ЗначениеЗаполнено(ЗаписьТовары.Характеристика) Тогда
				СтруктураЗаписиТовары.УникальныйИдентификаторХарактеристики = ЗаписьТовары.Характеристика.УникальныйИдентификатор();
			КонецЕсли;
				
			Если ЗначениеЗаполнено(ЗаписьТовары.Упаковка) Тогда
				СтруктураЗаписиТовары.УникальныйИдентификаторУпаковки = ЗаписьТовары.Упаковка.УникальныйИдентификатор();
			КонецЕсли;
			
			ЗаказККМ.Товары.Добавить(СтруктураЗаписиТовары);
		КонецЦикла;
		
		// Оплаты
		ПараметрыОтбораПредоплаты.Заказ = ВыборкаЗаказы.Заказ;
		НайденныеПредоплаты = ТаблицаПредоплаты.НайтиСтроки(ПараметрыОтбораПредоплаты);
		
		Для Каждого ЗаписьПредоплата Из НайденныеПредоплаты Цикл
			
			СтруктураЗаписиОплаты = МенеджерОфлайнОборудования.ПолучитьЗаписьОплатыЗаказа();
			
			СтруктураЗаписиОплаты.СуммаНаличнойОплаты    = ?(ЗаписьПредоплата.СуммаНаличные > 0, ЗаписьПредоплата.СуммаНаличные, 0);
			СтруктураЗаписиОплаты.СуммаЭлектроннойОплаты = ?(ЗаписьПредоплата.СуммаКарта > 0, ЗаписьПредоплата.СуммаКарта, 0);
			
			Если СтруктураЗаписиОплаты.СуммаНаличнойОплаты > 0 ИЛИ СтруктураЗаписиОплаты.СуммаЭлектроннойОплаты > 0 Тогда
				ЗаказККМ.Оплаты.Добавить(СтруктураЗаписиОплаты);
			КонецЕсли;
			
		КонецЦикла;
		
		ЗаказыККМ.Добавить(ЗаказККМ);
		
	КонецЦикла;
	
КонецПроцедуры

// Загружает отчеты о продажах из ккм офлайн.
//
// Параметры:
//  ОфлайнОборудование - СправочникСсылка.ПодключаемоеОборудование - экземпляр оборудования для загрузки отчетов о продажах.
//  ДанныеОПродажах - Структура - данные о продажах загруженные из ккм офлайн.
//  Отказ - Булево - признак отказа от выполнения операции.
//  СообщениеОбОшибке - Строка - сообщение об ошибке, возвращаемое пользователю.
//
Процедура ЗагрузитьОтчетыОПродажахИзККМ(ОфлайнОборудование, ДанныеОПродажах, Отказ, СообщениеОбОшибке) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	МассивСозданныхДокументов = Новый Массив;
	
	Параметры = ПараметрыУстройства(ОфлайнОборудование);
	Параметры.Вставить("КассаККМ",
		Справочники.КассыККМ.ПолучитьКассуККМПоЭкземпляруОборудования(ОфлайнОборудование));
	
	РеквизитыККМ = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Параметры.КассаККМ, "Владелец, Магазин, СоответствиеВидовОплаты");
	
	Параметры.Вставить("Организация", РеквизитыККМ.Владелец);
	Параметры.Вставить("Магазин",     РеквизитыККМ.Магазин);
	Параметры.Вставить("СоответствиеВидовОплаты", РеквизитыККМ.СоответствиеВидовОплаты);
	
	Если ЗначениеЗаполнено(РеквизитыККМ.СоответствиеВидовОплаты) Тогда
		Параметры.Вставить("ВидЭлектроннойОплатыПоУмолчанию", 
			ОбщегоНазначения.ЗначениеРеквизитаОбъекта(РеквизитыККМ.СоответствиеВидовОплаты, "ВидЭлектроннойОплатыПоУмолчанию"));
	Иначе
		Параметры.Вставить("ВидЭлектроннойОплатыПоУмолчанию", Неопределено);
	КонецЕсли;
	
	ТаблицаКлючевыхРеквизитовОРП	= ПустаяТаблицаКлючевыхРеквизитовОРП();
	ТаблицаТоваров 					= ПустаяТаблицаТоваров();
	ТаблицаВозвратов 				= ПустаяТаблицаТоваров();
	ТаблицаШтрихкодовМарок	 		= ПустаяТаблицаШтрихкодовМаркированнойПродукции();
	ТаблицаОплат 					= ПустаяТаблицаОплат();
	ТаблицаРасчетыСКлиентами 		= ПустаяТаблицаРасчетыСКлиентами();
	
	Для Каждого ОтчетОПродажах Из ДанныеОПродажах Цикл
		
		Если НЕ ОтчетОПродажах.СтатусСмены = Перечисления.СтатусыКассовойСмены.Закрыта Тогда
			Продолжить;
		КонецЕсли;
		
		УникальныйИдентификаторОтчета = ?(ЗначениеЗаполнено(ОтчетОПродажах.УникальныйИдентификатор),
			ОтчетОПродажах.УникальныйИдентификатор, 
			Строка(Новый УникальныйИдентификатор));
			
		Для Каждого ЧекККМ Из ОтчетОПродажах.Чеки Цикл
			
			Если ЧекККМ.ТипРасчета = Перечисления.ТипыРасчетаДенежнымиСредствами.ПриходДенежныхСредств Тогда
				ЭтоЧекНаВозврат = Ложь;
				
			ИначеЕсли ЧекККМ.ТипРасчета = Перечисления.ТипыРасчетаДенежнымиСредствами.ВозвратДенежныхСредств Тогда
				ЭтоЧекНаВозврат = Истина;
				
			Иначе
				Продолжить;
			КонецЕсли;
			
			ЗаказПокупателя = Документы.ЗаказПокупателя.ПустаяСсылка();
			РасчетСКлиентом = Неопределено;
			
			Если ВРег(ЧекККМ.ТипСвязанногоДокументаККМ) = ВРег("Заказ")
				И ЗначениеЗаполнено(ЧекККМ.УникальныйИдентификаторСвязанногоДокументаККМ) Тогда
				
				СсылкаНаЗаказ = Документы.ЗаказПокупателя.ПолучитьСсылку(ЧекККМ.УникальныйИдентификаторСвязанногоДокументаККМ);
				Если НЕ СсылкаНаЗаказ.ПолучитьОбъект() = Неопределено Тогда
					ЗаказПокупателя = СсылкаНаЗаказ;
					
					РасчетСКлиентом = ТаблицаРасчетыСКлиентами.Добавить();
					РасчетСКлиентом.ЗаказПокупателя = ЗаказПокупателя;
					РасчетСКлиентом.УникальныйИдентификаторОтчета = УникальныйИдентификаторОтчета;
				КонецЕсли;
			КонецЕсли;
			
			СуммаТоваров = 0;
			
			Для Каждого СтрокаТЧ Из ЧекККМ.Товары Цикл
				
				Если НЕ (СтрокаТЧ.ПризнакСпособаРасчета = Перечисления.ПризнакиСпособаРасчета.ПередачаБезОплаты
					ИЛИ СтрокаТЧ.ПризнакСпособаРасчета = Перечисления.ПризнакиСпособаРасчета.ПередачаСПолнойОплатой
					ИЛИ СтрокаТЧ.ПризнакСпособаРасчета = Перечисления.ПризнакиСпособаРасчета.ПередачаСЧастичнойОплатой) Тогда
					
					Продолжить;
				КонецЕсли;
				
				НоваяСтрока = ТаблицаТоваров.Добавить();
				
				НоваяСтрока.Код 		= СтрокаТЧ.Код;
				НоваяСтрока.Количество 	= ?(ЭтоЧекНаВозврат, -СтрокаТЧ.Количество, СтрокаТЧ.Количество);
				НоваяСтрока.Сумма 		= ?(ЭтоЧекНаВозврат, -СтрокаТЧ.Сумма, СтрокаТЧ.Сумма);
				НоваяСтрока.Цена 		= СтрокаТЧ.Цена;
				НоваяСтрока.СтавкаНДС 	= СтавкаНДС(СтрокаТЧ.СтавкаНДС);
				НоваяСтрока.Заказ = ЗаказПокупателя;
				НоваяСтрока.УникальныйИдентификаторОтчета = УникальныйИдентификаторОтчета;
				
				СуммаТоваров = СуммаТоваров + СтрокаТЧ.Сумма;
				
				Если НЕ ЭтоЧекНаВозврат Тогда
					Для Каждого Марка Из СтрокаТЧ.ШтрихкодыМаркированнойПродукции Цикл
						
						НоваяСтрокаШтрихкод = ТаблицаШтрихкодовМарок.Добавить();
						НоваяСтрокаШтрихкод.Код = НоваяСтрока.Код;
						НоваяСтрокаШтрихкод.Марка = Марка;
						НоваяСтрокаШтрихкод.УникальныйИдентификаторОтчета = УникальныйИдентификаторОтчета;
						
					КонецЦикла;
				КонецЕсли;
				
				Если ЭтоЧекНаВозврат Тогда
					
					НоваяСтрока = ТаблицаВозвратов.Добавить();
					
					НоваяСтрока.Код 		= СтрокаТЧ.Код;
					НоваяСтрока.Количество 	= СтрокаТЧ.Количество;
					НоваяСтрока.Сумма 		= СтрокаТЧ.Сумма;
					НоваяСтрока.Цена 		= СтрокаТЧ.Цена;
					НоваяСтрока.СтавкаНДС 	= СтавкаНДС(СтрокаТЧ.СтавкаНДС);
					НоваяСтрока.Заказ = ЗаказПокупателя;
					НоваяСтрока.УникальныйИдентификаторОтчета = УникальныйИдентификаторОтчета; 
					
				КонецЕсли;
				
			КонецЦикла;
			
			СуммаОплаты = 0;
			
			Для Каждого СтрокаТЧ Из ЧекККМ.Оплаты Цикл
				
				Если ЗначениеЗаполнено(СтрокаТЧ.СуммаНаличнойОплаты) Тогда
					
					НоваяСтрока = ТаблицаОплат.Добавить();
					НоваяСтрока.Сумма = ?(ЭтоЧекНаВозврат, -СтрокаТЧ.СуммаНаличнойОплаты, СтрокаТЧ.СуммаНаличнойОплаты);
					НоваяСтрока.ТипОплаты = Перечисления.ТипыОплатЧекаККМ.Наличные;
					НоваяСтрока.УникальныйИдентификаторОтчета = УникальныйИдентификаторОтчета;
					
					СуммаОплаты = СуммаОплаты + НоваяСтрока.Сумма;
					
				КонецЕсли;
				
				Если ЗначениеЗаполнено(СтрокаТЧ.СуммаЭлектроннойОплаты) Тогда
					
					НоваяСтрока = ТаблицаОплат.Добавить();
					
					НоваяСтрока.Сумма = ?(ЭтоЧекНаВозврат, -СтрокаТЧ.СуммаЭлектроннойОплаты, СтрокаТЧ.СуммаЭлектроннойОплаты);
					НоваяСтрока.ТипОплаты = Перечисления.ТипыОплатЧекаККМ.ПлатежнаяКарта;
					НоваяСтрока.УникальныйИдентификаторОтчета = УникальныйИдентификаторОтчета;
					
					Если ЗначениеЗаполнено(СтрокаТЧ.КодВидаЭлектроннойОплаты) Тогда
						НоваяСтрока.КодВидаОплаты = СтрокаТЧ.КодВидаЭлектроннойОплаты;
					КонецЕсли;
					
					СуммаОплаты = СуммаОплаты + НоваяСтрока.Сумма;
					
				КонецЕсли;
				
			КонецЦикла;
			
			Если НЕ РасчетСКлиентом = Неопределено Тогда
				РасчетСКлиентом.Отгружено = СуммаТоваров;
				РасчетСКлиентом.Оплачено  = СуммаОплаты;
			КонецЕсли;
			
		КонецЦикла;
				
		НоваяСтрока = ТаблицаКлючевыхРеквизитовОРП.Добавить();
		
		НоваяСтрока.Дата = ОтчетОПродажах.ДатаЗакрытияСмены;
		НоваяСтрока.НомерСмены = ОтчетОПродажах.НомерСмены;
		НоваяСтрока.УникальныйИдентификаторОтчета = УникальныйИдентификаторОтчета;		
				
	КонецЦикла;
		
	ТаблицыДанных = Новый Структура(
		"Товары,
		|Оплаты,
		|ВозвратыТоваров,
		|ТаблицаШтрихкодовМарок,
		|ТаблицаРасчетыСКлиентами,
		|ТаблицаКлючевыхРеквизитовОРП");
	
	ТаблицыДанных.Товары = ТаблицаТоваров;
	ТаблицыДанных.Оплаты = ТаблицаОплат;
	ТаблицыДанных.ВозвратыТоваров = ТаблицаВозвратов;
	ТаблицыДанных.ТаблицаШтрихкодовМарок = ТаблицаШтрихкодовМарок;
	ТаблицыДанных.ТаблицаРасчетыСКлиентами = ТаблицаРасчетыСКлиентами;
	ТаблицыДанных.ТаблицаКлючевыхРеквизитовОРП = ТаблицаКлючевыхРеквизитовОРП;
	
	
	Комментарий = СформироватьКомментарий(ОфлайнОборудование);
	
	СоздатьИЗаполнитьОтчетОПродажах(
		МассивСозданныхДокументов,
		Параметры,
		ТаблицыДанных,
		Комментарий);
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

// Загружает отчеты о продажах из ккм офлайн.
//
// Параметры:
//  ОфлайнОборудование - СправочникСсылка.ПодключаемоеОборудование - экземпляр оборудования для загрузки отчетов о продажах.
//  ДанныеОПродажах - Структура - данные о продажах загруженные из ккм офлайн.
//  Отказ - Булево - признак отказа от выполнения операции.
//  СообщениеОбОшибке - Строка - сообщение об ошибке, возвращаемое пользователю.
//
Процедура ЗагрузитьПостановкиНаКран(ОфлайнОборудование, ДанныеОПостановкахНаКран, Отказ, СообщениеОбОшибке) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	МассивСозданныхДокументов = Новый Массив;
	
	Параметры = ПараметрыУстройства(ОфлайнОборудование);
	Параметры.Вставить("КассаККМ",
		Справочники.КассыККМ.ПолучитьКассуККМПоЭкземпляруОборудования(ОфлайнОборудование));
	
	РеквизитыККМ = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Параметры.КассаККМ, "Владелец, Магазин");
	
	Параметры.Вставить("Организация", РеквизитыККМ.Владелец);
	Параметры.Вставить("Магазин",     РеквизитыККМ.Магазин);
	
	ТаблицаКлючевыхРеквизитовПостановкиНаКран = ПустаяТаблицаКлючевыхРеквизитовПостановкиНаКран();
	
	Для Каждого ПостановкаНаКран Из ДанныеОПостановкахНаКран Цикл
		
		НоваяСтрока = ТаблицаКлючевыхРеквизитовПостановкиНаКран.Добавить();
		
		НоваяСтрока.Дата = ПостановкаНаКран.Дата;
		НоваяСтрока.ДатаПодключения = ПостановкаНаКран.Дата;
		НоваяСтрока.УникальныйИдентификаторОтчета = Строка(Новый УникальныйИдентификатор);
		НоваяСтрока.Магазин = РеквизитыККМ.Магазин;
		НоваяСтрока.Организация = РеквизитыККМ.Владелец;
		НоваяСтрока.КонтрольнаяМарка = ПостановкаНаКран.Товары[0].ШтрихкодАлкогольнойПродукции[0];
		НоваяСтрока.КодТовара = ПостановкаНаКран.Товары[0].Код;
		
	КонецЦикла;
	
	Комментарий = СформироватьКомментарий(ОфлайнОборудование);
	
	СоздатьИЗаполнитьПостановкиНаКран(
		МассивСозданныхДокументов,
		Параметры,
		ТаблицаКлючевыхРеквизитовПостановкиНаКран,
		Комментарий);
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

// Загружает отчеты о проверке ценников.
//
// Параметры:
//  ОфлайнОборудование - СправочникСсылка.ПодключаемоеОборудование - экземпляр оборудования для загрузки отчетов о проверке ценников.
//  ДанныеОПроверкахЦенников - Структура - данные о проверка ценников загруженные из приложения.
//  Отказ - Булево - признак отказа от выполнения операции.
//  СообщениеОбОшибке - Строка - сообщение об ошибке, возвращаемое пользователю.
//
Процедура ЗагрузитьОтчетыОПроверкеЦенников(ОфлайнОборудование, ДанныеОПроверкахЦенников, Отказ, СообщениеОбОшибке) Экспорт
	
	Товары = Новый ТаблицаЗначений;
	Товары.Колонки.Добавить("Код", Новый ОписаниеТипов("Число",,,Новый КвалификаторыЧисла(9),));
	Товары.Колонки.Добавить("Штрихкод", Новый ОписаниеТипов("Строка"));
	Товары.Колонки.Добавить("ШтрихАвтопроверки", Новый ОписаниеТипов("Строка"));
	Товары.Колонки.Добавить("КоличествоЦенников", Новый ОписаниеТипов("Число"));
		
	Для Каждого Документ Из ДанныеОПроверкахЦенников Цикл
		
		Для Каждого Строка Из Документ.Товары Цикл
			СтрокаТовар = Товары.Добавить();
			ЭтоШтрихАвтопроверки = ПроверитьТипШтрихкода(Строка.Штрихкод);
			Если ЭтоШтрихАвтопроверки Тогда
				СтрокаТовар.ШтрихАвтопроверки = Строка.Штрихкод;
			Иначе
				СтрокаТовар.Штрихкод = Строка.Штрихкод;
			КонецЕсли;
			СтрокаТовар.Код = Строка.Код;
			СтрокаТовар.КоличествоЦенников = 1;
		КонецЦикла;
			
	КонецЦикла;
		
	Если ОфлайнОборудование.СохранятьЦенникиВКонфигурации Тогда
		
		ВыполненоУспешно = Ложь;
		
		Товары.Свернуть("Код, ШтрихАвтопроверки", "КоличествоЦенников");
		
		ЗагрузитьЦенники(ОфлайнОборудование, Товары, ВыполненоУспешно);
		
		Если ВыполненоУспешно = Ложь Тогда
			Отказ = Истина;
			СообщениеОбОшибке = НСтр("ru = 'Ошибка загрузки. Принимающая сторона не смогла обработать принятый отчет.'");
		КонецЕсли;
		
	Иначе
		
		Товары.Свернуть("Код, Штрихкод, ШтрихАвтопроверки", "КоличествоЦенников");
		
		ДанныеОТоварах = ДанныеОТоварах(Товары, ОфлайнОборудование.СохранятьЦенникиВКонфигурации);
		
		Результат = УправлениеПечатьюРТ.ПечатьЦенников(ДанныеОТоварах, ОфлайнОборудование);
		
	КонецЕсли;
	
КонецПроцедуры

// Удаляет регистрацию изменений товаров зарегистрированных к выгрузке после успешной выгрузки на офлайн оборудование.
//
// Параметры:
//  ОфлайнОборудование - СправочникСсылка.ПодключаемоеОборудование - экземпляр оборудования.
//
Процедура УдалитьРегистрациюПрайсЛистаПослеВыгрузки(ОфлайнОборудование) Экспорт
	
	Параметры = ПараметрыУстройства(ОфлайнОборудование);
	
	УстановитьПривилегированныйРежим(Истина);
	
	НачатьТранзакцию();
	
	Попытка
		
		БлокировкаДанных = Новый БлокировкаДанных;
		ЭлементБлокировкиДанных = БлокировкаДанных.Добавить("ПланОбмена.ОбменСПодключаемымОборудованием");
		ЭлементБлокировкиДанных.Режим = РежимБлокировкиДанных.Исключительный;
		БлокировкаДанных.Заблокировать();
		
		ПланыОбмена.УдалитьРегистрациюИзменений(Параметры.УзелИнформационнойБазы, Метаданные.РегистрыСведений.КодыТоваровPLUНаОборудовании);
		ПланыОбмена.УдалитьРегистрациюИзменений(Параметры.УзелИнформационнойБазы, Метаданные.РегистрыСведений.КодыТоваровSKU);
		ПланыОбмена.УдалитьРегистрациюИзменений(Параметры.УзелИнформационнойБазы, Метаданные.РегистрыНакопления.ТоварыНаСкладах);
		
		УзелОбъект = Параметры.УзелИнформационнойБазы.ПолучитьОбъект();
		УзелОбъект.ДатаВыгрузки      = ТекущаяДатаСеанса();
		УзелОбъект.ВыгрузкаВыполнена = Истина;
		УзелОбъект.Записать();
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		ОтменитьТранзакцию();
	КонецПопытки;
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

// Удаляет регистрацию изменений заказов зарегистрированных к выгрузке после успешной выгрузки на офлайн оборудование.
//
// Параметры:
//  ОфлайнОборудование - СправочникСсылка.ПодключаемоеОборудование - экземпляр оборудования.
//
Процедура УдалитьРегистрациюЗаказовПослеВыгрузки(ОфлайнОборудование) Экспорт
	
	Параметры = ПараметрыУстройства(ОфлайнОборудование);
	
	УстановитьПривилегированныйРежим(Истина);
	
	НачатьТранзакцию();
	
	Попытка
		
		БлокировкаДанных = Новый БлокировкаДанных;
		ЭлементБлокировкиДанных = БлокировкаДанных.Добавить("ПланОбмена.ОбменСПодключаемымОборудованием");
		ЭлементБлокировкиДанных.Режим = РежимБлокировкиДанных.Исключительный;
		БлокировкаДанных.Заблокировать();
		
		ПланыОбмена.УдалитьРегистрациюИзменений(Параметры.УзелИнформационнойБазы, Метаданные.Документы.ЗаказПокупателя);
		
		УзелОбъект = Параметры.УзелИнформационнойБазы.ПолучитьОбъект();
		УзелОбъект.ДатаВыгрузки      = ТекущаяДатаСеанса();
		УзелОбъект.ВыгрузкаВыполнена = Истина;
		УзелОбъект.Записать();
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		ОтменитьТранзакцию();
	КонецПопытки;
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

// Вызывается при очистке товаров в устройстве.
// Выполняет запись информации в узел плана обмена.
//
// Параметры:
//  Устройство       - СправочникСсылка.ПодключаемоеОборудование - устройство в котором очищаются данные.
//  ВыполненоУспешно - Булево - признак успешного выполнения операции.
//
Процедура ПриОчисткеТоваровВУстройстве(Устройство, ВыполненоУспешно = Истина) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	НачатьТранзакцию();
	
	Попытка
	
		БлокировкаДанных = Новый БлокировкаДанных;
		ЭлементБлокировкиДанных = БлокировкаДанных.Добавить("ПланОбмена.ОбменСПодключаемымОборудованием");
		ЭлементБлокировкиДанных.Режим = РежимБлокировкиДанных.Исключительный;
		ЭлементБлокировкиДанных = БлокировкаДанных.Добавить("Справочник.ПодключаемоеОборудование");
		ЭлементБлокировкиДанных.УстановитьЗначение("Ссылка", Устройство.Ссылка);
		ЭлементБлокировкиДанных.Режим = РежимБлокировкиДанных.Разделяемый;
		БлокировкаДанных.Заблокировать();
		
		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ПодключаемоеОборудование.УзелИнформационнойБазы КАК УзелИнформационнойБазы
		|ИЗ
		|	Справочник.ПодключаемоеОборудование КАК ПодключаемоеОборудование
		|ГДЕ
		|	ПодключаемоеОборудование.Ссылка = &Устройство");
		
		Запрос.УстановитьПараметр("Устройство", Устройство);
		
		Результат = Запрос.Выполнить();
		Выборка = Результат.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			УзелОбъект = Выборка.УзелИнформационнойБазы.ПолучитьОбъект();
			УзелОбъект.ДатаВыгрузки      = ТекущаяДатаСеанса();
			УзелОбъект.ВыгрузкаВыполнена = ВыполненоУспешно;
			УзелОбъект.Записать();
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		ОтменитьТранзакцию();
	КонецПопытки;
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

// Вызывается при выгрузке товаров в устройство.
// Выполняет запись информации в узел плана обмена.
//
// Параметры:
//  Устройство       - СправочникСсылка.ПодключаемоеОборудование - устройство в который выгружаются данные.
//  ВыполненоУспешно - Булево - признак успешного выполнения операции.
//
Процедура ПриВыгрузкеТоваровВУстройство(Устройство, СтруктураДанные, ВыгружатьИзменения, ВыполненоУспешно = Истина, РасширеннаяВыгрузка = Ложь) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	НачатьТранзакцию();
	
	Попытка
	
		БлокировкаДанных = Новый БлокировкаДанных;
		ЭлементБлокировкиДанных = БлокировкаДанных.Добавить("ПланОбмена.ОбменСПодключаемымОборудованием");
		ЭлементБлокировкиДанных.Режим = РежимБлокировкиДанных.Исключительный;
		ЭлементБлокировкиДанных = БлокировкаДанных.Добавить("Справочник.ПодключаемоеОборудование");
		ЭлементБлокировкиДанных.УстановитьЗначение("Ссылка", Устройство.Ссылка);
		ЭлементБлокировкиДанных.Режим = РежимБлокировкиДанных.Разделяемый;
		БлокировкаДанных.Заблокировать();
	
		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ПодключаемоеОборудование.УзелИнформационнойБазы  КАК УзелИнформационнойБазы,
		|	ПодключаемоеОборудование.ПравилоОбмена           КАК ПравилоОбмена,
		|	ПодключаемоеОборудование.ТипОборудования         КАК ТипОборудования
		|ИЗ
		|	Справочник.ПодключаемоеОборудование КАК ПодключаемоеОборудование
		|ГДЕ
		|	ПодключаемоеОборудование.Ссылка = &Устройство");
		
		Запрос.УстановитьПараметр("Устройство", Устройство);
		
		Результат = Запрос.Выполнить();
		Выборка = Результат.Выбрать();
	
		Пока Выборка.Следующий() Цикл
			
			Если ВыполненоУспешно И СтруктураДанные <> Неопределено Тогда
					
					ПланыОбмена.УдалитьРегистрациюИзменений(Выборка.УзелИнформационнойБазы);
					
			КонецЕсли;
			
			УзелОбъект = Выборка.УзелИнформационнойБазы.ПолучитьОбъект();
			УзелОбъект.ДатаВыгрузки      = ТекущаяДатаСеанса();
			УзелОбъект.ВыгрузкаВыполнена = ВыполненоУспешно;
			УзелОбъект.Записать();
			
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		ОтменитьТранзакцию();
	КонецПопытки;
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

// Проверяет доступность работы с кодами товаров SKU.
//
// Возвращаемое значение:
//  Булево - признак доступности работы с кодами товаров.
//
Функция ДоступностьРаботыСКодамиТоваровSKU() Экспорт
	
	Доступность = НЕ ЗначениеНастроекПовтИсп.ПолучитьЗначениеКонстанты("SKUУстанавливаетсяВГлавномУзлеРИБ")
		ИЛИ (ПланыОбмена.ГлавныйУзел() = Неопределено);
		
	Возврат Доступность;
	
КонецФункции

// Возвращает параметры выбора для поля ввода ПравилоОбмена.
//
// Параметры:
//  ПодключаемоеОборудованиеОбъект - 
//
// Возвращаемое значение:
//  Массив - массив параметров выбора элемента.
//
Функция ПолучитьПараметрыВыбораПравилаОбмена(ПодключаемоеОборудованиеОбъект) Экспорт
	
	Если ТипЗнч(ПодключаемоеОборудованиеОбъект.Ссылка) = Тип("СправочникСсылка.ПодключаемоеОборудование") Тогда
		Если ПодключаемоеОборудованиеОбъект.ТипОборудования = Перечисления.ТипыПодключаемогоОборудования.ВесыСПечатьюЭтикеток Тогда
			НовыйПараметр = Новый ПараметрВыбора("Отбор.ТипПодключаемогоОборудования", Перечисления.ТипыПодключаемогоОборудования.ВесыСПечатьюЭтикеток);
		КонецЕсли;
	КонецЕсли;
	
	ПараметрыВыбораЭлемента = Новый Массив;
	ПараметрыВыбораЭлемента.Добавить(НовыйПараметр);
	Возврат Новый ФиксированныйМассив(ПараметрыВыбораЭлемента);
	
КонецФункции

#Область ВыгрузкаТоваров

// Обновить цены для списка товаров.
//
// Параметры:
//  ТаблицаТоваров - ТаблицаЗначений - таблица товаров для обновления цен.
//  Магазин - СправочникСсылка.Магазины - магазин по которому обновляются цены.
//
Процедура ОбновитьЦены(ТаблицаТоваров, Магазин) Экспорт
	
	Если ТаблицаТоваров <> Неопределено Тогда
		
		ТаблицаТоваров.Колонки.Добавить("НомерСтроки" , Новый ОписаниеТипов("Число"));
		
		Для Индекс = 0 По ТаблицаТоваров.Количество() - 1 Цикл
			ТаблицаТоваров[Индекс].НомерСтроки = Индекс;
		КонецЦикла;
		
		Запрос = Новый Запрос;
		ЗапасыСервер.СформироватьЗапросВременнаяТаблицаТовары(Запрос.Текст);
		ЗапасыСервер.СформироватьЗапросЦеныПоРозничнымЦенам(Запрос.Текст, Магазин);
		
		СтруктураРеквизитов = Новый Структура;
		СтруктураРеквизитов.Вставить("ФорматМагазина");
		СтруктураРеквизитов.Вставить("ПравилоЦенообразования");
		СтруктураРеквизитов.Вставить("ИспользоватьПрименениеЦен");
		СтруктураРеквизитов.Вставить("ВидМинимальныхЦенПродажи");
		РеквизитыМагазина = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Магазин, СтруктураРеквизитов);
		
		Запрос.УстановитьПараметр("Товары", ТаблицаТоваров); 
		Запрос.УстановитьПараметр("Дата", ТекущаяДатаСеанса());
		Запрос.УстановитьПараметр("Магазин", Магазин);
		Запрос.УстановитьПараметр("ФорматОбъектаЦенообразования", РеквизитыМагазина.ФорматМагазина);
		Запрос.УстановитьПараметр("ПравилоЦенообразования", РеквизитыМагазина.ПравилоЦенообразования);
		Запрос.УстановитьПараметр("ИспользоватьПрименениеЦен", РеквизитыМагазина.ИспользоватьПрименениеЦен);
		Запрос.УстановитьПараметр("ПриводитьКМинимальнойЦене", ЗначениеЗаполнено(РеквизитыМагазина.ВидМинимальныхЦенПродажи));
		Запрос.УстановитьПараметр("ВидМинимальныхЦенПродажи", РеквизитыМагазина.ВидМинимальныхЦенПродажи);
		
		ТаблицаЦен = Запрос.Выполнить().Выгрузить();
		ТаблицаЦен.Индексы.Добавить("НомерСтроки");
		
		Если ТаблицаЦен.Количество() > 0 Тогда
			Для Каждого ТекСтрока Из ТаблицаТоваров Цикл
				
				ЦенаНайдена = Ложь;
			
				НайденнаяСтрока = ТаблицаЦен.Найти(ТекСтрока.НомерСтроки, "НомерСтроки");
				ЦенаНайдена = (НайденнаяСтрока <> Неопределено);
			
				Если НЕ ЦенаНайдена Тогда
					Продолжить;
				КонецЕсли;
					
				ТекСтрока.Цена = НайденнаяСтрока.Цена;
			
			КонецЦикла;
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

// Возвращает структуру с данными в формате, необходимом для выгрузки списка товаров в весы с печатью этикеток.
//
// Параметры:
//  Устройство - СправочникСсылка.ПодключаемоеОборудование - устройство для которого необходимо получить данные.
//  ТолькоИзмененные - Булево - Флаг получения только измененных данных.
//
// Возвращаемое значение:
//  Структура - структура с массивом структур для выгрузки и количеством не выгруженных строк.
//
Функция ДанныеДляВесов(Устройство, ТолькоИзмененные = Истина) Экспорт
	
	Параметры = ПараметрыВесов(Устройство);
	Если Параметры = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Параметры.ПравилоОбмена) Тогда
		Возврат Неопределено;
	КонецЕсли;

	Параметры.Вставить("ЧастичнаяВыгрузка"     , ТолькоИзмененные);
	Параметры.Вставить("ВыгружатьГруппыТоваров", Ложь);
	
	ВозвращаемоеЗначение = Новый Структура("Данные, КоличествоНеВыгруженныхСтрокСОшибками, ЧастичнаяВыгрузка, Параметры");
	ВозвращаемоеЗначение.Данные = Новый Массив();
	ВозвращаемоеЗначение.КоличествоНеВыгруженныхСтрокСОшибками = 0;
	ВозвращаемоеЗначение.ЧастичнаяВыгрузка = ТолькоИзмененные;
	ВозвращаемоеЗначение.Параметры = Параметры;
	
	Таблица = ТоварыКВыгрузке(Устройство, Параметры);
	
	Для Каждого СтрокаТЧ Из Таблица Цикл
		
		Если СтрокаТЧ.ЕстьОшибки Тогда
			ВозвращаемоеЗначение.КоличествоНеВыгруженныхСтрокСОшибками = ВозвращаемоеЗначение.КоличествоНеВыгруженныхСтрокСОшибками + 1;
			Продолжить;
		КонецЕсли;
		
		ЭлементМассива = Новый Структура;
		ЭлементМассива.Вставить("PLU", СтрокаТЧ.PLU);
		ЭлементМассива.Вставить("Код", СтрокаТЧ.SKU);
		ЭлементМассива.Вставить("Штрихкод", "");
		ЭлементМассива.Вставить("Наименование", Строка(СтрокаТЧ.НаименованиеПолное));
		ЭлементМассива.Вставить("Цена", СтрокаТЧ.Цена);
		ЭлементМассива.Вставить("ОписаниеТовара", СтрокаТЧ.Описание);
		
		ВозвращаемоеЗначение.Данные.Добавить(ЭлементМассива);
		
	КонецЦикла;
	
	Возврат ВозвращаемоеЗначение;

КонецФункции

// Возвращает таблицу товаров с данными о товарам для правила выгрузки с ценами.
//
// Параметры:
//  ПравилоОбмена - СправочникСсылка.ПравилаОбменаСПодключаемымОборудованием - правило обмена по которому получаются товары.
//  ВидЦены - СправочникСсылка.ВидыЦен - виды цен по которым получаются товары для правила
//
// Возвращаемое значение:
//  ТаблицаЗначений - товары для правила обмена.
//
Функция ТоварыДляПравила(ПравилоОбмена) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ВерхняяГраница = ЗначениеНастроекПовтИсп.ПолучитьЗначениеКонстанты("ВерхняяГраницаДиапазонаSKUВесовогоТовара");
	НижняяГраница  = ЗначениеНастроекПовтИсп.ПолучитьЗначениеКонстанты("НижняяГраницаДиапазонаSKUВесовогоТовара");
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	КодыТоваровPLUНаОборудовании.КодТовараPLU КАК КодТовараPLU,
	|	КодыТоваровPLUНаОборудовании.КодТовараSKU КАК КодТовараSKU,
	|	КодыТоваровSKU.Номенклатура КАК Номенклатура,
	|	
	|	ЕСТЬNULL(КодыТоваровSKU.Номенклатура.Наименование,"""")       КАК НоменклатураНаименование,
	|	ЕСТЬNULL(КодыТоваровSKU.Номенклатура.НаименованиеПолное,"""") КАК НоменклатураНаименованиеПолное,
	|	
	|	КодыТоваровSKU.Характеристика КАК Характеристика,
	|	ЕСТЬNULL(КодыТоваровSKU.Характеристика.Наименование, """")       КАК ХарактеристикаНаименование,
	|	ЕСТЬNULL(КодыТоваровSKU.Номенклатура.ЕдиницаИзмерения.Наименование, """") КАК ЕдиницаИзмеренияНаименование,
	|	
	|	КодыТоваровSKU.Упаковка КАК Упаковка,
	|	ЕСТЬNULL(КодыТоваровSKU.Упаковка.Наименование, """") КАК УпаковкаНаименование,
	|	ЕСТЬNULL(Штрихкоды.Штрихкод, """") КАК Штрихкод,
	|	
	|	КодыТоваровSKU.Номенклатура.Весовой КАК Весовой
	|	
	|ИЗ
	|	РегистрСведений.КодыТоваровSKU КАК КодыТоваровSKU
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.КодыТоваровPLUНаОборудовании КАК КодыТоваровPLUНаОборудовании
	|		ПО (КодыТоваровPLUНаОборудовании.КодТовараSKU = КодыТоваровSKU.SKU)
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.Штрихкоды КАК Штрихкоды
	|		ПО КодыТоваровSKU.Номенклатура = Штрихкоды.Владелец
	|		И КодыТоваровSKU.Характеристика = Штрихкоды.Характеристика
	|		И КодыТоваровSKU.Упаковка = Штрихкоды.Упаковка
	|ГДЕ
	|	КодыТоваровPLUНаОборудовании.ПравилоОбмена = &ПравилоОбмена
	|	И КодыТоваровSKU.Номенклатура <> ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|ИТОГИ
	|	МАКСИМУМ(Штрихкод)
	|ПО
	|	КодТовараPLU");
	
	Запрос.УстановитьПараметр("ПравилоОбмена", ПравилоОбмена);
	
	ТаблицаТоваров = Новый ТаблицаЗначений;
	ТаблицаТоваров.Колонки.Добавить("PLU",                Новый ОписаниеТипов("Число"));
	ТаблицаТоваров.Колонки.Добавить("SKU",                Новый ОписаниеТипов("Число"));
	ТаблицаТоваров.Колонки.Добавить("Номенклатура",       Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	ТаблицаТоваров.Колонки.Добавить("Характеристика",     Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
	ТаблицаТоваров.Колонки.Добавить("Упаковка",           Новый ОписаниеТипов("СправочникСсылка.УпаковкиНоменклатуры"));
	ТаблицаТоваров.Колонки.Добавить("Наименование",       Новый ОписаниеТипов("Строка"));
	ТаблицаТоваров.Колонки.Добавить("НаименованиеПолное", Новый ОписаниеТипов("Строка"));
	ТаблицаТоваров.Колонки.Добавить("Штрихкод",           Новый ОписаниеТипов("Строка"));
	ТаблицаТоваров.Колонки.Добавить("Весовой",            Новый ОписаниеТипов("Булево"));
	ТаблицаТоваров.Колонки.Добавить("ЕстьОшибки",         Новый ОписаниеТипов("Булево"));
	
	ВыборкаПоКодам = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаПоКодам.Следующий() Цикл
		
		НоваяСтрока = ТаблицаТоваров.Добавить();
		
		Выборка = ВыборкаПоКодам.Выбрать();
		Пока Выборка.Следующий() Цикл
			
			Штрихкод = СокрЛП(Выборка.Штрихкод);
			
			Если Не ЗначениеЗаполнено(НоваяСтрока.PLU) Тогда
				НоваяСтрока.PLU                = Выборка.КодТовараPLU;
				НоваяСтрока.SKU                = Выборка.КодТовараSKU;
				НоваяСтрока.Номенклатура       = Выборка.Номенклатура;
				НоваяСтрока.Характеристика     = Выборка.Характеристика;
				НоваяСтрока.Упаковка           = Выборка.Упаковка;
				НоваяСтрока.Наименование       = ФормированиеПечатныхФормСервер.ПолучитьПредставлениеНоменклатурыДляПечати(Выборка.НоменклатураНаименование, Выборка.ХарактеристикаНаименование) + ?(ЗначениеЗаполнено(Выборка.УпаковкаНаименование),", "+Выборка.УпаковкаНаименование, "");
				НоваяСтрока.НаименованиеПолное = ФормированиеПечатныхФормСервер.ПолучитьПредставлениеНоменклатурыДляПечати(Выборка.НоменклатураНаименованиеПолное, Выборка.ХарактеристикаНаименование) + ?(ЗначениеЗаполнено(Выборка.УпаковкаНаименование),", "+Выборка.УпаковкаНаименование, "");
				НоваяСтрока.Весовой            = Выборка.Весовой;
				НоваяСтрока.Штрихкод           = Штрихкод;
			Иначе
				НоваяСтрока.Штрихкод = НоваяСтрока.Штрихкод + ", " + Штрихкод;
			КонецЕсли;
			
		КонецЦикла;
		
		Если ПравилоОбмена.ТипПодключаемогоОборудования = Перечисления.ТипыПодключаемогоОборудования.ВесыСПечатьюЭтикеток Тогда
			Если (ПравилоОбмена.СвояНумерацияPLUНаОборудовании И НоваяСтрока.PLU > ПравилоОбмена.МаксимальныйКодPLU)
		     ИЛИ (НоваяСтрока.SKU > ВерхняяГраница) ИЛИ (НоваяСтрока.SKU < НижняяГраница) Тогда
				НоваяСтрока.ЕстьОшибки = Истина;
			КонецЕсли
		КонецЕсли;

	КонецЦикла;
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат ТаблицаТоваров;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ТоварыКВыгрузкеККМ(Устройство, Параметры, Штрихкод = "")
	
	ПравилоОбмена = Параметры.ПравилоОбмена;
	
	РегистрироватьКОбменуПриИзмененииОстатка = Истина;
	
	ТаблицаТоваровПоПравилу = Справочники.ПравилаОбменаСПодключаемымОборудованием.СписокТоваровПоПравилу(ПравилоОбмена);
	
	АвтоматическиГенерироватьSKU = АвтоматическиГенерироватьSKU();
	
	РегистрыСведений.КодыТоваровSKU.ОбновитьКоды_SKU_PLU(ТаблицаТоваровПоПравилу, АвтоматическиГенерироватьSKU, ПравилоОбмена);
	
	ВерхняяГраница = ЗначениеНастроекПовтИсп.ПолучитьЗначениеКонстанты("ВерхняяГраницаДиапазонаSKUВесовогоТовара");
	НижняяГраница  = ЗначениеНастроекПовтИсп.ПолучитьЗначениеКонстанты("НижняяГраницаДиапазонаSKUВесовогоТовара");
	
	ВыгружатьГруппыТоваров = ?(Параметры.Свойство("ВыгружатьГруппыТоваров"), Параметры.ВыгружатьГруппыТоваров, Истина);
	
	УстановитьПривилегированныйРежим(Истина);
	
	#Область Запрос
	
	Запрос = Новый Запрос;
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	КодыТоваровPLUНаОборудовании.КодТовараSKU КАК SKUГруппы,
	|	КодыТоваровSKU.Номенклатура КАК Номенклатура
	|ПОМЕСТИТЬ КодыГрупп
	|ИЗ
	|	РегистрСведений.КодыТоваровSKU КАК КодыТоваровSKU
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.КодыТоваровPLUНаОборудовании КАК КодыТоваровPLUНаОборудовании
	|		ПО (КодыТоваровPLUНаОборудовании.КодТовараSKU = КодыТоваровSKU.SKU)
	|ГДЕ
	|	КодыТоваровPLUНаОборудовании.ПравилоОбмена = &ПравилоОбмена
	|	И КодыТоваровSKU.Номенклатура <> ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|	И КодыТоваровSKU.Номенклатура.ЭтоГруппа
	|	И &ВыгружатьГруппыТоваров
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТоварыНаСкладахИзменения.Регистратор КАК Регистратор
	|ПОМЕСТИТЬ РегистраторыТоварыНаСкладах
	|ИЗ
	|	РегистрНакопления.ТоварыНаСкладах.Изменения КАК ТоварыНаСкладахИзменения
	|ГДЕ
	|	ТоварыНаСкладахИзменения.Узел = &Узел
	|	И &РегистрироватьПриИзмененииОстатка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТоварыНаСкладах.Номенклатура КАК Номенклатура,
	|	ТоварыНаСкладах.Характеристика КАК Характеристика
	|ПОМЕСТИТЬ ТоварыСИзменившемсяОстатком
	|ИЗ
	|	РегистрНакопления.ТоварыНаСкладах КАК ТоварыНаСкладах
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистраторыТоварыНаСкладах КАК РегистраторыТоварыНаСкладах
	|		ПО ТоварыНаСкладах.Регистратор = РегистраторыТоварыНаСкладах.Регистратор
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КодыТоваровPLUНаОборудованииИзменения.КодТовараPLU КАК КодТовараPLU,
	|	КодыТоваровPLUНаОборудованииИзменения.ПравилоОбмена КАК ПравилоОбмена
	|ПОМЕСТИТЬ КодыТоваровPLUИзменения
	|ИЗ
	|	РегистрСведений.КодыТоваровPLUНаОборудовании.Изменения КАК КодыТоваровPLUНаОборудованииИзменения
	|ГДЕ
	|	КодыТоваровPLUНаОборудованииИзменения.Узел = &Узел
	|	И КодыТоваровPLUНаОборудованииИзменения.ПравилоОбмена = &ПравилоОбмена
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КодыТоваровSKU.SKU КАК SKU
	|ПОМЕСТИТЬ SKU_КОбмену
	|ИЗ
	|	РегистрСведений.КодыТоваровSKU КАК КодыТоваровSKU
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТоварыСИзменившемсяОстатком КАК ТоварыСИзменившемсяОстатком
	|		ПО КодыТоваровSKU.Номенклатура = ТоварыСИзменившемсяОстатком.Номенклатура
	|			И КодыТоваровSKU.Характеристика = ТоварыСИзменившемсяОстатком.Характеристика
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	КодыТоваровPLUНаОборудовании.КодТовараSKU
	|ИЗ
	|	РегистрСведений.КодыТоваровPLUНаОборудовании КАК КодыТоваровPLUНаОборудовании
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ КодыТоваровPLUИзменения КАК PLUКОбмену
	|		ПО КодыТоваровPLUНаОборудовании.КодТовараPLU = PLUКОбмену.КодТовараPLU
	|			И КодыТоваровPLUНаОборудовании.ПравилоОбмена = PLUКОбмену.ПравилоОбмена
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КодыТоваровSKU.SKU КАК SKU,
	|	КодыТоваровSKU.Номенклатура КАК Номенклатура,
	|	КодыТоваровSKU.Характеристика КАК Характеристика,
	|	КодыТоваровSKU.Упаковка КАК Упаковка,
	|	ВЫБОР
	|		КОГДА SKU_КОбмену.SKU ЕСТЬ NULL
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ЕстьИзменения
	|ПОМЕСТИТЬ КодыТоваровSKU
	|ИЗ
	|	РегистрСведений.КодыТоваровSKU КАК КодыТоваровSKU
	|		ЛЕВОЕ СОЕДИНЕНИЕ SKU_КОбмену КАК SKU_КОбмену
	|		ПО КодыТоваровSKU.SKU = SKU_КОбмену.SKU
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаТоваровПоПравилу.PLU КАК PLU,
	|	ТаблицаТоваровПоПравилу.SKU КАК SKU,
	|	ТаблицаТоваровПоПравилу.Весовой КАК Весовой,
	|	ТаблицаТоваровПоПравилу.Группа КАК Группа,
	|	ТаблицаТоваровПоПравилу.КоличествоОстаток КАК КоличествоОстаток,
	|	ТаблицаТоваровПоПравилу.Номенклатура КАК Номенклатура,
	|	ТаблицаТоваровПоПравилу.Упаковка КАК Упаковка,
	|	ТаблицаТоваровПоПравилу.Характеристика КАК Характеристика,
	|	ТаблицаТоваровПоПравилу.Цена КАК Цена,
	|	ТаблицаТоваровПоПравилу.ЭтоГруппа КАК ЭтоГруппа,
	|	ТаблицаТоваровПоПравилу.ДоговорКонтрагента КАК ДоговорКонтрагента
	|ПОМЕСТИТЬ ТаблицаТоваровПоПравилу
	|ИЗ
	|	&ТаблицаТоваровПоПравилу КАК ТаблицаТоваровПоПравилу
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаТоваровПоПравилу.PLU КАК PLU,
	|	ТаблицаТоваровПоПравилу.SKU КАК SKU,
	|	ТаблицаТоваровПоПравилу.Весовой КАК Весовой,
	|	ТаблицаТоваровПоПравилу.Группа КАК Группа,
	|	ВЫРАЗИТЬ(ЕСТЬNULL(ТаблицаТоваровПоПравилу.КоличествоОстаток, 0) КАК ЧИСЛО(15, 3)) КАК КоличествоОстаток,
	|	ТаблицаТоваровПоПравилу.Номенклатура КАК Номенклатура,
	|	ТаблицаТоваровПоПравилу.Упаковка КАК Упаковка,
	|	ТаблицаТоваровПоПравилу.Характеристика КАК Характеристика,
	|	ТаблицаТоваровПоПравилу.Цена КАК Цена,
	|	ТаблицаТоваровПоПравилу.ЭтоГруппа КАК ЭтоГруппа,
	|	СпрНоменклатура.Наименование КАК НоменклатураНаименование,
	|	СпрНоменклатура.НаименованиеПолное КАК НоменклатураНаименованиеПолное,
	|	СпрНоменклатура.Артикул КАК Артикул,
	|	СпрНоменклатура.Описание КАК Описание,
	|	СпрНоменклатура.СтавкаНДС КАК СтавкаНДС,
	|	СпрНоменклатура.ТипНоменклатуры КАК ТипНоменклатуры,
	|	СпрНоменклатура.АлкогольнаяПродукция КАК АлкогольнаяПродукция,
	|	СпрНоменклатура.ВидАлкогольнойПродукцииЕГАИС КАК ВидАлкогольнойПродукцииЕГАИС,
	|	СпрНоменклатура.ОбъемДАЛ КАК ОбъемДАЛ,
	|	СпрНоменклатура.Крепость КАК Крепость,
	|	СпрНоменклатура.ПроизводительИмпортерАлкогольнойПродукции КАК ПроизводительИмпортерАлкогольнойПродукции,
	|	ЕСТЬNULL(УпаковкиНоменклатуры.Коэффициент, 1) КАК КоэффициентУпаковки,
	|	ЕСТЬNULL(ХарактеристикиНоменклатуры.Наименование, &ПустаяСтрока) КАК ХарактеристикаНаименование,
	|	СпрНоменклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ЕСТЬNULL(УпаковкиНоменклатуры.Наименование, &ПустаяСтрока) КАК УпаковкаНаименование,
	|	ВЫБОР
	|		КОГДА SKU_КОбмену.SKU ЕСТЬ NULL
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ЕстьИзменения,
	|	СпрНоменклатура.КодТНВЭД КАК КодТНВЭД,
	|	ТаблицаТоваровПоПравилу.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	СпрНоменклатура.ВидНоменклатуры.ПродаетсяВРозлив КАК ПродаетсяВРозлив,
	|	СпрНоменклатура.ВидНоменклатуры.ПризнакПредметаРасчета.ТипПризнакаПредметаРасчета КАК ПризнакПредметаРасчета,
	|	&ОпределениеВидаПродукции КАК ВидПродукцииИС,
	|	&ОпределениеПризнакаМаркируемаяПродукция КАК МаркируемаяПродукция
	|ПОМЕСТИТЬ ТаблицаТоваров
	|ИЗ
	|	ТаблицаТоваровПоПравилу КАК ТаблицаТоваровПоПравилу
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СпрНоменклатура
	|		ПО ТаблицаТоваровПоПравилу.Номенклатура = СпрНоменклатура.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.УпаковкиНоменклатуры КАК УпаковкиНоменклатуры
	|		ПО ТаблицаТоваровПоПравилу.Упаковка = УпаковкиНоменклатуры.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ХарактеристикиНоменклатуры КАК ХарактеристикиНоменклатуры
	|		ПО ТаблицаТоваровПоПравилу.Характеристика = ХарактеристикиНоменклатуры.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ SKU_КОбмену КАК SKU_КОбмену
	|		ПО ТаблицаТоваровПоПравилу.SKU = SKU_КОбмену.SKU
	|ГДЕ
	|	НЕ ТаблицаТоваровПоПравилу.SKU ЕСТЬ NULL
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаТоваров.PLU КАК КодТовараPLU,
	|	ТаблицаТоваров.SKU КАК КодТовараSKU,
	|	ТаблицаТоваров.Номенклатура КАК Номенклатура,
	|	ТаблицаТоваров.Характеристика КАК Характеристика,
	|	ТаблицаТоваров.Упаковка КАК Упаковка,
	|	ТаблицаТоваров.СтавкаНДС КАК СтавкаНДС,
	|	ТаблицаТоваров.ЭтоГруппа КАК ЭтоГруппа,
	|	ТаблицаТоваров.ТипНоменклатуры КАК ТипНоменклатуры,
	|	ТаблицаТоваров.Весовой КАК Весовой,
	|	ТаблицаТоваров.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ТаблицаТоваров.КоэффициентУпаковки КАК КоэффициентУпаковки,
	|	ТаблицаТоваров.НоменклатураНаименование КАК НоменклатураНаименование,
	|	ТаблицаТоваров.НоменклатураНаименование КАК НоменклатураНаименованиеПолное,
	|	ТаблицаТоваров.Артикул КАК Артикул,
	|	ТаблицаТоваров.Описание КАК Описание,
	|	ТаблицаТоваров.ХарактеристикаНаименование КАК ХарактеристикаНаименование,
	|	ТаблицаТоваров.УпаковкаНаименование КАК УпаковкаНаименование,
	|	ЕСТЬNULL(Штрихкоды.Штрихкод, &ПустаяСтрока) КАК Штрихкод,
	|	ТаблицаТоваров.КоличествоОстаток / ВЫБОР
	|		КОГДА ТаблицаТоваров.КоэффициентУпаковки = 0
	|			ТОГДА 1
	|		ИНАЧЕ ЕСТЬNULL(ТаблицаТоваров.КоэффициентУпаковки, 1)
	|	КОНЕЦ КАК КоличествоОстаток,
	|	ТаблицаТоваров.АлкогольнаяПродукция КАК Алкоголь,
	|	ВЫБОР
	|		КОГДА ТаблицаТоваров.АлкогольнаяПродукция
	|			ТОГДА ТаблицаТоваров.ВидАлкогольнойПродукцииЕГАИС.Маркируемый
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК Маркируемый,
	|	ВЫБОР
	|		КОГДА ТаблицаТоваров.АлкогольнаяПродукция
	|			ТОГДА ТаблицаТоваров.ВидАлкогольнойПродукцииЕГАИС.Код
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК КодВидаАлкогольнойПродукции,
	|	ВЫБОР
	|		КОГДА ТаблицаТоваров.АлкогольнаяПродукция
	|			ТОГДА ТаблицаТоваров.ОбъемДАЛ * 10
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК ЕмкостьТары,
	|	ВЫБОР
	|		КОГДА ТаблицаТоваров.АлкогольнаяПродукция
	|			ТОГДА ТаблицаТоваров.Крепость
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК Крепость,
	|	ВЫБОР
	|		КОГДА ТаблицаТоваров.АлкогольнаяПродукция
	|			ТОГДА ТаблицаТоваров.ПроизводительИмпортерАлкогольнойПродукции.ИНН
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК ИННПроизводителя,
	|	ВЫБОР
	|		КОГДА ТаблицаТоваров.АлкогольнаяПродукция
	|			ТОГДА ТаблицаТоваров.ПроизводительИмпортерАлкогольнойПродукции.КПП
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК КПППроизводителя,
	|	КодыГрупп.SKUГруппы КАК SKUГруппы,
	|	ТаблицаТоваров.Цена КАК Цена,
	|	ТаблицаТоваров.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	ТаблицаТоваров.ПризнакПредметаРасчета КАК ПризнакПредметаРасчета,
	|	ТаблицаТоваров.ПродаетсяВРозлив КАК ПродаетсяВРозлив,
	|	ТаблицаТоваров.Группа КАК Группа,
	|	ТаблицаТоваров.ВидПродукцииИС КАК ВидПродукцииИС,
	|	ТаблицаТоваров.МаркируемаяПродукция КАК МаркируемаяПродукция
	|ИЗ
	|	ТаблицаТоваров КАК ТаблицаТоваров
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.Штрихкоды КАК Штрихкоды
	|		ПО ТаблицаТоваров.Номенклатура = Штрихкоды.Владелец
	|			И ТаблицаТоваров.Характеристика = Штрихкоды.Характеристика
	|			И ТаблицаТоваров.Упаковка = Штрихкоды.Упаковка
	|		ЛЕВОЕ СОЕДИНЕНИЕ КодыГрупп КАК КодыГрупп
	|		ПО ТаблицаТоваров.Группа = КодыГрупп.Номенклатура
	|ГДЕ
	|	ТаблицаТоваров.Номенклатура <> ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|	И ВЫБОР
	|			КОГДА &ТолькоИзмененные = ИСТИНА
	|				ТОГДА ТаблицаТоваров.ЕстьИзменения = ИСТИНА
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ
	|	И ВЫБОР
	|			КОГДА &ВыгружатьГруппыТоваров = ЛОЖЬ
	|				ТОГДА НЕ ТаблицаТоваров.ЭтоГруппа
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ
	|	И ВЫБОР
	|			КОГДА &ОтборПоШтрихкоду = ИСТИНА
	|				ТОГДА ЕСТЬNULL(Штрихкоды.Штрихкод, &ПустаяСтрока) = &Штрихкод
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ
	|ИТОГИ
	|	МАКСИМУМ(Штрихкод)
	|ПО
	|	КодТовараPLU";
	
	Запрос.УстановитьПараметр("ТолькоИзмененные",       Параметры.ЧастичнаяВыгрузка); 
	Запрос.УстановитьПараметр("ПравилоОбмена",          Параметры.ПравилоОбмена);
	Запрос.УстановитьПараметр("Узел",                   Параметры.УзелИнформационнойБазы);
	Запрос.УстановитьПараметр("Склад",                  Параметры.ПравилоОбмена.Склад);
	Запрос.УстановитьПараметр("ВыгружатьГруппыТоваров", ВыгружатьГруппыТоваров);
	Запрос.УстановитьПараметр("РегистрироватьПриИзмененииОстатка", РегистрироватьКОбменуПриИзмененииОстатка);
	Запрос.УстановитьПараметр("ПустаяСтрока", "");
	Запрос.УстановитьПараметр("ТаблицаТоваровПоПравилу", ТаблицаТоваровПоПравилу);
	Запрос.УстановитьПараметр("Устройство",              Устройство);
	Запрос.УстановитьПараметр("ОтборПоШтрихкоду",        НЕ ПустаяСтрока(Штрихкод));
	Запрос.УстановитьПараметр("Штрихкод",                Штрихкод);
	ИнтеграцияИСРТ.ОпределитьВидПродукцииТекстаЗапроса(ТекстЗапроса, "СпрНоменклатура");
	ОпределениеМаркируемаяПродукция = ИнтеграцияИСРТ.ОпределениеПризнакаМаркируемаяПродукцияТекстаЗапроса("спрНоменклатура");
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ОпределениеПризнакаМаркируемаяПродукция", ОпределениеМаркируемаяПродукция);
	Запрос.Текст = ТекстЗапроса;
	
	#КонецОбласти
	
	ТаблицаТоваров = Новый ТаблицаЗначений;
	ТаблицаТоваров.Колонки.Добавить("PLU",								Новый ОписаниеТипов("Число"));
	ТаблицаТоваров.Колонки.Добавить("SKU",								Новый ОписаниеТипов("Число"));
	ТаблицаТоваров.Колонки.Добавить("SKUГруппы",						Новый ОписаниеТипов("Число"));
	ТаблицаТоваров.Колонки.Добавить("Номенклатура",						Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	ТаблицаТоваров.Колонки.Добавить("Группа",							Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	ТаблицаТоваров.Колонки.Добавить("Характеристика",					Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
	ТаблицаТоваров.Колонки.Добавить("Упаковка",							Новый ОписаниеТипов("СправочникСсылка.УпаковкиНоменклатуры"));
	ТаблицаТоваров.Колонки.Добавить("СтавкаНДС",						Новый ОписаниеТипов("ПеречислениеСсылка.СтавкиНДС"));
	ТаблицаТоваров.Колонки.Добавить("ТипНоменклатуры",					Новый ОписаниеТипов("ПеречислениеСсылка.ТипыНоменклатуры"));
	ТаблицаТоваров.Колонки.Добавить("Артикул",							Новый ОписаниеТипов("Строка"));
	ТаблицаТоваров.Колонки.Добавить("Описание",							Новый ОписаниеТипов("Строка"));
	ТаблицаТоваров.Колонки.Добавить("ЕдиницаИзмерения",					Новый ОписаниеТипов("СправочникСсылка.БазовыеЕдиницыИзмерения"));
	ТаблицаТоваров.Колонки.Добавить("Наименование",						Новый ОписаниеТипов("Строка"));
	ТаблицаТоваров.Колонки.Добавить("НаименованиеПолное",				Новый ОписаниеТипов("Строка"));
	ТаблицаТоваров.Колонки.Добавить("Штрихкод",							Новый ОписаниеТипов("Строка"));
	ТаблицаТоваров.Колонки.Добавить("МассивШтрихкодов",					Новый ОписаниеТипов("Массив"));
	ТаблицаТоваров.Колонки.Добавить("Цена",								Новый ОписаниеТипов("Число"));
	ТаблицаТоваров.Колонки.Добавить("Весовой",							Новый ОписаниеТипов("Булево"));
	ТаблицаТоваров.Колонки.Добавить("ЭтоГруппа",						Новый ОписаниеТипов("Булево"));
	ТаблицаТоваров.Колонки.Добавить("Остаток",							Новый ОписаниеТипов("Число"));
	ТаблицаТоваров.Колонки.Добавить("КоэффициентУпаковки",				Новый ОписаниеТипов("Число"));
	ТаблицаТоваров.Колонки.Добавить("ЕстьОшибки",						Новый ОписаниеТипов("Булево"));
	ТаблицаТоваров.Колонки.Добавить("ИндексКартинкиЕстьИзменения",		Новый ОписаниеТипов("Число"));
	ТаблицаТоваров.Колонки.Добавить("НоменклатураНаименование",			Новый ОписаниеТипов("Строка"));
	ТаблицаТоваров.Колонки.Добавить("УпаковкаНаименование",				Новый ОписаниеТипов("Строка"));
	ТаблицаТоваров.Колонки.Добавить("ХарактеристикаНаименование",		Новый ОписаниеТипов("Строка"));
	ТаблицаТоваров.Колонки.Добавить("Алкоголь",							Новый ОписаниеТипов("Булево"));
	ТаблицаТоваров.Колонки.Добавить("Маркируемый",						Новый ОписаниеТипов("Булево"));
	ТаблицаТоваров.Колонки.Добавить("КодВидаАлкогольнойПродукции",		Новый ОписаниеТипов("Строка"));
	ТаблицаТоваров.Колонки.Добавить("ЕмкостьТары",						Новый ОписаниеТипов("Число"));
	ТаблицаТоваров.Колонки.Добавить("Крепость",							Новый ОписаниеТипов("Число"));
	ТаблицаТоваров.Колонки.Добавить("ИННПроизводителя",					Новый ОписаниеТипов("Строка"));
	ТаблицаТоваров.Колонки.Добавить("КПППроизводителя",					Новый ОписаниеТипов("Строка"));
	ТаблицаТоваров.Колонки.Добавить("ДоговорКонтрагента",				Новый ОписаниеТипов("СправочникСсылка.ДоговорыКонтрагентов"));
	ТаблицаТоваров.Колонки.Добавить("НомерСекции",						Новый ОписаниеТипов("Число"));
	ТаблицаТоваров.Колонки.Добавить("ПризнакПредметаРасчета",			Новый ОписаниеТипов("ПеречислениеСсылка.ПризнакиПредметаРасчета"));
	ТаблицаТоваров.Колонки.Добавить("ПродаетсяВРозлив",					Новый ОписаниеТипов("Булево"));
	ТаблицаТоваров.Колонки.Добавить("ВидПродукцииИС",					Новый ОписаниеТипов("ПеречислениеСсылка.ВидыПродукцииИС"));
	ТаблицаТоваров.Колонки.Добавить("МаркируемаяПродукция",				Новый ОписаниеТипов("Булево"));
	
	
	РезультатЗапроса = Запрос.Выполнить();
	
	// определение номера секции товара
	ТаблицаТовары = РезультатЗапроса.Выгрузить();
	ТаблицаТовары.Свернуть("Номенклатура");
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Товары.Номенклатура КАК Ссылка
	|ПОМЕСТИТЬ Товары
	|ИЗ
	|	&ТаблицаТовары КАК Товары
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.Ссылка КАК Номенклатура,
	|	Товары.Ссылка КАК НомерСтроки
	|ИЗ
	|	Товары КАК Товары
	|ГДЕ
	|	Товары.Ссылка ЕСТЬ НЕ NULL
	|	И НЕ Товары.Ссылка.ЭтоГруппа";
	
	Запрос.УстановитьПараметр("ТаблицаТовары", ТаблицаТовары);
	
	ТаблицаТоварыДляСоответствия = Запрос.Выполнить().Выгрузить();
	
	ТаблицаСоответствияТоваровСекциям = Новый Соответствие();
	ПодключаемоеОборудованиеРТ.ЗаполнитьСоответствиеСекцийДляТабличнойЧастиПоКассеККМ(
		Параметры.КассаККМ,
		ТаблицаТоварыДляСоответствия,
		ТаблицаСоответствияТоваровСекциям);
	
	ВыборкаПоКодам = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаПоКодам.Следующий() Цикл
		
		НоваяСтрока = ТаблицаТоваров.Добавить();
		
		Выборка = ВыборкаПоКодам.Выбрать();
		Пока Выборка.Следующий() Цикл
			
			Штрихкод = СокрЛП(Выборка.Штрихкод);
			
			Если НЕ ЗначениеЗаполнено(НоваяСтрока.PLU) Тогда
				
				НоваяСтрока.PLU								= Выборка.КодТовараPLU;
				НоваяСтрока.SKU								= Выборка.КодТовараSKU;
				НоваяСтрока.SKUГруппы						= ?(ВыгружатьГруппыТоваров, Выборка.SKUГруппы, 0);
				НоваяСтрока.Наименование					= ФормированиеПечатныхФормСервер.ПолучитьПредставлениеНоменклатурыДляПечати(Выборка.НоменклатураНаименование, Выборка.ХарактеристикаНаименование) + ?(ЗначениеЗаполнено(Выборка.УпаковкаНаименование),", " + Выборка.УпаковкаНаименование,"");
				НоваяСтрока.НаименованиеПолное				= ФормированиеПечатныхФормСервер.ПолучитьПредставлениеНоменклатурыДляПечати(Выборка.НоменклатураНаименованиеПолное, Выборка.ХарактеристикаНаименование) + ?(ЗначениеЗаполнено(Выборка.УпаковкаНаименование),", " + Выборка.УпаковкаНаименование,"");
				НоваяСтрока.Остаток							= Выборка.КоличествоОстаток;
				НоваяСтрока.ИндексКартинкиЕстьИзменения		= 0;
				НоваяСтрока.НомерСекции 					= ТаблицаСоответствияТоваровСекциям.Получить(Выборка.Номенклатура);
				НоваяСтрока.Штрихкод						= Штрихкод;
				
				ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка,
					"Номенклатура,
					|Характеристика,
					|ЕдиницаИзмерения,
					|Группа,
					|ХарактеристикаНаименование,
					|Упаковка,
					|Весовой,
					|ЭтоГруппа,
					|Артикул,
					|Описание,
					|СтавкаНДС,
					|КоэффициентУпаковки,
					|ТипНоменклатуры,
					|УпаковкаНаименование,
					|НоменклатураНаименование,
					|Алкоголь,
					|Маркируемый,
					|КодВидаАлкогольнойПродукции,
					|ЕмкостьТары,
					|Крепость,
					|ИННПроизводителя,
					|КПППроизводителя,
					|Цена,
					|ДоговорКонтрагента,
					|ПризнакПредметаРасчета,
					|ПродаетсяВРозлив,
					|ВидПродукцииИС,
					|МаркируемаяПродукция
					|");
				
			Иначе
				НоваяСтрока.Штрихкод = НоваяСтрока.Штрихкод + " " + Штрихкод;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(Штрихкод) Тогда
				НоваяСтрока.МассивШтрихкодов.Добавить(Штрихкод);
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат ТаблицаТоваров;
	
КонецФункции

Процедура ЗаполнитьСтруктуруПрайсЛистаИзДанныхКВыгрузке(ПрайсЛистККМ, ТоварыКВыгрузке)
	
	#Область Запрос

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТоварыКВыгрузке.SKU КАК SKU,
		|	ТоварыКВыгрузке.SKUГруппы КАК SKUГруппы,
		|	ТоварыКВыгрузке.Артикул КАК Артикул,
		|	ТоварыКВыгрузке.Весовой КАК Весовой,
		|	ТоварыКВыгрузке.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|	ТоварыКВыгрузке.КоэффициентУпаковки КАК КоэффициентУпаковки,
		|	ТоварыКВыгрузке.Номенклатура КАК Номенклатура,
		|	ТоварыКВыгрузке.Группа КАК Группа,
		|	ТоварыКВыгрузке.НоменклатураНаименование КАК НоменклатураНаименование,
		|	ТоварыКВыгрузке.СтавкаНДС КАК СтавкаНДС,
		|	ТоварыКВыгрузке.Остаток КАК Остаток,
		|	ТоварыКВыгрузке.Алкоголь КАК Алкоголь,
		|	ТоварыКВыгрузке.Маркируемый КАК Маркируемый,
		|	ТоварыКВыгрузке.КодВидаАлкогольнойПродукции КАК КодВидаАлкогольнойПродукции,
		|	ТоварыКВыгрузке.ЕмкостьТары КАК ЕмкостьТары,
		|	ТоварыКВыгрузке.Крепость КАК Крепость,
		|	ТоварыКВыгрузке.ИННПроизводителя КАК ИННПроизводителя,
		|	ТоварыКВыгрузке.КПППроизводителя КАК КПППроизводителя,
		|	ТоварыКВыгрузке.Упаковка КАК Упаковка,
		|	ТоварыКВыгрузке.УпаковкаНаименование КАК УпаковкаНаименование,
		|	ТоварыКВыгрузке.Характеристика КАК Характеристика,
		|	ВЫБОР
		|		КОГДА ТоварыКВыгрузке.Характеристика = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК ЕстьХарактеристики,
		|	ВЫБОР
		|		КОГДА ТоварыКВыгрузке.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка)
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК ЕстьУпаковки,
		|	ТоварыКВыгрузке.ХарактеристикаНаименование КАК ХарактеристикаНаименование,
		|	ТоварыКВыгрузке.Цена КАК Цена,
		|	ТоварыКВыгрузке.Штрихкод КАК Штрихкод,
		|	ТоварыКВыгрузке.ЭтоГруппа КАК ЭтоГруппа,
		|	ТоварыКВыгрузке.ТипНоменклатуры КАК ТипНоменклатуры,
		|	ТоварыКВыгрузке.ПризнакПредметаРасчета КАК ПризнакПредметаРасчета,
		|	ТоварыКВыгрузке.ПродаетсяВРозлив КАК ПродаетсяВРозлив,
		|	ТоварыКВыгрузке.ДоговорКонтрагента КАК ДоговорКонтрагента,
		|	ТоварыКВыгрузке.Описание КАК Описание,
		|	ТоварыКВыгрузке.НомерСекции КАК НомерСекции,
		|	ТоварыКВыгрузке.ВидПродукцииИС КАК ВидПродукцииИС,
		|	ТоварыКВыгрузке.МаркируемаяПродукция КАК МаркируемаяПродукция
		|ПОМЕСТИТЬ Товары
		|ИЗ
		|	&ТоварыКВыгрузке КАК ТоварыКВыгрузке
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Товары.Номенклатура КАК Номенклатура,
		|	Товары.НоменклатураНаименование КАК НоменклатураНаименование,
		|	Товары.ЭтоГруппа КАК ЭтоГруппа,
		|	Товары.Характеристика КАК Характеристика,
		|	Товары.ХарактеристикаНаименование КАК ХарактеристикаНаименование,
		|	Товары.Упаковка КАК Упаковка,
		|	Товары.УпаковкаНаименование КАК УпаковкаНаименование,
		|	Товары.Группа КАК Группа,
		|	Товары.SKUГруппы КАК SKUГруппы,
		|	Товары.Артикул КАК Артикул,
		|	Товары.Весовой КАК Весовой,
		|	Товары.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|	Товары.СтавкаНДС КАК СтавкаНДС,
		|	Товары.SKU КАК SKU,
		|	Товары.Остаток КАК Остаток,
		|	Товары.Цена КАК Цена,
		|	Товары.Штрихкод КАК Штрихкод,
		|	Товары.Алкоголь КАК Алкоголь,
		|	Товары.Маркируемый КАК Маркируемый,
		|	Товары.КодВидаАлкогольнойПродукции КАК КодВидаАлкогольнойПродукции,
		|	Товары.ЕмкостьТары КАК ЕмкостьТары,
		|	Товары.Крепость КАК Крепость,
		|	Товары.ИННПроизводителя КАК ИННПроизводителя,
		|	Товары.КПППроизводителя КАК КПППроизводителя,
		|	Товары.КоэффициентУпаковки КАК КоэффициентУпаковки,
		|	Товары.ТипНоменклатуры КАК ТипНоменклатуры,
		|	Товары.ЕстьХарактеристики КАК ЕстьХарактеристики,
		|	Товары.ЕстьУпаковки КАК ЕстьУпаковки,
		|	Товары.ПризнакПредметаРасчета КАК ПризнакПредметаРасчета,
		|	Товары.ПродаетсяВРозлив КАК ПродаетсяВРозлив,
		|	Товары.ДоговорКонтрагента КАК ДоговорКонтрагента,
		|	Товары.Описание КАК Описание,
		|	Товары.НомерСекции КАК НомерСекции,
		|	Товары.ВидПродукцииИС КАК ВидПродукцииИС,
		|	Товары.МаркируемаяПродукция КАК МаркируемаяПродукция
		|ИЗ
		|	Товары КАК Товары
		|ИТОГИ
		|	МАКСИМУМ(НоменклатураНаименование),
		|	МАКСИМУМ(ЭтоГруппа),
		|	МАКСИМУМ(ХарактеристикаНаименование),
		|	МАКСИМУМ(Группа),
		|	МАКСИМУМ(SKUГруппы),
		|	МАКСИМУМ(Артикул),
		|	МАКСИМУМ(Весовой),
		|	МАКСИМУМ(ЕдиницаИзмерения),
		|	МАКСИМУМ(СтавкаНДС),
		|	МАКСИМУМ(SKU),
		|	МАКСИМУМ(Остаток),
		|	МАКСИМУМ(Цена),
		|	МАКСИМУМ(Штрихкод),
		|	МАКСИМУМ(Алкоголь),
		|	МАКСИМУМ(Маркируемый),
		|	МАКСИМУМ(КодВидаАлкогольнойПродукции),
		|	МАКСИМУМ(ЕмкостьТары),
		|	МАКСИМУМ(Крепость),
		|	МАКСИМУМ(ИННПроизводителя),
		|	МАКСИМУМ(КПППроизводителя),
		|	МАКСИМУМ(ТипНоменклатуры),
		|	МАКСИМУМ(ЕстьХарактеристики),
		|	МАКСИМУМ(ЕстьУпаковки),
		|	МАКСИМУМ(ПризнакПредметаРасчета),
		|	МАКСИМУМ(ПродаетсяВРозлив),
		|	МАКСИМУМ(ДоговорКонтрагента),
		|	МАКСИМУМ(Описание),
		|	МАКСИМУМ(НомерСекции),
		|	МАКСИМУМ(ВидПродукцииИС),
		|	МАКСИМУМ(МаркируемаяПродукция)
		|ПО
		|	Номенклатура,
		|	Характеристика";
		
	Запрос.УстановитьПараметр("ТоварыКВыгрузке", ТоварыКВыгрузке);
	РезультатЗапроса = Запрос.Выполнить();
	
	#КонецОбласти
	
	ТипНоменклатурыУслуга = Перечисления.ТипыНоменклатуры.Услуга;
	
	ВыборкаПоНоменклатуре = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	КэшЕИ = КэшТаблицаЕИ();
	КэшПлатежныеАгенты = КэшТаблицаПлатежныеАгенты();
	
	Пока ВыборкаПоНоменклатуре.Следующий() Цикл
		
		Если ВыборкаПоНоменклатуре.ЭтоГруппа Тогда
			
			ЗаписьГруппа = МенеджерОфлайнОборудования.ПолучитьЗаписьГруппыТоваров();
			
			ЗаписьГруппа.Код = Строка(Формат(ВыборкаПоНоменклатуре.SKU, "ЧГ=0"));
			
			Если ЗначениеЗаполнено(ВыборкаПоНоменклатуре.SKUГруппы) Тогда
				ЗаписьГруппа.КодГруппы = Строка(Формат(ВыборкаПоНоменклатуре.SKUГруппы, "ЧГ=0"));
				ЗаписьГруппа.УникальныйИдентификаторГруппы = ВыборкаПоНоменклатуре.Группа.УникальныйИдентификатор();
			КонецЕсли;
			
			ЗаписьГруппа.Наименование = ВыборкаПоНоменклатуре.НоменклатураНаименование;
			ЗаписьГруппа.СсылкаГруппы = ВыборкаПоНоменклатуре.Номенклатура;
			ЗаписьГруппа.УникальныйИдентификатор = ВыборкаПоНоменклатуре.Номенклатура.УникальныйИдентификатор();
			ПрайсЛистККМ.ГруппыТоваров.Добавить(ЗаписьГруппа);
			
		Иначе
			
			ЗаписьТовар = МенеджерОфлайнОборудования.ПолучитьЗаписьТовара();
			
			Если ЗначениеЗаполнено(ВыборкаПоНоменклатуре.ПризнакПредметаРасчета) Тогда
				ЗаписьТовар.ПризнакПредметаРасчета = ВыборкаПоНоменклатуре.ПризнакПредметаРасчета;
			КонецЕсли;
			
			Если ВыборкаПоНоменклатуре.МаркируемаяПродукция Тогда
				ЗаполнитьВидПродукцииИС(ВыборкаПоНоменклатуре, ЗаписьТовар);
			Иначе
				ЗаписьТовар.ЭтоМаркированнаяПродукция = Ложь;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ВыборкаПоНоменклатуре.SKUГруппы) Тогда
				ЗаписьТовар.КодГруппы = Строка(Формат(ВыборкаПоНоменклатуре.SKUГруппы, "ЧГ=0"));
				ЗаписьТовар.УникальныйИдентификаторГруппы = ВыборкаПоНоменклатуре.Группа.УникальныйИдентификатор();
			КонецЕсли;
			
			ЗаписьТовар.Наименование	= ВыборкаПоНоменклатуре.НоменклатураНаименование;
			ЗаписьТовар.Артикул			= ВыборкаПоНоменклатуре.Артикул;
			ЗаписьТовар.ЭтоВесовойТовар = ВыборкаПоНоменклатуре.Весовой;
			
			ЗаписьТовар.СтавкаНДС = СтавкаНДСККМ(ВыборкаПоНоменклатуре.СтавкаНДС);
			ЗаписьТовар.Описание = ВыборкаПоНоменклатуре.Описание;
			
			Если ЗначениеЗаполнено(ВыборкаПоНоменклатуре.НомерСекции) Тогда
				ЗаписьТовар.НомерСекции = ВыборкаПоНоменклатуре.НомерСекции;
			КонецЕсли;
			
			Если НЕ ЗаписьТовар.ЭтоМаркированнаяПродукция И НЕ ЗаписьТовар.ЭтоАлкоголь Тогда
				ЗаписьТовар.ЭтоАлкоголь = ВыборкаПоНоменклатуре.Алкоголь;
			КонецЕсли;
			
			Если ЗаписьТовар.ЭтоАлкоголь Тогда
				ЗаписьТовар.АлкогольныеРеквизиты.Маркируемый 		= ВыборкаПоНоменклатуре.Маркируемый;
				ЗаписьТовар.АлкогольныеРеквизиты.ЕмкостьТары		= ВыборкаПоНоменклатуре.ЕмкостьТары;
				ЗаписьТовар.АлкогольныеРеквизиты.Крепость			= ВыборкаПоНоменклатуре.Крепость;
				ЗаписьТовар.АлкогольныеРеквизиты.ИННПроизводителя	= ВыборкаПоНоменклатуре.ИННПроизводителя;
				ЗаписьТовар.АлкогольныеРеквизиты.КПППроизводителя	= ВыборкаПоНоменклатуре.КПППроизводителя;
				ЗаписьТовар.АлкогольныеРеквизиты.ВРозлив 			= ВыборкаПоНоменклатуре.ПродаетсяВРозлив;
				ЗаписьТовар.АлкогольныеРеквизиты.КодВидаАлкогольнойПродукции = ВыборкаПоНоменклатуре.КодВидаАлкогольнойПродукции;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ВыборкаПоНоменклатуре.ЕдиницаИзмерения) Тогда
				ЗаписатьЕИ(ПрайсЛистККМ, ЗаписьТовар, ВыборкаПоНоменклатуре.ЕдиницаИзмерения, КэшЕИ);
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ВыборкаПоНоменклатуре.ДоговорКонтрагента) Тогда
				ЗаписатьДоговорПлатежногоАгента(ПрайсЛистККМ, ЗаписьТовар, ВыборкаПоНоменклатуре.ДоговорКонтрагента, КэшПлатежныеАгенты);
			КонецЕсли;
			
			ЗаписьТовар.УникальныйИдентификатор = ВыборкаПоНоменклатуре.Номенклатура.УникальныйИдентификатор();
			
			ЗаписьТовар.СсылкаНоменклатура = ВыборкаПоНоменклатуре.Номенклатура;
			
			Если ВыборкаПоНоменклатуре.ЕстьХарактеристики Тогда
				
				ЗаписьТовар.ИмеетХарактеристики = Истина;
				ЗаписьТовар.ИмеетУпаковки       = Ложь;
				
				ВыборкаПоХарактеристикам = ВыборкаПоНоменклатуре.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
				
				Пока ВыборкаПоХарактеристикам.Следующий() Цикл
					
					ЗаписьХарактеристика = МенеджерОфлайнОборудования.ПолучитьЗаписьХарактеристики();
					ЗаписьХарактеристика.Наименование = ВыборкаПоХарактеристикам.ХарактеристикаНаименование;
					ЗаписьХарактеристика.СсылкаХарактеристика = ВыборкаПоХарактеристикам.Характеристика;
					
					Если ВыборкаПоХарактеристикам.ЕстьУпаковки Тогда
						
						ЗаписьХарактеристика.ИмеетУпаковки       = Истина;
						
						ВыборкаПоУпаковкам = ВыборкаПоХарактеристикам.Выбрать();
						
						Пока ВыборкаПоУпаковкам.Следующий() Цикл
							
							Если ЗначениеЗаполнено(ВыборкаПоУпаковкам.Упаковка) Тогда
								
								ЗаписатьУпаковку(ВыборкаПоУпаковкам, ЗаписьХарактеристика);
								
							Иначе
								
								ЗаписьХарактеристика.Код      = Строка(Формат(ВыборкаПоУпаковкам.SKU, "ЧГ=0"));
								ЗаписьХарактеристика.Цена     = ВыборкаПоУпаковкам.Цена;
								ЗаписьХарактеристика.Остаток  = ВыборкаПоУпаковкам.Остаток;
								
								ЗаписатьШтрихкод(ВыборкаПоУпаковкам, ЗаписьХарактеристика);
								
							КонецЕсли;
							
						КонецЦикла;
						
					Иначе
						
						ЗаписьХарактеристика.ИмеетУпаковки = Ложь;
						
						ЗаписатьШтрихкод(ВыборкаПоХарактеристикам, ЗаписьХарактеристика);
						
						ЗаписьХарактеристика.Код      = Строка(Формат(ВыборкаПоХарактеристикам.SKU, "ЧГ=0"));
						ЗаписьХарактеристика.Цена     = ВыборкаПоХарактеристикам.Цена;
						ЗаписьХарактеристика.Остаток  = ВыборкаПоХарактеристикам.Остаток;
						
					КонецЕсли;
					
					ЗаписьХарактеристика.УникальныйИдентификатор = ВыборкаПоХарактеристикам.Характеристика.УникальныйИдентификатор();
					
					ЗаписьТовар.Характеристики.Добавить(ЗаписьХарактеристика);
					
				КонецЦикла;
				
			ИначеЕсли ВыборкаПоНоменклатуре.ЕстьУпаковки И НЕ ВыборкаПоНоменклатуре.ЕстьХарактеристики Тогда
				
				ВыборкаПоПустойХарактеристике = ВыборкаПоНоменклатуре.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
				ВыборкаПоПустойХарактеристике.Следующий();
				
				ВыборкаПоУпаковкам = ВыборкаПоПустойХарактеристике.Выбрать();
				
				ЗаписьТовар.ИмеетУпаковки       = Истина;
				ЗаписьТовар.ИмеетХарактеристики = Ложь;
				
				Пока ВыборкаПоУпаковкам.Следующий() Цикл
					
					Если ЗначениеЗаполнено(ВыборкаПоУпаковкам.Упаковка) Тогда
						ЗаписатьУпаковку(ВыборкаПоУпаковкам, ЗаписьТовар);
					Иначе
						
						ЗаписьТовар.Код      = Строка(Формат(ВыборкаПоУпаковкам.SKU, "ЧГ=0"));
						ЗаписьТовар.Цена     = ВыборкаПоУпаковкам.Цена;
						ЗаписьТовар.Остаток  = ВыборкаПоУпаковкам.Остаток;
						
						ЗаписатьШтрихкод(ВыборкаПоУпаковкам, ЗаписьТовар);
						
					КонецЕсли;
					
				КонецЦикла;
				
			Иначе
				
				ЗаписатьШтрихкод(ВыборкаПоНоменклатуре, ЗаписьТовар);
				
				ЗаписьТовар.Код      = Строка(Формат(ВыборкаПоНоменклатуре.SKU, "ЧГ=0"));
				ЗаписьТовар.Цена     = ВыборкаПоНоменклатуре.Цена;
				ЗаписьТовар.Остаток  = ВыборкаПоНоменклатуре.Остаток;
				
				ЗаписьТовар.ИмеетУпаковки       = Ложь;
				ЗаписьТовар.ИмеетХарактеристики = Ложь;
				
			КонецЕсли;
			
			ПрайсЛистККМ.Товары.Добавить(ЗаписьТовар);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция СтавкаНДС(СтавкаНДСККМ)
	
	Если СтавкаНДСККМ = МенеджерОфлайнОборудования.ПолучитьСтавкуБезНДС() Тогда
		
		Возврат Справочники.СтавкиНДС.ПолучитьСтавкуНДСБезНДС();
		
	ИначеЕсли СтавкаНДСККМ = МенеджерОфлайнОборудования.ПолучитьСтавкуНДС0() Тогда
		
		Возврат Справочники.СтавкиНДС.ПолучитьСтавкуНДСНоль();
		
	Иначе 
		
		Возврат Справочники.СтавкиНДС.ПолучитьСтавкуНДСПоЗначению(СтавкаНДСККМ);
		
	КонецЕсли;
	
КонецФункции

Функция СтавкаНДСККМ(СтавкаНДС)
	
	Если СтавкаНДС = Перечисления.СтавкиНДС.БезНДС Тогда
		
		Возврат МенеджерОфлайнОборудования.ПолучитьСтавкуБезНДС();
		
	ИначеЕсли СтавкаНДС = Перечисления.СтавкиНДС.НДС0 Тогда
		
		Возврат МенеджерОфлайнОборудования.ПолучитьСтавкуНДС0();
		
	ИначеЕсли СтавкаНДС = Перечисления.СтавкиНДС.НДС10 Тогда
		
		Возврат МенеджерОфлайнОборудования.ПолучитьСтавкуНДС10();
		
	ИначеЕсли СтавкаНДС = Перечисления.СтавкиНДС.НДС18 Тогда
		
		Возврат МенеджерОфлайнОборудования.ПолучитьСтавкуНДС18();
		
	ИначеЕсли СтавкаНДС = Перечисления.СтавкиНДС.НДС20 Тогда
		
		Возврат МенеджерОфлайнОборудования.ПолучитьСтавкуНДС20();
		
	КонецЕсли;
	
КонецФункции

Функция КэшТаблицаЕИ()
	
	ТаблицаКэш = Новый ТаблицаЗначений;
	ТаблицаКэш.Колонки.Добавить("Ссылка", Новый ОписаниеТипов("СправочникСсылка.БазовыеЕдиницыИзмерения"));
	ТаблицаКэш.Колонки.Добавить("Код", Новый ОписаниеТипов("Строка"));
	ТаблицаКэш.Колонки.Добавить("УИ", Новый ОписаниеТипов("УникальныйИдентификатор"));
	
	Возврат ТаблицаКэш;
	
КонецФункции

Функция КэшТаблицаПлатежныеАгенты()
	
	ТаблицаКэш = Новый ТаблицаЗначений;
	ТаблицаКэш.Колонки.Добавить("Ссылка", Новый ОписаниеТипов("СправочникСсылка.ДоговорыКонтрагентов"));
	ТаблицаКэш.Колонки.Добавить("КодПоставщика", Новый ОписаниеТипов("Строка"));
	ТаблицаКэш.Колонки.Добавить("КодАгента", Новый ОписаниеТипов("Строка"));
	ТаблицаКэш.Колонки.Добавить("Код", Новый ОписаниеТипов("Строка"));
	ТаблицаКэш.Колонки.Добавить("УИ", Новый ОписаниеТипов("УникальныйИдентификатор"));
	
	Возврат ТаблицаКэш;
	
КонецФункции

Процедура ЗаписатьЕИ(ПрайсЛистККМ, ЗаписьТовар, ЕдиницаИзмерения, КэшТаблица)
	
	Кэш = КэшТаблица.Найти(ЕдиницаИзмерения, "Ссылка");
	
	Если Кэш = Неопределено Тогда
		
		СтруктураРеквизитов = Новый Структура;
		СтруктураРеквизитов.Вставить("Код", "Код");
		СтруктураРеквизитов.Вставить("Наименование", "Наименование");
		
		РеквизитыЕИ = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ЕдиницаИзмерения, СтруктураРеквизитов);
		
		ЕдиницаИзмеренияККМ = МенеджерОфлайнОборудования.ПолучитьЗаписьЕдиницыИзмерения();
		ЕдиницаИзмеренияККМ.Код = РеквизитыЕИ.Код;
		ЕдиницаИзмеренияККМ.Наименование = РеквизитыЕИ.Наименование;
		ЕдиницаИзмеренияККМ.УникальныйИдентификатор = ЕдиницаИзмерения.УникальныйИдентификатор();
		ЕдиницаИзмеренияККМ.СсылкаЕдиницыИзмерения = ЕдиницаИзмерения;
		
		ПрайсЛистККМ.ЕдиницыИзмерения.Добавить(ЕдиницаИзмеренияККМ);
		
		Кэш = КэшТаблица.Добавить();
		Кэш.Ссылка = ЕдиницаИзмерения;
		Кэш.Код = РеквизитыЕИ.Код;
		Кэш.УИ = ЕдиницаИзмеренияККМ.УникальныйИдентификатор;
		
	КонецЕсли;
	
	ЗаписьТовар.КодЕдиницыИзмерения = Кэш.Код;
	ЗаписьТовар.УникальныйИдентификаторЕдиницыИзмерения = Кэш.УИ;
	
КонецПроцедуры

Процедура ЗаписатьДоговорПлатежногоАгента(ПрайсЛистККМ, ЗаписьТовар, ДоговорКонтрагента, КэшТаблица)
	
	Кэш = КэшТаблица.Найти(ДоговорКонтрагента, "Ссылка");
	
	Если Кэш = Неопределено Тогда
		
		СтруктураРеквизитов = Новый Структура;
		
		// Поставщик
		СтруктураРеквизитов.Вставить("ТелефонПоставщика",  "ТелефонПоставщика");
		СтруктураРеквизитов.Вставить("ИННПоставщикаУслуг", "ИННПоставщикаУслуг");
		СтруктураРеквизитов.Вставить("Агент", "Агент");
		
		// Агент
		СтруктураРеквизитов.Вставить("ПризнакАгента", 						"ПризнакАгента");
		СтруктураРеквизитов.Вставить("ОперацияПлатежногоАгента", 			"ОперацияПлатежногоАгента");
		СтруктураРеквизитов.Вставить("ТелефонПлатежногоАгента", 			"ТелефонПлатежногоАгента");
		СтруктураРеквизитов.Вставить("ТелефонОператораПеревода", 			"ТелефонОператораПеревода");
		СтруктураРеквизитов.Вставить("НаименованиеОператораПеревода", 		"НаименованиеОператораПеревода");
		СтруктураРеквизитов.Вставить("АдресОператораПеревода", 				"АдресОператораПеревода");
		СтруктураРеквизитов.Вставить("ИННОператораПеревода", 				"ИННОператораПеревода");
		СтруктураРеквизитов.Вставить("ТелефонОператораПоПриемуПлатежей", 	"ТелефонОператораПоПриемуПлатежей");
		
		РеквизитыДоговора = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДоговорКонтрагента, СтруктураРеквизитов);
		
		Код = Неопределено;
		УУИД = ДоговорКонтрагента.УникальныйИдентификатор();
		
		Если КэшТаблица.Количество() = 0 Тогда
			Код = "1";
		Иначе
			ПоследнийКэш = КэшТаблица.Получить(КэшТаблица.Количество()-1);
			Код = Строка(Число(ПоследнийКэш.Код) + 1);
		КонецЕсли;
		
		КодПоставщика = Неопределено;
		Если ЗначениеЗаполнено(РеквизитыДоговора.ТелефонПоставщика)
			ИЛИ ЗначениеЗаполнено(РеквизитыДоговора.ИННПоставщикаУслуг)
			ИЛИ ЗначениеЗаполнено(РеквизитыДоговора.Агент) Тогда
			
			ДанныеПоставщикаККМ = МенеджерОфлайнОборудования.ПолучитьЗаписьДанныхПоставщика();
			ДанныеПоставщикаККМ.Код = Код;
			ДанныеПоставщикаККМ.УникальныйИдентификатор = УУИД;
			ДанныеПоставщикаККМ.ТелефонПоставщика = РеквизитыДоговора.ТелефонПоставщика;
			ДанныеПоставщикаККМ.НаименованиеПоставщика = Строка(РеквизитыДоговора.Агент);
			ДанныеПоставщикаККМ.ИННПоставщика = РеквизитыДоговора.ИННПоставщикаУслуг;
			
			КодПоставщика = Код;
			
			ПрайсЛистККМ.ДанныеПоставщиков.Добавить(ДанныеПоставщикаККМ);
		КонецЕсли;
		
		КодАгента = Неопределено;
		Если ЗначениеЗаполнено(РеквизитыДоговора.ПризнакАгента)
			ИЛИ ЗначениеЗаполнено(РеквизитыДоговора.ОперацияПлатежногоАгента)
			ИЛИ ЗначениеЗаполнено(РеквизитыДоговора.ТелефонПлатежногоАгента)
			ИЛИ ЗначениеЗаполнено(РеквизитыДоговора.ТелефонОператораПеревода)
			ИЛИ ЗначениеЗаполнено(РеквизитыДоговора.НаименованиеОператораПеревода)
			ИЛИ ЗначениеЗаполнено(РеквизитыДоговора.АдресОператораПеревода)
			ИЛИ ЗначениеЗаполнено(РеквизитыДоговора.ИННОператораПеревода)
			ИЛИ ЗначениеЗаполнено(РеквизитыДоговора.ТелефонОператораПоПриемуПлатежей) Тогда
			
			ДанныеАгентаККМ = МенеджерОфлайнОборудования.ПолучитьЗаписьДанныхАгента();
			ДанныеАгентаККМ.Код = Код;
			ДанныеАгентаККМ.УникальныйИдентификатор = УУИД;
			
			ДанныеАгентаККМ.ПризнакАгента 						= РеквизитыДоговора.ПризнакАгента;
			ДанныеАгентаККМ.ОперацияПлатежногоАгента 			= РеквизитыДоговора.ОперацияПлатежногоАгента;
			ДанныеАгентаККМ.ТелефонПлатежногоАгента 			= РеквизитыДоговора.ТелефонПлатежногоАгента;
			ДанныеАгентаККМ.ТелефонОператораПеревода 			= РеквизитыДоговора.ТелефонОператораПеревода;
			ДанныеАгентаККМ.НаименованиеОператораПеревода 		= РеквизитыДоговора.НаименованиеОператораПеревода;
			ДанныеАгентаККМ.АдресОператораПеревода 				= РеквизитыДоговора.АдресОператораПеревода;
			ДанныеАгентаККМ.ИННОператораПеревода 				= РеквизитыДоговора.ИННОператораПеревода;
			ДанныеАгентаККМ.ТелефонОператораПоПриемуПлатежей 	= РеквизитыДоговора.ТелефонОператораПоПриемуПлатежей;
			
			КодАгента = Код;
			
			ПрайсЛистККМ.ДанныеАгентов.Добавить(ДанныеАгентаККМ);
		КонецЕсли;
		
		Если НЕ КодПоставщика = Неопределено ИЛИ НЕ КодАгента = Неопределено Тогда
			
			Кэш = КэшТаблица.Добавить();
			Кэш.Ссылка = ДоговорКонтрагента;
			Кэш.УИ = УУИД;
			Кэш.КодПоставщика = КодПоставщика;
			Кэш.КодАгента = КодАгента;
			Кэш.Код = Код;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Кэш.КодПоставщика) Тогда
		ЗаписьТовар.КодДанныхПоставщика = Кэш.КодПоставщика;
		ЗаписьТовар.УникальныйИдентификаторДанныхПоставщика = Кэш.УИ;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Кэш.КодАгента) Тогда
		ЗаписьТовар.КодДанныхАгента = Кэш.КодПоставщика;
		ЗаписьТовар.УникальныйИдентификаторДанныхАгента = Кэш.УИ;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаписатьУпаковку(Выборка, Запись)
	
	ЗаписьУпаковка = МенеджерОфлайнОборудования.ПолучитьЗаписьУпаковки();
	
	ЗаписатьШтрихкод(Выборка, ЗаписьУпаковка);
	
	ЗаписьУпаковка.Код      = Строка(Формат(Выборка.SKU, "ЧГ=0"));
	ЗаписьУпаковка.Цена     = Выборка.Цена;
	ЗаписьУпаковка.Остаток  = Выборка.Остаток;
	
	ЗаписьУпаковка.УникальныйИдентификатор = Выборка.Упаковка.УникальныйИдентификатор();
	ЗаписьУпаковка.Коэффициент = Выборка.КоэффициентУпаковки;
	ЗаписьУпаковка.Наименование  = Выборка.УпаковкаНаименование;
	ЗаписьУпаковка.СсылкаУпаковки = Выборка.Упаковка;
	
	Запись.Упаковки.Добавить(ЗаписьУпаковка);
	
КонецПроцедуры

Процедура ЗаписатьШтрихкод(Выборка, Запись)
	
	ШтрихкодыМассив = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Выборка.Штрихкод, " ", Истина);
	
	Для Каждого Штрихкод Из ШтрихкодыМассив Цикл
		ДанныеШтрихкодаККМ = МенеджерОфлайнОборудования.ПолучитьЗаписьШтрихкода();
		ДанныеШтрихкодаККМ.Штрихкод = Штрихкод;
		
		Запись.Штрихкоды.Добавить(ДанныеШтрихкодаККМ);
	КонецЦикла;
	
КонецПроцедуры

Функция ТелефонИзКонтактнойИнформации(Объект)

	Если ЗначениеЗаполнено(Объект) Тогда
	
		Если ТипЗнч(Объект) = Тип("СправочникСсылка.ФизическиеЛица") Тогда
			Окончание = "ФизическогоЛица";
			ВладелецКонтактнойИнформации = Объект;
			
		ИначеЕсли ТипЗнч(Объект) = Тип("СправочникСсылка.Контрагенты") Тогда
			Окончание = "Контрагента";
			ВладелецКонтактнойИнформации = Объект;
			
			Если ВладелецКонтактнойИнформации.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ФизЛицо И ЗначениеЗаполнено(ВладелецКонтактнойИнформации.ФизЛицо) Тогда
				Окончание = "ФизическогоЛица";
				ФизическоеЛицо = ВладелецКонтактнойИнформации.ФизЛицо;
				ВладелецКонтактнойИнформации = ФизическоеЛицо.ПолучитьОбъект();
			КонецЕсли;
			
		ИначеЕсли ТипЗнч(Объект) = Тип("СправочникСсылка.ИнформационныеКарты") Тогда
			Окончание = "ИнформационнойКарты";
			ВладелецКонтактнойИнформации = Объект;
		КонецЕсли;
		
		Если ВладелецКонтактнойИнформации.ЮрФизЛицо =  Перечисления.ЮрФизЛицо.ФизЛицо И ЗначениеЗаполнено(ВладелецКонтактнойИнформации.ФизЛицо) Тогда
			Окончание = "ФизическогоЛица";
			ФизическоеЛицо = ВладелецКонтактнойИнформации.ФизЛицо;
			ВладелецКонтактнойИнформации = ФизическоеЛицо.ПолучитьОбъект();
		КонецЕсли;
		
		ВидТелефона = Справочники.ВидыКонтактнойИнформации["Телефон" + Окончание].Ссылка;
		
		ТаблицаЗначенийКонтактнойИнформации           = ВладелецКонтактнойИнформации.КонтактнаяИнформация.Выгрузить();
		НайденныеСтроки = ТаблицаЗначенийКонтактнойИнформации.НайтиСтроки(Новый Структура("Тип,Вид", Перечисления.ТипыКонтактнойИнформации.Телефон, ВидТелефона));
		
		Если НайденныеСтроки.Количество() > 0 Тогда
			Возврат НайденныеСтроки[0].Представление;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат "";
	
КонецФункции

Функция АдресЭлектроннойПочтыИзКонтактнойИнформации(Объект)

	Если ЗначениеЗаполнено(Объект) Тогда
	
		Если ТипЗнч(Объект) = Тип("СправочникСсылка.ФизическиеЛица") Тогда
			Окончание = "ФизическогоЛица";
			ВладелецКонтактнойИнформации = Объект;
			
		ИначеЕсли ТипЗнч(Объект) = Тип("СправочникСсылка.Контрагенты") Тогда
			Окончание = "Контрагента";
			ВладелецКонтактнойИнформации = Объект;
			
			Если ВладелецКонтактнойИнформации.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ФизЛицо И ЗначениеЗаполнено(ВладелецКонтактнойИнформации.ФизЛицо) Тогда
				Окончание = "ФизическогоЛица";
				ФизическоеЛицо = ВладелецКонтактнойИнформации.ФизЛицо;
				ВладелецКонтактнойИнформации = ФизическоеЛицо.ПолучитьОбъект();
			КонецЕсли;
			
		ИначеЕсли ТипЗнч(Объект) = Тип("СправочникСсылка.ИнформационныеКарты") Тогда
			Окончание = "ИнформационнойКарты";
			ВладелецКонтактнойИнформации = Объект;
		КонецЕсли;
		
		Если ВладелецКонтактнойИнформации.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ФизЛицо И ЗначениеЗаполнено(ВладелецКонтактнойИнформации.ФизЛицо) Тогда
			Окончание = "ФизическогоЛица";
			ФизическоеЛицо = ВладелецКонтактнойИнформации.ФизЛицо;
			ВладелецКонтактнойИнформации = ФизическоеЛицо.ПолучитьОбъект();
		КонецЕсли;
		
		ВидEmail = Справочники.ВидыКонтактнойИнформации["Email" + Окончание].Ссылка;
	
		ТаблицаЗначенийКонтактнойИнформации           = ВладелецКонтактнойИнформации.КонтактнаяИнформация.Выгрузить();
		НайденныеСтроки = ТаблицаЗначенийКонтактнойИнформации.НайтиСтроки(Новый Структура("Тип,Вид", Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты, ВидEmail));
		
		Если НайденныеСтроки.Количество() > 0 Тогда
			Возврат НайденныеСтроки[0].Представление;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат "";
	
КонецФункции

// Функция возвращает таблицу товаров с данными к выгрузке в устройство.
//
// Параметры:
//  Устройство - <СправочникСсылка.ПодключаемоеОборудование> - Устройство для которого необходимо получить данные.
//  ТолькоИзмененные - <Булево> - Флаг получения только измененных данных.
//  ОбновитьКодыТоваров - <Булево> - Флаг обновления кодов товаров перед получением данных.
//
// Возвращаемое значение:
//  <ТаблицаЗначений> товаров к выгрузке.
//
Функция ТоварыКВыгрузке(Устройство, Параметры)
	
	ПравилоОбмена = Параметры.ПравилоОбмена;
	
	РегистрироватьКОбменуПриИзмененииОстатка = Истина;
	
	ТаблицаТоваровПоПравилу = Справочники.ПравилаОбменаСПодключаемымОборудованием.СписокТоваровПоПравилу(ПравилоОбмена);
	
	АвтоматическиГенерироватьSKU = АвтоматическиГенерироватьSKU();
	
	РегистрыСведений.КодыТоваровSKU.ОбновитьКоды_SKU_PLU(ТаблицаТоваровПоПравилу, АвтоматическиГенерироватьSKU, ПравилоОбмена);
	
	ВерхняяГраница = ЗначениеНастроекПовтИсп.ПолучитьЗначениеКонстанты("ВерхняяГраницаДиапазонаSKUВесовогоТовара");
	НижняяГраница  = ЗначениеНастроекПовтИсп.ПолучитьЗначениеКонстанты("НижняяГраницаДиапазонаSKUВесовогоТовара");
	
	ВыгружатьГруппыТоваров = ?(Параметры.Свойство("ВыгружатьГруппыТоваров"), Параметры.ВыгружатьГруппыТоваров, Истина);
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КодыТоваровPLUНаОборудовании.КодТовараSKU КАК SKUГруппы,
	|	КодыТоваровSKU.Номенклатура КАК Номенклатура
	|ПОМЕСТИТЬ КодыГрупп
	|ИЗ
	|	РегистрСведений.КодыТоваровSKU КАК КодыТоваровSKU
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.КодыТоваровPLUНаОборудовании КАК КодыТоваровPLUНаОборудовании
	|		ПО (КодыТоваровPLUНаОборудовании.КодТовараSKU = КодыТоваровSKU.SKU)
	|ГДЕ
	|	КодыТоваровPLUНаОборудовании.ПравилоОбмена = &ПравилоОбмена
	|	И КодыТоваровSKU.Номенклатура <> ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|	И КодыТоваровSKU.Номенклатура.ЭтоГруппа
	|	И &ВыгружатьГруппыТоваров
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТоварыНаСкладахИзменения.Регистратор
	|ПОМЕСТИТЬ РегистраторыТоварыНаСкладах
	|ИЗ
	|	РегистрНакопления.ТоварыНаСкладах.Изменения КАК ТоварыНаСкладахИзменения
	|ГДЕ
	|	ТоварыНаСкладахИзменения.Узел = &Узел
	|	И &РегистрироватьПриИзмененииОстатка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТоварыНаСкладах.Номенклатура,
	|	ТоварыНаСкладах.Характеристика
	|ПОМЕСТИТЬ ТоварыСИзменившемсяОстатком
	|ИЗ
	|	РегистрНакопления.ТоварыНаСкладах КАК ТоварыНаСкладах
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистраторыТоварыНаСкладах КАК РегистраторыТоварыНаСкладах
	|		ПО ТоварыНаСкладах.Регистратор = РегистраторыТоварыНаСкладах.Регистратор
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КодыТоваровPLUНаОборудованииИзменения.КодТовараPLU КАК КодТовараPLU,
	|	КодыТоваровPLUНаОборудованииИзменения.ПравилоОбмена КАК ПравилоОбмена
	|ПОМЕСТИТЬ КодыТоваровPLUИзменения
	|ИЗ
	|	РегистрСведений.КодыТоваровPLUНаОборудовании.Изменения КАК КодыТоваровPLUНаОборудованииИзменения
	|ГДЕ
	|	КодыТоваровPLUНаОборудованииИзменения.Узел = &Узел
	|	И КодыТоваровPLUНаОборудованииИзменения.ПравилоОбмена = &ПравилоОбмена
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КодыТоваровSKU.SKU КАК SKU
	|ПОМЕСТИТЬ SKU_КОбмену
	|ИЗ
	|	РегистрСведений.КодыТоваровSKU КАК КодыТоваровSKU
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТоварыСИзменившемсяОстатком КАК ТоварыСИзменившемсяОстатком
	|		ПО КодыТоваровSKU.Номенклатура = ТоварыСИзменившемсяОстатком.Номенклатура
	|			И КодыТоваровSKU.Характеристика = ТоварыСИзменившемсяОстатком.Характеристика
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	КодыТоваровPLUНаОборудовании.КодТовараSKU
	|ИЗ
	|	РегистрСведений.КодыТоваровPLUНаОборудовании КАК КодыТоваровPLUНаОборудовании
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ КодыТоваровPLUИзменения КАК PLUКОбмену
	|		ПО КодыТоваровPLUНаОборудовании.КодТовараPLU = PLUКОбмену.КодТовараPLU
	|			И КодыТоваровPLUНаОборудовании.ПравилоОбмена = PLUКОбмену.ПравилоОбмена
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КодыТоваровSKU.SKU,
	|	КодыТоваровSKU.Номенклатура,
	|	КодыТоваровSKU.Характеристика,
	|	КодыТоваровSKU.Упаковка,
	|	ВЫБОР
	|		КОГДА SKU_КОбмену.SKU ЕСТЬ NULL 
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ЕстьИзменения
	|ПОМЕСТИТЬ КодыТоваровSKU
	|ИЗ
	|	РегистрСведений.КодыТоваровSKU КАК КодыТоваровSKU
	|		ЛЕВОЕ СОЕДИНЕНИЕ SKU_КОбмену КАК SKU_КОбмену
	|		ПО КодыТоваровSKU.SKU = SKU_КОбмену.SKU
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаТоваровПоПравилу.PLU,
	|	ТаблицаТоваровПоПравилу.SKU,
	|	ТаблицаТоваровПоПравилу.Весовой,
	|	ТаблицаТоваровПоПравилу.Группа,
	|	ТаблицаТоваровПоПравилу.КоличествоОстаток,
	|	ТаблицаТоваровПоПравилу.Номенклатура,
	|	ТаблицаТоваровПоПравилу.Упаковка,
	|	ТаблицаТоваровПоПравилу.Характеристика,
	|	ТаблицаТоваровПоПравилу.Цена,
	|	ТаблицаТоваровПоПравилу.ЭтоГруппа
	|ПОМЕСТИТЬ ТаблицаТоваровПоПравилу
	|ИЗ
	|	&ТаблицаТоваровПоПравилу КАК ТаблицаТоваровПоПравилу
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаТоваровПоПравилу.PLU,
	|	ТаблицаТоваровПоПравилу.SKU,
	|	ТаблицаТоваровПоПравилу.Весовой,
	|	ТаблицаТоваровПоПравилу.Группа,
	|	ВЫРАЗИТЬ(ЕСТЬNULL(ТаблицаТоваровПоПравилу.КоличествоОстаток, 0) КАК ЧИСЛО(15,3)) КАК КоличествоОстаток,
	|	ТаблицаТоваровПоПравилу.Номенклатура,
	|	ТаблицаТоваровПоПравилу.Упаковка,
	|	ТаблицаТоваровПоПравилу.Характеристика,
	|	ТаблицаТоваровПоПравилу.Цена,
	|	ТаблицаТоваровПоПравилу.ЭтоГруппа,
	|	СпрНоменклатура.Наименование КАК НоменклатураНаименование,
	|	СпрНоменклатура.НаименованиеПолное КАК НоменклатураНаименованиеПолное,
	|	СпрНоменклатура.Артикул КАК Артикул,
	|	СпрНоменклатура.Описание КАК Описание,
	|	СпрНоменклатура.СтавкаНДС КАК СтавкаНДС,
	|	СпрНоменклатура.ТипНоменклатуры КАК ТипНоменклатуры,
	|	СпрНоменклатура.АлкогольнаяПродукция КАК АлкогольнаяПродукция,
	|	СпрНоменклатура.ВидАлкогольнойПродукцииЕГАИС КАК ВидАлкогольнойПродукцииЕГАИС,
	|	СпрНоменклатура.ОбъемДАЛ КАК ОбъемДАЛ,
	|	СпрНоменклатура.Крепость КАК Крепость,
	|	СпрНоменклатура.ПроизводительИмпортерАлкогольнойПродукции КАК ПроизводительИмпортерАлкогольнойПродукции,
	|	ЕСТЬNULL(УпаковкиНоменклатуры.Коэффициент, 1) КАК КоэффициентУпаковки,
	|	ЕСТЬNULL(ХарактеристикиНоменклатуры.Наименование, &ПустаяСтрока) КАК ХарактеристикаНаименование,
	|	ЕдиницыИзмерения.Наименование КАК ЕдиницаИзмеренияНаименование,
	|	ЕСТЬNULL(УпаковкиНоменклатуры.Наименование, &ПустаяСтрока) КАК УпаковкаНаименование,
	|	ВЫБОР
	|		КОГДА SKU_КОбмену.SKU ЕСТЬ NULL 
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ЕстьИзменения
	|ПОМЕСТИТЬ ТаблицаТоваров
	|ИЗ
	|	ТаблицаТоваровПоПравилу КАК ТаблицаТоваровПоПравилу
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СпрНоменклатура
	|		ПО ТаблицаТоваровПоПравилу.Номенклатура = СпрНоменклатура.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.УпаковкиНоменклатуры КАК УпаковкиНоменклатуры
	|		ПО ТаблицаТоваровПоПравилу.Упаковка = УпаковкиНоменклатуры.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ХарактеристикиНоменклатуры КАК ХарактеристикиНоменклатуры
	|		ПО ТаблицаТоваровПоПравилу.Характеристика = ХарактеристикиНоменклатуры.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.БазовыеЕдиницыИзмерения КАК ЕдиницыИзмерения
	|		ПО (СпрНоменклатура.Ссылка.ЕдиницаИзмерения = ЕдиницыИзмерения.Ссылка)
	|		ЛЕВОЕ СОЕДИНЕНИЕ SKU_КОбмену КАК SKU_КОбмену
	|		ПО ТаблицаТоваровПоПравилу.SKU = SKU_КОбмену.SKU
	|ГДЕ 
	|	НЕ ТаблицаТоваровПоПравилу.SKU ЕСТЬ NULL
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаТоваров.PLU КАК КодТовараPLU,
	|	ТаблицаТоваров.SKU КАК КодТовараSKU,
	|	ТаблицаТоваров.Номенклатура КАК Номенклатура,
	|	ТаблицаТоваров.Характеристика КАК Характеристика,
	|	ТаблицаТоваров.Упаковка КАК Упаковка,
	|	ТаблицаТоваров.СтавкаНДС КАК СтавкаНДС,
	|	ТаблицаТоваров.ЭтоГруппа КАК ЭтоГруппа,
	|	ТаблицаТоваров.ТипНоменклатуры КАК ТипНоменклатуры,
	|	ТаблицаТоваров.Весовой КАК Весовой,
	|	ТаблицаТоваров.КоэффициентУпаковки КАК КоэффициентУпаковки,
	|	ТаблицаТоваров.НоменклатураНаименование КАК НоменклатураНаименование,
	|	ТаблицаТоваров.НоменклатураНаименование КАК НоменклатураНаименованиеПолное,
	|	ТаблицаТоваров.Артикул КАК Артикул,
	|	ТаблицаТоваров.Описание КАК Описание,
	|	ТаблицаТоваров.ХарактеристикаНаименование КАК ХарактеристикаНаименование,
	|	ЕСТЬNULL(ТаблицаТоваров.ЕдиницаИзмеренияНаименование, &ПустаяСтрока) КАК ЕдиницаИзмеренияНаименование,
	|	ТаблицаТоваров.УпаковкаНаименование КАК УпаковкаНаименование,
	|	ЕСТЬNULL(Штрихкоды.Штрихкод, &ПустаяСтрока) КАК Штрихкод,
	|	ТаблицаТоваров.КоличествоОстаток / ВЫБОР
	|		КОГДА ТаблицаТоваров.КоэффициентУпаковки = 0
	|			ТОГДА 1
	|		ИНАЧЕ ЕСТЬNULL(ТаблицаТоваров.КоэффициентУпаковки, 1)
	|	КОНЕЦ КАК КоличествоОстаток,
	|	ВЫБОР
	|		КОГДА ТаблицаТоваров.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС18)
	|			ТОГДА 1
	|		ИНАЧЕ ВЫБОР
	|				КОГДА ТаблицаТоваров.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС10)
	|					ТОГДА 2
	|				ИНАЧЕ 3
	|			КОНЕЦ
	|	КОНЕЦ КАК КодНалога,
	|	ТаблицаТоваров.АлкогольнаяПродукция КАК Алкоголь,
	|	ВЫБОР
	|		КОГДА ТаблицаТоваров.АлкогольнаяПродукция
	|			ТОГДА ТаблицаТоваров.ВидАлкогольнойПродукцииЕГАИС.Маркируемый
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК Маркируемый,
	|	ВЫБОР
	|		КОГДА ТаблицаТоваров.АлкогольнаяПродукция
	|			ТОГДА ТаблицаТоваров.ВидАлкогольнойПродукцииЕГАИС.Код
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК КодВидаАлкогольнойПродукции,
	|	ВЫБОР
	|		КОГДА ТаблицаТоваров.АлкогольнаяПродукция
	|			ТОГДА ТаблицаТоваров.ОбъемДАЛ * 10
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК ЕмкостьТары,
	|	ВЫБОР
	|		КОГДА ТаблицаТоваров.АлкогольнаяПродукция
	|			ТОГДА ТаблицаТоваров.Крепость
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК Крепость,
	|	ВЫБОР
	|		КОГДА ТаблицаТоваров.АлкогольнаяПродукция
	|			ТОГДА ТаблицаТоваров.ПроизводительИмпортерАлкогольнойПродукции.ИНН
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК ИННПроизводителя,
	|	ВЫБОР
	|		КОГДА ТаблицаТоваров.АлкогольнаяПродукция
	|			ТОГДА ТаблицаТоваров.ПроизводительИмпортерАлкогольнойПродукции.КПП
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК КПППроизводителя,
	|	КодыГрупп.SKUГруппы КАК SKUГруппы,
	|	ТаблицаТоваров.Цена КАК Цена
	|ИЗ
	|	ТаблицаТоваров КАК ТаблицаТоваров
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.Штрихкоды КАК Штрихкоды
	|		ПО ТаблицаТоваров.Номенклатура = Штрихкоды.Владелец
	|			И ТаблицаТоваров.Характеристика = Штрихкоды.Характеристика
	|			И ТаблицаТоваров.Упаковка = Штрихкоды.Упаковка
	|		ЛЕВОЕ СОЕДИНЕНИЕ КодыГрупп КАК КодыГрупп
	|		ПО ТаблицаТоваров.Группа = КодыГрупп.Номенклатура
	|ГДЕ
	|	ТаблицаТоваров.Номенклатура <> ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|	И ВЫБОР
	|			КОГДА &ТолькоИзмененные = ИСТИНА
	|				ТОГДА ТаблицаТоваров.ЕстьИзменения = ИСТИНА
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ
	|	И ВЫБОР
	|			КОГДА &ВыгружатьГруппыТоваров = ЛОЖЬ
	|				ТОГДА НЕ ТаблицаТоваров.ЭтоГруппа
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ
	|ИТОГИ
	|	МАКСИМУМ(Штрихкод)
	|ПО
	|	КодТовараPLU";
	
	Запрос.УстановитьПараметр("ТолькоИзмененные",       Параметры.ЧастичнаяВыгрузка); 
	Запрос.УстановитьПараметр("ПравилоОбмена",          Параметры.ПравилоОбмена);
	Запрос.УстановитьПараметр("Узел",                   Параметры.УзелИнформационнойБазы);
	Запрос.УстановитьПараметр("Склад",                  Параметры.ПравилоОбмена.Склад);
	Запрос.УстановитьПараметр("ВыгружатьГруппыТоваров", ВыгружатьГруппыТоваров);
	Запрос.УстановитьПараметр("РегистрироватьПриИзмененииОстатка", РегистрироватьКОбменуПриИзмененииОстатка);
	Запрос.УстановитьПараметр("ПустаяСтрока", "");
	Запрос.УстановитьПараметр("ТаблицаТоваровПоПравилу", ТаблицаТоваровПоПравилу);
	Запрос.УстановитьПараметр("ВыгружатьГруппыТоваров",  ВыгружатьГруппыТоваров);
	
	ТаблицаТоваров = Новый ТаблицаЗначений;
	ТаблицаТоваров.Колонки.Добавить("PLU",							Новый ОписаниеТипов("Число"));
	ТаблицаТоваров.Колонки.Добавить("SKU",							Новый ОписаниеТипов("Число"));
	ТаблицаТоваров.Колонки.Добавить("SKUГруппы",					Новый ОписаниеТипов("Число"));
	ТаблицаТоваров.Колонки.Добавить("Номенклатура",					Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	ТаблицаТоваров.Колонки.Добавить("Характеристика",				Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
	ТаблицаТоваров.Колонки.Добавить("Упаковка",						Новый ОписаниеТипов("СправочникСсылка.УпаковкиНоменклатуры"));
	ТаблицаТоваров.Колонки.Добавить("СтавкаНДС",					Новый ОписаниеТипов("СправочникСсылка.СтавкиНДС"));
	ТаблицаТоваров.Колонки.Добавить("ТипНоменклатуры",				Новый ОписаниеТипов("ПеречислениеСсылка.ТипыНоменклатуры"));
	ТаблицаТоваров.Колонки.Добавить("Артикул",						Новый ОписаниеТипов("Строка"));
	ТаблицаТоваров.Колонки.Добавить("Описание",						Новый ОписаниеТипов("Строка"));
	ТаблицаТоваров.Колонки.Добавить("ЕдиницаИзмерения",				Новый ОписаниеТипов("Строка"));
	ТаблицаТоваров.Колонки.Добавить("ЕдиницаИзмеренияНаименование", Новый ОписаниеТипов("Строка"));
	ТаблицаТоваров.Колонки.Добавить("Наименование",					Новый ОписаниеТипов("Строка"));
	ТаблицаТоваров.Колонки.Добавить("НаименованиеПолное",			Новый ОписаниеТипов("Строка"));
	ТаблицаТоваров.Колонки.Добавить("Штрихкод",						Новый ОписаниеТипов("Строка"));
	ТаблицаТоваров.Колонки.Добавить("МассивШтрихкодов",				Новый ОписаниеТипов("Массив"));
	ТаблицаТоваров.Колонки.Добавить("Цена",							Новый ОписаниеТипов("Число"));
	ТаблицаТоваров.Колонки.Добавить("Весовой",						Новый ОписаниеТипов("Булево"));
	ТаблицаТоваров.Колонки.Добавить("ЭтоГруппа",					Новый ОписаниеТипов("Булево"));
	ТаблицаТоваров.Колонки.Добавить("Остаток",						Новый ОписаниеТипов("Число"));
	ТаблицаТоваров.Колонки.Добавить("КоэффициентУпаковки",			Новый ОписаниеТипов("Число"));
	ТаблицаТоваров.Колонки.Добавить("ЕстьОшибки",					Новый ОписаниеТипов("Булево"));
	ТаблицаТоваров.Колонки.Добавить("ИндексКартинкиЕстьИзменения",	Новый ОписаниеТипов("Число"));
	ТаблицаТоваров.Колонки.Добавить("НоменклатураНаименование",		Новый ОписаниеТипов("Строка"));
	ТаблицаТоваров.Колонки.Добавить("УпаковкаНаименование",			Новый ОписаниеТипов("Строка"));
	ТаблицаТоваров.Колонки.Добавить("ХарактеристикаНаименование",	Новый ОписаниеТипов("Строка"));
	ТаблицаТоваров.Колонки.Добавить("КодНалога",					Новый ОписаниеТипов("Число"));
	ТаблицаТоваров.Колонки.Добавить("Алкоголь",						Новый ОписаниеТипов("Булево"));
	ТаблицаТоваров.Колонки.Добавить("Маркируемый",					Новый ОписаниеТипов("Булево"));
	ТаблицаТоваров.Колонки.Добавить("КодВидаАлкогольнойПродукции",	Новый ОписаниеТипов("Строка"));
	ТаблицаТоваров.Колонки.Добавить("ЕмкостьТары",					Новый ОписаниеТипов("Число"));
	ТаблицаТоваров.Колонки.Добавить("Крепость",						Новый ОписаниеТипов("Число"));
	ТаблицаТоваров.Колонки.Добавить("ИННПроизводителя",				Новый ОписаниеТипов("Строка"));
	ТаблицаТоваров.Колонки.Добавить("КПППроизводителя",				Новый ОписаниеТипов("Строка"));
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаПоКодам = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаПоКодам.Следующий() Цикл
		
		НоваяСтрока = ТаблицаТоваров.Добавить();
		
		Выборка = ВыборкаПоКодам.Выбрать();
		Пока Выборка.Следующий() Цикл
			
			Штрихкод = СокрЛП(Выборка.Штрихкод);
			
			Если НЕ ЗначениеЗаполнено(НоваяСтрока.PLU) Тогда
				
				НоваяСтрока.PLU								= Выборка.КодТовараPLU;
				НоваяСтрока.SKU								= Выборка.КодТовараSKU;
				НоваяСтрока.SKUГруппы						= ?(ВыгружатьГруппыТоваров, Выборка.SKUГруппы, 0);
				НоваяСтрока.Наименование					= ФормированиеПечатныхФормСервер.ПолучитьПредставлениеНоменклатурыДляПечати(Выборка.НоменклатураНаименование, Выборка.ХарактеристикаНаименование) + ?(ЗначениеЗаполнено(Выборка.УпаковкаНаименование),", " + Выборка.УпаковкаНаименование,"");
				НоваяСтрока.НаименованиеПолное				= ФормированиеПечатныхФормСервер.ПолучитьПредставлениеНоменклатурыДляПечати(Выборка.НоменклатураНаименованиеПолное, Выборка.ХарактеристикаНаименование) + ?(ЗначениеЗаполнено(Выборка.УпаковкаНаименование),", " + Выборка.УпаковкаНаименование,"");
				НоваяСтрока.Остаток							= Выборка.КоличествоОстаток;
				НоваяСтрока.ИндексКартинкиЕстьИзменения		= 0;
				
				НоваяСтрока.Штрихкод						= Штрихкод;
				
				ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка,
					"Номенклатура,
					|Характеристика,
					|ХарактеристикаНаименование,
					|Упаковка,
					|Весовой,
					|ЭтоГруппа,
					|Артикул,
					|Описание,
					|ЕдиницаИзмеренияНаименование,
					|СтавкаНДС,
					|КоэффициентУпаковки,
					|ТипНоменклатуры,
					|УпаковкаНаименование,
					|НоменклатураНаименование,
					|КодНалога,
					|Алкоголь,
					|Маркируемый,
					|КодВидаАлкогольнойПродукции,
					|ЕмкостьТары,
					|Крепость,
					|ИННПроизводителя,
					|КПППроизводителя,
					|Цена");
				
			Иначе
				НоваяСтрока.Штрихкод = НоваяСтрока.Штрихкод + " " + Штрихкод;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(Штрихкод) Тогда
				НоваяСтрока.МассивШтрихкодов.Добавить(Штрихкод);
			КонецЕсли;
			
		КонецЦикла;
		
		Если Параметры.ТипОборудования = Перечисления.ТипыПодключаемогоОборудования.ВесыСПечатьюЭтикеток Тогда
			Если (Параметры.СвояНумерацияPLUНаОборудовании И НоваяСтрока.PLU > Параметры.МаксимальныйКодPLU)
				ИЛИ (НоваяСтрока.SKU > ВерхняяГраница) ИЛИ (НоваяСтрока.SKU < НижняяГраница) Тогда
				НоваяСтрока.ЕстьОшибки = Истина;
			КонецЕсли
		КонецЕсли;
		
	КонецЦикла;
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат ТаблицаТоваров;
	
КонецФункции

Процедура ДобавитьГруппыНоменклатуры(Товары, МассивНоменклатур, ПравилоОбмена)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	СпрНоменклатура.Родитель КАК Номенклатура,
	|	МАКСИМУМ(КодыТоваровSKU.SKU) КАК SKU,
	|	СпрНоменклатура.Родитель.Родитель КАК Группа
	|ИЗ
	|	Справочник.Номенклатура КАК СпрНоменклатура
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КодыТоваровSKU КАК КодыТоваровSKU
	|		ПО СпрНоменклатура.Родитель = КодыТоваровSKU.Номенклатура
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КодыТоваровSKU КАК КодыТоваровSKUГруппы
	|		ПО СпрНоменклатура.Родитель.Родитель = КодыТоваровSKUГруппы.Номенклатура
	|ГДЕ
	|	СпрНоменклатура.Ссылка В(&МассивНоменклатур)
	|	И НЕ СпрНоменклатура.Родитель = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|
	|СГРУППИРОВАТЬ ПО
	|	СпрНоменклатура.Родитель,
	|	КодыТоваровSKUГруппы.SKU,
	|	СпрНоменклатура.Родитель.Родитель";
	
	Запрос.УстановитьПараметр("ПравилоОбмена", ПравилоОбмена);
	Запрос.УстановитьПараметр("МассивНоменклатур", МассивНоменклатур);
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		
	Иначе
		Выборка = РезультатЗапроса.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			НоваяСтрока = Товары.Вставить(0);
			НоваяСтрока.Номенклатура   = Выборка.Номенклатура;
			НоваяСтрока.SKU            = Выборка.SKU;
			НоваяСтрока.Группа         = Выборка.Группа;
			НоваяСтрока.ЭтоГруппа      = Истина;
			НоваяСтрока.Весовой        = Ложь;
			
		КонецЦикла;
		
		МассивНоменклатур = РезультатЗапроса.Выгрузить().ВыгрузитьКолонку("Номенклатура");
		
		ДобавитьГруппыНоменклатуры(Товары, МассивНоменклатур, ПравилоОбмена);
		
	КонецЕсли;
	
КонецПроцедуры

Функция ДокументОРП(ОтчетОРП, РеквизитыККМ, Комментарий)
	
	УИ = Новый УникальныйИдентификатор(СокрЛП(ОтчетОРП.УникальныйИдентификаторОтчета));
	
	ОтчетСсылка = Документы.ОтчетОРозничныхПродажах.ПолучитьСсылку(УИ);
	
	ОтчетОРозничныхПродажахОбъект = ОтчетСсылка.ПолучитьОбъект();
	
	Если ОтчетОРозничныхПродажахОбъект = Неопределено Тогда
		ОтчетОРозничныхПродажахОбъект = Документы.ОтчетОРозничныхПродажах.СоздатьДокумент();
		ОтчетОРозничныхПродажахОбъект.УстановитьСсылкуНового(ОтчетСсылка);
	КонецЕсли;
	
	ОтчетОРозничныхПродажахОбъект.Товары.Очистить();
	ОтчетОРозничныхПродажахОбъект.ОплатаПлатежнымиКартами.Очистить();
	ОтчетОРозничныхПродажахОбъект.ВозвращенныеТовары.Очистить();
	ОтчетОРозничныхПродажахОбъект.ОплатаБанковскимиКредитами.Очистить();
	ОтчетОРозничныхПродажахОбъект.РасчетыСКлиентами.Очистить();
	ОтчетОРозничныхПродажахОбъект.СуммаОплатыНаличных = 0;
	
	ОтчетОРозничныхПродажахОбъект.Дата               = ОтчетОРП.Дата;
	ОтчетОРозничныхПродажахОбъект.Магазин            = РеквизитыККМ.Магазин;
	ОтчетОРозничныхПродажахОбъект.КассаККМ           = РеквизитыККМ.КассаККМ;
	ОтчетОРозничныхПродажахОбъект.Комментарий        = Комментарий;
	ОтчетОРозничныхПродажахОбъект.Организация        = РеквизитыККМ.Организация;
	ОтчетОРозничныхПродажахОбъект.Ответственный      = Пользователи.ТекущийПользователь();
	ОтчетОРозничныхПродажахОбъект.ЦенаВключаетНДС    = Истина;
	ОтчетОРозничныхПродажахОбъект.УчитыватьНДС       = Истина;
	
	Возврат ОтчетОРозничныхПродажахОбъект;
	
КонецФункции

Процедура ЗаписатьДокументОРП(ОтчетОРозничныхПродажахОбъект)
	
	ПараметрыУказанияСерий = Новый ФиксированнаяСтруктура(Документы.ОтчетОРозничныхПродажах.ПараметрыУказанияСерий(ОтчетОРозничныхПродажахОбъект));
	ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьСтатусыУказанияСерий(ОтчетОРозничныхПродажахОбъект,ПараметрыУказанияСерий);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС",
	ОбработкаТабличнойЧастиТоварыКлиентСервер.СтруктураПересчетаСуммыНДСВТЧ(ОтчетОРозничныхПродажахОбъект));
	
	СтруктураТЧ = Новый Структура;
	СтруктураТЧ.Вставить("СтрокиТЧ" , ОтчетОРозничныхПродажахОбъект.Товары);
	
	ОбработкаТабличнойЧастиТоварыСервер.ПриИзмененииРеквизитовВТЧСервер(СтруктураТЧ, СтруктураДействий, Неопределено);
	
	Попытка
		Если ОтчетОРозничныхПродажахОбъект.ПроверитьЗаполнение() Тогда
			ОтчетОРозничныхПродажахОбъект.Записать(РежимЗаписиДокумента.Проведение);
		Иначе
			ОтчетОРозничныхПродажахОбъект.Записать(РежимЗаписиДокумента.Запись);
		КонецЕсли;
	Исключение
		ОтчетОРозничныхПродажахОбъект.Записать(РежимЗаписиДокумента.Запись);
	КонецПопытки;
	
	СуммаВыемки = СуммаВыемкиОтчета(ОтчетОРозничныхПродажахОбъект);
	
	Если НЕ СуммаВыемки = 0 Тогда
		
		ВыемкиДС = Документы.ВыемкаДенежныхСредствИзКассыККМ.ПолучитьВыемкиДСОтчетаОРозничныхПродажах(
			ОтчетОРозничныхПродажахОбъект.Ссылка);
		
		ДополнительныеПараметры = Новый Структура;
		
		Если НЕ ВыемкиДС.Количество() = 0 Тогда
			ДополнительныеПараметры.Вставить("ВыемкаСсылка", ВыемкиДС[0]);
		КонецЕсли;
		
		Отказ = Ложь;
		ДокументВыемкаДенежныхСредствСсылка = ДенежныеСредстваВызовСервера.СоздатьДокументВыемкаДенежныхСредствИзКассыККМ(
			Отказ,
			СуммаВыемки,
			ОтчетОРозничныхПродажахОбъект.КассаККМ,
			ОтчетОРозничныхПродажахОбъект.Ссылка,
			ДополнительныеПараметры);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура СоздатьИЗаполнитьОтчетОПродажах(МассивСозданныхДокументов, РеквизитыККМ, ТаблицыДанных,
		Комментарий)
	
	АналитикаОперацииВозвратаОтПокупателя = АналитикаОперацииВозвратаОтПокупателя();
	
	ПакетДанныхОРП = ПакетДанныхОРП(ТаблицыДанных, РеквизитыККМ);
	
	ВыборкаПоТоварамГруппировка = ПакетДанныхОРП[1].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	ВыборкаПоМаркамГруппировка = ПакетДанныхОРП[4].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам); 
	АкцизныеМаркиЕГАИСОтчета = ПакетДанныхОРП[4].Выгрузить();
	ВыборкаПоВозвратамГруппировка = ПакетДанныхОРП[6].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	ВыборкаПоОплатамГруппировка = ПакетДанныхОРП[8].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	ВыборкаПоРасчетамСКлиентамиГруппировка = ПакетДанныхОРП[11].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	ТаблицаТоварыЗаказов = ПакетДанныхОРП[12].Выгрузить();
	
	Для Каждого ОтчетОРП Из ТаблицыДанных.ТаблицаКлючевыхРеквизитовОРП Цикл
		
		ОтчетОРозничныхПродажахОбъект = ДокументОРП(ОтчетОРП, РеквизитыККМ, Комментарий);
		
#Область ТОВАРЫ

		ВыборкаПоТоварамГруппировка.Сбросить();
		
		Если ВыборкаПоТоварамГруппировка.НайтиСледующий(ОтчетОРП.УникальныйИдентификаторОтчета,
			"УникальныйИдентификаторОтчета") Тогда
			
			ВыборкаПоТоварам = ВыборкаПоТоварамГруппировка.Выбрать();
			
			Пока ВыборкаПоТоварам.Следующий() Цикл
				
				Если ВыборкаПоТоварам.Количество = 0 Тогда
					Продолжить;
				КонецЕсли;
				
				НоваяСтрока = ОтчетОРозничныхПродажахОбъект.Товары.Добавить();
				
				ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаПоТоварам,
					"Номенклатура, Характеристика, Упаковка, Количество, Сумма, Цена, СтавкаНДС");
				
				НоваяСтрока.КоличествоУпаковок   = ВыборкаПоТоварам.Количество;
				НоваяСтрока.ПроцентСкидкиНаценки = ВыборкаПоТоварам.ПроцентРучнойСкидки;
				НоваяСтрока.Склад                = РеквизитыККМ.Склад;
				НоваяСтрока.КлючСвязи            = ВыборкаПоТоварам.Номенклатура.УникальныйИдентификатор();
				
				Если ЗначениеЗаполнено(ВыборкаПоТоварам.Заказ) Тогда
					
					ПараметрыОтбора = Новый Структура;
					ПараметрыОтбора.Вставить("Номенклатура", 	ВыборкаПоТоварам.Номенклатура);
					ПараметрыОтбора.Вставить("Характеристика", 	ВыборкаПоТоварам.Характеристика);
					ПараметрыОтбора.Вставить("Упаковка", 		ВыборкаПоТоварам.Упаковка);
					ПараметрыОтбора.Вставить("Заказ", 			ВыборкаПоТоварам.Заказ);
					
					НайденныеСтроки = ТаблицаТоварыЗаказов.НайтиСтроки(ПараметрыОтбора);
					
					Если НЕ НайденныеСтроки = Неопределено И НайденныеСтроки.Количество() > 0 Тогда
						
						НоваяСтрока.ЗаказПокупателя = ВыборкаПоТоварам.Заказ;
						НоваяСтрока.КодСтроки = НайденныеСтроки[0].КодСтроки;
						НоваяСтрока.Резервировать = НайденныеСтроки[0].Резервировать;
						
					КонецЕсли;
					
				КонецЕсли;

			КонецЦикла;
			
		КонецЕсли;
		
#КонецОбласти

#Область ВОЗВРАТЫ

		ВыборкаПоВозвратамГруппировка.Сбросить();
		
		Если ВыборкаПоВозвратамГруппировка.НайтиСледующий(ОтчетОРП.УникальныйИдентификаторОтчета,
			"УникальныйИдентификаторОтчета") Тогда
			
			ВыборкаПоВозвратам = ВыборкаПоВозвратамГруппировка.Выбрать();
			
			Пока ВыборкаПоВозвратам.Следующий() Цикл
				
				Если ВыборкаПоВозвратам.Количество = 0 Тогда
					Продолжить;
				КонецЕсли;
				
				НоваяСтрока = ОтчетОРозничныхПродажахОбъект.ВозвращенныеТовары.Добавить();
				
				ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаПоВозвратам,
					"Номенклатура, Характеристика, Упаковка, Количество, Сумма, Цена, СтавкаНДС");
				
				НоваяСтрока.КоличествоУпаковок   = ВыборкаПоВозвратам.Количество;
				НоваяСтрока.Склад                = РеквизитыККМ.Склад;
				НоваяСтрока.АналитикаХозяйственнойОперации = АналитикаОперацииВозвратаОтПокупателя;
				НоваяСтрока.КлючСвязи            = ВыборкаПоВозвратам.Номенклатура.УникальныйИдентификатор();
				
			КонецЦикла;
			
		КонецЕсли;
		
#КонецОбласти

#Область АКЦИЗНЫЕ_МАРКИ

		ВыборкаПоМаркамГруппировка.Сбросить();
		
		Если ВыборкаПоМаркамГруппировка.НайтиСледующий(ОтчетОРП.УникальныйИдентификаторОтчета,
			"УникальныйИдентификаторОтчета") Тогда
			
			ВыборкаПоМаркам = ВыборкаПоМаркамГруппировка.Выбрать();
			
			Пока ВыборкаПоМаркам.Следующий() Цикл
				
				СтрокаМарка = ВыборкаПоМаркам;
				
				Марка = СокрЛП(СтрокаМарка.Марка);
				
				Если НЕ ЗначениеЗаполнено(Марка) Тогда
					Продолжить;
				КонецЕсли;
				
				Если СтрокаМарка.ЭтоАлкоголь Тогда
					АкцизнаяМарка = СтрокаМарка.Марка;
					
					Если НЕ ЗначениеЗаполнено(Марка) Тогда
						АкцизнаяМарка = ШтрихкодированиеЕГАИС.ПолучитьСгенерироватьАкцизнуюМарку(
						СтрокаМарка.АкцизнаяМарка,
						СтрокаМарка.Номенклатура,
						СтрокаМарка.Характеристика);
					КонецЕсли;
					
					НоваяСтрока = ОтчетОРозничныхПродажахОбъект.АкцизныеМарки.Добавить();
					НоваяСтрока.АкцизнаяМарка = АкцизнаяМарка;
					НоваяСтрока.Справка2 = СтрокаМарка.Справка2;
				Иначе
					
					Если НЕ ЗначениеЗаполнено(СтрокаМарка.АкцизнаяМарка) Тогда 
						СтруктураШтрихкодаУпаковки = Справочники.ШтрихкодыУпаковокТоваров.СтруктураСозданияШтрихкодаУпаковки();
						СтруктураШтрихкодаУпаковки.Номенклатура   = СтрокаМарка.Номенклатура;
						СтруктураШтрихкодаУпаковки.Характеристика = СтрокаМарка.Характеристика;
						СтруктураШтрихкодаУпаковки.Количество     = 1;
						СтруктураШтрихкодаУпаковки.Штрихкод = СтрокаМарка.Марка;
						Марка = Справочники.ШтрихкодыУпаковокТоваров.СоздатьШтрихкодУпаковки(СтруктураШтрихкодаУпаковки);
					Иначе
						Марка = СтрокаМарка.АкцизнаяМарка;
					КонецЕсли;
					
					НоваяСтрока = ОтчетОРозничныхПродажахОбъект.АкцизныеМарки.Добавить();
					НоваяСтрока.АкцизнаяМарка = Марка;
					
				КонецЕсли
				
			КонецЦикла;
			
		КонецЕсли;
			
#КонецОбласти

#Область ОПЛАТЫ

		ВыборкаПоОплатамГруппировка.Сбросить();
		
		Если ВыборкаПоОплатамГруппировка.НайтиСледующий(ОтчетОРП.УникальныйИдентификаторОтчета,
			"УникальныйИдентификаторОтчета") Тогда
			
			ВыборкаПоОплатам = ВыборкаПоОплатамГруппировка.Выбрать();
			
			Пока ВыборкаПоОплатам.Следующий() Цикл
				
				Оплата = ВыборкаПоОплатам;
				
				СоответствиеВидовОплаты = РеквизитыККМ.СоответствиеВидовОплаты;
				ВидЭлектроннойОплатыПоУмолчанию = РеквизитыККМ.ВидЭлектроннойОплатыПоУмолчанию;
				
				ВидОплаты = Неопределено;
				
				КодВидаОплаты = СокрЛП(Оплата.КодВидаОплаты);
				
				Если ЗначениеЗаполнено(СоответствиеВидовОплаты) И ЗначениеЗаполнено(КодВидаОплаты) Тогда
					ВидОплаты = Справочники.СоответствиеВидовОплатыСККМOffline.ПолучитьВидОплатыПоКодуВидаОплатыККМ(
					СоответствиеВидовОплаты, КодВидаОплаты);
				КонецЕсли;
				
				Если НЕ ЗначениеЗаполнено(ВидОплаты) И Оплата.ТипОплаты = Перечисления.ТипыОплатЧекаККМ.ПлатежнаяКарта Тогда
					ВидОплаты = ВидЭлектроннойОплатыПоУмолчанию;
				КонецЕсли;
				
				Если НЕ ЗначениеЗаполнено(ВидОплаты) Тогда
					ВидОплаты = Справочники.ВидыОплатЧекаККМ.Наличные;
				КонецЕсли;
				
				Если ВидОплаты.ТипОплаты = Перечисления.ТипыОплатЧекаККМ.Наличные Тогда
					
					ОтчетОРозничныхПродажахОбъект.СуммаОплатыНаличных = ОтчетОРозничныхПродажахОбъект.СуммаОплатыНаличных + Оплата.Сумма;
					
				ИначеЕсли ВидОплаты.ТипОплаты = Перечисления.ТипыОплатЧекаККМ.ПлатежнаяКарта Тогда
					
					ОплатаПлатежнойКартой = ОтчетОРозничныхПродажахОбъект.ОплатаПлатежнымиКартами.Добавить();
					ОплатаПлатежнойКартой.Сумма = Оплата.Сумма;
					ОплатаПлатежнойКартой.ВидОплаты = ВидОплаты;
					
				ИначеЕсли ВидОплаты.ТипОплаты = Перечисления.ТипыОплатЧекаККМ.БанковскийКредит Тогда
					
					ОплатаКредитом = ОтчетОРозничныхПродажахОбъект.ОплатаБанковскимиКредитами.Добавить();
					ОплатаКредитом.Сумма = Оплата.Сумма;
					ОплатаКредитом.ВидОплаты = ВидОплаты;
					ЭквайрингВызовСервера.ЗаполнитьБанкиПроцентКомиссии(ВидОплаты, ОплатаКредитом.БанкКредитор, ОплатаКредитом.ПроцентБанковскойКомиссии);
					ОплатаКредитом.СуммаБанковскойКомиссии = ОплатаКредитом.Сумма * ОплатаКредитом.ПроцентБанковскойКомиссии / 100;
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
			
#КонецОбласти

#Область РАСЧЕТЫ_С_КЛИЕНТАМИ

		ВыборкаПоРасчетамСКлиентамиГруппировка.Сбросить();

		РасчетыСКлиентамиОстатки = ПакетДанныхОРП[10].Выгрузить();
		
		Если ВыборкаПоРасчетамСКлиентамиГруппировка.НайтиСледующий(ОтчетОРП.УникальныйИдентификаторОтчета,
			"УникальныйИдентификаторОтчета") Тогда
			
			ВыборкаПоРасчетамСКлиентами = ВыборкаПоРасчетамСКлиентамиГруппировка.Выбрать();
			
			ПараметрыОтбора = Новый Структура("Заказ");
			
			Пока ВыборкаПоРасчетамСКлиентами.Следующий() Цикл
				
				РасчетСКлиентом = ВыборкаПоРасчетамСКлиентами;
				
				ПараметрыОтбора.Заказ = РасчетСКлиентом.Заказ;
				НайденныеСтроки = РасчетыСКлиентамиОстатки.НайтиСтроки(ПараметрыОтбора);
				
				Если НайденныеСтроки.Количество() = 0 Тогда
					
					НоваяСтрока = ОтчетОРозничныхПродажахОбъект.РасчетыСКлиентами.Добавить();
					
					НоваяСтрока.ЗаказПокупателя = РасчетСКлиентом.Заказ;
					НоваяСтрока.Контрагент = РасчетСКлиентом.Контрагент;
					НоваяСтрока.Оплачено   = РасчетСКлиентом.Оплачено;
					НоваяСтрока.Отгружено  = РасчетСКлиентом.Отгружено;
					
				ИначеЕсли НайденныеСтроки.Количество() = 1 Тогда
					
					НоваяСтрока = ОтчетОРозничныхПродажахОбъект.РасчетыСКлиентами.Добавить();
					
					НоваяСтрока.ЗаказПокупателя = РасчетСКлиентом.Заказ;
					НоваяСтрока.ДокументРасчета = НайденныеСтроки[0].ДокументРасчета;
					НоваяСтрока.Контрагент = РасчетСКлиентом.Контрагент;
					НоваяСтрока.Оплачено   = РасчетСКлиентом.Оплачено;
					НоваяСтрока.Отгружено  = РасчетСКлиентом.Отгружено;
					
				ИначеЕсли НайденныеСтроки.Количество() > 1 Тогда
					
					СуммаТоваров = РасчетСКлиентом.Отгружено;
					СуммаОплаты = РасчетСКлиентом.Оплачено;
					
					НоваяСтрока = Неопределено;
					Для Каждого РасчетОстаток Из НайденныеСтроки Цикл
						
						Если СуммаТоваров > 0 Тогда
							
							НоваяСтрока = ОтчетОРозничныхПродажахОбъект.РасчетыСКлиентами.Добавить();
							
							НоваяСтрока.ЗаказПокупателя = РасчетСКлиентом.Заказ;
							НоваяСтрока.ДокументРасчета = РасчетОстаток.ДокументРасчета;
							НоваяСтрока.Контрагент = РасчетСКлиентом.Контрагент;
							НоваяСтрока.Оплачено   = 0;
							НоваяСтрока.Отгружено  = Мин(РасчетОстаток.СуммаОстаток, СуммаТоваров);
							
							СуммаТоваров = СуммаТоваров - НоваяСтрока.Отгружено;
						Иначе
							
							Прервать;
						КонецЕсли;
						
					КонецЦикла;
					
					Если СуммаТоваров > 0 И НЕ НоваяСтрока = Неопределено Тогда
						НоваяСтрока.Отгружено = НоваяСтрока.Отгружено + СуммаТоваров;
					КонецЕсли;
					
					Если СуммаТоваров > 0 И НЕ НоваяСтрока = Неопределено Тогда
						НоваяСтрока.Оплачено = СуммаОплаты;
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;

#КонецОбласти

		ЗаписатьДокументОРП(ОтчетОРозничныхПродажахОбъект);
		МассивСозданныхДокументов.Добавить(ОтчетОРозничныхПродажахОбъект.Ссылка);
		
	КонецЦикла;
	
	УстановитьСтатусыЗагруженныхМарок(АкцизныеМаркиЕГАИСОтчета);
	
	УзелОбъект = РеквизитыККМ.УзелИнформационнойБазы.ПолучитьОбъект();
	Если Не ТипЗнч(УзелОбъект) = Тип("ПланОбменаОбъект.ОбменСПодключаемымОборудованием") Тогда
		ЗаполнитьУзелПланаОбмена(РеквизитыККМ);
	КонецЕсли;
	УзелОбъект.ДатаЗагрузки = ТекущаяДатаСеанса();
	УзелОбъект.Записать();

КонецПроцедуры

Процедура СоздатьИЗаполнитьПостановкиНаКран(МассивСозданныхДокументов, РеквизитыККМ, ТаблицаПостановокНаКран, Комментарий)
	
	Запрос = Новый Запрос;
	
	Запрос.Текст ="ВЫБРАТЬ
	|	Товары.КодТовара КАК Код,
	|	ВЫРАЗИТЬ(Товары.УникальныйИдентификаторОтчета КАК СТРОКА(100)) КАК УникальныйИдентификаторОтчета
	|ПОМЕСТИТЬ Товары
	|ИЗ
	|	&ТаблицаДанных КАК Товары
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕСТЬNULL(КодыТоваровSKU.Номенклатура, ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)) КАК Номенклатура,
	|	ЕСТЬNULL(КодыТоваровSKU.Характеристика, ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)) КАК Характеристика,
	|	ЕСТЬNULL(КодыТоваровSKU.Упаковка, ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка)) КАК Упаковка,
	|	Товары.УникальныйИдентификаторОтчета КАК УникальныйИдентификаторОтчета
	|ИЗ
	|	Товары КАК Товары
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КодыТоваровSKU КАК КодыТоваровSKU
	|		ПО Товары.Код = КодыТоваровSKU.SKU
	|ИТОГИ ПО
	|	УникальныйИдентификаторОтчета";
	
	Запрос.УстановитьПараметр("ТаблицаДанных", ТаблицаПостановокНаКран);
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	ВыборкаПоПостановкамНаКран = РезультатЗапроса[1].Выбрать();
	
	Для Каждого ПостановкаНаКран Из ТаблицаПостановокНаКран Цикл
		
		ВыборкаПоПостановкамНаКран.Сбросить();
		
		ДанныеЗаполнения = Новый Структура;
		ДанныеЗаполнения.Вставить("Организация", ПостановкаНаКран.Организация);
		Если ЗначениеЗаполнено(ПостановкаНаКран.Магазин) Тогда
			ДанныеЗаполнения.Вставить("Склад", ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПостановкаНаКран.Магазин, "СкладПродажи"));
		КонецЕсли;
		ДанныеЗаполнения.Вставить("Дата", ПостановкаНаКран.Дата);
		ДанныеЗаполнения.Вставить("ДатаПодключения", ПостановкаНаКран.Дата);
		ДанныеЗаполнения.Вставить("Ответственный", Пользователи.ТекущийПользователь());
		ДанныеЗаполнения.Вставить("Комментарий", Комментарий);
		
		Если ВыборкаПоПостановкамНаКран.НайтиСледующий(ПостановкаНаКран.УникальныйИдентификаторОтчета,
			"УникальныйИдентификаторОтчета") Тогда
			
			СимволGS1 = МенеджерОборудованияМаркировкаКлиентСервер.РазделительGS1();
			Разделитель = МенеджерОборудованияМаркировкаКлиентСервер.ЭкранированныйСимволGS1();
			КодМаркировкиОригинал = СтрЗаменить(ПостановкаНаКран.КонтрольнаяМарка, Разделитель, СимволGS1);
			ДанныеРазбораКода = РазборКодаМаркировкиИССлужебный.РазобратьКодМаркировки(КодМаркировкиОригинал);
			
			Если НЕ ДанныеРазбораКода = Неопределено Тогда
				КодНормализованный = ДанныеРазбораКода.НормализованныйКодМаркировки;
			Иначе
				КодНормализованный = КодМаркировкиОригинал;
			КонецЕсли;
			
			КодНормализованный = СтрЗаменить(КодНормализованный, "(", "");
			КодНормализованный = СтрЗаменить(КодНормализованный, ")", "");
			
			КодМаркировки = Справочники.ШтрихкодыУпаковокТоваров.ПолучитьПоЗначениюШтрихкода(ПостановкаНаКран.КонтрольнаяМарка);
			Если КодМаркировки = Неопределено Тогда
				СтруктураШтрихкодаУпаковки = Справочники.ШтрихкодыУпаковокТоваров.СтруктураСозданияШтрихкодаУпаковки();
				СтруктураШтрихкодаУпаковки.Номенклатура   = ВыборкаПоПостановкамНаКран.Номенклатура;
				СтруктураШтрихкодаУпаковки.Характеристика = ВыборкаПоПостановкамНаКран.Характеристика;
				СтруктураШтрихкодаУпаковки.Количество     = 1;
				СтруктураШтрихкодаУпаковки.Штрихкод = ПостановкаНаКран.КонтрольнаяМарка;
				КодМаркировки = Справочники.ШтрихкодыУпаковокТоваров.СоздатьШтрихкодУпаковки(СтруктураШтрихкодаУпаковки);
			КонецЕсли;
			ДанныеЗаполнения.Вставить("КодМаркировки", КодМаркировки);
			
		КонецЕсли;
		
		ДокументПодключения = Документы.ПодключениеКегаКОборудованиюРозливаИСМП.СоздатьДокумент();
		ДокументПодключения.Заполнить(ДанныеЗаполнения);
		ЗаполнитьЗначенияСвойств(ДокументПодключения, ДанныеЗаполнения);
		
		Попытка
			ДокументПодключения.Записать(РежимЗаписиДокумента.Проведение);
		Исключение
			ДокументПодключения.Записать(РежимЗаписиДокумента.Запись);
		КонецПопытки;
		
		ДанныеПодключения = РегистрыСведений.ВскрытыеПотребительскиеУпаковкиИС.ИнициализироватьДанныеВскрытияПотребительскойУпаковки();
		ЗаполнитьЗначенияСвойств(ДанныеПодключения, ДанныеЗаполнения);
		ДанныеПодключения.Статус   = Перечисления.СтатусыВскрытыхПотребительскихУпаковокИС.Подключено;
		ДанныеПодключения.Документ = ДокументПодключения.Ссылка;
		
		РегистрыСведений.ВскрытыеПотребительскиеУпаковкиИС.ЗаписатьВскрытиеПотребительскойУпаковки(ДанныеПодключения);
		
		МассивСозданныхДокументов.Добавить(ДокументПодключения.Ссылка);
		
	КонецЦикла;
	
	УзелОбъект = РеквизитыККМ.УзелИнформационнойБазы.ПолучитьОбъект();
	Если Не ТипЗнч(УзелОбъект) = Тип("ПланОбменаОбъект.ОбменСПодключаемымОборудованием") Тогда
		ЗаполнитьУзелПланаОбмена(РеквизитыККМ);
	КонецЕсли;
	УзелОбъект.ДатаЗагрузки = ТекущаяДатаСеанса();
	УзелОбъект.Записать();
	
КонецПроцедуры

Функция ПакетДанныхОРП(ТаблицыДанных, РеквизитыККМ)
	
	ОрганизацияЕГАИС = Справочники.КлассификаторОрганизацийЕГАИС.ОрганизацияЕГАИСПоОрганизацииИТорговомуОбъекту(
		РеквизитыККМ.Организация,
		РеквизитыККМ.Магазин);
	
	Запрос = Новый Запрос;
	
	Запрос.Текст =
	
	"ВЫБРАТЬ
	|	Товары.Код КАК Код,
	|	Товары.Цена КАК Цена,
	|	Товары.Количество КАК Количество,
	|	Товары.Скидка КАК Скидка,
	|	Товары.Сумма КАК Сумма,
	|	Товары.СтавкаНДС КАК СтавкаНДС,
	|	Товары.Заказ КАК Заказ,
	|	ВЫРАЗИТЬ(Товары.УникальныйИдентификаторОтчета КАК СТРОКА(100)) КАК УникальныйИдентификаторОтчета
	|ПОМЕСТИТЬ Товары
	|ИЗ
	|	&ТаблицаТовары КАК Товары
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕСТЬNULL(КодыТоваровSKU.Номенклатура, ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)) КАК Номенклатура,
	|	ЕСТЬNULL(КодыТоваровSKU.Характеристика, ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)) КАК Характеристика,
	|	ЕСТЬNULL(КодыТоваровSKU.Упаковка, ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка)) КАК Упаковка,
	|	СУММА(Товары.Количество) КАК КоличествоУпаковок,
	|	СУММА(ЕСТЬNULL(КодыТоваровSKU.Упаковка.Коэффициент, 1) * Товары.Количество) КАК Количество,
	|	Товары.Цена КАК Цена,
	|	СУММА(Товары.Сумма) КАК Сумма,
	|	СУММА(Товары.Скидка) КАК ПроцентРучнойСкидки,
	|	ВЫБОР
	|		КОГДА Товары.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.ПустаяСсылка)
	|			ТОГДА КодыТоваровSKU.Номенклатура.СтавкаНДС
	|		ИНАЧЕ Товары.СтавкаНДС
	|	КОНЕЦ КАК СтавкаНДС,
	|	Товары.Заказ КАК Заказ,
	|	Товары.УникальныйИдентификаторОтчета КАК УникальныйИдентификаторОтчета
	|ИЗ
	|	Товары КАК Товары
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КодыТоваровSKU КАК КодыТоваровSKU
	|		ПО Товары.Код = КодыТоваровSKU.SKU
	|
	|СГРУППИРОВАТЬ ПО
	|	ЕСТЬNULL(КодыТоваровSKU.Номенклатура, ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)),
	|	ЕСТЬNULL(КодыТоваровSKU.Характеристика, ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)),
	|	ЕСТЬNULL(КодыТоваровSKU.Упаковка, ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка)),
	|	Товары.Цена,
	|	ВЫБОР
	|		КОГДА Товары.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.ПустаяСсылка)
	|			ТОГДА КодыТоваровSKU.Номенклатура.СтавкаНДС
	|		ИНАЧЕ Товары.СтавкаНДС
	|	КОНЕЦ,
	|	Товары.Заказ,
	|	Товары.УникальныйИдентификаторОтчета
	|ИТОГИ ПО
	|	УникальныйИдентификаторОтчета
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.Код КАК Код,
	|	ВЫРАЗИТЬ(Товары.Марка КАК СТРОКА(200)) КАК ШтрихкодМарки,
	|	ВЫРАЗИТЬ(Товары.УникальныйИдентификаторОтчета КАК СТРОКА(100)) КАК УникальныйИдентификаторОтчета
	|ПОМЕСТИТЬ ВтТаблицаШтрихкодов
	|ИЗ
	|	&ТаблицаШтрихкодов КАК Товары
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.Код КАК Код,
	|	ШтрихкодыУпаковокТоваров.Ссылка КАК АкцизнаяМарка,
	|	Товары.ШтрихкодМарки КАК ШтрихкодМарки,
	|	Товары.УникальныйИдентификаторОтчета КАК УникальныйИдентификаторОтчета
	|ПОМЕСТИТЬ ВтТоварыСАкцизнымиМарками
	|ИЗ
	|	ВтТаблицаШтрихкодов КАК Товары
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ШтрихкодыУпаковокТоваров КАК ШтрихкодыУпаковокТоваров
	|		ПО Товары.ШтрихкодМарки = ШтрихкодыУпаковокТоваров.ЗначениеШтрихкода
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕСТЬNULL(КодыТоваровSKU.Номенклатура, ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)) КАК Номенклатура,
	|	ЕСТЬNULL(КодыТоваровSKU.Характеристика, ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)) КАК Характеристика,
	|	Товары.АкцизнаяМарка КАК АкцизнаяМарка,
	|	АкцизныеМаркиЕГАИС.Справка2 КАК Справка2,
	|	Товары.ШтрихкодМарки КАК Марка,
	|	Товары.УникальныйИдентификаторОтчета КАК УникальныйИдентификаторОтчета,
	|	ЕСТЬNULL(КодыТоваровSKU.Номенклатура.АлкогольнаяПродукция, Ложь) КАК ЭтоАлкоголь
	|ИЗ
	|	ВтТоварыСАкцизнымиМарками КАК Товары
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КодыТоваровSKU КАК КодыТоваровSKU
	|		ПО Товары.Код = КодыТоваровSKU.SKU
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АкцизныеМаркиЕГАИС КАК АкцизныеМаркиЕГАИС
	|		ПО Товары.АкцизнаяМарка = АкцизныеМаркиЕГАИС.АкцизнаяМарка
	|			И (АкцизныеМаркиЕГАИС.ОрганизацияЕГАИС = &ОрганизацияЕГАИС)
	|ИТОГИ ПО
	|	УникальныйИдентификаторОтчета
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.Код КАК Код,
	|	Товары.Цена КАК Цена,
	|	Товары.Количество КАК Количество,
	|	Товары.Скидка КАК Скидка,
	|	Товары.Сумма КАК Сумма,
	|	Товары.СтавкаНДС КАК СтавкаНДС,
	|	Товары.Заказ КАК Заказ,
	|	ВЫРАЗИТЬ(Товары.УникальныйИдентификаторОтчета КАК СТРОКА(100)) КАК УникальныйИдентификаторОтчета
	|ПОМЕСТИТЬ ТаблицаВозвраты
	|ИЗ
	|	&ТаблицаВозвраты КАК Товары
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕСТЬNULL(КодыТоваровSKU.Номенклатура, ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)) КАК Номенклатура,
	|	ЕСТЬNULL(КодыТоваровSKU.Характеристика, ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)) КАК Характеристика,
	|	ЕСТЬNULL(КодыТоваровSKU.Упаковка, ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка)) КАК Упаковка,
	|	СУММА(Товары.Количество) КАК КоличествоУпаковок,
	|	СУММА(ЕСТЬNULL(КодыТоваровSKU.Упаковка.Коэффициент, 1) * Товары.Количество) КАК Количество,
	|	Товары.Цена КАК Цена,
	|	СУММА(Товары.Сумма) КАК Сумма,
	|	СУММА(Товары.Скидка) КАК ПроцентРучнойСкидки,
	|	ВЫБОР
	|		КОГДА Товары.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.ПустаяСсылка)
	|			ТОГДА КодыТоваровSKU.Номенклатура.СтавкаНДС
	|		ИНАЧЕ Товары.СтавкаНДС
	|	КОНЕЦ КАК СтавкаНДС,
	|	Товары.Заказ КАК Заказ,
	|	Товары.УникальныйИдентификаторОтчета КАК УникальныйИдентификаторОтчета
	|ИЗ
	|	ТаблицаВозвраты КАК Товары
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КодыТоваровSKU КАК КодыТоваровSKU
	|		ПО Товары.Код = КодыТоваровSKU.SKU
	|
	|СГРУППИРОВАТЬ ПО
	|	ЕСТЬNULL(КодыТоваровSKU.Номенклатура, ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)),
	|	ЕСТЬNULL(КодыТоваровSKU.Характеристика, ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)),
	|	ЕСТЬNULL(КодыТоваровSKU.Упаковка, ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка)),
	|	Товары.Цена,
	|	ВЫБОР
	|		КОГДА Товары.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.ПустаяСсылка)
	|			ТОГДА КодыТоваровSKU.Номенклатура.СтавкаНДС
	|		ИНАЧЕ Товары.СтавкаНДС
	|	КОНЕЦ,
	|	Товары.Заказ,
	|	Товары.УникальныйИдентификаторОтчета
	|ИТОГИ ПО
	|	УникальныйИдентификаторОтчета
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВЫРАЗИТЬ(Оплаты.КодВидаОплаты КАК СТРОКА(100)) КАК КодВидаОплаты,
	|	Оплаты.Сумма КАК Сумма,
	|	Оплаты.ТипОплаты КАК ТипОплаты,
	|	ВЫРАЗИТЬ(Оплаты.УникальныйИдентификаторОтчета КАК СТРОКА(100)) КАК УникальныйИдентификаторОтчета
	|ПОМЕСТИТЬ Оплаты
	|ИЗ
	|	&ТаблицаОплат КАК Оплаты
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Оплаты.КодВидаОплаты КАК КодВидаОплаты,
	|	СУММА(Оплаты.Сумма) КАК Сумма,
	|	Оплаты.ТипОплаты КАК ТипОплаты,
	|	Оплаты.УникальныйИдентификаторОтчета КАК УникальныйИдентификаторОтчета
	|ИЗ
	|	Оплаты КАК Оплаты
	|
	|СГРУППИРОВАТЬ ПО
	|	Оплаты.КодВидаОплаты,
	|	Оплаты.ТипОплаты,
	|	Оплаты.УникальныйИдентификаторОтчета
	|ИТОГИ ПО
	|	УникальныйИдентификаторОтчета
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаРасчетыСКлиентами.ЗаказПокупателя КАК Заказ,
	|	ТаблицаРасчетыСКлиентами.Отгружено КАК Отгружено,
	|	ТаблицаРасчетыСКлиентами.Оплачено КАК Оплачено,
	|	ВЫРАЗИТЬ(ТаблицаРасчетыСКлиентами.УникальныйИдентификаторОтчета КАК СТРОКА(100)) КАК УникальныйИдентификаторОтчета
	|ПОМЕСТИТЬ РасчетыСКлиентами
	|ИЗ
	|	&ТаблицаРасчетыСКлиентами КАК ТаблицаРасчетыСКлиентами
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ТаблицаРасчетыСКлиентами.ЗаказПокупателя
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РасчетыСКлиентамиОстатки.Магазин КАК Магазин,
	|	РасчетыСКлиентамиОстатки.Организация КАК Организация,
	|	РасчетыСКлиентамиОстатки.Контрагент КАК Контрагент,
	|	РасчетыСКлиентамиОстатки.ДокументРасчета КАК ДокументРасчета,
	|	РасчетыСКлиентамиОстатки.ЗаказПокупателя КАК Заказ,
	|	РасчетыСКлиентамиОстатки.СуммаОстаток КАК СуммаОстаток
	|ИЗ
	|	РегистрНакопления.РасчетыСКлиентами.Остатки(
	|			,
	|			ЗаказПокупателя В
	|				(ВЫБРАТЬ
	|					Т.Заказ
	|				ИЗ
	|					РасчетыСКлиентами КАК Т)) КАК РасчетыСКлиентамиОстатки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РасчетыСКлиентами.Заказ КАК Заказ,
	|	ЗаказПокупателя.Контрагент КАК Контрагент,
	|	РасчетыСКлиентами.Отгружено КАК Отгружено,
	|	РасчетыСКлиентами.Оплачено КАК Оплачено,
	|	РасчетыСКлиентами.УникальныйИдентификаторОтчета КАК УникальныйИдентификаторОтчета
	|ИЗ
	|	РасчетыСКлиентами КАК РасчетыСКлиентами
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказПокупателя КАК ЗаказПокупателя
	|		ПО РасчетыСКлиентами.Заказ = ЗаказПокупателя.Ссылка
	|ИТОГИ ПО
	|	УникальныйИдентификаторОтчета
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗаказПокупателяТовары.Ссылка КАК Заказ,
	|	ЗаказПокупателяТовары.Номенклатура КАК Номенклатура,
	|	ЗаказПокупателяТовары.Характеристика КАК Характеристика,
	|	ЗаказПокупателяТовары.Упаковка КАК Упаковка,
	|	ЗаказПокупателяТовары.Резервировать КАК Резервировать,
	|	ЗаказПокупателяТовары.КодСтроки КАК КодСтроки
	|ИЗ
	|	Товары КАК Товары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказПокупателя.Товары КАК ЗаказПокупателяТовары
	|		ПО Товары.Заказ = ЗаказПокупателяТовары.Ссылка";
	
	Запрос.УстановитьПараметр("ТаблицаТовары",     ТаблицыДанных.Товары);
	Запрос.УстановитьПараметр("ТаблицаВозвраты",   ТаблицыДанных.ВозвратыТоваров);
	Запрос.УстановитьПараметр("ТаблицаОплат",      ТаблицыДанных.Оплаты);
	Запрос.УстановитьПараметр("ТаблицаРасчетыСКлиентами", ТаблицыДанных.ТаблицаРасчетыСКлиентами);
	
	Запрос.УстановитьПараметр("ТаблицаШтрихкодов", ТаблицыДанных.ТаблицаШтрихкодовМарок);
	Запрос.УстановитьПараметр("ОрганизацияЕГАИС",  ОрганизацияЕГАИС);
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	Возврат РезультатЗапроса;
	
КонецФункции

Функция СуммаВыемкиОтчета(ОтчетОРозничныхПродажахОбъект)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СУММА(ВложенныйЗапрос.Сумма) КАК Сумма
	|ИЗ
	|	(ВЫБРАТЬ
	|		&СуммаДокумента КАК Сумма
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		-ОтчетОРозничныхПродажахОплатаПлатежнымиКартами.Сумма
	|	ИЗ
	|		Документ.ОтчетОРозничныхПродажах.ОплатаПлатежнымиКартами КАК ОтчетОРозничныхПродажахОплатаПлатежнымиКартами
	|	ГДЕ
	|		ОтчетОРозничныхПродажахОплатаПлатежнымиКартами.Ссылка = &Ссылка
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		-ОтчетОРозничныхПродажахОплатаБанковскимиКредитами.Сумма
	|	ИЗ
	|		Документ.ОтчетОРозничныхПродажах.ОплатаБанковскимиКредитами КАК ОтчетОРозничныхПродажахОплатаБанковскимиКредитами
	|	ГДЕ
	|		ОтчетОРозничныхПродажахОплатаБанковскимиКредитами.Ссылка = &Ссылка
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		-&ОплатаПодарочнымиСертификатами
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		-ОплатаНаличнымиАгентскихПлатежей.Сумма
	|	ИЗ
	|		Документ.ОтчетОРозничныхПродажах.ОплатаНаличнымиАгентскихПлатежей КАК ОплатаНаличнымиАгентскихПлатежей
	|	ГДЕ
	|		ОплатаНаличнымиАгентскихПлатежей.Ссылка = &Ссылка
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		-ОтчетОРозничныхПродажахПрочаяВыручка.СуммаПоступления
	|	ИЗ
	|		Документ.ОтчетОРозничныхПродажах.ПрочаяВыручка КАК ОтчетОРозничныхПродажахПрочаяВыручка
	|	ГДЕ
	|		ОтчетОРозничныхПродажахПрочаяВыручка.Ссылка = &Ссылка
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ОтчетОРозничныхПродажахПрочаяВыручка.СуммаВозврата
	|	ИЗ
	|		Документ.ОтчетОРозничныхПродажах.ПрочаяВыручка КАК ОтчетОРозничныхПродажахПрочаяВыручка
	|	ГДЕ
	|		ОтчетОРозничныхПродажахПрочаяВыручка.Ссылка = &Ссылка) КАК ВложенныйЗапрос
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СУММА(ОплатаНаличнымиАгентскихПлатежей.Сумма)
	|ИЗ
	|	Документ.ОтчетОРозничныхПродажах.ОплатаНаличнымиАгентскихПлатежей КАК ОплатаНаличнымиАгентскихПлатежей
	|ГДЕ
	|	ОплатаНаличнымиАгентскихПлатежей.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", ОтчетОРозничныхПродажахОбъект.Ссылка);
	Запрос.УстановитьПараметр("СуммаДокумента", ОтчетОРозничныхПродажахОбъект.СуммаДокумента);
	Запрос.УстановитьПараметр("ОплатаПодарочнымиСертификатами", ОтчетОРозничныхПродажахОбъект.ОплатаПодарочнымиСертификатами);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	СуммаВыемки = 0;
	Если Выборка.Следующий() Тогда
		СуммаВыемки = Выборка.Сумма;
	КонецЕсли;
	
	Возврат СуммаВыемки;
	
КонецФункции

Процедура ДополнитьМассивДочернимиЭлементами(МассивГруппТоваров, Код = Неопределено, Результат = Неопределено)
	
	// Если Код = Неопределено, то это корневой элемент иерархии.
	Если Код = Неопределено Тогда
		
		Результат = Новый Массив;
		
		Для Каждого ТекСтрока Из МассивГруппТоваров Цикл
			
			Если НЕ ЗначениеЗаполнено(ТекСтрока.КодГруппы) Тогда
				Результат.Добавить(ТекСтрока);
				ДополнитьМассивДочернимиЭлементами(МассивГруппТоваров, ТекСтрока.Код, Результат);
			КонецЕсли;
			
		КонецЦикла;
		
		МассивГруппТоваров = Результат;
		
	Иначе
		
		Для Каждого ТекСтрока Из МассивГруппТоваров Цикл
			
			Если ТекСтрока.КодГруппы = Код Тогда
				Результат.Добавить(ТекСтрока);
				ДополнитьМассивДочернимиЭлементами(МассивГруппТоваров, ТекСтрока.Код, Результат);
			КонецЕсли;
			
		КонецЦикла;
	
	КонецЕсли;
	
КонецПроцедуры

Функция АналитикаОперацииВозвратаОтПокупателя()
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	АналитикаХозяйственныхОпераций.Ссылка
	               |ИЗ
	               |	Справочник.АналитикаХозяйственныхОпераций КАК АналитикаХозяйственныхОпераций
	               |ГДЕ
	               |	АналитикаХозяйственныхОпераций.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратОтПокупателя)
	               |	И НЕ АналитикаХозяйственныхОпераций.ПометкаУдаления";
				   
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Ссылка;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

Процедура УстановитьСтатусыЗагруженныхМарок(АкцизныеМаркиЕГАИСОтчета)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	АкцизныеМаркиЕГАИСОтчета.АкцизнаяМарка КАК АкцизнаяМарка
	|ПОМЕСТИТЬ ВтАкцизныеМарки
	|ИЗ
	|	&АкцизныеМаркиЕГАИСОтчета КАК АкцизныеМаркиЕГАИСОтчета
	|ГДЕ
	|	АкцизныеМаркиЕГАИСОтчета.ЭтоАлкоголь
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	АкцизныеМаркиЕГАИС.АкцизнаяМарка КАК АкцизнаяМарка,
	|	АкцизныеМаркиЕГАИС.ОрганизацияЕГАИС КАК ОрганизацияЕГАИС
	|ИЗ
	|	РегистрСведений.АкцизныеМаркиЕГАИС КАК АкцизныеМаркиЕГАИС
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтАкцизныеМарки КАК ВтАкцизныеМарки
	|		ПО АкцизныеМаркиЕГАИС.АкцизнаяМарка = ВтАкцизныеМарки.АкцизнаяМарка";
	
	Запрос.УстановитьПараметр("АкцизныеМаркиЕГАИСОтчета", АкцизныеМаркиЕГАИСОтчета);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		МенеджерЗаписи = РегистрыСведений.АкцизныеМаркиЕГАИС.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.АкцизнаяМарка = Выборка.АкцизнаяМарка; 
		МенеджерЗаписи.ОрганизацияЕГАИС = Выборка.ОрганизацияЕГАИС;
		МенеджерЗаписи.Прочитать();
		Если МенеджерЗаписи.Выбран() Тогда
			МенеджерЗаписи.Статус = Перечисления.СтатусыАкцизныхМарок.Реализована;
			МенеджерЗаписи.Записать();
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция СформироватьКомментарий(Устройство)
	
	Комментарий = НСтр("ru = 'Загружено из ККМ Офлайн: %Устройство%'");
	Комментарий = СтрЗаменить(Комментарий, "%Устройство%", Устройство);
	
	Возврат Комментарий;
	
КонецФункции

Функция ПустаяТаблицаКлючевыхРеквизитовОРП()
	
	ТаблицаКлючевыхРеквизитовОРП = Новый ТаблицаЗначений;
	ТаблицаКлючевыхРеквизитовОРП.Колонки.Добавить("Дата",       Новый ОписаниеТипов("Дата"));
	ТаблицаКлючевыхРеквизитовОРП.Колонки.Добавить("НомерСмены", Новый ОписаниеТипов("Строка"));
	КС = Новый КвалификаторыСтроки(100, ДопустимаяДлина.Фиксированная);
	ТаблицаКлючевыхРеквизитовОРП.Колонки.Добавить("УникальныйИдентификаторОтчета", Новый ОписаниеТипов("Строка",,,,КС));
	
	Возврат ТаблицаКлючевыхРеквизитовОРП;
	
КонецФункции

Функция ПустаяТаблицаТоваров()
	
	ТаблицаТоваров = Новый ТаблицаЗначений;
	ТаблицаТоваров.Колонки.Добавить("Код",        Новый ОписаниеТипов("Число"));
	ТаблицаТоваров.Колонки.Добавить("Цена",       Новый ОписаниеТипов("Число"));
	ТаблицаТоваров.Колонки.Добавить("Количество", Новый ОписаниеТипов("Число"));
	ТаблицаТоваров.Колонки.Добавить("Скидка",     Новый ОписаниеТипов("Число"));
	ТаблицаТоваров.Колонки.Добавить("Сумма",      Новый ОписаниеТипов("Число"));
	ТаблицаТоваров.Колонки.Добавить("СтавкаНДС",  Новый ОписаниеТипов("ПеречислениеСсылка.СтавкиНДС"));
	ТаблицаТоваров.Колонки.Добавить("Заказ", Новый ОписаниеТипов("ДокументСсылка.ЗаказПокупателя"));
	ТаблицаТоваров.Колонки.Добавить("УникальныйИдентификаторОтчета", Новый ОписаниеТипов("Строка"));
	
	Возврат ТаблицаТоваров;
	
КонецФункции

Функция ПустаяТаблицаШтрихкодовМаркированнойПродукции()
	
	ТаблицаШтрихкодовАкцизов = Новый ТаблицаЗначений;
	ТаблицаШтрихкодовАкцизов.Колонки.Добавить("Код",  Новый ОписаниеТипов("Число"));
	ТаблицаШтрихкодовАкцизов.Колонки.Добавить("Марка", Новый ОписаниеТипов("Строка"));
	ТаблицаШтрихкодовАкцизов.Колонки.Добавить("УникальныйИдентификаторОтчета", Новый ОписаниеТипов("Строка"));
	
	Возврат ТаблицаШтрихкодовАкцизов;
	
КонецФункции

Функция ПустаяТаблицаОплат()
	
	ТаблицаОплат = Новый ТаблицаЗначений;
	ТаблицаОплат.Колонки.Добавить("КодВидаОплаты", Новый ОписаниеТипов("Строка"));
	ТаблицаОплат.Колонки.Добавить("Сумма",         Новый ОписаниеТипов("Число"));
	ТаблицаОплат.Колонки.Добавить("ТипОплаты",     Новый ОписаниеТипов("ПеречислениеСсылка.ТипыОплатЧекаККМ"));
	ТаблицаОплат.Колонки.Добавить("УникальныйИдентификаторОтчета", Новый ОписаниеТипов("Строка"));
	
	Возврат ТаблицаОплат;
	
КонецФункции

Функция ПустаяТаблицаРасчетыСКлиентами()
	
	ТаблицаРасчетыСКлиентами = Новый ТаблицаЗначений;
	
	ТаблицаРасчетыСКлиентами.Колонки.Добавить("ЗаказПокупателя", Новый ОписаниеТипов("ДокументСсылка.ЗаказПокупателя"));
	ТаблицаРасчетыСКлиентами.Колонки.Добавить("Контрагент", Новый ОписаниеТипов("СправочникСсылка.Контрагенты"));
	ТаблицаРасчетыСКлиентами.Колонки.Добавить("Отгружено", Новый ОписаниеТипов("Число"));
	ТаблицаРасчетыСКлиентами.Колонки.Добавить("Оплачено", Новый ОписаниеТипов("Число"));
	ТаблицаРасчетыСКлиентами.Колонки.Добавить("УникальныйИдентификаторОтчета", Новый ОписаниеТипов("Строка"));

	Возврат ТаблицаРасчетыСКлиентами;
	
КонецФункции

Функция ПустаяТаблицаКлючевыхРеквизитовПостановкиНаКран()
	
	ТаблицаКлючевыхРеквизитовОРП = Новый ТаблицаЗначений;
	ТаблицаКлючевыхРеквизитовОРП.Колонки.Добавить("Дата",       Новый ОписаниеТипов("Дата"));
	ТаблицаКлючевыхРеквизитовОРП.Колонки.Добавить("ДатаПодключения",       Новый ОписаниеТипов("Дата"));
	КС = Новый КвалификаторыСтроки(100, ДопустимаяДлина.Фиксированная);
	ТаблицаКлючевыхРеквизитовОРП.Колонки.Добавить("УникальныйИдентификаторОтчета", Новый ОписаниеТипов("Строка",,,,КС));
	ТаблицаКлючевыхРеквизитовОРП.Колонки.Добавить("Магазин", Новый ОписаниеТипов("СправочникСсылка.Магазины"));
	ТаблицаКлючевыхРеквизитовОРП.Колонки.Добавить("Организация", Новый ОписаниеТипов("СправочникСсылка.Организации"));
	ТаблицаКлючевыхРеквизитовОРП.Колонки.Добавить("Ответственный", Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица"));
	ТаблицаКлючевыхРеквизитовОРП.Колонки.Добавить("КонтрольнаяМарка", Новый ОписаниеТипов("Строка"));
	ТаблицаКлючевыхРеквизитовОРП.Колонки.Добавить("КодТовара", Новый ОписаниеТипов("Число"));
	
	Возврат ТаблицаКлючевыхРеквизитовОРП;
	
КонецФункции

Функция АвтоматическиГенерироватьSKU()
	
	Если ДоступностьРаботыСКодамиТоваровSKU()
		И ЗначениеНастроекПовтИсп.ПолучитьЗначениеКонстанты("АвтоматическиГенерироватьSKU") Тогда
		
		Возврат Истина;
		
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

Функция ДанныеОТоварах(Товары, СохранятьЦенникиВКонфигурации)
	
	Запрос = Новый Запрос;
	
	ТекстЗапроса = "ВЫБРАТЬ
	               |	ТаблицаТоваров.Код КАК Код,";
	Если Не СохранятьЦенникиВКонфигурации Тогда
		ТекстЗапроса = ТекстЗапроса + "
		|	ТаблицаТоваров.Штрихкод КАК Штрихкод,
		|	ТаблицаТоваров.КоличествоЦенников КАК КоличествоЦенников,"
	КонецЕсли;
	ТекстЗапроса = ТекстЗапроса + "
	               |	ТаблицаТоваров.ШтрихАвтопроверки КАК ШтрихАвтопроверки
	               |ПОМЕСТИТЬ Товары
	               |ИЗ
	               |	&ТаблицаКодовТоваров КАК ТаблицаТоваров
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ЕСТЬNULL(КодыТоваровSKU.Номенклатура, ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)) КАК Номенклатура,
	               |	ЕСТЬNULL(КодыТоваровSKU.Характеристика, ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)) КАК Характеристика,
	               |	ЕСТЬNULL(КодыТоваровSKU.Упаковка, ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка)) КАК Упаковка,
	               |	КодыТоваровSKU.SKU КАК SKU,
	               |	ЕСТЬNULL(КодыТоваровSKU.Номенклатура.ВидНоменклатуры.ШаблонЦенника, ЗНАЧЕНИЕ(Справочник.ХранилищеШаблонов.ПустаяСсылка)) КАК ШаблонЦенника,";
	Если Не СохранятьЦенникиВКонфигурации Тогда
		ТекстЗапроса = ТекстЗапроса + "
		|	Товары.Штрихкод КАК Штрихкод,
		|	Товары.КоличествоЦенников КАК КоличествоЦенников,";
	КонецЕсли;
	ТекстЗапроса = ТекстЗапроса + "
	               |	Товары.ШтрихАвтопроверки КАК ШтрихАвтопроверки
	               |ИЗ
	               |	Товары КАК Товары
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КодыТоваровSKU КАК КодыТоваровSKU
	               |		ПО Товары.Код = КодыТоваровSKU.SKU";
	
	Запрос.Текст = ТекстЗапроса;
	
	Запрос.УстановитьПараметр("ТаблицаКодовТоваров", Товары);
	
	ДанныеОТоварах = Новый ТаблицаЗначений;
	ДанныеОТоварах.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	ДанныеОТоварах.Колонки.Добавить("Характеристика", Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
	ДанныеОТоварах.Колонки.Добавить("Упаковка", Новый ОписаниеТипов("СправочникСсылка.УпаковкиНоменклатуры"));
	ДанныеОТоварах.Колонки.Добавить("Штрихкод", Новый ОписаниеТипов("Строка"));
	ДанныеОТоварах.Колонки.Добавить("ШтрихАвтопроверки", Новый ОписаниеТипов("Строка"));
	ДанныеОТоварах.Колонки.Добавить("ШаблонЦенника", Новый ОписаниеТипов("СправочникСсылка.ХранилищеШаблонов"));
	ДанныеОТоварах.Колонки.Добавить("КоличествоЦенников", Новый ОписаниеТипов("Число"));
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		СтрокаТовар = ДанныеОТоварах.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТовар, Выборка);
		
	КонецЦикла;
	
	Возврат ДанныеОТоварах;
	
КонецФункции

Функция ПроверитьТипШтрихкода(Штрихкод)
	
	ИспользуетсяШтрихАвтопроверки = Ложь;
	
	ТипШтрихкодаЦенника = "";
	ДлинаШтрихкода = СтрДлина(Штрихкод);
	НомерСимвола = 1;
	
	КодИдентификатора = Лев(Штрихкод, 2);
	
	Если КодИдентификатора = "99" Тогда
		НомерСимвола = НомерСимвола + 11;
		КодИдентификатора = Сред(Штрихкод, НомерСимвола, 4);
		Если КодИдентификатора = "392N" Тогда
			ИспользуетсяШтрихАвтопроверки = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ИспользуетсяШтрихАвтопроверки;
	
КонецФункции

Функция ШтрихкодПоКодуАвтопроверки(ШтрихкодАвтопроверки)
	
	SKU = Число(Сред(ШтрихкодАвтопроверки, 3, 9));
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	КодыТоваровSKU.Номенклатура КАК Номенклатура,
	               |	КодыТоваровSKU.Характеристика КАК Характеристика,
	               |	КодыТоваровSKU.Упаковка КАК Упаковка,
	               |	КодыТоваровSKU.SKU КАК SKU
	               |ПОМЕСТИТЬ НоменклатураПОSKU
	               |ИЗ
	               |	РегистрСведений.КодыТоваровSKU КАК КодыТоваровSKU
	               |ГДЕ
	               |	КодыТоваровSKU.SKU = &SKU
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ ПЕРВЫЕ 1
	               |	Штрихкоды.Штрихкод КАК Штрихкод
	               |ИЗ
	               |	НоменклатураПОSKU КАК НоменклатураПОSKU
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.Штрихкоды КАК Штрихкоды
	               |		ПО НоменклатураПОSKU.Номенклатура = Штрихкоды.Владелец
	               |			И НоменклатураПОSKU.Характеристика = Штрихкоды.Характеристика
	               |			И НоменклатураПОSKU.Упаковка = Штрихкоды.Упаковка";
	
	Запрос.УстановитьПараметр("SKU", SKU);
	
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаЗапроса   = РезультатЗапроса.Выбрать();
	Пока ВыборкаЗапроса.Следующий() Цикл
		
		Штрихкоды = РезультатЗапроса.Выгрузить();
		Штрихкод  = Штрихкоды[0].Штрихкод;
		
	КонецЦикла;
	
	Возврат Штрихкод;
	
КонецФункции

// Процедура вызывается при загрузке отчета о проверке ценников с устройства.
// Выполняет запись информации в узел плана обмена. Создает отчет о розничных продажах.
//
// Параметры:
//  Устройство       - <СправочникСсылка.ПодключаемоеОборудование>
//  ВыполненоУспешно - <Булево> Признак успешного выполнения операции.
//
Процедура ЗагрузитьЦенники(Устройство, МассивДанных, ВыполненоУспешно = Истина)
	
	УстановитьПривилегированныйРежим(Истина);
	
	ВыполненоУспешно = Ложь;
	
	НачатьТранзакцию();
	
	Попытка
		
		БлокировкаДанных = Новый БлокировкаДанных;
		ЭлементБлокировкиДанных = БлокировкаДанных.Добавить("РегистрСведений.ЦенникиКПечати");
		ЭлементБлокировкиДанных.Режим = РежимБлокировкиДанных.Исключительный;
		БлокировкаДанных.Заблокировать();
		
		МассивСозданныхДокументов = Новый Массив;
		НаборЗаписей = РегистрыСведений.ЦенникиКПечати.СоздатьНаборЗаписей();
		НаборЗаписей.Прочитать();
		ДатаПриема = ТекущаяДата();
		
		Товары = ДанныеОТоварах(МассивДанных, Устройство.СохранятьЦенникиВКонфигурации);
		
		Для Каждого Товар Из Товары Цикл
			
			Запись = НаборЗаписей.Добавить();
			Запись.Номенклатура             = Товар.Номенклатура;
			Запись.Упаковка                 = Товар.Упаковка;
			Запись.Характеристика           = Товар.Характеристика;
			Запись.ДатаПриема               = ДатаПриема;
			Запись.ИДЦенника                = Новый УникальныйИдентификатор;
			Запись.ПодключаемоеОборудование = Устройство;
			Запись.ШтрихАвтопроверки        = Товар.ШтрихАвтопроверки;
			
		КонецЦикла;
		
		НаборЗаписей.Записать(Истина);
		ВыполненоУспешно = Истина;
	
	Исключение
	
	КонецПопытки;
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

// Получает получает параметры устройства.
//
// Параметры:
//  ОфлайнОборудование - СправочникСсылка.ПодключаемоеОборудование - экземпляр оборудования.
//
// Возвращаемое значение:
//  Структура - параметры устройства.
//
Функция ПараметрыУстройства(Устройство)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ОфлайнОборудование.ПравилоОбмена КАК ПравилоОбмена,
	|	ОфлайнОборудование.УзелИнформационнойБазы КАК УзелИнформационнойБазы,
	|	ЕСТЬNULL(ОфлайнОборудование.ПравилоОбмена.Склад.Магазин.ПравилоЦенообразования.ВидЦен, ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)) КАК ВидЦены,
	|	ЕСТЬNULL(ОфлайнОборудование.ПравилоОбмена.Склад, ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)) КАК Склад,
	|	ЕСТЬNULL(ОфлайнОборудование.ПравилоОбмена.МаксимальныйКодPLU, 0) КАК МаксимальныйКодPLU,
	|	ЕСТЬNULL(ОфлайнОборудование.ПравилоОбмена.СвояНумерацияPLUНаОборудовании, ЛОЖЬ) КАК СвояНумерацияPLUНаОборудовании,
	|	ЕСТЬNULL(ОфлайнОборудование.ПравилоОбмена.ВыгружатьГруппыТоваров, ЛОЖЬ) КАК ВыгружатьГруппыТоваров,
	|	ОфлайнОборудование.ТипОфлайнОборудования КАК ТипОборудования
	|ИЗ
	|	Справочник.ПодключаемоеОборудование КАК ОфлайнОборудование
	|ГДЕ
	|	ОфлайнОборудование.Ссылка = &Устройство";
	
	Запрос.УстановитьПараметр("Устройство", Устройство);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Если Не Выборка.Следующий() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ВозвращаемоеЗначение = Новый Структура;
	ВозвращаемоеЗначение.Вставить("ПравилоОбмена",                  Выборка.ПравилоОбмена);
	ВозвращаемоеЗначение.Вставить("УзелИнформационнойБазы",         Выборка.УзелИнформационнойБазы);
	ВозвращаемоеЗначение.Вставить("Склад",                          Выборка.Склад);
	ВозвращаемоеЗначение.Вставить("ВидЦены",                        Выборка.ВидЦены);
	ВозвращаемоеЗначение.Вставить("ТипОборудования",                Выборка.ТипОборудования);
	ВозвращаемоеЗначение.Вставить("МаксимальныйКодPLU",             Выборка.МаксимальныйКодPLU);
	ВозвращаемоеЗначение.Вставить("СвояНумерацияPLUНаОборудовании", Строка(Выборка.СвояНумерацияPLUНаОборудовании));
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

// Получает получает параметры устройства.
//
// Параметры:
//  ОфлайнОборудование - СправочникСсылка.ПодключаемоеОборудование - экземпляр оборудования.
//
// Возвращаемое значение:
//  Структура - параметры устройства.
//
Функция ПараметрыВесов(Устройство)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПодключаемоеОборудование.ПравилоОбмена КАК ПравилоОбмена,
	|	ПодключаемоеОборудование.УзелИнформационнойБазы КАК УзелИнформационнойБазы,
	|	ЕСТЬNULL(ПодключаемоеОборудование.ПравилоОбмена.Склад.Магазин.ПравилоЦенообразования.ВидЦен, ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)) КАК ВидЦены,
	|	ЕСТЬNULL(ПодключаемоеОборудование.ПравилоОбмена.Склад, ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)) КАК Склад,
	|	ЕСТЬNULL(ПодключаемоеОборудование.ПравилоОбмена.МаксимальныйКодPLU, 0) КАК МаксимальныйКодPLU,
	|	ЕСТЬNULL(ПодключаемоеОборудование.ПравилоОбмена.СвояНумерацияPLUНаОборудовании, ЛОЖЬ) КАК СвояНумерацияPLUНаОборудовании,
	|	ЕСТЬNULL(ПодключаемоеОборудование.ПравилоОбмена.ВыгружатьГруппыТоваров, ЛОЖЬ) КАК ВыгружатьГруппыТоваров,
	|	ПодключаемоеОборудование.ТипОборудования КАК ТипОборудования
	|ИЗ
	|	Справочник.ПодключаемоеОборудование КАК ПодключаемоеОборудование
	|ГДЕ
	|	ПодключаемоеОборудование.Ссылка = &Устройство";
	
	Запрос.УстановитьПараметр("Устройство", Устройство);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Если Не Выборка.Следующий() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ВозвращаемоеЗначение = Новый Структура;
	ВозвращаемоеЗначение.Вставить("ПравилоОбмена",                  Выборка.ПравилоОбмена);
	ВозвращаемоеЗначение.Вставить("УзелИнформационнойБазы",         Выборка.УзелИнформационнойБазы);
	ВозвращаемоеЗначение.Вставить("Склад",                          Выборка.Склад);
	ВозвращаемоеЗначение.Вставить("ВидЦены",                        Выборка.ВидЦены);
	ВозвращаемоеЗначение.Вставить("ТипОборудования",                Выборка.ТипОборудования);
	ВозвращаемоеЗначение.Вставить("МаксимальныйКодPLU",             Выборка.МаксимальныйКодPLU);
	ВозвращаемоеЗначение.Вставить("СвояНумерацияPLUНаОборудовании", Строка(Выборка.СвояНумерацияPLUНаОборудовании));
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

Процедура ЗаполнитьВидПродукцииИС(Номенклатура, ЗаписьТовар)
	
	ЗаписьТовар.ЭтоМаркированнаяПродукция = Истина;
	
	Если Номенклатура.ВидПродукцииИС = Перечисления.ВидыПродукцииИС.Алкогольная Тогда
		ЗаписьТовар.ЭтоМаркированнаяПродукция = Ложь;
	ИначеЕсли Номенклатура.ВидПродукцииИС = Перечисления.ВидыПродукцииИС.Табак Тогда
		ЗаписьТовар.ЭтоМаркированнаяПродукция = Истина;
		ЗаписьТовар.ВидМаркированнойПродукции = Перечисления.ВидыМаркированнойПродукцииБПО.Табак;
		ЗаписьТовар.ТипМаркированнойПродукции = Перечисления.ТипыМаркировкиККТ.ТабачнаяПродукция;
	ИначеЕсли Номенклатура.ВидПродукцииИС = Перечисления.ВидыПродукцииИС.Обувь Тогда
		ЗаписьТовар.ЭтоМаркированнаяПродукция = Истина;
		ЗаписьТовар.ВидМаркированнойПродукции = Перечисления.ВидыМаркированнойПродукцииБПО.Обувь;
		ЗаписьТовар.ТипМаркированнойПродукции = Перечисления.ТипыМаркировкиККТ.ОбувныеТовары;
	ИначеЕсли Номенклатура.ВидПродукцииИС = Перечисления.ВидыПродукцииИС.ЛегкаяПромышленность Тогда
		ЗаписьТовар.ЭтоМаркированнаяПродукция = Истина;
		ЗаписьТовар.ВидМаркированнойПродукции = Перечисления.ВидыМаркированнойПродукцииБПО.ЛегкаяПромышленность;
	ИначеЕсли Номенклатура.ВидПродукцииИС = Перечисления.ВидыПродукцииИС.МолочнаяПродукцияПодконтрольнаяВЕТИС ИЛИ Номенклатура.ВидПродукцииИС = Перечисления.ВидыПродукцииИС.МолочнаяПродукцияБезВЕТИС Тогда
		ЗаписьТовар.ЭтоМаркированнаяПродукция = Истина;
		ЗаписьТовар.ВидМаркированнойПродукции = Перечисления.ВидыМаркированнойПродукцииБПО.МолочнаяПродукция;
	ИначеЕсли Номенклатура.ВидПродукцииИС = Перечисления.ВидыПродукцииИС.Шины Тогда
		ЗаписьТовар.ЭтоМаркированнаяПродукция = Истина;
		ЗаписьТовар.ВидМаркированнойПродукции = Перечисления.ВидыМаркированнойПродукцииБПО.Шины;
	ИначеЕсли Номенклатура.ВидПродукцииИС = Перечисления.ВидыПродукцииИС.Фотоаппараты Тогда
		ЗаписьТовар.ЭтоМаркированнаяПродукция = Истина;
		ЗаписьТовар.ВидМаркированнойПродукции = Перечисления.ВидыМаркированнойПродукцииБПО.Фотоаппараты;
	ИначеЕсли Номенклатура.ВидПродукцииИС = Перечисления.ВидыПродукцииИС.Велосипеды Тогда
		ЗаписьТовар.ЭтоМаркированнаяПродукция = Истина;
		ЗаписьТовар.ВидМаркированнойПродукции = Перечисления.ВидыМаркированнойПродукцииБПО.Велосипеды;
	ИначеЕсли Номенклатура.ВидПродукцииИС = Перечисления.ВидыПродукцииИС.КреслаКоляски Тогда
		ЗаписьТовар.ЭтоМаркированнаяПродукция = Истина;
		ЗаписьТовар.ВидМаркированнойПродукции = Перечисления.ВидыМаркированнойПродукцииБПО.КреслаКоляски;
	ИначеЕсли Номенклатура.ВидПродукцииИС = Перечисления.ВидыПродукцииИС.Духи Тогда
		ЗаписьТовар.ЭтоМаркированнаяПродукция = Истина;
		ЗаписьТовар.ВидМаркированнойПродукции = Перечисления.ВидыМаркированнойПродукцииБПО.Духи;
	ИначеЕсли Номенклатура.ВидПродукцииИС = Перечисления.ВидыПродукцииИС.АльтернативныйТабак Тогда 
		ЗаписьТовар.ЭтоМаркированнаяПродукция = Истина;
		ЗаписьТовар.ВидМаркированнойПродукции = Перечисления.ВидыМаркированнойПродукцииБПО.АльтернативныйТабак;
	ИначеЕсли Номенклатура.ВидПродукцииИС = Перечисления.ВидыПродукцииИС.УпакованнаяВода Тогда 
		ЗаписьТовар.ЭтоМаркированнаяПродукция = Истина;
		ЗаписьТовар.ВидМаркированнойПродукции = Перечисления.ВидыМаркированнойПродукцииБПО.УпакованнаяВода;
	ИначеЕсли Номенклатура.ВидПродукцииИС = Перечисления.ВидыПродукцииИС.НикотиносодержащаяПродукция Тогда 
		ЗаписьТовар.ЭтоМаркированнаяПродукция = Истина;
		ЗаписьТовар.ВидМаркированнойПродукции = Перечисления.ВидыМаркированнойПродукцииБПО.НикотиносодержащаяПродукция;
	ИначеЕсли Номенклатура.ВидПродукцииИС = Перечисления.ВидыПродукцииИС.БАДы Тогда 
		ЗаписьТовар.ЭтоМаркированнаяПродукция = Истина;
		ЗаписьТовар.ВидМаркированнойПродукции = Перечисления.ВидыМаркированнойПродукцииБПО.БАДы;
	ИначеЕсли Номенклатура.ВидПродукцииИС = Перечисления.ВидыПродукцииИС.Антисептики Тогда 
		ЗаписьТовар.ЭтоМаркированнаяПродукция = Истина;
		ЗаписьТовар.ВидМаркированнойПродукции = Перечисления.ВидыМаркированнойПродукцииБПО.Антисептики;
	ИначеЕсли Номенклатура.ВидПродукцииИС = Перечисления.ВидыПродукцииИС.СоковаяПродукция Тогда 
		ЗаписьТовар.ЭтоМаркированнаяПродукция = Истина;
		ЗаписьТовар.ВидМаркированнойПродукции = Перечисления.ВидыМаркированнойПродукцииБПО.СоковаяПродукция;
	ИначеЕсли Номенклатура.ВидПродукцииИС = Перечисления.ВидыПродукцииИС.Пиво Тогда 
		Если Номенклатура.ПродаетсяВРозлив Тогда
			ЗаписьТовар.ЭтоМаркированнаяПродукция = Ложь;
			ЗаписьТовар.ЭтоАлкоголь = Истина;
			ЗаписьТовар.ВидМаркированнойПродукции = Перечисления.ВидыМаркированнойПродукцииБПО.РазливноеПиво;
		Иначе
			ЗаписьТовар.ЭтоМаркированнаяПродукция = Истина;
			ЗаписьТовар.ВидМаркированнойПродукции = Перечисления.ВидыМаркированнойПродукцииБПО.Пиво;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьУзелПланаОбмена(РеквизитыККМ)
	
	ОфлайнОборудованиеОбъект = РеквизитыККМ.КассаККМ.ОфлайнОборудование.ПолучитьОбъект();
	
	НачатьТранзакцию();
	Попытка
		
		БлокировкаДанных = Новый БлокировкаДанных;
		ЭлементБлокировки = БлокировкаДанных.Добавить("Справочник.ПодключаемоеОборудование");
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		ЭлементБлокировки.УстановитьЗначение("Ссылка", РеквизитыККМ.КассаККМ.ОфлайнОборудование);
		БлокировкаДанных.Заблокировать();
		
		УзелОбъект = ПланыОбмена.ОбменСПодключаемымОборудованием.СоздатьУзел();
		УзелОбъект.УстановитьНовыйКод();
		УзелОбъект.Наименование = РеквизитыККМ.КассаККМ.ОфлайнОборудование.Наименование;
		УзелОбъект.Записать();
		
		ОфлайнОборудованиеОбъект.УзелИнформационнойБазы = УзелОбъект;
		
		ОфлайнОборудованиеОбъект.Записать();
		ЗафиксироватьТранзакцию();
		
	Исключение
		ОтменитьТранзакцию();
	КонецПопытки;
	
КонецПроцедуры

#КонецОбласти
