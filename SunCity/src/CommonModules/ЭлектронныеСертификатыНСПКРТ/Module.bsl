#Область ПрограммныйИнтерфейс

// Заполняет вид оплаты "Платежная карта" с привязкой к платежной системе "Сертификат НСПК".
//
// Параметры:
//  ВидОплаты - ПеречислениеСсылка - Перечисление.ВидыБезналичныхОплат.
//
Процедура ЗаполнитьВидОплатыПлатежнаяКартаНСПК(ВидОплаты) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос("ВЫБРАТЬ ПЕРВЫЕ 1
	|	ВидыОплат.Ссылка КАК ВидОплаты
	|ИЗ
	|	Справочник.ВидыОплатЧекаККМ КАК ВидыОплат
	|ГДЕ
	|	ВидыОплат.ТипОплаты = ЗНАЧЕНИЕ(Перечисление.ТипыОплатЧекаККМ.ПлатежнаяКарта)
	|	И ВидыОплат.ПлатежнаяСистема = ЗНАЧЕНИЕ(Перечисление.ТипыПлатежнойСистемыККТ.СертификатНСПК)
	|	И НЕ ВидыОплат.ПометкаУдаления");
	
	Результат = Запрос.Выполнить().Выбрать();
	Если Результат.Следующий() Тогда
		ВидОплаты = Результат.ВидОплаты;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

// Заполняет вид оплаты "Платежная система" с привязкой к платежной системе "Сертификат НСПК".
//
// Параметры:
//  ВидОплаты - ПеречислениеСсылка - Перечисление.ВидыБезналичныхОплат.
//
Процедура ЗаполнитьВидОплатыПлатежнаяСистемаНСПК(ВидОплаты) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос("ВЫБРАТЬ ПЕРВЫЕ 1
	|	ВидыОплат.Ссылка КАК ВидОплаты
	|ИЗ
	|	Справочник.ВидыОплатЧекаККМ КАК ВидыОплат
	|ГДЕ
	|	ВидыОплат.ТипОплаты = ЗНАЧЕНИЕ(Перечисление.ТипыОплатЧекаККМ.ПлатежнаяСистема)
	|	И ВидыОплат.ПлатежнаяСистема = ЗНАЧЕНИЕ(Перечисление.ТипыПлатежнойСистемыККТ.СертификатНСПК)
	|	И НЕ ВидыОплат.ПометкаУдаления");
	
	Результат = Запрос.Выполнить().Выбрать();
	Если Результат.Следующий() Тогда
		ВидОплаты = Результат.ВидОплаты;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

// Заполняет общие параметры подключения к сервису НСПК.
//
// Параметры:
//  ПараметрыПодключения - Структура - содержит значения по ключам АдресСервисаНСПК, КлючДоступаНСПК.
//
Процедура ЗаполнитьПараметрыПодключенияНСПК(ПараметрыПодключения) Экспорт
	
	ПараметрыПодключения.Вставить("АдресСервисаНСПК", "");
	ПараметрыПодключения.Вставить("КлючДоступаНСПК", "");
	
	УстановитьПривилегированныйРежим(Истина);
	
	ПараметрыПодключения.Вставить("ПроверятьКорневыеСертификаты", Константы.ПроверятьКорневыеСертификатыНСПК.Получить());
	ЗаполнитьЗначенияСвойств(ПараметрыПодключения,
		ОбщегоНазначения.ПрочитатьДанныеИзБезопасногоХранилища("ЭС_НСПК_МИР", "АдресСервисаНСПК, КлючДоступаНСПК"));
		
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

// Заполняет параметры операции НСПК по кассе.
//
// Параметры:
//  ПараметрыОперации - Структура - ЭлектронныеСертификатыНСПК.ПараметрыОперацииНСПК()
//  КассаККМ - СправочникСсылка.КассыККМ - Касса ККМ, для которой необходимо получить параметры операции;
//  ИдентификаторКорзины - Строка - идентификатор корзины для операции возврата;
//  ИдентификаторЗапроса - Строка - идентификатор запроса операции.
//
Процедура ЗаполнитьПараметрыОперацииНСПКПоКассеККМ(ПараметрыОперации, КассаККМ, ИдентификаторКорзины = "", ИдентификаторЗапроса = "0") Экспорт
	
	ПараметрыПодключенияНСПК  = Новый Структура("АдресСервисаНСПК, КлючДоступаНСПК");
	ЗаполнитьПараметрыПодключенияНСПК(ПараметрыПодключенияНСПК);
	
	ПараметрыПодключенияКассыНСПК = Новый Структура("ИдентификаторНСПК, КлючКассыНСПК");
	ЗаполнитьПараметрыПодключенияКассыНСПК(ПараметрыПодключенияКассыНСПК, КассаККМ);
	
	ПараметрыПодключенияОрганизацииНСПК = Новый Структура("КлючОрганизацииНСПК");
	ЗаполнитьПараметрыПодключенияОрганизацииНСПК(ПараметрыПодключенияОрганизацииНСПК,
		ОбщегоНазначения.ЗначениеРеквизитаОбъекта(КассаККМ, "Владелец"));
		
	ПараметрыОперации.АдресСервера = ПараметрыПодключенияНСПК.АдресСервисаНСПК;
	ПараметрыОперации.КлючДоступа =
		?(ЗначениеЗаполнено(ПараметрыПодключенияОрганизацииНСПК.КлючОрганизацииНСПК),
			ПараметрыПодключенияОрганизацииНСПК.КлючОрганизацииНСПК,
			ПараметрыПодключенияНСПК.КлючДоступаНСПК);
	ПараметрыОперации.ПроверятьКорневыеСертификаты = ПараметрыПодключенияНСПК.ПроверятьКорневыеСертификаты;
	ПараметрыОперации.КлючКассы = ПараметрыПодключенияКассыНСПК.КлючКассыНСПК;
	ПараметрыОперации.ИдентификаторКассы = ПараметрыПодключенияКассыНСПК.ИдентификаторНСПК;
	ПараметрыОперации.ИдентификаторКорзины = ИдентификаторКорзины;
	ПараметрыОперации.ИдентификаторЗапроса = ИдентификаторЗапроса;
	
КонецПроцедуры

// Заполняет параметры подключения кассы к сервису НСПК.
//
// Параметры:
//  ПараметрыПодключения - Структура - содержит значения по ключам ИдентификаторНСПК, КлючКассыНСПК.
//  КассаККМ - СправочникСсылка.КассыККМ - Касса ККМ, для которой необходимо получить параметры подключения.
//
Процедура ЗаполнитьПараметрыПодключенияКассыНСПК(ПараметрыПодключения, КассаККМ) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ЗаполнитьЗначенияСвойств(ПараметрыПодключения,
		ОбщегоНазначения.ПрочитатьДанныеИзБезопасногоХранилища(КассаККМ, "ИдентификаторНСПК, КлючКассыНСПК"));
		
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

// Возвращает параметры подключения организации к сервису НСПК.
//
// Параметры:
//  ПараметрыПодключения - Структура - содержит значения по ключам КлючОрганизацииНСПК.
//  Организация - СправочникСсылка.Организации - Организация, для которой необходимо получить параметры подключения.
//
Процедура ЗаполнитьПараметрыПодключенияОрганизацииНСПК(ПараметрыПодключения, Организация) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	КлючОрганизацииНСПК = ОбщегоНазначения.ПрочитатьДанныеИзБезопасногоХранилища(Организация, "КлючОрганизацииНСПК");
	Если Не ЗначениеЗаполнено(КлючОрганизацииНСПК) Тогда
		КлючОрганизацииНСПК = ОбщегоНазначения.ПрочитатьДанныеИзБезопасногоХранилища("ЭС_НСПК_МИР", "КлючДоступаНСПК");
	КонецЕсли;
	
	ПараметрыПодключения.Вставить("КлючОрганизацииНСПК", КлючОрганизацииНСПК);
		
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

// Заполняет результат передачи подтверждения операции ЭС НСПК.
//
// Параметры:
//  СуммаСертификатамиНСПК - Число - сумма, оплаченная сертификатом.
//  ЧекККМ - ДокументСсылка.ЧекККМ - Чек ККМ, который необходимо отправить для подтверждения операции с ЭС НСПК.
//
Процедура ЗаполнитьСуммуОплатыСертификатамиНСПК(СуммаОплаты, ЧекККМ) Экспорт
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	ЕстьNULL(СУММА(Оплата.Сумма), 0) КАК СуммаСертификатамиНСПК
	|ИЗ
	|	Документ.ЧекККМ.Оплата КАК Оплата
	|ГДЕ
	|	Оплата.Ссылка = &ЧекККМ
	|	И Оплата.ВидОплаты.ТипОплаты = ЗНАЧЕНИЕ(Перечисление.ТипыОплатЧекаККМ.ПлатежнаяСистема)
	|	И Оплата.ВидОплаты.ПлатежнаяСистема = ЗНАЧЕНИЕ(Перечисление.ТипыПлатежнойСистемыККТ.СертификатНСПК)");
	
	Запрос.УстановитьПараметр("ЧекККМ", ЧекККМ);
	
	Результат = Запрос.Выполнить().Выгрузить();
	
	Если Результат.Количество() > 0 Тогда
		СуммаОплаты = Результат[0].СуммаСертификатамиНСПК;
	Иначе
		СуммаОплаты = 0;
	КонецЕсли;

КонецПроцедуры

// Проверяет подтверждение оплаты электронным сертификатом или платежной картой
// в табличной части "Оплата" чека ККМ в НСПК.
//
// Параметры:
//  ЧекККМ - ДокументОбъект.ЧекККМ - Чек ККМ, который необходимо проверить;
//  Отказ - Булево - флаг отказа от продолжения операции проведения.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиОплата(ЧекККМ, Отказ) Экспорт
	
	Неподтверждено = Ложь;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	Оплата.ДанныеПереданыВБанк КАК ДанныеПереданыВБанк,
	|	ВЫРАЗИТЬ(Оплата.ВидОплаты КАК Справочник.ВидыОплатЧекаККМ) КАК ВидОплаты
	|ПОМЕСТИТЬ ТаблицаОплат
	|ИЗ
	|	&Оплата КАК Оплата
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ТаблицаОплат.ДанныеПереданыВБанк КАК ДанныеПереданыВБанк
	|ИЗ
	|	ТаблицаОплат КАК ТаблицаОплат
	|ГДЕ
	|	НЕ ТаблицаОплат.ДанныеПереданыВБанк
	|	И ТаблицаОплат.ВидОплаты.ПлатежнаяСистема = ЗНАЧЕНИЕ(Перечисление.ТипыПлатежнойСистемыККТ.СертификатНСПК)");
	
	Запрос.УстановитьПараметр("Оплата", ЧекККМ.Оплата.Выгрузить());
	
	Неподтверждено = НЕ Запрос.Выполнить().Пустой();
	
	Если Неподтверждено Тогда
		Текст = НСтр("ru = 'Оплата или возврат электронным сертификатом должны быть подтверждены платежной системой.'");
			ОбщегоНазначения.СообщитьПользователю(
			Текст,
			ЧекККМ,
			"Оплата",
			,
			Отказ);
	КонецЕсли;
	
КонецПроцедуры

// Проверяет возможность оплаты НСПК и заполняет форматированную строку
// с гиперссылками необходимых настроек.
// Параметры:
//  СтрокаСОшибками - ФорматированнаяСтрока - Строка с гиперссылками необходимых настроек
//  ФормаРМК - ФормаКлиентскогоПриложения - Форма рабочего места кассира
//
Процедура ПроверитьВозможностьОплатыНСПК(СтрокаСОшибками, ФормаРМК) Экспорт
	
	КассаККМ = ФормаРМК.Объект.КассаККМ;
	ТаблицаЭквайринговыхТерминалов = ФормаРМК.ТаблицаТерминалы;
	
	ЧастиФорматированнойСтроки = Новый Массив;
	
	АдресМагазина = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(
		КассаККМ.Магазин, Справочники.ВидыКонтактнойИнформации.ФактАдресМагазина, ТекущаяДатаСеанса(), Истина);
	Если Не ЗначениеЗаполнено(АдресМагазина) Тогда
			ЧастиФорматированнойСтроки.Добавить(Новый ФорматированнаяСтрока(НСтр("ru = 'Необходимо указать адрес '")));
			ЧастиФорматированнойСтроки.Добавить(Новый ФорматированнаяСтрока(НСтр("ru = 'магазина.'"),,,, ПолучитьНавигационнуюСсылку(КассаККМ.Магазин)));
			ЧастиФорматированнойСтроки.Добавить(Символы.ПС);
	КонецЕсли;
	
	ПлатежнаяКартаНСПК = Неопределено;
	ЭлектронныеСертификатыНСПКРТ.ЗаполнитьВидОплатыПлатежнаяКартаНСПК(ПлатежнаяКартаНСПК);
	ПлатежнаяСистемаНСПК = Неопределено;
	ЭлектронныеСертификатыНСПКРТ.ЗаполнитьВидОплатыПлатежнаяСистемаНСПК(ПлатежнаяСистемаНСПК);
	
	СтруктураПоиска = Новый Структура("ВидОплаты", ПлатежнаяКартаНСПК);
	МассивВидовОплат = ФормаРМК.ТаблицаПлатежныхКарт.НайтиСтроки(СтруктураПоиска);
	Если МассивВидовОплат.Количество() > 0 Тогда
		ФормаРМК.ВыбранныйВидОплаты = МассивВидовОплат[0].ИмяКоманды;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ТаблицаЭквайринговыхТерминалов) Тогда
		ЧастиФорматированнойСтроки.Добавить(Новый ФорматированнаяСтрока(НСтр("ru = 'Для указанной '")));
		ЧастиФорматированнойСтроки.Добавить(Новый ФорматированнаяСтрока(НСтр("ru = 'кассы ККМ'"),,,, ПолучитьНавигационнуюСсылку(КассаККМ)));
		ЧастиФорматированнойСтроки.Добавить(Новый ФорматированнаяСтрока(НСтр("ru = ' необходимо создать эквайринговый терминал'")));
		ЧастиФорматированнойСтроки.Добавить(Символы.ПС);
		СтрокаСОшибками = Новый ФорматированнаяСтрока(ЧастиФорматированнойСтроки);
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ПлатежнаяКартаНСПК) Тогда
		ЧастиФорматированнойСтроки.Добавить(Новый ФорматированнаяСтрока(НСтр("ru = 'Необходимо создать '")));
		ЧастиФорматированнойСтроки.Добавить(Новый ФорматированнаяСтрока(НСтр("ru = 'вид оплаты'"),,,, НСтр("ru='e1cib/list/Справочник.ВидыОплатЧекаККМ'")));
		ЧастиФорматированнойСтроки.Добавить(Новый ФорматированнаяСтрока(НСтр("ru = ' Платежная карта НСПК'")));
		ЧастиФорматированнойСтроки.Добавить(Символы.ПС);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ПлатежнаяСистемаНСПК) Тогда
		ЧастиФорматированнойСтроки.Добавить(Новый ФорматированнаяСтрока(НСтр("ru = 'Необходимо создать '")));
		ЧастиФорматированнойСтроки.Добавить(Новый ФорматированнаяСтрока(НСтр("ru = 'вид оплаты'"),,,, НСтр("ru='e1cib/list/Справочник.ВидыОплатЧекаККМ'")));
		ЧастиФорматированнойСтроки.Добавить(Новый ФорматированнаяСтрока(НСтр("ru = ' Платежная система НСПК'")));
		ЧастиФорматированнойСтроки.Добавить(Символы.ПС);
	КонецЕсли;

	Если ЗначениеЗаполнено(ПлатежнаяКартаНСПК) И ЗначениеЗаполнено(ПлатежнаяСистемаНСПК) Тогда
		СтруктураОтбора = Новый Структура("ВидОплаты", ПлатежнаяКартаНСПК);
		НайденныеСтрокиПлатежнаяКарта = ТаблицаЭквайринговыхТерминалов.НайтиСтроки(СтруктураОтбора);
		Если НайденныеСтрокиПлатежнаяКарта.Количество() = 0 Тогда
			ЧастиФорматированнойСтроки.Добавить(Новый ФорматированнаяСтрока(НСтр("ru = 'В доступные виды оплаты эквайрингового терминала'")));
			ЧастиФорматированнойСтроки.Добавить(Новый ФорматированнаяСтрока(НСтр("ru = ' необходимо добавить вид оплаты Платежная карта НСПК'")));
			ЧастиФорматированнойСтроки.Добавить(Символы.ПС);
		Иначе
			ЕстьНастроенныйТерминал = Ложь;
			Для Каждого ТерминалСПлатежнойКартойНСПК ИЗ НайденныеСтрокиПлатежнаяКарта Цикл
				СтруктураОтбора = Новый Структура("ЭквайринговыйТерминал, ВидОплаты", ТерминалСПлатежнойКартойНСПК.ЭквайринговыйТерминал, ПлатежнаяСистемаНСПК);
				НайденныеСтроки = ТаблицаЭквайринговыхТерминалов.НайтиСтроки(СтруктураОтбора);
				Если НЕ НайденныеСтроки.Количество() = 0 Тогда
					ЕстьНастроенныйТерминал = Истина;
				КонецЕсли;
			КонецЦикла;
			Если Не ЕстьНастроенныйТерминал Тогда
				ЧастиФорматированнойСтроки.Добавить(Новый ФорматированнаяСтрока(НСтр("ru = 'В доступные виды оплаты эквайрингового терминала'")));
				ЧастиФорматированнойСтроки.Добавить(Новый ФорматированнаяСтрока(НСтр("ru = ' необходимо добавить вид оплаты Платежная система НСПК'")));
				ЧастиФорматированнойСтроки.Добавить(Символы.ПС);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	СтрокаСОшибками = Новый ФорматированнаяСтрока(ЧастиФорматированнойСтроки);
	
КонецПроцедуры

// Заполняет параметры фискальной операции для отправки подтверждения в НСПК
// Параметры:
//  ПараметрыФискальнойОперации - Структура - ЭлектронныеСертификатыНСПК.ПараметрыОперацииНСПК()
//  ЧекККМ - ДокументСсылка.ЧекККМ - ЧекККМ, для которого получаются параметры операции
//
Процедура ЗаполнитьПараметрыФискальнойОперацииНСПК(ПараметрыФискальнойОперации, ЧекККМ) Экспорт
	
	РеквизитыДокумента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ЧекККМ, "Магазин, КассаККМ");
	Магазин = РеквизитыДокумента.Магазин;
	КассаККМ = РеквизитыДокумента.КассаККМ;
	СуммаОплаченоСертификатамиНСПК = 0;
	ЗаполнитьСуммуОплатыСертификатамиНСПК(СуммаОплаченоСертификатамиНСПК, ЧекККМ);
	
	ДанныеФискальнойОперации = МенеджерОборудованияВызовСервера.ДанныеФискальнойОперации(ЧекККМ);
		
	Если ДанныеФискальнойОперации = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	АдресМагазина = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(
		Магазин, Справочники.ВидыКонтактнойИнформации.ФактАдресМагазина, ТекущаяДатаСеанса(), Истина);
	
	ЗаполнитьПараметрыОперацииНСПКПоКассеККМ(ПараметрыФискальнойОперации, КассаККМ,
		ДанныеФискальнойОперации.ИдентификаторОплатыПлатежнойСистемы);
	
	ПараметрыФискальнойОперации.НомерФискальногоНакопителя = ДанныеФискальнойОперации.ЗаводскойНомерФН;
	ПараметрыФискальнойОперации.ФискальныйТипРасчета = ДанныеФискальнойОперации.ТипРасчета;
	ПараметрыФискальнойОперации.ФискальныйПризнакЧека = ЛЕВ(ДанныеФискальнойОперации.ФискальныйПризнак, 10);
	ПараметрыФискальнойОперации.ФискальныйЧекНомер = Строка(ДанныеФискальнойОперации.НомерЧекаККМ);
	ПараметрыФискальнойОперации.ФискальныйЧекДатаВремя = ДанныеФискальнойОперации.Дата;
	ПараметрыФискальнойОперации.ФискальныйЧекСумма = СуммаОплаченоСертификатамиНСПК;
	ПараметрыФискальнойОперации.ФискальныйМестоРасчетов = АдресМагазина;
	ПараметрыФискальнойОперации.ФискальныйЧекСумма = СуммаОплаченоСертификатамиНСПК;
	ПараметрыФискальнойОперации.ОснованиеФискальнойОперации = ЧекККМ;
	
КонецПроцедуры

// Заполняет Организацию и КассуККМ по умолчанию
// для формы настроек НСПК.
//
// Параметры:
//  СтруктураОрганизацияКассаККМ - Структура с ключами Организация, КассаККМ;
//
Процедура ЗаполнитьЗначенияФормыНастроек(СтруктураОрганизацияКассаККМ) Экспорт
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	Организации.Ссылка КАК Организация,
	|	КассыККМ.Ссылка КАК КассаККМ
	|ИЗ
	|	Справочник.Организации КАК Организации
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КассыККМ КАК КассыККМ
	|		ПО (КассыККМ.Владелец = Организации.Ссылка)
	|ГДЕ
	|	НЕ Организации.ПометкаУдаления
	|	И НЕ КассыККМ.ПометкаУдаления
	|	И ВЫБОР
	|			КОГДА &Организация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ Организации.Ссылка = &Организация
	|		КОНЕЦ";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Организация", СтруктураОрганизацияКассаККМ.Организация);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() И Выборка.Количество() = 1 Тогда
		ЗаполнитьЗначенияСвойств(СтруктураОрганизацияКассаККМ, Выборка);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

// Заполняет возможную сумму к возврату на платежную карту.
//
// Параметры:
//  Лимит - Число
//  ЧекККМПродажа - ДокументСсылка.ЧекККМ - ЧекККМ продажи по ЭС НСПК
//
Процедура ЗаполнитьЛимитВозвратаНаКартуНСПК(Лимит, ЧекККМПродажа) Экспорт
	
	Лимит = 0;
	
	ВидОплатыПлатежнаяКартаНСПК = Неопределено;
	ЭлектронныеСертификатыНСПКРТ.ЗаполнитьВидОплатыПлатежнаяКартаНСПК(ВидОплатыПлатежнаяКартаНСПК);
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ЧекККМОплата.Сумма КАК Сумма
	|ПОМЕСТИТЬ ВТОплаты
	|ИЗ
	|	Документ.ЧекККМ.Оплата КАК ЧекККМОплата
	|ГДЕ
	|	ЧекККМОплата.Ссылка = &ЧекККМПродажа
	|	И ЧекККМОплата.ВидОплаты = &ВидОплатыПлатежнаяКартаНСПК
	|	И ЧекККМОплата.Ссылка.Проведен
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	-ЧекККМОплата.Сумма
	|ИЗ
	|	Документ.ЧекККМ.Оплата КАК ЧекККМОплата
	|ГДЕ
	|	ЧекККМОплата.Ссылка.ЧекККМПродажа = &ЧекККМПродажа
	|	И ЧекККМОплата.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийЧекККМ.Возврат)
	|	И ЧекККМОплата.ВидОплаты = &ВидОплатыПлатежнаяКартаНСПК
	|	И ЧекККМОплата.Ссылка.Проведен
	|	И ЧекККМОплата.ДанныеПереданыВБанк
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕСТЬNULL(СУММА(ВТОплаты.Сумма), 0) КАК Сумма
	|ИЗ
	|	ВТОплаты КАК ВТОплаты";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("ЧекККМПродажа", ЧекККМПродажа);
	Запрос.УстановитьПараметр("ВидОплатыПлатежнаяКартаНСПК", ВидОплатыПлатежнаяКартаНСПК);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Лимит = Лимит + Выборка.Сумма;
	КонецЦикла;
	
КонецПроцедуры

