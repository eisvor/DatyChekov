
Функция ИмяПодсистемы() Экспорт
	
	Возврат "ИСМПТК";
	
КонецФункции

Процедура ВопросЗаписатьОбъектПередВыполнением(ОписаниеОповещенияЗавершения) Экспорт
	
	ТекстВопроса = НСтр("ru = 'Перед выполнением необходимо записать документ.'")
				 + Символы.ПС
				 + НСтр("ru = 'Продолжить?'");
		
	ПоказатьВопрос(ОписаниеОповещенияЗавершения, ТекстВопроса, РежимДиалогаВопрос.ОКОтмена);
		
КонецПроцедуры

Функция ОбъектЗаписан(Форма) Экспорт
	
	Ссылка = ?(ОбщегоНазначенияИСМПТККлиентСервер.ЭтоОбычнаяФорма(Форма), Форма.Ссылка, Форма.Объект.Ссылка);
	
	Если Ссылка.Пустая() ИЛИ Форма.Модифицированность Тогда
		
		Форма.Записать();	
		
	КонецЕсли;
	
	Ссылка = ?(ОбщегоНазначенияИСМПТККлиентСервер.ЭтоОбычнаяФорма(Форма), Форма.Ссылка, Форма.Объект.Ссылка);
	
	ОбъектЗаписан = (НЕ Ссылка.Пустая()) И (НЕ Форма.Модифицированность);	
	
	Возврат ОбъектЗаписан;
	
КонецФункции

// Оповещает формы подсистемы о происхождении события.
//
// Параметры:
//  ИмяСобытия - Строка - Имя произошедшего события.
//  Параметр - Массив, Неопределено - Массив ссылок на измененные или созданные объекты. 
//   Неопределено, если невозможно определить какие объекты были изменены или созданы.
//
Процедура ОповеститьФормы(Знач ИмяСобытия, Знач Параметр = Неопределено, Знач Источник = Неопределено) Экспорт
	
	Оповестить(ИмяСобытия, Параметр, Источник);
	
КонецПроцедуры

Процедура СкопироватьШтрихКодВБуферОбмена(ЭлементФормы, Знач Штрихкод) Экспорт
	
	Попытка
		HTMLДокумент = ЭлементФормы.document;
		ВременноеПолеВвода = HTMLДокумент.createElement("INPUT");
		АктивныйЭлемент = HTMLДокумент.activeElement;
		ВременноеПолеВвода.value = Штрихкод;
		HTMLДокумент.body.appendChild(ВременноеПолеВвода);
		ВременноеПолеВвода.select();
		HTMLДокумент.execCommand("copy");
		HTMLДокумент.body.removeChild(ВременноеПолеВвода);
		АктивныйЭлемент.focus();
		
		ТекстСообщения = НСтр("ru = 'Штрихкод скопирован в буфер обмена.'");
		ПоказатьОповещениеПользователя(,,ТекстСообщения);
	Исключение
		ОчиститьСообщения();
		ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(Штрихкод);
	КонецПопытки;

КонецПроцедуры

Процедура ПоказатьСпискоКМВоВходящемДокументеЦЭДМ(Форма, ДанныеДокумента) Экспорт
	
	ОткрытьФорму("ОбщаяФорма.ФормаПросмотраСпискаКМИСЦЭДМ", ДанныеДокумента, Форма, Истина,,,, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
			
КонецПроцедуры

#Область ГенерацияSSCC

Процедура СгенерироватьНовыйШтрихкодПродолжение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		Форма = ДополнительныеПараметры.ФормаГенерации;
		Форма.Объект.Упаковки.Удалить(Форма.Объект.Упаковки[0]);
		Форма.СгенерироватьШтрихкодПослеВопроса();
	КонецЕсли;
	
КонецПроцедуры

Процедура СгенерироватьШтрихкодПослеВопроса(Источник) Экспорт
	
	Источник.СгенерироватьШтрихкодПослеВопроса();
	
КонецПроцедуры

#КонецОбласти

#Область ОбменИСЦЭДМ

Асинх Процедура ПодписатьДокументыИСЦЭДМ(КоллекцияСгруппированныхДокументовИСЦЭДМ)

	СоответствиеДляПодписиТитулов = Новый Соответствие;
	
	Для Каждого ДокументыОрганизации Из КоллекцияСгруппированныхДокументовИСЦЭДМ Цикл 
		
		Если ДокументыОрганизации.Значение.Количество() = 0 Тогда 
			Продолжить;
		КонецЕсли;
		
		Организация = ДокументыОрганизации.Ключ;
		ПрофильДоступа = ИнтерфейсИСМПТКВызовСервера.ПолучитьДанныеПрофиляДоступаКЭДО(Организация, ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.ТекущийПользователь());
		
		Если ПрофильДоступа = Неопределено Тогда
			
			ТекстСообщения = НСтр("ru='Операция прервана: не определён профиль доступа к ИС ЦЭДМ для пользователя %1 по организации %2.'");
			ТекстСообщения = ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(ТекстСообщения, ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.ТекущийПользователь(), Организация);
			ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
			Продолжить;
			
		КонецЕсли;
		
		ТокенАвторизации = ИнтерфейсИСМПТККлиент.ПолучитьТокенАвторизацииИСЦЭДМ(ПрофильДоступа);
		МассивДанныхДляПодписи = ДокументыОрганизации.Значение;
		
		СтруктураДляПодписи = ИнтеграцияИСМПТКВызовСервера.СозданиеТитуловИСЦЭДМИзМассиваДокументов(МассивДанныхДляПодписи, ТокенАвторизации);
		СоответствиеДляПодписиТитулов.Вставить(Организация, СтруктураДляПодписи);
		
	КонецЦикла;
	
	Для Каждого ДанныеДляПодписи Из СоответствиеДляПодписиТитулов Цикл
		
		Если Не ДанныеДляПодписи.Значение.МассивДокументов.Количество() = 0 Тогда 
			
			ИдентификаторОрганизации = ИнтеграцияИСМПТКВызовСервера.ПолучитьИдентификаторОрганизации(ДанныеДляПодписи.Ключ);
			МассивТитуловДляПодписи = ДанныеДляПодписи.Значение.МассивТитуловДляПодписи;
			ТипДокумента = РаботаСДокументамиИСМПТККлиент.ОпределитьТипДокументаПоСсылке(ДанныеДляПодписи.Значение.МассивДокументов[0]); 
			
			МассивДанныхДляПодписи = ДанныеДляПодписи.Значение.МассивТитуловДляПодписи;
			
			ПодписанныеДокументы = Ждать СоздатьЭЦП_CMS_NCA_Layer(МассивДанныхДляПодписи, 2, Ложь, Ложь, ИдентификаторОрганизации, ТипДокумента);
			
			Если Не ПодписанныеДокументы = "НеВыбран"
				И Не ПодписанныеДокументы = Неопределено Тогда 
				
				Сч = 0;
				
				Для Каждого ЭлементКоллекции Из ДанныеДляПодписи.Значение.МассивТитуловДляПодписи Цикл
					
					
					ДанныеПодписанногоТитула = Новый Структура();
					ДанныеПодписанногоТитула.Вставить("ПодписанныйТитул",   ПодписанныеДокументы[Сч]);
					ДанныеПодписанногоТитула.Вставить("ТитулДляПодписи",    МассивДанныхДляПодписи[Сч]);
					ДанныеПодписанногоТитула.Вставить("Идентификатор",      ДанныеДляПодписи.Значение.МассивИдентификаторов[Сч]);
					ДанныеПодписанногоТитула.Вставить("ТокенАвторизации",   ДанныеДляПодписи.Значение.ТокенАвторизации);
					ДанныеПодписанногоТитула.Вставить("СтруктурнаяЕдиница", ДанныеДляПодписи.Ключ);
					ДанныеПодписанногоТитула.Вставить("СсылкаДокумент", 	ДанныеДляПодписи.Значение.МассивДокументов[Сч]);
					
					ИнтеграцияИСМПТКВызовСервера.ОтправитьПодписанныйДокументыИСЦЭДМ(ДанныеПодписанногоТитула);
					
					Сч = Сч + 1;
					
				КонецЦикла; 
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла; 
	
	Для Каждого СгруппированныеИСЦЭДМ Из КоллекцияСгруппированныхДокументовИСЦЭДМ Цикл
		Если Не СгруппированныеИСЦЭДМ.Значение.Количество() = 0 Тогда
			ТипДокумента = РаботаСДокументамиИСМПТККлиент.ОпределитьТипДокументаПоСсылке(СгруппированныеИСЦЭДМ.Значение[0]);
			ОповеститьФормы(РаботаСДокументамиИСМПТККлиент.ОпределитьИмяСобытияПоТипуДокумента(ТипДокумента), СгруппированныеИСЦЭДМ.Значение);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти
///////////////////////////

////////ОТПРАВКА ДОКУМЕНТОВ////////
#Область ОтправкаДокументовИСМПТ

// Параметры:
//  МассивИсходящихДокументовИСМПТ - Массив - Массив документов, которые необходимо отправить в ИС МПТ.
//   Каждый элемент массива должен иметь тип ДокументСсылка./Имя документа ИС МПТ/.
Процедура ОтправитьИсходящиеДокументыИСМПТ(Знач МассивИсходящихДокументовИСМПТ, Знач ДополнительныеПараметры) Экспорт
	
	Если НЕ КриптопровайдерПодключается() Тогда
		ТекстСообщенияОшибкаКрипты = НСтр("ru='Операция прервана: не получены данные криптопровайдера. Возможно, в базе данных не установлена криптобиблиотека.'");
		ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщенияОшибкаКрипты);		
		Возврат;
	КонецЕсли;
	
	НовыйМассивДокументыИСМПТ = МассивИсходящихДокументовИСМПТ;
	
	Если НовыйМассивДокументыИСМПТ.Количество()=0 Тогда
		Возврат;
	Иначе
		
		//проверка 		
		Если НЕ ИнтеграцияИСМПТКВызовСервера.ПроверитьВозможностьОтправкиДокументовПоставитьВОчередьОтправкиДокументИСМПТ(НовыйМассивДокументыИСМПТ, ДополнительныеПараметры) Тогда
			Возврат;
		КонецЕсли;
		
		ТипДокументаИСМПТ = РаботаСДокументамиИСМПТККлиент.ОпределитьТипДокументаПоСсылке(НовыйМассивДокументыИСМПТ[0]);
		ДополнительныеПараметры.Вставить("МассивИсходящихДокументовИСМПТ", НовыйМассивДокументыИСМПТ);
		ДополнительныеПараметры.Вставить("ТипДокументаИСМПТ", ТипДокументаИСМПТ);
		ОтправитьИсходящиеДокументыИСМПТВыборПараметровИСМПТ(ДополнительныеПараметры);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОтправитьИсходящиеДокументыИСМПТВыборПараметровИСМПТ(ДополнительныеПараметры) Экспорт
	
	МассивИсходящихДокументовИСМПТ = ДополнительныеПараметры.МассивИсходящихДокументовИСМПТ;
	
	// Изменили статус документа, нужно перечитать, если отправка происходит из формы
	
	Если ДополнительныеПараметры.ТипДокументаИСМПТ = ОбщегоНазначенияИСМПТКВызовСервера.ИмяДокументаАктПриемаПередачиИСМПТК() Тогда
		
		ОповеститьФормы(РаботаСДокументамиИСМПТККлиентСервер.ИмяСобытияЗаписьАктПриемаПередачи());
		
	ИначеЕсли ДополнительныеПараметры.ТипДокументаИСМПТ = ОбщегоНазначенияИСМПТКВызовСервера.ИмяДокументаУведомлениеОРасхожденииИСМПТК() Тогда
		
		ОповеститьФормы(РаботаСДокументамиИСМПТККлиентСервер.ИмяСобытияЗаписьУведомлениеОРасхождении());
		
	ИначеЕсли ДополнительныеПараметры.ТипДокументаИСМПТ = ОбщегоНазначенияИСМПТКВызовСервера.ИмяДокументаУведомлениеОВвозеИзЕАЭСИСМПТК() Тогда
		
		ОповеститьФормы(РаботаСДокументамиИСМПТККлиентСервер.ИмяСобытияЗаписьУведомлениеОВвозеИзЕАЭС());
		
	ИначеЕсли ДополнительныеПараметры.ТипДокументаИСМПТ = ОбщегоНазначенияИСМПТКВызовСервера.ИмяДокументаУведомлениеОВвозеИзТретьихСтранИСМПТК() Тогда
		
		ОповеститьФормы(РаботаСДокументамиИСМПТККлиентСервер.ИмяСобытияЗаписьУведомлениеОВвозеИзТретьихСтран())
		
	ИначеЕсли ДополнительныеПараметры.ТипДокументаИСМПТ = ОбщегоНазначенияИСМПТКВызовСервера.ИмяДокументаУведомлениеОВводеВОборотИСМПТК() Тогда
		
		ОповеститьФормы(РаботаСДокументамиИСМПТККлиентСервер.ИмяСобытияЗаписьУведомлениеОВводеВОборот());
		
	ИначеЕсли ДополнительныеПараметры.ТипДокументаИСМПТ = ОбщегоНазначенияИСМПТКВызовСервера.ИмяДокументаУведомлениеОВыводеИзОборотаИСМПТК() Тогда
		
		ОповеститьФормы(РаботаСДокументамиИСМПТККлиентСервер.ИмяСобытияЗаписьУведомлениеОВыводеИзОборота());
		
	ИначеЕсли ДополнительныеПараметры.ТипДокументаИСМПТ = ОбщегоНазначенияИСМПТКВызовСервера.ИмяДокументаУведомлениеОбЭкспортеЕАЭСИСМПТК() Тогда
		
		ОповеститьФормы(РаботаСДокументамиИСМПТККлиентСервер.ИмяСобытияЗаписьУведомлениеОбЭкспортеЕАЭС());
		
	ИначеЕсли ДополнительныеПараметры.ТипДокументаИСМПТ = ОбщегоНазначенияИСМПТКВызовСервера.ИмяДокументаУведомлениеОПриемкеЕАЭСИСМПТК() Тогда
		
		ОповеститьФормы(РаботаСДокументамиИСМПТККлиентСервер.ИмяСобытияУведомлениеОПриемкеЕАЭС());
		
	КонецЕсли;
	
	КоллекцияСгруппированныхДокументовИСМПТ = ИнтеграцияИСМПТКВызовСервера.СгруппироватьДокументыИСМПТПоСтруктурнымЕдиницам(МассивИсходящихДокументовИСМПТ);
	ДополнительныеПараметры.Вставить("КоллекцияСгруппированныхДокументовИСМПТ", КоллекцияСгруппированныхДокументовИСМПТ);
			
	ОтправитьИсходящиеДокументыИСМПТЗавершение(ДополнительныеПараметры);
		
КонецПроцедуры

Процедура ОтправитьИсходящиеДокументыИСМПТЗавершение(ДополнительныеПараметры) Экспорт
	
	Если ДополнительныеПараметры.ТипДокументаИСМПТ = ОбщегоНазначенияИСМПТКВызовСервера.ИмяДокументаАктПриемаПередачиИСМПТК() Тогда
		ОтправитьДокументыАктПриемаПередачи(ДополнительныеПараметры);
	ИначеЕсли ДополнительныеПараметры.ТипДокументаИСМПТ = ОбщегоНазначенияИСМПТКВызовСервера.ИмяДокументаУведомлениеОРасхожденииИСМПТК() Тогда
		ОтправитьДокументыУведомлениеОРасхождении(ДополнительныеПараметры);
	ИначеЕсли ДополнительныеПараметры.ТипДокументаИСМПТ = ОбщегоНазначенияИСМПТКВызовСервера.ИмяДокументаУведомлениеОВводеВОборотИСМПТК() Тогда
		ОтправитьДокументыУведомлениеОВводеВОборот(ДополнительныеПараметры);
	ИначеЕсли ДополнительныеПараметры.ТипДокументаИСМПТ = ОбщегоНазначенияИСМПТКВызовСервера.ИмяДокументаУведомлениеОВыводеИзОборотаИСМПТК() Тогда
		ОтправитьДокументыУведомлениеОВыводеИзОборота(ДополнительныеПараметры);
	ИначеЕсли ДополнительныеПараметры.ТипДокументаИСМПТ = ОбщегоНазначенияИСМПТКВызовСервера.ИмяДокументаУведомлениеОВвозеИзЕАЭСИСМПТК() Тогда
		ОтправитьДокументыУведомлениеОВвозе(ДополнительныеПараметры);
	ИначеЕсли ДополнительныеПараметры.ТипДокументаИСМПТ = ОбщегоНазначенияИСМПТКВызовСервера.ИмяДокументаУведомлениеОВвозеИзТретьихСтранИСМПТК() Тогда
		ОтправитьДокументыУведомлениеОВвозеИзТретьихСтран(ДополнительныеПараметры);
	ИначеЕсли ДополнительныеПараметры.ТипДокументаИСМПТ = ОбщегоНазначенияИСМПТКВызовСервера.ИмяДокументаУведомлениеОбЭкспортеЕАЭСИСМПТК() Тогда
		ОтправитьДокументыУведомлениеОбЭкспортеЕАЭС(ДополнительныеПараметры);
	ИначеЕсли ДополнительныеПараметры.ТипДокументаИСМПТ = ОбщегоНазначенияИСМПТКВызовСервера.ИмяДокументаУведомлениеОПриемкеЕАЭСИСМПТК() Тогда
		ОтправитьДокументыУведомлениеОПриемкеЕАЭС(ДополнительныеПараметры);
	КонецЕсли;
	
КонецПроцедуры

Асинх Процедура ОтправитьДокументыАктПриемаПередачи(ДополнительныеПараметры)
	
	КоллекцияСгруппированныхДокументовИСМПТ = ДополнительныеПараметры.КоллекцияСгруппированныхДокументовИСМПТ;
	КоллекцияАдресКоллекцииАктовXML = Новый Соответствие;
	КоллекцияПодписейИСМП =  Новый Соответствие;
	
	Попытка
		Для Каждого СгруппированныеИСМПТ Из КоллекцияСгруппированныхДокументовИСМПТ Цикл
			
			СтруктурнаяЕдиница = СгруппированныеИСМПТ.Ключ;
			МассивИСМПТ 	   = СгруппированныеИСМПТ.Значение;
			
			ТипДокумента = ОбщегоНазначенияИСМПТКВызовСервера.ИмяДокументаАктПриемаПередачиИСМПТК();
			ТокенАвторизации = Ждать ПолучитьТокенАвторизации(СтруктурнаяЕдиница, ТипДокумента);
			
			Если ТокенАвторизации = Неопределено Тогда
				
				ТекстСообщенияТокенНеПолучен = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияОперацияПрерванаНеПолученыДанныеЭЦП();
				ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщенияТокенНеПолучен);
				Возврат;
				
			КонецЕсли;
			
			АдресКоллекцииАктовXML		= Неопределено;
			АдресКоллекцииПодписейАктов = Неопределено;
			КоллекцияSignedContentXML 	= Неопределено;
			
			ИнтеграцияИСМПТКВызовСервера.СоздатьИсходящиеАкты(МассивИСМПТ, Истина, Неопределено, АдресКоллекцииАктовXML, КоллекцияSignedContentXML);
			КоллекцияАдресКоллекцииАктовXML.Вставить(СтруктурнаяЕдиница, АдресКоллекцииАктовXML);
			АдресКоллекцииПодписейАктов = Ждать ПодписатьДокументы(АдресКоллекцииАктовXML, СтруктурнаяЕдиница, ТипДокумента);
			КоллекцияПодписейИСМП.Вставить(СтруктурнаяЕдиница, АдресКоллекцииПодписейАктов);

		КонецЦикла;
	Исключение
		ВызватьИсключение ОписаниеОшибки();
	КонецПопытки;
	
	// Создать и отправить коллекцию актов.
	ЗапускатьФоновоеЗадание = ДополнительныеПараметры.ЗапускатьФоновоеЗадание;
	ВыполнятьКриптографическиеОперацииНаКлиенте = ВыполнятьКриптографическиеОперацииНаКлиенте(); 
	МассивИсходящихАктов = ДополнительныеПараметры.МассивИсходящихДокументовИСМПТ;
	Если ВыполнятьКриптографическиеОперацииНаКлиенте Тогда
		
		Попытка
			Результат = ИнтеграцияИСМПТКВызовСервера.ОтправитьИсходящиеАкты(КоллекцияПодписейИСМП, ТокенАвторизации);
		Исключение
			ВызватьИсключение ОписаниеОшибки();
		КонецПопытки;
		
		Для Каждого СтрокаАдресКоллекцииАктовXML Из КоллекцияАдресКоллекцииАктовXML Цикл
			
			АдресКоллекцииАктовXML = СтрокаАдресКоллекцииАктовXML.Значение;
			
			// Принудительное удаление, иначе значение не удалится.	
			УдалитьИзВременногоХранилища(АдресКоллекцииАктовXML);
			
		КонецЦикла;
					
	КонецЕсли;
	
	ОповеститьФормы(РаботаСДокументамиИСМПТККлиентСервер.ИмяСобытияЗаписьАктПриемаПередачи(), МассивИсходящихАктов);
	
КонецПроцедуры

Асинх Процедура ОтправитьДокументыУведомлениеОРасхождении(ДополнительныеПараметры)
	
	КоллекцияСгруппированныхДокументовИСМПТ = ДополнительныеПараметры.КоллекцияСгруппированныхДокументовИСМПТ;
	КоллекцияАдресКоллекцииУведомленийXML = Новый Соответствие;
	КоллекцияПодписейИСМП =  Новый Соответствие;
	
	Попытка
		Для Каждого СгруппированныеИСМПТ Из КоллекцияСгруппированныхДокументовИСМПТ Цикл
			
			СтруктурнаяЕдиница = СгруппированныеИСМПТ.Ключ;
			МассивИСМПТ = СгруппированныеИСМПТ.Значение;
			
			ТипДокумента = ОбщегоНазначенияИСМПТКВызовСервера.ИмяДокументаУведомлениеОРасхожденииИСМПТК();
			ТокенАвторизации = Ждать ПолучитьТокенАвторизации(СтруктурнаяЕдиница, ТипДокумента);
			
			Если ТокенАвторизации = Неопределено Тогда
				
				ТекстСообщенияТокенНеПолучен = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияОперацияПрерванаНеПолученыДанныеЭЦП();
				ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщенияТокенНеПолучен);
				Возврат;
				
			КонецЕсли;
			
			АдресКоллекцииУведомленийXML = Неопределено;
			АдресКоллекцииПодписейУведомлений = Неопределено;
			КоллекцияSignedContentXML = Неопределено;
			
			ИнтеграцияИСМПТКВызовСервера.СоздатьИсходящиеУведомления(МассивИСМПТ, Истина, Неопределено, АдресКоллекцииУведомленийXML, КоллекцияSignedContentXML);
			КоллекцияАдресКоллекцииУведомленийXML.Вставить(СтруктурнаяЕдиница, АдресКоллекцииУведомленийXML);
			АдресКоллекцииПодписейУведомлений = Ждать ПодписатьДокументы(АдресКоллекцииУведомленийXML, СтруктурнаяЕдиница, ТипДокумента);
			КоллекцияПодписейИСМП.Вставить(СтруктурнаяЕдиница, АдресКоллекцииПодписейУведомлений);

		КонецЦикла;
	Исключение
		ВызватьИсключение ОписаниеОшибки();
	КонецПопытки;
	
	// Создать и отправить коллекцию актов.
	ЗапускатьФоновоеЗадание = ДополнительныеПараметры.ЗапускатьФоновоеЗадание;
	ВыполнятьКриптографическиеОперацииНаКлиенте = ВыполнятьКриптографическиеОперацииНаКлиенте(); 
	МассивИсходящихАктов = ДополнительныеПараметры.МассивИсходящихДокументовИСМПТ;
	Если ВыполнятьКриптографическиеОперацииНаКлиенте Тогда
		
		Попытка
			Результат = ИнтеграцияИСМПТКВызовСервера.ОтправитьИсходящиеУведомления("", КоллекцияПодписейИСМП, ТокенАвторизации);
		Исключение
			ВызватьИсключение ОписаниеОшибки();
		КонецПопытки;
		
		Для Каждого СтрокаАдресКоллекцииАктовXML Из КоллекцияАдресКоллекцииУведомленийXML Цикл
			
			АдресКоллекцииАктовXML = СтрокаАдресКоллекцииАктовXML.Значение;
			
			// Принудительное удаление, иначе значение не удалится.	
			УдалитьИзВременногоХранилища(АдресКоллекцииАктовXML);
			
		КонецЦикла;
		
	КонецЕсли;
	
	ОповеститьФормы(РаботаСДокументамиИСМПТККлиентСервер.ИмяСобытияЗаписьУведомлениеОРасхождении(), МассивИсходящихАктов);
		
КонецПроцедуры

Асинх Процедура ОтправитьДокументыУведомлениеОВводеВОборот(ДополнительныеПараметры)
	
	КоллекцияСгруппированныхДокументовИСМПТ = ДополнительныеПараметры.КоллекцияСгруппированныхДокументовИСМПТ;
	КоллекцияАдресКоллекцииУведомленийXML = Новый Соответствие;
	КоллекцияПодписейИСМП =  Новый Соответствие;
	
	Попытка
		Для Каждого СгруппированныеИСМПТ Из КоллекцияСгруппированныхДокументовИСМПТ Цикл
			
			СтруктурнаяЕдиница = СгруппированныеИСМПТ.Ключ;
			МассивИСМПТ = СгруппированныеИСМПТ.Значение;
			
			ТипДокумента = ОбщегоНазначенияИСМПТКВызовСервера.ИмяДокументаУведомлениеОВводеВОборотИСМПТК();
			ТокенАвторизации = Ждать ПолучитьТокенАвторизации(СтруктурнаяЕдиница, ТипДокумента);
			
			Если ТокенАвторизации = Неопределено Тогда
				
				ТекстСообщенияТокенНеПолучен = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияОперацияПрерванаНеПолученыДанныеЭЦП();
				ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщенияТокенНеПолучен);
				Возврат;
				
			КонецЕсли;
			
			АдресКоллекцииУведомленийXML = Неопределено;
			АдресКоллекцииПодписейУведомлений = Неопределено;
			КоллекцияSignedContentXML = Неопределено;
			
			ИнтеграцияИСМПТКВызовСервера.СоздатьИсходящиеУведомленияОВводеВОборот(МассивИСМПТ, Истина, Неопределено, АдресКоллекцииУведомленийXML, КоллекцияSignedContentXML);
			КоллекцияАдресКоллекцииУведомленийXML.Вставить(СтруктурнаяЕдиница, АдресКоллекцииУведомленийXML);
			АдресКоллекцииПодписейУведомлений = Ждать ПодписатьДокументы(АдресКоллекцииУведомленийXML, СтруктурнаяЕдиница, ТипДокумента);
			КоллекцияПодписейИСМП.Вставить(СтруктурнаяЕдиница, АдресКоллекцииПодписейУведомлений);
			
		КонецЦикла;
	Исключение
		ВызватьИсключение ОписаниеОшибки();
	КонецПопытки;
		
	// Создать и отправить коллекцию актов.
	ЗапускатьФоновоеЗадание = ДополнительныеПараметры.ЗапускатьФоновоеЗадание;
	ВыполнятьКриптографическиеОперацииНаКлиенте = ВыполнятьКриптографическиеОперацииНаКлиенте(); 
	МассивИсходящихУведомлений = ДополнительныеПараметры.МассивИсходящихДокументовИСМПТ;
	Если ВыполнятьКриптографическиеОперацииНаКлиенте Тогда
				
		// Если отправляем из формы списка, делаем фоновую отправку
		Если ЗапускатьФоновоеЗадание Тогда
			
		Иначе			
			Попытка
				Результат = ИнтеграцияИСМПТКВызовСервера.ОтправитьИсходящиеУведомленияВВО(КоллекцияАдресКоллекцииУведомленийXML, КоллекцияПодписейИСМП, ТокенАвторизации);
			Исключение
				ВызватьИсключение ОписаниеОшибки();
			КонецПопытки;
			
		КонецЕсли;
		
		Для Каждого СтрокаАдресКоллекцииУведомленийXML Из КоллекцияАдресКоллекцииУведомленийXML Цикл
			
			АдресКоллекцииУведомленийXML = СтрокаАдресКоллекцииУведомленийXML.Значение;
			
			// Принудительное удаление, иначе значение не удалится.	
			УдалитьИзВременногоХранилища(АдресКоллекцииУведомленийXML);
			
		КонецЦикла;
		
	КонецЕсли;
	
	ОповеститьФормы(РаботаСДокументамиИСМПТККлиентСервер.ИмяСобытияЗаписьУведомлениеОВводеВОборот(), МассивИсходящихУведомлений);
	
КонецПроцедуры

Асинх Процедура ОтправитьДокументыУведомлениеОВыводеИзОборота(ДополнительныеПараметры)
	
	КоллекцияСгруппированныхДокументовИСМПТ = ДополнительныеПараметры.КоллекцияСгруппированныхДокументовИСМПТ;
	КоллекцияАдресКоллекцииУведомленийXML = Новый Соответствие;
	КоллекцияПодписейИСМП =  Новый Соответствие;
	
	Попытка
		Для Каждого СгруппированныеИСМПТ Из КоллекцияСгруппированныхДокументовИСМПТ Цикл
			
			СтруктурнаяЕдиница = СгруппированныеИСМПТ.Ключ;
			МассивИСМПТ = СгруппированныеИСМПТ.Значение;
			
			ТипДокумента = ОбщегоНазначенияИСМПТКВызовСервера.ИмяДокументаУведомлениеОВыводеИзОборотаИСМПТК();
			ТокенАвторизации = Ждать ПолучитьТокенАвторизации(СтруктурнаяЕдиница, ТипДокумента);
			
			Если ТокенАвторизации = Неопределено Тогда
				
				ТекстСообщенияТокенНеПолучен = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияОперацияПрерванаНеПолученыДанныеЭЦП();
				ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщенияТокенНеПолучен);
				Возврат;
				
			КонецЕсли;
			
			АдресКоллекцииУведомленийXML = Неопределено;
			АдресКоллекцииПодписейУведомлений = Неопределено;
			КоллекцияSignedContentXML = Неопределено;
			
			ИнтеграцияИСМПТКВызовСервера.СоздатьИсходящиеУведомленияОВыводеИзОборота(МассивИСМПТ, Истина, Неопределено, АдресКоллекцииУведомленийXML, КоллекцияSignedContentXML);
			КоллекцияАдресКоллекцииУведомленийXML.Вставить(СтруктурнаяЕдиница, АдресКоллекцииУведомленийXML);
			АдресКоллекцииПодписейУведомлений = Ждать ПодписатьДокументы(АдресКоллекцииУведомленийXML, СтруктурнаяЕдиница, ТипДокумента);
			КоллекцияПодписейИСМП.Вставить(СтруктурнаяЕдиница, АдресКоллекцииПодписейУведомлений);
			
		КонецЦикла;
	Исключение
		ВызватьИсключение ОписаниеОшибки();
	КонецПопытки;
		
	// Создать и отправить коллекцию актов.
	ЗапускатьФоновоеЗадание = ДополнительныеПараметры.ЗапускатьФоновоеЗадание;
	ВыполнятьКриптографическиеОперацииНаКлиенте = ВыполнятьКриптографическиеОперацииНаКлиенте(); 
	МассивИсходящихУведомлений = ДополнительныеПараметры.МассивИсходящихДокументовИСМПТ;
	Если ВыполнятьКриптографическиеОперацииНаКлиенте Тогда
				
		// Если отправляем из формы списка, делаем фоновую отправку
		Если ЗапускатьФоновоеЗадание Тогда
			
		Иначе			
			Попытка
				Результат = ИнтеграцияИСМПТКВызовСервера.ОтправитьИсходящиеУведомленияВИО(КоллекцияАдресКоллекцииУведомленийXML, КоллекцияПодписейИСМП, ТокенАвторизации);
			Исключение
				ВызватьИсключение ОписаниеОшибки();
			КонецПопытки;
			
		КонецЕсли;
		
		Для Каждого СтрокаАдресКоллекцииУведомленийXML Из КоллекцияАдресКоллекцииУведомленийXML Цикл
			
			АдресКоллекцииУведомленийXML = СтрокаАдресКоллекцииУведомленийXML.Значение;
			
			// Принудительное удаление, иначе значение не удалится.	
			УдалитьИзВременногоХранилища(АдресКоллекцииУведомленийXML);
			
		КонецЦикла;
		
	КонецЕсли;
	
	ОповеститьФормы(РаботаСДокументамиИСМПТККлиентСервер.ИмяСобытияЗаписьУведомлениеОВыводеИзОборота(), МассивИсходящихУведомлений);
	
КонецПроцедуры

Асинх Процедура ОтправитьДокументыУведомлениеОВвозе(ДополнительныеПараметры)
	
	КоллекцияСгруппированныхДокументовИСМПТ = ДополнительныеПараметры.КоллекцияСгруппированныхДокументовИСМПТ;
	КоллекцияАдресКоллекцииУведомленийXML = Новый Соответствие;
	КоллекцияПодписейИСМП =  Новый Соответствие;
	
	Попытка
		Для Каждого СгруппированныеИСМПТ Из КоллекцияСгруппированныхДокументовИСМПТ Цикл
			
			СтруктурнаяЕдиница = СгруппированныеИСМПТ.Ключ;
			МассивИСМПТ = СгруппированныеИСМПТ.Значение;
			
			ТипДокумента = ОбщегоНазначенияИСМПТКВызовСервера.ИмяДокументаУведомлениеОВвозеИзЕАЭСИСМПТК();
			ТокенАвторизации = Ждать ПолучитьТокенАвторизации(СтруктурнаяЕдиница, ТипДокумента);
			
			Если ТокенАвторизации = Неопределено Тогда
				
				ТекстСообщенияТокенНеПолучен = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияОперацияПрерванаНеПолученыДанныеЭЦП();
				ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщенияТокенНеПолучен);
				Возврат;
				
			КонецЕсли;
			
			АдресКоллекцииУведомленийXML = Неопределено;
			АдресКоллекцииПодписейУведомлений = Неопределено;
			КоллекцияSignedContentXML = Неопределено;
			
			ИнтеграцияИСМПТКВызовСервера.СоздатьИсходящиеУведомленияОВвозе(МассивИСМПТ, Истина, Неопределено, АдресКоллекцииУведомленийXML, КоллекцияSignedContentXML);
			КоллекцияАдресКоллекцииУведомленийXML.Вставить(СтруктурнаяЕдиница, АдресКоллекцииУведомленийXML);
			АдресКоллекцииПодписейУведомлений = Ждать ПодписатьДокументы(АдресКоллекцииУведомленийXML, СтруктурнаяЕдиница, ТипДокумента);
			КоллекцияПодписейИСМП.Вставить(СтруктурнаяЕдиница, АдресКоллекцииПодписейУведомлений);
			
		КонецЦикла;
	Исключение
		ВызватьИсключение ОписаниеОшибки();
	КонецПопытки;
		
	// Создать и отправить коллекцию актов.
	ЗапускатьФоновоеЗадание = ДополнительныеПараметры.ЗапускатьФоновоеЗадание;
	ВыполнятьКриптографическиеОперацииНаКлиенте = ВыполнятьКриптографическиеОперацииНаКлиенте(); 
	МассивИсходящихУведомлений = ДополнительныеПараметры.МассивИсходящихДокументовИСМПТ;
	Если ВыполнятьКриптографическиеОперацииНаКлиенте Тогда
				
		// Если отправляем из формы списка, делаем фоновую отправку
		Если ЗапускатьФоновоеЗадание Тогда
			
		Иначе			
			Попытка
				Результат = ИнтеграцияИСМПТКВызовСервера.ОтправитьУведомленияОВвозе(КоллекцияАдресКоллекцииУведомленийXML, КоллекцияПодписейИСМП, ТокенАвторизации);
			Исключение
				ВызватьИсключение ОписаниеОшибки();
			КонецПопытки;
			
		КонецЕсли;
		
		Для Каждого СтрокаАдресКоллекцииУведомленийXML Из КоллекцияАдресКоллекцииУведомленийXML Цикл
			
			АдресКоллекцииУведомленийXML = СтрокаАдресКоллекцииУведомленийXML.Значение;
			
			// Принудительное удаление, иначе значение не удалится.	
			УдалитьИзВременногоХранилища(АдресКоллекцииУведомленийXML);
			
		КонецЦикла;
		
	КонецЕсли;
	
	ОповеститьФормы(РаботаСДокументамиИСМПТККлиентСервер.ИмяСобытияЗаписьУведомлениеОВвозеИзЕАЭС(), МассивИсходящихУведомлений);
	
КонецПроцедуры

Асинх Процедура ОтправитьДокументыУведомлениеОВвозеИзТретьихСтран(ДополнительныеПараметры)
	
	КоллекцияСгруппированныхДокументовИСМПТ = ДополнительныеПараметры.КоллекцияСгруппированныхДокументовИСМПТ;
	КоллекцияАдресКоллекцииУведомленийXML = Новый Соответствие;
	КоллекцияПодписейИСМП =  Новый Соответствие;
	
	Попытка
		Для Каждого СгруппированныеИСМПТ Из КоллекцияСгруппированныхДокументовИСМПТ Цикл
			
			СтруктурнаяЕдиница = СгруппированныеИСМПТ.Ключ;
			МассивИСМПТ = СгруппированныеИСМПТ.Значение;
			
			ТипДокумента = ОбщегоНазначенияИСМПТКВызовСервера.ИмяДокументаУведомлениеОВвозеИзТретьихСтранИСМПТК();
			ТокенАвторизации = Ждать ПолучитьТокенАвторизации(СтруктурнаяЕдиница, ТипДокумента);
			
			Если ТокенАвторизации = Неопределено Тогда
				
				ТекстСообщенияТокенНеПолучен = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияОперацияПрерванаНеПолученыДанныеЭЦП();
				ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщенияТокенНеПолучен);
				Возврат;
				
			КонецЕсли;
			
			//получение вложенных групповых кодов
			СоставВложенныхКодов = ИнтеграцияИСМПТКВызовСервера.ПолучитьДанныеПоГрупповымКодамМаркировки(МассивИСМПТ, СтруктурнаяЕдиница, ТокенАвторизации);
			Если Не ПустаяСтрока(СоставВложенныхКодов.ТекстОшибки) Тогда
				//при получении групповых кодов возникли ошибки
				ТекстСообщения = НСтр("ru='Операция прервана: не удалось получить вложенные коды групповых упаковок.'");
				ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
				Возврат;
			КонецЕсли;
			
			АдресКоллекцииУведомленийXML = Неопределено;
			АдресКоллекцииПодписейУведомлений = Неопределено;
			КоллекцияSignedContentXML = Неопределено;
			
			ИнтеграцияИСМПТКВызовСервера.СоздатьИсходящиеУведомленияОВвозеИзТретьихСтран(МассивИСМПТ, Истина, Неопределено, 
				АдресКоллекцииУведомленийXML, КоллекцияSignedContentXML, СоставВложенныхКодов);
			КоллекцияАдресКоллекцииУведомленийXML.Вставить(СтруктурнаяЕдиница, АдресКоллекцииУведомленийXML);
			АдресКоллекцииПодписейУведомлений = Ждать ПодписатьДокументы(АдресКоллекцииУведомленийXML, СтруктурнаяЕдиница, ТипДокумента);
			КоллекцияПодписейИСМП.Вставить(СтруктурнаяЕдиница, АдресКоллекцииПодписейУведомлений);
			
		КонецЦикла;
	Исключение
		ВызватьИсключение ОписаниеОшибки();
	КонецПопытки;
		
	// Создать и отправить коллекцию актов.
	ЗапускатьФоновоеЗадание = ДополнительныеПараметры.ЗапускатьФоновоеЗадание;
	ВыполнятьКриптографическиеОперацииНаКлиенте = ВыполнятьКриптографическиеОперацииНаКлиенте(); 
	МассивИсходящихУведомлений = ДополнительныеПараметры.МассивИсходящихДокументовИСМПТ;
	Если ВыполнятьКриптографическиеОперацииНаКлиенте Тогда
				
		// Если отправляем из формы списка, делаем фоновую отправку
		Если ЗапускатьФоновоеЗадание Тогда
			
		Иначе			
			Попытка
				Результат = ИнтеграцияИСМПТКВызовСервера.ОтправитьУведомленияОВвозеИзТретьихСтран(КоллекцияАдресКоллекцииУведомленийXML, КоллекцияПодписейИСМП, ТокенАвторизации);
			Исключение
				ВызватьИсключение ОписаниеОшибки();
			КонецПопытки;
			
		КонецЕсли;
		
		Для Каждого СтрокаАдресКоллекцииУведомленийXML Из КоллекцияАдресКоллекцииУведомленийXML Цикл
			
			АдресКоллекцииУведомленийXML = СтрокаАдресКоллекцииУведомленийXML.Значение;
			
			// Принудительное удаление, иначе значение не удалится.	
			УдалитьИзВременногоХранилища(АдресКоллекцииУведомленийXML);
			
		КонецЦикла;
		
	КонецЕсли;
	
	ОповеститьФормы(РаботаСДокументамиИСМПТККлиентСервер.ИмяСобытияЗаписьУведомлениеОВвозеИзТретьихСтран(), МассивИсходящихУведомлений);
	
КонецПроцедуры

Асинх Процедура ОтправитьДокументыУведомлениеОбЭкспортеЕАЭС(ДополнительныеПараметры)
	
	КоллекцияСгруппированныхДокументовИСМПТ = ДополнительныеПараметры.КоллекцияСгруппированныхДокументовИСМПТ;
	КоллекцияАдресКоллекцииУведомленийXML = Новый Соответствие;
	КоллекцияПодписейИСМП =  Новый Соответствие;
	
	Попытка
		Для Каждого СгруппированныеИСМПТ Из КоллекцияСгруппированныхДокументовИСМПТ Цикл
			
			СтруктурнаяЕдиница = СгруппированныеИСМПТ.Ключ;
			МассивИСМПТ = СгруппированныеИСМПТ.Значение;
			
			ТипДокумента = ОбщегоНазначенияИСМПТКВызовСервера.ИмяДокументаУведомлениеОбЭкспортеЕАЭСИСМПТК();
			ТокенАвторизации = Ждать ПолучитьТокенАвторизации(СтруктурнаяЕдиница, ТипДокумента);
			
			Если ТокенАвторизации = Неопределено Тогда
				
				ТекстСообщенияТокенНеПолучен = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияОперацияПрерванаНеПолученыДанныеЭЦП();
				ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщенияТокенНеПолучен);
				Возврат;
				
			КонецЕсли;
			
			АдресКоллекцииУведомленийXML = Неопределено;
			АдресКоллекцииПодписейУведомлений = Неопределено;
			КоллекцияSignedContentXML = Неопределено;
			
			ИнтеграцияИСМПТКВызовСервера.СоздатьИсходящиеУведомленияОбЭкспортеЕАЭС(МассивИСМПТ, Истина, Неопределено, АдресКоллекцииУведомленийXML, КоллекцияSignedContentXML);
			КоллекцияАдресКоллекцииУведомленийXML.Вставить(СтруктурнаяЕдиница, АдресКоллекцииУведомленийXML);
			АдресКоллекцииПодписейУведомлений = Ждать ПодписатьДокументы(АдресКоллекцииУведомленийXML, СтруктурнаяЕдиница, ТипДокумента);
			КоллекцияПодписейИСМП.Вставить(СтруктурнаяЕдиница, АдресКоллекцииПодписейУведомлений);
			
		КонецЦикла;
	Исключение
		ВызватьИсключение ОписаниеОшибки();
	КонецПопытки;
		
	// Создать и отправить коллекцию актов.
	ЗапускатьФоновоеЗадание = ДополнительныеПараметры.ЗапускатьФоновоеЗадание;
	ВыполнятьКриптографическиеОперацииНаКлиенте = ВыполнятьКриптографическиеОперацииНаКлиенте(); 
	МассивИсходящихУведомлений = ДополнительныеПараметры.МассивИсходящихДокументовИСМПТ;
	Если ВыполнятьКриптографическиеОперацииНаКлиенте Тогда
				
		// Если отправляем из формы списка, делаем фоновую отправку
		Если ЗапускатьФоновоеЗадание Тогда
			
		Иначе			
			Попытка
				Результат = ИнтеграцияИСМПТКВызовСервера.ОтправитьУведомленияОбЭкспортеЕАЭС(КоллекцияАдресКоллекцииУведомленийXML, КоллекцияПодписейИСМП, ТокенАвторизации);
			Исключение
				ВызватьИсключение ОписаниеОшибки();
			КонецПопытки;
			
		КонецЕсли;
		
		Для Каждого СтрокаАдресКоллекцииУведомленийXML Из КоллекцияАдресКоллекцииУведомленийXML Цикл
			
			АдресКоллекцииУведомленийXML = СтрокаАдресКоллекцииУведомленийXML.Значение;
			
			// Принудительное удаление, иначе значение не удалится.	
			УдалитьИзВременногоХранилища(АдресКоллекцииУведомленийXML);
			
		КонецЦикла;
		
	КонецЕсли;
	
	ОповеститьФормы(РаботаСДокументамиИСМПТККлиентСервер.ИмяСобытияЗаписьУведомлениеОбЭкспортеЕАЭС(), МассивИсходящихУведомлений);
	
КонецПроцедуры

Асинх Процедура ОтправитьДокументыУведомлениеОПриемкеЕАЭС(ДополнительныеПараметры)
	
	КоллекцияСгруппированныхДокументовИСМПТ = ДополнительныеПараметры.КоллекцияСгруппированныхДокументовИСМПТ;
	КоллекцияАдресКоллекцииУведомленийXML = Новый Соответствие;
	КоллекцияПодписейИСМП =  Новый Соответствие;
	
	Попытка
		Для Каждого СгруппированныеИСМПТ Из КоллекцияСгруппированныхДокументовИСМПТ Цикл
			
			СтруктурнаяЕдиница = СгруппированныеИСМПТ.Ключ;
			МассивИСМПТ = СгруппированныеИСМПТ.Значение;
			
			ТипДокумента = ОбщегоНазначенияИСМПТКВызовСервера.ИмяДокументаУведомлениеОПриемкеЕАЭСИСМПТК();
			ТокенАвторизации = Ждать ПолучитьТокенАвторизации(СтруктурнаяЕдиница, ТипДокумента);
			
			Если ТокенАвторизации = Неопределено Тогда
				
				ТекстСообщенияТокенНеПолучен = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияОперацияПрерванаНеПолученыДанныеЭЦП();
				ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщенияТокенНеПолучен);
				Возврат;
				
			КонецЕсли;
			
			АдресКоллекцииУведомленийXML = Неопределено;
			АдресКоллекцииПодписейУведомлений = Неопределено;
			КоллекцияSignedContentXML = Неопределено;
			
			ИнтеграцияИСМПТКВызовСервера.СоздатьИсходящиеУведомлениеОПриемкеЕАЭС(МассивИСМПТ, Истина, Неопределено, АдресКоллекцииУведомленийXML, КоллекцияSignedContentXML);
			КоллекцияАдресКоллекцииУведомленийXML.Вставить(СтруктурнаяЕдиница, АдресКоллекцииУведомленийXML);
			АдресКоллекцииПодписейУведомлений = Ждать ПодписатьДокументы(АдресКоллекцииУведомленийXML, СтруктурнаяЕдиница, ТипДокумента);
			КоллекцияПодписейИСМП.Вставить(СтруктурнаяЕдиница, АдресКоллекцииПодписейУведомлений);
			
		КонецЦикла;
	Исключение
		ВызватьИсключение ОписаниеОшибки();
	КонецПопытки;
		
	// Создать и отправить коллекцию актов.
	ЗапускатьФоновоеЗадание = ДополнительныеПараметры.ЗапускатьФоновоеЗадание;
	ВыполнятьКриптографическиеОперацииНаКлиенте = ВыполнятьКриптографическиеОперацииНаКлиенте(); 
	МассивИсходящихУведомлений = ДополнительныеПараметры.МассивИсходящихДокументовИСМПТ;
	Если ВыполнятьКриптографическиеОперацииНаКлиенте Тогда
				
		// Если отправляем из формы списка, делаем фоновую отправку
		Если ЗапускатьФоновоеЗадание Тогда
			
		Иначе			
			Попытка
				Результат = ИнтеграцияИСМПТКВызовСервера.ОтправитьУведомлениеОПриемкеЕАЭС(КоллекцияАдресКоллекцииУведомленийXML, КоллекцияПодписейИСМП, ТокенАвторизации);
			Исключение
				ВызватьИсключение ОписаниеОшибки();
			КонецПопытки;
			
		КонецЕсли;
		
		Для Каждого СтрокаАдресКоллекцииУведомленийXML Из КоллекцияАдресКоллекцииУведомленийXML Цикл
			
			АдресКоллекцииУведомленийXML = СтрокаАдресКоллекцииУведомленийXML.Значение;
			
			// Принудительное удаление, иначе значение не удалится.	
			УдалитьИзВременногоХранилища(АдресКоллекцииУведомленийXML);
			
		КонецЦикла;
		
	КонецЕсли;
	
	ОповеститьФормы(РаботаСДокументамиИСМПТККлиентСервер.ИмяСобытияЗаписьУведомлениеОбЭкспортеЕАЭС(), МассивИсходящихУведомлений);
	
КонецПроцедуры

Асинх Функция ПодписатьДокументы(КоллекцияДокументовДляПодписи, Организация, ТипДокумента = Неопределено)
	
	КоллекцияДокументов = "";
	Если ТипЗнч(КоллекцияДокументовДляПодписи) = Тип("Соответствие") Тогда
		КоллекцияДокументов = КоллекцияДокументовДляПодписи;
	Иначе
		КоллекцияДокументов = ПолучитьИзВременногоХранилища(КоллекцияДокументовДляПодписи);
	КонецЕсли;
	
	ИдентификаторОрганизации = ОбщегоНазначенияИСМПТК.ЗначениеРеквизитаОбъекта(Организация, 
							   ИнтеграцияИСМПТКПереопределяемый.ПолучитьРеквизитИИНОрганизации());
	
	МассивДокументовДляПодписи = Новый Массив;
	Если Не ЗначениеЗаполнено(КоллекцияДокументов) Тогда
		Возврат Неопределено;
	КонецЕсли;
	Для Каждого ЭлементКоллекции Из КоллекцияДокументов Цикл
		АктXML = ЭлементКоллекции.Значение;
		МассивДокументовДляПодписи.Добавить(АктXML);
	КонецЦикла;
	
	МассивПодписанныхДокументов = Ждать СоздатьЭЦП_CMS_NCA_Layer(МассивДокументовДляПодписи, 1, Ложь, Истина, ИдентификаторОрганизации, ТипДокумента);
	
	Если Не ТипЗнч(МассивПодписанныхДокументов) = Тип("Массив") Тогда
		Возврат Неопределено;
	ИначеЕсли МассивПодписанныхДокументов.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;		
	
	КоллекцияПодписанныхДокументов = Новый Соответствие;
	Сч = 0;
	
	Для Каждого ЭлементКоллекции Из КоллекцияДокументов Цикл
		
		АктДляОтправки = Новый Структура("ДокументBase64, ПодписанныйДокумент");
		АктXML = ЭлементКоллекции.Значение;
		ДвоичныеДанныеСтроки = ПолучитьДвоичныеДанныеИзСтроки(АктXML);
		СтрокаBase64 = СтрЗаменить(СтрЗаменить(Base64Строка(ДвоичныеДанныеСтроки), Символы.ВК, ""),Символы.ПС,"");
		
		АктДляОтправки.ДокументBase64 = СтрокаBase64;
		АктДляОтправки.ПодписанныйДокумент = МассивПодписанныхДокументов[Сч];
		КоллекцияПодписанныхДокументов.Вставить(ЭлементКоллекции.Ключ, АктДляОтправки);
		
		Сч = Сч + 1;
		
	КонецЦикла;
	
	АдресКоллекцииПодписанныхДокументов = ПоместитьВоВременноеХранилище(КоллекцияПодписанныхДокументов, Новый УникальныйИдентификатор);
	
	Возврат АдресКоллекцииПодписанныхДокументов;
	
КонецФункции

#КонецОбласти

#Область ОтправкаДокументовИСЦЭДМ

Процедура СоздатьКорректировочныйДокумент(МассивДокументов) Экспорт
	
	КоллекцияСгруппированныхДокументовИСЦЭДМ = ИнтеграцияИСМПТКВызовСервера.СгруппироватьДокументыИСЦЭДМПоСтруктурнымЕдиницам(МассивДокументов);
	КоллекцияСозданныхДокументов = Новый Соответствие;
	
	Попытка
		Для Каждого СгруппированныеИСЦЭДМ Из КоллекцияСгруппированныхДокументовИСЦЭДМ Цикл
			
			МассивСозданныхДокументовКорректировки = ИнтеграцияИСМПТКВызовСервера.СоздатьДокументыКорректировки(СгруппированныеИСЦЭДМ.Значение);
			КоллекцияСозданныхДокументов.Вставить(СгруппированныеИСЦЭДМ.Ключ, МассивСозданныхДокументовКорректировки);
			
		КонецЦикла;
		
		ПодписатьДокументыИСЦЭДМ(КоллекцияСозданныхДокументов);
		
	Исключение
		ВызватьИсключение ОписаниеОшибки();
	КонецПопытки;
	
	ОповеститьФормы(РаботаСДокументамиИСМПТККлиентСервер.ИмяСобытияЗаписьАктПриемаПередачиИСЦЭДМ(), МассивДокументов);
	
КонецПроцедуры

Процедура ОтправитьИсходящиеДокументыИСЦЭДМ(Знач МассивДокументыИСЦЭДМ, Знач ДополнительныеПараметры) Экспорт
	
	НовыйМассивДокументыИСЦЭДМ = МассивДокументыИСЦЭДМ;
	
	Если НовыйМассивДокументыИСЦЭДМ.Количество() = 0 Тогда
		Возврат;
	Иначе
		
		//проверка 		
		Если НЕ ИнтеграцияИСМПТКВызовСервера.ПроверитьВозможностьОтправкиДокументовПоставитьВОчередьОтправкиДокументИСЦЭДМ(НовыйМассивДокументыИСЦЭДМ) Тогда
			Возврат;
		КонецЕсли;
		
		ТипДокументаИСЦЭДМ = РаботаСДокументамиИСМПТККлиент.ОпределитьТипДокументаПоСсылке(НовыйМассивДокументыИСЦЭДМ[0]);
		ДополнительныеПараметры.Вставить("МассивИсходящихДокументовИСЦЭДМ", НовыйМассивДокументыИСЦЭДМ);
		ДополнительныеПараметры.Вставить("ТипДокументаИСЦЭДМ", ТипДокументаИСЦЭДМ);
		ОтправитьИсходящиеДокументыИСЦЭДМВыборПараметровИСЦЭДМ(ДополнительныеПараметры);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОтправитьИсходящиеДокументыИСЦЭДМЗавершение(ДополнительныеПараметры) Экспорт
	
	Если ДополнительныеПараметры.ТипДокументаИСЦЭДМ = ОбщегоНазначенияИСМПТКВызовСервера.ИмяДокументаАктПриемаПередачиИСЦЭДМ() Тогда
		ОтправитьДокументыАктПриемаПередачиИСЦЭДМ(ДополнительныеПараметры);
		
	ИначеЕсли ДополнительныеПараметры.ТипДокументаИСЦЭДМ = ОбщегоНазначенияИСМПТКВызовСервера.ИмяДокументаУведомлениеОВводеВОборотИСЦЭДМ() Тогда
		ОтправитьДокументыУведомлениеОВводеВОборотИСЦЭДМ(ДополнительныеПараметры);
		
	ИначеЕсли ДополнительныеПараметры.ТипДокументаИСЦЭДМ = ОбщегоНазначенияИСМПТКВызовСервера.ИмяДокументаУведомлениеОВыводеИзОборотаИСЦЭДМ() Тогда
		ОтправитьДокументыУведомлениеОВыводеИзОборотаИСЦЭДМ(ДополнительныеПараметры); 
		
	ИначеЕсли ДополнительныеПараметры.ТипДокументаИСЦЭДМ = ОбщегоНазначенияИСМПТКВызовСервера.ИмяДокументаАгрегацияВнеПроизводстваИСЦЭДМ() Тогда
		ОтправитьДокументыАгрегацияВнеПроизводстваИСЦЭДМ(ДополнительныеПараметры);
		
	ИначеЕсли ДополнительныеПараметры.ТипДокументаИСЦЭДМ = ОбщегоНазначенияИСМПТКВызовСервера.ИмяДокументаАктВнутреннегоПеремещенияИСЦЭДМ() Тогда
		ОтправитьДокументыАктВнутреннегоПеремещенияИСЦЭДМ(ДополнительныеПараметры); 
		
	ИначеЕсли ДополнительныеПараметры.ТипДокументаИСЦЭДМ = ОбщегоНазначенияИСМПТКВызовСервера.ИмяДокументаОтчетОПередачеКИОтНерезидентаРКИСЦЭДМ() Тогда
		ОтправитьДокументыОтчетОПередачеКИОтНерезидентаРКИСЦЭДМ(ДополнительныеПараметры);
		
	ИначеЕсли ДополнительныеПараметры.ТипДокументаИСЦЭДМ = ОбщегоНазначенияИСМПТКВызовСервера.ИмяДокументаУведомлениеОВвозеИзЕАЭСИСЦЭДМ() Тогда
		ОтправитьДокументыУведомлениеОВвозеИзЕАЭСИСЦЭДМ(ДополнительныеПараметры);
		
	ИначеЕсли ДополнительныеПараметры.ТипДокументаИСЦЭДМ = ОбщегоНазначенияИСМПТКВызовСервера.ИмяДокументаУведомлениеОВвозеИзТретьихСтранИСЦЭДМ() Тогда
		ОтправитьДокументыУведомлениеОВвозеИзТретьихСтранИСЦЭДМ(ДополнительныеПараметры);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОтправитьИсходящиеДокументыИСЦЭДМВыборПараметровИСЦЭДМ(ДополнительныеПараметры) Экспорт
	
	МассивИсходящихДокументовИСЦЭДМ = ДополнительныеПараметры.МассивИсходящихДокументовИСЦЭДМ;
	
	// Изменили статус документа, нужно перечитать, если отправка происходит из формы
	
	Если ДополнительныеПараметры.ТипДокументаИСЦЭДМ = ОбщегоНазначенияИСМПТКВызовСервера.ИмяДокументаАктПриемаПередачиИСЦЭДМ() Тогда
		
		ОповеститьФормы(РаботаСДокументамиИСМПТККлиентСервер.ИмяСобытияЗаписьАктПриемаПередачиИСЦЭДМ());
		
	ИначеЕсли ДополнительныеПараметры.ТипДокументаИСЦЭДМ = ОбщегоНазначенияИСМПТКВызовСервера.ИмяДокументаУведомлениеОВводеВОборотИСЦЭДМ() Тогда
		
		ОповеститьФормы(РаботаСДокументамиИСМПТККлиентСервер.ИмяСобытияЗаписьУведомлениеОВводеВОборотИСЦЭДМ());
		
	ИначеЕсли ДополнительныеПараметры.ТипДокументаИСЦЭДМ = ОбщегоНазначенияИСМПТКВызовСервера.ИмяДокументаУведомлениеОВыводеИзОборотаИСЦЭДМ() Тогда
		
		ОповеститьФормы(РаботаСДокументамиИСМПТККлиентСервер.ИмяСобытияЗаписьУведомлениеОВыводеИзОборотаИСЦЭДМ());
		
	ИначеЕсли ДополнительныеПараметры.ТипДокументаИСЦЭДМ = ОбщегоНазначенияИСМПТКВызовСервера.ИмяДокументаАгрегацияВнеПроизводстваИСЦЭДМ() Тогда
		
		ОповеститьФормы(РаботаСДокументамиИСМПТККлиентСервер.ИмяСобытияЗаписьАгрегацияВнеПроизводстваИСЦЭДМ());
		
	ИначеЕсли ДополнительныеПараметры.ТипДокументаИСЦЭДМ = ОбщегоНазначенияИСМПТКВызовСервера.ИмяДокументаАктВнутреннегоПеремещенияИСЦЭДМ() Тогда
		
		ОповеститьФормы(РаботаСДокументамиИСМПТККлиентСервер.ИмяСобытияЗаписьАктВнутреннегоПеремещенияИСЦЭДМ());
		
	ИначеЕсли ДополнительныеПараметры.ТипДокументаИСЦЭДМ = ОбщегоНазначенияИСМПТКВызовСервера.ИмяДокументаОтчетОПередачеКИОтНерезидентаРКИСЦЭДМ() Тогда
		
		ОповеститьФормы(РаботаСДокументамиИСМПТККлиентСервер.ИмяСобытияЗаписьОтчетОПередачеКИОтНерезидентаРКИСЦЭДМ());
		
	ИначеЕсли ДополнительныеПараметры.ТипДокументаИСЦЭДМ = ОбщегоНазначенияИСМПТКВызовСервера.ИмяДокументаУведомлениеОВвозеИзЕАЭСИСЦЭДМ() Тогда
		
		ОповеститьФормы(РаботаСДокументамиИСМПТККлиентСервер.ИмяСобытияЗаписьУведомлениеОВвозеИзЕАЭСИСЦЭДМ());
		
	ИначеЕсли ДополнительныеПараметры.ТипДокументаИСЦЭДМ = ОбщегоНазначенияИСМПТКВызовСервера.ИмяДокументаУведомлениеОВвозеИзТретьихСтранИСЦЭДМ() Тогда
		
		ОповеститьФормы(РаботаСДокументамиИСМПТККлиентСервер.ИмяСобытияЗаписьУведомлениеОВвозеИзЕАЭСИСЦЭДМ());
		
	КонецЕсли;
	
	КоллекцияСгруппированныхДокументовИСЦЭДМ = ИнтеграцияИСМПТКВызовСервера.СгруппироватьДокументыИСЦЭДМПоСтруктурнымЕдиницам(МассивИсходящихДокументовИСЦЭДМ);
	ДополнительныеПараметры.Вставить("КоллекцияСгруппированныхДокументовИСЦЭДМ", КоллекцияСгруппированныхДокументовИСЦЭДМ);
			
	ОтправитьИсходящиеДокументыИСЦЭДМЗавершение(ДополнительныеПараметры);
		
КонецПроцедуры

Процедура СверитьДокументыИСЦЭДМ(Знач МассивДокументыИСЦЭДМ, Знач ДополнительныеПараметры) Экспорт
	
	НовыйМассивДокументыИСЦЭДМ = МассивДокументыИСЦЭДМ;
	
	Если НовыйМассивДокументыИСЦЭДМ.Количество() = 0 Тогда
		Возврат;
	Иначе
		
		ТипДокументаИСЦЭДМ = РаботаСДокументамиИСМПТККлиент.ОпределитьТипДокументаПоСсылке(НовыйМассивДокументыИСЦЭДМ[0]);
		ДополнительныеПараметры.Вставить("МассивИсходящихДокументовИСЦЭДМ", НовыйМассивДокументыИСЦЭДМ);
		ДополнительныеПараметры.Вставить("ТипДокументаИСЦЭДМ", ТипДокументаИСЦЭДМ);
		СверитьВходящиеДокументыИСЦЭДМ(ДополнительныеПараметры);
		
	КонецЕсли;
	
КонецПроцедуры 

Процедура СверитьВходящиеДокументыИСЦЭДМ(ДополнительныеПараметры) Экспорт
	
	МассивИсходящихДокументовИСЦЭДМ = ДополнительныеПараметры.МассивИсходящихДокументовИСЦЭДМ;
	
	// Изменили статус документа, нужно перечитать, если отправка происходит из формы
	
	Если ДополнительныеПараметры.ТипДокументаИСЦЭДМ = ОбщегоНазначенияИСМПТКВызовСервера.ИмяДокументаАктПриемаПередачиИСЦЭДМ() Тогда
		
		ОповеститьФормы(РаботаСДокументамиИСМПТККлиентСервер.ИмяСобытияЗаписьАктПриемаПередачиИСЦЭДМ());
		
	ИначеЕсли ДополнительныеПараметры.ТипДокументаИСЦЭДМ = ОбщегоНазначенияИСМПТКВызовСервера.ИмяДокументаАктВнутреннегоПеремещенияИСЦЭДМ() Тогда
		
		ОповеститьФормы(РаботаСДокументамиИСМПТККлиентСервер.ИмяСобытияЗаписьАктВнутреннегоПеремещенияИСЦЭДМ());
		
	ИначеЕсли ДополнительныеПараметры.ТипДокументаИСЦЭДМ = ОбщегоНазначенияИСМПТКВызовСервера.ИмяДокументаУведомлениеОВвозеИзЕАЭСИСЦЭДМ() Тогда
		
		ОповеститьФормы(РаботаСДокументамиИСМПТККлиентСервер.ИмяСобытияЗаписьУведомлениеОВвозеИзЕАЭСИСЦЭДМ());
		
	КонецЕсли;
	
	КоллекцияСгруппированныхДокументовИСЦЭДМ = ИнтеграцияИСМПТКВызовСервера.СгруппироватьДокументыИСЦЭДМПоСтруктурнымЕдиницам(МассивИсходящихДокументовИСЦЭДМ);
	ДополнительныеПараметры.Вставить("КоллекцияСгруппированныхДокументовИСЦЭДМ", КоллекцияСгруппированныхДокументовИСЦЭДМ);
			
	ОтправитьНаСверкуДокументыИСЦЭДМЗавершение(ДополнительныеПараметры);
		
КонецПроцедуры

Процедура ОтправитьНаСверкуДокументыИСЦЭДМЗавершение(ДополнительныеПараметры)
	
	
	КоллекцияСгруппированныхДокументовИСЦЭДМ = ДополнительныеПараметры.КоллекцияСгруппированныхДокументовИСЦЭДМ;
	
	Попытка
		Для Каждого СгруппированныеИСЦЭДМ Из КоллекцияСгруппированныхДокументовИСЦЭДМ Цикл
			
			ИнтеграцияИСМПТКВызовСервера.СверитьМассивДокументов(СгруппированныеИСЦЭДМ.Значение);
			
		КонецЦикла;
		
	Исключение
		ВызватьИсключение ОписаниеОшибки();
	КонецПопытки;
	
	// Создать и отправить коллекцию актов.
	ЗапускатьФоновоеЗадание = ДополнительныеПараметры.ЗапускатьФоновоеЗадание;
	МассивИсходящихДокументов = ДополнительныеПараметры.МассивИсходящихДокументовИСЦЭДМ;
	
	ИмяСобытия = РаботаСДокументамиИСМПТККлиент.ОпределитьИмяСобытияПоТипуДокумента(ДополнительныеПараметры.ТипДокументаИСЦЭДМ);
	
	ОповеститьФормы(ИмяСобытия, МассивИсходящихДокументов);
	
КонецПроцедуры

#Область УведомлениеОВыводеИзОборота

Процедура ОтправитьДокументыУведомлениеОВыводеИзОборотаИСЦЭДМ(ДополнительныеПараметры)
	
	КоллекцияСгруппированныхДокументовИСЦЭДМ = ДополнительныеПараметры.КоллекцияСгруппированныхДокументовИСЦЭДМ;
	
	Для Каждого СгруппированныеИСЦЭДМ Из КоллекцияСгруппированныхДокументовИСЦЭДМ Цикл
		
		ИнтеграцияИСМПТКВызовСервера.СоздатьИсходящиеУведомленияОВыводеИзОборотаИСЦЭДМ(СгруппированныеИСЦЭДМ.Значение);
		
	КонецЦикла;
	
	НачатьЗаполнениеДанныхПоЦенамДокумента(ДополнительныеПараметры);
	
КонецПроцедуры

#КонецОбласти

#Область УведомлениеОВводеВОборот

Процедура ОтправитьДокументыУведомлениеОВводеВОборотИСЦЭДМ(ДополнительныеПараметры)
	
	КоллекцияСгруппированныхДокументовИСЦЭДМ = ДополнительныеПараметры.КоллекцияСгруппированныхДокументовИСЦЭДМ;
	
	Для Каждого СгруппированныеИСЦЭДМ Из КоллекцияСгруппированныхДокументовИСЦЭДМ Цикл
		
		ИнтеграцияИСМПТКВызовСервера.СоздатьИсходящиеУведомленияОВводеВОборотИСЦЭДМ(СгруппированныеИСЦЭДМ.Значение);
		
	КонецЦикла;
	
	НачатьЗаполнениеДанныхПоЦенамДокумента(ДополнительныеПараметры);
	
КонецПроцедуры

#КонецОбласти

#Область АктПриемаПередачи

Процедура ОтправитьДокументыАктПриемаПередачиИСЦЭДМ(ДополнительныеПараметры)
	
	КоллекцияСгруппированныхДокументовИСЦЭДМ = ДополнительныеПараметры.КоллекцияСгруппированныхДокументовИСЦЭДМ;
	
	Для Каждого СгруппированныеИСЦЭДМ Из КоллекцияСгруппированныхДокументовИСЦЭДМ Цикл
		
		ИнтеграцияИСМПТКВызовСервера.СоздатьИсходящиеАктыИСЦЭДМ(СгруппированныеИСЦЭДМ.Значение);
		
	КонецЦикла;
	
	НачатьЗаполнениеДанныхПоЦенамДокумента(ДополнительныеПараметры);
	
КонецПроцедуры 

#КонецОбласти  

#Область АгрегацияВнеПроизводства

Процедура ОтправитьДокументыАгрегацияВнеПроизводстваИСЦЭДМ(ДополнительныеПараметры)
	
	КоллекцияСгруппированныхДокументовИСЦЭДМ = ДополнительныеПараметры.КоллекцияСгруппированныхДокументовИСЦЭДМ;
	
	Попытка
		
		Для Каждого СгруппированныеИСЦЭДМ Из КоллекцияСгруппированныхДокументовИСЦЭДМ Цикл
			
			ИнтеграцияИСМПТКВызовСервера.СоздатьИсходящиеАгрегацииИСЦЭДМ(СгруппированныеИСЦЭДМ.Значение);
			
		КонецЦикла;
		
	Исключение
		ВызватьИсключение ОписаниеОшибки();
	КонецПопытки;
	
	// Создать и отправить коллекцию актов.
	ЗапускатьФоновоеЗадание = ДополнительныеПараметры.ЗапускатьФоновоеЗадание;
	МассивИсходящихАктов = ДополнительныеПараметры.МассивИсходящихДокументовИСЦЭДМ;
	
	ОповеститьФормы(РаботаСДокументамиИСМПТККлиентСервер.ИмяСобытияЗаписьАгрегацияВнеПроизводстваИСЦЭДМ(), МассивИсходящихАктов);
	
КонецПроцедуры

#КонецОбласти

#Область АктВнутреннегоПеремещения

Процедура ОтправитьДокументыАктВнутреннегоПеремещенияИСЦЭДМ(ДополнительныеПараметры)
	
	КоллекцияСгруппированныхДокументовИСЦЭДМ = ДополнительныеПараметры.КоллекцияСгруппированныхДокументовИСЦЭДМ;
	
	Для Каждого СгруппированныеИСЦЭДМ Из КоллекцияСгруппированныхДокументовИСЦЭДМ Цикл
		
		ИнтеграцияИСМПТКВызовСервера.СоздатьИсходящиеАктыВнутреннегоПеремещенияИСЦЭДМ(СгруппированныеИСЦЭДМ.Значение);
		
	КонецЦикла; 
	
	НачатьПроверкуСтатусаДокументов(ДополнительныеПараметры);
	
КонецПроцедуры

#КонецОбласти


#Область ОтчетОПередачеКИОтНерезидентаРК

Процедура ОтправитьДокументыОтчетОПередачеКИОтНерезидентаРКИСЦЭДМ(ДополнительныеПараметры)
	
	КоллекцияСгруппированныхДокументовИСЦЭДМ = ДополнительныеПараметры.КоллекцияСгруппированныхДокументовИСЦЭДМ;
	
	Для Каждого СгруппированныеИСЦЭДМ Из КоллекцияСгруппированныхДокументовИСЦЭДМ Цикл
		
		ИнтеграцияИСМПТКВызовСервера.СоздатьИсходящиеОтчетыОПередачеКИОтНерезидентаРКИСЦЭДМ(СгруппированныеИСЦЭДМ.Значение);
		
	КонецЦикла;
	
	НачатьПроверкуСтатусаДокументов(ДополнительныеПараметры);
	
КонецПроцедуры

#КонецОбласти

#Область УведомлениеОВвозеИзЕАЭС

Процедура ОтправитьДокументыУведомлениеОВвозеИзЕАЭСИСЦЭДМ(ДополнительныеПараметры)
	
	КоллекцияСгруппированныхДокументовИСЦЭДМ = ДополнительныеПараметры.КоллекцияСгруппированныхДокументовИСЦЭДМ;
	
	Для Каждого СгруппированныеИСЦЭДМ Из КоллекцияСгруппированныхДокументовИСЦЭДМ Цикл
		
		ИнтеграцияИСМПТКВызовСервера.СоздатьИсходящиеУведомленияОВвозеИзЕАЭСИСЦЭДМ(СгруппированныеИСЦЭДМ.Значение);
		
	КонецЦикла;
	
	НачатьЗаполнениеДанныхПоЦенамДокумента(ДополнительныеПараметры);
	
КонецПроцедуры

#КонецОбласти


#Область УведомлениеОВвозеИзТретьихСтран

Процедура ОтправитьДокументыУведомлениеОВвозеИзТретьихСтранИСЦЭДМ(ДополнительныеПараметры)
	
	КоллекцияСгруппированныхДокументовИСЦЭДМ = ДополнительныеПараметры.КоллекцияСгруппированныхДокументовИСЦЭДМ;
	
	Для Каждого СгруппированныеИСЦЭДМ Из КоллекцияСгруппированныхДокументовИСЦЭДМ Цикл
		
		ИнтеграцияИСМПТКВызовСервера.СоздатьИсходящиеУведомленияОВвозеИзТретьихСтранИСЦЭДМ(СгруппированныеИСЦЭДМ.Значение);
		
	КонецЦикла;
	
	НачатьЗаполнениеДанныхПоЦенамДокумента(ДополнительныеПараметры);
	
КонецПроцедуры

#КонецОбласти


#Область ПроверкаСтатусаИПодписьДокумента

Процедура НачатьПроверкуСтатусаДокументов(ДополнительныеПараметры)
	
	ФормаОтправки = Неопределено;
	ДополнительныеПараметры.Свойство("Форма", ФормаОтправки);
	
	КоллекцияСгруппированныхДокументовИСЦЭДМ = ДополнительныеПараметры.КоллекцияСгруппированныхДокументовИСЦЭДМ;
	ДлительнаяОперация = ИнтеграцияИСМПТКВызовСервера.ОбновитьДанныеПоСтатусамДокументов(ФормаОтправки.УникальныйИдентификатор, КоллекцияСгруппированныхДокументовИСЦЭДМ);
	
	Если ДлительнаяОперация.Статус = "Выполнено" Тогда
		ЗавершитьПроверкуСтатусаДокументов(Новый Структура("Статус, АдресРезультата", ДлительнаяОперация.Статус, ПоместитьВоВременноеХранилище(КоллекцияСгруппированныхДокументовИСЦЭДМ)), Неопределено);
		Возврат
	КонецЕсли;
	
	ОповещениеОЗавершении = Новый ОписаниеОповещения("ЗавершитьПроверкуСтатусаДокументов", ИнтеграцияИСМПТККлиент);
	ПараметрыОжидания     = ОбщегоНазначенияИСМПТККлиентПереопределяемый.ПараметрыОжидания(ФормаОтправки); 
	ПараметрыОжидания.ВыводитьСообщения = Истина;
	ПараметрыОжидания.ТекстСообщения 	= НСтр("ru = 'Обновление данных по статусу документа.'");
	
	ОбщегоНазначенияИСМПТККлиентПереопределяемый.ОжидатьЗавершение(ДлительнаяОперация, ОповещениеОЗавершении, ПараметрыОжидания);

КонецПроцедуры 

Процедура ЗавершитьПроверкуСтатусаДокументов(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда // Пользователь отменил задание.
		Возврат;
	КонецЕсли;

	Если Результат.Статус = "Ошибка" Тогда
		ТекстОшибки = Результат.ПодробноеПредставлениеОшибки;
		ИмяСобытия  = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияОшибкаВФункцииСПараметром();
		ИмяСобытия  = СтрЗаменить(ИмяСобытия, "%ИмяФункции%", "ИнтеграцияИСМПТК.ЗавершитьЗаполнениеДанныхПоЦенамДокумента");
		ОбщегоНазначенияИСМПТКВызовСервера.СоздатьЗаписьЖурналаРегистрации(ИмяСобытия, "Ошибка",,, ТекстОшибки);
		ВызватьИсключение НСтр("ru = 'Произошла ошибка:'") + " " + РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияПодробностиВЖурналеРегистрации();
	КонецЕсли;
	
	КоллекцияСгруппированныхДокументовИСЦЭДМ = ПолучитьИзВременногоХранилища(Результат.АдресРезультата);
	ПодписатьДокументыИСЦЭДМ(КоллекцияСгруппированныхДокументовИСЦЭДМ);
	
КонецПроцедуры


#КонецОбласти



#Область ЗаполнениеИнформацииПоЦенамТоваров

Процедура НачатьЗаполнениеДанныхПоЦенамДокумента(ДополнительныеПараметры)
	
	
	ФормаОтправки = Неопределено;
	ДополнительныеПараметры.Свойство("Форма", ФормаОтправки);
	
	КоллекцияСгруппированныхДокументовИСЦЭДМ = ДополнительныеПараметры.КоллекцияСгруппированныхДокументовИСЦЭДМ;
	ДлительнаяОперация = ИнтеграцияИСМПТКВызовСервера.ОбновитьДанныепоЦенам(ФормаОтправки.УникальныйИдентификатор, КоллекцияСгруппированныхДокументовИСЦЭДМ);
	
	Если ДлительнаяОперация.Статус = "Выполнено" Тогда
		ЗавершитьЗаполнениеДанныхПоЦенамДокумента(Новый Структура("Статус, АдресРезультата", ДлительнаяОперация.Статус, ПоместитьВоВременноеХранилище(КоллекцияСгруппированныхДокументовИСЦЭДМ)), Неопределено);
		Возврат
	КонецЕсли;
	
	ОповещениеОЗавершении = Новый ОписаниеОповещения("ЗавершитьЗаполнениеДанныхПоЦенамДокумента", ИнтеграцияИСМПТККлиент);
	ПараметрыОжидания     = ОбщегоНазначенияИСМПТККлиентПереопределяемый.ПараметрыОжидания(ФормаОтправки); 
	ПараметрыОжидания.ВыводитьСообщения = Истина;
	ПараметрыОжидания.ТекстСообщения 	= НСтр("ru = 'Обновление данных по ценам документа.'");
	
	ОбщегоНазначенияИСМПТККлиентПереопределяемый.ОжидатьЗавершение(ДлительнаяОперация, ОповещениеОЗавершении, ПараметрыОжидания);

КонецПроцедуры

Процедура ЗавершитьЗаполнениеДанныхПоЦенамДокумента(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда // Пользователь отменил задание.
		Возврат;
	КонецЕсли;

	Если Результат.Статус = "Ошибка" Тогда
		ТекстОшибки = Результат.ПодробноеПредставлениеОшибки;
		ИмяСобытия  = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияОшибкаВФункцииСПараметром();
		ИмяСобытия  = СтрЗаменить(ИмяСобытия, "%ИмяФункции%", "ИнтеграцияИСМПТК.ЗавершитьЗаполнениеДанныхПоЦенамДокумента");
		ОбщегоНазначенияИСМПТКВызовСервера.СоздатьЗаписьЖурналаРегистрации(ИмяСобытия, "Ошибка",,, ТекстОшибки);
		ВызватьИсключение НСтр("ru = 'Произошла ошибка:'") + " " + РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияПодробностиВЖурналеРегистрации();
	КонецЕсли;
	
	КоллекцияСгруппированныхДокументовИСЦЭДМ = ПолучитьИзВременногоХранилища(Результат.АдресРезультата);
	ПодписатьДокументыИСЦЭДМ(КоллекцияСгруппированныхДокументовИСЦЭДМ);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ОтправкаДокументовСУЗ

Процедура ОтправитьИсходящиеДокументыСУЗ(Знач МассивИсходящихДокументовСУЗ, Знач ДополнительныеПараметры) Экспорт
	
		НовыйМассивДокументыСУЗ = МассивИсходящихДокументовСУЗ;
	
	Если НовыйМассивДокументыСУЗ.Количество() = 0 Тогда
		Возврат;
	Иначе
		
		Если НЕ ИнтеграцияИСМПТКВызовСервера.ПроверитьВозможностьОтправкиДокументовПоставитьВОчередьОтправкиДокументСУЗ(НовыйМассивДокументыСУЗ, ДополнительныеПараметры) Тогда
			Возврат;
		КонецЕсли;
		
		ТипДокументаСУЗ = РаботаСДокументамиИСМПТККлиент.ОпределитьТипДокументаПоСсылке(НовыйМассивДокументыСУЗ[0]);
		ДополнительныеПараметры.Вставить("МассивИсходящихДокументовСУЗ", НовыйМассивДокументыСУЗ);
		ДополнительныеПараметры.Вставить("ТипДокументаСУЗ", ТипДокументаСУЗ);
		
		КоллекцияСгруппированныхДокументовСУЗ = ИнтеграцияИСМПТКВызовСервера.СгруппироватьДокументыСУЗПоСтруктурнымЕдиницам(НовыйМассивДокументыСУЗ);
		ДополнительныеПараметры.Вставить("КоллекцияСгруппированныхДокументовСУЗ", КоллекцияСгруппированныхДокументовСУЗ);
		
		ОтправитьИсходящиеДокументыСУЗЗавершение(ДополнительныеПараметры);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОтправитьИсходящиеДокументыСУЗЗавершение(ДополнительныеПараметры) Экспорт
	
	Если ДополнительныеПараметры.ТипДокументаСУЗ = ОбщегоНазначенияИСМПТКВызовСервера.ИмяДокументаЗаказКодовМаркировкиСУЗИСМПТК() Тогда
		
		ОтправитьДокументыЗаказНаЭмиссиюКодовМаркировкиСУЗ(ДополнительныеПараметры);
		
	ИначеЕсли ДополнительныеПараметры.ТипДокументаСУЗ = ОбщегоНазначенияИСМПТКВызовСервера.ИмяДокументаАгрегацияКодовМаркировкиСУЗИСМПТК() Тогда
		
		ОтправитьДокументыАгрегацииКодовМаркировкиСУЗ(ДополнительныеПараметры);
		
	ИначеЕсли ДополнительныеПараметры.ТипДокументаСУЗ = ОбщегоНазначенияИСМПТКВызовСервера.ИмяДокументаНанесениеКодовМаркировкиСУЗИСМПТК() Тогда
		
		ОтправитьДокументыНанесенияКодовМаркировкиСУЗ(ДополнительныеПараметры);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОтправитьДокументыЗаказНаЭмиссиюКодовМаркировкиСУЗ(ДополнительныеПараметры) Экспорт
	
	КоллекцияСгруппированныхДокументовСУЗ = ДополнительныеПараметры.КоллекцияСгруппированныхДокументовСУЗ;
	
	Для Каждого СгруппированныеСУЗ Из КоллекцияСгруппированныхДокументовСУЗ Цикл
		
		СтруктурнаяЕдиница = СгруппированныеСУЗ.Ключ;
		МассивСУЗ = СгруппированныеСУЗ.Значение;
		
		Попытка
			Результат = ИнтеграцияИСМПТКВызовСервера.ОтправитьЗаказНаЭмиссиюКодовМаркировки(МассивСУЗ, СтруктурнаяЕдиница);
		Исключение
			ВызватьИсключение ОписаниеОшибки();
		КонецПопытки;
		
	КонецЦикла;
	
	ОповеститьФормы(РаботаСДокументамиИСМПТККлиентСервер.ИмяСобытияЗаписьЗаказНаЭмиссию(), МассивСУЗ);
	
КонецПроцедуры

Процедура ОтправитьДокументыАгрегацииКодовМаркировкиСУЗ(ДополнительныеПараметры) Экспорт
	
	КоллекцияСгруппированныхДокументовСУЗ = ДополнительныеПараметры.КоллекцияСгруппированныхДокументовСУЗ;
	
	Для Каждого СгруппированныеСУЗ Из КоллекцияСгруппированныхДокументовСУЗ Цикл
		
		СтруктурнаяЕдиница = СгруппированныеСУЗ.Ключ;
		МассивСУЗ = СгруппированныеСУЗ.Значение;
		
		Попытка
			Результат = ИнтеграцияИСМПТКВызовСервера.ОтправитьАгрегациюКодовМаркировки(МассивСУЗ, СтруктурнаяЕдиница);
		Исключение
			ВызватьИсключение ОписаниеОшибки();
		КонецПопытки;
		
	КонецЦикла;
	
	ОповеститьФормы(РаботаСДокументамиИСМПТККлиентСервер.ИмяСобытияЗаписьАгрегацияКодовМаркировки(), МассивСУЗ);
	
КонецПроцедуры

Процедура ОтправитьДокументыНанесенияКодовМаркировкиСУЗ(ДополнительныеПараметры) Экспорт
	
	КоллекцияСгруппированныхДокументовСУЗ = ДополнительныеПараметры.КоллекцияСгруппированныхДокументовСУЗ;
	
	Для Каждого СгруппированныеСУЗ Из КоллекцияСгруппированныхДокументовСУЗ Цикл
		
		СтруктурнаяЕдиница = СгруппированныеСУЗ.Ключ;
		МассивСУЗ = СгруппированныеСУЗ.Значение;
		
		Попытка
			Результат = ИнтеграцияИСМПТКВызовСервера.ОтправитьНанесениеКодовМаркировки(МассивСУЗ, СтруктурнаяЕдиница);
		Исключение
			ВызватьИсключение ОписаниеОшибки();
		КонецПопытки;
		
	КонецЦикла;
	
	ОповеститьФормы(РаботаСДокументамиИСМПТККлиентСервер.ИмяСобытияЗаписьНанесениеКодовМаркировки(), МассивСУЗ);
	
КонецПроцедуры

#КонецОбласти
///////////////////////////

////////ОБНОВЛЕНИЕ ДОКУМЕНТОВ////////
#Область ОбновлениеДокументовИСМПТ

Процедура ОбновитьДокументыИзИСМПТ(Знач МассивДокументовИСМПТ, Знач ДополнительныеПараметры) Экспорт
	
	ТипДокументаИСМПТ = РаботаСДокументамиИСМПТККлиент.ОпределитьТипДокументаПоСсылке(МассивДокументовИСМПТ[0]);
	
	КоллекцияСгруппированныхДокументовИСМПТ = ИнтеграцияИСМПТКВызовСервера.СгруппироватьДокументыИСМПТПоСтруктурнымЕдиницам(МассивДокументовИСМПТ);		
	МассивПрофилейИСМПТ = ПолучитьНастройкиПараметровИСМПТ(КоллекцияСгруппированныхДокументовИСМПТ);
	ДополнительныеПараметры.Вставить("КоллекцияСгруппированныхДокументовИСМПТ", КоллекцияСгруппированныхДокументовИСМПТ);
	ДополнительныеПараметры.Вставить("ТипДокументаИСМПТ", ТипДокументаИСМПТ);
	
	Если МассивПрофилейИСМПТ = Неопределено Тогда
		
		ОбновитьДокументыВыборДанныхПрофилейИСМПТ(МассивПрофилейИСМПТ, ДополнительныеПараметры);
		
	КонецЕсли;
	
КонецПроцедуры

Асинх Процедура ОбновитьДокументыВыборДанныхПрофилейИСМПТ(МассивПрофилейИСМПТ, ДополнительныеПараметры) Экспорт
	
	СписокТокеновАвторизации = Новый Соответствие();
	Если ДополнительныеПараметры.Свойство("КоллекцияСгруппированныхДокументовИСМПТ") Тогда
		Для Каждого ЭлементКоллекции Из ДополнительныеПараметры.КоллекцияСгруппированныхДокументовИСМПТ Цикл
			
			ТипДокумента = РаботаСДокументамиИСМПТККлиент.ОпределитьТипДокументаПоСсылке(ЭлементКоллекции.Значение[0]);
			ТокенАвторизации = Ждать ПолучитьТокенАвторизации(ЭлементКоллекции.Ключ, ТипДокумента);
			Если Не ТокенАвторизации = Неопределено Тогда
				СписокТокеновАвторизации.Вставить(ЭлементКоллекции.Ключ, ТокенАвторизации); 
			КонецЕсли;
			
		КонецЦикла;
	КонецЕсли;			
	
	Если СписокТокеновАвторизации.Количество() = 0 Тогда
		
		ТекстСообщенияТокенНеПолучен = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияОперацияПрерванаНеПолученыДанныеЭЦП();
		ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщенияТокенНеПолучен);
		Возврат;
		
	КонецЕсли;
		
	Если ДополнительныеПараметры.ЗапускатьФоновоеЗадание Тогда
	Иначе
		ИнтеграцияИСМПТКВызовСервера.ОбновитьДокументыИзИСМПТ(ДополнительныеПараметры, Неопределено, СписокТокеновАвторизации);
	КонецЕсли;
	
	Если ДополнительныеПараметры.ЗапускатьФоновоеЗадание Тогда
		
	Иначе
		Если ДополнительныеПараметры.ТипДокументаИСМПТ = ОбщегоНазначенияИСМПТКВызовСервера.ИмяДокументаУведомлениеОРасхожденииИСМПТК() Тогда 
			ОповеститьФормы(РаботаСДокументамиИСМПТККлиентСервер.ИмяСобытияЗаписьУведомлениеОРасхождении(), ДополнительныеПараметры.КоллекцияСгруппированныхДокументовИСМПТ);
			
		ИначеЕсли ДополнительныеПараметры.ТипДокументаИСМПТ = ОбщегоНазначенияИСМПТКВызовСервера.ИмяДокументаАктПриемаПередачиИСМПТК() Тогда
			ОповеститьФормы(РаботаСДокументамиИСМПТККлиентСервер.ИмяСобытияЗаписьАктПриемаПередачи(), ДополнительныеПараметры.КоллекцияСгруппированныхДокументовИСМПТ);
			
		ИначеЕсли ДополнительныеПараметры.ТипДокументаИСМПТ = ОбщегоНазначенияИСМПТКВызовСервера.ИмяДокументаУведомлениеОВыводеИзОборотаИСМПТК() Тогда
			ОповеститьФормы(РаботаСДокументамиИСМПТККлиентСервер.ИмяСобытияЗаписьУведомлениеОВыводеИзОборота(), ДополнительныеПараметры.КоллекцияСгруппированныхДокументовИСМПТ);
			
		ИначеЕсли ДополнительныеПараметры.ТипДокументаИСМПТ = ОбщегоНазначенияИСМПТКВызовСервера.ИмяДокументаУведомлениеОВводеВОборотИСМПТК() Тогда
			ОповеститьФормы(РаботаСДокументамиИСМПТККлиентСервер.ИмяСобытияЗаписьУведомлениеОВводеВОборот(), ДополнительныеПараметры.КоллекцияСгруппированныхДокументовИСМПТ);
			
		ИначеЕсли ДополнительныеПараметры.ТипДокументаИСМПТ = ОбщегоНазначенияИСМПТКВызовСервера.ИмяДокументаУведомлениеОВвозеИзЕАЭСИСМПТК() Тогда
			ОповеститьФормы(РаботаСДокументамиИСМПТККлиентСервер.ИмяСобытияЗаписьУведомлениеОВвозеИзЕАЭС(), ДополнительныеПараметры.КоллекцияСгруппированныхДокументовИСМПТ);
			
		ИначеЕсли ДополнительныеПараметры.ТипДокументаИСМПТ = ОбщегоНазначенияИСМПТКВызовСервера.ИмяДокументаУведомлениеОВвозеИзТретьихСтранИСМПТК() Тогда
			ОповеститьФормы(РаботаСДокументамиИСМПТККлиентСервер.ИмяСобытияЗаписьУведомлениеОВвозеИзТретьихСтран(), ДополнительныеПараметры.КоллекцияСгруппированныхДокументовИСМПТ);
			
		ИначеЕсли ДополнительныеПараметры.ТипДокументаИСМПТ = ОбщегоНазначенияИСМПТКВызовСервера.ИмяДокументаУведомлениеОбЭкспортеЕАЭСИСМПТК() Тогда
			ОповеститьФормы(РаботаСДокументамиИСМПТККлиентСервер.ИмяСобытияЗаписьУведомлениеОбЭкспортеЕАЭС(), ДополнительныеПараметры.КоллекцияСгруппированныхДокументовИСМПТ);
			
		ИначеЕсли ДополнительныеПараметры.ТипДокументаИСМПТ = ОбщегоНазначенияИСМПТКВызовСервера.ИмяДокументаУведомлениеОПриемкеЕАЭСИСМПТК() Тогда
			ОповеститьФормы(РаботаСДокументамиИСМПТККлиентСервер.ИмяСобытияЗаписьУведомлениеОПриемкеЕАЭС(), ДополнительныеПараметры.КоллекцияСгруппированныхДокументовИСМПТ);
		
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Заполняет массив профилей и паролей доступа к ИС МПТ в разрезе организаций
// если не хватает данных, то будем отображать форму ввода данных пользователю
Функция ПолучитьНастройкиПараметровИСМПТ(Знач КоллекцияСгруппированныхДокументовИСМПТ) Экспорт
	
	// Использовать текущего пользователя ИБ, если он не задан явно.
	ПользовательИБ = ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.ТекущийПользователь();	
	
	НеобходимоВводДанныхПользователем = Ложь;

	СоответствиеОрганизацийИНастроек = Новый Соответствие;
	
	Для Каждого СгруппированныеДокументыИСМПТ Из КоллекцияСгруппированныхДокументовИСМПТ Цикл
		
		СтруктурнаяЕдиница = СгруппированныеДокументыИСМПТ.Ключ;
						
	КонецЦикла;

	НеобходимоВводДанныхПользователем = Истина;
	Если НеобходимоВводДанныхПользователем Тогда
		СоответствиеОрганизацийИНастроек = Неопределено;
	КонецЕсли;
	
	Возврат СоответствиеОрганизацийИНастроек;
	
КонецФункции

#КонецОбласти

#Область ОбновлениеДокументовИСЦЭДМ

Процедура ОбновитьДокументыИзИСЦЭДМ(Знач МассивДокументовИСЦЭДМ, Знач ДополнительныеПараметры) Экспорт
	
	ТипДокументаИСЦЭДМ = РаботаСДокументамиИСМПТККлиент.ОпределитьТипДокументаПоСсылке(МассивДокументовИСЦЭДМ[0]);
	
	КоллекцияСгруппированныхДокументовИСЦЭДМ = ИнтеграцияИСМПТКВызовСервера.СгруппироватьДокументыИСЦЭДМПоСтруктурнымЕдиницам(МассивДокументовИСЦЭДМ);

	ДополнительныеПараметры.Вставить("КоллекцияСгруппированныхДокументовИСЦЭДМ", КоллекцияСгруппированныхДокументовИСЦЭДМ);
	ДополнительныеПараметры.Вставить("ТипДокументаИСЦЭДМ", ТипДокументаИСЦЭДМ);
	
	ОбновитьДокументыВыборДанныхПрофилейИСЦЭДМ(ДополнительныеПараметры);
	
КонецПроцедуры

// Заполняет массив профилей и паролей доступа к ИС ЦЭДМ в разрезе организаций
// если не хватает данных, то будем отображать форму ввода данных пользователю
Функция ПолучитьНастройкиПараметровИСЦЭДМ(Знач КоллекцияСгруппированныхДокументовИСЦЭДМ) Экспорт
	
	СписокОрганизаций = Новый СписокЗначений;
	Для Каждого СгруппированныеДокументыИСЦЭДМ Из КоллекцияСгруппированныхДокументовИСЦЭДМ Цикл
		
		СтруктурнаяЕдиница = СгруппированныеДокументыИСЦЭДМ.Ключ;
		СписокОрганизаций.Добавить(СтруктурнаяЕдиница);
		
	КонецЦикла;

	МассивПрофилей = ИнтерфейсИСМПТКВызовСервера.ПолучитьДанныеРегистраПрофильДоступаКЭДО(СписокОрганизаций);
	
	Возврат МассивПрофилей;
	
КонецФункции

Процедура ОбновитьДокументыВыборДанныхПрофилейИСЦЭДМ(ДополнительныеПараметры) Экспорт
	
	Если ДополнительныеПараметры.ЗапускатьФоновоеЗадание Тогда
	Иначе
		ИнтеграцияИСМПТКВызовСервера.ОбновитьДокументыИзИСЦЭДМ(ДополнительныеПараметры);
	КонецЕсли;
	
	Если ДополнительныеПараметры.ЗапускатьФоновоеЗадание Тогда
		
	Иначе
		Если ДополнительныеПараметры.ТипДокументаИСЦЭДМ = ОбщегоНазначенияИСМПТКВызовСервера.ИмяДокументаАктПриемаПередачиИСЦЭДМ() Тогда
			ОповеститьФормы(РаботаСДокументамиИСМПТККлиентСервер.ИмяСобытияЗаписьАктПриемаПередачиИСЦЭДМ(), ДополнительныеПараметры.КоллекцияСгруппированныхДокументовИСЦЭДМ);
			
		ИначеЕсли ДополнительныеПараметры.ТипДокументаИСЦЭДМ = ОбщегоНазначенияИСМПТКВызовСервера.ИмяДокументаУведомлениеОВыводеИзОборотаИСЦЭДМ() Тогда
			ОповеститьФормы(РаботаСДокументамиИСМПТККлиентСервер.ИмяСобытияЗаписьУведомлениеОВыводеИзОборотаИСЦЭДМ(), ДополнительныеПараметры.КоллекцияСгруппированныхДокументовИСЦЭДМ);
			
		ИначеЕсли ДополнительныеПараметры.ТипДокументаИСЦЭДМ = ОбщегоНазначенияИСМПТКВызовСервера.ИмяДокументаУведомлениеОВводеВОборотИСЦЭДМ() Тогда
			ОповеститьФормы(РаботаСДокументамиИСМПТККлиентСервер.ИмяСобытияЗаписьУведомлениеОВводеВОборотИСЦЭДМ(), ДополнительныеПараметры.КоллекцияСгруппированныхДокументовИСЦЭДМ);
			
		ИначеЕсли ДополнительныеПараметры.ТипДокументаИСЦЭДМ = ОбщегоНазначенияИСМПТКВызовСервера.ИмяДокументаУведомлениеОВвозеИзТретьихСтранИСЦЭДМ() Тогда
			ОповеститьФормы(РаботаСДокументамиИСМПТККлиентСервер.ИмяСобытияЗаписьУведомлениеОВвозеИзТретьихСтранИСЦЭДМ(), ДополнительныеПараметры.КоллекцияСгруппированныхДокументовИСЦЭДМ);
			
		ИначеЕсли ДополнительныеПараметры.ТипДокументаИСЦЭДМ = ОбщегоНазначенияИСМПТКВызовСервера.ИмяДокументаУведомлениеОВвозеИзЕАЭСИСЦЭДМ() Тогда
			ОповеститьФормы(РаботаСДокументамиИСМПТККлиентСервер.ИмяСобытияЗаписьУведомлениеОВвозеИзЕАЭСИСЦЭДМ(), ДополнительныеПараметры.КоллекцияСгруппированныхДокументовИСЦЭДМ);
			
		ИначеЕсли ДополнительныеПараметры.ТипДокументаИСЦЭДМ = ОбщегоНазначенияИСМПТКВызовСервера.ИмяДокументаАктВнутреннегоПеремещенияИСЦЭДМ() Тогда
			ОповеститьФормы(РаботаСДокументамиИСМПТККлиентСервер.ИмяСобытияЗаписьАктВнутреннегоПеремещенияИСЦЭДМ(), ДополнительныеПараметры.КоллекцияСгруппированныхДокументовИСЦЭДМ);
			
		ИначеЕсли ДополнительныеПараметры.ТипДокументаИСЦЭДМ = ОбщегоНазначенияИСМПТКВызовСервера.ИмяДокументаАгрегацияВнеПроизводстваИСЦЭДМ() Тогда
			ОповеститьФормы(РаботаСДокументамиИСМПТККлиентСервер.ИмяСобытияЗаписьАгрегацияВнеПроизводстваИСЦЭДМ(), ДополнительныеПараметры.КоллекцияСгруппированныхДокументовИСЦЭДМ);
			
		ИначеЕсли ДополнительныеПараметры.ТипДокументаИСЦЭДМ = ОбщегоНазначенияИСМПТКВызовСервера.ИмяДокументаУведомлениеОРасхожденияхИСЦЭДМ() Тогда
			ОповеститьФормы(РаботаСДокументамиИСМПТККлиентСервер.ИмяСобытияЗаписьУведомлениеОРасхожденияхИСЦЭДМ(), ДополнительныеПараметры.КоллекцияСгруппированныхДокументовИСЦЭДМ);
		
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбновлениеДокументовСУЗ

Процедура ПолучитьСтатусЗаказаЭмиссииКМ(Знач МассивДокументыСУЗ, Знач ДополнительныеПараметры) Экспорт
	
	НовыйМассивДокументыСУЗ = МассивДокументыСУЗ;
	
	Если НовыйМассивДокументыСУЗ.Количество() = 0 Тогда
		Возврат;
	Иначе
		
		ТипДокументаСУЗ = РаботаСДокументамиИСМПТККлиент.ОпределитьТипДокументаПоСсылке(НовыйМассивДокументыСУЗ[0]);
		ДополнительныеПараметры.Вставить("МассивИсходящихДокументовСУЗ", НовыйМассивДокументыСУЗ);
		ДополнительныеПараметры.Вставить("ТипДокументаСУЗ", ТипДокументаСУЗ);
		
		КоллекцияСгруппированныхДокументовСУЗ = ИнтеграцияИСМПТКВызовСервера.СгруппироватьДокументыСУЗПоСтруктурнымЕдиницам(НовыйМассивДокументыСУЗ);
		ДополнительныеПараметры.Вставить("КоллекцияСгруппированныхДокументовСУЗ", КоллекцияСгруппированныхДокументовСУЗ);
		
		ПолучитьСтатусыЗаказовКМ(ДополнительныеПараметры);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПолучитьСтатусыЗаказовКМ(ДополнительныеПараметры) Экспорт
	
	КоллекцияСгруппированныхДокументовСУЗ = ДополнительныеПараметры.КоллекцияСгруппированныхДокументовСУЗ;
	
	Для Каждого СгруппированныеСУЗ Из КоллекцияСгруппированныхДокументовСУЗ Цикл
		
		СтруктурнаяЕдиница = СгруппированныеСУЗ.Ключ;
		МассивСУЗ 		   = СгруппированныеСУЗ.Значение;
		
		Попытка
			Результат = ИнтеграцияИСМПТКВызовСервера.ОтправитьЗапросСтатусовЗаказовКМ(МассивСУЗ, СтруктурнаяЕдиница);
			Если Не Результат = Неопределено Тогда
				ИнтеграцияИСМПТКВызовСервера.ОтправитьЗапросПричинОтказаЗаказовКМ(МассивСУЗ, СтруктурнаяЕдиница);
			КонецЕсли;
		Исключение
			ВызватьИсключение ОписаниеОшибки();
		КонецПопытки;
		
	КонецЦикла;
	
	ОповеститьФормы(РаботаСДокументамиИСМПТККлиентСервер.ИмяСобытияОбновлениеСтатусаЗаказНаЭмиссию(), МассивСУЗ);
	
КонецПроцедуры

Процедура ПолучитьПричинуОтказаЗаказаЭмиссииКМ(Знач МассивДокументыСУЗ, Знач ДополнительныеПараметры) Экспорт
	
	НовыйМассивДокументыСУЗ = МассивДокументыСУЗ;
	
	Если НовыйМассивДокументыСУЗ.Количество() = 0 Тогда
		Возврат;
	Иначе
		
		ТипДокументаСУЗ = РаботаСДокументамиИСМПТККлиент.ОпределитьТипДокументаПоСсылке(НовыйМассивДокументыСУЗ[0]);
		ДополнительныеПараметры.Вставить("МассивИсходящихДокументовСУЗ", НовыйМассивДокументыСУЗ);
		ДополнительныеПараметры.Вставить("ТипДокументаСУЗ", ТипДокументаСУЗ);
		
		КоллекцияСгруппированныхДокументовСУЗ = ИнтеграцияИСМПТКВызовСервера.СгруппироватьДокументыСУЗПоСтруктурнымЕдиницам(НовыйМассивДокументыСУЗ);
		ДополнительныеПараметры.Вставить("КоллекцияСгруппированныхДокументовСУЗ", КоллекцияСгруппированныхДокументовСУЗ);
		
		ПолучитьПричиныОтказаЗаказовКМ(ДополнительныеПараметры);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПолучитьПричиныОтказаЗаказовКМ(ДополнительныеПараметры) Экспорт
	
	КоллекцияСгруппированныхДокументовСУЗ = ДополнительныеПараметры.КоллекцияСгруппированныхДокументовСУЗ;
	
	Для Каждого СгруппированныеСУЗ Из КоллекцияСгруппированныхДокументовСУЗ Цикл
		
		СтруктурнаяЕдиница = СгруппированныеСУЗ.Ключ;
		МассивСУЗ = СгруппированныеСУЗ.Значение;
		
		Попытка
			Результат = ИнтеграцияИСМПТКВызовСервера.ОтправитьЗапросПричинОтказаЗаказовКМ(МассивСУЗ, СтруктурнаяЕдиница);
		Исключение
			ВызватьИсключение ОписаниеОшибки();
		КонецПопытки;
		
	КонецЦикла;
	
	ОповеститьФормы(РаботаСДокументамиИСМПТККлиентСервер.ИмяСобытияПолучениеПричиныОтказаЗаказНаЭмиссию(), МассивСУЗ);
	
КонецПроцедуры

Процедура ПолучитьКМПоЗаказуНаЭмиссию(Знач МассивДокументыСУЗ, Знач ДополнительныеПараметры) Экспорт
	
	НовыйМассивДокументыСУЗ = МассивДокументыСУЗ;
	
	Если НовыйМассивДокументыСУЗ.Количество() = 0 Тогда
		Возврат;
	Иначе
		
		ТипДокументаСУЗ = РаботаСДокументамиИСМПТККлиент.ОпределитьТипДокументаПоСсылке(НовыйМассивДокументыСУЗ[0]);
		ДополнительныеПараметры.Вставить("МассивИсходящихДокументовСУЗ", НовыйМассивДокументыСУЗ);
		ДополнительныеПараметры.Вставить("ТипДокументаСУЗ", ТипДокументаСУЗ);
		
		КоллекцияСгруппированныхДокументовСУЗ = ИнтеграцияИСМПТКВызовСервера.СгруппироватьДокументыСУЗПоСтруктурнымЕдиницам(НовыйМассивДокументыСУЗ);
		ДополнительныеПараметры.Вставить("КоллекцияСгруппированныхДокументовСУЗ", КоллекцияСгруппированныхДокументовСУЗ);
		
		ПолучитьКМПоЗаказуНаЭмиссиюЗавершение(ДополнительныеПараметры);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПолучитьКМПоЗаказуНаЭмиссиюЗавершение(Знач ДополнительныеПараметры) Экспорт

	КоллекцияСгруппированныхДокументовСУЗ = ДополнительныеПараметры.КоллекцияСгруппированныхДокументовСУЗ;
	РазмерБлокаКодов 	= ?(ДополнительныеПараметры.Свойство("РазмерБлокаКодов"), ДополнительныеПараметры.РазмерБлокаКодов, 0);
	МассивКодовЗаказа 	= ?(ДополнительныеПараметры.Свойство("МассивКодов"), ДополнительныеПараметры.МассивКодов, Неопределено);
	
	Для Каждого СгруппированныеСУЗ Из КоллекцияСгруппированныхДокументовСУЗ Цикл
		
		СтруктурнаяЕдиница = СгруппированныеСУЗ.Ключ;
		МассивСУЗ = СгруппированныеСУЗ.Значение;
		
		Попытка
			Результат = ИнтеграцияИСМПТКВызовСервера.ОтправитьЗапросКМПоЗаказуНаЭмиссию(МассивСУЗ, СтруктурнаяЕдиница, РазмерБлокаКодов, МассивКодовЗаказа);
		Исключение
			ВызватьИсключение ОписаниеОшибки();
		КонецПопытки;
			
	КонецЦикла;
	
	ОповеститьФормы(РаботаСДокументамиИСМПТККлиентСервер.ИмяСобытияЗаписьЗаказНаЭмиссию(), МассивСУЗ);
	ОповеститьФормы(РаботаСДокументамиИСМПТККлиентСервер.ИмяСобытияПолучениеКмПоЗаказу(),  Истина);
	
КонецПроцедуры

Функция  ПолучитьСтатусGTINПоЗаказуНаЭмиссию(Знач ЗаказНаЭмиссию, Знач GTIN) Экспорт
	
	Попытка
		Возврат ИнтеграцияИСМПТКВызовСервера.ПолучитьСтатусGTINПоЗаказуНаЭмиссию(ЗаказНаЭмиссию, GTIN);
	Исключение
		ОповеститьФормы(РаботаСДокументамиИСМПТККлиентСервер.ИмяСобытияЗаписьЗаказНаЭмиссию(), ЗаказНаЭмиссию);
		ВызватьИсключение ОписаниеОшибки();
	КонецПопытки;
	
КонецФункции

Процедура ПовторноПолучитьКМПоЗаказуНаЭмиссию(Знач МассивДокументыСУЗ, Знач ДополнительныеПараметры) Экспорт
	
	НовыйМассивДокументыСУЗ = МассивДокументыСУЗ;
	
	Если НовыйМассивДокументыСУЗ.Количество() = 0 Тогда
		Возврат;
	Иначе
		
		ТипДокументаСУЗ = РаботаСДокументамиИСМПТККлиент.ОпределитьТипДокументаПоСсылке(НовыйМассивДокументыСУЗ[0]);
		ДополнительныеПараметры.Вставить("МассивИсходящихДокументовСУЗ", НовыйМассивДокументыСУЗ);
		ДополнительныеПараметры.Вставить("ТипДокументаСУЗ", ТипДокументаСУЗ);
		
		КоллекцияСгруппированныхДокументовСУЗ = ИнтеграцияИСМПТКВызовСервера.СгруппироватьДокументыСУЗПоСтруктурнымЕдиницам(НовыйМассивДокументыСУЗ);
		ДополнительныеПараметры.Вставить("КоллекцияСгруппированныхДокументовСУЗ", КоллекцияСгруппированныхДокументовСУЗ);
		
		ПовторноПолучитьКМПоЗаказуНаЭмиссиюЗавершение(ДополнительныеПараметры);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПовторноПолучитьКМПоЗаказуНаЭмиссиюЗавершение(Знач ДополнительныеПараметры) Экспорт

	КоллекцияСгруппированныхДокументовСУЗ = ДополнительныеПараметры.КоллекцияСгруппированныхДокументовСУЗ;
	
	Для Каждого СгруппированныеСУЗ Из КоллекцияСгруппированныхДокументовСУЗ Цикл
		
		СтруктурнаяЕдиница = СгруппированныеСУЗ.Ключ;
		МассивСУЗ = СгруппированныеСУЗ.Значение;
		
		Попытка
			Результат = ИнтеграцияИСМПТКВызовСервера.ОтправитьПовторныйЗапросКМПоЗаказуНаЭмиссию(МассивСУЗ, СтруктурнаяЕдиница);
		Исключение
			ВызватьИсключение ОписаниеОшибки();
		КонецПопытки;
		
	КонецЦикла;
	
	ОповеститьФормы(РаботаСДокументамиИСМПТККлиентСервер.ИмяСобытияЗаписьЗаказНаЭмиссию(), МассивСУЗ);
	
КонецПроцедуры

Процедура ПолучитьСтатусАгрегацииКМ(Знач МассивДокументыСУЗ, Знач ДополнительныеПараметры) Экспорт
	
	НовыйМассивДокументыСУЗ = МассивДокументыСУЗ;
	
	Если НовыйМассивДокументыСУЗ.Количество() = 0 Тогда
		Возврат;
	Иначе
		
		ТипДокументаСУЗ = РаботаСДокументамиИСМПТККлиент.ОпределитьТипДокументаПоСсылке(НовыйМассивДокументыСУЗ[0]);
		ДополнительныеПараметры.Вставить("МассивИсходящихДокументовСУЗ", НовыйМассивДокументыСУЗ);
		ДополнительныеПараметры.Вставить("ТипДокументаСУЗ", ТипДокументаСУЗ);
		
		КоллекцияСгруппированныхДокументовСУЗ = ИнтеграцияИСМПТКВызовСервера.СгруппироватьДокументыСУЗПоСтруктурнымЕдиницам(НовыйМассивДокументыСУЗ);
		ДополнительныеПараметры.Вставить("КоллекцияСгруппированныхДокументовСУЗ", КоллекцияСгруппированныхДокументовСУЗ);
		
		ПолучитьСтатусАгрегацииКМПослеАвторизации(ДополнительныеПараметры);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПолучитьСтатусАгрегацииКМПослеАвторизации(ДополнительныеПараметры) Экспорт
	
	КоллекцияСгруппированныхДокументовСУЗ = ДополнительныеПараметры.КоллекцияСгруппированныхДокументовСУЗ;
	
	Для Каждого СгруппированныеСУЗ Из КоллекцияСгруппированныхДокументовСУЗ Цикл
		
		СтруктурнаяЕдиница = СгруппированныеСУЗ.Ключ;
		МассивСУЗ = СгруппированныеСУЗ.Значение;
		
		Попытка
			Результат = ИнтеграцияИСМПТКВызовСервера.ОтправитьЗапросСтатусовАгрегацииКМ(МассивСУЗ, СтруктурнаяЕдиница);
		Исключение
			ВызватьИсключение ОписаниеОшибки();
		КонецПопытки;
		
	КонецЦикла;
	
	ОповеститьФормы(РаботаСДокументамиИСМПТККлиентСервер.ИмяСобытияЗаписьАгрегацияКодовМаркировки(), МассивСУЗ);
	
КонецПроцедуры

Процедура ПолучитьСтатусНанесенияКМ(Знач МассивДокументыСУЗ, Знач ДополнительныеПараметры) Экспорт
	
	НовыйМассивДокументыСУЗ = МассивДокументыСУЗ;
	
	Если НовыйМассивДокументыСУЗ.Количество() = 0 Тогда
		Возврат;
	Иначе
		
		ТипДокументаСУЗ = РаботаСДокументамиИСМПТККлиент.ОпределитьТипДокументаПоСсылке(НовыйМассивДокументыСУЗ[0]);
		ДополнительныеПараметры.Вставить("МассивИсходящихДокументовСУЗ", НовыйМассивДокументыСУЗ);
		ДополнительныеПараметры.Вставить("ТипДокументаСУЗ", ТипДокументаСУЗ);
		
		КоллекцияСгруппированныхДокументовСУЗ = ИнтеграцияИСМПТКВызовСервера.СгруппироватьДокументыСУЗПоСтруктурнымЕдиницам(НовыйМассивДокументыСУЗ);
		ДополнительныеПараметры.Вставить("КоллекцияСгруппированныхДокументовСУЗ", КоллекцияСгруппированныхДокументовСУЗ);
		
		ПолучитьСтатусНанесенияКМПослеАвторизации(ДополнительныеПараметры);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПолучитьСтатусНанесенияКМПослеАвторизации(ДополнительныеПараметры) Экспорт
	
	КоллекцияСгруппированныхДокументовСУЗ = ДополнительныеПараметры.КоллекцияСгруппированныхДокументовСУЗ;
	
	Для Каждого СгруппированныеСУЗ Из КоллекцияСгруппированныхДокументовСУЗ Цикл
		
		СтруктурнаяЕдиница = СгруппированныеСУЗ.Ключ;
		МассивСУЗ = СгруппированныеСУЗ.Значение;
		
		Попытка
			Результат = ИнтеграцияИСМПТКВызовСервера.ОтправитьЗапросСтатусовНанесенияКМ(МассивСУЗ, СтруктурнаяЕдиница);
		Исключение
			ВызватьИсключение ОписаниеОшибки();
		КонецПопытки;
		
	КонецЦикла;
	
	ОповеститьФормы(РаботаСДокументамиИСМПТККлиентСервер.ИмяСобытияЗаписьНанесениеКодовМаркировки(), МассивСУЗ);
	
КонецПроцедуры

#КонецОбласти
///////////////////////////

////////ПОДТВЕРЖДЕНИЕ ДОКУМЕНТОВ////////
#Область ПодтверждениеДокументовИСМПТ

// Параметры:
//  МассивИсходящихДокументовИСМПТ - Массив - Массив документов, которые необходимо подтвердить в ИС МПТ.
//   Каждый элемент массива должен иметь тип ДокументСсылка./Имя документа ИС МПТ/.
Процедура ПодтвердитьВходящиеДокументыИСМПТ(Знач МассивДокументыИСМПТ, Знач ДополнительныеПараметры) Экспорт
	
	Если НЕ КриптопровайдерПодключается() Тогда
		Возврат;
	КонецЕсли;
	
	КоллекцияСгруппированныхДокументовИСМПТ = ИнтеграцияИСМПТКВызовСервера.СгруппироватьДокументыИСМПТПоСтруктурнымЕдиницам(МассивДокументыИСМПТ);
	ДополнительныеПараметры.Вставить("КоллекцияСгруппированныхДокументовИСМПТ", КоллекцияСгруппированныхДокументовИСМПТ);
	
	ПодтвердитьВходящиеДокументыИСМПТЗавершение(ДополнительныеПараметры);
	
КонецПроцедуры

Асинх Процедура ПодтвердитьВходящиеДокументыИСМПТЗавершение(ДополнительныеПараметры) Экспорт
	
	СписокТокеновАвторизации = Новый Соответствие();
	
	Если ДополнительныеПараметры.Свойство("КоллекцияСгруппированныхДокументовИСМПТ") Тогда
		Для Каждого ЭлементКоллекции Из ДополнительныеПараметры.КоллекцияСгруппированныхДокументовИСМПТ Цикл
			
			ТипДокумента = РаботаСДокументамиИСМПТККлиент.ОпределитьТипДокументаПоСсылке(ЭлементКоллекции.Значение[0]);
			ТокенАвторизации = Ждать ПолучитьТокенАвторизации(ЭлементКоллекции.Ключ, ТипДокумента);
			Если Не ТокенАвторизации = Неопределено Тогда
				СписокТокеновАвторизации.Вставить(ЭлементКоллекции.Ключ, ТокенАвторизации); 
			КонецЕсли;
			
		КонецЦикла;
	КонецЕсли;
	
	Если СписокТокеновАвторизации.Количество() = 0 Тогда
		
		ТекстСообщенияТокенНеПолучен = НСтр("ru='Операция подтверждения прервана: не получены данные ЭЦП.'");
		ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщенияТокенНеПолучен);
		Возврат;
		
	КонецЕсли;
	
	Если ДополнительныеПараметры.ЗапускатьФоновоеЗадание Тогда
	Иначе
		КоллекцияДанныхДокументов = ИнтеграцияИСМПТКВызовСервера.ПодтвердитьВходящиеДокументыИСМПТ_СозданиеТитулов(ДополнительныеПараметры.КоллекцияСгруппированныхДокументовИСМПТ, СписокТокеновАвторизации);
		//Подписываем титулы
		НоваяКоллекцияСгруппированныхДокументовИСМПТ = Новый Массив();
		Для Каждого ЭлементКоллекции Из КоллекцияДанныхДокументов Цикл
			
			ИдентификаторОрганизации = ИнтеграцияИСМПТКВызовСервера.ПолучитьИдентификаторОрганизации(ЭлементКоллекции.Значение.СтруктурнаяЕдиница);
			ТитулБезПодписи = ЭлементКоллекции.Значение.ТитулДляПодписи;
			
			ТипДокумента = РаботаСДокументамиИСМПТККлиент.ОпределитьТипДокументаПоСсылке(ЭлементКоллекции.Значение.СсылкаДокумент);
			
			ПодписанныйТитул = Ждать СоздатьЭЦП_CMS_NCA_Layer(ТитулБезПодписи, 2, Ложь, Ложь, ИдентификаторОрганизации, ТипДокумента, Ложь);
				
			ДанныеПодписанногоТитула = Новый Структура();
			ДанныеПодписанногоТитула.Вставить("ПодписанныйТитул",   ПодписанныйТитул);
			ДанныеПодписанногоТитула.Вставить("Идентификатор",      ЭлементКоллекции.Ключ);
			ДанныеПодписанногоТитула.Вставить("ТокенАвторизации",   ЭлементКоллекции.Значение.Токен);
			ДанныеПодписанногоТитула.Вставить("СтруктурнаяЕдиница", ЭлементКоллекции.Значение.СтруктурнаяЕдиница);
			ДанныеПодписанногоТитула.Вставить("СсылкаДокумент", 	ЭлементКоллекции.Значение.СсылкаДокумент);
			ДанныеПодписанногоТитула.Вставить("ЭтоПодтверждение", 	ЭлементКоллекции.Значение.ЭтоПодтверждение);
			
			НоваяКоллекцияСгруппированныхДокументовИСМПТ.Добавить(ДанныеПодписанногоТитула);

		КонецЦикла;
		
		ИнтеграцияИСМПТКВызовСервера.ПодтвердитьВходящиеДокументыИСМПТ_ПодписьТитуловЗавершение(НоваяКоллекцияСгруппированныхДокументовИСМПТ, СписокТокеновАвторизации);
		
	КонецЕсли;
	
	Если ДополнительныеПараметры.ЗапускатьФоновоеЗадание Тогда
	Иначе
		ОповеститьФормы(РаботаСДокументамиИСМПТККлиентСервер.ИмяСобытияЗаписьАктПриемаПередачи(), ДополнительныеПараметры.КоллекцияСгруппированныхДокументовИСМПТ);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ПодтверждениеДокументовИСЦЭДМ

// Параметры:
//  МассивИсходящихДокументовИСЦЭДМ - Массив - Массив документов, которые необходимо подтвердить в ИС ЦЭДМ.
//   Каждый элемент массива должен иметь тип ДокументСсылка./Имя документа ИС ЦЭДМ/.
Процедура ПодтвердитьВходящиеДокументыИСЦЭДМ(Знач МассивДокументыИСЦЭДМ, Знач ДополнительныеПараметры) Экспорт
	
	Если НЕ КриптопровайдерПодключается() Тогда
		Возврат;
	КонецЕсли;
	
	Если МассивДокументыИСЦЭДМ.Количество()=0 Тогда
		Возврат;
	КонецЕсли;
	
	ТипДокументаИСЦЭДМ = РаботаСДокументамиИСМПТККлиент.ОпределитьТипДокументаПоСсылке(МассивДокументыИСЦЭДМ[0]);
	
	КоллекцияСгруппированныхДокументовИСЦЭДМ = ИнтеграцияИСМПТКВызовСервера.СгруппироватьДокументыИСЦЭДМПоСтруктурнымЕдиницам(МассивДокументыИСЦЭДМ);
	ДополнительныеПараметры.Вставить("КоллекцияСгруппированныхДокументовИСЦЭДМ", КоллекцияСгруппированныхДокументовИСЦЭДМ);
	ДополнительныеПараметры.Вставить("ТипДокументаИСЦЭДМ", ТипДокументаИСЦЭДМ);
	
	ПодтвердитьВходящиеДокументыИСЦЭДМЗавершение(ДополнительныеПараметры);
	
КонецПроцедуры

Асинх Процедура ПодтвердитьВходящиеДокументыИСЦЭДМЗавершение(ДополнительныеПараметры) Экспорт
	
	Если ДополнительныеПараметры.ЗапускатьФоновоеЗадание Тогда
	Иначе
		
		
		КоллекцияДанныхДокументов = ИнтеграцияИСМПТКВызовСервера.ПодтвердитьВходящиеДокументыИСЦЭДМ_СозданиеТитулов(ДополнительныеПараметры.КоллекцияСгруппированныхДокументовИСЦЭДМ);
		//Подписываем титулы
		НоваяКоллекцияСгруппированныхДокументовИСЦЭДМ = Новый Массив();
		Для Каждого ЭлементКоллекции Из КоллекцияДанныхДокументов Цикл
			
			ИдентификаторОрганизации = ИнтеграцияИСМПТКВызовСервера.ПолучитьИдентификаторОрганизации(ЭлементКоллекции.Значение.СтруктурнаяЕдиница);
			ТитулБезПодписи = ЭлементКоллекции.Значение.ТитулДляПодписи;
			
			ТипДокумента = РаботаСДокументамиИСМПТККлиент.ОпределитьТипДокументаПоСсылке(ЭлементКоллекции.Значение.СсылкаДокумент);
			
			ПодписанныйТитул = Ждать СоздатьЭЦП_CMS_NCA_Layer(ТитулБезПодписи, 2, Ложь, Ложь, ИдентификаторОрганизации, ТипДокумента, Ложь);
			
			ДанныеПодписанногоТитула = Новый Структура();
			ДанныеПодписанногоТитула.Вставить("ПодписанныйТитул",   ПодписанныйТитул);
			ДанныеПодписанногоТитула.Вставить("ТитулДляПодписи",    ТитулБезПодписи);
			ДанныеПодписанногоТитула.Вставить("Идентификатор",      ЭлементКоллекции.Значение.Идентификатор);
			ДанныеПодписанногоТитула.Вставить("ТокенАвторизации",   ЭлементКоллекции.Значение.Токен);
			ДанныеПодписанногоТитула.Вставить("СтруктурнаяЕдиница", ЭлементКоллекции.Значение.СтруктурнаяЕдиница);
			ДанныеПодписанногоТитула.Вставить("СсылкаДокумент", 	ЭлементКоллекции.Значение.СсылкаДокумент);
			ДанныеПодписанногоТитула.Вставить("ДействиеИндекс", 	ЭлементКоллекции.Значение.ДействиеИндекс);
			
			НоваяКоллекцияСгруппированныхДокументовИСЦЭДМ.Добавить(ДанныеПодписанногоТитула);

		КонецЦикла;
		
		ИнтеграцияИСМПТКВызовСервера.ПодтвердитьВходящиеДокументыИСЦЭДМ_ПодписьТитуловЗавершение(НоваяКоллекцияСгруппированныхДокументовИСЦЭДМ);
	
	КонецЕсли;	

	Если ДополнительныеПараметры.ЗапускатьФоновоеЗадание Тогда
	Иначе
		ИмяСобытия = РаботаСДокументамиИСМПТККлиент.ОпределитьИмяСобытияПоТипуДокумента(ДополнительныеПараметры.ТипДокументаИСЦЭДМ);
		ОповеститьФормы(ИмяСобытия, ДополнительныеПараметры.КоллекцияСгруппированныхДокументовИСЦЭДМ);
	КонецЕсли;
		
КонецПроцедуры

#КонецОбласти
///////////////////////////

////////ОТКЛОНЕНИЕ ДОКУМЕНТОВ////////
#Область ОтклонениеДокументовИСМПТ

// Параметры:
//  МассивИсходящихДокументовИСМПТ - Массив - Массив документов, которые необходимо отклонить в ИС МПТ.
//   Каждый элемент массива должен иметь тип ДокументСсылка./Имя документа ИС МПТ/.
Процедура ОтклонитьВходящиеДокументыИСМПТ(Знач МассивДокументыИСМПТ, Знач ДополнительныеПараметры) Экспорт
	
	Если НЕ КриптопровайдерПодключается() Тогда
		Возврат;
	КонецЕсли;
	
	НовыйМассивДокументыИСМПТ = МассивДокументыИСМПТ;
	
	Если НовыйМассивДокументыИСМПТ.Количество()=0 Тогда
		Возврат;
	Иначе
		
		//проверка 
		ТипДокументаИСМПТ = РаботаСДокументамиИСМПТККлиент.ОпределитьТипДокументаПоСсылке(НовыйМассивДокументыИСМПТ[0]);
		КоллекцияСгруппированныхДокументовИСМПТ = ИнтеграцияИСМПТКВызовСервера.СгруппироватьДокументыИСМПТПоСтруктурнымЕдиницам(МассивДокументыИСМПТ);
		ДополнительныеПараметры.Вставить("КоллекцияСгруппированныхДокументовИСМПТ", КоллекцияСгруппированныхДокументовИСМПТ);
		ДополнительныеПараметры.Вставить("ТипДокументаИСМПТ", ТипДокументаИСМПТ);
		
		ОтклонитьВходящиеДокументыИСМПТЗавершение(ТипДокументаИСМПТ, ДополнительныеПараметры);
		
	КонецЕсли;
	
КонецПроцедуры

Асинх Процедура ОтклонитьВходящиеДокументыИСМПТЗавершение(ТипДокументаИСМПТ, ДополнительныеПараметры) Экспорт
	
	СписокТокеновАвторизации = Новый Соответствие();
	
	Если ДополнительныеПараметры.Свойство("КоллекцияСгруппированныхДокументовИСМПТ") Тогда
		Для Каждого ЭлементКоллекции Из ДополнительныеПараметры.КоллекцияСгруппированныхДокументовИСМПТ Цикл
			
			ТипДокумента = РаботаСДокументамиИСМПТККлиент.ОпределитьТипДокументаПоСсылке(ЭлементКоллекции.Значение[0]);
			ТокенАвторизации = Ждать ПолучитьТокенАвторизации(ЭлементКоллекции.Ключ, ТипДокумента);
			Если Не ТокенАвторизации = Неопределено Тогда
				СписокТокеновАвторизации.Вставить(ЭлементКоллекции.Ключ, ТокенАвторизации); 
			КонецЕсли;
			
		КонецЦикла;
	КонецЕсли;
	
	Если СписокТокеновАвторизации.Количество() = 0 Тогда
		
		ТекстСообщенияТокенНеПолучен = НСтр("ru='Операция отклонения прервана: не получены данные ЭЦП.'");
		ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщенияТокенНеПолучен);
		Возврат;
		
	КонецЕсли;

	Если ДополнительныеПараметры.ЗапускатьФоновоеЗадание Тогда
	Иначе                                                                                                                     
		КоллекцияДанныхДокументов = ИнтеграцияИСМПТКВызовСервера.ОтклонитьВходящиеДокументыИСМПТ_СозданиеТитулов(ТипДокументаИСМПТ, ДополнительныеПараметры.КоллекцияСгруппированныхДокументовИСМПТ, СписокТокеновАвторизации);
		
		Если Не ТипДокументаИСМПТ = ОбщегоНазначенияИСМПТКВызовСервера.ИмяДокументаУведомлениеОРасхожденииИСМПТК() Тогда
			
			//Подписываем титулы
			НоваяКоллекцияСгруппированныхДокументовИСМПТ = Новый Массив();
			Для Каждого ЭлементКоллекции Из КоллекцияДанныхДокументов Цикл
				
				ИдентификаторОрганизации = ИнтеграцияИСМПТКВызовСервера.ПолучитьИдентификаторОрганизации(ЭлементКоллекции.Значение.СтруктурнаяЕдиница);
				
				ТитулБезПодписи = ЭлементКоллекции.Значение.ТитулДляПодписи;
				ТипДокумента = РаботаСДокументамиИСМПТККлиент.ОпределитьТипДокументаПоСсылке(ЭлементКоллекции.Значение.СсылкаДокумент);
				
				ПодписанныйТитул = Ждать СоздатьЭЦП_CMS_NCA_Layer(ТитулБезПодписи, 2, Ложь, Ложь, ИдентификаторОрганизации, ТипДокумента, Ложь);
				
				ДанныеПодписанногоТитула = Новый Структура();
				ДанныеПодписанногоТитула.Вставить("ПодписанныйТитул",   ПодписанныйТитул);
				ДанныеПодписанногоТитула.Вставить("Идентификатор",      ЭлементКоллекции.Ключ);
				ДанныеПодписанногоТитула.Вставить("ТокенАвторизации",   ЭлементКоллекции.Значение.Токен);
				ДанныеПодписанногоТитула.Вставить("СтруктурнаяЕдиница", ЭлементКоллекции.Значение.СтруктурнаяЕдиница);
				ДанныеПодписанногоТитула.Вставить("СсылкаДокумент", 	ЭлементКоллекции.Значение.СсылкаДокумент);
				ДанныеПодписанногоТитула.Вставить("ЭтоПодтверждение", 	ЭлементКоллекции.Значение.ЭтоПодтверждение);
				
				НоваяКоллекцияСгруппированныхДокументовИСМПТ.Добавить(ДанныеПодписанногоТитула);
			КонецЦикла;
			
			ИнтеграцияИСМПТКВызовСервера.ОтклонитьВходящиеДокументыИСМПТ_ПодписьТитуловЗавершение(ТипДокументаИСМПТ, НоваяКоллекцияСгруппированныхДокументовИСМПТ, СписокТокеновАвторизации);
			
		КонецЕсли;
	КонецЕсли;
	
	Если ДополнительныеПараметры.ЗапускатьФоновоеЗадание Тогда
	Иначе
		ИмяСобытия = РаботаСДокументамиИСМПТККлиент.ОпределитьИмяСобытияПоТипуДокумента(ДополнительныеПараметры.ТипДокументаИСМПТ);
		ОповеститьФормы(ИмяСобытия, ДополнительныеПараметры.КоллекцияСгруппированныхДокументовИСМПТ);
	КонецЕсли;
		
КонецПроцедуры

#КонецОбласти

#Область ОтклонениеДокументовИСЦЭДМ

// Параметры:
//  МассивИсходящихДокументовИСЦЭДМ - Массив - Массив документов, которые необходимо отклонить в ИС ЦЭДМ.
//   Каждый элемент массива должен иметь тип ДокументСсылка./Имя документа ИС ЦЭДМ/.
Процедура ОтклонитьВходящиеДокументыИСЦЭДМ(Знач МассивДокументыИСЦЭДМ, Знач ДополнительныеПараметры) Экспорт
	
	Если НЕ КриптопровайдерПодключается() Тогда
		Возврат;
	КонецЕсли;
	
	Если МассивДокументыИСЦЭДМ.Количество()=0 Тогда
		Возврат;
	КонецЕсли;
	
	ТипДокументаИСЦЭДМ = РаботаСДокументамиИСМПТККлиент.ОпределитьТипДокументаПоСсылке(МассивДокументыИСЦЭДМ[0]);
	
	КоллекцияСгруппированныхДокументовИСЦЭДМ = ИнтеграцияИСМПТКВызовСервера.СгруппироватьДокументыИСЦЭДМПоСтруктурнымЕдиницам(МассивДокументыИСЦЭДМ);
	ДополнительныеПараметры.Вставить("КоллекцияСгруппированныхДокументовИСЦЭДМ", КоллекцияСгруппированныхДокументовИСЦЭДМ);
	ДополнительныеПараметры.Вставить("ТипДокументаИСЦЭДМ", ТипДокументаИСЦЭДМ);
	
	ОтклонитьВходящиеДокументыИСЦЭДМЗавершение(ДополнительныеПараметры);
	
КонецПроцедуры

Асинх Процедура ОтклонитьВходящиеДокументыИСЦЭДМЗавершение(ДополнительныеПараметры) Экспорт
	
	Если ДополнительныеПараметры.ЗапускатьФоновоеЗадание Тогда
	Иначе
		
		КоллекцияДанныхДокументов = ИнтеграцияИСМПТКВызовСервера.ОтклонитьВходящиеДокументыИСЦЭДМ_СозданиеТитулов(ДополнительныеПараметры.КоллекцияСгруппированныхДокументовИСЦЭДМ);
		//Подписываем титулы
		НоваяКоллекцияСгруппированныхДокументовИСЦЭДМ = Новый Массив();
		Для Каждого ЭлементКоллекции Из КоллекцияДанныхДокументов Цикл
			
			ИдентификаторОрганизации = ИнтеграцияИСМПТКВызовСервера.ПолучитьИдентификаторОрганизации(ЭлементКоллекции.Значение.СтруктурнаяЕдиница);
			ТитулБезПодписи = ЭлементКоллекции.Значение.ТитулДляПодписи;
			
			ТипДокумента = РаботаСДокументамиИСМПТККлиент.ОпределитьТипДокументаПоСсылке(ЭлементКоллекции.Значение.СсылкаДокумент);
			
			ПодписанныйТитул = Ждать СоздатьЭЦП_CMS_NCA_Layer(ТитулБезПодписи, 2, Ложь, Ложь, ИдентификаторОрганизации, ТипДокумента, Ложь);
			
			ДанныеПодписанногоТитула = Новый Структура();
			ДанныеПодписанногоТитула.Вставить("ПодписанныйТитул",   ПодписанныйТитул);
			ДанныеПодписанногоТитула.Вставить("ТитулДляПодписи",    ТитулБезПодписи);
			ДанныеПодписанногоТитула.Вставить("Идентификатор",      ЭлементКоллекции.Значение.Идентификатор);
			ДанныеПодписанногоТитула.Вставить("ТокенАвторизации",   ЭлементКоллекции.Значение.Токен);
			ДанныеПодписанногоТитула.Вставить("СтруктурнаяЕдиница", ЭлементКоллекции.Значение.СтруктурнаяЕдиница);
			ДанныеПодписанногоТитула.Вставить("СсылкаДокумент", 	ЭлементКоллекции.Значение.СсылкаДокумент);
			ДанныеПодписанногоТитула.Вставить("ДействиеИндекс", 	ЭлементКоллекции.Значение.ДействиеИндекс);
			
			НоваяКоллекцияСгруппированныхДокументовИСЦЭДМ.Добавить(ДанныеПодписанногоТитула);

		КонецЦикла;
		
		ИнтеграцияИСМПТКВызовСервера.ОтклонитьВходящиеДокументыИСЦЭДМ_ПодписьТитуловЗавершение(НоваяКоллекцияСгруппированныхДокументовИСЦЭДМ);
		
	КонецЕсли;
	
	Если ДополнительныеПараметры.ЗапускатьФоновоеЗадание Тогда
	Иначе
		ИмяСобытия = РаботаСДокументамиИСМПТККлиент.ОпределитьИмяСобытияПоТипуДокумента(ДополнительныеПараметры.ТипДокументаИСЦЭДМ);
		ОповеститьФормы(ИмяСобытия, ДополнительныеПараметры.КоллекцияСгруппированныхДокументовИСЦЭДМ);
	КонецЕсли;
		
КонецПроцедуры

#КонецОбласти
///////////////////////////

////////ОТЗЫВ ДОКУМЕНТОВ////////
#Область ОтзывДокументовИСМПТ

// Параметры:
//  МассивИсходящихДокументовИСМПТ - Массив - Массив документов, которые необходимо отклонить в ИС МПТ.
//   Каждый элемент массива должен иметь тип ДокументСсылка./Имя документа ИС МПТ/.
Процедура ОтозватьИсходящиеДокументыИСМПТ(Знач МассивДокументыИСМПТ, Знач ДополнительныеПараметры) Экспорт
	
	Если НЕ КриптопровайдерПодключается() Тогда
		Возврат;
	КонецЕсли;
	
	КоллекцияСгруппированныхДокументовИСМПТ = ИнтеграцияИСМПТКВызовСервера.СгруппироватьДокументыИСМПТПоСтруктурнымЕдиницам(МассивДокументыИСМПТ);
	ТипДокументаИСМПТ = РаботаСДокументамиИСМПТККлиент.ОпределитьТипДокументаПоСсылке(МассивДокументыИСМПТ[0]);
	ДополнительныеПараметры.Вставить("КоллекцияСгруппированныхДокументовИСМПТ", КоллекцияСгруппированныхДокументовИСМПТ);
	ДополнительныеПараметры.Вставить("ЗапускатьФоновоеЗадание", Ложь);
	ДополнительныеПараметры.Вставить("ТипДокументаИСМПТ", ТипДокументаИСМПТ);
	
	ОтозватьИсходящиеДокументыИСМПТЗавершение(ДополнительныеПараметры);
	
КонецПроцедуры

Асинх Процедура ОтозватьИсходящиеДокументыИСМПТЗавершение(ДополнительныеПараметры) Экспорт
	
	СписокТокеновАвторизации = Новый Соответствие();
	Если ДополнительныеПараметры.Свойство("КоллекцияСгруппированныхДокументовИСМПТ") Тогда
		Для Каждого ЭлементКоллекции Из ДополнительныеПараметры.КоллекцияСгруппированныхДокументовИСМПТ Цикл
			
			ТипДокумента = РаботаСДокументамиИСМПТККлиент.ОпределитьТипДокументаПоСсылке(ЭлементКоллекции.Значение[0]);
			ТокенАвторизации = Ждать ПолучитьТокенАвторизации(ЭлементКоллекции.Ключ, ТипДокумента);
			Если Не ТокенАвторизации = Неопределено Тогда
				СписокТокеновАвторизации.Вставить(ЭлементКоллекции.Ключ, ТокенАвторизации); 
			КонецЕсли;
			
		КонецЦикла;
	КонецЕсли;
	
	Если СписокТокеновАвторизации.Количество() = 0 Тогда
		
		ТекстСообщенияТокенНеПолучен = НСтр("ru='Операция отзыва прервана: не получены данные ЭЦП.'");
		ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщенияТокенНеПолучен);
		Возврат;
		
	КонецЕсли;
	
	Если ДополнительныеПараметры.ЗапускатьФоновоеЗадание Тогда

	Иначе
		КоллекцияДанныхДокументов = ИнтеграцияИСМПТКВызовСервера.ОтозватьИсходящиеДокументыИСМПТ_СозданиеТитулов(ДополнительныеПараметры.ТипДокументаИСМПТ, ДополнительныеПараметры.КоллекцияСгруппированныхДокументовИСМПТ, СписокТокеновАвторизации);
		//Подписываем титулы
		НоваяКоллекцияСгруппированныхДокументовИСМПТ = Новый Массив();
		Для Каждого ЭлементКоллекции Из КоллекцияДанныхДокументов Цикл
			
			ИдентификаторОрганизации = ИнтеграцияИСМПТКВызовСервера.ПолучитьИдентификаторОрганизации(ЭлементКоллекции.Значение.СтруктурнаяЕдиница);
			ТитулБезПодписи = ЭлементКоллекции.Значение.ТитулДляПодписи;
			ТипДокумента = РаботаСДокументамиИСМПТККлиент.ОпределитьТипДокументаПоСсылке(ЭлементКоллекции.Значение.СсылкаДокумент);
			ПодписанныйТитул = Ждать СоздатьЭЦП_CMS_NCA_Layer(ТитулБезПодписи, 2, Ложь, Ложь, ИдентификаторОрганизации, ТипДокумента);
			
			ДанныеПодписанногоТитула = Новый Структура();
			ДанныеПодписанногоТитула.Вставить("ПодписанныйТитул",   ПодписанныйТитул);
			ДанныеПодписанногоТитула.Вставить("Идентификатор",      ЭлементКоллекции.Ключ);
			ДанныеПодписанногоТитула.Вставить("ТокенАвторизации",   ЭлементКоллекции.Значение.Токен);
			ДанныеПодписанногоТитула.Вставить("СтруктурнаяЕдиница", ЭлементКоллекции.Значение.СтруктурнаяЕдиница);
			ДанныеПодписанногоТитула.Вставить("СсылкаДокумент", 	ЭлементКоллекции.Значение.СсылкаДокумент);
			
			НоваяКоллекцияСгруппированныхДокументовИСМПТ.Добавить(ДанныеПодписанногоТитула);
		КонецЦикла;
			
		ИнтеграцияИСМПТКВызовСервера.ОтозватьИсходящиеДокументыИСМПТ_ПодписьТитуловЗавершение(НоваяКоллекцияСгруппированныхДокументовИСМПТ, СписокТокеновАвторизации);
	КонецЕсли;
	
	Если ДополнительныеПараметры.ЗапускатьФоновоеЗадание Тогда
	Иначе
		Если ДополнительныеПараметры.ТипДокументаИСМПТ = ОбщегоНазначенияИСМПТКВызовСервера.ИмяДокументаУведомлениеОРасхожденииИСМПТК() Тогда 
			ОповеститьФормы(РаботаСДокументамиИСМПТККлиентСервер.ИмяСобытияЗаписьУведомлениеОРасхождении(), ДополнительныеПараметры.КоллекцияСгруппированныхДокументовИСМПТ);
		ИначеЕсли ДополнительныеПараметры.ТипДокументаИСМПТ = ОбщегоНазначенияИСМПТКВызовСервера.ИмяДокументаАктПриемаПередачиИСМПТК() Тогда
			ОповеститьФормы(РаботаСДокументамиИСМПТККлиентСервер.ИмяСобытияЗаписьАктПриемаПередачи(), ДополнительныеПараметры.КоллекцияСгруппированныхДокументовИСМПТ);
		ИначеЕсли ДополнительныеПараметры.ТипДокументаИСМПТ = ОбщегоНазначенияИСМПТКВызовСервера.ИмяДокументаУведомлениеОВыводеИзОборотаИСМПТК() Тогда
			ОповеститьФормы(РаботаСДокументамиИСМПТККлиентСервер.ИмяСобытияЗаписьУведомлениеОВыводеИзОборота(), ДополнительныеПараметры.КоллекцияСгруппированныхДокументовИСМПТ);
		ИначеЕсли ДополнительныеПараметры.ТипДокументаИСМПТ = ОбщегоНазначенияИСМПТКВызовСервера.ИмяДокументаУведомлениеОВводеВОборотИСМПТК() Тогда
			ОповеститьФормы(РаботаСДокументамиИСМПТККлиентСервер.ИмяСобытияЗаписьУведомлениеОВводеВОборот(), ДополнительныеПараметры.КоллекцияСгруппированныхДокументовИСМПТ);
		ИначеЕсли ДополнительныеПараметры.ТипДокументаИСМПТ = ОбщегоНазначенияИСМПТКВызовСервера.ИмяДокументаУведомлениеОВвозеИзЕАЭСИСМПТК() Тогда
			ОповеститьФормы(РаботаСДокументамиИСМПТККлиентСервер.ИмяСобытияЗаписьУведомлениеОВвозеИзЕАЭС(), ДополнительныеПараметры.КоллекцияСгруппированныхДокументовИСМПТ);
		ИначеЕсли ДополнительныеПараметры.ТипДокументаИСМПТ = ОбщегоНазначенияИСМПТКВызовСервера.ИмяДокументаУведомлениеОВвозеИзТретьихСтранИСМПТК() Тогда
			ОповеститьФормы(РаботаСДокументамиИСМПТККлиентСервер.ИмяСобытияЗаписьУведомлениеОВвозеИзТретьихСтран(), ДополнительныеПараметры.КоллекцияСгруппированныхДокументовИСМПТ);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОтзывДокументовИСЦЭДМ

// Параметры:
//  МассивИсходящихДокументовИСЦЭДМ - Массив - Массив документов, которые необходимо отклонить в ИС ЦЭДМ.
//   Каждый элемент массива должен иметь тип ДокументСсылка./Имя документа ИС ЦЭДМ/.
Процедура ОтозватьИсходящиеДокументыИСЦЭДМ(Знач МассивДокументыИСЦЭДМ, Знач ДополнительныеПараметры) Экспорт
	
	Если НЕ КриптопровайдерПодключается() Тогда
		Возврат;
	КонецЕсли;
	
	КоллекцияСгруппированныхДокументовИСЦЭДМ = ИнтеграцияИСМПТКВызовСервера.СгруппироватьДокументыИСЦЭДМПоСтруктурнымЕдиницам(МассивДокументыИСЦЭДМ);
	ТипДокументаИСЦЭДМ = РаботаСДокументамиИСМПТККлиент.ОпределитьТипДокументаПоСсылке(МассивДокументыИСЦЭДМ[0]);
	ДополнительныеПараметры.Вставить("КоллекцияСгруппированныхДокументовИСЦЭДМ", КоллекцияСгруппированныхДокументовИСЦЭДМ);
	ДополнительныеПараметры.Вставить("ЗапускатьФоновоеЗадание", Ложь);
	ДополнительныеПараметры.Вставить("ТипДокументаИСЦЭДМ", ТипДокументаИСЦЭДМ);
	
	ОтозватьИсходящиеДокументыИСЦЭДМЗавершение(ДополнительныеПараметры);
	
КонецПроцедуры

Асинх Процедура ОтозватьИсходящиеДокументыИСЦЭДМЗавершение(ДополнительныеПараметры) Экспорт
	
	Если ДополнительныеПараметры.ЗапускатьФоновоеЗадание Тогда

	Иначе
		КоллекцияДанныхДокументов = ИнтеграцияИСМПТКВызовСервера.ОтозватьИсходящиеДокументыИСЦЭДМ_СозданиеТитулов(ДополнительныеПараметры.КоллекцияСгруппированныхДокументовИСЦЭДМ);
		//Подписываем титулы
		НоваяКоллекцияСгруппированныхДокументовИСЦЭДМ = Новый Массив();
		Для Каждого ЭлементКоллекции Из КоллекцияДанныхДокументов Цикл
			
			ИдентификаторОрганизации = ИнтеграцияИСМПТКВызовСервера.ПолучитьИдентификаторОрганизации(ЭлементКоллекции.Значение.СтруктурнаяЕдиница);
			ТитулБезПодписи = ЭлементКоллекции.Значение.ТитулДляПодписи;
			
			ТипДокумента = РаботаСДокументамиИСМПТККлиент.ОпределитьТипДокументаПоСсылке(ЭлементКоллекции.Значение.СсылкаДокумент);
			
			ПодписанныйТитул = Ждать СоздатьЭЦП_CMS_NCA_Layer(ТитулБезПодписи, 2, Ложь, Ложь, ИдентификаторОрганизации, ТипДокумента);
			
			ДанныеПодписанногоТитула = Новый Структура();
			ДанныеПодписанногоТитула.Вставить("ПодписанныйТитул",   ПодписанныйТитул);
			ДанныеПодписанногоТитула.Вставить("ТитулДляПодписи",    ТитулБезПодписи);
			ДанныеПодписанногоТитула.Вставить("Идентификатор",      ЭлементКоллекции.Значение.Идентификатор);
			ДанныеПодписанногоТитула.Вставить("ТокенАвторизации",   ЭлементКоллекции.Значение.Токен);
			ДанныеПодписанногоТитула.Вставить("СтруктурнаяЕдиница", ЭлементКоллекции.Значение.СтруктурнаяЕдиница);
			ДанныеПодписанногоТитула.Вставить("СсылкаДокумент", 	ЭлементКоллекции.Значение.СсылкаДокумент);
			ДанныеПодписанногоТитула.Вставить("ДействиеИндекс", 	ЭлементКоллекции.Значение.ДействиеИндекс);
			
			НоваяКоллекцияСгруппированныхДокументовИСЦЭДМ.Добавить(ДанныеПодписанногоТитула);

		КонецЦикла;
			
		ИнтеграцияИСМПТКВызовСервера.ОтозватьИсходящиеДокументыИСЦЭДМ_ПодписьТитуловЗавершение(НоваяКоллекцияСгруппированныхДокументовИСЦЭДМ);
		
	КонецЕсли;
	
	Если ДополнительныеПараметры.ЗапускатьФоновоеЗадание Тогда
	Иначе
		
		ИмяСобытия = РаботаСДокументамиИСМПТККлиент.ОпределитьИмяСобытияПоТипуДокумента(ДополнительныеПараметры.ТипДокументаИСЦЭДМ);
		ОповеститьФормы(ИмяСобытия, ДополнительныеПараметры.КоллекцияСгруппированныхДокументовИСЦЭДМ);

	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти
///////////////////////////

#Область Криптобиблиотека

Асинх Функция СоздатьЭЦП_CMS_NCA_Layer(Знач ДанныеXML, ТипВходящихДанных, Знач ВключатьДанныеВПодпись, КодироватьВbase64 = Ложь, ИдентификаторКлиента = "", ТипДокумента = Неопределено, Отправка = Истина) Экспорт
	
	ВключатьШтампВремениВПодпись = Ложь;
	ПараметрыExtras = ЭлектронноеВзаимодействиеССервисамиМаркировкаВызовСервера.ПолучитьПараметрыКомпонентыМаркировка(ИдентификаторКлиента, ТипДокумента, Отправка);

	ПараметрыВзаимодействияКриптопровайдера                              = КриптографияКлиентСервер.ПолучитьПараметрыВзаимодействияКриптопровайдера();
	ПараметрыВзаимодействияКриптопровайдера.ВключатьШтампВремениВПодпись = ВключатьШтампВремениВПодпись;
	ПараметрыВзаимодействияКриптопровайдера.ВключатьДанныеВПодпись       = ВключатьДанныеВПодпись;
	ПараметрыВзаимодействияКриптопровайдера.ДополнительныеПараметры      = ПараметрыExtras;
	ПараметрыВзаимодействияКриптопровайдера.КодироватьВbase64            = КодироватьВbase64;
	ПараметрыВзаимодействияКриптопровайдера.ИдентификаторКлиента         = ИдентификаторКлиента;

	ОтветСокета = Ждать КриптографияКлиентАсинх.СоздатьЭЦП_CMS(ДанныеXML, ПараметрыВзаимодействияКриптопровайдера, Ложь);
	СлужебныеДанные = ОтветСокета.СлужебныеДанные;

	Если ОтветСокета.ЭтоОшибка Тогда
		Возврат Неопределено;
	КонецЕсли;
		
	Возврат ОтветСокета.ПодписанныеДанные;

КонецФункции

Функция ПрочитатьЗначениеJSON_Маркировка(СтрокаJSON, СвойстваДаты = "") Экспорт
	
	#Если ВебКлиент Тогда
		Результат = ИнтеграцияИСМПТКВызовСервера.ПрочитатьЗначениеJSON_Маркировка(СтрокаJSON, СвойстваДаты);
	#Иначе
		Чтение = Новый ЧтениеJSON;
		Чтение.УстановитьСтроку(СтрокаJSON);
		Результат = ПрочитатьJSON(Чтение, Ложь, СвойстваДаты);
		Чтение.Закрыть();
	#КонецЕсли
	
	Возврат Результат;
	
КонецФункции

Функция ОбработатьДанныеДляПодписи(ДанныеXML, КодироватьВbase64, ПодписьСписка)
	
	Если Не ТипЗнч(ДанныеXML) = Тип("Массив") Тогда
		МассивДляПодписи = Новый Массив;
		МассивДляПодписи.Добавить(ДанныеXML);
		ПодписьСписка = Ложь;
	Иначе
		МассивДляПодписи = ДанныеXML;
		ПодписьСписка = Истина;
	КонецЕсли;
	
	Сч = 0;
	
	Для Сч = 0 По МассивДляПодписи.Количество() - 1 Цикл 
		
		Если КодироватьВbase64 Тогда 
			ДвоичныеДанныеСтроки = ПолучитьДвоичныеДанныеИзСтроки(МассивДляПодписи[Сч]);
			СтрокаBase64 = СтрЗаменить(СтрЗаменить(Base64Строка(ДвоичныеДанныеСтроки), Символы.ВК, ""),Символы.ПС,"");
		Иначе
			СтрокаBase64 = МассивДляПодписи[Сч]; 
		КонецЕсли;
		
		МассивДляПодписи[Сч] = СтрокаBase64;
		
	КонецЦикла;
	
	Возврат МассивДляПодписи;
	
КонецФункции

Функция Ошибка_НеверныйПароль() Экспорт
	Возврат "НеверныйПароль";	
КонецФункции

Функция Ошибка_НеверныйФайл() Экспорт
	Возврат "НеверныйФайл";	
КонецФункции

Функция Ошибка_НеизвестнаяОшибка() Экспорт
	Возврат "НеизвестнаяОшибка";	
КонецФункции

Функция ОшибкаКриптопровайдера(Криптопровайдер, ИнформацияОбОшибке) Экспорт
	
	Ошибка = Новый Структура;
	
	Если Криптопровайдер = Неопределено Тогда
		Ошибка.Вставить("Версия", 		  "");
		Ошибка.Вставить("КодОшибки", 	  "");
		Ошибка.Вставить("ОписаниеОшибки", "");		
	Иначе
		Ошибка.Вставить("Версия", 		  Криптопровайдер.Версия);
		Ошибка.Вставить("КодОшибки", 	  Криптопровайдер.КодОшибки);
		Ошибка.Вставить("ОписаниеОшибки", Криптопровайдер.ТекстОшибки);
	КонецЕсли;
	
	Ошибка.Вставить("ИнформацияОбОшибке", ИнформацияОбОшибке);
	
	ТипОшибки = ТипОшибкиКриптопровайдера(Ошибка);
	Ошибка.Вставить("ТипОшибки", ТипОшибки);
	
	ПредставленияОшибки = ПредставленияОшибкиКриптопровайдера(Ошибка);
	Ошибка.Вставить("КраткоеПредставление",   ПредставленияОшибки.КраткоеПредставление);
	Ошибка.Вставить("ПодробноеПредставление", ПредставленияОшибки.ПодробноеПредставление);
	
	Возврат Ошибка;
	
КонецФункции

Функция ТипОшибкиКриптопровайдера(Ошибка)
	
	ТипОшибки = Ошибка_НеизвестнаяОшибка();
	
	Если Найти(Ошибка.ОписаниеОшибки, "0D0680A8") Тогда
		ТипОшибки = Ошибка_НеверныйФайл();		
	ИначеЕсли Найти(Ошибка.ОписаниеОшибки, "23076071") Тогда
		ТипОшибки = Ошибка_НеверныйПароль();	
	Иначе
		ТипОшибки = Ошибка_НеизвестнаяОшибка();	
	КонецЕсли;
	
	Возврат ТипОшибки;
	
КонецФункции

Функция ПредставленияОшибкиКриптопровайдера(Ошибка)
	
	ПредставленияОшибки = Новый Структура;
	
	КраткоеПредставление = КраткоеПредставлениеОшибкиКриптопровайдера(Ошибка);
	КраткоеПредставление = КраткоеПредставление + Символы.ПС + НСтр("ru = 'Подробности ошибки смотрите в Журнале регистрации.'");
	ПредставленияОшибки.Вставить("КраткоеПредставление", КраткоеПредставление);
	
	ПодробноеПредставление = ПодробноеПредставлениеОшибкиКриптопровайдера(Ошибка);
	ПредставленияОшибки.Вставить("ПодробноеПредставление", ПодробноеПредставление);
	
	Возврат ПредставленияОшибки;
	
КонецФункции

Функция ЗаписатьЗначениеJSON_Маркировка(Значение)Экспорт
	
	Результат = Неопределено;
	#Если ВебКлиент Тогда
		Результат = ИнтеграцияИСМПТКВызовСервера.ЗаписатьЗначениеJSON_Маркировка(Значение);
	#Иначе
		Запись = Новый ЗаписьJSON;
		Запись.УстановитьСтроку();
		ЗаписатьJSON(Запись, Значение);
		Результат = Запись.Закрыть();
	#КонецЕсли
	
	Возврат Результат;
	
КонецФункции

Функция КраткоеПредставлениеОшибкиКриптопровайдера(Ошибка)
	
	КраткоеПредставление = "";
	
	Если Ошибка.ТипОшибки = Ошибка_НеверныйФайл() Тогда
		КраткоеПредставление = НСтр("ru = 'Возможно выбранный файл не является файлом сертификата ""*.p12"".'");		
	ИначеЕсли Ошибка.ТипОшибки = Ошибка_НеверныйПароль() Тогда
		КраткоеПредставление = НСтр("ru = 'Возможно был введен некорректный пароль для файла сертификата.'");				
	Иначе	
		КраткоеПредставление = КраткоеПредставлениеОшибки(Ошибка.ИнформацияОбОшибке);					
	КонецЕсли;
	
	Возврат КраткоеПредставление;
	
КонецФункции

Функция ПодробноеПредставлениеОшибкиКриптопровайдера(Ошибка)
	
	КраткоеПредставление = КраткоеПредставлениеОшибкиКриптопровайдера(Ошибка);	
		
	Если ПустаяСтрока(Ошибка.Версия) И ПустаяСтрока(Ошибка.КодОшибки) И ПустаяСтрока(Ошибка.ОписаниеОшибки) Тогда
		ИнформацияИзКриптопровайдера = "";
	Иначе
		ИнформацияИзКриптопровайдера = НСтр("ru = 'Версия криптографии: [Версия], Код ошибки: [КодОшибки], Описание ошибки: [ОписаниеОшибки]'");
		ИнформацияИзКриптопровайдера = СтрЗаменить(ИнформацияИзКриптопровайдера, "[Версия]", Ошибка.Версия);
		ИнформацияИзКриптопровайдера = СтрЗаменить(ИнформацияИзКриптопровайдера, "[КодОшибки]", Ошибка.КодОшибки);
		ИнформацияИзКриптопровайдера = СтрЗаменить(ИнформацияИзКриптопровайдера, "[ОписаниеОшибки]", Ошибка.ОписаниеОшибки);
	КонецЕсли;	
		
	ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(Ошибка.ИнформацияОбОшибке);
	
	ТекстСообщения = КраткоеПредставление + Символы.ПС + ИнформацияИзКриптопровайдера + Символы.ПС + ПодробноеПредставлениеОшибки; 
	
	Возврат ТекстСообщения;
	
КонецФункции

Асинх Функция ПолучитьТокенАвторизации(Организация = Неопределено, ТипДокумента = Неопределено, Отправка = Ложь) Экспорт
	
	Если Организация = Неопределено ИЛИ Не ЗначениеЗаполнено(Организация) Тогда 
		ОшибкаПодписи = НСтр("ru = 'Не получены данные об организации. Невозможно получить токен сеанса!'");
		ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ОшибкаПодписи);	
		Возврат Неопределено;
	КонецЕсли;
	
	ПараметрыЗапросаКлючаСессии   = ИнтеграцияИСМПТККлиентСервер.ПараметрыЗапросаКлючаСессии_ИСМП(Организация);
	КлючСессииЗапрошенИУстановлен = Ложь;
	КлючСессии = ИнтерфейсИСМПТКВызовСервера.ПроверитьОбновитьКлючСессииИСМПТ(ПараметрыЗапросаКлючаСессии, Неопределено, Ложь);
	
	ТребуетсяОбновлениеКлючаСессии = (КлючСессии = Неопределено);
	Если ТребуетсяОбновлениеКлючаСессии Тогда	
		
		РезультатЗапроса = ИнтерфейсИСМПТКВызовСервера.ЗапроситьПараметрыАвторизации(ПараметрыЗапросаКлючаСессии);
		
		ПараметрыАвторизации = РезультатЗапроса.ПараметрыАвторизации;
		Если ПараметрыАвторизации = Неопределено Тогда
			ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(РезультатЗапроса.ТекстОшибки);
		КонецЕсли;
		Если ПараметрыАвторизации <> Неопределено Тогда
			КлючСессииЗапрошенИУстановлен = Ждать ОтправитьДанныеАвторизацииИПолучитьТокен(ПараметрыЗапросаКлючаСессии, ПараметрыАвторизации, ТипДокумента, Отправка);
			
			Если КлючСессииЗапрошенИУстановлен = Неопределено Тогда
				// Не удалось подлючить криптопровайдер/проблема с ЭЦП. Сообщение формируется в получении КлючСессииЗапрошенИУстановлен, выводить не нужно.
				Возврат Неопределено;
			КонецЕсли;
			
			Если КлючСессииЗапрошенИУстановлен = "НеВыбран" Тогда 
				ОшибкаПодписи = НСтр("ru = 'Отмена выбора сертификата ЭЦП.'");
				ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ОшибкаПодписи);	
				Возврат Неопределено;
			КонецЕсли;
			
			КлючСессии = ИнтерфейсИСМПТКВызовСервера.ПроверитьОбновитьКлючСессииИСМПТ(ПараметрыЗапросаКлючаСессии, Неопределено, Ложь);
			
			Если Не КлючСессииЗапрошенИУстановлен И КлючСессии = Неопределено Тогда
				
				// ЭЦП некорректна - не зарегистрирована в ИС МПТ или шлюзе криптографии. 
				ОшибкаПодписи = НСтр("ru = 'Не удалось обработать данные выбранной ЭЦП. Проверьте регистрацию БИН в системе маркировки.'");
				ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ОшибкаПодписи);
				
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
		КлючСессииЗапрошенИУстановлен = Истина;
	КонецЕсли;
	
	Возврат КлючСессии;
	
КонецФункции

Асинх Функция ОтправитьДанныеАвторизацииИПолучитьТокен(ПараметрыЗапросаКлючаСессии, ПараметрыАвторизации, ТипДокумента = Неопределено, Отправка = Истина)
	
	КодСостояния = 0;
	
	ИдентификаторОрганизации = ИнтеграцияИСМПТКВызовСервера.ПолучитьИдентификаторОрганизации(ПараметрыЗапросаКлючаСессии.Организация);
	
	Подпись = Ждать СоздатьЭЦП_CMS_NCA_Layer(ПараметрыАвторизации.Данные, 1, Истина, Истина, ИдентификаторОрганизации, ТипДокумента, Отправка);
	
	Если Подпись = Неопределено ИЛИ Подпись = "НеВыбран" Тогда
		Возврат Подпись;
	КонецЕсли;
	
	Подпись = СтрЗаменить(Подпись, "-----BEGIN CMS-----", "");
	Подпись = СтрЗаменить(Подпись, "-----END CMS-----", "");
	Подпись = СтрЗаменить(Подпись, Символы.ПС, "");
	
	РезультатЗапросаИУстановкиКлючаСессии = ИнтерфейсИСМПТКВызовСервера.ЗапроситьУстановитьКлючСессииИСМПТ(
					ПараметрыЗапросаКлючаСессии,
					ПараметрыАвторизации,
					Подпись);
					
	КлючСессииЗапрошенИУстановлен = РезультатЗапросаИУстановкиКлючаСессии.КлючСессииУстановлен;

	Возврат КлючСессииЗапрошенИУстановлен;  
	 
КонецФункции

// Получается текстовое представление ошибки для пользователя
Функция ПолучитьОписаниеОшибки(СообщениеОбОшибке)
	
	ТекстОшибки = "";
	Попытка
		//если ответ в формате JSON
		Результат = ПрочитатьЗначениеJSON_Маркировка(СообщениеОбОшибке);
		ТекстОшибки = Результат.msgttc;
	Исключение
		//если ответ в виде текста
		Если ЗначениеЗаполнено(СообщениеОбОшибке) Тогда
			ТекстОшибки = СообщениеОбОшибке;
		КонецЕсли;
	КонецПопытки;
	Возврат ТекстОшибки;
	
КонецФункции

Функция КриптопровайдерПодключается(Версия = "", РежимТишины = Ложь, МестоВыполненияОпераций = Неопределено, ТолькоПодключение = Ложь) Экспорт
	
	ВыполнятьКриптографическиеОперацииНаКлиенте = ВыполнятьКриптографическиеОперацииНаКлиенте(); 
	
	// Проверка подключения в требуемом контексте.
	Если ВыполнятьКриптографическиеОперацииНаКлиенте Тогда		
		Подключается = ИнтеграцияИСМПТККлиентПереопределяемый.УдалосьПодключитьКриптопровайдерНаКлиенте(Версия, РежимТишины, ТолькоПодключение);		
	Иначе		
		Подключается = Ложь;
	КонецЕсли;
	
	Возврат Подключается;	

КонецФункции

Функция ВыполнятьКриптографическиеОперацииНаКлиенте() Экспорт
	
	Возврат Истина;
		
КонецФункции

#КонецОбласти

#Область ЗагрузкаКодовМаркировкиИзФайла

Процедура ЗагрузитьКодыМаркировкиИзФайла(ФормаОбъекта, МножественнаяЗагрузка = Истина, НеПроверятьКорректностьКМ = Ложь) Экспорт
	
	ДиалогВыбораФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	ДиалогВыбораФайла.Заголовок 	= РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияЗаголовокВыборФайла();
	ДиалогВыбораФайла.Фильтр 		= "CSV (Comma-Separated Values)(*.csv)|*.csv";
	ДиалогВыбораФайла.ИндексФильтра = 0;
	ДиалогВыбораФайла.ПредварительныйПросмотр 	  = Ложь;
	ДиалогВыбораФайла.ПроверятьСуществованиеФайла = Истина;
	ДиалогВыбораФайла.МножественныйВыбор 		  = МножественнаяЗагрузка;
	
	ДопПараметры = Новый Структура();
	ДопПараметры.Вставить("ФормаОбъекта", ФормаОбъекта);
	ДопПараметры.Вставить("НеПроверятьКорректностьКМ", НеПроверятьКорректностьКМ);
	
	Оповещение = Новый ОписаниеОповещения("ВыборФайлаCSVЗавершение", ЭтотОбъект, ДопПараметры);
	ДиалогВыбораФайла.Показать(Оповещение);
		
КонецПроцедуры

Процедура ВыборФайлаCSVЗавершение(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	
	Если Не ВыбранныеФайлы = Неопределено Тогда
		
		МассивОшибок = Новый Массив();
		СведенияОВыбранныхДокументах = Новый Массив();
		
		ФормаОбъекта = ДополнительныеПараметры.ФормаОбъекта;
		НеПроверятьКорректностьКМ = ДополнительныеПараметры.НеПроверятьКорректностьКМ;
		
		Для Каждого ВыбранныйФайл Из ВыбранныеФайлы Цикл
			
			ПрочитанныйФайл = Новый ТекстовыйДокумент;
			ПрочитанныйФайл.Прочитать(ВыбранныйФайл);
			
			МассивКодовМаркировки = Новый Массив;
			ДанныеФайла = Новый Структура("ОбщееКоличество, ИмяДокумента, МассивКодов");
			ДанныеФайла.ОбщееКоличество = ВыбранныеФайлы.Количество();
			ДанныеФайла.ИмяДокумента	= ВыбранныйФайл;
			
			Для НомерСтроки = 1 По ПрочитанныйФайл.КоличествоСтрок() Цикл
				Штрихкод = ПрочитанныйФайл.ПолучитьСтроку(НомерСтроки);
				ДанныеШтрихкода = Новый Структура("ШтрихКод, ФорматBase64, Количество", Штрихкод, Ложь, 1);
				РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйКлиентСервер.ЗакодироватьШтрихкодДанныхBase64(ДанныеШтрихкода);
				
				Если Не РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйКлиентСервер.ПроверкаФорматаТранспортногоКодаПройденаУспешно(ДанныеШтрихкода, Истина, НеПроверятьКорректностьКМ) Тогда
					ТекстСообщения = НСтр("ru = 'В файле обнаружен транспортный код %1, не соответствующий формату.'");
					ТекстСообщения = ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(ТекстСообщения, Штрихкод);
					ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
					Продолжить;
				КонецЕсли;
				ВидПродукцииКода = РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйКлиентСервер.ПолучитьВидПродукцииИзКодаМаркировки(ДанныеШтрихкода);
				МассивКодовМаркировки.Добавить(ДанныеШтрихкода);
			КонецЦикла;
			
			ДанныеФайла.МассивКодов = МассивКодовМаркировки;
			СведенияОВыбранныхДокументах.Добавить(ДанныеФайла);
			
		КонецЦикла;
				
		СтруктураПараметров = Новый Структура("ФормаОбъекта, МассивОшибок, СведенияОВыбранныхДокументах, НеПроверятьКорректностьКМ", ФормаОбъекта, МассивОшибок, СведенияОВыбранныхДокументах, НеПроверятьКорректностьКМ);
		
		Если ИнтеграцияИСМПТКВызовСервера.ИспользоватьАвтоОпределениеЛогистическихКодовИСМПТК() 
			И НЕ ФормаОбъекта.ИмяФормы = ОбщегоНазначенияИСМПТКВызовСервера.ПолучитьИмяФормыСверкаВходящийАктИСМПТ() //Форма сверки - не поддерживает запрос состава упаковок 
			И СтрНайти(ФормаОбъекта.ИмяФормы, "ИСЦЭДМ") = 0 Тогда //В Документах ИС ЦЭДМ не используем 
			
			ЗавершениеПолучитьДанныеПоГрупповымКодамМаркировки = Новый ОписаниеОповещения("ЗагрузитьКодыМаркировкиИзФайлаЗавершение", ЭтотОбъект, СтруктураПараметров);
			
			СтруктурныеЕдиницы = Новый Соответствие;
			Если ФормаОбъекта.ИмяФормы = ОбщегоНазначенияИСМПТКВызовСервера.ПолучитьИмяФормыРабочееМестоПолучениеИнформацииОВладельцеИСостоянииКМ() Тогда
				СтруктурныеЕдиницы.Вставить(ФормаОбъекта.Организация, "");
			Иначе
				СтруктурныеЕдиницы.Вставить(ФормаОбъекта.Объект.Организация, "");
			КонецЕсли;
			
			ПолучитьКлючАвторизации(ЗавершениеПолучитьДанныеПоГрупповымКодамМаркировки, СтруктурныеЕдиницы);
		Иначе
			ЗагрузитьКодыМаркировкиИзФайлаЗавершение(Неопределено, СтруктураПараметров);
		КонецЕсли;
				
	КонецЕсли;

КонецПроцедуры

Процедура ЗагрузитьКодыМаркировкиИзФайлаЗавершение(РезультатВыполнения, СтруктураПараметров) Экспорт
	
	ПараметрыСканирования = РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйКлиент.ПараметрыСканирования(ЭтотОбъект);
	ТокенАвторизации = ?(ЗначениеЗаполнено(РезультатВыполнения), РезультатВыполнения, Неопределено);
	
	УникальныйИдентификатор = СтруктураПараметров.ФормаОбъекта.УникальныйИдентификатор;
	МассивОшибок = СтруктураПараметров.МассивОшибок;
	СведенияОВыбранныхДокументах = СтруктураПараметров.СведенияОВыбранныхДокументах;
	Если СтруктураПараметров.Свойство("НеПроверятьКорректностьКМ") Тогда
		НеПроверятьКорректностьКМ = СтруктураПараметров.НеПроверятьКорректностьКМ;
	Иначе
		НеПроверятьКорректностьКМ = Ложь;
	КонецЕсли;
	ПараметрыДобавленияКодов = Новый Структура("УникальныйИдентификатор, МассивОшибок, СведенияОВыбранныхДокументах", УникальныйИдентификатор, МассивОшибок, СведенияОВыбранныхДокументах);
	
	ДлительнаяОперация = РаботаСДокументамиИСМПТКВызовСервера.ВыполнитьДобавлениеКМИзФайлаВФоне(ПараметрыДобавленияКодов, ПараметрыСканирования, ТокенАвторизации, НеПроверятьКорректностьКМ);
	
	ПараметрыОжидания = ОбщегоНазначенияИСМПТККлиентПереопределяемый.ПараметрыОжидания(СтруктураПараметров.ФормаОбъекта);
	ПараметрыОжидания.ВыводитьПрогрессВыполнения = Истина;
	ПараметрыОжидания.Интервал = 2;
	
	ОбщегоНазначенияИСМПТККлиентПереопределяемый.ОжидатьЗавершение(ДлительнаяОперация, Новый ОписаниеОповещения("ВыполнитьПроцедуруФоновоВыполнено", СтруктураПараметров.ФормаОбъекта), ПараметрыОжидания);
	
КонецПроцедуры

Процедура ПолучитьКлючАвторизации(СобытиеПослеАвторизации, СтруктурныеЕдиницы, ОповещениеПриОшибке = Ложь)
	
	ПараметрыФормы = Новый Структура("СписокСтруктурныхЕдиниц, ТребуетсяВыборСертификата", СтруктурныеЕдиницы, Истина);
    ИнтерфейсИСМПТККлиент.ПроверитьТокенИВыбратьКлючПриНебходимостиИСМПТ(СобытиеПослеАвторизации, ПараметрыФормы, СтруктурныеЕдиницы, ОповещениеПриОшибке);
	
КонецПроцедуры

#КонецОбласти 

#Область ЗагрузкаКодовМаркировкиИзТСД

Процедура ЗагрузитьКодыМаркировкиИзТСДЗавершение(РезультатВыполнения, СтруктураПараметров) Экспорт
	
	ПараметрыСканирования 	 = РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйКлиент.ПараметрыСканирования(ЭтотОбъект);
	ТокенАвторизации 		 = ?(ЗначениеЗаполнено(РезультатВыполнения), РезультатВыполнения, Неопределено);
	
	УникальныйИдентификатор  = СтруктураПараметров.ФормаОбъекта.УникальныйИдентификатор;
	ПараметрыДобавленияКодов = Новый Структура("МассивКодовМаркировки, УникальныйИдентификатор", СтруктураПараметров.МассивКодовМаркировки, УникальныйИдентификатор);
	
	ДлительнаяОперация 		 = РаботаСДокументамиИСМПТКВызовСервера.ВыполнитьДобавлениеКМИзТСДВФоне(ПараметрыДобавленияКодов, ПараметрыСканирования, ТокенАвторизации);
	
	ПараметрыОжидания = ИнтеграцияИСМПТККлиентПереопределяемый.ПолучитьПараметрыОжиданияФоновогоЗадачния(СтруктураПараметров.ФормаОбъекта);
	ПараметрыОжидания.ВыводитьПрогрессВыполнения = Истина;
	ПараметрыОжидания.Интервал = 2;
	
	ИнтеграцияИСМПТККлиентПереопределяемый.ОжидатьЗавершениеФоновогоЗадания(ДлительнаяОперация, Новый ОписаниеОповещения("ВыполнитьПроцедуруФоновоВыполнено", СтруктураПараметров.ФормаОбъекта), ПараметрыОжидания);
		
КонецПроцедуры 

#КонецОбласти

#Область ГрупповаяОбработкаШтрихкодов

Процедура ЗавершениеПолучитьДанныеПоГрупповомуКодуМаркировки_Общая(Форма, РезультатВыполнения, Параметры) Экспорт
	
	//Параметры - СтруктураКодовМаркировки, где:
	//КодМаркировки - Строка Base64, полный КМ
	//КодИдентификации - Строка, нормализованный КМ
	
	Объект = Форма.Объект;
	ТокенАвторизации = ?(ЗначениеЗаполнено(РезультатВыполнения), РезультатВыполнения, Неопределено);
	КодИдентификации = Параметры.КодИдентификации;
	
	//Уточним вид упаковки по уровню
	ВидУпаковки = ИнтеграцияИСМПТКВызовСервера.ЗапроситьУровеньАгрегированногоКода(Параметры.КодМаркировки, Объект.Организация, ТокенАвторизации);
	
	//Не корректно распознана транспортная упаковка, такое возможно для альтернативного табака
	Если Не ВидУпаковки = ПредопределенноеЗначение("Перечисление.ВидыУпаковокИСМПТК.Неопределен") И 
		Не Параметры.ВидУпаковки = ВидУпаковки Тогда 
		
		СтруктураЗапрос 	   = Новый Структура("Штрихкод, ВидУпаковки, ВидПродукции, ФорматBase64", Параметры.КодМаркировки, ВидУпаковки, Параметры.ВидПродукции, Истина);
		ДанныеПоАгрегированномуКоду = ИнтеграцияИСМПТКВызовСервера.ЗапроситьДанныеПоКодуАгрегации(СтруктураЗапрос, Объект.Организация, ТокенАвторизации);
		
		Если ЗначениеЗаполнено(ДанныеПоАгрегированномуКоду.ТекстОшибки) Тогда
			ЗавершениеПолучитьДанныеПоГрупповомуКодуМаркировки_СообщитьОбОшибке(Форма, Параметры);
		Иначе 
			ЗавершениеПолучитьДанныеПоГрупповомуКодуМаркировки_ПродолжитьПослеПроверки(Форма, РезультатВыполнения, Параметры, ДанныеПоАгрегированномуКоду, Параметры.КодМаркировки, Ложь, Истина);
		КонецЕсли;
	
	ИначеЕсли ОбщегоНазначенияИСМПТКВызовСервера.ПроверитьЗначениеКонстанты("ПоддержкаДвойногоФорматаТранспортныхКодовИСМПТК")
		И Параметры.ВидУпаковки = ПредопределенноеЗначение("Перечисление.ВидыУпаковокИСМПТК.Логистическая") Тогда //Усложненная проверка требуется только для кода SSCC
		//На сервере ИС МПТ присутствует ошибка из-за которой транспортные коды SSCC обувной продукции принимаются только в формате 18-значной строки,
		//т.е. без идентификатора 00 в начале. Для остальных ТГ принимается корректный, сформированный по международным правилам 20-значный SSCC.
		//В связи с этим поддерживаем оба формата кода: запрашиваем с сервера код в двух видах - 18 и 20 символьный - и заполняем в ТЧ тот вариант, 
		//по которому с сервера вернулась информация об агрегации.

			
		//Формируем список SSCC в разных форматах
		Если СтрДлина(КодИдентификации) = 20 Тогда
			ПреобразованныйКод = Сред(КодИдентификации, 3); //18-значный SSCC
			ДополнительныйКод  = Неопределено;
		ИначеЕсли СтрДлина(КодИдентификации) = 18 Тогда
			ПреобразованныйКод = "00"   + КодИдентификации;
			ДополнительныйКод  = "(00)" + КодИдентификации;
		Иначе
			ПреобразованныйКод = Неопределено;
			ДополнительныйКод  = Неопределено;
		КонецЕсли;
		
		МассивКМДляПроверки = Новый Массив();
		МассивКМДляПроверки.Добавить(КодИдентификации);
		Если НЕ ПреобразованныйКод = Неопределено Тогда
			МассивКМДляПроверки.Добавить(ПреобразованныйКод);
		КонецЕсли;
		Если НЕ ДополнительныйКод = Неопределено Тогда
			МассивКМДляПроверки.Добавить(ДополнительныйКод);
		КонецЕсли;
		
		УдалосьПолучитьСоставАгрегации = Ложь;
		//Начинаем опрос сервера по каждому из сформированных кодов для проверки
		Для Каждого КодSSCC Из МассивКМДляПроверки Цикл
			СтруктураЗапрос 	   = Новый Структура("Штрихкод, ВидУпаковки, ВидПродукции, ФорматBase64", КодSSCC, Параметры.ВидУпаковки, Параметры.ВидПродукции, Ложь); //общие параметры у кодов одинаковые
			ДанныеПоГрупповомуКоду = ИнтеграцияИСМПТКВызовСервера.ЗапроситьДанныеПоКодуАгрегации(СтруктураЗапрос, Объект.Организация, ТокенАвторизации);	
			
			Если Не ЗначениеЗаполнено(ДанныеПоГрупповомуКоду.ТекстОшибки) Тогда
				//Если по коду вернулась информация, значит нужно использовать этот формат для заполнения таблицы документа
				УдалосьПолучитьСоставАгрегации = Истина;
				ЗавершениеПолучитьДанныеПоГрупповомуКодуМаркировки_ПродолжитьПослеПроверки(Форма, РезультатВыполнения, Параметры, ДанныеПоГрупповомуКоду, КодSSCC, УдалосьПолучитьСоставАгрегации);	
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если Не УдалосьПолучитьСоставАгрегации Тогда
			ЗавершениеПолучитьДанныеПоГрупповомуКодуМаркировки_СообщитьОбОшибке(Форма, Параметры);
		КонецЕсли;
	Иначе
		СтруктураЗапрос 	   = Новый Структура("Штрихкод, ВидУпаковки, ВидПродукции, ФорматBase64", КодИдентификации, Параметры.ВидУпаковки, Параметры.ВидПродукции, Ложь);
		ДанныеПоГрупповомуКоду = ИнтеграцияИСМПТКВызовСервера.ЗапроситьДанныеПоКодуАгрегации(СтруктураЗапрос, Объект.Организация, ТокенАвторизации);
		
		Если ЗначениеЗаполнено(ДанныеПоГрупповомуКоду.ТекстОшибки) Тогда
			ЗавершениеПолучитьДанныеПоГрупповомуКодуМаркировки_СообщитьОбОшибке(Форма, Параметры);
		Иначе 
			ЗавершениеПолучитьДанныеПоГрупповомуКодуМаркировки_ПродолжитьПослеПроверки(Форма, РезультатВыполнения, Параметры, ДанныеПоГрупповомуКоду, КодИдентификации, Ложь);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

Процедура ЗавершениеПолучитьДанныеПоГрупповомуКодуМаркировки_СообщитьОбОшибке(Форма, Параметры)
	
	Объект = Форма.Объект;
	ТекстОшибки = НСтр("ru = 'Не удалось получить информацию по коду упаковки с сервера. Уточните данные вручную.'");
	ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстОшибки);
	//Открываем форму для ручного уточнения данных упаковки
	ПараметрыОткрытияФормы = Новый Структура("Номенклатура, СтруктураКодовМаркировки, Организация, ИнФСистема", 
											 ИнтеграцияИСМПТКПереопределяемый.ПолучитьПустуюСсылкуНоменклатура(), 
											 Параметры, 
											 Объект.Организация);
	ОткрытьФорму("ОбщаяФорма.ФормаУточненияДанныхИСМПТК", ПараметрыОткрытияФормы, Форма,,,, Новый ОписаниеОповещения("ЗавершитьДобавлениеКодаМаркировки", Форма), РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

Процедура ЗавершениеПолучитьДанныеПоГрупповомуКодуМаркировки_ПродолжитьПослеПроверки(Форма, РезультатВыполнения, Параметры, ДанныеПоГрупповомуКоду, КодИдентификации, ВыполнялосьПреобразованиеКМ, ФорматBase64 = Ложь)
	
	Объект = Форма.Объект;
	СтруктураКода = ИнтеграцияИСМПТКВызовСервера.ПолучитьИнформациюПоГрупповомуКоду(ДанныеПоГрупповомуКоду, КодИдентификации, Параметры.ВидУпаковки, ФорматBase64);
	
	//Заменяем данные в ТЧ по результату разбора данных сервера
	Параметры.GTIN 		   = СтруктураКода.GTIN;
	Параметры.GTINВерхнегоУровня = СтруктураКода.GTINВерхнегоУровня;
	Параметры.EAN 		   = СтруктураКода.EAN;
	Параметры.Количество   = СтруктураКода.Количество;
	Параметры.ВидПродукции = СтруктураКода.ВидПродукции;
	ЭтоГрупповаяУпаковка   = СтруктураКода.ВидУпаковки = ПредопределенноеЗначение("Перечисление.ВидыУпаковокИСМПТК.Групповая");
	
	Номенклатура = СтруктураКода.Номенклатура;
	
	Параметры.Вставить("Номенклатура",	   Номенклатура);
	Параметры.Вставить("КодИдентификации", КодИдентификации); 
	Параметры.Вставить("ВыполнялосьПреобразованиеКМ", ВыполнялосьПреобразованиеКМ);
	Форма.ДобавитьКодМаркировкиВДерево(Номенклатура, Параметры);
	
	НоваяСтрока = Объект.Марки.Добавить();
	
	НоваяСтрока.Номенклатура = Параметры.Номенклатура;
	НоваяСтрока.Количество 	 = Параметры.Количество;
	НоваяСтрока.ВидУпаковки	 = Параметры.ВидУпаковки;
	НоваяСтрока.ВидПродукции = Параметры.ВидПродукции;
	НоваяСтрока.GTINВерхнегоУровня	= ?(ЭтоГрупповаяУпаковка, Параметры.GTINВерхнегоУровня, "");
	НоваяСтрока.GTIN = ?(ЗначениеЗаполнено(Параметры.GTINВерхнегоУровня) И Не ЭтоГрупповаяУпаковка, Параметры.GTINВерхнегоУровня, Параметры.GTIN);
	
	Если ВыполнялосьПреобразованиеКМ Тогда
		НоваяСтрока.КодМаркировки    = РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйКлиентСервер.ШтрихкодВBase64(КодИдентификации);
		НоваяСтрока.КодИдентификации = КодИдентификации;
		НоваяСтрока.EAN 			 = КодИдентификации;
	Иначе
		НоваяСтрока.КодМаркировки    = Параметры.КодМаркировки;
		НоваяСтрока.КодИдентификации = Параметры.КодИдентификации;
		НоваяСтрока.EAN 			 = РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйКлиентСервер.EANПоGTIN(НоваяСтрока.GTIN);
	КонецЕсли;
	
	Если ИнтеграцияИСМПТКВызовСервера.ИспользоватьАвтоПроверкаВалидностиКодаИСМПТК() Тогда
		ДополнительныеПараметры = Новый Структура("КодИдентификации", НоваяСтрока.КодИдентификации);
		Форма.ТокенАвторизацииВрем = Неопределено;
		//отложено: вывод сообщения с результатом запроса статуса
		ЗавершениеПроверитьСостояниеКМПриДобавленииНаСервере = Новый ОписаниеОповещения("ЗавершениеПроверитьСостояниеКМПриДобавленииНаСервере", Форма, ДополнительныеПараметры);
		
		СтруктурныеЕдиницы = Новый Соответствие;
		СтруктурныеЕдиницы.Вставить(Объект.Организация, "");
		//предварительный запрос токена
		ПолучитьКлючАвторизации(ЗавершениеПроверитьСостояниеКМПриДобавленииНаСервере, СтруктурныеЕдиницы, Истина);
		
	КонецЕсли;
	
	Форма.Модифицированность = Истина;
	Форма.СформироватьДеревоКодовМаркировки();
	
КонецПроцедуры

#КонецОбласти