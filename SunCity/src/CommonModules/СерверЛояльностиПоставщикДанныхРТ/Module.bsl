///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2022, ООО 1С-Софт
// Все права защищены. Эта программа и сопроводительные материалы предоставляются 
// в соответствии с условиями лицензии Attribution 4.0 International (CC BY 4.0)
// Текст лицензии доступен по ссылке:
// https://creativecommons.org/licenses/by/4.0/legalcode
///////////////////////////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Проверяет использование подсистемы "Сервис лояльности"
//
// Параметры:
//  Ответ - HTTPСервисОтвет.
//  Результат - Булево - Истина, если Сервис лояльности используется, Ложь - если не используется.
//
Процедура ИспользоватьСерверЛояльности(Ответ, Результат) Экспорт
	
	ИспользоватьСерверЛояльности = Константы.ИспользоватьСерверЛояльностиПоставщикДанных.Получить();
	Если Не ИспользоватьСерверЛояльности Тогда
		Ответ.УстановитьТелоИзСтроки(НСтр("ru = 'Использование Сервиса лояльности отключено в настройках программы'"));
	КонецЕсли;
	
	Результат = ИспользоватьСерверЛояльности;
	
КонецПроцедуры

// Заполняет бонусную программу по дисконтной карте покупателя
//
// Параметры:
//  ДисконтнаяКарта - ОпределяемыйТип.КартаЛояльностиСерверЛояльности - 
//                    карта лояльности, по которой будут заполнены данные о бонусах
//  БонуснаяПрограмма - ОпределяемыйТип.БонуснаяПрограммаСерверЛояльности - Бонусная программа лояльности
//
Процедура ЗаполнитьБонуснуюПрограммуПоДисконтнойКарте(ДисконтнаяКарта, БонуснаяПрограммаЛояльности) Экспорт
	
	БонуснаяПрограммаЛояльности = ДисконтнаяКарта.БонуснаяПрограммаЛояльности;
	
КонецПроцедуры

// Заполняет структуру ответа Сервиса лояльности данными об остатках бонусны баллов
//
// Параметры:
//  ДисконтнаяКарта - ОпределяемыйТип.КартаЛояльностиСерверЛояльности
//  СтруктураОтвета - Структура
//
Процедура ЗаполнитьДанныеОБонусах(ДисконтнаяКарта, СтруктураОтвета) Экспорт
	
	ОстаткиБонусныхБаллов = ПолучитьБонусыКлиента(ДисконтнаяКарта);
	БонусныеБаллыРезерв   = СерверЛояльностиПоставщикДанных.ПолучитьБонусныеБаллыРезерв(ДисконтнаяКарта);
	Если ОстаткиБонусныхБаллов.Количество() Тогда 
		БонуснаяПрограммаЛояльности = ДисконтнаяКарта.БонуснаяПрограммаЛояльности;
		
		Если ЗначениеЗаполнено(БонуснаяПрограммаЛояльности) Тогда
			СтруктураОтвета.BonusRate = БонуснаяПрограммаЛояльности.КурсКонвертацииБонусовВВалюту;
			СтруктураОтвета.PaymentPercent = БонуснаяПрограммаЛояльности.МаксимальныйПроцентОплатыБонусами;
		КонецЕсли;
		
		Для Каждого СтрокаТаблицы Из ОстаткиБонусныхБаллов Цикл
			Если СтрокаТаблицы.ТекущийОстаток Тогда 
				//Проверяем ситуацию когда бонусных баллов в резерве может быть больше чем на остатке,
				//в этом случае возвращаем 0
				Если БонусныеБаллыРезерв > СтрокаТаблицы.Сумма Тогда
					СтруктураОтвета.BonusCount = 0;
				Иначе
					СтруктураОтвета.BonusCount = СтрокаТаблицы.Сумма - БонусныеБаллыРезерв;
				КонецЕсли
			Иначе
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

// Заполняет структуру ответа Сервера лояльности данными об оборотах продаж
//
// Параметры:
//  ДисконтнаяКарта - ОпределяемыйТип.КартаЛояльностиСерверЛояльности - 
//                    карта лояльности, по которой будут заполнены данные о бонусах
//  СтруктураОтвета - Структура - см. СерверЛояльностиПоставщикДанных.ПолучитьСтруктуруОтвета
//
Процедура ЗаполнитьДанныеОбОборотахПродаж(ДисконтнаяКарта, СтруктураОтвета) Экспорт
	
	ОборотыПродаж = ПолучитьОборотыПродажКлиента(ДисконтнаяКарта);
	СтруктураОтвета.SellCount = ОборотыПродаж;
	
КонецПроцедуры

// Выполняет обработку состояния бонусов клиентов
// Происходит проверка наличия заблокированных бонусов клиентов
// Если такие найдены и время экспирации для них истекло - происходит разблокировка
Процедура ОбработкаСостоянияБонусов() Экспорт
	
	РегламентРазблокировки = РегламентныеЗадания.НайтиПредопределенное(Метаданные.РегламентныеЗадания.СерверЛояльностиОбработкаСостоянияБонусовПодарочныхСертификатов);
	ВремяЭкспирации = РегламентРазблокировки.Расписание.ПериодПовтораВТечениеДня;
	
	Если Не РегламентРазблокировки.Использование И ВремяЭкспирации = 0 Тогда 
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	СостояниеБонусовСерверЛояльности.ДисконтнаяКарта КАК ДисконтнаяКарта,
		|	СостояниеБонусовСерверЛояльности.ДатаБлокировки КАК ДатаБлокировки,
		|	NULL КАК ПодарочныйСертификат,
		|	NULL КАК СерийныйНомер
		|ИЗ
		|	РегистрСведений.СостояниеБонусовСерверЛояльности КАК СостояниеБонусовСерверЛояльности
		|ГДЕ
		|	СостояниеБонусовСерверЛояльности.ДатаБлокировки <= &ДатаЭкспирации
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	NULL,
		|	СостояниеПодарочныхСертификатовСерверЛояльности.ДатаБлокировки,
		|	СостояниеПодарочныхСертификатовСерверЛояльности.ПодарочныйСертификат,
		|	СостояниеПодарочныхСертификатовСерверЛояльности.СерийныйНомер
		|ИЗ
		|	РегистрСведений.СостояниеПодарочныхСертификатовСерверЛояльности КАК СостояниеПодарочныхСертификатовСерверЛояльности
		|ГДЕ
		|	СостояниеПодарочныхСертификатовСерверЛояльности.ДатаБлокировки <= &ДатаЭкспирации";
	
	ДатаЭкспирации = ТекущаяДатаСеанса() - ВремяЭкспирации;
	Запрос.УстановитьПараметр("ДатаЭкспирации", ДатаЭкспирации);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Попытка
		Пока Выборка.Следующий() Цикл
			
			Если ЗначениеЗаполнено(Выборка.ДисконтнаяКарта) Тогда 
				СерверЛояльностиПоставщикДанных.РазблокироватьБонусы(Выборка.ДисконтнаяКарта);
			КонецЕсли;
			
			Если ЗначениеЗаполнено(Выборка.ПодарочныйСертификат) Тогда 
				ДанныеСертификата = Новый Структура;
				ДанныеСертификата.Вставить("ПодарочныйСертификат", Выборка.ПодарочныйСертификат);
				ДанныеСертификата.Вставить("СерийныйНомер", Выборка.СерийныйНомер);
				СерверЛояльностиПоставщикДанных.РазблокироватьПодарочныйСертификат(ДанныеСертификата);	
			КонецЕсли;
			
		КонецЦикла;
	Исключение
		ОписаниеОшибки = ОписаниеОшибки();
		ЖурналРегистрации.ДобавитьСообщениеДляЖурналаРегистрации("СерверЛояльности.ОбработкаСостоянияБонусовИПодарочныхСертификатов",,,,ОписаниеОшибки);
	КонецПопытки;
	
КонецПроцедуры

// Производит поиск карты клиента по параметрам, полученным через http-сервис
//
// Параметры: 
//  ПараметрыМетода - Структура - структура, содержащая в себе параметры клиента: ИдентификаторКартыКлиента, АдресЭП, НомерТелефона.
//  Результат - ОпределяяемыйТип.КартаЛояльностиСерверЛояльности, Неопределено - дисконтная карта клиента.
//
Процедура НайтиКартуКлиента(ПараметрыМетода, Результат = Неопределено) Экспорт
	
	ОбратныйНомерТелефона = ОбщегоНазначенияРМК.ПолучитьОбратныйНомерТелефонаБезКодаСтраны(ПараметрыМетода.НомерТелефона);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 1
		|	ВложенныйЗапрос.Ссылка КАК Ссылка,
		|	ВложенныйЗапрос.Приоритет КАК Приоритет
		|ИЗ
		|	(ВЫБРАТЬ РАЗЛИЧНЫЕ
		|		ИнформационныеКарты.Ссылка КАК Ссылка,
		|		1 КАК Приоритет
		|	ИЗ
		|		Справочник.ИнформационныеКарты КАК ИнформационныеКарты
		|	ГДЕ
		|		ИнформационныеКарты.КодКарты = &ИдентификаторКартыКлиента
		|		И НЕ ИнформационныеКарты.ПометкаУдаления
		|		И &ИдентификаторКартыКлиента <> """"
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|
		|	ВЫБРАТЬ
		|		ИнформационныеКарты.Ссылка КАК Ссылка,
		|		2 КАК Приоритет
		|	ИЗ
		|		Справочник.ИнформационныеКарты КАК ИнформационныеКарты
		|	ГДЕ
		|		ИнформационныеКарты.Наименование = &ИдентификаторКартыКлиента
		|		И НЕ ИнформационныеКарты.ПометкаУдаления
		|		И &ИдентификаторКартыКлиента <> """"
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		СпрИнформационныеКарты.Ссылка,
		|		1
		|	ИЗ
		|		РегистрСведений.Штрихкоды КАК Штрихкоды
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ИнформационныеКарты КАК СпрИнформационныеКарты
		|			ПО Штрихкоды.Владелец = СпрИнформационныеКарты.Ссылка
		|	ГДЕ
		|		&ИдентификаторКартыКлиента <> """"
		|		И Штрихкоды.Штрихкод = &ИдентификаторКартыКлиента
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		ИнформационныеКартыКонтактнаяИнформация.Ссылка,
		|		3
		|	ИЗ
		|		Справочник.ИнформационныеКарты.КонтактнаяИнформация КАК ИнформационныеКартыКонтактнаяИнформация
		|	ГДЕ
		|		&АдресЭП <> """"
		|		И ИнформационныеКартыКонтактнаяИнформация.АдресЭП = &АдресЭП
		|		И ИнформационныеКартыКонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты)
		|		И НЕ ИнформационныеКартыКонтактнаяИнформация.Ссылка.ПометкаУдаления
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		ИнформационныеКартыКонтактнаяИнформация.Ссылка,
		|		3
		|	ИЗ
		|		Справочник.ИнформационныеКарты.КонтактнаяИнформация КАК ИнформационныеКартыКонтактнаяИнформация
		|	ГДЕ
		|		&ОбратныйНомерТелефона <> """"
		|		И ИнформационныеКартыКонтактнаяИнформация.ОбратныйНомерТелефона = &ОбратныйНомерТелефона
		|		И ИнформационныеКартыКонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Телефон)
		|		И НЕ ИнформационныеКартыКонтактнаяИнформация.Ссылка.ПометкаУдаления
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		ИнформационныеКарты.Ссылка,
		|		4
		|	ИЗ
		|		Справочник.ИнформационныеКарты КАК ИнформационныеКарты
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ФизическиеЛица.КонтактнаяИнформация КАК ФизическиеЛицаКонтактнаяИнформация
		|			ПО ИнформационныеКарты.ВладелецКарты = ФизическиеЛицаКонтактнаяИнформация.Ссылка
		|				И (ФизическиеЛицаКонтактнаяИнформация.ОбратныйНомерТелефона = &ОбратныйНомерТелефона)
		|				И (&ОбратныйНомерТелефона <> """")
		|				И (ФизическиеЛицаКонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Телефон))
		|				И (НЕ ФизическиеЛицаКонтактнаяИнформация.Ссылка.ПометкаУдаления)
		|				И (НЕ ИнформационныеКарты.ПометкаУдаления)
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		ИнформационныеКарты.Ссылка,
		|		4
		|	ИЗ
		|		Справочник.ИнформационныеКарты КАК ИнформационныеКарты
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ФизическиеЛица.КонтактнаяИнформация КАК ФизическиеЛицаКонтактнаяИнформация
		|			ПО ИнформационныеКарты.ВладелецКарты = ФизическиеЛицаКонтактнаяИнформация.Ссылка
		|				И (ФизическиеЛицаКонтактнаяИнформация.АдресЭП = &АдресЭП)
		|				И (&АдресЭП <> """")
		|				И (ФизическиеЛицаКонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты))
		|				И (НЕ ФизическиеЛицаКонтактнаяИнформация.Ссылка.ПометкаУдаления)
		|				И (НЕ ИнформационныеКарты.ПометкаУдаления)
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		ИнформационныеКарты.Ссылка,
		|		5
		|	ИЗ
		|		Справочник.ИнформационныеКарты КАК ИнформационныеКарты
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Контрагенты.КонтактнаяИнформация КАК КонтрагентыКонтактнаяИнформация
		|			ПО ИнформационныеКарты.ВладелецКарты = КонтрагентыКонтактнаяИнформация.Ссылка
		|				И (КонтрагентыКонтактнаяИнформация.ОбратныйНомерТелефона = &ОбратныйНомерТелефона)
		|				И (&ОбратныйНомерТелефона <> """")
		|				И (КонтрагентыКонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Телефон))
		|				И (НЕ КонтрагентыКонтактнаяИнформация.Ссылка.ПометкаУдаления)
		|				И (НЕ ИнформационныеКарты.ПометкаУдаления)
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		ИнформационныеКарты.Ссылка,
		|		5
		|	ИЗ
		|		Справочник.ИнформационныеКарты КАК ИнформационныеКарты
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Контрагенты.КонтактнаяИнформация КАК КонтрагентыКонтактнаяИнформация
		|			ПО ИнформационныеКарты.ВладелецКарты = КонтрагентыКонтактнаяИнформация.Ссылка
		|				И (КонтрагентыКонтактнаяИнформация.АдресЭП = &АдресЭП)
		|				И (&АдресЭП <> """")
		|				И (КонтрагентыКонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты))
		|				И (НЕ КонтрагентыКонтактнаяИнформация.Ссылка.ПометкаУдаления)
		|				И (НЕ ИнформационныеКарты.ПометкаУдаления)) КАК ВложенныйЗапрос
		|
		|УПОРЯДОЧИТЬ ПО
		|	ВложенныйЗапрос.Приоритет";
	
	Запрос.УстановитьПараметр("ИдентификаторКартыКлиента", ПараметрыМетода.ИдентификаторКартыКлиента);
	Запрос.УстановитьПараметр("АдресЭП", ПараметрыМетода.АдресЭП);
	Запрос.УстановитьПараметр("ОбратныйНомерТелефона", ОбратныйНомерТелефона);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Если Выборка.Следующий() Тогда
		Результат = Выборка.Ссылка;
	КонецЕсли;
	
КонецПроцедуры

// Получает код валюты
//
// Параметры:
//  КодВалюты - Строка - код валюты.
//
Процедура ПолучитьКодВалюты(КодВалюты = "") Экспорт
	
	КодВалюты = ОбщегоНазначенияРТКлиентСервер.КодВалюты();
	
КонецПроцедуры

// Создает карты клиента
//
// Параметры:
//  ДанныеКарты - Структура - содержит данные карты, исходя из которых система создаст элемент справочника
//  Результат - ОпределяемыйТип.КартаЛояльностиСерверЛояльности, Неопределено - содержит значение,
//				в котором будет храниться ссылка на созданную карту лояльности.
//
Процедура СоздатьКартуКлиента(ДанныеКарты, Результат = Неопределено, ДругойКлиент = Неопределено) Экспорт
	
	КартаЛояльности = Справочники.ИнформационныеКарты.ПустаяСсылка(); 
	
	НачатьТранзакцию();
	Попытка
		РезультатПолучения = ПолучитьВладельцаКарты(ДанныеКарты);
		Если РезультатПолучения.СтатусПолучения = "занят" Тогда
			ДругойКлиент = РезультатПолучения.ВладелецКарты;
		Иначе
			ПараметрыШаблона = ПолучитьПараметрыШаблонаКарты(ДанныеКарты);
			ПараметрыШаблона.Вставить("ВладелецКарты", РезультатПолучения.ВладелецКарты);
			ПараметрыШаблона.Вставить("НомерТелефона", ДанныеКарты.НомерТелефона);
			ПараметрыШаблона.Вставить("АдресЭП"		 , ДанныеКарты.АдресЭП);
		
			СтруктураКарты 	 = ИнформационныеКартыВызовСервера.НоваяДисконтнаяКарта(ПараметрыШаблона);
			КартаЛояльности = СтруктураКарты.Карта;
		КонецЕсли;
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		Описание = ОписаниеОшибки();
		ЖурналРегистрации.ДобавитьСообщениеДляЖурналаРегистрации("СерверЛояльности.СозданиеКартыКлиента",,,,Описание);
	КонецПопытки;
	
	Результат = КартаЛояльности;
	
КонецПроцедуры

// Заполняет структуру ответа http-сервиса данными дисконтной карты
//
// Параметры:
//  ДисконтнаяКарта - ОпределяемыйТип.КартаЛояльностиСерверЛояльности
//  СтруктураОтвета - Структура
//
Процедура ЗаполнитьСтруктуруОтветаДаннымиКарты(ДисконтнаяКарта, СтруктураОтвета, КартаСуществует = Ложь) Экспорт 
	
	СтруктураОтвета.CardID 		 = ПолучитьНомерКарты(ДисконтнаяКарта);
	СтруктураОтвета.CardRef 	 = XMLСтрока(ДисконтнаяКарта);
	СтруктураОтвета.Client 		 = Строка(ДисконтнаяКарта.ВладелецКарты);
	СтруктураОтвета.PhoneNumber  = ПолучитьНомерТелефонаВладельца(ДисконтнаяКарта.ВладелецКарты);
	СтруктураОтвета.Email 		 = ПолучитьАдресЭлектроннойПочтыВладельца(ДисконтнаяКарта.ВладелецКарты);
	СтруктураОтвета.ExistingCard = КартаСуществует;
	СтруктураОтвета.DateOfBirth	 = ПолучитьДатуРожденияВладельцаКарты(ДисконтнаяКарта.ВладелецКарты);
	
	БонуснаяПрограммаЛояльности = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДисконтнаяКарта, "БонуснаяПрограммаЛояльности");
	
	Если ЗначениеЗаполнено(БонуснаяПрограммаЛояльности) Тогда 
		СтруктураОтвета.BonusRate 		= БонуснаяПрограммаЛояльности.КурсКонвертацииБонусовВВалюту;
		СтруктураОтвета.PaymentPercent  = БонуснаяПрограммаЛояльности.МаксимальныйПроцентОплатыБонусами;
	КонецЕсли;
	
КонецПроцедуры

// Заполняет структуру ответа http-сервиса данными дисконтной карты
//
// Параметры:
//  Клиент - СправочникСсылка.ФизическиеЛица
//  СтруктураОтвета - Структура - см. СерверЛояльностиПоставщикДанных.ПолучитьСтруктуруОтвета
//
Процедура ЗаполнитьСтруктуруОтветаДаннымиКлиента(Клиент, СтруктураОтвета) Экспорт
	
	СтруктураОтвета.Client 		 = Строка(Клиент);
	СтруктураОтвета.PhoneNumber  = ПолучитьНомерТелефонаВладельца(Клиент);
	СтруктураОтвета.Email 		 = ПолучитьАдресЭлектроннойПочтыВладельца(Клиент);
	СтруктураОтвета.ExistingCard = Истина;
	СтруктураОтвета.DateOfBirth  = ПолучитьДатуРожденияВладельцаКарты(Клиент);
	СтруктураОтвета.ElseClient   = Истина;
	
КонецПроцедуры

// Производит поиск подарочного сертификата по параметрам, полученным через http-сервис
//
// Параметры:
//  ПараметрыМетода - Структура - структура, содержащая в себе параметры подарочного сертификата.
//  Результат - Неопределено.
//
Процедура НайтиПодарочныйСертификат(ПараметрыМетода, Результат) Экспорт
	
	ДанныеСертификата = Новый Структура;
	ДанныеСертификата.Вставить("СерийныйНомер"			, Неопределено);
	ДанныеСертификата.Вставить("ПодарочныйСертификат"	, Неопределено);
	
	Попытка
		ДанныеСертификата.СерийныйНомер = Справочники.СерийныеНомера.ПолучитьСсылку(Новый УникальныйИдентификатор(ПараметрыМетода.НомерСертификата));
		ДанныеСертификата.ПодарочныйСертификат = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеСертификата.СерийныйНомер, "Владелец");
	Исключение
		
		ВладелецСертификата = Справочники.Номенклатура.ПустаяСсылка();
		Если ПараметрыМетода.Свойство("ГУИДСертификата") И 
			ЗначениеЗаполнено(ПараметрыМетода.ГУИДСертификата) Тогда
			
			ГУИДСертификата = Новый УникальныйИдентификатор(ПараметрыМетода.ГУИДСертификата);
			ВладелецСертификата = Справочники.Номенклатура.ПолучитьСсылку(ГУИДСертификата);
		КонецЕсли;
		Если ПараметрыМетода.Свойство("ПодарочныйСертификат") 
			И Не ЗначениеЗаполнено(ВладелецСертификата) Тогда
			
			ВладелецСертификата = ПараметрыМетода.ПодарочныйСертификат;
		КонецЕсли;
	
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
		|	СерийныеНомера.Ссылка КАК СерийныйНомер,
		|	СерийныеНомера.Владелец КАК ПодарочныйСертификат,
		|	1 КАК Приоритет
		|ИЗ
		|	Справочник.СерийныеНомера КАК СерийныеНомера
		|ГДЕ
		|	(СерийныеНомера.Код = &НомерСертификата
		|			ИЛИ СерийныеНомера.Наименование = &НомерСертификата)
		|	И НЕ СерийныеНомера.ПометкаУдаления
		|	И СерийныеНомера.Владелец = &ВладелецСертификата
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	СерийныеНомера.Ссылка,
		|	СерийныеНомера.Владелец,
		|	2
		|ИЗ
		|	Справочник.СерийныеНомера КАК СерийныеНомера
		|ГДЕ
		|	(СерийныеНомера.Код = &НомерСертификата
		|			ИЛИ СерийныеНомера.Наименование = &НомерСертификата)
		|	И НЕ СерийныеНомера.ПометкаУдаления
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ЗНАЧЕНИЕ(Справочник.СерийныеНомера.ПустаяСсылка),
		|	Номенклатура.Ссылка,
		|	2
		|ИЗ
		|	Справочник.Номенклатура КАК Номенклатура
		|ГДЕ
		|	(Номенклатура.Код = &НомерСертификата
		|			ИЛИ Номенклатура.Наименование = &НомерСертификата)
		|	И НЕ Номенклатура.ПометкаУдаления
		|	И Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.ПодарочныйСертификат)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ВЫРАЗИТЬ(Штрихкоды.Владелец КАК Справочник.СерийныеНомера),
		|	ВЫРАЗИТЬ(Штрихкоды.Владелец КАК Справочник.СерийныеНомера).Владелец,
		|	ВЫБОР
		|		КОГДА ВЫРАЗИТЬ(Штрихкоды.Владелец КАК Справочник.СерийныеНомера).Владелец.ТипСерийногоНомера = ЗНАЧЕНИЕ(Перечисление.ТипыСерийныхНомеровСертификатов.Магнитный)
		|			ТОГДА 3
		|		ИНАЧЕ 2
		|	КОНЕЦ
		|ИЗ
		|	РегистрСведений.Штрихкоды КАК Штрихкоды
		|ГДЕ
		|	Штрихкоды.Владелец ССЫЛКА Справочник.СерийныеНомера
		|	И Штрихкоды.Штрихкод = &НомерСертификата
		|
		|УПОРЯДОЧИТЬ ПО
		|	Приоритет";
		
		Запрос.УстановитьПараметр("НомерСертификата", ПараметрыМетода.НомерСертификата);
		Запрос.УстановитьПараметр("ВладелецСертификата", ВладелецСертификата);
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Если Выборка.Следующий() Тогда 
			ЗаполнитьЗначенияСвойств(ДанныеСертификата, Выборка);
		КонецЕсли;
	
	КонецПопытки;
	
	Результат = ДанныеСертификата;
	
КонецПроцедуры

// Возвращает данные о подарочном сертификате
//
// Параметры:
//  ДанныеСертификата - Структура - содержит данные подарочного сертификата.
//  СтруктураОтвета - Структура - содержит данные о балансе сертификата.
//
Процедура ПолучитьБалансПодарочногоСертификата(ДанныеСертификата, СтруктураОтвета) Экспорт
	
	ТекущаяДатаСеанса = ТекущаяДатаСеанса();
	СтруктураДанныхСертификата = РаботаСПодарочнымиСертификатами.ПолучитьСтруктуруДанныхСертификата(ДанныеСертификата.ПодарочныйСертификат,
		ДанныеСертификата.СерийныйНомер,, ТекущаяДатаСеанса);
	
	Если Не СтруктураДанныхСертификата.Статус = Справочники.АналитикаХозяйственныхОпераций.РеализацияТоваров Тогда
		СтруктураДанныхСертификата.Остаток = 0;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	СУММА(ПодарочныеСертификатыКСписаниюСерверЛояльности.КСписанию) КАК КСписанию,
		|	ПодарочныеСертификатыКСписаниюСерверЛояльности.ПодарочныйСертификат КАК ПодарочныйСертификат,
		|	ПодарочныеСертификатыКСписаниюСерверЛояльности.СерийныйНомер КАК СерийныйНомер
		|ПОМЕСТИТЬ ВТ_ПодарочныеСертификатыРезерв
		|ИЗ
		|	РегистрСведений.ПодарочныеСертификатыКСписаниюСерверЛояльности КАК ПодарочныеСертификатыКСписаниюСерверЛояльности
		|ГДЕ
		|	ПодарочныеСертификатыКСписаниюСерверЛояльности.ПодарочныйСертификат = &ПодарочныйСертификат
		|	И ПодарочныеСертификатыКСписаниюСерверЛояльности.СерийныйНомер = &СерийныйНомер
		|
		|СГРУППИРОВАТЬ ПО
		|	ПодарочныеСертификатыКСписаниюСерверЛояльности.ПодарочныйСертификат,
		|	ПодарочныеСертификатыКСписаниюСерверЛояльности.СерийныйНомер
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ПодарочныйСертификат,
		|	СерийныйНомер
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	&ПодарочныйСертификат КАК ПодарочныйСертификат,
		|	&СерийныйНомер КАК НомерСертификата,
		|	&Номинал КАК Номинал,
		|	&Остаток КАК Остаток
		|ПОМЕСТИТЬ ВТ_ОстаткиСертификата
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ВТ_ОстаткиСертификата.ПодарочныйСертификат КАК ПодарочныйСертификат,
		|	ВТ_ОстаткиСертификата.НомерСертификата КАК НомерСертификата,
		|	ВТ_ОстаткиСертификата.Номинал КАК Номинал,
		|	ВЫБОР
		|		КОГДА СостояниеПодарочныхСертификатов.ПодарочныйСертификат ЕСТЬ NULL
		|			ТОГДА ВЫБОР
		|					КОГДА ЕСТЬNULL(ВТ_ПодарочныеСертификатыРезерв.КСписанию, 0) > ВТ_ОстаткиСертификата.Остаток
		|						ТОГДА 0
		|					ИНАЧЕ ВТ_ОстаткиСертификата.Остаток - ЕСТЬNULL(ВТ_ПодарочныеСертификатыРезерв.КСписанию, 0)
		|				КОНЕЦ
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК Остаток,
		|	ВЫБОР
		|		КОГДА СостояниеПодарочныхСертификатов.ПодарочныйСертификат ЕСТЬ NULL
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК Заблокирован
		|ИЗ
		|	ВТ_ОстаткиСертификата КАК ВТ_ОстаткиСертификата
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СостояниеПодарочныхСертификатовСерверЛояльности КАК СостояниеПодарочныхСертификатов
		|		ПО ВТ_ОстаткиСертификата.ПодарочныйСертификат = СостояниеПодарочныхСертификатов.ПодарочныйСертификат
		|			И ВТ_ОстаткиСертификата.НомерСертификата = СостояниеПодарочныхСертификатов.СерийныйНомер
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ПодарочныеСертификатыРезерв КАК ВТ_ПодарочныеСертификатыРезерв
		|		ПО ВТ_ОстаткиСертификата.ПодарочныйСертификат = ВТ_ПодарочныеСертификатыРезерв.ПодарочныйСертификат
		|			И ВТ_ОстаткиСертификата.НомерСертификата = ВТ_ПодарочныеСертификатыРезерв.СерийныйНомер";
	
	Запрос.УстановитьПараметр("ДатаЗапроса"				, ТекущаяДатаСеанса);
	Запрос.УстановитьПараметр("ПодарочныйСертификат"	, ДанныеСертификата.ПодарочныйСертификат);
	Запрос.УстановитьПараметр("СерийныйНомер"			, ДанныеСертификата.СерийныйНомер);
	Запрос.УстановитьПараметр("Номинал"					, СтруктураДанныхСертификата.Номинал);
	Запрос.УстановитьПараметр("Остаток"					, СтруктураДанныхСертификата.Остаток);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Если Выборка.Следующий() Тогда 
		
		СтруктураОтвета.GiftCard.GiftCardName = Строка(Выборка.ПодарочныйСертификат);
		СтруктураОтвета.GiftCard.GiftCardRef  = XMLСтрока(Выборка.ПодарочныйСертификат);
		СтруктураОтвета.GiftCardNumber 		  = Строка(Выборка.НомерСертификата);
		СтруктураОтвета.GiftCardValue 		  = Выборка.Номинал;
		СтруктураОтвета.GiftCardBalance 	  = Выборка.Остаток;
		СтруктураОтвета.Blocked 	  		  = Выборка.Заблокирован;
		
		Если Константы.ИспользоватьСерверЛояльностиПоставщикДанных.Получить() Тогда
			СерверЛояльностиПоставщикДанных.ЗаблокироватьПодарочныйСертификат(ДанныеСертификата, ТекущаяДатаСеанса());
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Получает параметры шаблона карты клиента
//
// Параметры:
//  ДанныеКарты - Структура - содержит данные карты, исходя из которых система создаст элемент справочника
//  СтруктураШаблона - Структура - содержит данные шаблона регистрации дисконтных карт
//
Процедура ЗаполнитьПараметрыШаблонаКарты(ДанныеКарты, СтруктураШаблона) Экспорт
	
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
		|	ШаблоныРегистрацииНовыхКарт.ВидКарты КАК ВидКарты,
		|	ШаблоныРегистрацииНовыхКарт.ДлинаКода КАК ДлинаКода,
		|	ШаблоныРегистрацииНовыхКарт.НачалоДиапазона КАК НачалоДиапазона,
		|	ШаблоныРегистрацииНовыхКарт.КонецДиапазона КАК КонецДиапазона,
		|	ШаблоныРегистрацииНовыхКарт.ПроводитьОпросВладельцаПриРегистрации КАК ПроводитьОпросВладельцаПриРегистрации,
		|	ШаблоныРегистрацииНовыхКарт.ВидДисконтнойКарты КАК ВидДисконтнойКарты,
		|	ШаблоныРегистрацииНовыхКарт.ГруппаКарты КАК ГруппаКарты,
		|	ШаблоныРегистрацииНовыхКарт.НаименованиеШаблона КАК НаименованиеШаблона,
		|	ШаблоныРегистрацииНовыхКарт.БонуснаяПрограммаЛояльности КАК БонуснаяПрограммаЛояльности,
		|	ШаблоныРегистрацииНовыхКарт.ГруппаВладельцаКарты КАК ГруппаВладельцаКарты
		|ИЗ
		|	РегистрСведений.ШаблоныРегистрацииНовыхКарт КАК ШаблоныРегистрацииНовыхКарт
		|ГДЕ
		|	ВЫБОР
		|			КОГДА &КодКарты <> """"
		|				ТОГДА &КодКарты МЕЖДУ ШаблоныРегистрацииНовыхКарт.НачалоДиапазона И ШаблоныРегистрацииНовыхКарт.КонецДиапазона
		|			ИНАЧЕ ИСТИНА
		|		КОНЕЦ
		|	И ШаблоныРегистрацииНовыхКарт.БонуснаяПрограммаЛояльности <> ЗНАЧЕНИЕ(Справочник.БонусныеПрограммыЛояльности.ПустаяСсылка)";
	
	Запрос.УстановитьПараметр("КодКарты", ДанныеКарты.ИдентификаторКартыКлиента);
	
	РезультатЗапроса 		  = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи 	  = РезультатЗапроса.Выбрать();
	
	СтруктураШаблона 		  = ПолучитьСтруктуруШаблона();
	СтруктураШаблона.КодКарты = ДанныеКарты.ИдентификаторКартыКлиента;
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда 
		ЗаполнитьЗначенияСвойств(СтруктураШаблона, ВыборкаДетальныеЗаписи);
	КонецЕсли;
	
КонецПроцедуры

// Возвращает данные об использовании автоматических скидок
//
// Параметры:
//  Результат - Булево - Истина, автоматические скидки используются,
//						 Ложь, автоматические скидки не используются.
//
Процедура ИспользоватьАвтоматическиеСкидки(Результат) Экспорт
	
	Результат = Константы.ИспользоватьАвтоматическиеСкидкиВПродажах.Получить();
	
КонецПроцедуры

// Рассчитывает автоматические скидки
//
// Параметры:
//  ПараметрыРасчета - Структура - параметры расчета автоматических скидок, см. ДесериализоватьПараметрыРасчета()
//  Результат - Неопределено.
//
Процедура РассчитатьАвтоматическиеСкидки(ПараметрыРасчета, Результат) Экспорт
	
	СтруктураСкидок = СкидкиНаценкиСервер.ДеревоСкидокНаценок(ПараметрыРасчета, Неопределено); 
	ПараметрыРасчета.ТолькоСообщенияПослеОформления = Истина;
	СтруктураСкидокДополнительно = СкидкиНаценкиСервер.ДеревоСкидокНаценок(ПараметрыРасчета, Неопределено);
	СкидкиНаценкиСервер.ПрименитьРезультатРасчетаСкидокКОбъекту(ПараметрыРасчета, "Товары", СтруктураСкидок.ТаблицаСкидкиНаценки);
	СкидкиНаценкиСервер.ОкруглитьЧекВПользуПокупателя(ПараметрыРасчета, "Товары", "СкидкиНаценки");
	СериализованнаяСтруктураСкидок = СериализоватьРезультатРасчета(ПараметрыРасчета, "Товары"); 
	ТаблицаПодарков = СтруктураСкидок.ТаблицаПодарков;
	Если ТаблицаПодарков.Количество() <> 0 Тогда
		ДополнитьСтруктуруСкидокПодарками(СериализованнаяСтруктураСкидок, ТаблицаПодарков);
	КонецЕсли;
	
	ТаблицаСообщений = СтруктураСкидок.ТаблицаСообщений;
	ТаблицаСообщенийПослеПродажи = СтруктураСкидокДополнительно.ТаблицаСообщений;
	Если ТаблицаСообщений.Количество() > 0 Или ТаблицаСообщенийПослеПродажи.Количество() > 0 Тогда
		Для каждого СтрокаТаблицы Из ТаблицаСообщенийПослеПродажи Цикл
			НоваяСтрока = ТаблицаСообщений.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
		КонецЦикла;
		ДополнитьСтруктуруСкидокСообщениями(СериализованнаяСтруктураСкидок, ТаблицаСообщений);
	КонецЕсли;
	
	Если СтруктураСкидок.Свойство("ТаблицаСкидкиНаценки") Тогда
		
		ТаблицаСкидкиНаценки = СтруктураСкидок.ТаблицаСкидкиНаценки;
		
		// Заполним связь скидки со строкой таблицы товаров
		ТаблицаСкидкиНаценки.Колонки.Добавить("ИдентификаторСтроки", Новый ОписаниеТипов("Строка", , , Новый КвалификаторыСтроки(36)));
		Для Каждого СтрокаСкидки Из ТаблицаСкидкиНаценки Цикл
			Если ЗначениеЗаполнено(СтрокаСкидки.КлючСвязи) Тогда // Иначе, идентификатор строки не требуется
				СтрокиТоваровСкидки = ПараметрыРасчета.Товары.НайтиСтроки(Новый Структура("КлючСвязи", СтрокаСкидки.КлючСвязи));
				Если СтрокиТоваровСкидки.Количество() Тогда
					СтрокаСкидки.ИдентификаторСтроки = СтрокиТоваровСкидки[0].ИдентификаторСтроки;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		ДополнитьСтруктуруСкидокТаблицейСкидокНаценок(СериализованнаяСтруктураСкидок, ТаблицаСкидкиНаценки);
	КонецЕсли;
	
	Если СтруктураСкидок.Свойство("ДеревоСкидок") Тогда
		ТаблицаСкидок = Новый ТаблицаЗначений;
		ТаблицаСкидок = ДеревоЗначенийВТаблицуЗначений(СтруктураСкидок.ДеревоСкидок);
		ДополнитьСтруктуруСкидокДействующимиСкидками(СериализованнаяСтруктураСкидок, ТаблицаСкидок);
	КонецЕсли;
	
	Если СтруктураСкидок.Свойство("ТаблицаБонусов") Тогда
		ДополнитьСтруктуруСкидокТаблицейБонусов(СериализованнаяСтруктураСкидок, СтруктураСкидок.ТаблицаБонусов);
	КонецЕсли;
	
	Если ПараметрыРасчета.ВернутьДанныеКарты И ПараметрыРасчета.ДисконтныеКарты.Количество() > 0 Тогда
		ДополнитьСтруктуруСкидокДаннымиКарты(СериализованнаяСтруктураСкидок, ПараметрыРасчета.ДисконтныеКарты[0]);
	КонецЕсли;
	
	Результат = СериализованнаяСтруктураСкидок;
	
КонецПроцедуры

// Преобразует параметры расчета, полученные в формате JSON
// в структуру данных
//
// Параметры:
//  ВходящиеДанные - Структура - структура данных для расчета автоматических скидок.
//  Результат - Неопределено - результат десериализации входящих данных.
//
Процедура ДесериализоватьПараметрыРасчета(ВходящиеДанные, Результат) Экспорт
	
	ПараметрыРасчета = Новый Структура;
	ПараметрыРасчета.Вставить("ЕстьОшибки", Ложь);
	ПараметрыРасчета.Вставить("ОписаниеОшибки", "");
	
	Попытка
		
		ЧтениеJSON = Новый ЧтениеJSON();
		ЧтениеJSON.УстановитьСтроку(ВходящиеДанные);
		ВходящиеДанныеВJSON = ПрочитатьJSON(ЧтениеJSON,, "CurrentDate", ФорматДатыJSON.ISO);
		ЧтениеJSON.Закрыть();
		
		Если ПроверитьКорректностьВходящихДанных(ВходящиеДанныеВJSON, ПараметрыРасчета) Тогда 
			
			Регистратор = Документы.ЧекККМ.ПустаяСсылка();
			
			МассивДисконтныхКарт = ПолучитьДесериализованныйМассивДисконтныхКарт(ВходящиеДанныеВJSON, "LoyaltyCardsList");
			
			//Бонусная программа
			ДисконтнаяКарта = Справочники.ИнформационныеКарты.ПустаяСсылка();
			Если ЗначениеЗаполнено(МассивДисконтныхКарт) Тогда
				
				ДисконтнаяКарта = МассивДисконтныхКарт[0];
				
				БонуснаяПрограммаЛояльности = Неопределено;
				УменьшатьСуммуЧекаДляСкидок = Ложь;
				Если ЗначениеЗаполнено(ДисконтнаяКарта) Тогда
					ПараметрыРасчета.Вставить("ДеньРождения", МаркетинговыеАкцииСервер.БлижайшийДеньРождения(ВходящиеДанныеВJSON.CurrentDate, ДисконтнаяКарта.ВладелецКарты));
					БонуснаяПрограммаЛояльности = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДисконтнаяКарта, "БонуснаяПрограммаЛояльности");
					Если ЗначениеЗаполнено(БонуснаяПрограммаЛояльности) Тогда
						УменьшатьСуммуЧекаДляСкидок = БонуснаяПрограммаЛояльности.УменьшатьСуммуЧекаДляСкидок;
					КонецЕсли;
				КонецЕсли;
				
				Если ЗначениеЗаполнено(БонуснаяПрограммаЛояльности) Тогда
					ВходныеПараметры = Новый Структура;
					ВходныеПараметры.Вставить("ПрименятьКОбъекту", Истина);
					ВходныеПараметры.Вставить("ТолькоПредварительныйРасчет", Ложь);
					ВходныеПараметры.Вставить("БонуснаяПрограмма", БонуснаяПрограммаЛояльности);
					
					ПараметрыРасчета.Вставить("УменьшатьСуммуЧекаДляСкидокНаСуммуБонусов", УменьшатьСуммуЧекаДляСкидок);
					ПараметрыРасчета.Вставить("ВходныеПараметры", ВходныеПараметры);
				КонецЕсли;
				
			КонецЕсли;
			
			ПараметрыРасчета.Вставить("Товары", ПолучитьДесериализованнуюТаблицуТоваров(ВходящиеДанныеВJSON, "Goods"));
			ПараметрыРасчета.Вставить("ДисконтныеКарты", МассивДисконтныхКарт);
			ПараметрыРасчета.Вставить("ПолучателиСкидок", СформироватьМассивПолучателейСкидок(ПараметрыРасчета.ДисконтныеКарты));
			ПараметрыРасчета.Вставить("ДисконтнаяКартаПредъявлена", ПараметрыРасчета.ДисконтныеКарты.Количество() > 0);
			ПараметрыРасчета.Вставить("Магазин", ПолучитьДесериализованноеСсылочноеЗначение(ВходящиеДанныеВJSON, "RetailStore", "Справочники.Магазины"));
			ПараметрыРасчета.Вставить("РабочееМесто", Справочники.РабочиеМеста.ПустаяСсылка());
			ПараметрыРасчета.Вставить("ТекущаяДата", ВходящиеДанныеВJSON.CurrentDate);
			ПараметрыРасчета.Вставить("ТолькоСообщенияПослеОформления", Ложь);
			ПараметрыРасчета.Вставить("ТолькоПредварительныйРасчет", Ложь);
			ПараметрыРасчета.Вставить("РасчетПодарков", Ложь);
			ПараметрыРасчета.Вставить("РасчетСообщений", Ложь);
			ПараметрыРасчета.Вставить("УправляемыеСкидки", Неопределено);
			ПараметрыРасчета.Вставить("СегментИсключаемойНоменклатуры", Неопределено);
			ПараметрыРасчета.Вставить("Регистратор", Регистратор);
			ПараметрыРасчета.Вставить("ВидМинимальныхЦенПродажи", Справочники.ВидыЦен.ПустаяСсылка());
			ПараметрыРасчета.Вставить("СуммаДокумента", 0);
			ПараметрыРасчета.Вставить("СкидкиРассчитаны", Ложь);
			ПараметрыРасчета.Вставить("СкидкиНаценки", Регистратор.СкидкиНаценки.Выгрузить());
			ПараметрыРасчета.Вставить("ЦенаВключаетНДС", Истина);
			ПараметрыРасчета.Вставить("ВремяОбъекта", '00010101' + (ПараметрыРасчета.ТекущаяДата - НачалоДня(ПараметрыРасчета.ТекущаяДата)));
			ПараметрыРасчета.Вставить("РасчетПодарков", Истина);
			ПараметрыРасчета.Вставить("РасчетСообщений", Истина);
			
			ПараметрыРасчета.Вставить("ВернутьДанныеКарты", Ложь);
			Если ВходящиеДанныеВJSON.Свойство("GetLoyaltyCardData") Тогда
				ПараметрыРасчета.ВернутьДанныеКарты = ВходящиеДанныеВJSON.GetLoyaltyCardData;
			КонецЕсли;
			ПараметрыРасчета.Вставить("БлокироватьКарту", "0");
			Если ВходящиеДанныеВJSON.Свойство("BlockBonuses") Тогда
				ПараметрыРасчета.БлокироватьКарту = ВходящиеДанныеВJSON.BlockBonuses;
			КонецЕсли;
			
			Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ВходящиеДанныеВJSON, "BonusesGUID")
				И ЗначениеЗаполнено(ВходящиеДанныеВJSON.BonusesGUID) Тогда
				БонуснаяПрограмма = Справочники.БонусныеПрограммыЛояльности.ПолучитьСсылку(Новый УникальныйИдентификатор(ВходящиеДанныеВJSON.BonusesGUID));
				ПараметрыРасчета.Вставить("БонуснаяПрограмма", БонуснаяПрограмма);
			КонецЕсли;
			
		КонецЕсли;
		
	Исключение
		
		ОписаниеОшибки = СтрШаблон(НСтр("ru = 'Ошибка преобразования тела запроса по причине: %1'"), ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ПараметрыРасчета.ЕстьОшибки = Истина;
		ПараметрыРасчета.ОписаниеОшибки = ОписаниеОшибки;
		
		ЖурналРегистрации.ДобавитьСообщениеДляЖурналаРегистрации("СерверЛояльности.АвтоматическийРасчетСкидок",,,,ОписаниеОшибки);
		
	КонецПопытки;
	
	Результат = ПараметрыРасчета;
	
КонецПроцедуры

// Проверяет подарочный сертификат на факт продажи/списания.
//
// Параметры:
//  ПараметрыМетода - Структура - структура, содержащая в себе параметры подарочного сертификата:
//   *НомерСертификата - Строка - номер подарочного сертификата.
//  СтруктураОтвета - Структура - структура, содержащая в себе параметры ответа:
//   *GiftCardUsed - Булево - признак того, что подарочный сертификат был уже использован ранее.
//
Процедура ПроверитьПодарочныйСертификат(ПараметрыМетода, СтруктураОтвета) Экспорт
	
	Если ТипЗнч(ПараметрыМетода) = Тип("Структура") И Не ПараметрыМетода.Свойство("НомерСертификата") Тогда
		Возврат;
	КонецЕсли;
	
	СерийныйНомер = ПолучитьСерийныйНомерСертификата(ПараметрыМетода.НомерСертификата);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПодарочныеСертификатыОбороты.ПодарочныйСертификат КАК ПодарочныйСертификат,
		|	ПодарочныеСертификатыОбороты.НомерСертификата КАК НомерСертификата,
		|	ПодарочныеСертификатыОбороты.СуммаОборот КАК СуммаОборот,
		|	ПодарочныеСертификатыОбороты.СуммаПриход КАК СуммаПриход,
		|	ПодарочныеСертификатыОбороты.СуммаРасход КАК СуммаРасход
		|ИЗ
		|	РегистрНакопления.ПодарочныеСертификаты.Обороты(
		|			,
		|			,
		|			,
		|			НомерСертификата = &СерийныйНомер) КАК ПодарочныеСертификатыОбороты";
	
	Запрос.УстановитьПараметр("Период", ТекущаяДатаСеанса());
	Запрос.УстановитьПараметр("СерийныйНомер", СерийныйНомер);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		СтруктураОтвета.GiftCardUsed = Истина;
	КонецЕсли;
	
КонецПроцедуры

// Проверяет использование функции оплаты подарочными сертификатами
//
// Параметры:
//  Результат - Булево - переменная, в которую будет записан результат проверки использования
//						 функции оплаты подарочными сертификатами
//
Процедура ПроверитьИспользованиеПодарочныхСертификатов(Результат) Экспорт
	
	 Результат = Истина;//Константы.ФункциональнаяОпцияИспользоватьПодарочныеСертификаты.Получить();
	
КонецПроцедуры

// Возвращает структуру данных о текущих запретах продаж
//
// Параметры:
//  ПараметрыМетода - Структура - набор параметров для получения данных о запретах продаж
//  Результат - Структура, Неопределено - сюда будут записаны данные о запретах продаж
//
Процедура ДанныеОЗапретахПродаж(ПараметрыМетода, Результат) Экспорт
	
	Успех = Истина;
	ТекстОшибки = "";
	ДанныеКонтроляПродаж = Неопределено;
	ДанныеВидовКонтроля = Неопределено;
	ДанныеПалитр = Неопределено;
	
	УстановитьПривилегированныйРежим(Истина);
	
	ИспользоватьКонтрольПродаж = ПолучитьФункциональнуюОпцию("ИспользоватьКонтрольПродаж");
	// Формируем структуру ответа
	СтруктураОтвета = Новый Структура;
	СтруктураОтвета.Вставить("AllowControl", ИспользоватьКонтрольПродаж);
	
	Если ИспользоватьКонтрольПродаж Тогда
		
		ТорговыйОбъект = НайтиМагазин(ПараметрыМетода.Магазин);
		Если ЗначениеЗаполнено(ТорговыйОбъект) И ОбщегоНазначения.СсылкаСуществует(ТорговыйОбъект) Тогда
			
			СписокВидовКонтроля = Новый Массив;
			СписокПалитр = Новый Массив;
			ДанныеКонтроляПродаж
				= ПолучитьДанныеКонтроляПродаж(ПараметрыМетода.Магазин, ТорговыйОбъект, СписокВидовКонтроля, СписокПалитр);
			ДанныеВидовКонтроля = ПолучитьДанныеВидовКонтроля(СписокВидовКонтроля);
			ДанныеПалитр = ПолучитьДанныеПалитрТоваров(СписокПалитр);
			
		Иначе
			Успех = Ложь;
			ТекстОшибки = НСтр("ru = 'На сервере лояльности не найден переданный торговый объект!'");
		КонецЕсли;
		
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Ложь);
	
	СтруктураОграничений = Новый Структура();
	СтруктураОграничений.Вставить("Success", Успех);
	СтруктураОграничений.Вставить("ErrorText", ТекстОшибки);
	СтруктураОграничений.Вставить("GoodsSets", ДанныеПалитр);
	СтруктураОграничений.Вставить("RestrictionKinds", ДанныеВидовКонтроля);
	СтруктураОграничений.Вставить("TradeRestrictions", ДанныеКонтроляПродаж);
	
	СтруктураОтвета.Вставить("TradeControlData", СтруктураОграничений);
	СтруктураОтвета.Вставить("RestrictionsList", Новый Массив);
	Результат = СтруктураОтвета;
	
КонецПроцедуры

// Возвращает массив получателей скидок
//
// Параметры:
//  МассивДисконтныхКарт - Массив - ОпределяемыйТип.КартаЛояльностиСерверЛояльности
//
Функция СформироватьМассивПолучателейСкидок(МассивДисконтныхКарт) Экспорт

	МассивПолучателейСкидок = Новый Массив;
	
	Для каждого ДисконтнаяКарта Из МассивДисконтныхКарт Цикл
	
		МассивПолучателейСкидок.Добавить(ДисконтнаяКарта);
		МассивПолучателейСкидок.Добавить(ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДисконтнаяКарта, "ВидДисконтнойКарты"));
		МассивПолучателейСкидок.Добавить(ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДисконтнаяКарта, "ВладелецКарты"));
	
	КонецЦикла;
	
	Возврат МассивПолучателейСкидок;

КонецФункции

// Возвращает остатки бонусных баллов клиента
//
// Параметры: 
//  ДисконтнаяКарта - ОпределяемыйТип.КартаЛояльностиСерверЛояльности
//
// Возвращаемое значение:
//  Остаток - Число - остаток бонусов клиента
//
Функция ПолучитьБонусыКлиента(ДисконтнаяКарта) Экспорт
	
	Возврат БонусныеБаллыСервер.ОстаткиИДвиженияБонусныхБаллов(ДисконтнаяКарта);
	
КонецФункции

// Возвращает обороты продаж клиента
//
// Параметры: 
//  ДисконтнаяКарта - ОпределяемыйТип.КартаЛояльностиСерверЛояльности
//
// Возвращаемое значение:
//  Оборот - Число - Оборот продаж клиента
//
Функция ПолучитьОборотыПродажКлиента(ДисконтнаяКарта)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ПродажиПоДисконтнымКартамОбороты.СуммаОборот КАК СуммаОборот
	|ИЗ
	|	РегистрНакопления.ПродажиПоДисконтнымКартам.Обороты(, , , ДисконтнаяКарта = &ДисконтнаяКарта) КАК ПродажиПоДисконтнымКартамОбороты";
	Запрос.УстановитьПараметр("ДисконтнаяКарта", ДисконтнаяКарта);
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		Возврат Выборка.СуммаОборот;
	Иначе
		Возврат 0;
	КонецЕсли;
	
КонецФункции


// Заполняет полученную структуру реквизитов именами реквизитов документа продажи (ЧекККМ)
//
// Параметры:
//  ИменаРеквизитов - Структура:
//    * ИмяРеквизитаДисконтнаяКарта - Строка
//    * ИмяТабличнойЧасти - Строка
//    * ИмяРеквизитаПодарочныйСертификат - Строка
//    * ИмяРеквизитаСерийныйНомер - Строка
//
Процедура ЗаполнитьИменаРеквизитовИсточника(ИменаРеквизитов) Экспорт
	
	ИменаРеквизитов = Новый Структура;
	ИменаРеквизитов.Вставить("ИмяРеквизитаДисконтнаяКарта", "ДисконтнаяКарта");
	ИменаРеквизитов.Вставить("ИмяТабличнойЧасти", "ПогашениеПодарочныхСертификатов");
	ИменаРеквизитов.Вставить("ИмяРеквизитаПодарочныйСертификат", "ПодарочныйСертификат");
	ИменаРеквизитов.Вставить("ИмяРеквизитаСерийныйНомер", "СерийныйНомер");
	
КонецПроцедуры

// Заполняет структуру ответа http-сервиса данными найденных карт
//
// Параметры:
//  ПараметрыМетода - Структура - структура, содержащая в себе параметры поиска карт:
//    * ИдентификаторКартыКлиента - Строка - код карты лояльности
//    * НомерТелефона - Строка - номер телефона или последняя часть номера телефона для поиска
//    * АдресЭП - Строка - адрес электронной почты владельца карты для поиска
//    * УникальныйИдентификаторКарты - Строка - гуид элемента справочника "ИнформационныеКарты"
//    * УникальныйИдентификаторВладельцаКарты - Строка - гуид элемента справочника "Контрагенты", "ФизическиеЛица"
//  СтруктураОтвета - Структура - см. СерверЛояльностиПоставщикДанных.ПолучитьСтруктуруОтвета
//
Процедура НайтиКартыЛояльности(ПараметрыМетода, СтруктураОтвета) Экспорт
	
	КартаКлиента = ПолучитьКартуПоУникальномуИдентификатору(ПараметрыМетода.УникальныйИдентификаторКарты);
	ВладелецКарты
		= ПолучитьВладельцаКартыПоУникальномуИдентификатору(ПараметрыМетода.УникальныйИдентификаторВладельцаКарты);
	Если ЗначениеЗаполнено(КартаКлиента) Тогда
		НайтиКартуЛояльностиПоСсылке(КартаКлиента, СтруктураОтвета);
	КонецЕсли;
	Если СтруктураОтвета.LoyaltyCardsList.Количество() = 0 И ЗначениеЗаполнено(ВладелецКарты) Тогда
		НайтиКартуЛояльностиПоВладельцу(ВладелецКарты, СтруктураОтвета);
	КонецЕсли;
	Если СтруктураОтвета.LoyaltyCardsList.Количество() = 0
			И ЗначениеЗаполнено(ПараметрыМетода.ИдентификаторКартыКлиента) Тогда
		НайтиКартуЛояльностиПоНомеруКарты(ПараметрыМетода.ИдентификаторКартыКлиента, СтруктураОтвета);
	КонецЕсли;
	Если СтруктураОтвета.LoyaltyCardsList.Количество() = 0 Тогда
		СтрокаПоискаТелефона = ПодготовитьСтрокуПоискаПоНомеруТелефона(ПараметрыМетода.НомерТелефона);
		Если СтрокаПоискаТелефона <> "" Или ПараметрыМетода.АдресЭП <> "" Тогда
			НайтиКартыЛояльностиПоКонтактнойинформации(СтрокаПоискаТелефона, ПараметрыМетода.АдресЭП, СтруктураОтвета);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Заполняет карту лояльности клиента
//
// Параметры:
//  СтрокаУникальногоИдентификатора - Строка - уникальный идентификатор карты,
//  КартаКлиента - СправочникСсылка.ДисконтныеКарты - карта клиента
//
Процедура ПолучитьКартуКлиентаПоУникальномуИдентификатору(СтрокаУникальногоИдентификатора, КартаКлиента) Экспорт

	УстановитьПривилегированныйРежим(Истина);
	КартаКлиента
		= Справочники.ИнформационныеКарты.ПолучитьСсылку(Новый УникальныйИдентификатор(СтрокаУникальногоИдентификатора));
	
КонецПроцедуры

// Заполняет структуру ответа http-сервиса номерами и уникальным идентификатором дисконтной карты
//
// Параметры:
//  КартаКлиента - СправочникСсылка.ДисконтныеКарты - карта клиента
//  СтруктураОтвета - Структура - см. СерверЛояльностиПоставщикДанных.ПолучитьСтруктуруОтвета
//
Процедура ЗаполнитьСтруктуруОтветаНомерамиКарты(КартаКлиента, СтруктураОтвета) Экспорт

	ЗапросНомеров = Новый Запрос;
	ЗапросНомеров.Текст =
	"ВЫБРАТЬ
	|	СпрИнформационныеКарты.КодКарты КАК КодКарты,
	|	ЕСТЬNULL(Штрихкоды.Штрихкод, """") КАК Штрихкод
	|ИЗ
	|	Справочник.ИнформационныеКарты КАК СпрИнформационныеКарты
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.Штрихкоды КАК Штрихкоды
	|		ПО СпрИнформационныеКарты.Ссылка = Штрихкоды.Владелец
	|ГДЕ
	|	СпрИнформационныеКарты.Ссылка = &КартаКлиента";
	ЗапросНомеров.УстановитьПараметр("КартаКлиента", КартаКлиента);
	Выборка = ЗапросНомеров.Выполнить().Выбрать();
	
	СтруктураОтвета.CardRef = XMLСтрока(КартаКлиента);
	Если Выборка.Следующий() Тогда
		СтруктураОтвета.Barcode = Выборка.Штрихкод;
		СтруктураОтвета.MagneticCode = Выборка.КодКарты;
	КонецЕсли;
	
КонецПроцедуры

// Дополняет сериализованную структуру данными о действующих автоматических скидках
//
// Параметры:
//  СериализованнаяСтруктураСкидок - Структура - см. СериализоватьРезультатРасчета()
//  ТаблицаСкидок - ТаблицаЗначений - 
//
// Возвращаемое значение:
//  Структура - содержит в себе данные передаваемого параметра СериализованнаяСтруктураСкидок,
//				дополненного структурой CurrentDiscounts
Процедура ДополнитьСтруктуруСкидокДействующимиСкидками(СериализованнаяСтруктураСкидок, ТаблицаСкидок)
	
	МассивСкидок = Новый Массив;
	
	Для каждого СтрокаСкидкиНаценки Из ТаблицаСкидок Цикл
		
		Если СтрокаСкидкиНаценки.СкидкаНаценка = Null 
			Или НЕ СтрокаСкидкиНаценки.СтруктураДополнительныхДанных.Свойство("ТаблицаСкидок") Тогда
			Продолжить;
		КонецЕсли;
		
		СтруктураСтроки = Новый Структура;
		СтруктураСсылки = ПолучитьСтруктуруСсылки(СтрокаСкидкиНаценки.СкидкаНаценка);
		СтруктураСтроки.Вставить("Discounts", СтруктураСсылки);
		СтруктураСтроки.Вставить("DiscountValue", ?(СтрокаСкидкиНаценки.ЗначениеСкидкиНаценки = null, 0, СтрокаСкидкиНаценки.ЗначениеСкидкиНаценки));
		СтруктураСтроки.Вставить("Group", СтрокаСкидкиНаценки.ЭтоГруппа);
		СтруктураСтроки.Вставить("Completed", СтрокаСкидкиНаценки.КоличествоВыполненийУсловия);
		СтруктураСтроки.Вставить("Parent", XMLСтрока(СтрокаСкидкиНаценки.СкидкаНаценка.Родитель));
		
		УсловияПредоставления = "";
		Если СтрокаСкидкиНаценки.СтруктураДополнительныхДанных.Свойство("СтрокаУсловий") Тогда
			Для Каждого СтрокаВыполненныхУсловий Из СтрокаСкидкиНаценки.СтруктураДополнительныхДанных.СтрокаУсловий.Строки Цикл
				УсловияПредоставления = УсловияПредоставления + ?(УсловияПредоставления = "","",Символы.ПС) + Строка(СтрокаВыполненныхУсловий.Условие);
			КонецЦикла;
		КонецЕсли;
		СтруктураСтроки.Вставить("TermsDiscounts", УсловияПредоставления);
		
		МассивСкидок.Добавить(СтруктураСтроки);
	
	КонецЦикла;
	
	СериализованнаяСтруктураСкидок.Вставить("CurrentDiscounts", МассивСкидок);
	
КонецПроцедуры

// Заполняет список видов карт
//
// Параметры:
//  Результат - Неопределено, ТаблицаЗначений - возвращаемое значение
//
Процедура ЗаполнитьТаблицуВидовКарт(Результат) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВидыДисконтныхКарт.Ссылка КАК Ссылка,
	|	ВидыДисконтныхКарт.Наименование КАК Наименование,
	|	ЛОЖЬ КАК ЭтоИменнаяКарта
	|ИЗ
	|	Справочник.ВидыДисконтныхКарт КАК ВидыДисконтныхКарт
	|ГДЕ
	|	НЕ ВидыДисконтныхКарт.ПометкаУдаления";

	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		НоваяСтрока = Результат.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
		НоваяСтрока.Идентификатор = Строка(Выборка.Ссылка.УникальныйИдентификатор());
	КонецЦикла;
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

// Возвращает данные об использовании бонусов контрагентов
//
// Параметры:
//  Результат - Булево - Истина, используются,
//						 Ложь, не используются.
//
Процедура ИспользоватьБонусыКонтрагентов(Результат) Экспорт
	
	Результат = Ложь;
	
КонецПроцедуры

// Десериализует параметры запроса объединения бонусных карт, полученными в формате JSON
//
// Параметры:
//  ВходящиеДанные	 - Строка	 - содержит строковое значение тела запроса в формате JSON.
//  Результат		 - Структура - структура данных c параметрами расчета автоматических скидок.
//  * ТаблицаБонусныхКарт				 - ТаблицаЗначений
//  * БонуснаяПрограмма				 - СправочникСсылка.БонусныеПрограммы
//
Процедура ПараметрыМетодаИзЗапросаОбъединитьБонусныеКарты(ВходящиеДанные, Результат) Экспорт
	
	ПараметрыРасчета = Новый Структура;
	ПараметрыРасчета.Вставить("ЕстьОшибки", Ложь);
	ПараметрыРасчета.Вставить("ОписаниеОшибки", "");
	
	Попытка
		
		ЧтениеJSON = Новый ЧтениеJSON();
		ЧтениеJSON.УстановитьСтроку(ВходящиеДанные);
		ВходящиеДанныеВJSON = ПрочитатьJSON(ЧтениеJSON, , "CurrentDate", ФорматДатыJSON.ISO);
		ЧтениеJSON.Закрыть(); 
		БонуснаяПрограмма = Справочники.БонусныеПрограммыЛояльности.ПолучитьСсылку(Новый УникальныйИдентификатор(ВходящиеДанныеВJSON.BonusProgramm));
		ПараметрыРасчета.Вставить("БонуснаяПрограмма", БонуснаяПрограмма);
		ДисконтнаяКарта = Справочники.ИнформационныеКарты.ПустаяСсылка();
		
		ПараметрыПоискаКарты = Новый Структура;
		ПараметрыПоискаКарты.Вставить("ИдентификаторКартыКлиента", ВходящиеДанныеВJSON.BonusCardNumber);
		ПараметрыПоискаКарты.Вставить("УникальныйИдентификаторКарты", ВходящиеДанныеВJSON.BonusCardGUID);
		ПараметрыПоискаКарты.Вставить("Клиент", "");
		ПараметрыПоискаКарты.Вставить("НомерТелефона", "");
		ПараметрыПоискаКарты.Вставить("АдресЭП", "");
		
		НайденнаяКарта = Неопределено;
		НайтиКартуКлиента(ПараметрыПоискаКарты, НайденнаяКарта);
		Если НайденнаяКарта <> Неопределено Тогда
			ДисконтнаяКарта = НайденнаяКарта;
		КонецЕсли;

		ПараметрыРасчета.Вставить("БонуснаяКарта", ДисконтнаяКарта);
		ПараметрыРасчета.Вставить("ТаблицаБонусныхКарт", ПолучитьДесериализованнуюТаблицуБонусныхКарт(ВходящиеДанныеВJSON, "BonusCards"));
		
	Исключение
		
		ОписаниеОшибки = СтрШаблон(НСтр("ru = 'Ошибка преобразования тела запроса по причине: %1'"), ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ПараметрыРасчета.ЕстьОшибки = Истина;
		ПараметрыРасчета.ОписаниеОшибки = ОписаниеОшибки;
		ИмяСобытия = НСтр("ru = 'СерверЛояльности.ОбъединитьБонусныеКарты'");
		ЗаписьЖурналаРегистрации(ИмяСобытия, , , , ОписаниеОшибки);
		
	КонецПопытки;
	
	Результат = ПараметрыРасчета;
КонецПроцедуры

// Создает списание и начисление бонусов по полученным параметрам с сервера лояльности
//
// Параметры:
//  ПараметрыРасчета - Структура - структура, содержащая в себе параметры списания/начисления бонусных баллов:
//  * БонуснаяПрограмма - СправочникСсылка.БонусныеПрограммы - бонусная программа.
//  * БонуснаяКарта - СправочникСсылка.ДисконтныеКарты - бонусная карта начисления
//  * ТаблицаБонусныхКарт - ТаблицаЗначений - Таблица бонусных карт.
//  СтруктураОтвета	 - Структура - структура, содержащая в себе параметры ответа:
//  * ЕстьОшибки - Булево - признак наличия ошибок при выполнении метода.
//  * ТекстОшибки - Булево - признак наличия ошибок при выполнении метода.
//
Процедура ОбъединитьБонусныеКарты(ПараметрыРасчета, СтруктураОтвета) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	ДокументНачисления = Документы.НачислениеИСписаниеБонусныхБаллов.СоздатьДокумент();
	ИмяСобытия = НСтр("ru = 'СерверЛояльности.ОбъединитьБонусныеКарты'");

	Попытка
		ДокументНачисления.Заблокировать();
	Исключение

		ОписаниеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		СтруктураОтвета.Error = Истина;
		СтруктураОтвета.ErrorMessage = ОписаниеОшибки;
		ЗаписьЖурналаРегистрации(ИмяСобытия, , , , ОписаниеОшибки);
		Возврат;
	КонецПопытки;

	ДокументНачисления.Дата = ТекущаяДатаСеанса();
	ДокументНачисления.БонуснаяПрограммаЛояльности = ПараметрыРасчета.БонуснаяПрограмма;
	ДокументНачисления.Комментарий = НСтр("ru = 'Автоматическое создание документа'");
	
	КурсБонусов = 1;
	КурсБонусов = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументНачисления.БонуснаяПрограммаЛояльности, "КурсКонвертацииБонусовВВалюту");
	
	Для Каждого СтрокаТаблицы Из ПараметрыРасчета.ТаблицаБонусныхКарт Цикл
		
		КурсБонусовСписание = 1;
		БонуснаяПрограммаКарты = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрокаТаблицы.БонуснаяКарта, "БонуснаяПрограммаЛояльности");
		Если ЗначениеЗаполнено(БонуснаяПрограммаКарты) Тогда
			КурсБонусовСписание = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(БонуснаяПрограммаКарты, "КурсКонвертацииБонусовВВалюту");
		КонецЕсли;
		
		НоваяСтрокаСписание = ДокументНачисления.Начисление.Добавить();
		НоваяСтрокаСписание.ДисконтнаяКарта = ПараметрыРасчета.БонуснаяКарта;
		НоваяСтрокаСписание.Баллы = СтрокаТаблицы.Количество * КурсБонусовСписание / КурсБонусов;
	КонецЦикла;
	
	Попытка
		ДокументНачисления.Записать(РежимЗаписиДокумента.Проведение);
	Исключение
		ОписаниеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		СтруктураОтвета.Error = Истина;
		СтруктураОтвета.ErrorMessage = ОписаниеОшибки;
		ЗаписьЖурналаРегистрации(ИмяСобытия, , , , ОписаниеОшибки);
		Возврат;
	КонецПопытки;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ТаблицаБонусныхКарт.БонуснаяКарта КАК БонуснаяКарта,
	|	ТаблицаБонусныхКарт.Количество КАК Количество
	|ПОМЕСТИТЬ втТаблицаБаллов
	|ИЗ
	|	&ТаблицаБонусныхКарт КАК ТаблицаБонусныхКарт
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ИнформационныеКарты.Ссылка КАК БонуснаяКарта,
	|	втТаблицаБаллов.Количество КАК Количество,
	|	БонусныеПрограммыЛояльности.Ссылка КАК БонуснаяПрограмма
	|ИЗ
	|	втТаблицаБаллов КАК втТаблицаБаллов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ИнформационныеКарты КАК ИнформационныеКарты
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.БонусныеПрограммыЛояльности КАК БонусныеПрограммыЛояльности
	|			ПО ИнформационныеКарты.БонуснаяПрограммаЛояльности = БонусныеПрограммыЛояльности.Ссылка
	|		ПО втТаблицаБаллов.БонуснаяКарта = ИнформационныеКарты.Ссылка
	|ИТОГИ ПО
	|	БонуснаяПрограмма";
	Запрос.УстановитьПараметр("ТаблицаБонусныхКарт", ПараметрыРасчета.ТаблицаБонусныхКарт);
	РезультатЗапроса = Запрос.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда
		ВыборкаБонуснаяПрограмма = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаБонуснаяПрограмма.Следующий() Цикл
			ДокументСписания = Документы.НачислениеИСписаниеБонусныхБаллов.СоздатьДокумент();
			
			Попытка
				ДокументСписания.Заблокировать();
			Исключение
				
				ОписаниеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
				СтруктураОтвета.Error = Истина;
				СтруктураОтвета.ErrorMessage = ОписаниеОшибки;
				ЗаписьЖурналаРегистрации(ИмяСобытия, , , , ОписаниеОшибки);
				Продолжить;
			КонецПопытки;
			
			ДокументСписания.Дата = ТекущаяДатаСеанса();
			ДокументСписания.БонуснаяПрограммаЛояльности = ВыборкаБонуснаяПрограмма.БонуснаяПрограмма;
			ДокументСписания.Комментарий = НСтр("ru = 'Автоматическое создание документа'");
			
			Выборка = ВыборкаБонуснаяПрограмма.Выбрать();
			Пока Выборка.Следующий() Цикл
				НоваяСтрокаСписание = ДокументСписания.Списание.Добавить();
				НоваяСтрокаСписание.ДисконтнаяКарта = Выборка.БонуснаяКарта;
				НоваяСтрокаСписание.Баллы = Выборка.Количество;
			КонецЦикла;
			
			Попытка
				ДокументСписания.Записать(РежимЗаписиДокумента.Проведение);
			Исключение
				ОписаниеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
				СтруктураОтвета.Error = Истина;
				СтруктураОтвета.ErrorMessage = ОписаниеОшибки;
				ЗаписьЖурналаРегистрации(ИмяСобытия, , , , ОписаниеОшибки);
				Продолжить;
			КонецПопытки;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры
#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Ищет клиента по наименованию
// 
// Параметры:
//  ДанныеКарты - структура. содержащая данные карты лояльности
//
// Возвращаемое значение:
//  СправочникСсылка.ФизическиеЛица - владелец карты лояльности
//
Функция ПолучитьВладельцаКарты(ДанныеКарты) Экспорт
	
	РезультатФункции = Новый Структура("ВладелецКарты,СтатусПолучения", Неопределено, "");
	
	ОбратныйНомер = ОбщегоНазначенияРМК.ПолучитьОбратныйНомерТелефонаБезКодаСтраны(ДанныеКарты.НомерТелефона);
	Запрос = Новый Запрос;
	Если ДанныеКарты.Свойство("Контрагент") И ЗначениеЗаполнено(ДанныеКарты.Контрагент) Тогда
		РезультатФункции.Вставить("ВладелецКарты", ДанныеКарты.Контрагент);
		РезультатФункции.Вставить("СтатусПолучения", "найден");
	ИначеЕсли ЗначениеЗаполнено(ОбратныйНомер) Тогда
		Запрос.Текст = ТекстЗапросаФизическогоЛицаПоОбратномуНомеруТелефона();
		Запрос.УстановитьПараметр("ОбратныйНомер", ОбратныйНомер);
		РезультатЗапроса = Запрос.Выполнить();
		Если Не РезультатЗапроса.Пустой() Тогда
			Выборка = РезультатЗапроса.Выбрать();
			Выборка.Следующий();
			РезультатФункции.Вставить("ВладелецКарты", Выборка.Клиент);
			РезультатФункции.Вставить("СтатусПолучения", "найден");
		КонецЕсли;
	ИначеЕсли ЗначениеЗаполнено(ДанныеКарты.АдресЭП) Тогда
		Запрос.Текст = ТекстЗапросаФизическогоЛицаСТелефономПоАдресуЭП();
		Запрос.УстановитьПараметр("АдресЭП", ДанныеКарты.АдресЭП);
		РезультатЗапроса = Запрос.Выполнить();
		Если Не РезультатЗапроса.Пустой() Тогда
			Выборка = РезультатЗапроса.Выбрать();
			Выборка.Следующий();
			РезультатФункции.Вставить("ВладелецКарты", Выборка.Клиент);
			Если Выборка.ОбратныйНомерТелефона = "" Тогда
				РезультатФункции.Вставить("СтатусПолучения", "найден");
			Иначе
				РезультатФункции.Вставить("СтатусПолучения", "занят");
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если РезультатФункции.ВладелецКарты = Неопределено Тогда
		ВладелецКарты = СоздатьВладельцаКарты(ДанныеКарты);
		РезультатФункции.Вставить("ВладелецКарты", ВладелецКарты);
		РезультатФункции.Вставить("СтатусПолучения", "создан");
	КонецЕсли;
	
	Возврат РезультатФункции;
	
КонецФункции

// Получает параметры шаблона карты клиента
//
// Параметры:
//  ДанныеКарты - Структура - содержит данные карты, исходя из которых система создаст элемент справочника
//
// Возвращаемое значение:
//  Структура
//
Функция ПолучитьПараметрыШаблонаКарты(ДанныеКарты) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
		|	ШаблоныРегистрацииНовыхКарт.ВидКарты КАК ВидКарты,
		|	ШаблоныРегистрацииНовыхКарт.ДлинаКода КАК ДлинаКода,
		|	ШаблоныРегистрацииНовыхКарт.НачалоДиапазона КАК НачалоДиапазона,
		|	ШаблоныРегистрацииНовыхКарт.КонецДиапазона КАК КонецДиапазона,
		|	ШаблоныРегистрацииНовыхКарт.ПроводитьОпросВладельцаПриРегистрации КАК ПроводитьОпросВладельцаПриРегистрации,
		|	ШаблоныРегистрацииНовыхКарт.ВидДисконтнойКарты КАК ВидДисконтнойКарты,
		|	ШаблоныРегистрацииНовыхКарт.ГруппаКарты КАК ГруппаКарты,
		|	ШаблоныРегистрацииНовыхКарт.НаименованиеШаблона КАК НаименованиеШаблона,
		|	ШаблоныРегистрацииНовыхКарт.БонуснаяПрограммаЛояльности КАК БонуснаяПрограммаЛояльности,
		|	ШаблоныРегистрацииНовыхКарт.ГруппаВладельцаКарты КАК ГруппаВладельцаКарты
		|ИЗ
		|	РегистрСведений.ШаблоныРегистрацииНовыхКарт КАК ШаблоныРегистрацииНовыхКарт
		|ГДЕ
		|	ВЫБОР
		|			КОГДА &КодКарты <> """"
		|				ТОГДА &КодКарты МЕЖДУ ШаблоныРегистрацииНовыхКарт.НачалоДиапазона И ШаблоныРегистрацииНовыхКарт.КонецДиапазона
		|			ИНАЧЕ ИСТИНА
		|		КОНЕЦ
		|	И ШаблоныРегистрацииНовыхКарт.БонуснаяПрограммаЛояльности <> ЗНАЧЕНИЕ(Справочник.БонусныеПрограммыЛояльности.ПустаяСсылка)";
	
	Запрос.УстановитьПараметр("КодКарты", ДанныеКарты.ИдентификаторКартыКлиента);
	
	РезультатЗапроса 		  = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи 	  = РезультатЗапроса.Выбрать();
	
	СтруктураШаблона 		  = ПолучитьСтруктуруШаблона();
	СтруктураШаблона.КодКарты = ДанныеКарты.ИдентификаторКартыКлиента;
	
	Если ДанныеКарты.Свойство("ГУИДВидаКарты") И ЗначениеЗаполнено(ДанныеКарты.ГУИДВидаКарты)
		И Не ДанныеКарты.ГУИДВидаКарты = ПустойУникальныйИдентификатор() Тогда
			СтруктураШаблона.ВидДисконтнойКарты =
				Справочники.ВидыДисконтныхКарт.ПолучитьСсылку(Новый УникальныйИдентификатор(ДанныеКарты.ГУИДВидаКарты));
	КонецЕсли;
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда 
		ЗаполнитьЗначенияСвойств(СтруктураШаблона, ВыборкаДетальныеЗаписи);
	КонецЕсли;
	
	Возврат СтруктураШаблона;
	
КонецФункции

// Получает структуру шаблона карты клиента
//
// Возвращаемое значение:
//  Структура
//		*ВидКарты 					 - Строка
//		*КодКарты 					 - Строка
//		*БонуснаяПрограммаЛояльности - Строка
//		*ГруппаВладельцаКарты 		 - Строка
//		*ГруппаКарты 				 - Строка
//		*ВидДисконтнойКарты 		 - Строка
//		*ТипШтрихкода				 - Строка
//
Функция ПолучитьСтруктуруШаблона()
	
	СтруктураШаблона = Новый Структура;
	СтруктураШаблона.Вставить("ВидКарты", "");
	СтруктураШаблона.Вставить("КодКарты", "");
	СтруктураШаблона.Вставить("БонуснаяПрограммаЛояльности", "");
	СтруктураШаблона.Вставить("ГруппаВладельцаКарты", "");
	СтруктураШаблона.Вставить("ГруппаКарты", "");
	СтруктураШаблона.Вставить("ВидДисконтнойКарты", "");
	СтруктураШаблона.Вставить("ТипШтрихкода", "");
	
	Возврат СтруктураШаблона;
	
КонецФункции

// Создает физическое лицо - владельца карты лояльности
//
// Параметры:
//  ДанныеКарты - структура. содержащая данные карты лояльности
//
// Возвращаемое значение:
//  СправочникСсылка.ФизическиеЛица - вновь созданный владелец карты лояльности
//
Функция СоздатьВладельцаКарты(ДанныеКарты)
	
	ВладелецКарты = Справочники.ФизическиеЛица.СоздатьЭлемент();
	ВладелецКарты.Наименование = ДанныеКарты.Клиент;
	ДатаРождения = ДанныеКарты.ДатаРождения;
	Если ТипЗнч(ДатаРождения) = Тип("Строка") И 
		СтрДлина(ДатаРождения) = 10 Тогда
		ДатаРождения = ДатаРождения + " 00:00:00";
	КонецЕсли;
	ВладелецКарты.ДатаРождения = ДатаРождения;
	
	Если ЗначениеЗаполнено(ДанныеКарты.НомерТелефона) Тогда
		НомерТелефонаБезПлюса = СтрЗаменить(ДанныеКарты.НомерТелефона, "+", "");
		НомерТелефонаБезПлюса = СтрЗаменить(ДанныеКарты.НомерТелефона, " ", "");
		
		УправлениеКонтактнойИнформацией.ДобавитьКонтактнуюИнформацию(ВладелецКарты, ДанныеКарты.НомерТелефона,
			Справочники.ВидыКонтактнойИнформации.ТелефонФизическогоЛица);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеКарты.АдресЭП) Тогда 
		УправлениеКонтактнойИнформацией.ДобавитьКонтактнуюИнформацию(ВладелецКарты, ДанныеКарты.АдресЭП,
			Справочники.ВидыКонтактнойИнформации.EmailФизическогоЛица);
	КонецЕсли;
		
	Если ДанныеКарты.Свойство("ФизЛицоГУИДСтрокой") И ЗначениеЗаполнено(ДанныеКарты.ФизЛицоГуидСтрокой) Тогда
		ФизЛицоГуид = Новый УникальныйИдентификатор(ДанныеКарты.ФизЛицоГуидСтрокой);
		ФизЛицоСсылка = Справочники.ФизическиеЛица.ПолучитьСсылку(ФизЛицоГуид);
		ВладелецКарты.УстановитьСсылкуНового(ФизЛицоСсылка);
	КонецЕсли;
	
	ВладелецКарты.Записать();
	
	Возврат ВладелецКарты.Ссылка;
	
КонецФункции

// Возвращает номер дисконтной карты
//
// Параметры:
//  ДисконтнаяКарта - СправочникСсылка.ИнформационныеКарты
//
// Возвращаемое значение:
//  Число
//
Функция ПолучитьНомерКарты(ДисконтнаяКарта) Экспорт
	
	Если ДисконтнаяКарта.ВидКарты = Перечисления.ВидыИнформационныхКарт.Штриховая Тогда
		
		ДанныеШтрихКода = ПодключаемоеОборудованиеРТ.ШтрихкодТовара(ДисконтнаяКарта);
		Если Не ДанныеШтрихКода = Неопределено Тогда
			НомерКарты = ДанныеШтрихКода.Штрихкод;
		КонецЕсли;
		
	Иначе
		НомерКарты = ДисконтнаяКарта.КодКарты;
	КонецЕсли;
	
	Возврат НомерКарты;
	
КонецФункции

// Возвращает номер телефона владельца карты
//
// Параметры:
//  ВладелецКарты - СправочникСсылка.ФизическиеЛица
//
// Возвращаемое значение:
//  Строка
//
Функция ПолучитьНомерТелефонаВладельца(ВладелецКарты) Экспорт
	
	НомерТелефона = "";
	
	Если Не ЗначениеЗаполнено(ВладелецКарты) Тогда 
		Возврат НомерТелефона;
	КонецЕсли;
	
	Для Каждого СтрокаКИ Из ВладелецКарты.КонтактнаяИнформация Цикл
		Если СтрокаКИ.Тип = Перечисления.ТипыКонтактнойИнформации.Телефон Тогда
			НомерТелефона = СтрокаКИ.Представление;
		КонецЕсли;
	КонецЦикла;
	
	Возврат НомерТелефона;
	
КонецФункции

// Возвращает адрес электронной почты владельца карты
//
// Параметры:
//  ВладелецКарты - СправочникСсылка.ФизическиеЛица, СправочникСсылка.Контрагенты
//
// Возвращаемое значение:
//  Строка
//
Функция ПолучитьАдресЭлектроннойПочтыВладельца(ВладелецКарты) Экспорт
	
	АдресЭлектроннойПочты = "";
	
	Если Не ЗначениеЗаполнено(ВладелецКарты) Тогда 
		Возврат АдресЭлектроннойПочты;
	КонецЕсли;
	
	КоличествоСтрокКИ = ВладелецКарты.КонтактнаяИнформация.Количество();
	ИндексСтрокиКИ = 0;
	Пока ИндексСтрокиКИ < КоличествоСтрокКИ И АдресЭлектроннойПочты = "" Цикл
		СтрокаКИ = ВладелецКарты.КонтактнаяИнформация.Получить(ИндексСтрокиКИ);
		Если СтрокаКИ.Тип = Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты Тогда
			АдресЭлектроннойПочты = СокрЛП(СтрокаКИ.АдресЭП);
		КонецЕсли;
		ИндексСтрокиКИ = ИндексСтрокиКИ + 1;
	КонецЦикла;
	
	Возврат АдресЭлектроннойПочты;
	
КонецФункции

// Возвращает данные о магазине
//
// Параметры:
//  Магазин  - Строка
//
// Возвращаемое значение:
//  Магазин - СправочникСсылка.Магазины
//
Функция НайтиМагазин(Магазин)
	
	Попытка
		МагазинСсылка = Справочники.Магазины.ПолучитьСсылку(Новый УникальныйИдентификатор(Магазин));
	Исключение
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
		|	Магазины.Ссылка КАК Ссылка,
		|	1 КАК Приоритет
		|ИЗ
		|	Справочник.Магазины КАК Магазины
		|ГДЕ
		|	Магазины.Код = &Магазин
		|	И НЕ Магазины.ПометкаУдаления
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Магазины.Ссылка,
		|	2
		|ИЗ
		|	Справочник.Магазины КАК Магазины
		|ГДЕ
		|	Магазины.Наименование = &Магазин
		|	И НЕ Магазины.ПометкаУдаления
		|
		|УПОРЯДОЧИТЬ ПО
		|	Приоритет";
		
		Запрос.УстановитьПараметр("Магазин", Магазин);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		Выборка = РезультатЗапроса.Выбрать();
		
		Если Выборка.Следующий() Тогда 
			МагазинСсылка = Выборка.Ссылка;
		Иначе 
			МагазинСсылка = Справочники.Магазины.ПустаяСсылка();
		КонецЕсли;

	КонецПопытки;
	
	Возврат МагазинСсылка;
	
КонецФункции

Функция ПроверитьКорректностьВходящихДанных(ВходящиеДанные, ПараметрыРасчета)
	
	МассивПроверяемыхПараметров = МассивОбязательныхПараметровРасчетаСкидок();
	
	Для каждого ПроверяемыйПараметр Из МассивПроверяемыхПараметров Цикл
		Если Не ВходящиеДанные.Свойство(ПроверяемыйПараметр) Тогда 
			ОписаниеОшибки = СтрШаблон(НСтр("ru = 'Во входящих параметрах не обнаружен параметр %1'"), ПроверяемыйПараметр);
			ПараметрыРасчета.ОписаниеОшибки = ПараметрыРасчета.ОписаниеОшибки + ОписаниеОшибки + ?(ПустаяСтрока(ПараметрыРасчета.ОписаниеОшибки), "", Символы.ПС);	
			ПараметрыРасчета.ЕстьОшибки = Истина;
		КонецЕсли;	
	КонецЦикла;
	
	Возврат Не ПараметрыРасчета.ЕстьОшибки;
	
КонецФункции

Функция СериализоватьРезультатРасчета(Объект, ИмяТЧ)
	
	ТаблицаТовары = Объект[ИмяТЧ];
	
	СериализованнаяСтруктураСкидок = Новый Структура;
	
	МассивТоваров = Новый Массив;
	
	Для каждого СтрокаТовар Из ТаблицаТовары Цикл
	
		СтруктураСтроки = Новый Структура;
		
		СтруктураСтроки.Вставить("Item", ПолучитьСтруктуруСсылки(СтрокаТовар.Номенклатура));
		СтруктураСтроки.Вставить("Variant", ПолучитьСтруктуруСсылки(СтрокаТовар.Характеристика));
		СтруктураСтроки.Вставить("Package", ПолучитьСтруктуруСсылки(СтрокаТовар.Упаковка));
		СтруктураСтроки.Вставить("Count", СтрокаТовар.Количество);
		СтруктураСтроки.Вставить("PackagesCount", СтрокаТовар.КоличествоУпаковок);
		СтруктураСтроки.Вставить("Price", СтрокаТовар.Цена);
		СтруктураСтроки.Вставить("Amount", СтрокаТовар.Сумма);
		СтруктураСтроки.Вставить("TotalAmount", СтрокаТовар.СуммаВсего);
		СтруктураСтроки.Вставить("LineNumber", 1);
		СтруктураСтроки.Вставить("VATRate", Строка(СтрокаТовар.СтавкаНДС));
		СтруктураСтроки.Вставить("VATAmount", СтрокаТовар.СуммаНДС);
		СтруктураСтроки.Вставить("AmountOfAutomaticDiscount", СтрокаТовар.СуммаАвтоматическойСкидки);
		СтруктураСтроки.Вставить("AmountOfManualDiscount", СтрокаТовар.СуммаРучнойСкидки);
		СтруктураСтроки.Вставить("PercentOfAutomaticDiscount", СтрокаТовар.ПроцентАвтоматическойСкидки);
		СтруктураСтроки.Вставить("PercentOfManualDiscount", СтрокаТовар.ПроцентРучнойСкидки);
		СтруктураСтроки.Вставить("LineUID", СтрокаТовар.ИдентификаторСтроки);
		
		МассивТоваров.Добавить(СтруктураСтроки);
		
	КонецЦикла;
		
	СериализованнаяСтруктураСкидок.Вставить("Goods", МассивТоваров);
	
	Возврат СериализованнаяСтруктураСкидок;
	
КонецФункции

Процедура ДополнитьСтруктуруСкидокПодарками(СериализованнаяСтруктураСкидок, ТаблицаПодарков)
	
	МассивПодарков = Новый Массив;
	
	Для каждого СтрокаПодарок Из ТаблицаПодарков Цикл
	
		СтруктураСтроки = Новый Структура;
		СтруктураСтроки.Вставить("Item", ПолучитьСтруктуруСсылки(СтрокаПодарок.Номенклатура));
		СтруктураСтроки.Вставить("Storage", ПолучитьСтруктуруСсылки(СтрокаПодарок.Склад));
		СтруктураСтроки.Вставить("Variant", ПолучитьСтруктуруСсылки(СтрокаПодарок.Характеристика));
		СтруктураСтроки.Вставить("Package", ПолучитьСтруктуруСсылки(СтрокаПодарок.Упаковка));
		СтруктураСтроки.Вставить("Count", СтрокаПодарок.Количество);
		СтруктураСтроки.Вставить("PackagesCount", СтрокаПодарок.КоличествоУпаковок);
		СтруктураСтроки.Вставить("Price", СтрокаПодарок.Цена);
		СтруктураСтроки.Вставить("Amount", СтрокаПодарок.Сумма);
		СтруктураСтроки.Вставить("GiftFromTheList", СтрокаПодарок.ПодарокИзСписка);
		СтруктураСтроки.Вставить("ShoppingCart", СтрокаПодарок.СкидкаНаценка.ПодарокИзКорзиныПокупателя);
		СтруктураСтроки.Вставить("GiftOwner", XMLСтрока(СтрокаПодарок.СкидкаНаценка));
		СтруктураСтроки.Вставить("GiftName", Строка(СтрокаПодарок.СкидкаНаценка));
		
		МассивПодарков.Добавить(СтруктураСтроки);
	
	КонецЦикла;
	
	СериализованнаяСтруктураСкидок.Вставить("Gifts", МассивПодарков);
	
КонецПроцедуры

Процедура ДополнитьСтруктуруСкидокСообщениями(СериализованнаяСтруктураСкидок, ТаблицаСообщений)
	
	МассивСообщений = Новый Массив;
	
	Для каждого СтрокаСообщения Из ТаблицаСообщений Цикл
	
		СтруктураСтроки = Новый Структура;
		
		ПослеОформленияЧека = (СтрокаСообщения.СкидкаНаценка.МоментВыдачиСообщения =
								Перечисления.ТочкиВыдачиСообщенияКассиру.ПослеОформленияЧека);
		СтруктураСтроки.Вставить("AfterSale", ПослеОформленияЧека);
		СтруктураСтроки.Вставить("MessageText", СтрокаСообщения.ТекстСообщения);
		
		МассивСообщений.Добавить(СтруктураСтроки);
	
	КонецЦикла;
	
	СериализованнаяСтруктураСкидок.Вставить("Messages", МассивСообщений);
	
КонецПроцедуры

Функция ПолучитьСтруктуруСсылки(Ссылка)
	
	СтруктураСсылки = Новый Структура;
	СтруктураСсылки.Вставить("Ref", XMLСтрока(Ссылка));
	СтруктураСсылки.Вставить("Name", Ссылка.Наименование);
	
	Возврат СтруктураСсылки;
	
КонецФункции

Функция МассивОбязательныхПараметровРасчетаСкидок()
	
	МассивПараметров = Новый Массив;
	МассивПараметров.Добавить("ObjectTime");
	МассивПараметров.Добавить("LoyaltyCardsList");
	МассивПараметров.Добавить("Goods");
	МассивПараметров.Добавить("RetailStore");
	
	Возврат МассивПараметров;
	
КонецФункции

Функция ПолучитьДесериализованнуюТаблицуТоваров(ВходящиеДанные, ИмяПараметра)
	
	ОписаниеТиповЧисло = Новый ОписаниеТипов("Число",,,Новый КвалификаторыЧисла(15,2));
	ОписаниеТиповЧислоДляКоличества = Новый ОписаниеТипов("Число",,,Новый КвалификаторыЧисла(15,3));
	
	ТаблицаТоваров = Новый ТаблицаЗначений;
	ТаблицаТоваров.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	ТаблицаТоваров.Колонки.Добавить("ТипНоменклатуры", Новый ОписаниеТипов("ПеречислениеСсылка.ТипыНоменклатуры"));
	ТаблицаТоваров.Колонки.Добавить("Упаковка", Новый ОписаниеТипов("СправочникСсылка.УпаковкиНоменклатуры"));
	ТаблицаТоваров.Колонки.Добавить("Характеристика", Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
	ТаблицаТоваров.Колонки.Добавить("ДоговорКонтрагента", Новый ОписаниеТипов("СправочникСсылка.ДоговорыКонтрагентов"));
	ТаблицаТоваров.Колонки.Добавить("СтавкаНДС", Новый ОписаниеТипов("ПеречислениеСсылка.СтавкиНДС"));
	ТаблицаТоваров.Колонки.Добавить("НомерСтроки", ОписаниеТиповЧисло);
	ТаблицаТоваров.Колонки.Добавить("КлючСвязи", ОписаниеТиповЧисло);
	ТаблицаТоваров.Колонки.Добавить("КлючСвязиУслугаАгента", ОписаниеТиповЧисло);
	ТаблицаТоваров.Колонки.Добавить("Количество", ОписаниеТиповЧислоДляКоличества);
	ТаблицаТоваров.Колонки.Добавить("КоличествоУпаковок", ОписаниеТиповЧислоДляКоличества);
	ТаблицаТоваров.Колонки.Добавить("ПроцентАвтоматическойСкидки", ОписаниеТиповЧисло);
	ТаблицаТоваров.Колонки.Добавить("ПроцентРучнойСкидки", ОписаниеТиповЧисло);
	ТаблицаТоваров.Колонки.Добавить("Сумма", ОписаниеТиповЧисло);
	ТаблицаТоваров.Колонки.Добавить("СуммаАвтоматическойСкидки", ОписаниеТиповЧисло);
	ТаблицаТоваров.Колонки.Добавить("СуммаРучнойСкидки", ОписаниеТиповЧисло);
	ТаблицаТоваров.Колонки.Добавить("СуммаВсего", ОписаниеТиповЧисло);
	ТаблицаТоваров.Колонки.Добавить("СуммаНДС", ОписаниеТиповЧисло);
	ТаблицаТоваров.Колонки.Добавить("Цена", ОписаниеТиповЧисло);
	ТаблицаТоваров.Колонки.Добавить("ПродажаПодарка", Новый ОписаниеТипов("Булево"));
	ТаблицаТоваров.Колонки.Добавить("ИдентификаторСтроки", Новый ОписаниеТипов("Строка"));
	
	МассивСтрокТаблицы = ВходящиеДанные[ИмяПараметра];
	
	НомерСтроки = 1;
	
	Для каждого СтрокаТаблицы Из МассивСтрокТаблицы Цикл
		
		НоваяСтрока = ТаблицаТоваров.Добавить();
		НоваяСтрока.Номенклатура = ПолучитьДесериализованноеСсылочноеЗначение(СтрокаТаблицы, "Item", "Справочники.Номенклатура");
		НоваяСтрока.ТипНоменклатуры = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(НоваяСтрока.Номенклатура, "ТипНоменклатуры");
		НоваяСтрока.Упаковка = ПолучитьДесериализованноеСсылочноеЗначение(СтрокаТаблицы, "Package", "Справочники.УпаковкиНоменклатуры");
		НоваяСтрока.Характеристика = ПолучитьДесериализованноеСсылочноеЗначение(СтрокаТаблицы, "Variant", "Справочники.ХарактеристикиНоменклатуры");
		НоваяСтрока.Цена = СтрокаТаблицы.Price;
		НоваяСтрока.Сумма = СтрокаТаблицы.Amount;
		НоваяСтрока.Количество = СтрокаТаблицы.Count;
		НоваяСтрока.КоличествоУпаковок = СтрокаТаблицы.PackagesCount;
		НоваяСтрока.ПроцентАвтоматическойСкидки = СтрокаТаблицы.PercentOfAutomaticDiscount;
		НоваяСтрока.ПроцентРучнойСкидки = СтрокаТаблицы.PercentOfManualDiscount;
		НоваяСтрока.СуммаАвтоматическойСкидки = СтрокаТаблицы.AmountOfAutomaticDiscount;
		НоваяСтрока.СуммаРучнойСкидки = СтрокаТаблицы.AmountOfManualDiscount;
		НоваяСтрока.СуммаВсего = СтрокаТаблицы.TotalAmount;
		НоваяСтрока.СуммаНДС = СтрокаТаблицы.VATAmount;
		НоваяСтрока.СтавкаНДС = ПолучитьСтавкуНДСИзСтроки(СтрокаТаблицы.VATRate);
		Если СтрокаТаблицы.Свойство("LineUID") Тогда
			НоваяСтрока.ИдентификаторСтроки = СтрокаТаблицы.LineUID;
		КонецЕсли;
		
		НоваяСтрока.КлючСвязи = НомерСтроки;
		НоваяСтрока.КлючСвязиУслугаАгента = 0;
		НоваяСтрока.НомерСтроки = НомерСтроки;
		
		НомерСтроки = НомерСтроки + 1;
		
	КонецЦикла;
	
	Возврат ТаблицаТоваров;
	
КонецФункции


Функция ПолучитьСтавкуНДСИзСтроки(СтавкаНДССтрокой)
	
	СтавкаНДССтрокой = СтрЗаменить(СтавкаНДССтрокой, "%", "");
	СтавкаНДССтрокой = СтрЗаменить(СтавкаНДССтрокой, "/", "_");
	
	Попытка
		Если ВРЕГ(СтавкаНДССтрокой) = "БЕЗНДС" ИЛИ ВРЕГ(СтавкаНДССтрокой) = "БЕЗ НДС" Тогда
			СтавкаНДС = Справочники.СтавкиНДС.ПолучитьСтавкуНДСБезНДС();
		ИначеЕсли Не СтрНайти(СтавкаНДССтрокой, "12") = 0 Тогда
			СтавкаНДС = Справочники.СтавкиНДС.ПолучитьСтавкуНДСПоЗначению(12);
		Иначе
			СтавкаНДС = Справочники.СтавкиНДС.ПолучитьСтавкуНДСПоЗначению(0);
		КонецЕсли;
	Исключение
		ОписаниеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЖурналРегистрации.ДобавитьСообщениеДляЖурналаРегистрации("СерверЛояльности.РассчитатьАвтоматическиеСкидки",,,,ОписаниеОшибки);
		СтавкаНДС = Справочники.СтавкиНДС.ПолучитьСтавкуНДСБезНДС();
	КонецПопытки;
	
	Возврат СтавкаНДС;
	
КонецФункции

Функция ПолучитьДесериализованныйМассивДисконтныхКарт(ВходящиеДанные, ИмяПараметра)
	
	МассивНомеровКарт = ВходящиеДанные[ИмяПараметра];
	МассивДисконтныхКарт = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	ИнформационныеКарты.Ссылка КАК Ссылка
		|ПОМЕСТИТЬ ВТ_НайденныеКарты
		|ИЗ
		|	Справочник.ИнформационныеКарты КАК ИнформационныеКарты
		|ГДЕ
		|	(ИнформационныеКарты.КодКарты В (&МассивНомеровКарт)
		|			ИЛИ ИнформационныеКарты.Код В (&МассивНомеровКарт))
		|	И НЕ ИнформационныеКарты.ПометкаУдаления
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Штрихкоды.Владелец
		|ИЗ
		|	РегистрСведений.Штрихкоды КАК Штрихкоды
		|ГДЕ
		|	Штрихкоды.Штрихкод В(&МассивНомеровКарт)
		|	И Штрихкоды.Владелец ССЫЛКА Справочник.ИнформационныеКарты
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ВТ_НайденныеКарты.Ссылка КАК Ссылка
		|ИЗ
		|	ВТ_НайденныеКарты КАК ВТ_НайденныеКарты";
	
	Запрос.УстановитьПараметр("МассивНомеровКарт", МассивНомеровКарт);
	
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если Не РезультатЗапроса.Пустой() Тогда
		
		Выборка	= РезультатЗапроса.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			МассивДисконтныхКарт.Добавить(Выборка.Ссылка);
		КонецЦикла;
		
	Иначе
		
		Для Каждого НомерКарты Из МассивНомеровКарт Цикл
			АлгоритмПоискаПоГУИД_РМК = СтроковыеФункцииКлиентСервер.ЭтоУникальныйИдентификатор(НомерКарты);
			Если АлгоритмПоискаПоГУИД_РМК Тогда
				ИнформационнаяКарта = Справочники.ИнформационныеКарты.ПолучитьСсылку(Новый УникальныйИдентификатор(НомерКарты));
				Если ОбщегоНазначения.СсылкаСуществует(ИнформационнаяКарта) Тогда
					МассивДисконтныхКарт.Добавить(ИнформационнаяКарта);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат МассивДисконтныхКарт;
	
КонецФункции

Функция ПолучитьДесериализованноеСсылочноеЗначение(ВходящиеДанные, ИмяПараметра, ТипЗначения)
	
	ЗначениеПараметра = Неопределено;
	
	Попытка
		СтроковоеЗначениеПараметра = ВходящиеДанные[ИмяПараметра].Ref;
		ГУИД = Новый УникальныйИдентификатор(СтроковоеЗначениеПараметра);
		Выполнить("ЗначениеПараметра = " + ТипЗначения + ".ПолучитьСсылку(ГУИД)");
		Если ЗначениеПараметра.ПолучитьОбъект() = Неопределено Тогда 
			ВызватьИсключение ОписаниеОшибки();
		КонецЕсли;
	Исключение
		Выполнить("ЗначениеПараметра = " + ТипЗначения + ".ПустаяСсылка()");
	КонецПопытки;
	
	Возврат ЗначениеПараметра;
	
КонецФункции 

Функция ПолучитьСерийныйНомерСертификата(НомерСертификата)
	
	Попытка
		
		ГУИД = Новый УникальныйИдентификатор(НомерСертификата);
		СерийныйНомер = Справочники.СерийныеНомера.ПолучитьСсылку(ГУИД);
		
	Исключение
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	СерийныеНомера.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.СерийныеНомера КАК СерийныеНомера
		|ГДЕ
		|	СерийныеНомера.Наименование = &НомерСертификата
		|	И НЕ СерийныеНомера.ПометкаУдаления";
		
		Запрос.УстановитьПараметр("НомерСертификата", НомерСертификата);
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Если Выборка.Следующий() Тогда
			СерийныйНомер = Выборка.Ссылка;
		Иначе
			СерийныйНомер = Справочники.СерийныеНомера.ПустаяСсылка();
		КонецЕсли;
		
	КонецПопытки;
	
	Возврат СерийныйНомер;
	
КонецФункции

// Дополняет сериализованную структуру данными о скидках
//
// Параметры:
//  СериализованнаяСтруктураСкидок - Структура - см. СериализоватьРезультатРасчета()
//  ТаблицаСкидокНаценок - ТаблицаЗначений - 
//
// Возвращаемое значение:
//  Структура - содержит в себе данные передаваемого параметра СериализованнаяСтруктураСкидок,
//				дополненного структурой DiscountsList
//
Процедура ДополнитьСтруктуруСкидокТаблицейСкидокНаценок(СериализованнаяСтруктураСкидок, ТаблицаСкидокНаценок)
	
	МассивСкидокНаценок = Новый Массив;
	
	Для каждого СтрокаСкидкиНаценки Из ТаблицаСкидокНаценок Цикл
	
		СтруктураСтроки = Новый Структура; 
		СтруктураСсылки = ПолучитьСтруктуруСсылки(СтрокаСкидкиНаценки.СкидкаНаценка);
		
		СтруктураСтроки.Вставить("KeyRelation", СтрокаСкидкиНаценки.КлючСвязи);
		СтруктураСтроки.Вставить("Discount", СтруктураСсылки);
		СтруктураСтроки.Вставить("DiscountValue", 0);
		СтруктураСтроки.Вставить("Amount", СтрокаСкидкиНаценки.Сумма);
		СтруктураСтроки.Вставить("MinimalPriceRestriction", СтрокаСкидкиНаценки.ОграниченаМинимальнойЦеной);
		СтруктураСтроки.Вставить("Comment", НСтр("ru=''"));
		СтруктураСтроки.Вставить("LineUID", СтрокаСкидкиНаценки.ИдентификаторСтроки);
		
		МассивСкидокНаценок.Добавить(СтруктураСтроки);
	
	КонецЦикла;
	
	СериализованнаяСтруктураСкидок.Вставить("DiscountsList", МассивСкидокНаценок);
	
КонецПроцедуры

// Дополняет сериализованную структуру данными о бонусах
//
// Параметры:
//  СериализованнаяСтруктураСкидок - Структура - см. СериализоватьРезультатРасчета()
//  ТаблицаБонусов - ТаблицаЗначений - 
//
// Возвращаемое значение:
//  Структура - содержит в себе данные передаваемого параметра СериализованнаяСтруктураСкидок,
//				дополненного структурой Messages
//
Процедура ДополнитьСтруктуруСкидокТаблицейБонусов(СериализованнаяСтруктураСкидок, ТаблицаБонусов)
	
	МассивБонусов = Новый Массив;
	
	Для каждого СтрокаБонусов Из ТаблицаБонусов Цикл
	
		СтруктураСтроки = Новый Структура;
		СтруктураСсылкиСкидкаНаценка = ПолучитьСтруктуруСсылки(СтрокаБонусов.СкидкаНаценка);
		СтруктураСсылкиБонуснаяПрограммаЛояльности = ПолучитьСтруктуруСсылки(СтрокаБонусов.БонуснаяПрограммаЛояльности);
		
		СтруктураСтроки.Вставить("KeyRelation", СтрокаБонусов.КлючСвязи);
		СтруктураСтроки.Вставить("Discount", СтруктураСсылкиСкидкаНаценка);
		СтруктураСтроки.Вставить("BonusProgramm", СтруктураСсылкиБонуснаяПрограммаЛояльности);
		СтруктураСтроки.Вставить("BonusCount", СтрокаБонусов.КоличествоБонусныхБаллов);
		СтруктураСтроки.Вставить("AccuralDate", СтрокаБонусов.ДатаНачисления);
		СтруктураСтроки.Вставить("WriteOffDate", СтрокаБонусов.ДатаСписания);
		
		МассивБонусов.Добавить(СтруктураСтроки);
	
	КонецЦикла;
	
	СериализованнаяСтруктураСкидок.Вставить("BonusesToAccrue", МассивБонусов);
	
КонецПроцедуры

// Заполняет полученную структуру реквизитов именами реквизитов документа продажи (ЧекККМ)
//
// Параметры:
//  ИменаРеквизитов - Неопределено, Структура:
//    * ИмяРеквизитаДисконтнаяКарта - Строка
//    * ИмяРеквизитаТаблицаОплата - Строка
//    * ИмяРеквизитаПодарочныйСертификат - Строка
//    * ИмяРеквизитаСерийныйНомер - Строка
//    * ИмяРеквизитаСуммаБонусов - Строка
//    * ИмяРеквизитаТаблицаПогашенияСертификатов - Строка
//    * ИмяРеквизитаСуммаПогашенияСертификата - Строка
//
Процедура ЗаполнитьИменаРеквизитовПоставщикаДанных(ИменаРеквизитов) Экспорт
	
	ИменаРеквизитов = Новый Структура;
	ИменаРеквизитов.Вставить("ИмяРеквизитаДисконтнаяКарта", "ДисконтнаяКарта");
	ИменаРеквизитов.Вставить("ИмяРеквизитаТаблицаОплата", "Оплата");
	ИменаРеквизитов.Вставить("ИмяРеквизитаПодарочныйСертификат", "ПодарочныйСертификат");
	ИменаРеквизитов.Вставить("ИмяРеквизитаСерийныйНомер", "СерийныйНомер");
	
	ИменаРеквизитов.Вставить("ИмяРеквизитаСуммаБонусов", "СуммаБонусовВСкидках");
	
	ИменаРеквизитов.Вставить("ИмяРеквизитаТаблицаПогашенияСертификатов", "ПогашениеПодарочныхСертификатов");
	ИменаРеквизитов.Вставить("ИмяРеквизитаСуммаПогашенияСертификата", "СуммаПогашенияСертификата");
	
КонецПроцедуры

// Возвращает структуру параметраов из http запроса
//
// Параметры:
//  ВходящиеДанные - Строка - содержит строковое значение тела запроса в формате JSON.
//  Результат - Структура - содержит в себе набор параметров, которые могут быть переданы через hhtp-запрос
//    * Номенклатура 	- Строка
//    * Характеристика 				- Строка
//    * Упаковка 						- Строка
//
Процедура ПараметрыИзЗапросаПолучитьОстатки(ВходящиеДанные, Результат) Экспорт
	
	ПараметрыРасчета = Новый Структура;
	ПараметрыРасчета.Вставить("ЕстьОшибки", Ложь);
	ПараметрыРасчета.Вставить("ОписаниеОшибки", "");
	
	Попытка
	
		ЧтениеJSON = Новый ЧтениеJSON();
		ЧтениеJSON.УстановитьСтроку(ВходящиеДанные);
		ВходящиеДанныеВJSON = ПрочитатьJSON(ЧтениеJSON, , "CurrentDate", ФорматДатыJSON.ISO);
		ЧтениеJSON.Закрыть();
		
		Номенклатура = СерверЛояльностиПоставщикДанных.ПолучитьДесериализованноеСсылочноеЗначение(ВходящиеДанныеВJSON, "Item", "Справочники.Номенклатура");
		Характеристика = СерверЛояльностиПоставщикДанных.ПолучитьДесериализованноеСсылочноеЗначение(ВходящиеДанныеВJSON, "Variant", "Справочники.ХарактеристикиНоменклатуры");
		Упаковка = СерверЛояльностиПоставщикДанных.ПолучитьДесериализованноеСсылочноеЗначение(ВходящиеДанныеВJSON, "Package", "Справочники.НаборыУпаковок");
		
		ПараметрыПолученияОстатков = Новый Структура("Номенклатура, Характеристика, Упаковка", Номенклатура, Характеристика, Упаковка);
		
	Исключение
		
		ОписаниеОшибки = СтрШаблон(НСтр("ru = 'Ошибка преобразования тела запроса по причине: %1'"), ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ПараметрыРасчета.ЕстьОшибки = Истина;
		ПараметрыРасчета.ОписаниеОшибки = ОписаниеОшибки;
		
		ЗаписьЖурналаРегистрации("СерверЛояльности.АвтоматическийРасчетСкидок", , , , ОписаниеОшибки);
		
	КонецПопытки;
	
	Результат = ПараметрыПолученияОстатков;
	
КонецПроцедуры

// Возвращает данные о состоянии промокода
//
// Параметры:
//  ПараметрыМетода - Структура - содержит параметры получения остатков.
//  СтруктураОтвета - Структура - содержит данные о балансе сертификата,
//                                см. СерверЛояльностиПоставщикДанных.ПолучитьСтруктуруОтвета
//
Процедура ПолучитьОстатки(ПараметрыМетода, СтруктураОтвета) Экспорт
	
	МассивОстатков = Новый Массив;
	
	ТаблицаОстатков = ПолучитьТаблицуОстатков(ПараметрыМетода);
	
	Для Каждого СтрокаОстатков Из ТаблицаОстатков Цикл
		СтруктураОстатков = СерверЛояльностиПоставщикДанных.ПолучитьСтруктуруОстатков();
		СтруктураОстатков.LeftoverLocation = СтрокаОстатков.МестоХранения;
		СтруктураОстатков.Variant = СтрокаОстатков.Характеристика;
		СтруктураОстатков.Leftover = СтрокаОстатков.Остаток;
		СтруктураОстатков.Reserved = СтрокаОстатков.ВРезерве;
		СтруктураОстатков.FreeLeftover = СтрокаОстатков.Свободно;
		
		МассивОстатков.Добавить(СтруктураОстатков);
	КонецЦикла;
	
	СтруктураОтвета.Вставить("LeftoversList", МассивОстатков);
	
КонецПроцедуры

// Возвращает таблицу остатков
//
// Параметры:
//  ПараметрыПолученияОстатков - Структура - содержит параметры получения остатков.
//
Функция ПолучитьТаблицуОстатков(ПараметрыПолученияОстатков) Экспорт
	
	ТаблицаОстатков = Неопределено;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ТоварыНаСкладахОстатки.Склад.Магазин КАК МестоХранения,
	|	ТоварыНаСкладахОстатки.Характеристика КАК Характеристика,
	|	СУММА(ТоварыНаСкладахОстатки.КоличествоОстаток) КАК Остаток,
	|	СУММА(ТоварыНаСкладахОстатки.РезервОстаток) КАК ВРезерве,
	|	СУММА(ТоварыНаСкладахОстатки.КоличествоОстаток - ТоварыНаСкладахОстатки.РезервОстаток) КАК Свободно
	|ПОМЕСТИТЬ ВТОстатки
	|ИЗ
	|	РегистрНакопления.ТоварыНаСкладах.Остатки(, Номенклатура = &Номенклатура) КАК ТоварыНаСкладахОстатки
	|
	|СГРУППИРОВАТЬ ПО
	|	ТоварыНаСкладахОстатки.Склад.Магазин,
	|	ТоварыНаСкладахОстатки.Характеристика
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПРЕДСТАВЛЕНИЕССЫЛКИ(ВТОстатки.МестоХранения) КАК МестоХранения,
	|	ПРЕДСТАВЛЕНИЕССЫЛКИ(ВТОстатки.Характеристика) КАК Характеристика,
	|	ВТОстатки.Остаток КАК Остаток,
	|	ВТОстатки.ВРезерве КАК ВРезерве,
	|	ВТОстатки.Свободно КАК Свободно
	|ИЗ
	|	ВТОстатки КАК ВТОстатки";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Номенклатура", ПараметрыПолученияОстатков.Номенклатура);
	Запрос.УстановитьПараметр("Характеристика", ПараметрыПолученияОстатков.Характеристика);
	Запрос.УстановитьПараметр("Упаковка", ПараметрыПолученияОстатков.Упаковка);
	ТаблицаОстатков = Запрос.Выполнить().Выгрузить();
	
	Возврат ТаблицаОстатков;
	
КонецФункции

Функция ТекстЗапросаКартЛояльностиПоВладельцуКарты()
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ИнформационныеКарты.Ссылка КАК Карта,
	|	""Клиент"" КАК ТипПоиска
	|ПОМЕСТИТЬ КартыЛояльности
	|ИЗ
	|	Справочник.ИнформационныеКарты КАК ИнформационныеКарты
	|ГДЕ
	|	ИнформационныеКарты.ВладелецКарты = &ВладелецКарты 
	|	И НЕ ИнформационныеКарты.ПометкаУдаления"
	+ "
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|" + ОбщаяЧастьЗапросаКартЛояльности();
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаКартыЛояльностиПоСсылке()
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ИнформационныеКарты.Ссылка КАК Карта,
	|	"""" КАК ТипПоиска
	|ПОМЕСТИТЬ КартыЛояльности
	|ИЗ
	|	Справочник.ИнформационныеКарты КАК ИнформационныеКарты
	|ГДЕ
	|	ИнформационныеКарты.Ссылка = &ДисконтнаяКарта"
	+ "
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|" + ОбщаяЧастьЗапросаКартЛояльности();
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаКартЛояльностиПоНомеру()
	
	ТекстЗапроса =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ВложенныйЗапрос.Ссылка КАК Карта,
	|	""КодКарты"" КАК ТипПоиска,
	|	ВложенныйЗапрос.Приоритет КАК Приоритет
	|ПОМЕСТИТЬ КартыЛояльности
	|ИЗ
	|	(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		ИнформационныеКарты.Ссылка КАК Ссылка,
	|		1 КАК Приоритет
	|	ИЗ
	|		Справочник.ИнформационныеКарты КАК ИнформационныеКарты
	|	ГДЕ
	|		ИнформационныеКарты.КодКарты = &ИдентификаторКартыКлиента
	|		И НЕ ИнформационныеКарты.ПометкаУдаления
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ИнформационныеКарты.Ссылка,
	|		2
	|	ИЗ
	|		Справочник.ИнформационныеКарты КАК ИнформационныеКарты
	|	ГДЕ
	|		ИнформационныеКарты.Наименование = &ИдентификаторКартыКлиента
	|		И НЕ ИнформационныеКарты.ПометкаУдаления
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		СпрИнформационныеКарты.Ссылка,
	|		1
	|	ИЗ
	|		РегистрСведений.Штрихкоды КАК Штрихкоды
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ИнформационныеКарты КАК СпрИнформационныеКарты
	|			ПО Штрихкоды.Владелец = СпрИнформационныеКарты.Ссылка
	|	ГДЕ
	|		Штрихкоды.Штрихкод = &ИдентификаторКартыКлиента) КАК ВложенныйЗапрос
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВложенныйЗапрос.Приоритет"
	+ "
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|" + ОбщаяЧастьЗапросаКартЛояльности();
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаКартЛояльностиПоКонтактнойИнформации(СтрокаПоискаТелефона)
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ИнформационныеКартыКонтактнаяИнформация.Ссылка КАК Карта,
	|	""АдресЭП"" КАК ТипПоиска
	|ПОМЕСТИТЬ КартыЛояльности
	|ИЗ
	|	Справочник.ИнформационныеКарты.КонтактнаяИнформация КАК ИнформационныеКартыКонтактнаяИнформация
	|ГДЕ
	|	&АдресЭП <> """"
	|	И ИнформационныеКартыКонтактнаяИнформация.АдресЭП = &АдресЭП
	|	И ИнформационныеКартыКонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты)
	|	И НЕ ИнформационныеКартыКонтактнаяИнформация.Ссылка.ПометкаУдаления
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ИнформационныеКартыКонтактнаяИнформация.Ссылка,
	|	""Телефон""
	|ИЗ
	|	Справочник.ИнформационныеКарты.КонтактнаяИнформация КАК ИнформационныеКартыКонтактнаяИнформация
	|ГДЕ
	|	&ОбратныйНомер <> """"
	|	И ИнформационныеКартыКонтактнаяИнформация.ОбратныйНомерТелефона = &ОбратныйНомер
	|	И ИнформационныеКартыКонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Телефон)
	|	И НЕ ИнформационныеКартыКонтактнаяИнформация.Ссылка.ПометкаУдаления
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ИнформационныеКарты.Ссылка,
	|	""Телефон""
	|ИЗ
	|	Справочник.ИнформационныеКарты КАК ИнформационныеКарты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ФизическиеЛица.КонтактнаяИнформация КАК ФизическиеЛицаКонтактнаяИнформация
	|		ПО ИнформационныеКарты.ВладелецКарты = ФизическиеЛицаКонтактнаяИнформация.Ссылка
	|			И (ФизическиеЛицаКонтактнаяИнформация.ОбратныйНомерТелефона = &ОбратныйНомер)
	|			И (&ОбратныйНомер <> """")
	|			И (ФизическиеЛицаКонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Телефон))
	|			И (НЕ ФизическиеЛицаКонтактнаяИнформация.Ссылка.ПометкаУдаления)
	|			И (НЕ ИнформационныеКарты.ПометкаУдаления)
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ИнформационныеКарты.Ссылка,
	|	""АдресЭП""
	|ИЗ
	|	Справочник.ИнформационныеКарты КАК ИнформационныеКарты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ФизическиеЛица.КонтактнаяИнформация КАК ФизическиеЛицаКонтактнаяИнформация
	|		ПО ИнформационныеКарты.ВладелецКарты = ФизическиеЛицаКонтактнаяИнформация.Ссылка
	|			И (ФизическиеЛицаКонтактнаяИнформация.АдресЭП = &АдресЭП)
	|			И (&АдресЭП <> """")
	|			И (ФизическиеЛицаКонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты))
	|			И (НЕ ФизическиеЛицаКонтактнаяИнформация.Ссылка.ПометкаУдаления)
	|			И (НЕ ИнформационныеКарты.ПометкаУдаления)
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ИнформационныеКарты.Ссылка,
	|	""Телефон""
	|ИЗ
	|	Справочник.ИнформационныеКарты КАК ИнформационныеКарты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Контрагенты.КонтактнаяИнформация КАК КонтрагентыКонтактнаяИнформация
	|		ПО ИнформационныеКарты.ВладелецКарты = КонтрагентыКонтактнаяИнформация.Ссылка
	|			И (НЕ ИнформационныеКарты.ПометкаУдаления)
	|			И (&ОбратныйНомер <> """")
	|			И (КонтрагентыКонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Телефон))
	|			И (НЕ КонтрагентыКонтактнаяИнформация.Ссылка.ПометкаУдаления)
	|			И (КонтрагентыКонтактнаяИнформация.ОбратныйНомерТелефона = &ОбратныйНомер)
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ИнформационныеКарты.Ссылка,
	|	""АдресЭП""
	|ИЗ
	|	Справочник.ИнформационныеКарты КАК ИнформационныеКарты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Контрагенты.КонтактнаяИнформация КАК КонтрагентыКонтактнаяИнформация
	|		ПО ИнформационныеКарты.ВладелецКарты = КонтрагентыКонтактнаяИнформация.Ссылка
	|			И (НЕ ИнформационныеКарты.ПометкаУдаления)
	|			И (&АдресЭП <> """")
	|			И (КонтрагентыКонтактнаяИнформация.АдресЭП = &АдресЭП)
	|			И (НЕ КонтрагентыКонтактнаяИнформация.Ссылка.ПометкаУдаления)
	|			И (КонтрагентыКонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты))"
	+ "
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|" + ОбщаяЧастьЗапросаКартЛояльности();
	
	Если ЗначениеЗаполнено(СтрокаПоискаТелефона) И Прав(СтрокаПоискаТелефона, 1) = "%" Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ОбратныйНомерТелефона = &ОбратныйНомер",
			"ОбратныйНомерТелефона ПОДОБНО &ОбратныйНомер");
	КонецЕсли;
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ОбщаяЧастьЗапросаКартЛояльности()
	
КусокЗапроса =
	"ВЫБРАТЬ
	|	ИнформационныеКарты.Ссылка КАК Ссылка,
	|	КартыЛояльности.ТипПоиска КАК ТипПоиска,
	|	ЕСТЬNULL(ИнформационныеКарты.ВладелецКарты, ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)) КАК ВладелецКарты,
	|	МИНИМУМ(ИнфКартыКонтактнаяИнформацияТелефон.НомерСтроки) КАК НомерСтрокиКартаТелефон,
	|	МИНИМУМ(ИнфКартыКонтактнаяИнформацияАдресЭП.НомерСтроки) КАК НомерСтрокиКартаАдресЭП,
	|	МИНИМУМ(ФизЛицаКонтактнаяИнформацияТелефон.НомерСтроки) КАК НомерСтрокиФизЛицоТелефон,
	|	МИНИМУМ(ФизЛицаКонтактнаяИнформацияАдресЭП.НомерСтроки) КАК НомерСтрокиФизЛицоАдресЭП,
	|	МИНИМУМ(КонтрагентыКонтактнаяИнформацияТелефон.НомерСтроки) КАК НомерСтрокиКонтрагентТелефон,
	|	МИНИМУМ(КонтрагентыКонтактнаяИнформацияАдресЭП.НомерСтроки) КАК НомерСтрокиКонтрагентАдресЭП,
	|	МАКСИМУМ(ЕСТЬNULL(Штрихкоды.Штрихкод, """")) КАК КодКартыШтрихкод
	|ПОМЕСТИТЬ КартыНомераСтрокКИ
	|ИЗ
	|	КартыЛояльности КАК КартыЛояльности
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ИнформационныеКарты КАК ИнформационныеКарты
	|		ПО КартыЛояльности.Карта = ИнформационныеКарты.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ИнформационныеКарты.КонтактнаяИнформация КАК ИнфКартыКонтактнаяИнформацияТелефон
	|		ПО (ИнформационныеКарты.Ссылка = ИнфКартыКонтактнаяИнформацияТелефон.Ссылка)
	|			И (ИнфКартыКонтактнаяИнформацияТелефон.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Телефон))
	|			И (НЕ ИнфКартыКонтактнаяИнформацияТелефон.НомерТелефона = """")
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ИнформационныеКарты.КонтактнаяИнформация КАК ИнфКартыКонтактнаяИнформацияАдресЭП
	|		ПО (ИнформационныеКарты.Ссылка = ИнфКартыКонтактнаяИнформацияАдресЭП.Ссылка)
	|			И (ИнфКартыКонтактнаяИнформацияАдресЭП.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты))
	|			И (НЕ ИнфКартыКонтактнаяИнформацияАдресЭП.АдресЭП = """")
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ФизическиеЛица.КонтактнаяИнформация КАК ФизЛицаКонтактнаяИнформацияТелефон
	|		ПО (ИнформационныеКарты.ВладелецКарты = ФизЛицаКонтактнаяИнформацияТелефон.Ссылка)
	|			И (ФизЛицаКонтактнаяИнформацияТелефон.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Телефон))
	|			И (НЕ ФизЛицаКонтактнаяИнформацияТелефон.НомерТелефона = """")
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ФизическиеЛица.КонтактнаяИнформация КАК ФизЛицаКонтактнаяИнформацияАдресЭП
	|		ПО (ИнформационныеКарты.ВладелецКарты = ФизЛицаКонтактнаяИнформацияАдресЭП.Ссылка)
	|			И (ФизЛицаКонтактнаяИнформацияАдресЭП.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты))
	|			И (НЕ ФизЛицаКонтактнаяИнформацияАдресЭП.АдресЭП = """")
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Контрагенты.КонтактнаяИнформация КАК КонтрагентыКонтактнаяИнформацияТелефон
	|		ПО (ИнформационныеКарты.ВладелецКарты = КонтрагентыКонтактнаяИнформацияТелефон.Ссылка)
	|			И (КонтрагентыКонтактнаяИнформацияТелефон.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Телефон))
	|			И (НЕ КонтрагентыКонтактнаяИнформацияТелефон.НомерТелефона = """")
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Контрагенты.КонтактнаяИнформация КАК КонтрагентыКонтактнаяИнформацияАдресЭП
	|		ПО (ИнформационныеКарты.ВладелецКарты = КонтрагентыКонтактнаяИнформацияАдресЭП.Ссылка)
	|			И (КонтрагентыКонтактнаяИнформацияАдресЭП.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты))
	|			И (НЕ КонтрагентыКонтактнаяИнформацияАдресЭП.АдресЭП = """")
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.Штрихкоды КАК Штрихкоды
	|		ПО (ИнформационныеКарты.Ссылка = Штрихкоды.Владелец)
	|
	|СГРУППИРОВАТЬ ПО
	|	ИнформационныеКарты.Ссылка,
	|	КартыЛояльности.ТипПоиска,
	|	ЕСТЬNULL(ИнформационныеКарты.ВладелецКарты, ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КартыЛояльности.Карта КАК Карта,
	|	СУММА(ЕСТЬNULL(ПродажиПоДисконтнымКартамОбороты.СуммаОборот, 0)) КАК СуммаПродаж
	|ПОМЕСТИТЬ КартыПродажи
	|ИЗ
	|	КартыЛояльности КАК КартыЛояльности
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ПродажиПоДисконтнымКартам.Обороты(
	|				,
	|				&ПериодЗапроса,
	|				,
	|				ДисконтнаяКарта В
	|					(ВЫБРАТЬ
	|						КартыЛояльности.Карта КАК Карта
	|					ИЗ
	|						КартыЛояльности КАК КартыЛояльности)) КАК ПродажиПоДисконтнымКартамОбороты
	|		ПО КартыЛояльности.Карта = ПродажиПоДисконтнымКартамОбороты.ДисконтнаяКарта
	|
	|СГРУППИРОВАТЬ ПО
	|	КартыЛояльности.Карта
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КартыНомераСтрокКИ.Ссылка КАК КартаСсылка,
	|	КартыНомераСтрокКИ.ТипПоиска КАК ТипПоиска,
	|	КартыНомераСтрокКИ.ВладелецКарты КАК КлиентСсылка,
	|	ЕСТЬNULL(СпрФизическиеЛица.Наименование, ЕСТЬNULL(СпрКонтрагенты.Наименование, """")) КАК НаименованиеКлиента,
	|	ВЫБОР
	|		КОГДА СпрКонтрагенты.ЮрФизЛицо В (ЗНАЧЕНИЕ(Перечисление.ЮрФизЛицо.ЮрЛицо), ЗНАЧЕНИЕ(Перечисление.ЮрФизЛицо.ЮрЛицоНеРезидент))
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ЮрФизЛицо.ЮрЛицо)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ЮрФизЛицо.ФизЛицо)
	|	КОНЕЦ КАК ВидКонтрагента,
	|	ЕСТЬNULL(СпрФизическиеЛица.ДатаРождения, ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)) КАК ДатаРождения,
	|	ЕСТЬNULL(ИнфКартыКонтактнаяИнформацияТелефон.НомерТелефона, ЕСТЬNULL(ФизЛицаКонтактнаяИнформацияТелефон.НомерТелефона, ЕСТЬNULL(КонтрагентыКонтактнаяИнформацияТелефон.НомерТелефона, """"))) КАК НомерТелефона,
	|	ЕСТЬNULL(ИнфКартыКонтактнаяИнформацияТелефон.АдресЭП, ЕСТЬNULL(ФизЛицаКонтактнаяИнформацияТелефон.АдресЭП, ЕСТЬNULL(КонтрагентыКонтактнаяИнформацияТелефон.АдресЭП, """"))) КАК АдресЭП,
	|	КартыНомераСтрокКИ.КодКартыШтрихкод КАК КодКартыШтрихкод,
	|	СпрИнформационныеКарты.КодКарты КАК КодКартыМагнитный,
	|	ВЫБОР
	|		КОГДА СостояниеБонусовСерверЛояльности.ДисконтнаяКарта ЕСТЬ NULL
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК БонусыЗаблокированы,
	|	ЕСТЬNULL(СпрБонусныеПрограммыЛояльности.МаксимальныйПроцентОплатыБонусами, 0) КАК МаксимальныйПроцентОплаты,
	|	ЕСТЬNULL(СпрБонусныеПрограммыЛояльности.КурсКонвертацииБонусовВВалюту, 1) КАК КурсКонвертацииБонусов,
	|	ЕСТЬNULL(КартыПродажи.СуммаПродаж, 0) КАК ПродажиОборот,
	|	ЕСТЬNULL(СпрБонусныеПрограммыЛояльности.Наименование, """") КАК НаименованиеБонуснойПрограммы,
	|	ЕСТЬNULL(СпрБонусныеПрограммыЛояльности.Ссылка, ЗНАЧЕНИЕ(справочник.БонусныеПрограммыЛояльности.Пустаяссылка)) КАК БонуснаяПрограмма,
	|	ЕСТЬNULL(ВидыДисконтныхКарт.Наименование, """") КАК НаименованиеВидДисконтнойКарты
	|ИЗ
	|	КартыНомераСтрокКИ КАК КартыНомераСтрокКИ
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Контрагенты КАК СпрКонтрагенты
	|		ПО КартыНомераСтрокКИ.ВладелецКарты = СпрКонтрагенты.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ФизическиеЛица КАК СпрФизическиеЛица
	|		ПО КартыНомераСтрокКИ.ВладелецКарты = СпрФизическиеЛица.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ИнформационныеКарты.КонтактнаяИнформация КАК ИнфКартыКонтактнаяИнформацияТелефон
	|		ПО КартыНомераСтрокКИ.Ссылка = ИнфКартыКонтактнаяИнформацияТелефон.Ссылка
	|			И КартыНомераСтрокКИ.НомерСтрокиКартаТелефон = ИнфКартыКонтактнаяИнформацияТелефон.НомерСтроки
	|			И (ИнфКартыКонтактнаяИнформацияТелефон.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Телефон))
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ИнформационныеКарты.КонтактнаяИнформация КАК ИнфКартыКонтактнаяИнформацияАдресЭП
	|		ПО КартыНомераСтрокКИ.Ссылка = ИнфКартыКонтактнаяИнформацияАдресЭП.Ссылка
	|			И КартыНомераСтрокКИ.НомерСтрокиКартаАдресЭП = ИнфКартыКонтактнаяИнформацияАдресЭП.НомерСтроки
	|			И (ИнфКартыКонтактнаяИнформацияАдресЭП.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты))
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ФизическиеЛица.КонтактнаяИнформация КАК ФизЛицаКонтактнаяИнформацияТелефон
	|		ПО КартыНомераСтрокКИ.ВладелецКарты = ФизЛицаКонтактнаяИнформацияТелефон.Ссылка
	|			И КартыНомераСтрокКИ.НомерСтрокиФизЛицоТелефон = ФизЛицаКонтактнаяИнформацияТелефон.НомерСтроки
	|			И (ФизЛицаКонтактнаяИнформацияТелефон.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Телефон))
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ФизическиеЛица.КонтактнаяИнформация КАК ФизЛицаКонтактнаяИнформацияАдресЭП
	|		ПО КартыНомераСтрокКИ.ВладелецКарты = ФизЛицаКонтактнаяИнформацияАдресЭП.Ссылка
	|			И КартыНомераСтрокКИ.НомерСтрокиФизЛицоАдресЭП = ФизЛицаКонтактнаяИнформацияАдресЭП.НомерСтроки
	|			И (ФизЛицаКонтактнаяИнформацияАдресЭП.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты))
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Контрагенты.КонтактнаяИнформация КАК КонтрагентыКонтактнаяИнформацияТелефон
	|		ПО КартыНомераСтрокКИ.ВладелецКарты = КонтрагентыКонтактнаяИнформацияТелефон.Ссылка
	|			И КартыНомераСтрокКИ.НомерСтрокиКонтрагентТелефон = КонтрагентыКонтактнаяИнформацияТелефон.НомерСтроки
	|			И (КонтрагентыКонтактнаяИнформацияТелефон.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Телефон))
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Контрагенты.КонтактнаяИнформация КАК КонтрагентыКонтактнаяИнформацияАдресЭП
	|		ПО КартыНомераСтрокКИ.ВладелецКарты = КонтрагентыКонтактнаяИнформацияАдресЭП.Ссылка
	|			И КартыНомераСтрокКИ.НомерСтрокиКонтрагентАдресЭП = КонтрагентыКонтактнаяИнформацияАдресЭП.НомерСтроки
	|			И (КонтрагентыКонтактнаяИнформацияАдресЭП.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты))
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ИнформационныеКарты КАК СпрИнформационныеКарты
	|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.БонусныеПрограммыЛояльности КАК СпрБонусныеПрограммыЛояльности
	|			ПО СпрИнформационныеКарты.БонуснаяПрограммаЛояльности = СпрБонусныеПрограммыЛояльности.Ссылка
	|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыДисконтныхКарт КАК ВидыДисконтныхКарт
	|			ПО СпрИнформационныеКарты.ВидДисконтнойКарты = ВидыДисконтныхКарт.Ссылка
	|		ПО КартыНомераСтрокКИ.Ссылка = СпрИнформационныеКарты.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СостояниеБонусовСерверЛояльности КАК СостояниеБонусовСерверЛояльности
	|		ПО КартыНомераСтрокКИ.Ссылка = СостояниеБонусовСерверЛояльности.ДисконтнаяКарта
	|		ЛЕВОЕ СОЕДИНЕНИЕ КартыПродажи КАК КартыПродажи
	|		ПО КартыНомераСтрокКИ.Ссылка = КартыПродажи.Карта";
	
	Возврат КусокЗапроса;
	
КонецФункции

Функция ПодготовитьСтрокуПоискаПоНомеруТелефона(СтрокаПоискаТелефона)
	
	РезультатФункции = "";
	ДлинаНомераБезКодаСтраны = 10;
	МинимальнаяДлинаЧастиТелефона = 4;
	КодыСтраны = НСтр("ru = '78'");
	ОбратныйНомер = ПолучитьСтрокуЦифрВОбратномПорядке(СтрокаПоискаТелефона);
	ДлинаОбратногоНомера = СтрДлина(ОбратныйНомер);
	Если СтрНайти(СтрокаПоискаТелефона, "*") = 1 Тогда
		Если ДлинаОбратногоНомера = ДлинаНомераБезКодаСтраны Тогда
			
			РезультатФункции = ОбратныйНомер;
			
		ИначеЕсли ДлинаОбратногоНомера >= МинимальнаяДлинаЧастиТелефона
				И ДлинаОбратногоНомера < ДлинаНомераБезКодаСтраны Тогда
				
			РезультатФункции = СтрШаблон("%1%2", ОбратныйНомер, "%");
			
		КонецЕсли;
	ИначеЕсли ДлинаОбратногоНомера = ДлинаНомераБезКодаСтраны Тогда
		РезультатФункции = ОбратныйНомер;
	ИначеЕсли ДлинаОбратногоНомера = ДлинаНомераБезКодаСтраны + 1
			И СтрНайти(КодыСтраны, Прав(ОбратныйНомер, 1)) > 0 Тогда
		РезультатФункции = Лев(ОбратныйНомер, ДлинаНомераБезКодаСтраны);
	КонецЕсли;
	
	Возврат РезультатФункции;
	
КонецФункции

Процедура НайтиКартуЛояльностиПоСсылке(КартаКлиента, СтруктураОтвета)
	
	ЗапросКарт = Новый Запрос;
	ЗапросКарт.Текст = ТекстЗапросаКартыЛояльностиПоСсылке();
	ЗапросКарт.УстановитьПараметр("ДисконтнаяКарта", КартаКлиента);
	ЗапросКарт.УстановитьПараметр("ПериодЗапроса", КонецДня(ТекущаяДатаСеанса()));
	ЗаполнитьОписанияКартПоРезультатуЗапроса(ЗапросКарт, СтруктураОтвета);
	
КонецПроцедуры

Процедура НайтиКартуЛояльностиПоВладельцу(ВладелецКарты, СтруктураОтвета)
	
	ЗапросКарт = Новый Запрос;
	ЗапросКарт.Текст = ТекстЗапросаКартЛояльностиПоВладельцуКарты();
	ЗапросКарт.УстановитьПараметр("ВладелецКарты", ВладелецКарты);
	ЗапросКарт.УстановитьПараметр("ПериодЗапроса", КонецДня(ТекущаяДатаСеанса()));
	ЗаполнитьОписанияКартПоРезультатуЗапроса(ЗапросКарт, СтруктураОтвета);
	
КонецПроцедуры

Процедура НайтиКартуЛояльностиПоНомеруКарты(ИдентификаторКартыКлиента, СтруктураОтвета)

	ЗапросКарт = Новый Запрос;
	ЗапросКарт.Текст = ТекстЗапросаКартЛояльностиПоНомеру();
	ЗапросКарт.УстановитьПараметр("ИдентификаторКартыКлиента", ИдентификаторКартыКлиента);
	ЗапросКарт.УстановитьПараметр("ПериодЗапроса", КонецДня(ТекущаяДатаСеанса()));
	ЗаполнитьОписанияКартПоРезультатуЗапроса(ЗапросКарт, СтруктураОтвета);
	
КонецПроцедуры

Процедура НайтиКартыЛояльностиПоКонтактнойинформации(СтрокаПоискаТелефона, АдресЭП, СтруктураОтвета)
	
	ЗапросКарт = Новый Запрос;
	ЗапросКарт.Текст = ТекстЗапросаКартЛояльностиПоКонтактнойИнформации(СтрокаПоискаТелефона);
	ЗапросКарт.УстановитьПараметр("ОбратныйНомер", СтрокаПоискаТелефона);
	ЗапросКарт.УстановитьПараметр("АдресЭП", АдресЭП);
	ЗапросКарт.УстановитьПараметр("ПериодЗапроса", КонецДня(ТекущаяДатаСеанса()));
	ЗаполнитьОписанияКартПоРезультатуЗапроса(ЗапросКарт, СтруктураОтвета);
	
КонецПроцедуры

Процедура ЗаполнитьОписанияКартПоРезультатуЗапроса(ЗапросКарт, СтруктураОтвета)
	
	РезультатЗапроса = ЗапросКарт.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда
		ВыборкаКарт = РезультатЗапроса.Выбрать();
		Пока ВыборкаКарт.Следующий() Цикл
			
			ОписаниеКарты = СерверЛояльностиПоставщикДанных.СтруктураКартыЛояльности();
			ЗаполнитьОписаниеКарты(ОписаниеКарты, ВыборкаКарт);
			
			СтруктураОтвета.LoyaltyCardsList.Добавить(ОписаниеКарты);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьОписаниеКарты(ОписаниеКарты, ЭлементВыборки)
	
	ОписаниеКарты.ClientName = ЭлементВыборки.НаименованиеКлиента;
	ОписаниеКарты.IsPerson = (ЭлементВыборки.ВидКонтрагента = Перечисления.ЮрФизЛицо.ФизЛицо);
	ОписаниеКарты.DateOfBirth = ЭлементВыборки.ДатаРождения;
	ОписаниеКарты.Phone = ЭлементВыборки.НомерТелефона;
	ОписаниеКарты.Email = ЭлементВыборки.АдресЭП;
	ОписаниеКарты.Barcode = ЭлементВыборки.КодКартыШтрихкод;
	ОписаниеКарты.MagneticCode = ЭлементВыборки.КодКартыМагнитный;
	ОписаниеКарты.CardGUID = СокрЛП(ЭлементВыборки.КартаСсылка.УникальныйИдентификатор());
	Если ЗначениеЗаполнено(ЭлементВыборки.КлиентСсылка) Тогда
		ОписаниеКарты.ClientGUID = СокрЛП(ЭлементВыборки.КлиентСсылка.УникальныйИдентификатор());
	КонецЕсли;
	ОписаниеКарты.IsBlocked = ЭлементВыборки.БонусыЗаблокированы;
	Если ОписаниеКарты.IsBlocked Тогда
		ОписаниеКарты.BonusData.PaymentPercent = ЭлементВыборки.МаксимальныйПроцентОплаты;
		ОписаниеКарты.BonusData.BonusRate = ЭлементВыборки.КурсКонвертацииБонусов;
	Иначе
		ЗаполнитьДанныеОБонусах(ЭлементВыборки.КартаСсылка, ОписаниеКарты.BonusData);
	КонецЕсли;
	ОписаниеКарты.SellCount = ЭлементВыборки.ПродажиОборот;
	ОписаниеКарты.SearchType = ЭлементВыборки.ТипПоиска;
	ОписаниеКарты.TypeCard = ЭлементВыборки.НаименованиеВидДисконтнойКарты;
	ОписаниеКарты.BonusData.BonusGUID = СокрЛП(ЭлементВыборки.БонуснаяПрограмма.УникальныйИдентификатор());
	ОписаниеКарты.BonusData.BonusName = ЭлементВыборки.НаименованиеБонуснойПрограммы;
	
КонецПроцедуры

Процедура ДополнитьСтруктуруСкидокДаннымиКарты(СериализованнаяСтруктураСкидок, КартаКлиента)
	
	ДанныеКарты = Новый Структура("CardNotFound,LoyaltyCard", Истина, Неопределено);
	Если ЗначениеЗаполнено(КартаКлиента) Тогда
		ЗапросКарты = Новый Запрос;
		ЗапросКарты.Текст = ТекстЗапросаКартыЛояльностиПоСсылке();
		ЗапросКарты.УстановитьПараметр("ДисконтнаяКарта", КартаКлиента);
		РезультатЗапроса = ЗапросКарты.Выполнить();
		Если Не РезультатЗапроса.Пустой() Тогда
			ВыборкаКарты = РезультатЗапроса.Выбрать();
			ВыборкаКарты.Следующий();
			
			ОписаниеКарты = СерверЛояльностиПоставщикДанных.СтруктураКартыЛояльности();
			ЗаполнитьОписаниеКарты(ОписаниеКарты, ВыборкаКарты);
			ДанныеКарты.CardNotFound = Ложь;
			ДанныеКарты.LoyaltyCard = ОписаниеКарты;
		КонецЕсли;
	КонецЕсли;
	СериализованнаяСтруктураСкидок.Вставить("LoyaltyCardDescription", ДанныеКарты);
	
КонецПроцедуры

Функция ПолучитьКартуПоУникальномуИдентификатору(СтрокаУникальногоИдентификатора)
	
	УстановитьПривилегированныйРежим(Истина);
	
	РезультатФункции = Неопределено;
	Если ЗначениеЗаполнено(СтрокаУникальногоИдентификатора)
			И Не СтрокаУникальногоИдентификатора = ПустойУникальныйИдентификатор() Тогда
			
		РезультатФункции
			= Справочники.ИнформационныеКарты.ПолучитьСсылку(Новый УникальныйИдентификатор(СтрокаУникальногоИдентификатора));
			
	КонецЕсли;
	
	Возврат РезультатФункции;
	
КонецФункции

Функция ПолучитьВладельцаКартыПоУникальномуИдентификатору(СтрокаУникальногоИдентификатора)
	
	УстановитьПривилегированныйРежим(Истина);
	
	РезультатФункции = Неопределено;
	Если ЗначениеЗаполнено(СтрокаУникальногоИдентификатора)
			И Не СтрокаУникальногоИдентификатора = ПустойУникальныйИдентификатор() Тогда
			
		УникальныйГУИД = Новый УникальныйИдентификатор(СтрокаУникальногоИдентификатора);
		РезультатФункции = Справочники.Контрагенты.ПолучитьСсылку(УникальныйГУИД);
		Если Не ОбщегоНазначения.СсылкаСуществует(РезультатФункции) Тогда
			РезультатФункции = Справочники.ФизическиеЛица.ПолучитьСсылку(УникальныйГУИД);
		КонецЕсли;
			
	КонецЕсли;
	
	Возврат РезультатФункции;
	
КонецФункции

Функция ПустойУникальныйИдентификатор()
	Возврат "00000000-0000-0000-0000-000000000000" // АПК:1297 Не локализуется
КонецФункции

Функция ПолучитьСтрокуЦифрВОбратномПорядке(ИсходнаяСтрока)
	
	РезультатФункции = "";
	
	ДлинаИсходнойСтроки = СтрДлина(ИсходнаяСтрока);
	ИндексСимвола = 0;
	Пока ИндексСимвола < ДлинаИсходнойСтроки Цикл
		ТекущийСимвол = Сред(ИсходнаяСтрока, ДлинаИсходнойСтроки - ИндексСимвола, 1);
		Если СтрНайти("0123456789", ТекущийСимвол) > 0 Тогда
			РезультатФункции = РезультатФункции + ТекущийСимвол;
		КонецЕсли;
		ИндексСимвола = ИндексСимвола + 1;
	КонецЦикла;
	
	Возврат РезультатФункции;
	
КонецФункции

Функция ТекстЗапросаФизическогоЛицаПоОбратномуНомеруТелефона()
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	ФизическиеЛицаКонтактнаяИнформация.Ссылка КАК Клиент
	|ИЗ
	|	Справочник.ФизическиеЛица.КонтактнаяИнформация КАК ФизическиеЛицаКонтактнаяИнформация
	|ГДЕ
	|	ФизическиеЛицаКонтактнаяИнформация.ОбратныйНомерТелефона = &ОбратныйНомер
	|	И ФизическиеЛицаКонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Телефон)
	|	И НЕ ФизическиеЛицаКонтактнаяИнформация.Ссылка.ПометкаУдаления";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаФизическогоЛицаСТелефономПоАдресуЭП()
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	ФизическиеЛицаКонтактнаяИнформацияАдресЭП.Ссылка КАК Клиент,
	|	ЕСТЬNULL(ФизическиеЛицаКонтактнаяИнформацияТелефон.ОбратныйНомерТелефона, """") КАК ОбратныйНомерТелефона
	|ИЗ
	|	Справочник.ФизическиеЛица.КонтактнаяИнформация КАК ФизическиеЛицаКонтактнаяИнформацияАдресЭП
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ФизическиеЛица.КонтактнаяИнформация КАК ФизическиеЛицаКонтактнаяИнформацияТелефон
	|		ПО ФизическиеЛицаКонтактнаяИнформацияАдресЭП.Ссылка = ФизическиеЛицаКонтактнаяИнформацияТелефон.Ссылка
	|			И (ФизическиеЛицаКонтактнаяИнформацияТелефон.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Телефон))
	|			И (НЕ ФизическиеЛицаКонтактнаяИнформацияТелефон.ОбратныйНомерТелефона = """")
	|ГДЕ
	|	ФизическиеЛицаКонтактнаяИнформацияАдресЭП.АдресЭП = &АдресЭП
	|	И НЕ ФизическиеЛицаКонтактнаяИнформацияАдресЭП.Ссылка.ПометкаУдаления
	|	И ФизическиеЛицаКонтактнаяИнформацияАдресЭП.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты)";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ПолучитьДатуРожденияВладельцаКарты(ВладелецКарты)
	
	ДатаРождения = Дата(1,1,1);

	Если ЗначениеЗаполнено(ВладелецКарты) Тогда
		ТипВладелеца = ТипЗнч(ВладелецКарты);
		Если ТипВладелеца = Тип("СправочникСсылка.ФизическиеЛица") Тогда
			ДатаРождения = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВладелецКарты, "ДатаРождения");
		ИначеЕсли ТипВладелеца = Тип("СправочникСсылка.Контрагенты") Тогда
			ЗапросДаты = Новый Запрос;
			ЗапросДаты.Текст =
			"ВЫБРАТЬ
			|	СпрФизическиеЛица.ДатаРождения КАК ДатаРождения
			|ИЗ
			|	Справочник.Контрагенты КАК СпрКонтрагенты
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ФизическиеЛица КАК СпрФизическиеЛица
			|		ПО СпрКонтрагенты.ФизЛицо = СпрФизическиеЛица.Ссылка
			|ГДЕ
			|	СпрКонтрагенты.Ссылка = &ВладелецКарты";
			ЗапросДаты.УстановитьПараметр("ВладелецКарты", ВладелецКарты);
			РезультатЗапроса = ЗапросДаты.Выполнить();
			Если Не РезультатЗапроса.Пустой() Тогда
				ВыборкаДаты = РезультатЗапроса.Выбрать();
				ВыборкаДаты.Следующий();
				ДатаРождения = ВыборкаДаты.ДатаРождения;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ДатаРождения;
	
КонецФункции

// Функция преобразует дерево значений в таблицу значений.
//
Функция ДеревоЗначенийВТаблицуЗначений(Дерево, Таблица = Неопределено) Экспорт
	
	Если Таблица = Неопределено Тогда
		
		Таблица = Новый ТаблицаЗначений;
		
		Для Каждого Колонка Из Дерево.Колонки Цикл
			Таблица.Колонки.Добавить(Колонка.Имя, Колонка.ТипЗначения);
		КонецЦикла;
		
	КонецЕсли;
	
	Для Каждого СтрокаДерева Из Дерево.Строки Цикл

		НоваяСтрока = Таблица.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаДерева);
		
		Если СтрокаДерева.Строки.Количество() > 0 Тогда
			ДеревоЗначенийВТаблицуЗначений(СтрокаДерева, Таблица);
		КонецЕсли;

	КонецЦикла;
	
	Возврат Таблица;
КонецФункции

// Заполняет список скидок, зависящих от выбранной оплаты
//
// Параметры:
//  Результат - Неопределено, ТаблицаЗначений - возвращаемое значение
//
Процедура ЗаполнитьТаблицуСкидокЗависящихОтВидаОплаты(Результат) Экспорт
	
	Если Результат = Неопределено Тогда
		ТипВидаОплаты = Новый ОписаниеТипов("ПеречислениеСсылка.ВидыОплатСерверЛояльности");
		ТипСкидки = Новый ОписаниеТипов("СправочникСсылка.СкидкиНаценки");
		ТаблицаСкидокПоВидамОплаты = Новый ТаблицаЗначений();
		ТаблицаСкидокПоВидамОплаты.Колонки.Добавить("ВидОплаты", ТипВидаОплаты);
		ТаблицаСкидокПоВидамОплаты.Колонки.Добавить("СкидкаНаценка", ТипСкидки);
		Результат = ТаблицаСкидокПоВидамОплаты;
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьДесериализованнуюТаблицуБонусныхКарт(ВходящиеДанные, ИмяПараметра)
	
	ОписаниеТиповЧисло = Новый ОписаниеТипов("Число", , , Новый КвалификаторыЧисла(15,2));
	
	ТаблицаБонусныхКарт = Новый ТаблицаЗначений;
	ТаблицаБонусныхКарт.Колонки.Добавить("БонуснаяКарта", Новый ОписаниеТипов("СправочникСсылка.ИнформационныеКарты"));
	ТаблицаБонусныхКарт.Колонки.Добавить("Количество", ОписаниеТиповЧисло);
	
	МассивСтрокТаблицы = ВходящиеДанные[ИмяПараметра];
	
	Для каждого СтрокаТаблицы Из МассивСтрокТаблицы Цикл
		
		НоваяСтрока = ТаблицаБонусныхКарт.Добавить();
		
		ДисконтнаяКарта = Справочники.ИнформационныеКарты.ПустаяСсылка();
		
		ПараметрыПоискаКарты = Новый Структура;
		ПараметрыПоискаКарты.Вставить("ИдентификаторКартыКлиента", СтрокаТаблицы.CardNumber);
		ПараметрыПоискаКарты.Вставить("УникальныйИдентификаторКарты", СтрокаТаблицы.CardGUID);
		ПараметрыПоискаКарты.Вставить("Клиент", "");
		ПараметрыПоискаКарты.Вставить("НомерТелефона", "");
		ПараметрыПоискаКарты.Вставить("АдресЭП", "");
		
		НайденнаяКарта = Неопределено;
		НайтиКартуКлиента(ПараметрыПоискаКарты, НайденнаяКарта);
		Если НайденнаяКарта <> Неопределено Тогда
			ДисконтнаяКарта = НайденнаяКарта;
		КонецЕсли;
		
		НоваяСтрока.БонуснаяКарта = ДисконтнаяКарта;
		НоваяСтрока.Количество = СтрокаТаблицы.BonusesCount;
	КонецЦикла;
	
	Возврат ТаблицаБонусныхКарт;
	
КонецФункции

Процедура ЗаполнитьДанныеАктуальногоКонтроляПродаж(ОписаниеЭлемента, СтрокаАктуальногоКонтроля,
		СписокВидовКонтроля, СписокПалитр)
	
	ОписаниеЭлемента.Description = СокрЛП(СтрокаАктуальногоКонтроля.Описание);
	ОписаниеЭлемента.AllGoods = СтрокаАктуальногоКонтроля.ДляВсейНоменклатуры;
	ОписаниеЭлемента.GoodsGroupDescription = СокрЛП(СтрокаАктуальногоКонтроля.НаименованиеГруппыТоваров);
	Если ЗначениеЗаполнено(СтрокаАктуальногоКонтроля.Палитра) Тогда
		ОписаниеЭлемента.GoodsSetRef = XMLСтрока(СтрокаАктуальногоКонтроля.Палитра);
		ДобавитьЭлементВМассивПриОтсутствии(СписокПалитр, СтрокаАктуальногоКонтроля.Палитра);
	КонецЕсли;
	
	Для Каждого СтрокаВложеннойПалитры Из СтрокаАктуальногоКонтроля.ПалитрыКонтроляПродаж Цикл
		Если ЗначениеЗаполнено(СтрокаВложеннойПалитры.Палитра) Тогда
			ОписаниеЭлемента.IncludedGoodsSets.Добавить(XMLСтрока(СтрокаВложеннойПалитры.Палитра));
			ДобавитьЭлементВМассивПриОтсутствии(СписокПалитр, СтрокаВложеннойПалитры.Палитра);
		КонецЕсли;
	КонецЦикла;
	Для Каждого СтрокаНоменклатуры Из СтрокаАктуальногоКонтроля.Номенклатура Цикл
		Если ЗначениеЗаполнено(СтрокаНоменклатуры.Номенклатура) Тогда
			ОписаниеЭлемента.IncludedGoods.Добавить(XMLСтрока(СтрокаНоменклатуры.Номенклатура));
		КонецЕсли;
	КонецЦикла;
	Для Каждого СтрокаКонтроля Из СтрокаАктуальногоКонтроля.КонтрольПродаж Цикл
		Если ЗначениеЗаполнено(СтрокаКонтроля.ВидКонтроля) Тогда
			
			ОписаниеСтрокиКонтроля = СерверЛояльностиПоставщикДанных.ПолучитьСтруктуруСтрокиКонтроляПродаж();
			Если СтрокаКонтроля.ВидКонтроляПредопределенный Тогда
				ОписаниеСтрокиКонтроля.RestrictionKindName = СтрокаКонтроля.ВидКонтроляИмяПредопределенныхДанных;
			Иначе
				ОписаниеСтрокиКонтроля.RestrictionKindRef = XMLСтрока(СтрокаКонтроля.ВидКонтроля);
			КонецЕсли;
			ОписаниеСтрокиКонтроля.PeriodStart = СтрокаКонтроля.НачалоПериода;
			ОписаниеСтрокиКонтроля.PeriodEnd = СтрокаКонтроля.КонецПериода;
			ОписаниеСтрокиКонтроля.WeekDayNumber = ПолучитьНомерДняНедели(СтрокаКонтроля.ДеньНедели);
			ОписаниеСтрокиКонтроля.TimeStart = СтрокаКонтроля.ВремяНачала;
			ОписаниеСтрокиКонтроля.TimeEnd = СтрокаКонтроля.ВремяОкончания;
			
			ОписаниеЭлемента.ControlElements.Добавить(ОписаниеСтрокиКонтроля);
			ДобавитьЭлементВМассивПриОтсутствии(СписокВидовКонтроля, СтрокаКонтроля.ВидКонтроля);
			
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция ПолучитьНомерДняНедели(ДеньНедели)
	
	НомераДнейНедели = Новый Соответствие;
	НомераДнейНедели.Вставить(Перечисления.ДниНедели.Понедельник, 1);
	НомераДнейНедели.Вставить(Перечисления.ДниНедели.Вторник, 2);
	НомераДнейНедели.Вставить(Перечисления.ДниНедели.Среда, 3);
	НомераДнейНедели.Вставить(Перечисления.ДниНедели.Четверг, 4);
	НомераДнейНедели.Вставить(Перечисления.ДниНедели.Пятница, 5);
	НомераДнейНедели.Вставить(Перечисления.ДниНедели.Суббота, 6);
	НомераДнейНедели.Вставить(Перечисления.ДниНедели.Воскресенье, 7);
	
	РезультатФункции = 0;
	
	НомерДня = НомераДнейНедели.Получить(ДеньНедели);
	Если Не НомерДня = Неопределено Тогда
		РезультатФункции = НомерДня;
	КонецЕсли;
	
	Возврат РезультатФункции;
	
КонецФункции

Процедура ДобавитьЭлементВМассивПриОтсутствии(МассивЭлементов, ДобавляемыйЭлемент)
	
	Если МассивЭлементов.Найти(ДобавляемыйЭлемент) = Неопределено Тогда
		МассивЭлементов.Добавить(ДобавляемыйЭлемент);
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьДанныеКонтроляПродаж(ИдентификаторТорговогоОбъекта, ТорговыйОбъект, СписокВидовКонтроля, СписокПалитр)
	
	ДанныеКонтроляПродаж = Новый Массив;
	
	ЗапросКонтроляПродаж = Новый Запрос;
	ЗапросКонтроляПродаж.Текст = ПолучитьТекстПакетаЗапросовКонтроляПродаж();
	ЗапросКонтроляПродаж.УстановитьПараметр("ТорговыйОбъект", ТорговыйОбъект);
	
	МассивРезультатов = ЗапросКонтроляПродаж.ВыполнитьПакет();
	ТаблицаАктуальногоКонтроля = МассивРезультатов[2].Выгрузить();
	ВыборкаКонтроля = МассивРезультатов[3].Выбрать();
	Пока ВыборкаКонтроля.Следующий() Цикл
		ОписаниеЭлемента = СерверЛояльностиПоставщикДанных.ПолучитьСтруктуруЭлементаКонтроляПродаж();
		ОписаниеЭлемента.Ref = XMLСтрока(ВыборкаКонтроля.КонтрольПродажСсылка);
		ОписаниеЭлемента.Name = СокрЛП(ВыборкаКонтроля.Наименование);
		ОписаниеЭлемента.Active = ВыборкаКонтроля.Использование;
		ОписаниеЭлемента.AllStores = ВыборкаКонтроля.ДляВсехТорговыхОбъектов;
		ОписаниеЭлемента.DeletionMark = ВыборкаКонтроля.ПометкаУдаления;
		Если ВыборкаКонтроля.ТекущийТорговыйОбъект Тогда
			ОписаниеЭлемента.StoreRef = ИдентификаторТорговогоОбъекта;
		КонецЕсли;
		Если ВыборкаКонтроля.Действует Тогда
			СтрокаАктуальногоКонтроля = ТаблицаАктуальногоКонтроля.Найти(ВыборкаКонтроля.КонтрольПродажСсылка, "КонтрольПродажСсылка");
			Если Не СтрокаАктуальногоКонтроля = Неопределено Тогда
				ЗаполнитьДанныеАктуальногоКонтроляПродаж(ОписаниеЭлемента, СтрокаАктуальногоКонтроля,
					СписокВидовКонтроля, СписокПалитр);
			КонецЕсли;
		КонецЕсли;
		ДанныеКонтроляПродаж.Добавить(ОписаниеЭлемента);
	КонецЦикла;
	
	Возврат ДанныеКонтроляПродаж;
	
КонецФункции

Функция ПолучитьДанныеВидовКонтроля(СписокВидовКонтроля)
	
	ДанныеВидовКонтроля = Новый Массив;
	
	Если СписокВидовКонтроля.Количество() > 0 Тогда
		ЗапросДанныхВидовКонтроля = Новый Запрос;
		ЗапросДанныхВидовКонтроля.Текст =
		"ВЫБРАТЬ
		|	ВидыКонтроля.Ссылка КАК Ссылка,
		|	ВидыКонтроля.Предопределенный КАК Предопределенный,
		|	ВидыКонтроля.ИмяПредопределенныхДанных КАК ИмяПредопределенныхДанных,
		|	ВидыКонтроля.Наименование КАК Наименование,
		|	ВидыКонтроля.ТипКонтроля КАК ТипКонтроля,
		|	ВидыКонтроля.ТекстШаблонаПредупреждения КАК ТекстШаблонаПредупреждения,
		|	ВидыКонтроля.ПараметрыКонтроля.(
		|		Параметр КАК Параметр,
		|		Значение КАК Значение
		|	) КАК ПараметрыКонтроля
		|ИЗ
		|	Справочник.ВидыКонтроля КАК ВидыКонтроля
		|ГДЕ
		|	ВидыКонтроля.Ссылка В(&СписокВидовКонтроля)";
		ЗапросДанныхВидовКонтроля.УстановитьПараметр("СписокВидовКонтроля", СписокВидовКонтроля);
		Выборка = ЗапросДанныхВидовКонтроля.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			ОписаниеВидаКонтроля = СерверЛояльностиПоставщикДанных.ПолучитьСтруктуруВидаКонтроляПродаж();
			Если Выборка.Предопределенный Тогда
				ОписаниеВидаКонтроля.PredefinedName = Выборка.ИмяПредопределенныхДанных;
			Иначе
				ОписаниеВидаКонтроля.Ref = XMLСтрока(Выборка.Ссылка);
			КонецЕсли;
			ОписаниеВидаКонтроля.Name = СокрЛП(Выборка.Наименование);
			Если ЗначениеЗаполнено(Выборка.ТипКонтроля) Тогда
				ОписаниеВидаКонтроля.RestrictionTypeName = XMLСтрока(Выборка.ТипКонтроля);
			КонецЕсли;
			ОписаниеВидаКонтроля.PatternTextForUser = СокрЛП(Выборка.ТекстШаблонаПредупреждения);
			
			ВыборкаПараметров = Выборка.ПараметрыКонтроля.Выбрать();
			Пока ВыборкаПараметров.Следующий() Цикл
				Если ЗначениеЗаполнено(ВыборкаПараметров.Параметр) Тогда
					ОписаниеСтрокиПараметра = СерверЛояльностиПоставщикДанных.ПолучитьСтруктуруСтрокиПараметровВидаКонтроляПродаж();
					ОписаниеСтрокиПараметра.Parameter = XMLСтрока(ВыборкаПараметров.Параметр);
					ОписаниеСтрокиПараметра.Value = Формат(ВыборкаПараметров.Значение, "ЧГ=");
					ОписаниеВидаКонтроля.Parameters.Добавить(ОписаниеСтрокиПараметра);
				КонецЕсли;
			КонецЦикла;
			
			ДанныеВидовКонтроля.Добавить(ОписаниеВидаКонтроля);
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат ДанныеВидовКонтроля;
	
КонецФункции

функция ПолучитьДанныеПалитрТоваров(СписокПалитр)
	
	ДанныеПалитрТоваров = Новый Массив;
	
	Если СписокПалитр.Количество() > 0 Тогда
		ЗапросДанныхПалитр = Новый Запрос;
		ЗапросДанныхПалитр.Текст =
		"ВЫБРАТЬ
		|	ПалитраТоваровРМК.Ссылка КАК Ссылка,
		|	ПалитраТоваровРМК.Наименование КАК Наименование,
		|	ПалитраТоваровРМК.КоличествоЭлементовВРяду КАК КоличествоЭлементовВРяду,
		|	ПалитраТоваровРМК.ВысотаЭлемента КАК ВысотаЭлемента,
		|	ПалитраТоваровРМК.КоличествоРядов КАК КоличествоРядов,
		|	ПалитраТоваровРМК.Служебная КАК Служебная,
		|	ПалитраТоваровРМК.Состав.(
		|		ЭтоКатегория КАК ЭтоКатегория,
		|		НомерКатегории КАК НомерКатегории,
		|		НомерКатегорииРазмещения КАК НомерКатегорииРазмещения,
		|		ИндексПозиции КАК ИндексПозиции,
		|		ИмяЭлемента КАК ИмяЭлемента,
		|		Номенклатура КАК Номенклатура,
		|		Характеристика КАК Характеристика,
		|		ЗаголовокЭлемента КАК ЗаголовокЭлемента,
		|		ХарактеристикиИспользуются КАК ХарактеристикиИспользуются,
		|		ИмеетсяВложенность КАК ИмеетсяВложенность,
		|		ВидМодификатора КАК ВидМодификатора,
		|		Упаковка КАК Упаковка,
		|		СкрыватьОстаток КАК СкрыватьОстаток,
		|		Палитра КАК Палитра
		|	) КАК Состав
		|ИЗ
		|	Справочник.ПалитраТоваровРМК КАК ПалитраТоваровРМК
		|ГДЕ
		|	ПалитраТоваровРМК.Ссылка В(&СписокПалитр)";
		ЗапросДанныхПалитр.УстановитьПараметр("СписокПалитр", СписокПалитр);
		Выборка = ЗапросДанныхПалитр.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			ОписаниеПалитры = СерверЛояльностиПоставщикДанных.ПолучитьСтруктуруПалитрыТоваров();
			ОписаниеПалитры.Ref = XMLСтрока(Выборка.Ссылка);
			ОписаниеПалитры.Name = СокрЛП(Выборка.Наименование);
			ОписаниеПалитры.NumberOfElementsInRow = Выборка.КоличествоЭлементовВРяду;
			ОписаниеПалитры.ElementHeight = Выборка.ВысотаЭлемента;
			ОписаниеПалитры.NumberOfRows = Выборка.КоличествоРядов;
			ОписаниеПалитры.Service = Выборка.Служебная;
			
			ВыборкаСостава = Выборка.Состав.Выбрать();
			Пока ВыборкаСостава.Следующий() Цикл
				ОписаниеСтрокиСостава = СерверЛояльностиПоставщикДанных.ПолучитьСтруктуруСтрокиСоставаПалитры();
				ОписаниеСтрокиСостава.IsFolder = ВыборкаСостава.ЭтоКатегория;
				ОписаниеСтрокиСостава.FolderNumber = ВыборкаСостава.НомерКатегории;
				ОписаниеСтрокиСостава.ParentFolderNumber = ВыборкаСостава.НомерКатегорииРазмещения;
				ОписаниеСтрокиСостава.PositionIndex = ВыборкаСостава.ИндексПозиции;
				ОписаниеСтрокиСостава.ElementName = СокрЛП(ВыборкаСостава.ИмяЭлемента);
				Если ЗначениеЗаполнено(ВыборкаСостава.Номенклатура) Тогда
					ОписаниеСтрокиСостава.NomenclatureRef = XMLСтрока(ВыборкаСостава.Номенклатура);
				КонецЕсли;
				Если ЗначениеЗаполнено(ВыборкаСостава.Характеристика) Тогда
					ОписаниеСтрокиСостава.CharacteristicRef = XMLСтрока(ВыборкаСостава.Характеристика);
				КонецЕсли;
				ОписаниеСтрокиСостава.ElementTitle = СокрЛП(ВыборкаСостава.ЗаголовокЭлемента);
				ОписаниеСтрокиСостава.CharacteristicsAreUsed = ВыборкаСостава.ХарактеристикиИспользуются;
				ОписаниеСтрокиСостава.HasIncludedElements = ВыборкаСостава.ИмеетсяВложенность;
				Если ЗначениеЗаполнено(ВыборкаСостава.ВидМодификатора) Тогда
					ОписаниеСтрокиСостава.ModificatorName = XMLСтрока(ВыборкаСостава.ВидМодификатора);
				КонецЕсли;
				Если ЗначениеЗаполнено(ВыборкаСостава.Упаковка) Тогда
					ОписаниеСтрокиСостава.PackageRef = XMLСтрока(ВыборкаСостава.Упаковка);
				КонецЕсли;
				ОписаниеСтрокиСостава.HideAmount = ВыборкаСостава.СкрыватьОстаток;
				Если ЗначениеЗаполнено(ВыборкаСостава.Палитра) Тогда
					ОписаниеСтрокиСостава.GoodsSetRef = XMLСтрока(ВыборкаСостава.Палитра);
				КонецЕсли;
				ОписаниеПалитры.GoodsContent.Добавить(ОписаниеСтрокиСостава);
			КонецЦикла;
			
			ДанныеПалитрТоваров.Добавить(ОписаниеПалитры);
		КонецЦикла;
	КонецЕсли;
	
	Возврат ДанныеПалитрТоваров;
	
КонецФункции

Функция ПолучитьТекстПакетаЗапросовКонтроляПродаж()
	
	ТекстПакета =
	"ВЫБРАТЬ
	|	СпрКонтрольПродаж.Ссылка КАК КонтрольПродажСсылка,
	|	СпрКонтрольПродаж.Наименование КАК Наименование,
	|	СпрКонтрольПродаж.Использование КАК Использование,
	|	СпрКонтрольПродаж.ПометкаУдаления КАК ПометкаУдаления,
	|	СпрКонтрольПродаж.ДляВсехТорговыхОбъектов КАК ДляВсехТорговыхОбъектов,
	|	ВЫБОР
	|		КОГДА СпрКонтрольПродаж.ДляВсехТорговыхОбъектов
	|				ИЛИ КонтрольПродажТорговыеОбъекты.ТорговыйОбъект ЕСТЬ NULL
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ТекущийТорговыйОбъект
	|ПОМЕСТИТЬ втВесьКонтрольПродаж
	|ИЗ
	|	Справочник.КонтрольПродаж КАК СпрКонтрольПродаж
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КонтрольПродаж.ТорговыеОбъекты КАК КонтрольПродажТорговыеОбъекты
	|		ПО СпрКонтрольПродаж.Ссылка = КонтрольПродажТорговыеОбъекты.Ссылка
	|			И (КонтрольПродажТорговыеОбъекты.ТорговыйОбъект = &ТорговыйОбъект)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВесьКонтрольПродаж.КонтрольПродажСсылка КАК КонтрольПродажСсылка
	|ПОМЕСТИТЬ втАктуальныйКонтрольПродаж
	|ИЗ
	|	втВесьКонтрольПродаж КАК ВесьКонтрольПродаж
	|ГДЕ
	|	ВесьКонтрольПродаж.ДляВсехТорговыхОбъектов
	|	И ВесьКонтрольПродаж.Использование
	|	И НЕ ВесьКонтрольПродаж.ПометкаУдаления
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВесьКонтрольПродаж.КонтрольПродажСсылка
	|ИЗ
	|	втВесьКонтрольПродаж КАК ВесьКонтрольПродаж
	|ГДЕ
	|	ВесьКонтрольПродаж.ТекущийТорговыйОбъект
	|	И ВесьКонтрольПродаж.Использование
	|	И НЕ ВесьКонтрольПродаж.ПометкаУдаления
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СпрКонтрольПродаж.Ссылка КАК КонтрольПродажСсылка,
	|	СпрКонтрольПродаж.ДляВсейНоменклатуры КАК ДляВсейНоменклатуры,
	|	СпрКонтрольПродаж.Описание КАК Описание,
	|	СпрКонтрольПродаж.Палитра КАК Палитра,
	|	СпрКонтрольПродаж.НаименованиеГруппыТоваров КАК НаименованиеГруппыТоваров,
	|	СпрКонтрольПродаж.ПалитрыКонтроляПродаж.(
	|		Палитра КАК Палитра
	|	) КАК ПалитрыКонтроляПродаж,
	|	СпрКонтрольПродаж.Номенклатура.(
	|		Номенклатура КАК Номенклатура
	|	) КАК Номенклатура,
	|	СпрКонтрольПродаж.КонтрольПродаж.(
	|		ВидКонтроля КАК ВидКонтроля,
	|		НачалоПериода КАК НачалоПериода,
	|		КонецПериода КАК КонецПериода,
	|		ДеньНедели КАК ДеньНедели,
	|		ВремяНачала КАК ВремяНачала,
	|		ВремяОкончания КАК ВремяОкончания,
	|		ВидКонтроля.Предопределенный КАК ВидКонтроляПредопределенный,
	|		ВидКонтроля.ИмяПредопределенныхДанных КАК ВидКонтроляИмяПредопределенныхДанных
	|	) КАК КонтрольПродаж
	|ИЗ
	|	Справочник.КонтрольПродаж КАК СпрКонтрольПродаж
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втАктуальныйКонтрольПродаж КАК втАктуальныйКонтрольПродаж
	|		ПО СпрКонтрольПродаж.Ссылка = втАктуальныйКонтрольПродаж.КонтрольПродажСсылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втВесьКонтрольПродаж.КонтрольПродажСсылка КАК КонтрольПродажСсылка,
	|	втВесьКонтрольПродаж.Использование КАК Использование,
	|	втВесьКонтрольПродаж.Наименование КАК Наименование,
	|	втВесьКонтрольПродаж.ПометкаУдаления КАК ПометкаУдаления,
	|	втВесьКонтрольПродаж.ДляВсехТорговыхОбъектов КАК ДляВсехТорговыхОбъектов,
	|	втВесьКонтрольПродаж.ТекущийТорговыйОбъект КАК ТекущийТорговыйОбъект,
	|	ВЫБОР
	|		КОГДА (втВесьКонтрольПродаж.ДляВсехТорговыхОбъектов
	|				ИЛИ втВесьКонтрольПродаж.ТекущийТорговыйОбъект)
	|				И втВесьКонтрольПродаж.Использование
	|				И НЕ втВесьКонтрольПродаж.ПометкаУдаления
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК Действует
	|ИЗ
	|	втВесьКонтрольПродаж КАК втВесьКонтрольПродаж";
	
	Возврат ТекстПакета;
	
КонецФункции

#КонецОбласти