#Область ПреобразованиеИПроверкиФормата

Функция СтрокуВBase64(ДанныеСтрока) Экспорт
	
	ДвоичныеДанные = ПолучитьДвоичныеДанныеИзСтроки(ДанныеСтрока);
	
	Если ДвоичныеДанные = Неопределено Тогда
		Штрихкод = ДанныеСтрока;
	Иначе
		Штрихкод = ПолучитьBase64СтрокуИзДвоичныхДанных(ДвоичныеДанные);
	КонецЕсли;
	
	Возврат Штрихкод;
	
КонецФункции

Функция GTINИзКодаМаркировки(КодМаркировки, ВидУпаковки) Экспорт
	
	ЗначениеИдентификатораGTIN = "";
	
	Если ВидУпаковки = ПредопределенноеЗначение("Перечисление.ВидыУпаковокИСМПТК.Потребительская") Тогда
		
		ЗначениеИдентификатораGTIN = Лев(КодМаркировки, 14);
		
	ИначеЕсли ВидУпаковки = ПредопределенноеЗначение("Перечисление.ВидыУпаковокИСМПТК.Групповая") Тогда
		
		ИдентификаторGTIN = Лев(КодМаркировки, 4);
		Если ИдентификаторGTIN = "(01)" Тогда
			ЗначениеИдентификатораGTIN = Сред(КодМаркировки, 5, 14);
		ИначеЕсли Лев(КодМаркировки, 2) = "01" Тогда
			ЗначениеИдентификатораGTIN = Сред(КодМаркировки, 3, 14);
		КонецЕсли;
		
	ИначеЕсли ВидУпаковки = ПредопределенноеЗначение("Перечисление.ВидыУпаковокИСМПТК.Логистическая") Тогда
		
		Если СтрНачинаетсяС(КодМаркировки, "(") Тогда
			ИдентификаторGTIN = Лев(КодМаркировки, 4);
			Если ИдентификаторGTIN = "(01)" Или ИдентификаторGTIN = "(02)" Тогда
				ЗначениеИдентификатораGTIN = Сред(КодМаркировки, 5, 14);
			КонецЕсли;
		Иначе
			ИдентификаторGTIN = Лев(КодМаркировки, 2);
			Если ИдентификаторGTIN = "01" Или ИдентификаторGTIN = "02" Тогда
				ЗначениеИдентификатораGTIN = Сред(КодМаркировки, 3, 14);
			КонецЕсли;
		КонецЕсли;
		
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
	Если ЗначениеИдентификатораGTIN = "" Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если СтрДлина(ЗначениеИдентификатораGTIN) = 14
		И РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйКлиентСервер.ПроверитьКорректностьGTIN(ЗначениеИдентификатораGTIN) Тогда
		
		Возврат ЗначениеИдентификатораGTIN;
		
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

//В общем случае работа с КМ происходит в нормализованном формате, т.е. в преобразованном виде без спецсимволов GS29,
//однако в некоторых механизмах используется полный КМ. 
//Полный КМ передается в формате закодированной  строки Base64, чтобы не возникало проблем при передаче спецсимволов с клиента на сервер.
//Есть функции и процедуры, использующиеся в разных местах и принимающие входные параметры c КМ как в полном виде, так и в закодированной строке Base64
//в зависимости от места вызова.
//Поэтому важно четко определять - КМ уже закодирован или требуется кодировка, чтобы не возникало двойного преобразования.
//В типовых механизмах используется проверка типа "Если Base64Значение(СтрокаДляПроверки) = Неопределено Тогда *преобразование в Base64".
//Однако на практике выяснили, что некоторые потребительские КМ табачной продукции в полном виде в этой конструкции могут возвращать двоичные данные,
//как будто строка закодирована в Base64, хотя это не так. В результате преобразование не происходит и в дальнейшем возникают ошибочные ситуации.
//Пример такого кода: 00000046199928fZ?vCTNSVVsWCt4
//В качестве возможного и относительно простого способа проверки на формат используем двойное преобразование строки.
//
Функция ЭтоСтрокаФорматаBase64(Штрихкод) Экспорт
	
	КонтрольныйШтрихкод = Штрихкод;
	//По умолчанию считаем, что Штрихкод это строка формата Base64. Преобразуем в двоичные данные.
	СтрокаДвоичныеДанные = Base64Значение(Штрихкод);
	Если СтрокаДвоичныеДанные = Неопределено Тогда
		//Сразу можно сказать, что штрихкод не в формате Base64
		Возврат Ложь;
	КонецЕсли;
	//Кодируем обратно
	ШтрихкодДляПроверки = Base64Строка(СтрокаДвоичныеДанные);
	ШтрихкодДляПроверки = СтрЗаменить(ШтрихкодДляПроверки, Символы.ПС, "");
	ШтрихкодДляПроверки = СтрЗаменить(ШтрихкодДляПроверки, Символы.ВК, "");
		
	Если ШтрихкодДляПроверки = КонтрольныйШтрихкод Тогда 
		//Значит исходный штрихкод это корректная строка формата Base64
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

Функция ЭтоШтрихкодGS1(Штрихкод) Экспорт
	
	// Штрихкод GS1 должен быть преобразован в формат GS1 со скобками
	Если СтрНайти(Штрихкод, "(") = 0 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	РезультатРазбора = РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйКлиентСервер.РазобратьСтрокуШтрихкодаGS1(Штрихкод);
	
	Возврат РезультатРазбора.Разобран;
	
КонецФункции

Функция ЭтоКодSSCC(Штрихкод) Экспорт
	
	НужноПреобразовать = ТипЗнч(Штрихкод) = Тип("Структура");
	Если НужноПреобразовать Тогда
		ШтрихкодСтрока = РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйКлиентСервер.Base64ВШтрихкод(Штрихкод.Штрихкод);
	Иначе
		ШтрихкодСтрока = Штрихкод;
	КонецЕсли;
	
	Если Не ОбщегоНазначенияИСМПТККлиентСервер.ТолькоЦифрыВСтроке(ШтрихкодСтрока) Тогда
		ШтрихкодСтрока = "";
		Возврат Ложь;
	КонецЕсли;
	
	Если СтрДлина(ШтрихкодСтрока) = 20 Тогда
		ШтрихкодНовый = Прав(ШтрихкодСтрока, 18);
	Иначе
		ШтрихкодНовый = ШтрихкодСтрока;
	КонецЕсли;
	
	ШтрихкодДляОбработки = Лев(ШтрихкодНовый, 17);
	
	КонтрольноеЧисло = 0;
	
	Цифры = Новый Массив;
	Позиций = СтрДлина(ШтрихкодДляОбработки);
	Для НомерПозиции = 1 По Позиций Цикл
		Цифры.Добавить(РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйКлиентСервер.СтрокаВЧисло(Сред(ШтрихкодДляОбработки, НомерПозиции, 1)));
	КонецЦикла;
	
	СуммаЧетных = 0;
	СуммаНечетных = 0;
	Для НомерПозиции = 0 По Позиций-1 Цикл
		Если НомерПозиции%2=0 Тогда
			СуммаЧетных=СуммаЧетных+Цифры[НомерПозиции];
		Иначе
			СуммаНечетных=СуммаНечетных+Цифры[НомерПозиции];
		КонецЕсли;
	КонецЦикла;
	
	СверяемоеЧисло = СуммаЧетных * 3 + СуммаНечетных;
	КонтрольноеЧисло = 10 - СверяемоеЧисло%10;
	Если КонтрольноеЧисло = 10 Тогда
		КонтрольноеЧисло = 0;
	КонецЕсли;
			
	РезультатПроверки = КонтрольноеЧисло = Число(Прав(ШтрихкодСтрока, 1));
	ШтрихкодСтрока = "";
	
	Возврат РезультатПроверки;
		
КонецФункции

// Подготавливает штрихкод GS1 в формате со скобками к передаче в компоненту печати штрихкодов.
//
// Параметры:
//  ЗначениеШтрихкода - Строка - Штрихкод
//  ТипКода - Число - Тип кода (см. документацию по компоненте печати штрихкодов)
// Возвращаемое значение:
//  Строка - Штрихкод для передачи в компоненту печати
Функция КодGS1ДляКомпонентыПечати(ЗначениеШтрихкода, ТипКода, ТипВходныхДанных = Неопределено) Экспорт
	
	ЗначениеШтрихкодаДляКомпоненты = СокрЛП(ЗначениеШтрихкода);
	
	Если (ТипКода = 2 Или ТипКода = 17 Или ТипКода = 24) Тогда
		
		ЧтениеШтрихкода = РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйКлиентСервер.ПараметрыШтрихкода(ЗначениеШтрихкодаДляКомпоненты);
		
		Если Не ЧтениеШтрихкода.Результат = Неопределено Тогда
			
			Если ЧтениеШтрихкода.ТипШтрихкода = Перечисления.ТипыШтрихкодовИСМПТК.GS1_128
				Или ЧтениеШтрихкода.ТипШтрихкода = Перечисления.ТипыШтрихкодовИСМПТК.GS1_DataBarExpandedStacked Тогда
				
				Если ТипВходныхДанных = Неопределено Тогда
					ЗначениеШтрихкодаДляКомпоненты = РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйКлиентСервер.ШтрихкодGS1(ЧтениеШтрихкода.Результат, Истина);
				Иначе
					ЗначениеШтрихкодаДляКомпоненты = РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйКлиентСервер.ШтрихкодВBase64(
													 РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйКлиентСервер.ШтрихкодGS1(ЧтениеШтрихкода.Результат, Ложь, 
													 РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйКлиентСервер.СимволыОкончанияСтрокиПеременнойДлины()[0]));
					ТипВходныхДанных = 1;
				КонецЕсли;
				
			ИначеЕсли ЧтениеШтрихкода.ТипШтрихкода = Перечисления.ТипыШтрихкодовИСМПТК.SSCC
				И ТипВходныхДанных <> Неопределено Тогда
				
				ЗначениеШтрихкодаДляКомпоненты = РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйКлиентСервер.ШтрихкодВBase64(
												 РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйКлиентСервер.ШтрихкодSSCC(ЧтениеШтрихкода.Результат, Ложь, Истина));
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ЗначениеШтрихкодаДляКомпоненты;
	
КонецФункции

#КонецОбласти

#Область НастройкиРазбораКМ 

Функция НастройкиРазбораКодаМаркировки(ВидыПродукции = Неопределено, ТолькоУчитываемыеВидыПродукции = Истина, ВалидироватьШтрихкодаGS1БезРазделителей = Истина) Экспорт
	
	Возврат ОбщиеНастройкиРазбораКодаМаркировки(Истина, ВидыПродукции, ТолькоУчитываемыеВидыПродукции, ВалидироватьШтрихкодаGS1БезРазделителей);
	
КонецФункции

Функция ОбщиеНастройкиРазбораКодаМаркировки(ТолькоСервер = Ложь, ВидыПродукции = Неопределено, ТолькоУчитываемыеВидыПродукции = Истина, ВалидироватьШтрихкодаGS1БезРазделителей = Истина) Экспорт
	
	НастройкиРазбораКодаМаркировки = ИнициализацияНастроекРазбораКодаМаркировки();
	НастройкиРазбораКодаМаркировки.ТолькоУчитываемыеВидыПродукции          = ТолькоУчитываемыеВидыПродукции;
	НастройкиРазбораКодаМаркировки.ВалидироватьШтрихкодаGS1БезРазделителей = ВалидироватьШтрихкодаGS1БезРазделителей;
	НастройкиРазбораКодаМаркировки.Алфавит      = РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйКлиентСервер.ДопустимыеСимволыВКодеМаркировки();
	НастройкиРазбораКодаМаркировки.ТолькоСервер = ТолькоСервер;
	
	УчитываемыеВидыМаркируемойПродукции = ОбщегоНазначенияИСМПТК.УчитываемыеВидыМаркируемойПродукции();
	
	Если УчитываемыеВидыМаркируемойПродукции.Количество() = 0 Тогда
		Возврат НастройкиРазбораКодаМаркировки;
	КонецЕсли;
	
	Если ВидыПродукции = Неопределено Тогда
		
		ДоступныеВидыПродукции = УчитываемыеВидыМаркируемойПродукции;
		
	Иначе
		
		ДоступныеВидыПродукции  = Новый Массив;
		ВидыПродукцииДляФильтра = Новый Массив;
		
		Если ЗначениеЗаполнено(ВидыПродукции) И ТипЗнч(ВидыПродукции) = Тип("ПеречислениеСсылка.ВидыПродукцииИСМПТК") Тогда
			ВидыПродукцииДляФильтра.Добавить(ВидыПродукции);
			
		ИначеЕсли ЗначениеЗаполнено(ВидыПродукции) И ТипЗнч(ВидыПродукции) = Тип("Массив") Тогда
			
			Для Каждого Значение Из ВидыПродукции Цикл
				Если ЗначениеЗаполнено(Значение) И ТипЗнч(Значение) = Тип("ПеречислениеСсылка.ВидыПродукцииИСМПТК") Тогда
					ВидыПродукцииДляФильтра.Добавить(Значение);
				КонецЕсли;
			КонецЦикла;
			
		ИначеЕсли ЗначениеЗаполнено(ВидыПродукции) И ТипЗнч(ВидыПродукции) = Тип("Структура") Тогда
			
			Для Каждого КлючЗначение Из ВидыПродукции Цикл
				Значение = КлючЗначение.Значение;
				Если ЗначениеЗаполнено(Значение) И ТипЗнч(Значение) = Тип("ПеречислениеСсылка.ВидыПродукцииИСМПТК") Тогда
					ВидыПродукцииДляФильтра.Добавить(Значение);
				КонецЕсли;
			КонецЦикла;
			
		КонецЕсли;
		
		Если ВидыПродукцииДляФильтра.Количество() = 0 Тогда
			ВызватьИсключение НСтр("ru = 'Фильтр по виду продукции в настройках разбора кода маркировки задан неверно.'");
		КонецЕсли;
		
		ВидыПродукцииДляФильтра = ОбщегоНазначенияИСМПТККлиентСервер.СвернутьМассив(ВидыПродукцииДляФильтра);
		
		Для Каждого ВидПродукции Из ВидыПродукцииДляФильтра Цикл
			Если УчитываемыеВидыМаркируемойПродукции.Найти(ВидПродукции) = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			ДоступныеВидыПродукции.Добавить(ВидПродукции);
		КонецЦикла;
		
	КонецЕсли;
	
	Если ДоступныеВидыПродукции.Количество() = 0 Тогда
		Если Не НастройкиРазбораКодаМаркировки.ТолькоСервер Тогда
			ПодготовитьНастройкиРазбораКодаМаркировкиДляПередачиНаКлиент(НастройкиРазбораКодаМаркировки);
		КонецЕсли;
		Возврат НастройкиРазбораКодаМаркировки;
	КонецЕсли;
	
	НастройкиРазбораКодаМаркировки.ДоступныеВидыПродукции = ДоступныеВидыПродукции;
	
	ДанныеОбщихМодулей = Новый Соответствие;
	ДанныеОбщихМодулейПоВидуПродукции = Новый Соответствие;
		
	МодулиПодсистемыИСМП  = Неопределено;
	
	ДанныеОписанийКодаМаркировки = Новый Структура;
	ДанныеОписанийКодаМаркировки.Вставить("ОписанияКодовМаркировки", Новый Массив);
	ДанныеОписанийКодаМаркировки.Вставить("Алфавит", НастройкиРазбораКодаМаркировки.Алфавит);
	
	Для Каждого ВидПродукции Из НастройкиРазбораКодаМаркировки.ДоступныеВидыПродукции Цикл
		
		Если МодулиПодсистемыИСМП = Неопределено Тогда
			
			МодульНастройки = "РазборИОбработкаКодовМаркировкиИСМПТКСлужебный";
			МодульРазбораКМ = "РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйКлиентСервер";
			
			ДанныеМодуляНастройки = Новый Структура("Имя, ОбщийМодуль", МодульНастройки, ОбщегоНазначенияИСМПТКПереопределяемый.ОбщийМодуль(МодульНастройки));
			ДанныеМодуляРазбора   = Новый Структура("Имя, ОбщийМодуль", МодульРазбораКМ, ОбщегоНазначенияИСМПТКПереопределяемый.ОбщийМодуль(МодульРазбораКМ));
			
			МодулиПодсистемыИСМП  = Новый Структура("Подсистема, Настройка, Разбор", "Маркировка", ДанныеМодуляНастройки, ДанныеМодуляРазбора);
					
		КонецЕсли;
		МодулиВыбраннойПодсистемы = МодулиПодсистемыИСМП;
		
		Если МодулиВыбраннойПодсистемы = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если ДанныеОбщихМодулей[МодулиВыбраннойПодсистемы.Подсистема] = Неопределено Тогда
			ДанныеОбщихМодулей[МодулиВыбраннойПодсистемы.Подсистема] = МодулиВыбраннойПодсистемы;
			НастройкиРазбораКодаМаркировки.ОбщиеМодули[МодулиВыбраннойПодсистемы.Разбор.Имя] = МодулиВыбраннойПодсистемы.Разбор.ОбщийМодуль;
		КонецЕсли;
		
		МодулиВыбраннойПодсистемы.Настройка.ОбщийМодуль.ДополнитьОписанияКодовМаркировки(ДанныеОписанийКодаМаркировки, ВидПродукции, МодулиВыбраннойПодсистемы.Разбор);
		
		ДанныеОбщихМодулейПоВидуПродукции[ВидПродукции] = МодулиВыбраннойПодсистемы;
		
	КонецЦикла;
	
	// Определяем порядок вызываемых проверок при разборе кода маркировки
	Если МодулиПодсистемыИСМП <> Неопределено Тогда
		НастройкиРазбораКодаМаркировки.ИменаОбщихМодулей.Добавить(МодулиПодсистемыИСМП.Разбор.Имя);
	КонецЕсли;
	
	ЗаполнитьШаблоныКодовМаркировкиПоНачальнымНастройкам(НастройкиРазбораКодаМаркировки, ДанныеОписанийКодаМаркировки);
	
	ОпределитьОбщиеМодулиВШаблонахИОписанияхВидовПродукции(НастройкиРазбораКодаМаркировки, ДанныеОбщихМодулейПоВидуПродукции);
	
	Для Каждого ВидПродукции Из НастройкиРазбораКодаМаркировки.ДоступныеВидыПродукции Цикл
		МодулиВыбраннойПодсистемы = ДанныеОбщихМодулейПоВидуПродукции[ВидПродукции];
		
		Если Не НастройкиРазбораКодаМаркировки.ДополнительныеПараметры.Свойство(МодулиВыбраннойПодсистемы.Подсистема) Тогда
			НастройкиРазбораКодаМаркировки.ДополнительныеПараметры.Вставить(МодулиВыбраннойПодсистемы.Подсистема, Новый Структура);
		КонецЕсли;
		
		МодулиВыбраннойПодсистемы.Настройка.ОбщийМодуль.ДополнитьВспомогательнымиНастройкиРазбораКодаМаркировки(НастройкиРазбораКодаМаркировки, ВидПродукции, МодулиВыбраннойПодсистемы);
	КонецЦикла;
	
	Если Не НастройкиРазбораКодаМаркировки.ТолькоСервер Тогда
		ПодготовитьНастройкиРазбораКодаМаркировкиДляПередачиНаКлиент(НастройкиРазбораКодаМаркировки);
	КонецЕсли;
	
	Возврат НастройкиРазбораКодаМаркировки;
	
КонецФункции

Функция ИнициализацияНастроекРазбораКодаМаркировки()
	
	ШаблоныКодовМаркировки = Новый ТаблицаЗначений;
	ШаблоныКодовМаркировки.Колонки.Добавить("Шаблон",              Новый ОписаниеТипов("Строка"));
	ШаблоныКодовМаркировки.Колонки.Добавить("ТипШтрихкода",        Новый ОписаниеТипов("ПеречислениеСсылка.ТипыШтрихкодовИСМПТК"));
	ШаблоныКодовМаркировки.Колонки.Добавить("ВидУпаковки",         Новый ОписаниеТипов("ПеречислениеСсылка.ВидыУпаковокИСМПТК"));
	ШаблоныКодовМаркировки.Колонки.Добавить("КоличествоЭлементов", Новый ОписаниеТипов("Число"));
	ШаблоныКодовМаркировки.Колонки.Добавить("НачинаетсяСоСкобки",  Новый ОписаниеТипов("Булево"));
	ШаблоныКодовМаркировки.Колонки.Добавить("Длина",               Новый ОписаниеТипов("Число"));
	ШаблоныКодовМаркировки.Колонки.Добавить("ДлинаСоСкобкой",      Новый ОписаниеТипов("Число"));
	ШаблоныКодовМаркировки.Колонки.Добавить("КодПервогоЭлемента",  Новый ОписаниеТипов("Строка"));
	
	ШаблоныКодовМаркировкиПоВидамПродукции = ШаблоныКодовМаркировки.СкопироватьКолонки();
	ШаблоныКодовМаркировкиПоВидамПродукции.Колонки.Добавить("ВидПродукции", Новый ОписаниеТипов("ПеречислениеСсылка.ВидыПродукцииИСМПТК"));
	
	Настройки = Новый Структура;
	Настройки.Вставить("ДоступныеВидыПродукции",                  Новый Массив);
	Настройки.Вставить("Алфавит",                                 Новый Структура);
	Настройки.Вставить("ИменаОбщихМодулей",                       Новый Массив);
	Настройки.Вставить("ОбщиеМодули",                             Новый Соответствие); // Когда ТолькоСервер = Ложь, тогда очищается.
	Настройки.Вставить("ШаблоныКодовМаркировкиПоВидамПродукции",  ШаблоныКодовМаркировкиПоВидамПродукции); // Когда ТолькоСервер = Ложь, тогда конвертируется в массив структур
	Настройки.Вставить("ШаблоныКодовМаркировки",                  ШаблоныКодовМаркировки); // Когда ТолькоСервер = Ложь, тогда конвертируется в массив структур
	Настройки.Вставить("ШаблоныИОписанияВидовПродукции",          Новый Соответствие);
	Настройки.Вставить("ДополнительныеПараметры",                 Новый Структура);
	Настройки.Вставить("ТолькоСервер",                            Ложь);
	Настройки.Вставить("ТолькоУчитываемыеВидыПродукции",          Ложь);
	Настройки.Вставить("ВалидироватьШтрихкодаGS1БезРазделителей", Ложь);
	
	Возврат Настройки;
	
КонецФункции

Процедура ПодготовитьНастройкиРазбораКодаМаркировкиДляПередачиНаКлиент(НастройкиРазбораКодаМаркировки)
	
	// Конвертируем таблицы значений в массивы структур
	ШаблоныКодовМаркировкиПоВидамПродукции = Новый Массив;
	Для Каждого ШаблонКМ Из НастройкиРазбораКодаМаркировки.ШаблоныКодовМаркировкиПоВидамПродукции Цикл
		ШаблоныКодовМаркировкиПоВидамПродукции.Добавить(ОбщегоНазначенияИСМПТКПереопределяемый.СтрокаТаблицыЗначенийВСтруктуру(ШаблонКМ));
	КонецЦикла;
	
	ШаблоныКодовМаркировки = Новый Массив;
	Для Каждого ШаблонКМ Из НастройкиРазбораКодаМаркировки.ШаблоныКодовМаркировки Цикл
		ШаблоныКодовМаркировки.Добавить(ОбщегоНазначенияИСМПТКПереопределяемый.СтрокаТаблицыЗначенийВСтруктуру(ШаблонКМ));
	КонецЦикла;
	
	НастройкиРазбораКодаМаркировки.ШаблоныКодовМаркировкиПоВидамПродукции = ШаблоныКодовМаркировкиПоВидамПродукции;
	НастройкиРазбораКодаМаркировки.ШаблоныКодовМаркировки = ШаблоныКодовМаркировки;
	
	НастройкиРазбораКодаМаркировки.ОбщиеМодули = Новый Соответствие;
	
КонецПроцедуры

#КонецОбласти

#Область РазборКодаМаркировки 

// Выполняет разбор кода маркировки.
//
// Параметры:
//   ДанныеДляРазбора - Строка, см. МенеджерОборудованияМаркировкаКлиентСервер.РазобратьСтрокуШтрихкодаGS1 - код маркировки, либо данные разбора.
//   ВидыПродукции - ПеречислениеСсылка.ВидыПродукцииИС, Массив из ПеречислениеСсылка.ВидыПродукцииИС - фильтр по виду продукции.
//   ПримечаниеКРезультатуРазбора - Структура - содержит:
//      * ИдентификаторОшибки - см. РазборКодаМаркировкиИССлужебныйКлиентСервер.ИдентификаторыОшибокРазобраКодаМаркировки
//      * ТекстОшибки - Строка
//      * РезультатРазбора - Массив из см. РазборКодаМаркировкиИССлужебныйКлиентСервер.НовыйРезультатРазбораКодаМаркировки
//   Настройки - см. РазборКодаМаркировкиИССлужебный.НастройкиРазбораКодаМаркировки.
//   ПроверятьАлфавитЭлементов - Булево - 
// Возвращаемое значение:
//    - см. РазборКодаМаркировкиИССлужебныйКлиентСервер.НовыйРезультатРазбораКодаМаркировки.
//    - Неопределено - если код маркировки разобрать не удалось.
//
Функция РазобратьКодМаркировки(Знач ДанныеДляРазбора, ВидыПродукции = Неопределено, ПримечаниеКРезультатуРазбора = Неопределено, Знач Настройки = Неопределено, ПроверятьАлфавитЭлементов = Истина) Экспорт
	
	Если Настройки = Неопределено Тогда
		Настройки = РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйПовтИсп.НастройкиРазбораКодаМаркировки();   
	КонецЕсли;
	
	Возврат РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйКлиентСервер.РазобратьКодМаркировки(ДанныеДляРазбора, ВидыПродукции, ПримечаниеКРезультатуРазбора, Настройки, ПроверятьАлфавитЭлементов, РазборИОбработкаКодовМаркировкиИСМПТКСлужебный);
	
КонецФункции

Процедура ДополнитьВспомогательнымиНастройкиРазбораКодаМаркировки(НастройкиРазбораКодаМаркировки, ВидПродукции, МодулиВыбраннойПодсистемы) Экспорт
	
	ДополнительныеПараметры(НастройкиРазбораКодаМаркировки, ВидПродукции, МодулиВыбраннойПодсистемы);
	
КонецПроцедуры

Процедура ДополнительныеПараметры(НастройкиРазбораКодаМаркировки, ВидПродукции, МодулиВыбраннойПодсистемы)
	
	ДополнительныеПараметры = НастройкиРазбораКодаМаркировки.ДополнительныеПараметры[МодулиВыбраннойПодсистемы.Подсистема];
	
	Если ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИСМПТК.Табачная") Тогда
		ИмяСвойства = "Табак";
		Если Не ДополнительныеПараметры.Свойство(ИмяСвойства) Тогда
			ДополнительныеПараметры.Вставить(ИмяСвойства, Новый Структура);
		КонецЕсли;
		ДополнительныеПараметрыКодМаркировкиГрупповойУпаковкиТабакаСХвостом(НастройкиРазбораКодаМаркировки, ВидПродукции, ДополнительныеПараметры[ИмяСвойства]);
	КонецЕсли;
	
КонецПроцедуры

Процедура ДополнительныеПараметрыКодМаркировкиГрупповойУпаковкиТабакаСХвостом(НастройкиРазбораКодаМаркировки, ВидПродукции, ДополнительныеПараметры)
	
	// После идентификатора 93 для блоков и только для них может быть произвольное количество идентификаторов применения
	// 010460620310255621!MmNZo2800514900093Ij5E240FA075486.00
	
	Если Не ДополнительныеПараметры.Свойство("ШаблоныКодаМаркировкиСХвостом") Тогда
		ДополнительныеПараметры.Вставить("ШаблоныКодаМаркировкиСХвостом",    Новый Массив);
		ДополнительныеПараметры.Вставить("ДобавленныеШаблоныКодаМаркировки", Новый Соответствие);
	КонецЕсли;
	ШаблоныКодаМаркировкиСХвостом    = ДополнительныеПараметры.ШаблоныКодаМаркировкиСХвостом;
	ДобавленныеШаблоныКодаМаркировки = ДополнительныеПараметры.ДобавленныеШаблоныКодаМаркировки;
	
	ИдентификаторКодаПроверки = "КодПроверки";
	
	ОтборПоТабачнымБлокам = Новый Структура("ВидПродукции, ВидУпаковки",
		ВидПродукции, Перечисления.ВидыУпаковокИСМПТК.Групповая);
	
	ШаблоныКодовМаркировки = РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйКлиентСервер.ШаблоныКодовМаркировкиПоОтбору(
		НастройкиРазбораКодаМаркировки.ШаблоныКодовМаркировкиПоВидамПродукции, ОтборПоТабачнымБлокам);
	
	Для Каждого ШаблонКодаМаркировки Из ШаблоныКодовМаркировки Цикл
		
		Если ДобавленныеШаблоныКодаМаркировки[ШаблонКодаМаркировки.Шаблон] <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ДанныеШаблона = НастройкиРазбораКодаМаркировки.ШаблоныИОписанияВидовПродукции[ШаблонКодаМаркировки.Шаблон];
		
		Если ДанныеШаблона.ОписаниеЭлементовКодаМаркировки.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		ОписаниеИдентификатора = ДанныеШаблона.ОписаниеЭлементовКодаМаркировки[ДанныеШаблона.ОписаниеЭлементовКодаМаркировки.ВГраница()];
		
		Если ВРег(ОписаниеИдентификатора.Имя) <> ВРег(ИдентификаторКодаПроверки) Тогда
			Продолжить;
		КонецЕсли;
		
		ДобавленныеШаблоныКодаМаркировки[ШаблонКодаМаркировки.Шаблон] = Истина;
		
		СтрокаШаблонаКМ = НастройкиРазбораКодаМаркировки.ШаблоныКодовМаркировки.Найти(ШаблонКодаМаркировки.Шаблон, "Шаблон");
		
		Если НастройкиРазбораКодаМаркировки.ТолькоСервер Тогда
			ШаблоныКодаМаркировкиСХвостом.Добавить(СтрокаШаблонаКМ);
		Иначе
			ШаблоныКодаМаркировкиСХвостом.Добавить(ОбщегоНазначенияИСМПТКПереопределяемый.СтрокаТаблицыЗначенийВСтруктуру(СтрокаШаблонаКМ));
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры
   
Функция НовыйСоставКодаМаркировки(ТипШтрихкодаИВидУпаковки)
	
	Возврат РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйКлиентСервер.НовыйСоставКодаМаркировки(ТипШтрихкодаИВидУпаковки);
	
КонецФункции

Функция НовыйСоставКодаМаркировкиТабак(ТипШтрихкодаИВидУпаковки)
	
	СоставКодаМаркировки = НовыйСоставКодаМаркировки(ТипШтрихкодаИВидУпаковки);
	
	СоставКодаМаркировки.Вставить("ВключаетМРЦ",         Ложь);
	СоставКодаМаркировки.Вставить("МРЦ",                 0);
	СоставКодаМаркировки.Вставить("МРЦСтрокой",          "");
	СоставКодаМаркировки.Вставить("КодТНВЭД",            "");
	СоставКодаМаркировки.Вставить("ВключаетКодПроверки", Ложь);
	
	Возврат СоставКодаМаркировки;
	
КонецФункции

#Область ШаблоныКодовМаркировки

Процедура ЗаполнитьШаблоныКодовМаркировкиПоНачальнымНастройкам(НастройкиРазбораКодаМаркировки, ДанныеОписанийКодаМаркировки)
	
	Для Каждого НастройкаОписанияКодаМаркировки Из ДанныеОписанийКодаМаркировки.ОписанияКодовМаркировки Цикл
		
		ВидПродукции = НастройкаОписанияКодаМаркировки.ВидПродукции;
		ТипШтрихкода = НастройкаОписанияКодаМаркировки.ТипШтрихкодаИВидУпаковки.ТипШтрихкода;
		ВидУпаковки  = НастройкаОписанияКодаМаркировки.ТипШтрихкодаИВидУпаковки.ВидУпаковки;
		
		СоставКодаМаркировки = НастройкаОписанияКодаМаркировки.СоставКодаМаркировки;
		
		Для Каждого ОписаниеЭлементовШаблонаКодаМаркировки Из НастройкаОписанияКодаМаркировки.СписокШаблонов Цикл
			
			ДанныеШаблонаКМ = ОписаниеЭлементовШаблонаКодаМаркировкиВСтруктуру(ОписаниеЭлементовШаблонаКодаМаркировки);
			
			// Заполнение поисковой таблицы
			ШаблонКМ = НастройкиРазбораКодаМаркировки.ШаблоныКодовМаркировкиПоВидамПродукции.Добавить();
			ШаблонКМ.ВидПродукции        = ВидПродукции;
			ШаблонКМ.ТипШтрихкода        = ТипШтрихкода;
			ШаблонКМ.ВидУпаковки         = ВидУпаковки;
			ШаблонКМ.Шаблон              = ДанныеШаблонаКМ.Шаблон;
			ШаблонКМ.КоличествоЭлементов = ДанныеШаблонаКМ.КоличествоЭлементов;
			ШаблонКМ.НачинаетсяСоСкобки  = ДанныеШаблонаКМ.НачинаетсяСоСкобки;
			ШаблонКМ.Длина               = ДанныеШаблонаКМ.ДлинаКодаМаркировки;
			ШаблонКМ.ДлинаСоСкобкой      = ДанныеШаблонаКМ.ДлинаКодаМаркировкиСоСкобкой;
			ШаблонКМ.КодПервогоЭлемента  = ДанныеШаблонаКМ.КодПервогоЭлемента;
			
			// Заполнение правил разбора
			ОписаниеТекущегоШаблона = НастройкиРазбораКодаМаркировки.ШаблоныИОписанияВидовПродукции[ДанныеШаблонаКМ.Шаблон];
			Если ОписаниеТекущегоШаблона = Неопределено Тогда
				
				ПозицииЭлементовКодаМаркировки = РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйКлиентСервер.ПозицииЭлементовВШаблонеКодаМаркировки(ОписаниеЭлементовШаблонаКодаМаркировки);
				
				ОписаниеТекущегоШаблона = Новый Структура;
				ОписаниеТекущегоШаблона.Вставить("ВидыПродукции",                        Новый Массив);
				ОписаниеТекущегоШаблона.Вставить("ВидыУпаковок",                         Новый Массив);
				ОписаниеТекущегоШаблона.Вставить("ВидыУпаковокПоВидамПродукции",         Новый Соответствие);
				ОписаниеТекущегоШаблона.Вставить("ОписаниеЭлементовКодаМаркировки",      ОписаниеЭлементовШаблонаКодаМаркировки);
				ОписаниеТекущегоШаблона.Вставить("ПозицииЭлементовКодаМаркировки",       ПозицииЭлементовКодаМаркировки);
				ОписаниеТекущегоШаблона.Вставить("НачинаетсяСоСкобки",                   ДанныеШаблонаКМ.НачинаетсяСоСкобки);
				ОписаниеТекущегоШаблона.Вставить("СоставКодаМаркировки",                 Неопределено); // Состав определим после формирования всех шаблонов
				ОписаниеТекущегоШаблона.Вставить("ВозможныеСоставыКодаМаркировки",       Новый Массив);
				ОписаниеТекущегоШаблона.Вставить("ИменаОбщихМодулей",                    Новый Массив); // Состав определим после формирования всех шаблонов
				
				НастройкиРазбораКодаМаркировки.ШаблоныИОписанияВидовПродукции[ДанныеШаблонаКМ.Шаблон] = ОписаниеТекущегоШаблона;
				
			КонецЕсли;
			
			ДобавитьСоставКМ = Ложь;
			
			ВидыУпаковокПоВидамПродукции = ОписаниеТекущегоШаблона.ВидыУпаковокПоВидамПродукции[ВидПродукции];
			Если ВидыУпаковокПоВидамПродукции = Неопределено Тогда
				
				ОписаниеТекущегоШаблона.ВидыПродукции.Добавить(ВидПродукции);
				
				ВидыУпаковокПоВидамПродукции = Новый Массив;
				ВидыУпаковокПоВидамПродукции.Добавить(ВидУпаковки);
				ОписаниеТекущегоШаблона.ВидыУпаковокПоВидамПродукции[ВидПродукции] = ВидыУпаковокПоВидамПродукции;
				
				ДобавитьСоставКМ = Истина;
				
			ИначеЕсли ВидыУпаковокПоВидамПродукции.Найти(ВидУпаковки) = Неопределено Тогда
				
				ВидыУпаковокПоВидамПродукции.Добавить(ВидУпаковки);
				ДобавитьСоставКМ = Истина;
				
			КонецЕсли;
			
			Если ОписаниеТекущегоШаблона.ВидыУпаковок.Найти(ВидУпаковки) = Неопределено Тогда
				ОписаниеТекущегоШаблона.ВидыУпаковок.Добавить(ВидУпаковки);
				ДобавитьСоставКМ = Истина;
			КонецЕсли;
			
			Если ДобавитьСоставКМ Тогда
				ОписаниеТекущегоШаблона.ВозможныеСоставыКодаМаркировки.Добавить(
					Новый Структура("ВидПродукции, ВидУпаковки, СоставКодаМаркировки",
						ВидПродукции, ВидУпаковки, СоставКодаМаркировки));
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	ИменаКолонок                             = Новый Массив;
	ИменаКолонокБезВидаПродукцииВидаУпаковки = Новый Массив;
	
	Для Каждого КолонкаТаблици Из НастройкиРазбораКодаМаркировки.ШаблоныКодовМаркировкиПоВидамПродукции.Колонки Цикл
		ИменаКолонок.Добавить(КолонкаТаблици.Имя);
		Если Не (КолонкаТаблици.Имя = "ВидПродукции" Или КолонкаТаблици.Имя = "ВидУпаковки") Тогда
			ИменаКолонокБезВидаПродукцииВидаУпаковки.Добавить(КолонкаТаблици.Имя);
		КонецЕсли;
	КонецЦикла;
	
	// Сворачиваем строки что бы исключить дубли
	ИменаКолонокСтрокой = СтрСоединить(ИменаКолонок, ",");
	НастройкиРазбораКодаМаркировки.ШаблоныКодовМаркировкиПоВидамПродукции.Свернуть(ИменаКолонокСтрокой);
	
	// Сворачиваем строки без учета Вида продукции и Вида Упаковки
	ИменаКолонокСтрокой = СтрСоединить(ИменаКолонокБезВидаПродукцииВидаУпаковки, ",");
	ШаблоныКодовМаркировки = НастройкиРазбораКодаМаркировки.ШаблоныКодовМаркировкиПоВидамПродукции.Скопировать(, ИменаКолонокСтрокой);
	ШаблоныКодовМаркировки.Свернуть(ИменаКолонокСтрокой);
	
	ШаблоныКодовМаркировки.Сортировать("ДлинаСоСкобкой, Длина");
	
	// Восстановим колонки ВидПродукции и ВидУпаковки
	Для Каждого ИмяКолонки Из СтрРазделить("ВидПродукции,ВидУпаковки", ",") Цикл
		КолонкаТаблици = НастройкиРазбораКодаМаркировки.ШаблоныКодовМаркировкиПоВидамПродукции.Колонки[ИмяКолонки];
		ШаблоныКодовМаркировки.Колонки.Добавить(КолонкаТаблици.Имя, КолонкаТаблици.ТипЗначения);
	КонецЦикла;
	
	Для Каждого ШаблонКМ Из ШаблоныКодовМаркировки Цикл
		
		ДанныеШаблона = НастройкиРазбораКодаМаркировки.ШаблоныИОписанияВидовПродукции[ШаблонКМ.Шаблон];
		Если ДанныеШаблона.ВидыПродукции.Количество() = 1 Тогда
			ШаблонКМ.ВидПродукции = ДанныеШаблона.ВидыПродукции[0];
		КонецЕсли;
		Если ДанныеШаблона.ВидыУпаковок.Количество() = 1 Тогда
			ШаблонКМ.ВидУпаковки = ДанныеШаблона.ВидыУпаковок[0];
		КонецЕсли;
		
	КонецЦикла;
	
	НастройкиРазбораКодаМаркировки.ШаблоныКодовМаркировки = ШаблоныКодовМаркировки;
	
	// Заполнение СоставКодаМаркировки в данных шаблона
	Для Каждого ШаблонКМ Из НастройкиРазбораКодаМаркировки.ШаблоныКодовМаркировки Цикл
		
		СоставКодаМаркировки = Неопределено;
		
		ДанныеШаблона = НастройкиРазбораКодаМаркировки.ШаблоныИОписанияВидовПродукции[ШаблонКМ.Шаблон];
		
		СоставКодаМаркировки = ДанныеШаблона.ВозможныеСоставыКодаМаркировки[0].СоставКодаМаркировки;
		
		Если ДанныеШаблона.ВидыПродукции.Количество() > 1 Тогда
			
			СвойстваСоставаКМ = Новый Массив;
			Для Каждого ДанныеСоставаКМ Из ДанныеШаблона.ВозможныеСоставыКодаМаркировки[0].СоставКодаМаркировки Цикл
				СвойстваСоставаКМ.Добавить(
					Новый Структура("Имя, Состояние", ДанныеСоставаКМ.Ключ, Истина));
			КонецЦикла;
			
			ПереформироватьСостав = Ложь;
			Для Каждого ДанныеПоСоставуКМ Из ДанныеШаблона.ВозможныеСоставыКодаМаркировки Цикл
				
				Для Каждого ЭлементСоставаКМ Из СвойстваСоставаКМ Цикл
					
					Если ЭлементСоставаКМ.Состояние И Не ДанныеПоСоставуКМ.СоставКодаМаркировки.Свойство(ЭлементСоставаКМ.Имя) Тогда
						ЭлементСоставаКМ.Состояние = Ложь;
						ПереформироватьСостав = Истина;
					КонецЕсли;
					
				КонецЦикла;
			КонецЦикла;
			
			Если ПереформироватьСостав Тогда
				СоставКМ = Новый Структура;
				
				Для Каждого ЭлементСоставаКМ Из СвойстваСоставаКМ Цикл
					Если ЭлементСоставаКМ.Состояние Тогда
						СоставКМ.Вставить(ЭлементСоставаКМ.Имя, СоставКодаМаркировки[ЭлементСоставаКМ.Имя]);
					КонецЕсли;
				КонецЦикла;
				
				СоставКодаМаркировки = СоставКМ;
			КонецЕсли;
			
		КонецЕсли;
		
		ДанныеШаблона.СоставКодаМаркировки = СоставКодаМаркировки;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ОпределитьОбщиеМодулиВШаблонахИОписанияхВидовПродукции(НастройкиРазбораКодаМаркировки, ДанныеОбщихМодулейПоВидуПродукции)
	
	Для Каждого СтрокаПоискаШаблона Из НастройкиРазбораКодаМаркировки.ШаблоныКодовМаркировки Цикл
		
		ДанныеШаблона      = НастройкиРазбораКодаМаркировки.ШаблоныИОписанияВидовПродукции[СтрокаПоискаШаблона.Шаблон];
		ДанныеОбщихМодулей = Новый Соответствие;
		
		Для Каждого ВидПродукции Из ДанныеШаблона.ВидыПродукции Цикл
			
			МодулиВыбраннойПодсистемы = ДанныеОбщихМодулейПоВидуПродукции[ВидПродукции];
			
			Если ДанныеОбщихМодулей[МодулиВыбраннойПодсистемы.Подсистема] = Неопределено Тогда
				
				ДанныеОбщихМодулей[МодулиВыбраннойПодсистемы.Подсистема] = МодулиВыбраннойПодсистемы;
				
				ДанныеШаблона.ИменаОбщихМодулей.Добавить(МодулиВыбраннойПодсистемы.Разбор.Имя);
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ОписаниеЭлементовШаблонаКодаМаркировкиВСтруктуру(ОписаниеЭлементовШаблонаКодаМаркировки)
	
	Шаблон                       = "";
	КоличествоЭлементов          = 0;
	НачинаетсяСоСкобки           = Ложь;
	ДлинаКодаМаркировки          = 0;
	ДлинаКодаМаркировкиСоСкобкой = 0;
	КодПервогоЭлемента           = "";
	
	СтрокиШаблона = Новый Массив;
	
	КоличествоЭлементов = ОписаниеЭлементовШаблонаКодаМаркировки.Количество();
	Для ТекущийИндекс = 0 По КоличествоЭлементов - 1 Цикл
		
		ОписаниеЭлементаКМ = ОписаниеЭлементовШаблонаКодаМаркировки[ТекущийИндекс];
		
		Если ТекущийИндекс = 0 Тогда
			НачинаетсяСоСкобки = ЗначениеЗаполнено(ОписаниеЭлементаКМ.Код);
			КодПервогоЭлемента = ОписаниеЭлементаКМ.Код;
		КонецЕсли;
		
		ДлинаКодаМаркировки = ДлинаКодаМаркировки + СтрДлина(ОписаниеЭлементаКМ.Код) + ОписаниеЭлементаКМ.Длина;
		
		Если ТекущийИндекс > 0 Тогда
			СтрокиШаблона.Добавить("+");
		КонецЕсли;
		
		Если НачинаетсяСоСкобки Тогда
			СтрокиШаблона.Добавить(СтрШаблон("%1 + %2 (%3 chars)",
				ОписаниеЭлементаКМ.Код, ОписаниеЭлементаКМ.Имя, ОписаниеЭлементаКМ.Длина));
		Иначе
			СтрокиШаблона.Добавить(СтрШаблон("%1 (%2 chars)",
				ОписаниеЭлементаКМ.Имя, ОписаниеЭлементаКМ.Длина));
		КонецЕсли;
		
	КонецЦикла;
	
	Шаблон = СтрСоединить(СтрокиШаблона, " ");
	
	ДлинаКодаМаркировкиСоСкобкой = 0;
	Если НачинаетсяСоСкобки Тогда
		ДлинаКодаМаркировкиСоСкобкой = ДлинаКодаМаркировки + КоличествоЭлементов * 2;
	КонецЕсли;
	
	Данные = Новый Структура;
	Данные.Вставить("Шаблон",                       Шаблон);
	Данные.Вставить("КоличествоЭлементов",          КоличествоЭлементов);
	Данные.Вставить("НачинаетсяСоСкобки",           НачинаетсяСоСкобки);
	Данные.Вставить("ДлинаКодаМаркировки",          ДлинаКодаМаркировки);
	Данные.Вставить("ДлинаКодаМаркировкиСоСкобкой", ДлинаКодаМаркировкиСоСкобкой);
	Данные.Вставить("КодПервогоЭлемента",           КодПервогоЭлемента);
	
	Возврат Данные;
	
КонецФункции

Функция ОписанияШаблоновКодаМаркировки(ОписаниеЭлементовКМ, ШаблоныСтрокой) Экспорт
	
	СписокОписанийШаблонов = Новый Массив;
	
	Для Каждого ШаблонСтрокой Из ШаблоныСтрокой Цикл
		
		ОписаниеШаблонаКМ = Новый Массив;
		
		СписокЭлементовКМ = СтрРазделить(ШаблонСтрокой, "+", Ложь);
		Для Каждого ИмяЭлементаКМ Из СписокЭлементовКМ Цикл
			
			ОписаниеЭлементаКМ = ОписаниеЭлементовКМ[СокрЛП(ИмяЭлементаКМ)];
			
			ОписаниеШаблонаКМ.Добавить(ОписаниеЭлементаКМ);
			
		КонецЦикла;
		
		СписокОписанийШаблонов.Добавить(ОписаниеШаблонаКМ);
		
	КонецЦикла;
	
	Возврат СписокОписанийШаблонов;
	
КонецФункции

#Область ОписаниеКодаМаркировки

Процедура ДополнитьОписанияКодовМаркировки(ДанныеОписанийКодаМаркировки, ВидПродукции, ДанныеОбщегоМодуля) Экспорт
	
	Если ВидПродукции = Перечисления.ВидыПродукцииИСМПТК.Табачная Тогда
		
		ОписаниеКодаМаркировкиТабачногоБлока(ДанныеОписанийКодаМаркировки, ВидПродукции, ДанныеОбщегоМодуля);
		ОписаниеКодаМаркировкиТабачнойПачкиКодПроверки8(ДанныеОписанийКодаМаркировки, ВидПродукции, ДанныеОбщегоМодуля);
		
	ИначеЕсли ВидПродукции = Перечисления.ВидыПродукцииИСМПТК.АльтернативныйТабак Тогда
		
		ОписаниеКодаМаркировкиАльтернативногоТабачногоБлока(ДанныеОписанийКодаМаркировки, ВидПродукции, ДанныеОбщегоМодуля);
		ОписаниеКодаМаркировкиАльтернативнойТабачнойПачки(ДанныеОписанийКодаМаркировки, ВидПродукции, ДанныеОбщегоМодуля);
		ОписаниеКодаМаркировкиАльтернативнойТабачнойПачкиСИдентификаторамиПрименения(ДанныеОписанийКодаМаркировки, ВидПродукции, ДанныеОбщегоМодуля);
		
	ИначеЕсли ВидПродукции = Перечисления.ВидыПродукцииИСМПТК.Обувная Тогда
		
		ОписаниеКодаМаркировкиОбуви(ДанныеОписанийКодаМаркировки, ВидПродукции, ДанныеОбщегоМодуля);
		ОписаниеКодаМаркировкиОбувиКодТНВЭД10(ДанныеОписанийКодаМаркировки, ВидПродукции, ДанныеОбщегоМодуля);
		
	ИначеЕсли ВидПродукции = Перечисления.ВидыПродукцииИСМПТК.ЛегкаяПромышленность Тогда
		
		ОписаниеКодаМаркировкиПродукцииИСМП(ДанныеОписанийКодаМаркировки, ВидПродукции, ДанныеОбщегоМодуля);
		
	ИначеЕсли ВидПродукции = Перечисления.ВидыПродукцииИСМПТК.МолочнаяПродукция Тогда
		
		ОписаниеКодаМаркировкиМолочнаяПродукция(ДанныеОписанийКодаМаркировки, ВидПродукции, ДанныеОбщегоМодуля);
		
		УстаревшийФорматОписаниеКодаМаркировкиМолочнаяПродукция(ДанныеОписанийКодаМаркировки, ВидПродукции, ДанныеОбщегоМодуля);
		УстаревшийФорматОписаниеКодаМаркировкиМолочнаяПродукцияСкоропортящаяся(ДанныеОписанийКодаМаркировки, ВидПродукции, ДанныеОбщегоМодуля);
		
	ИначеЕсли ВидПродукции = Перечисления.ВидыПродукцииИСМПТК.БезалкогольныеНапитки Тогда
		
		ОписаниеКодаМаркировкиПродукцииУпакованнаяВода(ДанныеОписанийКодаМаркировки, ВидПродукции, ДанныеОбщегоМодуля);
		
	ИначеЕсли ВидПродукции = Перечисления.ВидыПродукцииИСМПТК.ЛекарственныеПрепараты Тогда 
		
		ОписаниеКодаМаркировкиЛекарства(ДанныеОписанийКодаМаркировки, ВидПродукции, ДанныеОбщегоМодуля);
		
	Иначе
		
		Возврат;
		
	КонецЕсли;
	
	// Упаковка
	ОписаниеКодаМаркировкиЛогистическаяУпаковка20(ДанныеОписанийКодаМаркировки, ВидПродукции, ДанныеОбщегоМодуля);
	
	Если Не (ВидПродукции = Перечисления.ВидыПродукцииИСМПТК.Табачная
	     Или ВидПродукции = Перечисления.ВидыПродукцииИСМПТК.АльтернативныйТабак) Тогда
		
		ОписаниеКодаМаркировкиЛогистическаяУпаковка18(ДанныеОписанийКодаМаркировки, ВидПродукции, ДанныеОбщегоМодуля);
		
	КонецЕсли;
	
КонецПроцедуры

Функция НастройкиОписанияШаблонаКодаМаркировкиВидаПродукции() Экспорт
	
	Возврат Новый Структура("ВидПродукции, ТипШтрихкодаИВидУпаковки, СоставКодаМаркировки, СписокШаблонов, ДанныеОбщегоМодуля");
	
КонецФункции

// Формирует описание элемента для кода маркировки
// 
// Параметры:
// 	Код - Строка - Код элемента.
// 	Имя - Строка - Имя элемента.
// 	КоличествоЗнаков - Число - Число знаков.
// 	АлфавитДопустимыхСимволов - Строка - Если заполнено, то определяет какими символами может быть заполнено значение элемента.
// Возвращаемое значение:
// 	Структура - описание элемента для кода маркировки:
// * Код - Строка - Код элемента.
// * Имя - Строка - Имя элемента.
// * Длина - Число - Число знаков.
// * Алфавит - Строка - Если заполнено, то определяет какими символами может быть заполнено значение элемента.
Функция ОписаниеЭлементаКодаМаркировки(Код, Имя, КоличествоЗнаков, АлфавитДопустимыхСимволов = "") Экспорт
	
	ОписаниеКода = Новый Структура;
	ОписаниеКода.Вставить("Код",     Код);
	ОписаниеКода.Вставить("Имя",     Имя);
	ОписаниеКода.Вставить("Длина",   КоличествоЗнаков);
	ОписаниеКода.Вставить("Алфавит", АлфавитДопустимыхСимволов);
	
	Возврат ОписаниеКода;
	
КонецФункции

// Формирует описание кода маркировки для табачного блока
Процедура ОписаниеКодаМаркировкиТабачногоБлока(ДанныеОписанийКодаМаркировки, ВидПродукции, ДанныеОбщегоМодуля)
	
	Алфавит = ДанныеОписанийКодаМаркировки.Алфавит;
	
	ОписаниеЭлементовКМ = Новый Структура("GTIN, СерийныйНомер, МРЦСтрокой, КодПроверки, КодТНВЭД");
	ОписаниеЭлементовКМ.GTIN          = ОписаниеЭлементаКодаМаркировки("01",   "GTIN",         14);
	ОписаниеЭлементовКМ.СерийныйНомер = ОписаниеЭлементаКодаМаркировки("21",   "СерийныйНомер", 7, Алфавит.БуквыЦифрыЗнаки);
	ОписаниеЭлементовКМ.МРЦСтрокой    = ОписаниеЭлементаКодаМаркировки("8005", "МРЦСтрокой",    6, Алфавит.Цифры);
	ОписаниеЭлементовКМ.КодПроверки   = ОписаниеЭлементаКодаМаркировки("93",   "КодПроверки",   8, Алфавит.БуквыЦифрыЗнаки);
	ОписаниеЭлементовКМ.КодТНВЭД      = ОписаниеЭлементаКодаМаркировки("240",  "КодТНВЭД",      8, Алфавит.Цифры);
	
	ШаблоныСтрокой = Новый Массив;
	ШаблоныСтрокой.Добавить("GTIN + СерийныйНомер");
	ШаблоныСтрокой.Добавить("GTIN + СерийныйНомер + МРЦСтрокой");
	ШаблоныСтрокой.Добавить("GTIN + СерийныйНомер + МРЦСтрокой + КодПроверки");
	ШаблоныСтрокой.Добавить("GTIN + СерийныйНомер + МРЦСтрокой + КодТНВЭД");
	ШаблоныСтрокой.Добавить("GTIN + СерийныйНомер + МРЦСтрокой + КодПроверки + КодТНВЭД");
	//Добавили ибо есть такой
	ШаблоныСтрокой.Добавить("GTIN + СерийныйНомер + КодПроверки");
	
	СписокШаблонов = ОписанияШаблоновКодаМаркировки(ОписаниеЭлементовКМ, ШаблоныСтрокой);
	
	ТипШтрихкодаИВидУпаковки = РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйКлиентСервер.ТипШтрихкодаИВидУпаковки();
	ТипШтрихкодаИВидУпаковки.ТипШтрихкода = Перечисления.ТипыШтрихкодовИСМПТК.GS1_DataMatrix;
	ТипШтрихкодаИВидУпаковки.ВидУпаковки  = Перечисления.ВидыУпаковокИСМПТК.Групповая;
	
	СоставКодаМаркировки = НовыйСоставКодаМаркировкиТабак(ТипШтрихкодаИВидУпаковки);
	СоставКодаМаркировки.ВключаетИдентификаторыПрименения = Истина;
	
	// Добавление настроек
	НастройкаОписанияКодаМаркировки = НастройкиОписанияШаблонаКодаМаркировкиВидаПродукции();
	НастройкаОписанияКодаМаркировки.ВидПродукции             = ВидПродукции;
	НастройкаОписанияКодаМаркировки.ТипШтрихкодаИВидУпаковки = ТипШтрихкодаИВидУпаковки;
	НастройкаОписанияКодаМаркировки.СоставКодаМаркировки     = СоставКодаМаркировки;
	НастройкаОписанияКодаМаркировки.ДанныеОбщегоМодуля       = ДанныеОбщегоМодуля;
	НастройкаОписанияКодаМаркировки.СписокШаблонов           = СписокШаблонов;
	
	ДанныеОписанийКодаМаркировки.ОписанияКодовМаркировки.Добавить(НастройкаОписанияКодаМаркировки);
	
КонецПроцедуры

Процедура ОписаниеКодаМаркировкиТабачнойПачкиКодПроверки8(ДанныеОписанийКодаМаркировки, ВидПродукции, ДанныеОбщегоМодуля)
	
	Алфавит = ДанныеОписанийКодаМаркировки.Алфавит;
	
	ОписаниеЭлементовКМ = Новый Структура("GTIN, СерийныйНомер, КодПроверки");
	ОписаниеЭлементовКМ.GTIN          = ОписаниеЭлементаКодаМаркировки("", "GTIN",         14);
	ОписаниеЭлементовКМ.СерийныйНомер = ОписаниеЭлементаКодаМаркировки("", "СерийныйНомер", 7, Алфавит.БуквыЦифрыЗнаки);
	ОписаниеЭлементовКМ.КодПроверки   = ОписаниеЭлементаКодаМаркировки("", "КодПроверки",   8, Алфавит.БуквыЦифрыЗнаки);
	
	ШаблоныСтрокой = Новый Массив;
	ШаблоныСтрокой.Добавить("GTIN + СерийныйНомер");
	ШаблоныСтрокой.Добавить("GTIN + СерийныйНомер + КодПроверки");
		
	СписокШаблонов = ОписанияШаблоновКодаМаркировки(ОписаниеЭлементовКМ, ШаблоныСтрокой);
	
	ТипШтрихкодаИВидУпаковки = РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйКлиентСервер.ТипШтрихкодаИВидУпаковки();
	ТипШтрихкодаИВидУпаковки.ТипШтрихкода = Перечисления.ТипыШтрихкодовИСМПТК.DataMatrix;
	ТипШтрихкодаИВидУпаковки.ВидУпаковки  = Перечисления.ВидыУпаковокИСМПТК.Потребительская;
	
	СоставКодаМаркировки = НовыйСоставКодаМаркировкиТабак(ТипШтрихкодаИВидУпаковки);
	СоставКодаМаркировки.ВключаетИдентификаторыПрименения = Ложь;
	
	// Добавление настроек
	НастройкаОписанияКодаМаркировки = НастройкиОписанияШаблонаКодаМаркировкиВидаПродукции();
	НастройкаОписанияКодаМаркировки.ВидПродукции             = ВидПродукции;
	НастройкаОписанияКодаМаркировки.ТипШтрихкодаИВидУпаковки = ТипШтрихкодаИВидУпаковки;
	НастройкаОписанияКодаМаркировки.СоставКодаМаркировки     = СоставКодаМаркировки;
	НастройкаОписанияКодаМаркировки.ДанныеОбщегоМодуля       = ДанныеОбщегоМодуля;
	НастройкаОписанияКодаМаркировки.СписокШаблонов           = СписокШаблонов;
	
	ДанныеОписанийКодаМаркировки.ОписанияКодовМаркировки.Добавить(НастройкаОписанияКодаМаркировки);
	
КонецПроцедуры

// Формирует описание кода маркировки для альтернативного табачного блока
Процедура ОписаниеКодаМаркировкиАльтернативногоТабачногоБлока(ДанныеОписанийКодаМаркировки, ВидПродукции, ДанныеОбщегоМодуля)
	
	Алфавит = ДанныеОписанийКодаМаркировки.Алфавит;
	
	ОписаниеЭлементовКМ = Новый Структура("GTIN, СерийныйНомер, МРЦСтрокой, КодПроверки");
	ОписаниеЭлементовКМ.GTIN          = ОписаниеЭлементаКодаМаркировки("01",   "GTIN",         14);
	ОписаниеЭлементовКМ.СерийныйНомер = ОписаниеЭлементаКодаМаркировки("21",   "СерийныйНомер", 7, Алфавит.БуквыЦифрыЗнаки);
	ОписаниеЭлементовКМ.МРЦСтрокой    = ОписаниеЭлементаКодаМаркировки("8005", "МРЦСтрокой",    6, Алфавит.Цифры);
	ОписаниеЭлементовКМ.КодПроверки   = ОписаниеЭлементаКодаМаркировки("93",   "КодПроверки",   4, Алфавит.БуквыЦифрыЗнаки);
	
	ШаблоныСтрокой = Новый Массив;
	ШаблоныСтрокой.Добавить("GTIN + СерийныйНомер");
	ШаблоныСтрокой.Добавить("GTIN + СерийныйНомер + КодПроверки");
	
	СписокШаблонов = ОписанияШаблоновКодаМаркировки(ОписаниеЭлементовКМ, ШаблоныСтрокой);
	
	ТипШтрихкодаИВидУпаковки = РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйКлиентСервер.ТипШтрихкодаИВидУпаковки();
	ТипШтрихкодаИВидУпаковки.ТипШтрихкода = Перечисления.ТипыШтрихкодовИСМПТК.GS1_DataMatrix;
	ТипШтрихкодаИВидУпаковки.ВидУпаковки  = Перечисления.ВидыУпаковокИСМПТК.Групповая;
	
	СоставКодаМаркировки = НовыйСоставКодаМаркировкиТабак(ТипШтрихкодаИВидУпаковки);
	СоставКодаМаркировки.ВключаетИдентификаторыПрименения = Истина;
	
	// Добавление настроек
	НастройкаОписанияКодаМаркировки = НастройкиОписанияШаблонаКодаМаркировкиВидаПродукции();
	НастройкаОписанияКодаМаркировки.ВидПродукции             = ВидПродукции;
	НастройкаОписанияКодаМаркировки.ТипШтрихкодаИВидУпаковки = ТипШтрихкодаИВидУпаковки;
	НастройкаОписанияКодаМаркировки.СоставКодаМаркировки     = СоставКодаМаркировки;
	НастройкаОписанияКодаМаркировки.ДанныеОбщегоМодуля       = ДанныеОбщегоМодуля;
	НастройкаОписанияКодаМаркировки.СписокШаблонов           = СписокШаблонов;
	
	ДанныеОписанийКодаМаркировки.ОписанияКодовМаркировки.Добавить(НастройкаОписанияКодаМаркировки);
	
КонецПроцедуры

// Формирует описание кода маркировки для альтернативной табачной пачки
Процедура ОписаниеКодаМаркировкиАльтернативнойТабачнойПачки(ДанныеОписанийКодаМаркировки, ВидПродукции, ДанныеОбщегоМодуля)
	
	Алфавит = ДанныеОписанийКодаМаркировки.Алфавит;
	
	ОписаниеЭлементовКМ = Новый Структура("GTIN, СерийныйНомер, МРЦСтрокой, КодПроверки");
	ОписаниеЭлементовКМ.GTIN          = ОписаниеЭлементаКодаМаркировки("", "GTIN",         14);
	ОписаниеЭлементовКМ.СерийныйНомер = ОписаниеЭлементаКодаМаркировки("", "СерийныйНомер", 7, Алфавит.БуквыЦифрыЗнаки);
	ОписаниеЭлементовКМ.МРЦСтрокой    = ОписаниеЭлементаКодаМаркировки("", "МРЦСтрокой",    4, Алфавит.БуквыЦифрыЗнакиМРЦ);
	ОписаниеЭлементовКМ.КодПроверки   = ОписаниеЭлементаКодаМаркировки("", "КодПроверки",   4, Алфавит.БуквыЦифрыЗнаки);
	
	ШаблоныСтрокой = Новый Массив;
	ШаблоныСтрокой.Добавить("GTIN + СерийныйНомер");
	ШаблоныСтрокой.Добавить("GTIN + СерийныйНомер + МРЦСтрокой");
	ШаблоныСтрокой.Добавить("GTIN + СерийныйНомер + МРЦСтрокой + КодПроверки");
	
	СписокШаблонов = ОписанияШаблоновКодаМаркировки(ОписаниеЭлементовКМ, ШаблоныСтрокой);
	
	ТипШтрихкодаИВидУпаковки = РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйКлиентСервер.ТипШтрихкодаИВидУпаковки();
	ТипШтрихкодаИВидУпаковки.ТипШтрихкода = Перечисления.ТипыШтрихкодовИСМПТК.DataMatrix;
	ТипШтрихкодаИВидУпаковки.ВидУпаковки  = Перечисления.ВидыУпаковокИСМПТК.Потребительская;
	
	СоставКодаМаркировки = НовыйСоставКодаМаркировкиТабак(ТипШтрихкодаИВидУпаковки);
	СоставКодаМаркировки.ВключаетИдентификаторыПрименения = Ложь;
	
	// Добавление настроек
	НастройкаОписанияКодаМаркировки = НастройкиОписанияШаблонаКодаМаркировкиВидаПродукции();
	НастройкаОписанияКодаМаркировки.ВидПродукции             = ВидПродукции;
	НастройкаОписанияКодаМаркировки.ТипШтрихкодаИВидУпаковки = ТипШтрихкодаИВидУпаковки;
	НастройкаОписанияКодаМаркировки.СоставКодаМаркировки     = СоставКодаМаркировки;
	НастройкаОписанияКодаМаркировки.ДанныеОбщегоМодуля       = ДанныеОбщегоМодуля;
	НастройкаОписанияКодаМаркировки.СписокШаблонов           = СписокШаблонов;
	
	ДанныеОписанийКодаМаркировки.ОписанияКодовМаркировки.Добавить(НастройкаОписанияКодаМаркировки);
	
КонецПроцедуры

// Формирует описание кода маркировки для альтернативной табачной пачки с идентификаторами применения
Процедура ОписаниеКодаМаркировкиАльтернативнойТабачнойПачкиСИдентификаторамиПрименения(ДанныеОписанийКодаМаркировки, ВидПродукции, ДанныеОбщегоМодуля)
	
	Алфавит = ДанныеОписанийКодаМаркировки.Алфавит;
	
	ОписаниеЭлементовКМ = Новый Структура("GTIN, СерийныйНомер, МРЦСтрокой, КодПроверки");
	ОписаниеЭлементовКМ.GTIN          = ОписаниеЭлементаКодаМаркировки("01", "GTIN",         14);
	ОписаниеЭлементовКМ.СерийныйНомер = ОписаниеЭлементаКодаМаркировки("21", "СерийныйНомер", 7, Алфавит.БуквыЦифрыЗнаки);
	ОписаниеЭлементовКМ.КодПроверки   = ОписаниеЭлементаКодаМаркировки("93", "КодПроверки",   4, Алфавит.БуквыЦифрыЗнаки);
	
	ШаблоныСтрокой = Новый Массив;
	ШаблоныСтрокой.Добавить("GTIN + СерийныйНомер");
	ШаблоныСтрокой.Добавить("GTIN + СерийныйНомер + КодПроверки");
	
	СписокШаблонов = ОписанияШаблоновКодаМаркировки(ОписаниеЭлементовКМ, ШаблоныСтрокой);
	
	ТипШтрихкодаИВидУпаковки = РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйКлиентСервер.ТипШтрихкодаИВидУпаковки();
	ТипШтрихкодаИВидУпаковки.ТипШтрихкода = Перечисления.ТипыШтрихкодовИСМПТК.GS1_DataMatrix;
	ТипШтрихкодаИВидУпаковки.ВидУпаковки  = Перечисления.ВидыУпаковокИСМПТК.Потребительская;
	
	СоставКодаМаркировки = НовыйСоставКодаМаркировкиТабак(ТипШтрихкодаИВидУпаковки);
	СоставКодаМаркировки.ВключаетИдентификаторыПрименения = Истина;
	
	// Добавление настроек
	НастройкаОписанияКодаМаркировки = НастройкиОписанияШаблонаКодаМаркировкиВидаПродукции();
	НастройкаОписанияКодаМаркировки.ВидПродукции             = ВидПродукции;
	НастройкаОписанияКодаМаркировки.ТипШтрихкодаИВидУпаковки = ТипШтрихкодаИВидУпаковки;
	НастройкаОписанияКодаМаркировки.СоставКодаМаркировки     = СоставКодаМаркировки;
	НастройкаОписанияКодаМаркировки.ДанныеОбщегоМодуля       = ДанныеОбщегоМодуля;
	НастройкаОписанияКодаМаркировки.СписокШаблонов           = СписокШаблонов;
	
	ДанныеОписанийКодаМаркировки.ОписанияКодовМаркировки.Добавить(НастройкаОписанияКодаМаркировки);
	
КонецПроцедуры

// Формирует описание кода маркировки для обуви
Процедура ОписаниеКодаМаркировкиОбуви(ДанныеОписанийКодаМаркировки, ВидПродукции, ДанныеОбщегоМодуля)
	
	Алфавит = ДанныеОписанийКодаМаркировки.Алфавит;
	
	ОписаниеЭлементовКМ = Новый Структура("GTIN, СерийныйНомер, КодТНВЭД, КлючПроверки, Подпись");
	ОписаниеЭлементовКМ.GTIN          = ОписаниеЭлементаКодаМаркировки("01",  "GTIN",          14);
	ОписаниеЭлементовКМ.СерийныйНомер = ОписаниеЭлементаКодаМаркировки("21",  "СерийныйНомер", 13, Алфавит.БуквыЦифрыЗнаки);
	ОписаниеЭлементовКМ.КодТНВЭД      = ОписаниеЭлементаКодаМаркировки("240", "КодТНВЭД",       4, Алфавит.Цифры);
	ОписаниеЭлементовКМ.КлючПроверки  = ОписаниеЭлементаКодаМаркировки("91",  "КлючПроверки",   4, Алфавит.БуквыЦифрыЗнаки);
	ОписаниеЭлементовКМ.Подпись       = ОписаниеЭлементаКодаМаркировки("92",  "Подпись",       88, Алфавит.БуквыЦифрыЗнаки);
	
	ШаблоныСтрокой = Новый Массив;
	ШаблоныСтрокой.Добавить("GTIN + СерийныйНомер");
	ШаблоныСтрокой.Добавить("GTIN + СерийныйНомер + КодТНВЭД");
	ШаблоныСтрокой.Добавить("GTIN + СерийныйНомер + КодТНВЭД + КлючПроверки + Подпись");
	ШаблоныСтрокой.Добавить("GTIN + СерийныйНомер + КлючПроверки + Подпись");
	ШаблоныСтрокой.Добавить("GTIN + СерийныйНомер + КлючПроверки + Подпись + КодТНВЭД");
	
	СписокШаблонов = ОписанияШаблоновКодаМаркировки(ОписаниеЭлементовКМ, ШаблоныСтрокой);
	
	ТипШтрихкодаИВидУпаковки = РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйКлиентСервер.ТипШтрихкодаИВидУпаковки();
	ТипШтрихкодаИВидУпаковки.ТипШтрихкода = Перечисления.ТипыШтрихкодовИСМПТК.GS1_DataMatrix;
	ТипШтрихкодаИВидУпаковки.ВидУпаковки  = Перечисления.ВидыУпаковокИСМПТК.Потребительская;
	
	СоставКодаМаркировки = НовыйСоставКодаМаркировки(ТипШтрихкодаИВидУпаковки);
	СоставКодаМаркировки.ВключаетИдентификаторыПрименения = Истина;
	СоставКодаМаркировки.Вставить("КодТНВЭД", "");
	
	// Добавление настроек
	НастройкаОписанияКодаМаркировки = НастройкиОписанияШаблонаКодаМаркировкиВидаПродукции();
	НастройкаОписанияКодаМаркировки.ВидПродукции             = ВидПродукции;
	НастройкаОписанияКодаМаркировки.ТипШтрихкодаИВидУпаковки = ТипШтрихкодаИВидУпаковки;
	НастройкаОписанияКодаМаркировки.СоставКодаМаркировки     = СоставКодаМаркировки;
	НастройкаОписанияКодаМаркировки.ДанныеОбщегоМодуля       = ДанныеОбщегоМодуля;
	НастройкаОписанияКодаМаркировки.СписокШаблонов           = СписокШаблонов;
	
	ДанныеОписанийКодаМаркировки.ОписанияКодовМаркировки.Добавить(НастройкаОписанияКодаМаркировки);
	
КонецПроцедуры

Процедура ОписаниеКодаМаркировкиОбувиКодТНВЭД10(ДанныеОписанийКодаМаркировки, ВидПродукции, ДанныеОбщегоМодуля)
	
	Алфавит = ДанныеОписанийКодаМаркировки.Алфавит;
	
	ОписаниеЭлементовКМ = Новый Структура("GTIN, СерийныйНомер, КодТНВЭД, КлючПроверки, Подпись");
	ОписаниеЭлементовКМ.GTIN          = ОписаниеЭлементаКодаМаркировки("01",  "GTIN",          14);
	ОписаниеЭлементовКМ.СерийныйНомер = ОписаниеЭлементаКодаМаркировки("21",  "СерийныйНомер", 13, Алфавит.БуквыЦифрыЗнаки);
	ОписаниеЭлементовКМ.КодТНВЭД      = ОписаниеЭлементаКодаМаркировки("240", "КодТНВЭД",      10, Алфавит.Цифры);
	
	ШаблоныСтрокой = Новый Массив;
	ШаблоныСтрокой.Добавить("GTIN + СерийныйНомер + КодТНВЭД");
	
	СписокШаблонов = ОписанияШаблоновКодаМаркировки(ОписаниеЭлементовКМ, ШаблоныСтрокой);
	
	ТипШтрихкодаИВидУпаковки = РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйКлиентСервер.ТипШтрихкодаИВидУпаковки();
	ТипШтрихкодаИВидУпаковки.ТипШтрихкода = Перечисления.ТипыШтрихкодовИСМПТК.GS1_DataMatrix;
	ТипШтрихкодаИВидУпаковки.ВидУпаковки  = Перечисления.ВидыУпаковокИСМПТК.Потребительская;
	
	СоставКодаМаркировки = НовыйСоставКодаМаркировки(ТипШтрихкодаИВидУпаковки);
	СоставКодаМаркировки.ВключаетИдентификаторыПрименения = Истина;
	СоставКодаМаркировки.Вставить("КодТНВЭД", "");
	
	// Добавление настроек
	НастройкаОписанияКодаМаркировки = НастройкиОписанияШаблонаКодаМаркировкиВидаПродукции();
	НастройкаОписанияКодаМаркировки.ВидПродукции             = ВидПродукции;
	НастройкаОписанияКодаМаркировки.ТипШтрихкодаИВидУпаковки = ТипШтрихкодаИВидУпаковки;
	НастройкаОписанияКодаМаркировки.СоставКодаМаркировки     = СоставКодаМаркировки;
	НастройкаОписанияКодаМаркировки.ДанныеОбщегоМодуля       = ДанныеОбщегоМодуля;
	НастройкаОписанияКодаМаркировки.СписокШаблонов           = СписокШаблонов;
	
	ДанныеОписанийКодаМаркировки.ОписанияКодовМаркировки.Добавить(НастройкаОписанияКодаМаркировки);
	
КонецПроцедуры

// Формирует описание кода маркировки для продукции: Легкая промышленность, Духи, Шины, Велосипелы, Кресла-Коляски.
Процедура ОписаниеКодаМаркировкиПродукцииИСМП(ДанныеОписанийКодаМаркировки, ВидПродукции, ДанныеОбщегоМодуля)
	
	Алфавит = ДанныеОписанийКодаМаркировки.Алфавит;
	
	ОписаниеЭлементовКМ = Новый Структура("GTIN, СерийныйНомер, КлючПроверки, Подпись");
	ОписаниеЭлементовКМ.GTIN          = ОписаниеЭлементаКодаМаркировки("01", "GTIN",          14);
	ОписаниеЭлементовКМ.СерийныйНомер = ОписаниеЭлементаКодаМаркировки("21", "СерийныйНомер", 13, Алфавит.БуквыЦифрыЗнаки);
	ОписаниеЭлементовКМ.КлючПроверки  = ОписаниеЭлементаКодаМаркировки("91", "КлючПроверки",   4, Алфавит.БуквыЦифрыЗнаки);
	ОписаниеЭлементовКМ.Подпись       = ОписаниеЭлементаКодаМаркировки("92", "Подпись",       44, Алфавит.БуквыЦифрыЗнаки);
	
	ШаблоныСтрокой = Новый Массив;
	ШаблоныСтрокой.Добавить("GTIN + СерийныйНомер");
	ШаблоныСтрокой.Добавить("GTIN + СерийныйНомер + КлючПроверки + Подпись");
	
	СписокШаблонов = ОписанияШаблоновКодаМаркировки(ОписаниеЭлементовКМ, ШаблоныСтрокой);
	
	ТипШтрихкодаИВидУпаковки = РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйКлиентСервер.ТипШтрихкодаИВидУпаковки();
	ТипШтрихкодаИВидУпаковки.ТипШтрихкода = Перечисления.ТипыШтрихкодовИСМПТК.GS1_DataMatrix;
	ТипШтрихкодаИВидУпаковки.ВидУпаковки  = Перечисления.ВидыУпаковокИСМПТК.Потребительская;
	
	СоставКодаМаркировки = НовыйСоставКодаМаркировки(ТипШтрихкодаИВидУпаковки);
	СоставКодаМаркировки.ВключаетИдентификаторыПрименения = Истина;
	
	// Добавление настроек
	НастройкаОписанияКодаМаркировки = НастройкиОписанияШаблонаКодаМаркировкиВидаПродукции();
	НастройкаОписанияКодаМаркировки.ВидПродукции             = ВидПродукции;
	НастройкаОписанияКодаМаркировки.ТипШтрихкодаИВидУпаковки = ТипШтрихкодаИВидУпаковки;
	НастройкаОписанияКодаМаркировки.СоставКодаМаркировки     = СоставКодаМаркировки;
	НастройкаОписанияКодаМаркировки.ДанныеОбщегоМодуля       = ДанныеОбщегоМодуля;
	НастройкаОписанияКодаМаркировки.СписокШаблонов           = СписокШаблонов;
	
	ДанныеОписанийКодаМаркировки.ОписанияКодовМаркировки.Добавить(НастройкаОписанияКодаМаркировки);
	
КонецПроцедуры

// Формирует описание кода маркировки для молочной продукции
Процедура ОписаниеКодаМаркировкиМолочнаяПродукция(ДанныеОписанийКодаМаркировки, ВидПродукции, ДанныеОбщегоМодуля)
	
	Алфавит = ДанныеОписанийКодаМаркировки.Алфавит;
	
	ОписаниеЭлементовКМ = Новый Структура("GTIN, СерийныйНомер, ГоденДо, КодПроверки");
	ОписаниеЭлементовКМ.GTIN          = ОписаниеЭлементаКодаМаркировки("01",   "GTIN",          14);
	ОписаниеЭлементовКМ.СерийныйНомер = ОписаниеЭлементаКодаМаркировки("21",   "СерийныйНомер",  6, Алфавит.БуквыЦифрыЗнаки);
	ОписаниеЭлементовКМ.КодПроверки   = ОписаниеЭлементаКодаМаркировки("93",   "КодПроверки",    4, Алфавит.БуквыЦифрыЗнаки);
	
	ШаблоныСтрокой = Новый Массив;
	ШаблоныСтрокой.Добавить("GTIN + СерийныйНомер");
	ШаблоныСтрокой.Добавить("GTIN + СерийныйНомер + КодПроверки");
	
	СписокШаблонов = ОписанияШаблоновКодаМаркировки(ОписаниеЭлементовКМ, ШаблоныСтрокой);
	
	ТипШтрихкодаИВидУпаковки = РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйКлиентСервер.ТипШтрихкодаИВидУпаковки();
	ТипШтрихкодаИВидУпаковки.ТипШтрихкода = Перечисления.ТипыШтрихкодовИСМПТК.GS1_DataMatrix;
	ТипШтрихкодаИВидУпаковки.ВидУпаковки  = Перечисления.ВидыУпаковокИСМПТК.Потребительская;
	
	СоставКодаМаркировки = НовыйСоставКодаМаркировки(ТипШтрихкодаИВидУпаковки);
	СоставКодаМаркировки.ВключаетИдентификаторыПрименения = Истина;
	СоставКодаМаркировки.Вставить("ГоденДо",         '00010101');
	СоставКодаМаркировки.Вставить("Скоропортящаяся", Ложь);
	
	// Добавление настроек
	НастройкаОписанияКодаМаркировки = НастройкиОписанияШаблонаКодаМаркировкиВидаПродукции();
	НастройкаОписанияКодаМаркировки.ВидПродукции             = ВидПродукции;
	НастройкаОписанияКодаМаркировки.ТипШтрихкодаИВидУпаковки = ТипШтрихкодаИВидУпаковки;
	НастройкаОписанияКодаМаркировки.СоставКодаМаркировки     = СоставКодаМаркировки;
	НастройкаОписанияКодаМаркировки.ДанныеОбщегоМодуля       = ДанныеОбщегоМодуля;
	НастройкаОписанияКодаМаркировки.СписокШаблонов           = СписокШаблонов;
	
	ДанныеОписанийКодаМаркировки.ОписанияКодовМаркировки.Добавить(НастройкаОписанияКодаМаркировки);
	
КонецПроцедуры

// Формирует описание кода маркировки для молочной продукции
Процедура УстаревшийФорматОписаниеКодаМаркировкиМолочнаяПродукция(ДанныеОписанийКодаМаркировки, ВидПродукции, ДанныеОбщегоМодуля)
	
	Алфавит = ДанныеОписанийКодаМаркировки.Алфавит;
	
	ОписаниеЭлементовКМ = Новый Структура("GTIN, СерийныйНомер, ГоденДо, КодПроверки");
	ОписаниеЭлементовКМ.GTIN          = ОписаниеЭлементаКодаМаркировки("01",   "GTIN",          14);
	ОписаниеЭлементовКМ.СерийныйНомер = ОписаниеЭлементаКодаМаркировки("21",   "СерийныйНомер", 13, Алфавит.БуквыЦифрыЗнаки);
	ОписаниеЭлементовКМ.ГоденДо       = ОписаниеЭлементаКодаМаркировки("17",   "ГоденДо",        6, Алфавит.Цифры);
	ОписаниеЭлементовКМ.КодПроверки   = ОписаниеЭлементаКодаМаркировки("93",   "КодПроверки",    4, Алфавит.БуквыЦифрыЗнаки);
	
	ШаблоныСтрокой = Новый Массив;
	ШаблоныСтрокой.Добавить("GTIN + СерийныйНомер");
	ШаблоныСтрокой.Добавить("GTIN + СерийныйНомер + ГоденДо");
	ШаблоныСтрокой.Добавить("GTIN + СерийныйНомер + КодПроверки");
	ШаблоныСтрокой.Добавить("GTIN + СерийныйНомер + ГоденДо + КодПроверки");
	
	СписокШаблонов = ОписанияШаблоновКодаМаркировки(ОписаниеЭлементовКМ, ШаблоныСтрокой);
	
	ТипШтрихкодаИВидУпаковки = РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйКлиентСервер.ТипШтрихкодаИВидУпаковки();
	ТипШтрихкодаИВидУпаковки.ТипШтрихкода = Перечисления.ТипыШтрихкодовИСМПТК.GS1_DataMatrix;
	ТипШтрихкодаИВидУпаковки.ВидУпаковки  = Перечисления.ВидыУпаковокИСМПТК.Потребительская;
	
	СоставКодаМаркировки = НовыйСоставКодаМаркировки(ТипШтрихкодаИВидУпаковки);
	СоставКодаМаркировки.ВключаетИдентификаторыПрименения = Истина;
	СоставКодаМаркировки.Вставить("ГоденДо",         '00010101');
	СоставКодаМаркировки.Вставить("Скоропортящаяся", Ложь);
	
	// Добавление настроек
	НастройкаОписанияКодаМаркировки = НастройкиОписанияШаблонаКодаМаркировкиВидаПродукции();
	НастройкаОписанияКодаМаркировки.ВидПродукции             = ВидПродукции;
	НастройкаОписанияКодаМаркировки.ТипШтрихкодаИВидУпаковки = ТипШтрихкодаИВидУпаковки;
	НастройкаОписанияКодаМаркировки.СоставКодаМаркировки     = СоставКодаМаркировки;
	НастройкаОписанияКодаМаркировки.ДанныеОбщегоМодуля       = ДанныеОбщегоМодуля;
	НастройкаОписанияКодаМаркировки.СписокШаблонов           = СписокШаблонов;
	
	ДанныеОписанийКодаМаркировки.ОписанияКодовМаркировки.Добавить(НастройкаОписанияКодаМаркировки);
	
КонецПроцедуры

// Формирует описание кода маркировки для молочной продукции
Процедура УстаревшийФорматОписаниеКодаМаркировкиМолочнаяПродукцияСкоропортящаяся(ДанныеОписанийКодаМаркировки, ВидПродукции, ДанныеОбщегоМодуля)
	
	Алфавит = ДанныеОписанийКодаМаркировки.Алфавит;
	
	ОписаниеЭлементовКМ = Новый Структура("GTIN, СерийныйНомер, ГоденДо, КодПроверки");
	ОписаниеЭлементовКМ.GTIN          = ОписаниеЭлементаКодаМаркировки("01",   "GTIN",          14);
	ОписаниеЭлементовКМ.СерийныйНомер = ОписаниеЭлементаКодаМаркировки("21",   "СерийныйНомер", 13, Алфавит.БуквыЦифрыЗнаки);
	ОписаниеЭлементовКМ.ГоденДо       = ОписаниеЭлементаКодаМаркировки("7003", "ГоденДо",       10, Алфавит.Цифры);
	ОписаниеЭлементовКМ.КодПроверки   = ОписаниеЭлементаКодаМаркировки("93",   "КодПроверки",    4, Алфавит.БуквыЦифрыЗнаки);
	
	ШаблоныСтрокой = Новый Массив;
	ШаблоныСтрокой.Добавить("GTIN + СерийныйНомер");
	ШаблоныСтрокой.Добавить("GTIN + СерийныйНомер + ГоденДо");
	ШаблоныСтрокой.Добавить("GTIN + СерийныйНомер + КодПроверки");
	ШаблоныСтрокой.Добавить("GTIN + СерийныйНомер + ГоденДо + КодПроверки");
	
	СписокШаблонов = ОписанияШаблоновКодаМаркировки(ОписаниеЭлементовКМ, ШаблоныСтрокой);
	
	ТипШтрихкодаИВидУпаковки = РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйКлиентСервер.ТипШтрихкодаИВидУпаковки();
	ТипШтрихкодаИВидУпаковки.ТипШтрихкода = Перечисления.ТипыШтрихкодовИСМПТК.GS1_DataMatrix;
	ТипШтрихкодаИВидУпаковки.ВидУпаковки  = Перечисления.ВидыУпаковокИСМПТК.Потребительская;
	
	СоставКодаМаркировки = НовыйСоставКодаМаркировки(ТипШтрихкодаИВидУпаковки);
	СоставКодаМаркировки.ВключаетИдентификаторыПрименения = Истина;
	СоставКодаМаркировки.Вставить("ГоденДо",         '00010101');
	СоставКодаМаркировки.Вставить("Скоропортящаяся", Истина);
	
	// Добавление настроек
	НастройкаОписанияКодаМаркировки = НастройкиОписанияШаблонаКодаМаркировкиВидаПродукции();
	НастройкаОписанияКодаМаркировки.ВидПродукции             = ВидПродукции;
	НастройкаОписанияКодаМаркировки.ТипШтрихкодаИВидУпаковки = ТипШтрихкодаИВидУпаковки;
	НастройкаОписанияКодаМаркировки.СоставКодаМаркировки     = СоставКодаМаркировки;
	НастройкаОписанияКодаМаркировки.ДанныеОбщегоМодуля       = ДанныеОбщегоМодуля;
	НастройкаОписанияКодаМаркировки.СписокШаблонов           = СписокШаблонов;
	
	ДанныеОписанийКодаМаркировки.ОписанияКодовМаркировки.Добавить(НастройкаОписанияКодаМаркировки);
	
КонецПроцедуры

// Формирует описание кода маркировки для УпакованнаяВода
Процедура ОписаниеКодаМаркировкиПродукцииУпакованнаяВода(ДанныеОписанийКодаМаркировки, ВидПродукции, ДанныеОбщегоМодуля)
	
	Алфавит = ДанныеОписанийКодаМаркировки.Алфавит;
	
	ОписаниеЭлементовКМ = Новый Структура("GTIN, СерийныйНомер, КодПроверки");
	ОписаниеЭлементовКМ.GTIN          = ОписаниеЭлементаКодаМаркировки("01", "GTIN",          14);
	ОписаниеЭлементовКМ.СерийныйНомер = ОписаниеЭлементаКодаМаркировки("21", "СерийныйНомер", 13, Алфавит.БуквыЦифрыЗнаки);
	ОписаниеЭлементовКМ.КодПроверки   = ОписаниеЭлементаКодаМаркировки("93", "КодПроверки",    4, Алфавит.БуквыЦифрыЗнаки);
	
	ШаблоныСтрокой = Новый Массив;
	ШаблоныСтрокой.Добавить("GTIN + СерийныйНомер");
	ШаблоныСтрокой.Добавить("GTIN + СерийныйНомер + КодПроверки");
	
	СписокШаблонов = ОписанияШаблоновКодаМаркировки(ОписаниеЭлементовКМ, ШаблоныСтрокой);
	
	ТипШтрихкодаИВидУпаковки = РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйКлиентСервер.ТипШтрихкодаИВидУпаковки();
	ТипШтрихкодаИВидУпаковки.ТипШтрихкода = Перечисления.ТипыШтрихкодовИСМПТК.GS1_DataMatrix;
	ТипШтрихкодаИВидУпаковки.ВидУпаковки  = Перечисления.ВидыУпаковокИСМПТК.Потребительская;
	
	СоставКодаМаркировки = НовыйСоставКодаМаркировки(ТипШтрихкодаИВидУпаковки);
	СоставКодаМаркировки.ВключаетИдентификаторыПрименения = Истина;
	
	// Добавление настроек
	НастройкаОписанияКодаМаркировки = НастройкиОписанияШаблонаКодаМаркировкиВидаПродукции();
	НастройкаОписанияКодаМаркировки.ВидПродукции             = ВидПродукции;
	НастройкаОписанияКодаМаркировки.ТипШтрихкодаИВидУпаковки = ТипШтрихкодаИВидУпаковки;
	НастройкаОписанияКодаМаркировки.СоставКодаМаркировки     = СоставКодаМаркировки;
	НастройкаОписанияКодаМаркировки.ДанныеОбщегоМодуля       = ДанныеОбщегоМодуля;
	НастройкаОписанияКодаМаркировки.СписокШаблонов           = СписокШаблонов;
	
	ДанныеОписанийКодаМаркировки.ОписанияКодовМаркировки.Добавить(НастройкаОписанияКодаМаркировки);
	
КонецПроцедуры

// Формирует описание кода маркировки для логистической упаковки
Процедура ОписаниеКодаМаркировкиЛогистическаяУпаковка18(ДанныеОписанийКодаМаркировки, ВидПродукции, ДанныеОбщегоМодуля)
	
	// Примеры:
	//	- исмп:
	//	* 199988888800000013 - из сервиса
	
	Алфавит = ДанныеОписанийКодаМаркировки.Алфавит;
	
	ОписаниеЭлементовКМ = Новый Структура("SSCC");
	ОписаниеЭлементовКМ.SSCC = ОписаниеЭлементаКодаМаркировки("", "SSCC", 18, Алфавит.Цифры); // Серийный код транспортной упаковки, представленный в виде цифрового номера.
	
	ШаблоныСтрокой = Новый Массив;
	ШаблоныСтрокой.Добавить("SSCC");
	
	СписокШаблонов = ОписанияШаблоновКодаМаркировки(ОписаниеЭлементовКМ, ШаблоныСтрокой);
	
	ТипШтрихкодаИВидУпаковки = РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйКлиентСервер.ТипШтрихкодаИВидУпаковки();
	ТипШтрихкодаИВидУпаковки.ТипШтрихкода = Перечисления.ТипыШтрихкодовИСМПТК.SSCC;
	ТипШтрихкодаИВидУпаковки.ВидУпаковки  = Перечисления.ВидыУпаковокИСМПТК.Логистическая;
	
	СоставКодаМаркировки = НовыйСоставКодаМаркировки(ТипШтрихкодаИВидУпаковки);
	
	// Добавление настроек
	НастройкаОписанияКодаМаркировки = НастройкиОписанияШаблонаКодаМаркировкиВидаПродукции();
	НастройкаОписанияКодаМаркировки.ВидПродукции             = ВидПродукции;
	НастройкаОписанияКодаМаркировки.ТипШтрихкодаИВидУпаковки = ТипШтрихкодаИВидУпаковки;
	НастройкаОписанияКодаМаркировки.СоставКодаМаркировки     = СоставКодаМаркировки;
	НастройкаОписанияКодаМаркировки.ДанныеОбщегоМодуля       = ДанныеОбщегоМодуля;
	НастройкаОписанияКодаМаркировки.СписокШаблонов           = СписокШаблонов;
	
	ДанныеОписанийКодаМаркировки.ОписанияКодовМаркировки.Добавить(НастройкаОписанияКодаМаркировки);
	
КонецПроцедуры

// Формирует описание кода маркировки для логистической упаковки
Процедура ОписаниеКодаМаркировкиЛогистическаяУпаковка20(ДанныеОписанийКодаМаркировки, ВидПродукции, ДанныеОбщегоМодуля)
	
	// Примеры:
	//	- исмп:
	//	* (00)199988888800000013 - в ИБ
	//	* 00199988888800000013 - от сканера
	//	- мотп:
	//	* 00199988888800000013 - из сервиса, от сканера
	//	* (00)199988888800000013 - в ИБ
	
	Алфавит = ДанныеОписанийКодаМаркировки.Алфавит;
	
	ОписаниеЭлементовКМ = Новый Структура("SSCC");
	ОписаниеЭлементовКМ.SSCC = ОписаниеЭлементаКодаМаркировки("00", "SSCC", 18, Алфавит.Цифры); // Серийный код транспортной упаковки, представленный в виде цифрового номера.
	
	ШаблоныСтрокой = Новый Массив;
	ШаблоныСтрокой.Добавить("SSCC");
	
	СписокШаблонов = ОписанияШаблоновКодаМаркировки(ОписаниеЭлементовКМ, ШаблоныСтрокой);
	
	ТипШтрихкодаИВидУпаковки = РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйКлиентСервер.ТипШтрихкодаИВидУпаковки();
	ТипШтрихкодаИВидУпаковки.ТипШтрихкода = Перечисления.ТипыШтрихкодовИСМПТК.SSCC;
	ТипШтрихкодаИВидУпаковки.ВидУпаковки  = Перечисления.ВидыУпаковокИСМПТК.Логистическая;
	
	СоставКодаМаркировки = НовыйСоставКодаМаркировки(ТипШтрихкодаИВидУпаковки);
	
	// Добавление настроек
	НастройкаОписанияКодаМаркировки = НастройкиОписанияШаблонаКодаМаркировкиВидаПродукции();
	НастройкаОписанияКодаМаркировки.ВидПродукции             = ВидПродукции;
	НастройкаОписанияКодаМаркировки.ТипШтрихкодаИВидУпаковки = ТипШтрихкодаИВидУпаковки;
	НастройкаОписанияКодаМаркировки.СоставКодаМаркировки     = СоставКодаМаркировки;
	НастройкаОписанияКодаМаркировки.ДанныеОбщегоМодуля       = ДанныеОбщегоМодуля;
	НастройкаОписанияКодаМаркировки.СписокШаблонов           = СписокШаблонов;
	
	ДанныеОписанийКодаМаркировки.ОписанияКодовМаркировки.Добавить(НастройкаОписанияКодаМаркировки);
	
КонецПроцедуры

Процедура ОписаниеКодаМаркировкиЛекарства(ДанныеОписанийКодаМаркировки, ВидПродукции, ДанныеОбщегоМодуля)
	
	Алфавит = ДанныеОписанийКодаМаркировки.Алфавит;
	
	ОписаниеЭлементовКМ = Новый Структура("GTIN, СерийныйНомер, КодТНВЭД, КлючПроверки, Подпись");
	ОписаниеЭлементовКМ.GTIN          = ОписаниеЭлементаКодаМаркировки("01",  "GTIN",          14);
	ОписаниеЭлементовКМ.СерийныйНомер = ОписаниеЭлементаКодаМаркировки("21",  "СерийныйНомер", 13, Алфавит.БуквыЦифрыЗнаки);
	ОписаниеЭлементовКМ.КлючПроверки  = ОписаниеЭлементаКодаМаркировки("91",  "КлючПроверки",   4, Алфавит.БуквыЦифрыЗнаки);
	ОписаниеЭлементовКМ.Подпись       = ОписаниеЭлементаКодаМаркировки("92",  "Подпись",       44, Алфавит.БуквыЦифрыЗнаки);
	
	ШаблоныСтрокой = Новый Массив;
	ШаблоныСтрокой.Добавить("GTIN + СерийныйНомер");
	ШаблоныСтрокой.Добавить("GTIN + СерийныйНомер + КлючПроверки + Подпись");
	
	СписокШаблонов = ОписанияШаблоновКодаМаркировки(ОписаниеЭлементовКМ, ШаблоныСтрокой);
	
	ТипШтрихкодаИВидУпаковки = РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйКлиентСервер.ТипШтрихкодаИВидУпаковки();
	ТипШтрихкодаИВидУпаковки.ТипШтрихкода = Перечисления.ТипыШтрихкодовИСМПТК.GS1_DataMatrix;
	ТипШтрихкодаИВидУпаковки.ВидУпаковки  = Перечисления.ВидыУпаковокИСМПТК.Потребительская;
	
	СоставКодаМаркировки = НовыйСоставКодаМаркировки(ТипШтрихкодаИВидУпаковки);
	СоставКодаМаркировки.ВключаетИдентификаторыПрименения = Истина;
	
	// Добавление настроек
	НастройкаОписанияКодаМаркировки = НастройкиОписанияШаблонаКодаМаркировкиВидаПродукции();
	НастройкаОписанияКодаМаркировки.ВидПродукции             = ВидПродукции;
	НастройкаОписанияКодаМаркировки.ТипШтрихкодаИВидУпаковки = ТипШтрихкодаИВидУпаковки;
	НастройкаОписанияКодаМаркировки.СоставКодаМаркировки     = СоставКодаМаркировки;
	НастройкаОписанияКодаМаркировки.ДанныеОбщегоМодуля       = ДанныеОбщегоМодуля;
	НастройкаОписанияКодаМаркировки.СписокШаблонов           = СписокШаблонов;
	
	ДанныеОписанийКодаМаркировки.ОписанияКодовМаркировки.Добавить(НастройкаОписанияКодаМаркировки);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

Функция УбратьСкобкиУИдентификатораПрименения_Обувь(КодМаркировки) Экспорт
		
	КодМаркировки = СтрЗаменить(КодМаркировки, "(01)", "01");
	КодМаркировки = СтрЗаменить(КодМаркировки, "(21)", "21");
	КодМаркировки = СтрЗаменить(КодМаркировки, "(91)", "91");
	КодМаркировки = СтрЗаменить(КодМаркировки, "(92)", "92");
	
	Возврат КодМаркировки;
	
КонецФункции

Функция СпособФормированияСерийногоНомераПоСтатистике(Номенклатура, Характеристика) Экспорт
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ ПЕРВЫЕ 3
	|	ЗаказНаЭмиссиюКодовМаркировкиСУЗТовары.СпособФормированияСерийногоНомера КАК СпособФормирования,
	|	1 КАК Количество
	|ИЗ
	|	Документ.ЗаказКодовМаркировкиСУЗИСМПТК.Товары КАК ЗаказНаЭмиссиюКодовМаркировкиСУЗТовары
	|ГДЕ
	|	ЗаказНаЭмиссиюКодовМаркировкиСУЗТовары.Номенклатура = &Номенклатура
	|	И ЗаказНаЭмиссиюКодовМаркировкиСУЗТовары.Характеристика = &Характеристика
	|УПОРЯДОЧИТЬ ПО
	|	ЗаказНаЭмиссиюКодовМаркировкиСУЗТовары.Ссылка.Дата УБЫВ");
	
	Запрос.УстановитьПараметр("Номенклатура",   Номенклатура);
	Запрос.УстановитьПараметр("Характеристика", Характеристика);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Перечисления.СпособыФормированияСерийногоНомераСУЗИСМПТК.Автоматически;
	КонецЕсли;
	
	ДанныеСтатистики = РезультатЗапроса.Выгрузить();
	ДанныеСтатистики.Свернуть("СпособФормирования", "Количество");
	ДанныеСтатистики.Сортировать("Количество Убыв");
	
	Возврат ДанныеСтатистики[0].СпособФормирования;
	
КонецФункции

Процедура ПронумероватьИсходнуюТаблицуДанныхЗаполнения(ИсходнаяТаблица, ПолеОтслеживанияНовойСтроки = Неопределено) Экспорт
	
	Если ИсходнаяТаблица.Колонки.Найти("ИндексИсходнойСтроки") = Неопределено Тогда
		ИсходнаяТаблица.Колонки.Добавить("ИндексИсходнойСтроки", ОбщегоНазначенияИСМПТКПереопределяемый.ОписаниеТипаЧисло(5));
	КонецЕсли;
	
	МассивСтрокДляУдаления = Новый Массив;
	
	Для Каждого СтрокаТаблицы Из ИсходнаяТаблица Цикл
		СтрокаТаблицы.ИндексИсходнойСтроки = ИсходнаяТаблица.Индекс(СтрокаТаблицы);
		Если ЗначениеЗаполнено(ПолеОтслеживанияНовойСтроки)
			И ЗначениеЗаполнено(СтрокаТаблицы[ПолеОтслеживанияНовойСтроки]) Тогда
			МассивСтрокДляУдаления.Добавить(СтрокаТаблицы);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого УдаляемаяСтрока Из МассивСтрокДляУдаления Цикл
		ИсходнаяТаблица.Удалить(УдаляемаяСтрока.ИндексИсходнойСтроки);
	КонецЦикла;

КонецПроцедуры

Функция ВыполнитьПроверкуТранспортногоКодаПоДокументу(КодИдентификации, ТаблицаМарок) Экспорт
	
	Если Константы.АвтоОпределениеЛогистическихКодовИСМПТК.Получить() Тогда
			
		Если СтрДлина(КодИдентификации) = 20 Тогда
			ПреобразованныйКод = Сред(КодИдентификации, 3); //18-значный SSCC
			ДополнительныйКод  = Неопределено;
		ИначеЕсли СтрДлина(КодИдентификации) = 18 Тогда
			ПреобразованныйКод = "00"   + КодИдентификации;
			ДополнительныйКод  = "(00)" + КодИдентификации;
		Иначе
			ПреобразованныйКод = Неопределено;
			ДополнительныйКод  = Неопределено;
		КонецЕсли;
		
		КоличествоИсхКод = ТаблицаМарок.НайтиСтроки(Новый Структура("КодИдентификации", КодИдентификации)).Количество();
		КоличествоПреобразованный = ?(Не ПреобразованныйКод = Неопределено, ТаблицаМарок.НайтиСтроки(Новый Структура("КодИдентификации", ПреобразованныйКод)).Количество(), 0);
		КоличествоДополнительный  = ?(Не ДополнительныйКод = Неопределено,  ТаблицаМарок.НайтиСтроки(Новый Структура("КодИдентификации", ДополнительныйКод)).Количество(), 0);
		
		Возврат КоличествоИсхКод = 0
		И КоличествоПреобразованный = 0
		И КоличествоДополнительный = 0;
		
	Иначе
		Возврат ТаблицаМарок.НайтиСтроки(Новый Структура("КодИдентификации", КодИдентификации)).Количество() = 0;
	КонецЕсли;
	
КонецФункции
  
#КонецОбласти

