
#Область ПрограммныйИнтерфейс

// Получает сумму денежных средств документа.
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.ПриходныйКассовыйОрдер,
//                   ДокументСсылка.РасходныйКассовыйОрдер,
//                   ДокументСсылка.РегистрацияБезналичнойОплаты - документ для расчета денежных средств.
//
// Возвращаемое значение:
//  Число - сумма документа.
//
Функция ПолучитьСуммуДокумента(ДокументСсылка) Экспорт

	Возврат ДокументСсылка.СуммаДокумента;

КонецФункции

// Получает сумму денежных средств документа.
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.ПриходныйКассовыйОрдер - документ для расчета денежных средств.
//
// Возвращаемое значение:
//  Число - сумма вознаграждения документа.
//
Функция ПолучитьСуммаВознаграждения(ДокументСсылка) Экспорт

	Возврат ДокументСсылка.СуммаВознаграждения;

КонецФункции

// Создает и возвращает документ Внесение денежных средств в кассу ККМ.
// Параметры:
//  СуммаВнесения - Число - Сумма внесения в кассу ККМ.
//  РКО - ДокументСсылка.РасходныйКассовыйОрдер - РКО на основании которого будет создан документ Внесение ДС в кассу ККМ.
//  КассаККМ - СправочникСсылка.КассыККМ - Касса ККМ в которую вносятся ДС.
//
// Возвращаемое значение:
//  ДокументСсылка.ВнесениеДенежныхСредств - возданный документ внесения денежных средств.
//
Функция СоздатьДокументВнесениеДенежныхСредствВКассуККМ(СуммаВнесения, РКО, КассаККМ) Экспорт
	Реквизиты = Справочники.КассыККМ.РеквизитыКассыККМ(КассаККМ);
	
	СтруктураДанныеЗаполнения = Новый Структура();
	СтруктураДанныеЗаполнения.Вставить("ДокументОснование", РКО);
	СтруктураДанныеЗаполнения.Вставить("Организация", Реквизиты.Организация);
	СтруктураДанныеЗаполнения.Вставить("КассаККМ", КассаККМ);
	СтруктураДанныеЗаполнения.Вставить("СуммаДокумента", СуммаВнесения);
	СтруктураДанныеЗаполнения.Вставить("Дата", ТекущаяДатаСеанса());
	СтруктураДанныеЗаполнения.Вставить("Ответственный", Пользователи.ТекущийПользователь());
	
	ДокументВнесениеДенегВКассуККМ = Документы.ВнесениеДенежныхСредствВКассуККМ.СоздатьДокумент();
	ЗаполнитьЗначенияСвойств(ДокументВнесениеДенегВКассуККМ, СтруктураДанныеЗаполнения);
	ДокументВнесениеДенегВКассуККМ.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Оперативный);
	Возврат ДокументВнесениеДенегВКассуККМ.Ссылка;
	
КонецФункции

// Создает и возвращает документ Выемка денежных средств из кассы ККМ.
//
// Параметры:
//  ИзымаемаяСумма - Число - Изымаемая сумма из кассы ККМ.
//  КассаККМ - СправочникСсылка.КассыККМ - Касса ККМ в которую выполняют внесение ДС.
//  СсылкаНаОтчет - ДокументСсылка.ОтчетОРозничныхПродажах - отчет по которому создается выемка.
//  ДополнительныеПараметры - Структура дополнительных параметров.
//
// Возвращаемое значение:
//  ДокументСсылка.ВыемкаДенежныхСредствИзКассыККМ - созданный документ выемка денежных средств.
//
Функция СоздатьДокументВыемкаДенежныхСредствИзКассыККМ(Отказ,
			ИзымаемаяСумма,
			КассаККМ,
			СсылкаНаОтчет,
			ДополнительныеПараметры = Неопределено) Экспорт
						
	Если НЕ ДополнительныеПараметры = Неопределено И ДополнительныеПараметры.Свойство("ВыемкаСсылка") Тогда
		ДокументВыемка = ДополнительныеПараметры.ВыемкаСсылка.ПолучитьОбъект();
	Иначе
		ДокументВыемка = Документы.ВыемкаДенежныхСредствИзКассыККМ.СоздатьДокумент();
	КонецЕсли;
	
	Реквизиты = Справочники.КассыККМ.РеквизитыКассыККМ(КассаККМ);
	
	Если ЗначениеЗаполнено(СсылкаНаОтчет) Тогда
		ДокументВыемка.Дата = СсылкаНаОтчет.Дата + 1;
	Иначе
		ДокументВыемка.Дата = ТекущаяДатаСеанса();
	КонецЕсли;
	
	ДокументВыемка.Организация    = Реквизиты.Организация;
	ДокументВыемка.КассаККМ       = КассаККМ;
	ДокументВыемка.Магазин        = КассаККМ.Магазин;
	ДокументВыемка.СуммаДокумента = ИзымаемаяСумма;
	ДокументВыемка.Ответственный  = Пользователи.ТекущийПользователь();
	ДокументВыемка.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВыдачаДенежныхСредствИзКассыККМ;
	
	ДокументВыемка.ОтчетОРозничныхПродажах = СсылкаНаОтчет;
	
	Если ДополнительныеПараметры <> Неопределено Тогда
		Если ДополнительныеПараметры.Свойство("ДоговорКонтрагента") Тогда
			ДокументВыемка.ДоговорКонтрагента = ДополнительныеПараметры.ДоговорКонтрагента;
		КонецЕсли;
	КонецЕсли;
	
	Попытка
	
		ДокументВыемка.Записать(РежимЗаписиДокумента.Проведение);
	
	Исключение
		
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'Создание документа Выемка ДС из кассы ККМ'",
			ОбщегоНазначения.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка,
			,
			,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
		Отказ = Истина;
		Возврат Неопределено;
		
	КонецПопытки;
	
	Возврат ДокументВыемка.Ссылка;
	
КонецФункции

// Получает данные выписки банка в текстовом формате
//
// Параметры:
//  СообщениеОбмена - ДокументСсылка.СообщенияОбменСБанками - сообщение обмена с выпиской банка
//  СсылкаНаХранилище - Строка - адрес временного хранилища, куда будет помещена текстовая выписка банка
//  МассивСчетов - Массив - массив банковских счетов, находящихся в выписке
//  Организация - ОпределяемыйТип.Организация - организация, для которой получена выписка
//  НастройкаОбмена - СправочникСсылка.НастройкиОбменСБанками - действующая настройка обмена с банком.
//
Процедура ПолучитьДанныеВыпискиБанкаТекстовыйФормат(Знач СообщениеОбмена, СсылкаНаХранилище, МассивСчетов = Неопределено, Организация = Неопределено, НастройкаОбмена = Неопределено) Экспорт
	
	Перем ТекстВыписки;
	
	РеквизитыСообщения = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СообщениеОбмена, "Организация, НастройкаОбмена, ВидЭД");
	
	Если НЕ РеквизитыСообщения.ВидЭД = Перечисления.ВидыЭДОбменСБанками.ВыпискаБанка Тогда
		Возврат
	КонецЕсли;
	
	Организация = РеквизитыСообщения.Организация;
	НастройкаОбмена = РеквизитыСообщения.НастройкаОбмена;
	
	ОбменСБанками.ПолучитьДанныеВыпискиБанкаТекстовыйФормат(СообщениеОбмена, СсылкаНаХранилище, МассивСчетов);
	
КонецПроцедуры

#КонецОбласти

#Область КлиентБанк

Функция ПолучитьСтруктуруПрямогоОбмена() Экспорт
	
	СтруктураОбмена = Новый Структура("БанковскийСчет, Организация, СоглашениеПрямогоОбменаСБанками");
	
	ИспользоватьОбменСБанками = ПолучитьФункциональнуюОпцию("ИспользоватьОбменСБанками");
	Если НЕ ИспользоватьОбменСБанками Тогда
		// Нет ни одной настройки обмена с банками, можно сразу выбирать файл загрузки.
		СтруктураОбмена.Вставить("БанковскийСчет", Справочники.БанковскиеСчета.ПустаяСсылка());
	Иначе
		Запрос = Новый Запрос();
		Запрос.Текст =
		"ВЫБРАТЬ
		|	НастройкиОбменСБанками.Ссылка КАК НастройкиОбменСБанками,
		|	НастройкиОбменСБанками.Банк КАК Банк,
		|	БанковскиеСчета.Ссылка КАК Ссылка,
		|	НастройкиОбменСБанками.Организация КАК Организация
		|ИЗ
		|	Справочник.БанковскиеСчета КАК БанковскиеСчета
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.НастройкиОбменСБанками КАК НастройкиОбменСБанками
		|		ПО БанковскиеСчета.Банк = НастройкиОбменСБанками.Банк
		|			И БанковскиеСчета.Владелец = НастройкиОбменСБанками.Организация
		|ГДЕ
		|	НастройкиОбменСБанками.Недействительна = ЛОЖЬ
		|	И НЕ НастройкиОбменСБанками.ПометкаУдаления
		|	И НЕ БанковскиеСчета.ПометкаУдаления
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ БанковскиеСчета.Ссылка) КАК КоличествоРазличных
		|ИЗ
		|	Справочник.БанковскиеСчета КАК БанковскиеСчета
		|ГДЕ
		|	НЕ БанковскиеСчета.ПометкаУдаления
		|	И БанковскиеСчета.Владелец ССЫЛКА Справочник.Организации";
		
		МассивРезультатов = Запрос.ВыполнитьПакет();
		
		РезультатЗапроса = МассивРезультатов[0];
		Если РезультатЗапроса.Пустой() Тогда // Нет ни одной настройки обмена с банками, можно сразу выбирать файл загрузки.
			СтруктураОбмена.Вставить("БанковскийСчет", Справочники.БанковскиеСчета.ПустаяСсылка());
		Иначе
			Выборка = РезультатЗапроса.Выбрать();
			ВыборкаБанковскихСчетов = МассивРезультатов[1].Выбрать();
			ВыборкаБанковскихСчетов.Следующий();
			Если ВыборкаБанковскихСчетов.КоличествоРазличных = 1 Тогда // Один счет, можно сразу подставить его.
				Выборка.Следующий();
				СтруктураОбмена.Вставить("БанковскийСчет", Выборка.Ссылка);
				СтруктураОбмена.Вставить("Организация", Выборка.Организация);
				СтруктураОбмена.Вставить("СоглашениеПрямогоОбменаСБанками", Выборка.НастройкиОбменСБанками);
			Иначе // Есть несколько счетов, нужно выбирать.
				СтруктураОбмена.Вставить("БанковскийСчет", Неопределено);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат СтруктураОбмена;
	
КонецФункции

Функция ПолучитьСтруктуруОбмена(ПараметрБанковскийСчет) Экспорт
	
	СтруктураОбмена = Новый Структура("ПрямойОбмен, БанковскийСчет, Организация, СоглашениеПрямогоОбменаСБанками", Ложь);
	
	Запрос = Новый Запрос();
	Запрос.Текст =
	"ВЫБРАТЬ
	|	НастройкиОбменСБанками.Ссылка КАК НастройкиОбменСБанками,
	|	НастройкиОбменСБанками.Банк,
	|	БанковскиеСчета.Ссылка,
	|	НастройкиОбменСБанками.Организация
	|ИЗ
	|	Справочник.БанковскиеСчета КАК БанковскиеСчета
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.НастройкиОбменСБанками КАК НастройкиОбменСБанками
	|		ПО БанковскиеСчета.Банк = НастройкиОбменСБанками.Банк
	|			И БанковскиеСчета.Владелец = НастройкиОбменСБанками.Организация
	|ГДЕ
	|	БанковскиеСчета.Ссылка = &ПараметрБанковскийСчет
	|	И НастройкиОбменСБанками.Недействительна = ЛОЖЬ
	|	И НЕ НастройкиОбменСБанками.ПометкаУдаления
	|	И НЕ БанковскиеСчета.ПометкаУдаления";
	
	Запрос.УстановитьПараметр("ПараметрБанковскийСчет", ПараметрБанковскийСчет);	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если Не РезультатЗапроса.Пустой() Тогда // Нет ни одной настройки обмена с банками, можно сразу выбирать файл загрузки.
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		СтруктураОбмена.Вставить("БанковскийСчет", Выборка.Ссылка);
		СтруктураОбмена.Вставить("Организация", Выборка.Организация);
		СтруктураОбмена.Вставить("СоглашениеПрямогоОбменаСБанками", Выборка.НастройкиОбменСБанками);
		СтруктураОбмена.Вставить("ПрямойОбмен", Истина);
	КонецЕсли;
	
	Возврат СтруктураОбмена;
	
КонецФункции

Функция ПрочитатьЭлектроннуюВыпискуБанка(ЭлектроннаяВыписка, СтекОповещений) Экспорт
	
	АдресФайла = Неопределено; // адрес временного хранилища
	
	ОбменСБанками.ПолучитьДанныеВыпискиБанкаТекстовыйФормат(ЭлектроннаяВыписка, АдресФайла);
		
	Если АдресФайла = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ИмяВременногоФайла  = ПолучитьИмяВременногоФайла("txt");
	ДвоичныеДанныеФайла = ПолучитьИзВременногоХранилища(АдресФайла);
	ДвоичныеДанныеФайла.Записать(ИмяВременногоФайла);
	
	ТипФайла = КлиентБанкТипФайла(ИмяВременногоФайла);
	
	ТекстовыйДокумент = Новый ТекстовыйДокумент;
	Попытка
		ТекстовыйДокумент.Прочитать(ИмяВременногоФайла, ТипФайла);
	Исключение
		ТекстСообщения = НСтр("ru = 'Файл не прочитан.'");
		СтекОповещений.Добавить(Новый Структура("Текст", ТекстСообщения));
		Возврат Неопределено;
	КонецПопытки;
	
	Если ТекстовыйДокумент.КоличествоСтрок() < 1 Тогда
		ТекстСообщения = НСтр("ru = 'В файле нет данных!'");
		СтекОповещений.Добавить(Новый Структура("Текст", ТекстСообщения));
		Возврат Неопределено;
	КонецЕсли;
	
	Если СокрЛП(ТекстовыйДокумент.ПолучитьСтроку(1)) <> "1CClientBankExchange" Тогда
		ТекстСообщения = НСтр("ru = 'Указанный файл не является файлом обмена или неверно указана кодировка!'");
		СтекОповещений.Добавить(Новый Структура("Текст", ТекстСообщения));
		Возврат Неопределено;
	КонецЕсли;
	
	// Удаляем временный файл
	Попытка
		УдалитьФайлы(ИмяВременногоФайла);
	Исключение
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Ошибка при удалении временного файла.'"), УровеньЖурналаРегистрации.Ошибка, , , ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
	
	Возврат ТекстовыйДокумент.ПолучитьТекст();
	
КонецФункции

Функция КлиентБанкТипФайла(ИмяФайла)
	
	Текст              = Новый ЧтениеТекста(ИмяФайла, "windows-1251");
	СтрокаТекста       = Текст.ПрочитатьСтроку();
	НомерТекущейСтроки = 0;
	
	Пока СтрокаТекста <> Неопределено Цикл
		// Проверяем кодировку файла
		Если НомерТекущейСтроки = 0 И НЕ ТолькоСимволыВСтроке(СтрокаТекста) Тогда // UTF-8.
			Возврат "UTF-8";
			Прервать;
		ИначеЕсли НЕ ТолькоСимволыВСтроке(СтрокаТекста) Тогда
			Возврат "cp866";
			Прервать;
		КонецЕсли;
		// Читаем первые пять строк, этого должно быть достаточно,
		// чтобы определить кодировку
		Если НомерТекущейСтроки > 5 Тогда 
			Прервать;
		КонецЕсли;
		НомерТекущейСтроки = НомерТекущейСтроки + 1;
		СтрокаТекста       = Текст.ПрочитатьСтроку();
	КонецЦикла;
	
	Возврат "windows-1251";
	
КонецФункции

#Область ПолучениеТекстаФайла

Функция ТолькоСимволыВСтроке(Знач ПроверяемаяСтрока)
	
	Если ПустаяСтрока(ПроверяемаяСтрока) Тогда
		Возврат Истина;
	КонецЕсли;
	
	// приводим строку к нижнему регистру
	ПроверяемаяСтрока = НРег(СокрЛП(ПроверяемаяСтрока));
	
	// допустимые символы
	СпецСимволы = ".,;:$№#@&_-+*=?'/|\""%()[]{} ";
	
	// проверяем наличие спецсимволов в начале или конце строке
	Если ЕстьСимволыВНачалеСтроки(Лев(ПроверяемаяСтрока, 1), СпецСимволы) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	// проверяем допустимые символы
	Если НЕ СтрокаСодержитТолькоДопустимыеСимволы(ПроверяемаяСтрока, СпецСимволы) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

Функция ЕстьСимволыВНачалеСтроки(Строка, ПроверяемыеСимволы)
	
	Для Позиция = 1 По СтрДлина(ПроверяемыеСимволы) Цикл
		Символ = Сред(ПроверяемыеСимволы, Позиция, 1);
		СимволНайден = СтрНачинаетсяС(Строка, Символ) ИЛИ СтрЗаканчиваетсяНа(Строка, Символ);
		Если СимволНайден Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

Функция СтрокаСодержитТолькоДопустимыеСимволы(СтрокаПроверки, ДопустимыеСимволы)
	
	// Кириллица
	КодСимволаА = КодСимвола("а"); 
	КодСимволаЯ = КодСимвола("я");
	
	// Цифры
	КодСимвола0 = КодСимвола("0");
	КодСимвола9 = КодСимвола("9");
	
	// Латиница
	КодСимволаA = КодСимвола("a");
	КодСимволаZ = КодСимвола("z");
	
	// Спецсимволы
	КодыДопустимыхСимволов = Новый Массив;
	Для Индекс = 1 По СтрДлина(ДопустимыеСимволы) Цикл
		Символ = Сред(ДопустимыеСимволы, Индекс, 1);
		КодыДопустимыхСимволов.Добавить(КодСимвола(Символ));
	КонецЦикла;
	
	КодыДопустимыхСимволов.Добавить(1105); // "ё"
	
	// Проверяем каждым символ в строке
	// допустим ли он.
	Для Индекс = 1 По СтрДлина(СтрокаПроверки) Цикл
		КодПроверяемогоСимвола = КодСимвола(Сред(СтрокаПроверки, Индекс, 1));
		ЭтоДопустимыйСимвол = 
			КодСимволаА <= КодПроверяемогоСимвола И КодПроверяемогоСимвола <= КодСимволаЯ     // Кириллица
			ИЛИ КодСимволаA <= КодПроверяемогоСимвола И КодПроверяемогоСимвола <= КодСимволаZ // Латиница
			ИЛИ КодСимвола0 <= КодПроверяемогоСимвола И КодПроверяемогоСимвола <= КодСимвола9 // Цифры
			ИЛИ КодыДопустимыхСимволов.Найти(КодПроверяемогоСимвола) <> Неопределено;         // Спецсимволы и ё
			
		Если НЕ ЭтоДопустимыйСимвол Тогда
			Возврат Ложь;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

Функция ПрисутствуютРасчетыЗаНоменклатурныеПозиции(ПлатежныеДокументы) Экспорт
	
	Возврат ДенежныеСредстваСервер.ПрисутствуютРасчетыЗаНоменклатурныеПозиции(ПлатежныеДокументы);
	
КонецФункции

Функция ПрисутствуютРасчетыЗаВозвратБезМарки(ДокументыВозврата, Период) Экспорт
	
	Возврат ДенежныеСредстваСервер.ПрисутствуютРасчетыЗаВозвратБезМарки(ДокументыВозврата, Период);
	
КонецФункции

#КонецОбласти