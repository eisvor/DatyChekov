// Универсальные механизмы интеграции ИС (ЕГАИС, ГИСМ, ВЕТИС, ...)

#Область ПрограммныйИнтерфейс

#Область ЗаполнениеИПроверкаЗаполнения

// Переопределение/дополнение события "Перед записью" библиотечных справочников и документов.
//   Позволяет модифицировать библиотечные объекты при необходимости.
//   * Не вызывается в режиме "ОбменДанными.Загрузка"
// 
// Параметры:
//  Объект          - СправочникОбъект, ДокументОбъект - записываемый объект
//  Отказ           - Булево - Отказ
//  РежимЗаписи     - РежимЗаписиДокумента - режим записи (для документов)
//  РежимПроведения - РежимПроведенияДокумента - режим проведения (для документов)
// 
Процедура ПередЗаписьюОбъекта(Объект, Отказ, РежимЗаписи = Неопределено, РежимПроведения = Неопределено) Экспорт
	
	Если ТипЗнч(Объект) = Тип("СправочникОбъект.ШтрихкодыУпаковокТоваров")
		И НЕ Объект.ДополнительныеСвойства.Свойство("НеФормироватьКИЗ")
		И ЗначениеЗаполнено(Объект.Номенклатура)
		И ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Номенклатура, "ОсобенностьУчета") = Перечисления.ОсобенностиУчетаНоменклатуры.ПродукцияИзНатуральногоМеха Тогда
		
		ДанныеШтрихкодаДляОбработки = ШтрихкодированиеИСРТ.ДанныеШтрихкодаДляОбработки();
		ЗаполнитьЗначенияСвойств(ДанныеШтрихкодаДляОбработки, Объект);
		ДанныеШтрихкодаДляОбработки.Штрихкод = Объект.ЗначениеШтрихкода;
		
		Объект.Серия = ИнтеграцияИСРТ.НайтиСоздатьСериюПоДаннымШтрихкода(ДанныеШтрихкодаДляОбработки);
		
	ИначеЕсли ТипЗнч(Объект) = Тип("ДокументОбъект.ПодключениеКегаКОборудованиюРозливаИСМП") Тогда
		
		Если ЗначениеЗаполнено(Объект.Склад) Тогда
			Объект.Подразделение = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Склад, "Магазин");
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Переопределение/дополнение события "Обработка проверки заполнения" библиотечных справочников и документов.
//   Позволяет модифицировать список проверяемых и непроверяемых реквизитов
// 
// Параметры:
//  Объект          - СправочникОбъект, ДокументОбъект - записываемый объект
//  Отказ           - Булево - Отказ
//  ПроверяемыеРеквизиты - Массив Из Строка - массив проверяемых реквизитов
//  МассивНепроверяемыхРеквизитов - Массив Из Строка - массив непроверяемых реквизитов (заполнять для отключения проверки)
//
Процедура ОбработкаПроверкиЗаполнения(Объект, Отказ, ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов) Экспорт
	
	Если ТипЗнч(Объект) = Тип("СправочникОбъект.ШтрихкодыУпаковокТоваров") Тогда
		
		ИспользоватьХарактеристики = ПолучитьФункциональнуюОпцию("ИспользоватьХарактеристикиНоменклатуры");
		Если Не ИспользоватьХарактеристики Или Не Справочники.Номенклатура.ХарактеристикиИспользуются(Объект.Номенклатура) Тогда
			МассивНепроверяемыхРеквизитов.Добавить("Характеристика");
		КонецЕсли;
		
		Если ПроверяемыеРеквизиты.Найти("ВложенныеТовары.Характеристика") <> Неопределено Тогда
			МассивНепроверяемыхРеквизитов.Добавить("ВложенныеТовары.Характеристика");
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Заполняет в табличной части служебные реквизиты.
// ТабличнаяЧасть может иметь различный состав колонок.
// В ТабличнаяЧасть обязательно содержится колонка Номенклатура - ОпределяемыйТип.Номенклатура.
// Заполнению подлежат колонки из нижеперечисленного списка, если значения, указываемые в колонке, используются в прикладном решении.
// Например:
// 	В "ТабличнаяЧасть" присутствует колонка "Артикул".
// 	Колонка подлежит заполнению, если в прикладном решении для номенклатуры возможно указание артикула.
// Список колонок для заполнения:
// 	Артикул                    - ОпределяемыйТип.Артикул - артикул номенклатуры.
// 	Код                        - ОпределяемыйТип.УникальныйИдентификаторИС - код номенклатуры.
// 	ХарактеристикиИспользуются - Булево - признак обязательного использования характеристик номенклатуры.
// 	ЕдиницаИзмерения           - ОпределяемыйТип.Упаковка - базовая единица измерения номенклатуры, в которой осуществляется учет и хранение.
// 	ТипНоменклатуры            - ОпределяемыйТип.ТипНоменклатуры - тип номенклатуры.
// 	ТребуетВзвешивания         - Булево - признак, что для номенклатуры маркированные потребительские упаковки имеют индивидуальный вес.
// 	ПроизвольнаяЕдиницаУчета   - Булево - признак, что для номенклатуры базовая единица учета отличается от маркированной потребительской упаковки.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения, Неопределено - Форма.
//  ТабличнаяЧасть - ДанныеФормыКоллекция, ТаблицаЗначений - таблица для заполнения.
Процедура ЗаполнитьСлужебныеРеквизитыВКоллекции(Форма, ТабличнаяЧасть) Экспорт
	
	ИнтеграцияИСРТ.ЗаполнитьСлужебныеРеквизитыВКоллекции(Форма, ТабличнаяЧасть);
	
КонецПроцедуры

// Обрабатывает строку табличной части в соостветствии с переданной структурой действий.
//
// Параметры:
//  СтрокаТабличнойЧасти - Структура, СтрокаТабличнойЧасти, ДанныеФормыЭлементКоллекции - обрабатываемая строка.
//  СтруктураДействий - структура - структура выполняемых действий.
Процедура ОбработатьСтрокуТабличнойЧасти(СтрокаТабличнойЧасти, СтруктураДействий) Экспорт
	
	ИнтеграцияИСРТ.ОбработатьСтрокуТабличнойЧасти(СтрокаТабличнойЧасти, СтруктураДействий);
	
КонецПроцедуры

// Проверяет заполнение характеристик в таблице значений.
//
// Параметры:
//  ТаблицаТоваров - ТаблицаЗначений - таблица для проверки с колонками: Номенклатура, Характеристика.
//  Отказ - Булево - Истина - характеристики заполнены в требуемых строках, в противном случае - Ложь.
Процедура ПроверитьЗаполнениеХарактеристикВТаблицеЗначений(ТаблицаТоваров, Отказ) Экспорт
	
	ИнтеграцияИСРТ.ПроверитьЗаполнениеХарактеристикВТаблицеЗначений(ТаблицаТоваров, Отказ);
	
КонецПроцедуры

// Необходимо заполнить информацию о сертификатах номенклатуры в виде соответствия из массива структур со свойствами:
//    "ВидСертификации", "НомерСертификации", "ДатаСертификации", "СрокДействия", "Бессрочный".
// Информацию по сертификатам следует добавить в соответствие 
//     "СертификатыНоменклатуры".
// 
// Параметры:
//  СписокНоменклатуры - ОпределяемыйТип.Номенклатура - элемент номенклатура.
//  СертификатыНоменклатуры - Соответствие Из Структура - данные сертификатов:
//   * Ключ - ОпределяемыйТип.Номенклатура,
//   * Значение - Массив из структура:
//   ** ВидСертификации - ПеречислениеСсылка.ВидыДокументовОбязательнойСертификацииИС - Вид сертификата.
//   ** НомерСертификации - Строка - Идентификационный номер сертификата.
//   ** ДатаСертификации - Дата - Дата начала действия сертификата.
//   ** СрокДействия - Дата - Дата окончания срока действия сертификата.
//   ** Бессрочный - Булево - истина, если сертификат бессрочный.
Процедура ПриЗаполненииСертификатовНоменклатуры(СписокНоменклатуры, СертификатыНоменклатуры) Экспорт
	
	Возврат;
	
КонецПроцедуры

#КонецОбласти

#Область Проведение

// Настроить способ расчета статусов оформления.
// 
// Параметры:
//  РасчетОтдельно - Булево - Истина если расчет статусов оформления осуществляется отдельно от транзакции записи
Процедура НастроитьСпособРасчетаСтатусовОформления(РасчетОтдельно) Экспорт
	
	
	Возврат;
	
КонецПроцедуры

// Обработка проведения.
// 
// Параметры:
//  ДокументОбъект - ДокументОбъект - документ ГосИС который проводится
//  Отказ - Булево - флаг отказа
//  РежимПроведения - РежимПроведенияДокумента - Режим проведения
Процедура ОбработкаПроведения(ДокументОбъект, Отказ, РежимПроведения) Экспорт
	
	Возврат;
	
КонецПроцедуры

// Встраивание движений документов ГосИС по прикладным регистрам (при необходимости, например регистрация серий)
// 
Процедура ТекстыЗапросовТаблицыДвижения(Запрос, ТекстыЗапроса, Регистры, ДокументСсылка, ДополнительныеСвойства) Экспорт
	
	Возврат;
	
КонецПроцедуры

// Процедура формирования движений по прикладным регистрам.
//
// Параметры:
//  ДополнительныеСвойства - Структура - дополнительные свойства для записи движений 
//  Движения - КоллекцияДвижений - движения по которым двигается документ
//  Отказ - Булево - признак отказа от проведения документа
Процедура ОтразитьДвижения(ДополнительныеСвойства, Движения, Отказ) Экспорт
	
	Возврат;
	
КонецПроцедуры

#КонецОбласти

#Область Номенклатура

#Область КодыТНВЭД

// В данной процедуре требуется переопределить текст запроса, определяющий сопоставление классификатора ТН ВЭД и данных регистра сведений КодыТНВЭДИСМП.
//   Требования к тексту запроса:
//     Если классификатора ТН ВЭД не используется, переопределение также не заполнять.
//     Результат запроса обязательно должен содержать следующие поля:
//   Колонки временной таблицы "ДанныеШтрихкодовУпаковок":
//     КодТНВЭД           - Строка - код.
//     ВидПродукции       - ПеречислениеСсылка.ВидыПродукцииИС - вид продукции.
//     НаименованиеПолное - Строка - наименование.
//     КодТНВЭДСсылка     - Произвольный - ссылка на сопоставленный элемент классификатора.
//     Сопоставлено       - Число - 0, если в базе не найден соотвествующий элемент классификатора, 1 - если найден.
// Параметры:
//  ТекстЗапроса - Строка - Переопределяемый текст запроса.
Процедура ПриОпределенииТекстаЗапросаСопоставлениеКодовТНВЭД(ТекстЗапроса) Экспорт
	
	ТекстЗапроса = "ВЫБРАТЬ
	|	КодыТНВЭДИСМП.КодТНВЭД           КАК КодТНВЭД,
	|	КодыТНВЭДИСМП.ВидПродукции       КАК ВидПродукции,
	|	КодыТНВЭДИСМП.НаименованиеПолное КАК НаименованиеПолное,
	|
	|	ЕстьNULL(КлассификаторТНВЭД.Ссылка, Неопределено) КАК КодТНВЭДСсылка,
	|	ВЫБОР
	|		КОГДА КлассификаторТНВЭД.Ссылка ЕСТЬ NULL
	|			ТОГДА 0
	|		ИНАЧЕ 1
	|	КОНЕЦ КАК Сопоставлено
	|ИЗ
	|	РегистрСведений.КодыТНВЭДИСМП КАК КодыТНВЭДИСМП
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КлассификаторТНВЭД КАК КлассификаторТНВЭД
	|		ПО КодыТНВЭДИСМП.КодТНВЭД = КлассификаторТНВЭД.Код";
	
КонецПроцедуры

#КонецОбласти

// В процедуре требуется определить наличие товаров по виду продукции для которых используется механизм частичного выбытия
//
// Параметры:
//  Использование - Булево - Признак использования частичного выбытия (для вида продукции)
//  ВидПродукцииИС - Перечислениессылка.ВидыПродукцииИС - Проверяемый вид продукции.
//
Процедура ИспользованиеЧастичноеВыбытие(Использование, ВидПродукцииИС) Экспорт
	
	ИнтеграцияИСРТ.ИспользованиеЧастичноеВыбытие(Использование, ВидПродукцииИС);
	
КонецПроцедуры

// В процедуре требуется определить признак использования видов номенклатуры.
//
// Параметры:
//  Использование - Булево - Признак использования видов номенклатуры в программе.
//
Процедура ИспользованиеВидовНоменклатуры(Использование) Экспорт
	
	Возврат;
	
КонецПроцедуры

#Область ОписаниеНоменклатурыИС

// В процедуре требуется определить наличие товаров по виду продукции для которых единица учета не совпадает с 
//   количеством в потребительском коде маркировки
//
// Параметры:
//  Использование - Булево - Признак использования произвольных единиц учета (для вида продукции) (исходящий)
//  ВидПродукцииИС - Перечислениессылка.ВидыПродукцииИС - Проверяемый вид продукции.
//
Процедура ИспользованиеПроизвольныхЕдиницУчета(Использование, ВидПродукцииИС) Экспорт
	
	ИнтеграцияИСРТ.ИспользованиеПроизвольныхЕдиницУчета(Использование, ВидПродукцииИС);
	
КонецПроцедуры

#КонецОбласти

#Область МаркируемаяПродукция

Процедура ПриЗаполненииТекстаЗапросаПризнакаМаркируемаяПродукцияПоНоменклатуре(ТекстЗапроса, ИмяТаблицыНоменклатура, ИмяПоляНоменклатура) Экспорт
	
	ИнтеграцияИСРТ.ПриЗаполненииТекстаЗапросаПризнакаМаркируемаяПродукцияПоНоменклатуре(ТекстЗапроса, ИмяТаблицыНоменклатура, ИмяПоляНоменклатура);
	
КонецПроцедуры

#КонецОбласти

#Область УпаковкиЕдиницыИзмерения

// Заполняет список упаковок с коэффициентом упаковки в выходящем параметре ТаблицаУпаковокНоменклатуры
// с признаками ЯвляетсяПотребительской, ЯвляетсяУпаковкойЧастичногоВыбытия
// 
// Параметры:
//  Номенклатура - Массив из ОпределяемыйТип.Номенклатура
//  ТаблицаУпаковокНоменклатуры - см. ИнтеграцияИС.НоваяТаблицаУпаковокНоменклатуры
Процедура ПриЗаполнениУпаковокНоменклатуры(Номенклатура, ТаблицаУпаковокНоменклатуры) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СправочникНоменклатура.Ссылка   КАК Номенклатура,
	|	Упаковки.Ссылка                 КАК Упаковка,
	|	Упаковки.Наименование           КАК ПредставлениеУпаковки,
	|	Упаковки.Коэффициент            КАК Коэффициент,
	|	ВЫБОР
	|		КОГДА ОписаниеНоменклатурыИС.Номенклатура ЕСТЬ NULL
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ОписаниеНоменклатурыИС.ПотребительскаяУпаковка = Упаковки.Ссылка
	|	КОНЕЦ КАК ЯвляетсяПотребительской,
	|	ВЫБОР
	|		КОГДА ОписаниеНоменклатурыИС.Номенклатура ЕСТЬ NULL
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ОписаниеНоменклатурыИС.УпаковкаЧастичногоВыбытия = Упаковки.Ссылка
	|	КОНЕЦ КАК ЯвляетсяУпаковкойЧастичногоВыбытия
	|ИЗ
	|	Справочник.Номенклатура КАК СправочникНоменклатура
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.УпаковкиНоменклатуры КАК Упаковки
	|		ПО (ВЫБОР
	|				КОГДА СправочникНоменклатура.НаборУпаковок = ЗНАЧЕНИЕ(Справочник.НаборыУпаковок.ИндивидуальныйДляНоменклатуры)
	|						ИЛИ СправочникНоменклатура.НаборУпаковок = ЗНАЧЕНИЕ(Справочник.НаборыУпаковок.ПустаяСсылка)
	|					ТОГДА СправочникНоменклатура.Ссылка
	|				ИНАЧЕ СправочникНоменклатура.НаборУпаковок
	|			КОНЕЦ = Упаковки.Владелец)
	|			И (НЕ Упаковки.ПометкаУдаления)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОписаниеНоменклатурыИС КАК ОписаниеНоменклатурыИС
	|		ПО СправочникНоменклатура.Ссылка = ОписаниеНоменклатурыИС.Номенклатура
	|ГДЕ
	|	СправочникНоменклатура.Ссылка В (&Номенклатура)
	|	И СправочникНоменклатура.ЕдиницаИзмерения <> Упаковки.Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПредставлениеУпаковки";
	
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		НоваяСтрока = ТаблицаУпаковокНоменклатуры.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаДетальныеЗаписи);
	КонецЦикла;
	
КонецПроцедуры

// Коэффициент упаковки.
// 
// Параметры:
// Коэффициент - Число - Выходное значение коэффициента упаковки.
//  Упаковка - ОпределяемыйТип.Упаковка - Упаковка
//  Номенклатура - Неопределено, ОпределяемыйТип.Номенклатура - Номенклатура
// КэшированныеЗначения - Произвольный - Кэшированные значениия
Процедура КоэффициентУпаковки(Коэффициент, Знач Упаковка, Знач Номенклатура, КэшированныеЗначения) Экспорт
	
	Если ЗначениеЗаполнено(Упаковка) И ТипЗнч(Упаковка) = Тип("СправочникСсылка.УпаковкиНоменклатуры") Тогда
		Коэффициент = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Упаковка, "Коэффициент");
	Иначе
		Коэффициент = 1;
	КонецЕсли;
	
КонецПроцедуры

// Возвращает коэффициенты переданной единицы измерения
// 
// Параметры:
//  Упаковка - ОпределяемыйТип.Упаковка, ОпределяемыйТип.ЕдиницаИзмерения - Упаковка или единица измерения
//  Номенклатура - Массив Из ОпределяемыйТип.Номенклатура - Номенклатура
//  КоэффициентыУпаковокНоменклатуры - Соответствие из КлючИЗначение:
//   * Ключ - ОпределяемыйТип.Номенклатура
//   * Значение - структура:
//   * КодОшибки - Число  - Код ошибки получения коэффициента:
//        0 - Нет ошибок;
//        1 - Не заполнена единица измерения в справочнике 'ЕдиницыИзмеренияВЕТИС';
//        2 - В справочнике 'Номенклатура' выключена возможность пересчета количества в соответствующую мерную единицу измерения;
//        3 - Не удалось сопоставить единицу хранения справочника 'Номенклатура' с единицей измерения 'Упаковка'.
//   * Коэффициент - Число  - Коэффициент пересчета единицы измерения из 'Упаковка'.
Процедура ПриОпределенииКоэффициентовУпаковки(Упаковка, Номенклатура, КоэффициентыУпаковокНоменклатуры) Экспорт
	
	Если Номенклатура.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ШаблонРезультата = Новый Структура;
	ШаблонРезультата.Вставить("КодОшибки",   0);
	ШаблонРезультата.Вставить("Коэффициент", 1);
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Номенклатура.Ссылка КАК Ссылка,
	|	Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	Номенклатура.НаборУпаковок КАК НаборУпаковок
	|ПОМЕСТИТЬ втДанныеНоменклатуры
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|ГДЕ
	|	Номенклатура.Ссылка В(&Номенклатура)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	1 КАК Приоритет,
	|	1 КАК Коэффициент,
	|	втДанныеНоменклатуры.Ссылка КАК Номенклатура
	|ИЗ
	|	втДанныеНоменклатуры КАК втДанныеНоменклатуры
	|ГДЕ
	|	втДанныеНоменклатуры.ЕдиницаИзмерения = &Упаковка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	2,
	|	ЕдиницыИзмерения.Коэффициент,
	|	втДанныеНоменклатуры.Ссылка
	|ИЗ
	|	втДанныеНоменклатуры КАК втДанныеНоменклатуры
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.УпаковкиНоменклатуры КАК ЕдиницыИзмерения
	|		ПО втДанныеНоменклатуры.Ссылка = ЕдиницыИзмерения.Владелец
	|ГДЕ
	|	(ЕдиницыИзмерения.Ссылка = &Упаковка
	|			ИЛИ ЕдиницыИзмерения.ЕдиницаИзмерения = &Упаковка)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	3,
	|	ЕдиницыИзмерения.Коэффициент,
	|	втДанныеНоменклатуры.Ссылка
	|ИЗ
	|	втДанныеНоменклатуры КАК втДанныеНоменклатуры
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.УпаковкиНоменклатуры КАК ЕдиницыИзмерения
	|		ПО втДанныеНоменклатуры.НаборУпаковок = ЕдиницыИзмерения.Владелец
	|ГДЕ
	|	(ЕдиницыИзмерения.Ссылка = &Упаковка
	|			ИЛИ ЕдиницыИзмерения.ЕдиницаИзмерения = &Упаковка)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Приоритет УБЫВ";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	Запрос.УстановитьПараметр("Упаковка",     Упаковка);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Результат = ОбщегоНазначения.СкопироватьРекурсивно(ШаблонРезультата);
		
		Если Выборка.Коэффициент = 0 Тогда
			Результат.Коэффициент = 1;
			Результат.КодОшибки = 3;
		Иначе
			Результат.Коэффициент = Выборка.Коэффициент;
		КонецЕсли;
		
		КоэффициентыУпаковокНоменклатуры.Вставить(Выборка.Номенклатура, Результат);
		
	КонецЦикла;
	
КонецПроцедуры

// В процедуре требуется определить единицу измерения веса с кодом по ОКЕИ 166.
// Используется для пересчета упаковок в килограммы.
// 
// Параметры:
//  ЕдиницаИзмеренияКилограмм - ОпределяемыйТип.Упаковка - Единица измерения веса (килограмм).
Процедура ЕдиницаИзмеренияКилограмм(ЕдиницаИзмеренияКилограмм) Экспорт
	
	Результат = Справочники.БазовыеЕдиницыИзмерения.НайтиПоКоду("166");
	Если ЗначениеЗаполнено(Результат) Тогда
		ЕдиницаИзмеренияКилограмм = Результат;
	КонецЕсли;
	
КонецПроцедуры

// В процедуре требуется определить единицу измерения объема с кодом по ОКЕИ 112.
// Используется для пересчета упаковок в литры.
//  
// Параметры:
//  ЕдиницаИзмеренияЛитр - ОпределяемыйТип.Упаковка - Единица измерения объема (литр).
Процедура ЕдиницаИзмеренияЛитр(ЕдиницаИзмеренияЛитр) Экспорт
	
	Результат = Справочники.БазовыеЕдиницыИзмерения.НайтиПоКоду("112");
	Если ЗначениеЗаполнено(Результат) Тогда
		ЕдиницаИзмеренияЛитр = Результат;
	КонецЕсли;
	
КонецПроцедуры

// Предназначена для получения значения коэффициента, веса, объема упаковки и типа измеряемой величины.
//
// Параметры:
//  ДанныеУпаковок - ТаблицаЗначений - Таблица с колонками:
//   * Номенклатура - ОпределяемыйТип.Номенклатура - Ссылка на номенклатуру - обязательно для указания.
//   * Упаковка     - ОпределяемыйТип.Упаковка - упаковка, данные которой нужно получить - если не указана,
//                                               тогда получаются данные базовой единицы измерения номенклатуры.
//   * Вес          - Число - Вес упаковки.
//   * Объем        - Число - Объем упаковки.
//   * Коэффициент  - Число - Коэффициент упаковки.
//   * ТипИзмеряемойВеличиныВес   - Булево - Устанавливается в значение Истина, если единица измерения номенклатуры
//                                           или упаковка, является единицой измерения веса.
//   * ТипИзмеряемойВеличиныОбъем - Булево - Устанавливается в значение Истина, если единица измерения номенклатуры
//                                           или упаковка, является единицой измерения объема.
//  ВесОбъемУпаковкиВЕдиницеКонстантИС - Булево - Если ЛОЖЬ, то вес и объем возвращаются в единицах измерения веса и объема,
//                                                иначе - в единицах измерения, указанных в константах:
//                                                ЕдиницаИзмеренияКилограммИС, ЕдиницаИзмеренияЛитрИС.
//
Процедура КоэффициентВесОбъемУпаковок(ДанныеУпаковок, ВесОбъемУпаковкиВЕдиницеКонстантИС = Истина) Экспорт
	
	
	Возврат;
	
КонецПроцедуры

#КонецОбласти

// Возвращает объем упаковки или единицы измерения в литрах.
//  * Если не задана упаковка, то для единицы учета номенклатуры
//  * Если задана упаковка, то для указанной упаковки
//  * Если задана единица измерения, то для указанной единицы измерения
// 
// Параметры:
//  Объем - Число - Объем упаковки (исходящий)
//  Номенклатура - ОпределяемыйТип.Номенклатура, Неопределено - Номенклатура
//  Упаковка - ОпределяемыйТип.Упаковка, ОпределяемыйТип.ЕдиницаИзмерения, Неопределено - Упаковка или единица измерения номенклатуры
//  КэшированныеЗначения - Произвольный - Кэшированные значения
Процедура ОбъемУпаковки(Объем, Знач Номенклатура, Знач Упаковка, КэшированныеЗначения) Экспорт
	
	
	Возврат;
	
КонецПроцедуры

#КонецОбласти

#Область ОрганизацииИКонтрагенты

// Процедура заполняет признак использования гос.контрактов по 275ФЗ.
//
// Параметры:
//  Используется - Булево - Признак использования гос.контрактов по 275ФЗ. Значение по умолчанию Ложь.
Процедура ИспользуетсяПоддержкаПлатежейВСоответствииС275ФЗ(Используется) Экспорт

	
	Возврат;

КонецПроцедуры

// В процедуре нужно реализовать заполнение структуры данными из информационной базы.
//
// Параметры:
//  Организация - ОпределяемыйТип.ОрганизацияКонтрагентГосИС - ссылка на собственную организацию или контрагента,
//  Сведения - Структура - структура с реквизитами организации, которые требуется заполнить,
//  ДатаСведений - Дата - дата, на которую требуется получить информацию.
Процедура ЗаполнитьСведенияОбОрганизации(Организация, Сведения, ДатаСведений = Неопределено) Экспорт
	
	ИнтеграцияИСРТ.ЗаполнитьСведенияОбОрганизации(Организация, Сведения, ДатаСведений);
	
КонецПроцедуры

// В процедуре нужно реализовать заполнение соответствия ИНН (или налогового номера в стране регистрации) и контрагентов
// для переданного массива контрагентов.
//
// Параметры:
//  СоответствиеИННКонтрагентам - Соответствие из Строка- соответствие для заполнения:
//   * Ключ - ОпределяемыйТип.КонтрагентГосИС - ссылка на контрагента.
//   * Значение - Строка - ИНН (или его аналог).
//  Контрагенты - Массив из ОпределяемыйТип.КонтрагентГосИС - массив контрагентов.
Процедура ПриОпределенииИНННалоговыхНомеровКонтрагентов(СоответствиеИННКонтрагентам, Контрагенты) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("СписокКонтрагентов", Контрагенты);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА Контрагенты.ЮрФизЛицо = ЗНАЧЕНИЕ(Перечисление.ЮрФизЛицо.ЮрЛицоНеРезидент)
	|			ТОГДА Контрагенты.РегистрационныйНомер
	|		ИНАЧЕ Контрагенты.ИНН
	|	КОНЕЦ КАК ИНН,
	|	Контрагенты.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.Контрагенты КАК Контрагенты
	|ГДЕ
	|	Контрагенты.Ссылка В(&СписокКонтрагентов)";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		СоответствиеИННКонтрагентам.Вставить(Выборка.Ссылка, Выборка.ИНН);
	КонецЦикла;
	
КонецПроцедуры

// В процедуре нужно реализовать заполнение структуры данными ИНН/КПП/GLN из информационной базы.
//
// Параметры:
//  Сведения      - Структура - структура с реквизитами организации, которые требуется заполнить,
//  Организация   - ОпределяемыйТип.Организация - ссылка на собственную организацию,
//  Подразделение - ОпределяемыйТип.Подразделение - Подразделение организации.
Процедура ПриОпределенииИННКППGLNОрганизации(Сведения, Организация, Подразделение) Экспорт
	
	ИННКППGLNОрганизации = Новый Структура;
	ИнтеграцияИСРТ.ИННКППGLNОрганизации(Организация, Подразделение, ИННКППGLNОрганизации);
	ЗаполнитьЗначенияСвойств(Сведения, ИННКППGLNОрганизации);
	
КонецПроцедуры

//Получение кода ОКОПФ по организации.
//
//Параметры:
//  КодОКОПФ    - Строка - Код ОКОПФ организации.
//  Организация - ОпределяемыйТип.Организация - Организация, для которой необходимо получить код ОКОПФ.
//
Процедура КодОКОПФОрганизации(КодОКОПФ, Организация) Экспорт
	
	
КонецПроцедуры

// Заполняет представление руководителя организации.
//
// Параметры:
//  ПредставлениеРуководителя - (см. ИнтеграцияИС.ДанныеРуководителяОрганизации)
//  Организация - ОпределяемыйТип.ОрганизацияКонтрагентГосИС - ссылка на собственную организацию или контрагента,
//  ДатаСведений - Дата - дата, на которую требуется получить информацию.
Процедура ОпределитьДанныеРуководителяОрганизации(ПредставлениеРуководителя, Организация, ДатаСведений) Экспорт
	
	ИнтеграцияИСРТ.ОпределитьДанныеРуководителяОрганизации(ПредставлениеРуководителя, Организация, ДатаСведений);
	
КонецПроцедуры

// В процедуре нужно реализовать поиск контрагента по ИНН и/или КПП.
//
// Параметры:
//  Контрагент - ОпределяемыйТип.ОрганизацияКонтрагентГосИС, ОпределяемыйТип.КонтрагентГосИС - найденный контрагент (исходящий),
//             - Неопределено - контрагент не найден (исходящий),
//  ИНН - Строка - ИНН искомого контрагента,
//  КПП - Строка - КПП искомого контрагента.
//
Процедура ЗаполнитьКонтрагентаПоИННКПП(Контрагент, ИНН, КПП) Экспорт
	
	ИнтеграцияИСРТ.ЗаполнитьКонтрагентаПоИННКПП(Контрагент, ИНН, КПП);
	
КонецПроцедуры

// В процедуре необходимо сформировать соответствие по коллекции ИНН.
//
// Параметры:
//  КоллекцияИНН - Массив Из Строка - Список ИНН.
//  Соответствие - Соответствие Из ОпределяемыйТип.КонтрагентГосИС - Соответсвие вида:
//   * Ключ - Строка - ИНН
//   * Значение - ОпределяемыйТип.КонтрагентГосИС - Контрагент
Процедура ЗаполнитьСоответствиеИННКонтрагентам(КоллекцияИНН, Соответствие) Экспорт
	
	ИнтеграцияИСРТ.ЗаполнитьСоответствиеИННКонтрагентам(КоллекцияИНН, Соответствие);
	
КонецПроцедуры

// В процедуре необходимо сформировать соответствие по коллекции налоговых номеров. Ключ - налоговый номер, значение - Контрагент.
//
// Параметры:
//  КоллекцияНалоговыхНомеров - Массив Из Строка - Список налоговых номеров юр.лиц за пределами РФ.
//  Соответствие - Соответствие Из ОпределяемыйТип.КонтрагентГосИС - Соответсвие вида:
//    * Ключ - Строка - Налоговый номер
//    * Значение - ОпределяемыйТип.КонтрагентГосИС - Контрагент
Процедура ПриОпределенииСоответствияНалоговыхНомеровКонтрагентам(КоллекцияНалоговыхНомеров, Соответствие) Экспорт
	
	
	Возврат;
	
КонецПроцедуры

// В процедуре необходимо заполнить соответствие по коллекции ИНН.
//
// Параметры:
//  КоллекцияИНН - Массив Из Строка - Список ИНН.
//  Соответствие - Соответствие Из ОпределяемыйТип.Организация - Соответсвие вида:
//   * Ключ - Строка - ИНН организации
//   * Значение - ОпределяемыйТип.Организация - Организация
Процедура ЗаполнитьСоответствиеИННОрганизациям(КоллекцияИНН, Соответствие) Экспорт
	
	Если Не ПравоДоступа("Чтение", Метаданные.Справочники.Организации) Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Организации.Ссылка КАК Организация,
	|	Организации.ИНН    КАК ИНН
	|ИЗ
	|	Справочник.Организации КАК Организации
	|ГДЕ
	|	Организации.ИНН В (&КоллекцияИНН)
	|");
	Запрос.УстановитьПараметр("КоллекцияИНН", КоллекцияИНН);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Соответствие.Вставить(Выборка.ИНН, Выборка.Организация);
	КонецЦикла;
	
КонецПроцедуры

// В процедуре нужно реализовать поиск организации в прикладном объекте.
//
// Параметры:
//  Организация - ОпределяемыйТип.Организация - найденная организация
//  Объект      - Произвольный                - объект в котором производится поиск
//
Процедура ПриОпределенииОрганизацииИзПрикладногоОбъекта(Организация, Объект) Экспорт
	
	Если ТипЗнч(Объект) = Тип("ДокументСсылка.ПроизводственнаяОперацияВЕТИС") Тогда
		
		Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект.Ссылка, "ХозяйствующийСубъект, Предприятие");
		
		ПредставленияСопоставлений = ИнтеграцияВЕТИСВызовСервера.ПредставленияСопоставлений(
			Реквизиты.ХозяйствующийСубъект, Реквизиты.Предприятие);
		
		Организация = ПредставленияСопоставлений.КонтрагентХозяйствующегоСубъекта.Ссылка;
		
	ИначеЕсли ТипЗнч(Объект) = Тип("ДокументОбъект.ПроизводственнаяОперацияВЕТИС") Тогда
		
		ПредставленияСопоставлений = ИнтеграцияВЕТИСВызовСервера.ПредставленияСопоставлений(
			Объект.ХозяйствующийСубъект, Объект.Предприятие);
		
		Организация = ПредставленияСопоставлений.КонтрагентХозяйствующегоСубъекта.Ссылка;
		
	ИначеЕсли ОбщегоНазначения.ЭтоСсылка(ТипЗнч(Объект)) Тогда;
		
		Организация = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект, "Организация");
		
	Иначе
		
		Организация = Объект.Организация;
		
	КонецЕсли;
	
КонецПроцедуры

// В процедуре необходимо реализовать заполнение таблицы данными организаций, доступных для интеркампани.
// 
// Параметры:
//  ОрганизацииИнтеркампани - ТаблицаЗначений - Организации интеркампани:
// * Организация - ОпределяемыйТип.Организация - Ссылка на организацию.
// * Подразделение  - ОпределяемыйТип.Подразделение - Ссылка на подрезделение.
// * Представление - Строка - Представление организации.
// * ИНН - Строка - ИНН организации.
// * КПП - Строка - КПП организации.
Процедура ПриОпределенииОрганизацийИнтеркампани(ОрганизацииИнтеркампани) Экспорт
	
	Возврат;
	
КонецПроцедуры

#КонецОбласти

#Область ПодключаемоеОборудование

// Настраивает подключаемое оборудование в форме,
// устанавливает флаг ИспользоватьПодключаемоеОборудование в форме.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма, в которой необходимо настроить подключаемое оборудование,
//  ПрефиксыЭлементовФормы - Строка - строка имен табличных частей, разделенных запятыми, в которых нужно настроить видимость команд.
Процедура НастроитьПодключаемоеОборудование(Форма, ПрефиксыЭлементовФормы = "Товары") Экспорт
	
	ИнтеграцияИСРТ.НастроитьПодключаемоеОборудование(Форма, ПрефиксыЭлементовФормы);
	
КонецПроцедуры

#КонецОбласти

#Область ДлительныеОперации

//Особенности работы с длительными операциями в конкретном окружении
//
//Параметры:
//   Параметры - Структура - параметры фонового задания.
//   ПараметрыВыполнения - см. ДлительныеОперации.ПараметрыВыполненияВФоне.
Процедура НастроитьДлительнуюОперацию(Параметры, ПараметрыВыполнения) Экспорт
	
	Возврат;
	
КонецПроцедуры

#КонецОбласти

#Область ФормированиеПечатныхФорм

// Заполняет структуру параметров возможных получателей печатных форм при отправке по электронной почте.
//
// Параметры:
//  ПараметрыОтправки - Структура - содержит параметры отправки сформированных печатных форм
//  ДанныеОбъектовПечати - Массив,Соответствие - данные о печатаемых объектах
//  КоллекцияПечатныхФорм - ТаблицаЗначений - содержит информацию о формируемых печатных формах.
Процедура ЗаполнитьПараметрыОтправки(ПараметрыОтправки, ДанныеОбъектовПечати, КоллекцияПечатныхФорм)  Экспорт
	
	ИнтеграцияИСРТ.ЗаполнитьПараметрыОтправки(ПараметрыОтправки, ДанныеОбъектовПечати, КоллекцияПечатныхФорм);
	
КонецПроцедуры

#КонецОбласти

#Область ОбщегоНазначенияУТ

// (См ОбщегоНазначенияУТ.ПроверитьВозможностьВводаНаОсновании)
Процедура ПроверитьВозможностьВводаНаОсновании(Документ,
	                                           Статус = Неопределено,
	                                           ЕстьОшибкиПроведен = Ложь,
	                                           ЕстьОшибкиСтатус = Ложь,
	                                           МассивДопустимыхСтатусов = Неопределено,
	                                           СоглашениеДоступноВнешнемуПользователю = Неопределено) Экспорт
	
	ОбщегоНазначенияРТ.ПроверитьВозможностьВводаНаОсновании(Документ);
	
КонецПроцедуры

// Возвращает представление объекта.
// 
// Параметры:
//  Представление - Строка - Исходящий параметр со значением представления.
//  ПараметрОбъект - Строка, ОбъектМетаданных - Наименование типа объекта либо сам объект.
Процедура УстановитьПредставлениеОбъекта(Представление, ПараметрОбъект) Экспорт
	
	Представление = ОбщегоНазначенияРТ.ПредставлениеОбъекта(ПараметрОбъект);
	
КонецПроцедуры

// Заполняет представление строки номенклатуры.
//
// Параметры:
//  Представление  - Строка                                     - представление для заполнения,
//  Номенклатура   - ОпределяемыйТип.Номенклатура               - ссылка на номенклатуру,
//  Характеристика - ОпределяемыйТип.ХарактеристикаНоменклатуры - ссылка на характеристику номенклатуры,
//  Упаковка       - ОпределяемыйТип.Упаковка                   - ссылка на упаковку.
//  Серия          - ОпределяемыйТип.СерияНоменклатуры          - ссылка на серию номенклатуры.
Процедура ЗаполнитьПредставлениеНоменклатуры(Представление, Номенклатура, Характеристика, Упаковка, Серия) Экспорт
	
	Представление = ФормированиеПечатныхФормСервер.ПолучитьПредставлениеНоменклатурыДляПечати(
		СокрЛП(Номенклатура),
		СокрЛП(Характеристика),
		Упаковка,
		Серия);
	
КонецПроцедуры

#КонецОбласти


#Область ВызовыИзБСП

// (См. ОбщийМодуль.ПодключаемыеКомандыПереопределяемый.ПриОпределенииКомандПодключенныхКОбъекту)
//
Процедура ПриОпределенииКомандПодключенныхКОбъекту(НастройкиФормы, Источники, ПодключенныеОтчетыИОбработки, Команды) Экспорт
	
	ИнтеграцияИСРТ.ПриОпределенииКомандПодключенныхКОбъекту(НастройкиФормы, Источники, ПодключенныеОтчетыИОбработки, Команды);
	
КонецПроцедуры

#КонецОбласти

#Область МенюОтчеты

// Добавляет команду отчета в список команд.
// 
// Параметры:
//   КомандыОтчетов - см. ВариантыОтчетовПереопределяемый.ПередДобавлениемКомандОтчетов.КомандыОтчетов
Процедура ДобавитьКомандуСтруктураПодчиненности(КомандыОтчетов) Экспорт
	
	ИнтеграцияИСРТ.ДобавитьКомандуСтруктураПодчиненности(КомандыОтчетов);
	
КонецПроцедуры

// Добавляет команду отчета в список команд.
// 
// Параметры:
//   КомандыОтчетов - см. ВариантыОтчетовПереопределяемый.ПередДобавлениемКомандОтчетов.КомандыОтчетов
Процедура ДобавитьКомандуДвиженияДокумента(КомандыОтчетов) Экспорт
	
	ИнтеграцияИСРТ.ДобавитьКомандуДвиженияДокумента(КомандыОтчетов);
	
КонецПроцедуры

#КонецОбласти

#Область СерииНоменклатуры

// Заполняет имена реквизитов, от значений которых зависят параметры указания серий.
//
// Параметры:
//  ИменаРеквизитов - Строка           - Результат заполнения.
//  ТипОбъекта      - ОбъектМетаданных - Тип объекта коллекции объектов метаданных.
Процедура ЗаполнитьИменаРеквизитовДляЗаполненияПараметровУказанияСерий(ИменаРеквизитов, ТипОбъекта) Экспорт
	
	ИнтеграцияИСРТ.ЗаполнитьИменаРеквизитовДляЗаполненияПараметровУказанияСерий(ИменаРеквизитов, ТипОбъекта);
	
КонецПроцедуры

// Заполняет параметры указания серий для товаров, указанных в объекте.
//
// Параметры:
//  Параметры  - Произвольный     - выходной, параметры указания серий, состав полей определен в прикладной конфигурации.
//  ТипОбъекта - ОбъектМетаданных - Тип объекта коллекции объектов метаданных.
//  Объект     - Структура        - Значения реквизитов объекта, необходимых для заполнения параметров указания серий.
Процедура ЗаполнитьПараметрыУказанияСерий(Параметры, ТипОбъекта, Объект) Экспорт
	
	ИнтеграцияИСРТ.ЗаполнитьПараметрыУказанияСерий(Параметры, ТипОбъекта, Объект);
	
КонецПроцедуры

// Возвращает параметры указания серий для товаров, указанных в объекте.
//
// Параметры:
//  Параметры - Структура - выходной, параметры указания серий, состав полей определен в прикладной конфигурации.
//  Объект    - ДокументОбъект, ДанныеФормыСтруктура - Объект, для формы которого нужно сформировать параметры
//                                             указания серий.
//  МенеджерОбъекта - ДокументМенеджер - Менеджер объекта, для формы которого нужно сформировать параметры указания серий.
Процедура ЗаполнитьПараметрыУказанияСерийФормыОбъекта(Параметры, Объект, МенеджерОбъекта) Экспорт
	
	ИнтеграцияИСРТ.ЗаполнитьПараметрыУказанияСерийФормыОбъекта(Параметры, Объект, МенеджерОбъекта);
	
КонецПроцедуры

// Извлекает из временного хранилища серии, указанные в форме редактирования серий, помещает эти строки в ТЧ "Серии" объекта,
//   перерасчитывает статусы указания серий строках товарной табличной части.
//
// Параметры:
//  Форма                       - ФормаКлиентскогоПриложения    - Источник вызова.
//  ПараметрыФормыУказанияСерий - Структура           - Состав полей определен в функции НоменклатураСервер.ПараметрыФормыУказанияСерий.
//  КэшированныеЗначения        - Структура           - Сохраненные значения параметров, используемых при обработке строки таблицы.
Процедура ОбработатьУказаниеСерий(Форма, ПараметрыФормыУказанияСерий, КэшированныеЗначения) Экспорт
	
	Возврат;
	
КонецПроцедуры

// Процедура заполняет статусы указания серий в строках товарной табличной части.
//
// Параметры:
//  Объект - ДанныеФормыСтруктура, ФормаКлиентскогоПриложения - Общая форма или основной реквизит формы объекта.
//  ПараметрыУказанияСерий - Произвольный - Параметры указания серий номенклатуры.
//
Процедура ЗаполнитьСтатусыУказанияСерий(Объект, ПараметрыУказанияСерий) Экспорт
	
	Возврат;
	
КонецПроцедуры

Процедура ЗаполнитьСтатусыУказанияСерийФормы(Форма, ИмяРеквизитаОбъект = "Объект", ИмяРеквизитаПараметрыУказанияСерий = "ПараметрыУказанияСерий") Экспорт
	
	
КонецПроцедуры

Процедура ЗаполнитьПараметрыУказанияСерийФормы(Менеджер, Форма, ИмяРеквизитаОбъект = "Объект", ИмяРеквизитаПараметрыУказанияСерий = "ПараметрыУказанияСерий") Экспорт
	
	
КонецПроцедуры

// Процедура пересчитывает статусы указания серий в строках товаров, если это необходимо, переподчиняет строки серий 
// другим строкам таблицы.
//
// Параметры:
//  Форма                      - ФормаКлиентскогоПриложения    - Источник вызова.
//  ПараметрыУказанияСерий     - Произвольный - См. ИнтеграцияИС.ПараметрыУказанияСерий.
//  ТекущаяСтрокаИдентификатор - Число               - Идентификатор текущей строки товаров в форме объекта.
//  КэшированныеЗначения       - Структура           - Сохраненные значения параметров, используемых при обработке строки таблицы.
Процедура ЗаполнитьСтатусыУказанияСерийПриОкончанииРедактированияСтрокиТЧ(
	Форма,
	ПараметрыУказанияСерий = "",
	ТекущаяСтрокаИдентификатор,
	КэшированныеЗначения) Экспорт
	
	Возврат;
	
КонецПроцедуры

// Заполняет текст запроса заполнения статусов указания серий для товаров, указанных в документе.
//
// Параметры:
//  ТекстЗапроса           - Строка           - Текст запроса заполнения статусов указания серий.
//  ТипОбъекта             - ОбъектМетаданных - Тип документа коллекции объектов метаданных.
//  ПараметрыУказанияСерий - Произвольный     - См. ИнтеграцияИС.ПараметрыУказанияСерий.
Процедура ЗаполнитьТекстЗапросаЗаполненияСтатусовУказанияСерий(ТекстЗапроса, ТипОбъекта, ПараметрыУказанияСерий) Экспорт
	
	Возврат;
	
КонецПроцедуры

// Заполняет текст запроса проверки заполнения серий в документе.
//
// Параметры:
//  ТекстЗапроса           - Строка           - Текст запроса проверки заполнения серий.
//  ТипОбъекта             - ОбъектМетаданных - Тип документа коллекции объектов метаданных.
//  ПараметрыУказанияСерий - Произвольный     - См. ИнтеграцияИС.ПараметрыУказанияСерий.
Процедура ЗаполнитьТекстЗапросаПроверкиЗаполненияСерий(ТекстЗапроса, ТипОбъекта, ПараметрыУказанияСерий) Экспорт
	
	Возврат;
	
КонецПроцедуры

// Устарело. Процедура формирования движений по регистру "Движения серий товаров".
//
// Параметры:
//  ДополнительныеСвойства - Структура - дополнительные свойства для записи движений 
//  Движения - КоллекцияДвижений - движения по которым двигается документ
//  Отказ - Булево - признак отказа от проведения документа
Процедура ОтразитьДвиженияСерийТоваров(ДополнительныеСвойства, Движения, Отказ) Экспорт
	
	Возврат;
	
КонецПроцедуры

// Заполняет, при необходимости создает серии в документе ГосИС или его выделенных строках
//
// Параметры:
//  Объект - ДанныеФормыСтруктура - объект для заполнения
//  Товары - ДанныеФормыКоллекция, ТаблицаЗначений - табличная часть документа
//  ВыделенныеСтроки - Массив Из ДанныеФормыЭлементКоллекции - выделенные строки документа
//  ПараметрыУказанияСерий - см. ИнтеграцияИС.ПараметрыУказанияСерий
//  РезультатЗаполненияСерий - см. ИнтеграцияИС.РезультатГенерацииИЗаполненияСерий.
Процедура ПриГенерацииСерий(Объект, Товары, ВыделенныеСтроки, ПараметрыУказанияСерий, РезультатЗаполненияСерий) Экспорт

	Возврат;

КонецПроцедуры

#КонецОбласти

#КонецОбласти

// В функции требуется определить право на регистрацию нового штрихкода для текущего пользователя.
//
// Параметры:
//  ДоступРазрешен - Булево - Истина, если есть право на регистрацию штрихкода. Ложь - в противном случае.
//
Процедура ПравоРегистрацииШтрихкодовНоменклатуры(ДоступРазрешен) Экспорт
	
	ИнтеграцияИСРТ.ПравоРегистрацииШтрихкодовНоменклатуры(ДоступРазрешен);
КонецПроцедуры

// В процедуре требуется определить признак использования характеристик 
//   * для номенклатуры, если передана номенклатура,
//   * в программе, если не передана.
//
// Параметры:
//  Использование - Булево - Признак использования характеристик (для номенклатуры или общий)
//  Номенклатура - ОпределяемыйТип.Номенклатура, Неопределено - Ссылка на элемент номенклатуры.
//
Процедура ИспользованиеХарактеристик(Использование, Номенклатура) Экспорт
	
	ИнтеграцияИСРТ.ИспользованиеХарактеристик(Использование, Номенклатура);
	
КонецПроцедуры

// В процедуре требуется определить признак использования серий
//   * для номенклатуры, если передана номенклатура,
//   * в программе, если не передана.
//
// Параметры:
//  Использование - Булево - Признак использования серий (для номенклатуры или общий)
//  Номенклатура - ОпределяемыйТип.Номенклатура, Неопределено - Ссылка на элемент номенклатуры.
//
Процедура ИспользованиеСерий(Использование, Номенклатура) Экспорт
	
	ИнтеграцияИСРТ.ИспользованиеСерий(Использование, Номенклатура);
	
КонецПроцедуры

// В процедуре требуется определить признак использования упаковок для номенклатуры.
//   * для номенклатуры, если передана номенклатура,
//   * в программе, если не передана.
//
// Параметры:
//  Использование - Булево - Признак использования упаковок (для номенклатуры или общий)
//  Номенклатура - ОпределяемыйТип.Номенклатура, Неопределено - Ссылка на элемент номенклатуры.
//
Процедура ИспользованиеУпаковок(Использование, Номенклатура) Экспорт
	
	ИнтеграцияИСРТ.ИспользованиеУпаковок(Использование, Номенклатура);
	
КонецПроцедуры
