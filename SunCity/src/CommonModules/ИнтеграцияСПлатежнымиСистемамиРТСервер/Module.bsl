
#Область ПрограммныйИнтерфейс

#Область НастройкиОплаты

Процедура ПриОпределенииНастроекИнтеграции(Настройки) Экспорт
	
	ОбъектМетаданных	= Метаданные.РегистрыСведений.СоответствиеНастроекИнтеграцииРМК;
	ИсключаемыеПоля 	= Новый Массив;
	ИсключаемыеПоля.Добавить("ПлатежнаяСистемаККТ");
	ИсключаемыеПоля.Добавить("ИдентификаторПлатежнойСистемы");       
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоОрганизаций") Тогда
		ИсключаемыеПоля.Добавить("Организация");
	КонецЕсли;
	
	Настройки.Вставить("ОбъектМетаданных", ОбъектМетаданных);
	Настройки.Вставить("ИсключаемыеПоля",  ИсключаемыеПоля);
	
	
КонецПроцедуры

Процедура ПриЗаписиНастроекИнтеграции(ПараметрыОплаты, Отказ, СообщениеОбОшибке) Экспорт
	
	НачатьТранзакцию();
	
	Попытка
		
		ПустаяНастройка		= Новый Структура("Идентификатор", "");
		
		Организация			= ПараметрыОплаты.Получить("Организация");
		ТорговыйОбъект		= ПараметрыОплаты.Получить("ТорговыйОбъект");
		СпособОплаты		= ПараметрыОплаты.Получить("СпособОплаты");
		Интеграция			= ПараметрыОплаты.Получить("Интеграция");
		
		НастройкиИнтеграции = ?(ЗначениеЗаполнено(Интеграция), 
			ИнтеграцияСПлатежнымиСистемамиРТВызовСервера.НастройкиТорговойТочки(Интеграция), 
			ПустаяНастройка);
			
		ИдентификаторПС		= НастройкиИнтеграции.Идентификатор;     
		
		Если Не ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоОрганизаций") Тогда
			Организация = Справочники.Организации.ОрганизацияПоУмолчанию()
		КонецЕсли;
		
		Блокировка = Новый БлокировкаДанных;
		
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.СоответствиеНастроекИнтеграцииРМК");
		ЭлементБлокировки.УстановитьЗначение("Организация",  	Организация);
		ЭлементБлокировки.УстановитьЗначение("ТорговыйОбъект",  ТорговыйОбъект);
		ЭлементБлокировки.УстановитьЗначение("СпособОплаты", 	СпособОплаты);
		
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		Блокировка.Заблокировать();
		
		
		Если ЗначениеЗаполнено(Интеграция) Тогда
			
			Запрос = Новый Запрос;
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	СоответствиеНастроекИнтеграции.Организация КАК Организация,
			|	СоответствиеНастроекИнтеграции.ТорговыйОбъект 	КАК ТорговыйОбъект,
			|	СоответствиеНастроекИнтеграции.СпособОплаты КАК СпособОплаты
			|ИЗ
			|	РегистрСведений.СоответствиеНастроекИнтеграцииРМК КАК СоответствиеНастроекИнтеграции
			|ГДЕ
			|	СоответствиеНастроекИнтеграции.Интеграция = &Интеграция";
			
			Запрос.УстановитьПараметр("Интеграция", 		Интеграция);
			
			РезультатЗапроса = Запрос.Выполнить();
			ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
			
			Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
				Набор = РегистрыСведений.СоответствиеНастроекИнтеграцииРМК.СоздатьНаборЗаписей();
				Набор.Отбор.Организация.Установить(ВыборкаДетальныеЗаписи.Организация);
				Набор.Отбор.ТорговыйОбъект.Установить(ВыборкаДетальныеЗаписи.ТорговыйОбъект);
				Набор.Отбор.СпособОплаты.Установить(ВыборкаДетальныеЗаписи.СпособОплаты);
				Набор.Записать();
			КонецЦикла;
			
		КонецЕсли;
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ИСТИНА КАК Поле1
		|ИЗ
		|	РегистрСведений.СоответствиеНастроекИнтеграцииРМК КАК СоответствиеНастроекИнтеграции
		|ГДЕ
		|	СоответствиеНастроекИнтеграции.Организация = &Организация
		|	И СоответствиеНастроекИнтеграции.ТорговыйОбъект = &ТорговыйОбъект
		|	И СоответствиеНастроекИнтеграции.СпособОплаты = &СпособОплаты
		|	И СоответствиеНастроекИнтеграции.Интеграция <> &Интеграция";
		
		Запрос.УстановитьПараметр("ТорговыйОбъект",	ТорговыйОбъект);
		Запрос.УстановитьПараметр("Организация",   	Организация);
		Запрос.УстановитьПараметр("СпособОплаты",  	СпособОплаты);
		Запрос.УстановитьПараметр("Интеграция", 	Интеграция);
		
		РезультатЗапроса = Запрос.Выполнить();
		Если Не РезультатЗапроса.Пустой() Тогда
			Отказ             = Истина;
			СообщениеОбОшибке = НСтр("ru = 'Для организации, торгового объекта и способа оплаты уже задана торговая точка.'");
			ОтменитьТранзакцию();
			Возврат;
		КонецЕсли;
		
		Запись = РегистрыСведений.СоответствиеНастроекИнтеграцииРМК.СоздатьМенеджерЗаписи();
		
		Запись.Интеграция 	 					= Интеграция;
		Запись.Организация   					= Организация;
		Запись.ТорговыйОбъект   				= ТорговыйОбъект;
		Запись.СпособОплаты  	 				= СпособОплаты;
		
		Запись.ИдентификаторПлатежнойСистемы	= ИдентификаторПС;   
		
		Запись.Записать();
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'Настройка интеграции с платежными системами'", ОбщегоНазначения.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка,
			Метаданные.РегистрыСведений.СоответствиеНастроекИнтеграцииРМК,
			,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
		Отказ = Истина;
		СообщениеОбОшибке = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		
	КонецПопытки;
	
КонецПроцедуры

// Позволяет настроить элементы настройки приема оплат на формах подключения
// к Системе быстрых платежей.
//
// Параметры:
//  НастройкиФормы - Структура - содержит элементы формы и текущие значения реквизитов:
//    * ОбщиеЭлементы - Структура - общие настройки формы подключения к Системой быстрых платежей:
//      ** Наименование - Элемент - элемент формы, в котором заполняется наименование;
//    * ЭлементыНастроекОплаты - Структура - элементы формы настройки оплаты. Структура параметра
//        соответствует структуре регистра, который определяется в методе
//        ИнтеграцияСПлатежнымиСистемамиПереопределяемый.ПриОпределенииНастроекИнтеграции, за исключением
//        полей указанных в настройках в свойстве ИсключаемыеПоля.
//    * ЗначенияНастроекОплаты - Структура - текущее значение реквизитов настроек. Структура параметра
//        соответствует структуре регистра, который определяется в методе
//        ИнтеграцияСПлатежнымиСистемамиПереопределяемый.ПриОпределенииНастроекИнтеграции, за исключением
//        полей указанных в настройках в свойстве ИсключаемыеПоля:
//  ДополнительныеПараметры - Структура, Неопределено - дополнительные параметры настройки интеграции с
//    Системой быстрых платежей.
//
Процедура ПриНастройкеЭлементовФормыИнтеграции(НастройкиФормы, ДополнительныеПараметры) Экспорт

	ЭлементФормы 		  = НастройкиФормы.ЭлементыНастроекОплаты.СпособОплаты;
	
	ПараметрыВыбора		  = Новый Массив;

	НовыйПараметр = Новый ПараметрВыбора("Отбор.ТипОплаты", Перечисления.ТипыОплатЧекаККМ.ПлатежнаяСистема);
	ПараметрыВыбора.Добавить(НовыйПараметр);	

	НовыйПараметр = Новый ПараметрВыбора("Отбор.ПлатежнаяСистема", Перечисления.ТипыПлатежнойСистемыККТ.СистемаБыстрыхПлатежей);
	ПараметрыВыбора.Добавить(НовыйПараметр);	

	ЭлементФормы.ПараметрыВыбора 		= Новый ФиксированныйМассив(ПараметрыВыбора);
	
КонецПроцедуры

#КонецОбласти

#Область ПрикладныеОперации

// Определяются данные для формирования запроса на оплату в платежную систему SWiP.
// Перед оправкой запроса проверяется заполнение всех свойств заказа на оплату кроме:
//  - Идентификатор;
//  - Кассир.Имя;
//  - Кассир.Отчество;
//  - ТоварыУслуги.СуммаСкидки;
//  - ТоварыУслуги.Артикул.
//
// Параметры:
//  ДокументОплаты - ОпределяемыйТип.ДокументОперацииСБП - документ, который отражает
//                   продажу в информационной базе;
//  ЗаказНаОплату - Структура - содержит описание заказа на оплату в платежной системе SWiP:
//    *Кассир - Структура - информация о физическом лице или пользователе
//              выполнившего оплату:
//      **Фамилия - Строка - фамилия кассира;
//      **Имя - Строка - имя кассира;
//      **Отчество - Строка - отчество кассира;
//      **Идентификатор - Строка - идентификатор кассира в информационной базе;
//    *НомерДокумента - Строка - чека кассовой смены, который используется для формирования продажи;
//    *Идентификатор - Строка - идентификатор покупателя. Необходимо заполнять, если оплата
//                     производится по визитке покупателя;
//    *СуммаОплаты - Число - сумма оплаты в платежной системе. Сумма, которую необходимо
//                   списать со счета или карты покупателя;
//    *ДатаОплаты - Дата - дата операции оплаты;
//    *ТоварыУслуги - ТаблицаЗначений - содержит информацию об оплачиваемых товарах и услугах:
//      **Артикул - Строка - артикул производителя или поставщика;
//      **Наименование - Строка -  наименование номенклатуры;
//      **Количество - Число - число проданных товаров или услуг;
//      **ЕдиницаИзмерения - Строка - цифровой код единицы измерения по ОКЕИ;
//      **Цена - Число -  начальная цена номенклатуры;
//      **Сумма - Число - итоговая сумма позиции строки продажи;
//      **СуммаСкидки - Число - итоговая сумма скидки строки продажи;
//  ТорговаяТочка - СправочникСсылка.НастройкиПодключенияКСистемеБыстрыхПлатежей -
//                  настройка интеграции с платежной системой.
//
Процедура ПриФормированииЗаказаНаОплатуSWiP(ДокументОплаты, ЗаказНаОплату, ТорговаяТочка, ДокументОплатыСтруктура) Экспорт
	
	ЗаказНаОплату.Кассир.Фамилия       = Строка(Пользователи.ТекущийПользователь());
	ЗаказНаОплату.Кассир.Идентификатор = Строка(Пользователи.ТекущийПользователь().УникальныйИдентификатор());
	ЗаказНаОплату.ДатаОплаты           = ДокументОплатыСтруктура.Дата;
	ЗаказНаОплату.НомерДокумента       = ДокументОплатыСтруктура.НомерДокумента;
	ЗаказНаОплату.СуммаОплаты          = ДокументОплатыСтруктура.ИтогПоЧеку;
	
	Для Каждого Товар Из ДокументОплатыСтруктура.Товары Цикл 
		
		НовыйТовар = ЗаказНаОплату.ТоварыУслуги.Добавить();
		ЗаполнитьЗначенияСвойств(НовыйТовар, Товар);
		Если Не ЗначениеЗаполнено(НовыйТовар.ЕдиницаИзмерения) Тогда
			НовыйТовар.ЕдиницаИзмерения = "шт";
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Определяются данные для формирования запроса на возврат в платежную систему SWiP.
// Все поля переменной ЗаказНаВозврат обязательны для заполнения.
//
// Параметры:
//  ДокументВозврата - ОпределяемыйТип.ДокументОперацииСБП - документ, который отражает
//                     возврат в информационной базе;
//  ЗаказНаВозврат - Структура - содержит описание заказа на оплату в платежной системе SWiP:
//    *СуммаВозврата - Дата - дата операции возврата;
//  ТорговаяТочка - СправочникСсылка.НастройкиПодключенияКСистемеБыстрыхПлатежей -
//                  настройка интеграции с платежной системой.
//
Процедура ПриФормированииЗаказаНаВозвратSWiP(ДокументВозврата, ЗаказНаВозврат, ТорговаяТочка, ДокументВозвратаСтруктура) Экспорт
	
	ЗаказНаВозврат.СуммаВозврата  	= ДокументВозвратаСтруктура.ИтогПоЧеку;
	
КонецПроцедуры

// Определяются данные для формирования запроса на оплату в платежную систему СБП.
// Все поля переменной ЗаказНаОплату обязательны для заполнения.
//
// Параметры:
//  ДокументОплаты - ОпределяемыйТип.ДокументОперацииСБП - документ, который отражает
//                   продажу в информационной базе;
//  ЗаказНаОплату - Структура - содержит описание заказа на оплату в платежной системе СБП:
//    *СуммаОплаты - Число - сумма оплаты в платежной системе. Сумма, которую необходимо
//                   списать со счета или карты покупателя;
//    *ДатаОплаты - Дата - дата операции оплаты;
//    *СрокЖизниQRКода - Число - содержит значение срока действия QR-кода в целых минутах.
//                       Минимальное значение - 5 минут, максимальное значение - 129 600 минут
//                       (90 дней в минутах). В случае передачи значения не входящего в выше
//                       описанный диапазон возвращать ошибку "НеверныйФорматЗапроса".
//                       Если значение не предано используется стандартный срок использования СБП.
//    *НазначениеПлатежа - Строка - информация о платеже, которая будет отображена пользователю
//                         в момент сканирования QR-кода в мобильном приложении. Рекомендуется
//                         делать строку не длинной и включать информацию об организации, которая
//                         является получателем денежных средств, например: Оплата СБП 524,00 RUB ООО Ромашка
//                         Если строка не заполнена, будет передано стандартное представление
//                         назначения: Оплата СБП {ЗаказНаОплату.СуммаОплаты} RUB.
//                         Длина строки не должна превышать 140 символов, в противном случае будет
//                         обрезана принудительно. Система быстрых платежей имеет дополнительные требования
//                         к символам и их кодировке. Возможна передача следующих значений:
//                           - символы латинского алфавит (A-Z и a-z) с десятичными кодами из диапазона
//                             [065-090] и [091-122] в кодировке UTF-8;
//                           - символы русского алфавит (А-Я и а-я) с десятичными кодами из диапазона
//                             [065-090] и [091-122] в кодировке UTF-8;
//                           - цифры (0-9) с десятичными кодами из диапазона [048-057] в кодировке UTF-8;
//                           - специальные символы с десятичными кодами из диапазонов [032-047], [058-064],
//                             [091-096],[123-126] в кодировке UTF-8;
//                           - символ № под номером 8470 в кодировке UTF-8;
//  ТорговаяТочка - СправочникСсылка.НастройкиПодключенияКСистемеБыстрыхПлатежей -
//                  настройка интеграции с платежной системой.
//
Процедура ПриФормированииЗаказаНаОплатуСБП(ДокументОплаты, ЗаказНаОплату, ТорговаяТочка, ДокументОплатыСтруктура) Экспорт
	
	ЗаказНаОплату.СуммаОплаты     = ДокументОплатыСтруктура.ИтогПоЧеку;
	ЗаказНаОплату.ДатаОплаты      = ДокументОплатыСтруктура.Дата;
	
КонецПроцедуры

// Определяются данные для формирования запроса на возврат в платежную систему СБП.
// Все поля переменной ЗаказНаВозврат обязательны для заполнения.
//
// Параметры:
//  ДокументВозврата - ОпределяемыйТип.ДокументОперацииСБП - документ, который отражает
//                     возврат в информационной базе;
//  ЗаказНаВозврат - Структура - содержит описание заказа на возврат в платежной системе СБП:
//    *СуммаВозврата - Число - сумма возврата в платежной системе. Сумма, которую необходимо
//                     списать со счета или карты покупателя;
//    *ДатаВозврата - Дата - дата операции возврата;
//  ТорговаяТочка - СправочникСсылка.НастройкиПодключенияКСистемеБыстрыхПлатежей -
//                  настройка интеграции с платежной системой.
//
Процедура ПриФормированииЗаказаНаВозвратСБП(ДокументВозврата, ЗаказНаВозврат, ТорговаяТочка, ДокументВозвратаСтруктура) Экспорт
	
	ЗаказНаВозврат.ДатаВозврата  	= ДокументВозвратаСтруктура.Дата;
	ЗаказНаВозврат.СуммаВозврата 	= ДокументВозвратаСтруктура.ИтогПоЧеку;
	
КонецПроцедуры

Процедура ПриОпределенииДоступностиРегистрацииSWiP(Использовать) Экспорт
	
	Использовать = Истина;
	
КонецПроцедуры

Процедура ПриОпределенииДанныхОрганизацииSWiP(Организация, ДанныеОрганизации) Экспорт
	
	Если ТипЗнч(Организация) = Тип("СправочникСсылка.Организации") Тогда
		
		Запрос = Новый Запрос;
		
		Запрос.Текст = 
		 "ВЫБРАТЬ
		 |	Организации.НаименованиеПолное КАК Наименование,
		 |	Организации.ИНН КАК ИНН,
		 |	Организации.КПП КАК КПП,
		 |	Организации.КодПоОКПО КАК ОКПО,
		 |	Организации.ОГРН КАК ОГРН,
		 |	ФИОФизЛиц.Фамилия + "" "" + ФИОФизЛиц.Имя + "" "" + ФИОФизЛиц.Отчество КАК ФИОРуководителя
		 |ИЗ
		 |	РегистрСведений.ОтветственныеЛицаОрганизаций КАК ОтветственныеЛицаОрганизаций
		 |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Организации КАК Организации
		 |		ПО ОтветственныеЛицаОрганизаций.СтруктурнаяЕдиница = Организации.Ссылка
		 |			И (ОтветственныеЛицаОрганизаций.ОтветственноеЛицо = ЗНАЧЕНИЕ(Перечисление.ОтветственныеЛицаОрганизаций.Руководитель))
		 |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизЛиц КАК ФИОФизЛиц
		 |		ПО ОтветственныеЛицаОрганизаций.ФизическоеЛицо = ФИОФизЛиц.ФизЛицо
		 |ГДЕ
		 |	Организации.Ссылка = &Организация";
		Запрос.УстановитьПараметр("Организация", Организация);
		РезультатЗапроса = Запрос.Выполнить();
		
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		ВыборкаДетальныеЗаписи.Следующий();
		
		ЗаполнитьЗначенияСвойств(ДанныеОрганизации, ВыборкаДетальныеЗаписи);
		ДанныеОрганизации.ОКВЭД = "52";
		
		Дата = Дата(1, 1, 1, 0, 0, 0);
		
		// Разобрать контактную информацию
		ДанныеОрганизации.ЮридическийАдрес = УправлениеКонтактнойИнформацией.ПредставлениеКонтактнойИнформацииОбъекта(
		Организация,
		Справочники.ВидыКонтактнойИнформации.ЮрАдресОрганизации,, Дата);
		ДанныеОрганизации.ФактическийАдрес = УправлениеКонтактнойИнформацией.ПредставлениеКонтактнойИнформацииОбъекта(
		Организация,
		Справочники.ВидыКонтактнойИнформации.ФактАдресОрганизации,, Дата);
		ДанныеОрганизации.ПочтовыйАдрес = УправлениеКонтактнойИнформацией.ПредставлениеКонтактнойИнформацииОбъекта(
		Организация,
		Справочники.ВидыКонтактнойИнформации.ПочтовыйАдресОрганизации,, Дата);
		ДанныеОрганизации.ЭлектроннаяПочта = УправлениеКонтактнойИнформацией.ПредставлениеКонтактнойИнформацииОбъекта(
		Организация,
		Справочники.ВидыКонтактнойИнформации.EmailОрганизации,, Дата);
		ДанныеОрганизации.Телефон = УправлениеКонтактнойИнформацией.ПредставлениеКонтактнойИнформацииОбъекта(
		Организация,
		Справочники.ВидыКонтактнойИнформации.ТелефонОрганизации,, Дата);
		
		ДанныеОрганизации.ДатаРегистрации = ТекущаяДата();
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриОпределенииДанныхБанковскогоСчетаSWiP(БанковскийСчет, ДанныеБанковскогоСчета) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	БанковскиеСчета.НомерСчета КАК НомерСчета,
		|	БанковскиеСчета.Банк.КоррСчет КАК НомерКоррСчета,
		|	БанковскиеСчета.Банк.Код КАК БИК,
		|	БанковскиеСчета.Банк.Наименование КАК НаименованиеБанка
		|ИЗ
		|	Справочник.БанковскиеСчета КАК БанковскиеСчета
		|ГДЕ
		|	БанковскиеСчета.Ссылка = &БанковскийСчет";
	
	Запрос.УстановитьПараметр("БанковскийСчет", БанковскийСчет);
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	ВыборкаДетальныеЗаписи.Следующий();
	
	ЗаполнитьЗначенияСвойств(ДанныеБанковскогоСчета, ВыборкаДетальныеЗаписи);
	
КонецПроцедуры

// Проверяет документ операции, в случае ошибки вызывает исключение.
//
// Параметры:
//  ДокументОплаты - ОпределяемыйТип.ДокументОперацииСБП - документ, который отражает
//                   оплату в информационной базе;
//
Процедура ПередВыполнениемОперацииВПлатежнойСистеме(ДокументОперации)
	
	Если ТипЗнч(ДокументОперации) <> Тип("ДокументСсылка.ЧекККМ") Или Не ЗначениеЗаполнено(ДокументОперации) Тогда
		ВызватьИсключение НСтр("ru = 'Операция в платежной системе для документа не поддерживается.'");
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область РМК

// Определяет доступность операций для торговой точки. В сценариях оплаты
// различных платежных систем существуют отличия, поэтому ряд операций могут
// быть запрещены для выполнения. Метод следует использовать для настройки
// элементов форм оплаты и возвратов и получение общих настроек интеграции.
//
// Параметры:
//  Интеграция - СправочникСсылка.НастройкиПодключенияКСистемеБыстрыхПлатежей -
//                  настройка выполнения операции платежной системы.
//
// Возвращаемое значение:
//  Структура - информация о доступных операциях:
//    *СрокЖизниQRКода - Булево - признак доступности установки максимального
//                       срока действия QR-кода;
//    *ПлатежнаяСсылка - Булево - признак доступности использования платежной ссылки
//                       для выполнения оплаты;
//    *ВыборПлатежнойСистемыВозврата - Булево - признак доступности возврата оплаты
//                                     в платежную систему отличную от исходной. Для
//                                     получения списка доступных платежных систем следует 
//                                     использовать метод ПереводыСБПc2b.ПлатежныеСистемыВозврата;
//    *Идентификатор - Строка - строковый идентификатор платежной системы или участника СБП;
//    *СинонимСистемы - Строка - синоним платежной системы для печати.
//
Функция ЗаполнитьНастройкиТорговойТочки(НастройкиИнтеграции, Интеграция) Экспорт

	Если ТипЗнч(Интеграция) = Тип("СправочникСсылка.НастройкиПодключенияКСистемеБыстрыхПлатежей") Тогда
		
		НастройкиТорговойТочки = ИнтеграцияСПлатежнымиСистемамиРТВызовСервера.НастройкиТорговойТочки(Интеграция);
		
		ЗаполнитьЗначенияСвойств(НастройкиИнтеграции, НастройкиТорговойТочки);

	ИначеЕсли ТипЗнч(Интеграция) = Тип("СправочникСсылка.НастройкиОнлайнОплат") Тогда

		НастройкиИнтеграции.СрокЖизниQRКода 				= Истина;
		НастройкиИнтеграции.ПлатежнаяСсылка 				= Истина;  
		НастройкиИнтеграции.ЗаписыватьДокументПередОплатой  = Истина;
		НастройкиИнтеграции.СинонимСистемы 					= НСтр("ru = 'ЮKassa'");
		НастройкиИнтеграции.Идентификатор 					= "ЮКасса";
		
	КонецЕсли;	
	
	Возврат НастройкиИнтеграции;
	
КонецФункции

Процедура ЗаполнитьТаблицуРолейПользователя(Форма) Экспорт
	
	ТекущийПользователь 									 = Форма.Объект.ПользовательБД;
	РазрешитьОплатуВозвратБезПодтвержденияОтПлатежнойСистемы = УправлениеПользователями.ПолучитьБулевоЗначениеПраваПользователя(
																	ПланыВидовХарактеристик.ПраваПользователей.РазрешитьОплатуВозвратБезПодтвержденияОтПлатежнойСистемы,
																	Ложь,
																	ТекущийПользователь);
			
	Если РазрешитьОплатуВозвратБезПодтвержденияОтПлатежнойСистемы Тогда
		Форма.СписокРолейПользователя.Добавить(НСтр("ru = 'РазрешитьОплатуВозвратБезПодтвержденияОтПлатежнойСистемы'"));
	КонецЕсли;
			
КонецПроцедуры

#КонецОбласти

// Формирование QR-кода для оплаты в платежной системе.
//
// Параметры:
//  ПараметрыПроцедуры - Структура - параметры выполнения длительной операции;
//  АдресРезультата - Строка - адрес результата операции во временном хранилище.
//
Процедура ИдентификаторОплатыВПлатежнойСистеме(ПараметрыПроцедуры, АдресРезультата) Экспорт
	
	Перем КассоваяСсылка;
	
	ПередВыполнениемОперацииВПлатежнойСистеме(
		ПараметрыПроцедуры.ДокументОплаты);
		
	Если ПараметрыПроцедуры.Свойство("КассоваяСсылка", КассоваяСсылка)
		И ЗначениеЗаполнено(КассоваяСсылка) Тогда

		ИдентификаторыЗаказа    = Новый Структура("КассоваяСсылка, ИдентификаторОплаты");
		ЗаполнитьЗначенияСвойств(ИдентификаторыЗаказа, ПараметрыПроцедуры);
			
		РезультатОперации 		= ПереводыСБПc2b.АктивироватьКассовуюСсылку(
			ПараметрыПроцедуры.ДокументОплаты,
			ПараметрыПроцедуры,
			ПараметрыПроцедуры.Интеграция,
			ПараметрыПроцедуры);

		РезультатОперации.Вставить("QRКод", 		 КассоваяСсылка);      
		РезультатОперации.Вставить("КассоваяСсылка", ИдентификаторыЗаказа);      
		РезультатОперации.Вставить("ОтменаЗаказа",   ИдентификаторыЗаказа);      
				
	Иначе
			
		РезультатОперации = ПереводыСБПc2b.ДинамическаяСсылка(
			ПараметрыПроцедуры.ДокументОплаты,
			ПараметрыПроцедуры.Интеграция,
			ПараметрыПроцедуры);
		
		РезультатОперации.Вставить("QRКод", РезультатОперации.ПлатежнаяСсылка);
		
	КонецЕсли;
	
	Если ТипЗнч(РезультатОперации) = Тип("Структура") Тогда
		РезультатОперации.Вставить("ДокументОплаты", ПараметрыПроцедуры.ДокументОплаты);
	КонецЕсли;
		
	ПоместитьВоВременноеХранилище(РезультатОперации, АдресРезультата);
	
КонецПроцедуры

// Определяет статус оплаты в платежной системе.
//
// Параметры:
//  ДокументОплаты - ОпределяемыйТип.ДокументОплатыБИП - документ, который отражает
//                    продажу в информационной базе;
//
// Возвращаемое значение:
//  Структура
//
Процедура СтатусОплатыВПлатежнойСистеме(ПараметрыПроцедуры, АдресРезультата) Экспорт

	Перем ПараметрыОперации, СуммаОперации;
	
	ПередВыполнениемОперацииВПлатежнойСистеме(
		ПараметрыПроцедуры.ДокументОплаты);
	
	Интеграция = ПараметрыПроцедуры.Интеграция;

 	РезультатОперации =  ПереводыСБПc2b.СтатусОплаты(ПараметрыПроцедуры.ДокументОплаты, Интеграция);
	
	Если ТипЗнч(РезультатОперации) = Тип("Структура") Тогда
		
		Если Не РезультатОперации.Свойство("ПараметрыОперации", ПараметрыОперации)
			ИЛИ Не ПараметрыОперации.Свойство("СуммаОперации", СуммаОперации)
			ИЛИ Не ЗначениеЗаполнено(СуммаОперации) Тогда
			СуммаОперации = СуммаОперации(ПараметрыПроцедуры.ДокументОплаты);
		КонецЕсли;
		
		РезультатОперации.Вставить("СуммаОперации", СуммаОперации);
		
	КонецЕсли;		
	
	ПоместитьВоВременноеХранилище(РезультатОперации, АдресРезультата);
	
КонецПроцедуры

// Отменяет заказ на оплату, если оплата не была ранее подтверждена мерчантом.
//
// Параметры:
//  ДокументОплаты - ОпределяемыйТип.ДокументОплатыБИП - документ, который отражает
//                    продажу в информационной базе;
//
// Возвращаемое значение:
//  Структура
//
Функция ОтменитьЗаказНаОплату(ПараметрыПроцедуры) Экспорт
	
	ПередВыполнениемОперацииВПлатежнойСистеме(ПараметрыПроцедуры.ДокументОплаты);
	
	РезультатОперации = Новый Структура;
	РезультатОперации.Вставить("КодОшибки", "");
	РезультатОперации.Вставить("СообщениеОбОшибке",  "");
	РезультатОперации.Вставить("ИнформацияОбОшибке", "");
	
	Возврат РезультатОперации;
	
КонецФункции

// Отменяет оплату в платежной системе, если денежные средства еще не были перечислены мерчанту.
//
// Параметры:
//  ДокументОплаты - ОпределяемыйТип.ДокументОплатыБИП - документ, который отражает
//                    продажу в информационной базе;
//
// Возвращаемое значение:
//  Структура
//
Функция ОтменитьОплату(ПараметрыПроцедуры) Экспорт
	
	ПередВыполнениемОперацииВПлатежнойСистеме(ПараметрыПроцедуры.ДокументОплаты);
	
	РезультатОперации = Новый Структура;
	РезультатОперации.Вставить("КодОшибки", "");
	РезультатОперации.Вставить("СообщениеОбОшибке",  "");
	РезультатОперации.Вставить("ИнформацияОбОшибке", "");
	
	Возврат РезультатОперации;
	
КонецФункции

Процедура ВозвратОплаты(ПараметрыПроцедуры, АдресРезультата) Экспорт
	
	ПередВыполнениемОперацииВПлатежнойСистеме(
		ПараметрыПроцедуры.ДокументВозврата);
	
	Интеграция 				= ПараметрыПроцедуры.Интеграция;
	
	РезультатОперации = ПереводыСБПc2b.ВозвратОплаты(
		ПараметрыПроцедуры.ДокументВозврата,
		?(ЗначениеЗаполнено(ПараметрыПроцедуры.ИдентификаторОплаты),
			ПараметрыПроцедуры.ИдентификаторОплаты,
			ПараметрыПроцедуры.ДокументОплаты),
		ПараметрыПроцедуры.Интеграция,
		ПараметрыПроцедуры.ПлатежнаяСистема,
		ПараметрыПроцедуры);
	
	Если ТипЗнч(РезультатОперации) = Тип("Структура") Тогда
		РезультатОперации.Вставить("ДокументВозврата", ПараметрыПроцедуры.ДокументВозврата);
	КонецЕсли;
		
	ПоместитьВоВременноеХранилище(РезультатОперации, АдресРезультата);
	
КонецПроцедуры

// Производит получение статуса возврата по документу.
//
// Параметры:
//  ПараметрыПроцедуры - Структура - параметры выполнения длительной операции;
//  АдресРезультата - Строка - адрес результата операции во временном хранилище.
//
Процедура СтатусВозвратОплаты(ПараметрыПроцедуры, АдресРезультата) Экспорт
	
	ПередВыполнениемОперацииВПлатежнойСистеме(
		ПараметрыПроцедуры.ДокументВозврата);
	
	РезультатОперации = ПереводыСБПc2b.СтатусВозврата(
		ПараметрыПроцедуры.ДокументВозврата,
		ПараметрыПроцедуры.Интеграция);
	
	Если ТипЗнч(РезультатОперации) = Тип("Структура") Тогда
		РезультатОперации.Вставить("СуммаОперации", СуммаОперации(ПараметрыПроцедуры.ДокументВозврата));
	КонецЕсли;		
	
	ПоместитьВоВременноеХранилище(РезультатОперации, АдресРезультата);
	
КонецПроцедуры

// Подтверждает возврат в платежной системе.
//
// Параметры:
//  ДокументОплаты - ОпределяемыйТип.ДокументОперацииСБП - документ, который отражает
//                   оплату в информационной базе;
//  Интеграция - СправочникСсылка.НастройкиПодключенияКСистемеБыстрыхПлатежей -
//                  настройка выполнения операции платежной системы.
//
// Возвращаемое значение:
//  Структура - см. ПереводыСБПc2b.ПодтвердитьВозврат.
//
Функция ПодтвердитьВозврат(ДокументВозврата, Интеграция) Экспорт
	
	ПередВыполнениемОперацииВПлатежнойСистеме(
		ДокументВозврата);
	
	Возврат ПереводыСБПc2b.ПодтвердитьВозврат(ДокументВозврата, Интеграция);
	
КонецФункции

Функция ПолучитьСсылкуНовогоЧекаККМ() Экспорт
	
	НовыйУникальныйИдентификаторДокументаЧек = Новый УникальныйИдентификатор();
	ЧекСсылка = Документы.ЧекККМ.ПолучитьСсылку(НовыйУникальныйИдентификаторДокументаЧек);
	
	СтруктураДанныхДокумента = Новый Структура();
	СтруктураДанныхДокумента.Вставить("ЧекККМВОбработке", ЧекСсылка);
	СтруктураДанныхДокумента.Вставить("НовыйЧек", 		  Истина);
	
	Возврат СтруктураДанныхДокумента;
	
КонецФункции

Функция ПолучитьСсылочныйНомерЧека(ЧекККМ) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЧекККМОплата.СсылочныйНомер КАК СсылочныйНомер
	|ИЗ
	|	Документ.ЧекККМ.Оплата КАК ЧекККМОплата
	|ГДЕ
	|	ЧекККМОплата.Ссылка = &ЧекККМ
	|	И ЧекККМОплата.ВидОплаты.ТипОплаты = ЗНАЧЕНИЕ(Перечисление.ТипыОплатЧекаККМ.ПлатежнаяСистема)";
	
	Запрос.УстановитьПараметр("ЧекККМ", ЧекККМ);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		СсылочныйНомер = Выборка.СсылочныйНомер;
	Иначе
		СсылочныйНомер = "";
	КонецЕсли;
	
	Возврат СсылочныйНомер;
	
КонецФункции

Функция ИдентификаторыОперацииОплаты(Интеграция, ДокументОплаты) Экспорт
	
	ИдентификаторОплаты = ПереводыСБПc2b.ИдентификаторыОперацииОплаты(ДокументОплаты);
	
	Возврат ИдентификаторОплаты;
	
КонецФункции

Функция ПолучитьПараметрыДокументаОплаты(ДокументОплаты) Экспорт
	
	#Область ТекстЗапросаКБазеДанных
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	Т.ВидОплаты КАК ВидОплаты,
	|	Т.СсылочныйНомер КАК СсылочныйНомер,
	|	Т.Ссылка.Организация КАК Организация,
	|	Т.ИдентификаторПлатежнойСистемы КАК ИдентификаторПлатежнойСистемы
	|ИЗ
	|	Документ.ЧекККМ.Оплата КАК Т
	|ГДЕ
	|	Т.Ссылка = &ДокументОплаты
	|	И Т.ВидОплаты.ТипОплаты = ЗНАЧЕНИЕ(Перечисление.ТипыОплатЧекаККМ.ПлатежнаяСистема)";
	#КонецОбласти
	
	ПараметрыВозврата = Новый Структура("ИдентификаторОплаты, ВидОплатыВозврата, Организация, ИдентификаторПС");
	
	Если ЗначениеЗаполнено(ДокументОплаты)
		И ОбщегоНазначения.СсылкаСуществует(ДокументОплаты) Тогда
			
		Запрос = Новый Запрос(ТекстЗапроса);
		Запрос.УстановитьПараметр("ДокументОплаты", ДокументОплаты);
			
		Выборка = Запрос.Выполнить().Выбрать();
			
		Если Выборка.Следующий() Тогда
				
			ПараметрыВозврата.ВидОплатыВозврата 	= Выборка.ВидОплаты;
			ПараметрыВозврата.ИдентификаторОплаты	= Выборка.СсылочныйНомер;
			ПараметрыВозврата.Организация			= Выборка.Организация;
			ПараметрыВозврата.ИдентификаторПС		= Выборка.ИдентификаторПлатежнойСистемы;
				
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ПараметрыВозврата;
	
КонецФункции

// Отменяет все выполняемые действия с операций платежной системой на форме
//
// Параметры:
//  ПараметрыОтмены - Структура - параметры выполнения длительной операции;
//  	*ДокументОплаты - ОпределяемыйТип.ДокументОплатыБИП - документ, который отражает
//                    продажу в информационной базе;
//  	*Интеграция - СправочникСсылка.НастройкиПодключенияКСистемеБыстрыхПлатежей -
//                  настройка интеграции с платежной системой;
//  	*НастройкиТорговойТочки - Структура - информация о доступных операциях:
//  	*ИдентификаторЗаданияФормированияQRКода - УникальныйИдентификатор - идентификатор 
//  																   длительной операции по формированию qr-кода
//  	*ИдентификаторЗаданияПроверкиСтатуса - УникальныйИдентификатор    - идентификатор 
//  															       длительной операции по проверки статуса оплаты
//  	*ИдентификаторЗаданияВозврата - УникальныйИдентификатор           - идентификатор 
//  АдресРезультата - Строка - адрес результата операции во временном хранилище.
//
Процедура ОтменитьОперациюВФоне(ПараметрыОтмены, АдресРезультата) Экспорт
	
	// Перед отменой нужно определить статус оплаты.
	РезультатОперации  = ПереводыСБПc2b.СтатусОплаты(ПараметрыОтмены.ДокументОплаты, ПараметрыОтмены.Интеграция, Ложь);
	
	// В зависимости от статуса оплаты выполняется соответствующая операция.
	Если РезультатОперации.СтатусОперации = "Выполняется" Тогда
		
		Если ПараметрыОтмены.НастройкиИнтеграции.ОтменаЗаказа Тогда
		
			Результат = ПереводыСБПc2b.ДеактивироватьКассовуюСсылку(
				ПараметрыОтмены.НастройкиИнтеграции.ОтменаЗаказаДанные, 
				ПараметрыОтмены.Интеграция);
				
		ИначеЕсли ТипЗнч(ПараметрыОтмены.Интеграция) = Тип("СправочникСсылка.НастройкиПодключенияКСистемеБыстрыхПлатежей") Тогда
			ПереводыСБПc2b.УдалитьИдентификаторыОперации(ПараметрыОтмены.ДокументОплаты);
		КонецЕсли;
			
	КонецЕсли;
	
	ПоместитьВоВременноеХранилище(Результат, АдресРезультата);
	
КонецПроцедуры

// Отменяет все выполняемые действия с операций платежной системой на форме
//
// Параметры:
//  ДокументОплаты - ОпределяемыйТип.ДокументОплатыБИП - документ, который отражает
//                    продажу в информационной базе;
//  Интеграция - СправочникСсылка.НастройкиПодключенияКСистемеБыстрыхПлатежей -
//                  настройка интеграции с платежной системой;
//  НастройкиИнтеграции - Структура - информация о доступных операциях:
//  ИдентификаторЗаданияФормированияQRКода - УникальныйИдентификатор - идентификатор длитеьной операции по формированию qr-кода
//  ИдентификаторЗаданияПроверкиСтатуса - УникальныйИдентификатор - идентификатор длитеьной операции по проверки статуса оплаты
//  ИдентификаторЗаданияВозврата - УникальныйИдентификатор - идентификатор длитеьной операции по проверке статуса возврата
//
// Возвращаемое значение:
//  Структура
//
Функция ОтменитьОперацию(ДокументОплаты, Интеграция, НастройкиИнтеграции, ИдентификаторЗаданияФормированияQRКода, ИдентификаторЗаданияПроверкиСтатуса, ИдентификаторЗаданияВозврата) Экспорт
	
	Если ЗначениеЗаполнено(ИдентификаторЗаданияФормированияQRКода) Тогда
		ДлительныеОперации.ОтменитьВыполнениеЗадания(
			ИдентификаторЗаданияФормированияQRКода);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ИдентификаторЗаданияВозврата) Тогда
		ДлительныеОперации.ОтменитьВыполнениеЗадания(
			ИдентификаторЗаданияВозврата);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ИдентификаторЗаданияПроверкиСтатуса) Тогда
		ДлительныеОперации.ОтменитьВыполнениеЗадания(
			ИдентификаторЗаданияПроверкиСтатуса);
	КонецЕсли;
	
	РезультатОперации = Новый Структура;
	РезультатОперации.Вставить("КодОшибки", "");
	РезультатОперации.Вставить("СообщениеОбОшибке",  "");
	РезультатОперации.Вставить("ИнформацияОбОшибке", "");
	
	Возврат РезультатОперации;
	
КонецФункции

// Возвращает текст запроса для получения подключенных настроек интеграция в регистре "Соответствие настроек интеграции"
//
//  ИдентификаторПлатежнойСистемы - строка - отбор по идентификатору платежной системы
//
// ВозвращаемоеЗначение:
//  Строка - текст запроса.
//
Функция ТекстЗапросаНастройкиИнтеграции(ИдентификаторПлатежнойСистемы = Неопределено) Экспорт
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ДоступныеИнтеграции.Организация КАК Организация,
	|	ДоступныеИнтеграции.СпособОплаты КАК ВидОплаты,
	|	ДоступныеИнтеграции.СпособОплаты КАК СпособОплаты,
	|	ПРЕДСТАВЛЕНИЕССЫЛКИ(ДоступныеИнтеграции.СпособОплаты) КАК Представление,
	|	ДоступныеИнтеграции.СпособОплаты.ТипОплаты КАК ТипОплаты,
	|	ДоступныеИнтеграции.Интеграция КАК Интеграция,
	|	ЗНАЧЕНИЕ(Перечисление.ТипыПлатежнойСистемыККТ.СистемаБыстрыхПлатежей) КАК ПлатежнаяСистема,
	|	ДоступныеИнтеграции.ИдентификаторПлатежнойСистемы КАК ИдентификаторПС
	|ИЗ
	|	РегистрСведений.СоответствиеНастроекИнтеграцииРМК КАК ДоступныеИнтеграции
	|ГДЕ
	|	ДоступныеИнтеграции.ТорговыйОбъект = &ТорговыйОбъект
	|	И ДоступныеИнтеграции.Организация В(&Организация)
	|	И &ИдентификаторПлатежнойСистемы
	|	И ЛОЖЬ";

	
	Если ИдентификаторПлатежнойСистемы = Неопределено Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ИдентификаторПлатежнойСистемы", "ИСТИНА");
	Иначе
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ИдентификаторПлатежнойСистемы", "ДоступныеИнтеграции.СпособОплаты = &ИдентификаторПлатежнойСистемы");
	КонецЕсли;
	
	Возврат ТекстЗапроса;
	
КонецФункции

// Определяет вид оплаты по настройке интеграции.
//
// Параметры:
//  Интеграция - СправочникСсылка.НастройкиПодключенияКСистемеБыстрыхПлатежей - настройка интеграции с платежной системой.
//
// Возвращаемое значение:
//  Организация - СправочникСсылка.Организации - организация,
//  Магазин - СправочникСсылка.Магазины - магазин,
//  ВидОплаты - СправочникСсылка.КассыККМ - касса ККМ.
//
Функция ПараметрыИнтеграции(Интеграция) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СоответствиеНастроекИнтеграции.Организация КАК Организация,
	|	СоответствиеНастроекИнтеграции.ТорговыйОбъект КАК Магазин,
	|	СоответствиеНастроекИнтеграции.СпособОплаты КАК ВидОплаты
	|ИЗ
	|	РегистрСведений.СоответствиеНастроекИнтеграцииРМК КАК СоответствиеНастроекИнтеграции
	|ГДЕ
	|	СоответствиеНастроекИнтеграции.Интеграция = &Интеграция";
	
	Запрос.УстановитьПараметр("Интеграция", Интеграция);
	
	РезультатЗапроса 		= Запрос.Выполнить();
	ВыборкаДетальныеЗаписи 	= РезультатЗапроса.Выбрать();
	
	Структура = Новый Структура;
	Структура.Вставить("Организация");
	Структура.Вставить("Магазин");
	Структура.Вставить("ВидОплаты");
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		
		Структура.Организация 	= ВыборкаДетальныеЗаписи.Организация;
		Структура.Магазин 		= ВыборкаДетальныеЗаписи.Магазин;
		Структура.ВидОплаты 	= ВыборкаДетальныеЗаписи.ВидОплаты;
		
		Возврат Структура;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

// Определяет настройку интеграции с платежными системами на основании
// данных продажи / возврата
//
// Параметры:
//  Организация - Справочник.Организации - организация из документа продажи;
//  Магазин - Справочник.Мгазины - касса из документа продажи;
//  ВидОплаты - Справочник.ВидыОплатЧекаККМ - вид оплаты для возврата.
//
// Возвращаемое значение:
//  ТаблицаЗначений - настройки интеграции с платежной системой.
//
Функция НастройкиИнтеграции(Организация, Магазин, ВидОплаты = Неопределено) Экспорт
	
	Интеграции  = РегистрыСведений.СоответствиеНастроекИнтеграцииРМК.НастройкиИнтеграции(Организация, Магазин);
		
	Если ВидОплаты <> Неопределено
		И Интеграции <> Неопределено Тогда

		Интеграции = Интеграции.Скопировать(Новый Структура("ВидОплаты", ВидОплаты));
		
	КонецЕсли;
		
	Возврат Интеграции;
	
КонецФункции

// см. ИнтеграцияСПлатежнымиСистемамиРМКПереопределяемый.ПолучитьНастройкиКассовогоQRКода
Процедура ПолучитьНастройкиКассовогоQRКода(КассаККМ, ИспользоватьКассовыйQRКод, СпособыОплаты) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	ИспользоватьКассовыйQRКод = Истина;    
	
	Если ЗначениеЗаполнено(КассаККМ) Тогда
		НастройкаКассыККМ = ОбщегоНазначения.ПрочитатьДанныеИзБезопасногоХранилища(КассаККМ, "КассовыеСсылкиСБП");
	КонецЕсли;

	Если НастройкаКассыККМ <> Неопределено Тогда
		СпособыОплаты		  	  = НастройкаКассыККМ.СпособыОплаты;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

#Область ФормаОплаты

Процедура ПриСозданииНаСервере(Форма, Отказ, СтандартнаяОбработка) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ПереданныеПараметры = ИнтеграцияСПлатежнымиСистемамиРТКлиентСервер.ПараметрыИнициализации();
	
	ЗаполнитьЗначенияСвойств(ПереданныеПараметры, Форма.Параметры);
	
	НастройкиИнтеграции = РегистрыСведений.СоответствиеНастроекИнтеграцииРМК.НастройкиИнтеграции(ПереданныеПараметры.Организация, ПереданныеПараметры.Магазин);
	
	Если НастройкиИнтеграции <> Неопределено Тогда
		
		Если Не ЗначениеЗаполнено(ПереданныеПараметры.ДокументВозврата)
			И ЗначениеЗаполнено(ПереданныеПараметры.ДокументОплаты)
			И ОбщегоНазначения.СсылкаСуществует(ПереданныеПараметры.ДокументОплаты)
			И ИнтеграцияСПлатежнымиСистемамиРТСервер.СуммаОперации(ПереданныеПараметры.ДокументОплаты) > 0 Тогда
			ПереданныеПараметры.Оплачивается = Истина;
		КонецЕсли;
			
		Если ЗначениеЗаполнено(ПереданныеПараметры.ДокументВозврата)
			И ОбщегоНазначения.СсылкаСуществует(ПереданныеПараметры.ДокументВозврата)
			И ИнтеграцияСПлатежнымиСистемамиРТСервер.СуммаОперации(ПереданныеПараметры.ДокументВозврата) > 0 Тогда
			ПереданныеПараметры.Оплачивается = Истина;
		КонецЕсли;
			
		ПараметрыВозврата = ПолучитьПараметрыДокументаОплаты(ПереданныеПараметры.ДокументОплаты);
		
		ЗаполнитьЗначенияСвойств(ПереданныеПараметры, ПараметрыВозврата);
		
		Если ЗначениеЗаполнено(ПараметрыВозврата.ВидОплатыВозврата)
			И НастройкиИнтеграции.Найти(ПараметрыВозврата.ВидОплатыВозврата, "ВидОплаты") <> Неопределено Тогда
			НастройкиИнтеграции = НастройкиИнтеграции.Скопировать(Новый Структура("ВидОплаты", ПараметрыВозврата.ВидОплатыВозврата));
		КонецЕсли;
		
		Для Каждого СтрокаНастроек ИЗ НастройкиИнтеграции Цикл
			
			СтрокаВидыОплат = Форма.ВидыОплат.Добавить();
			
			ЗаполнитьЗначенияСвойств(СтрокаВидыОплат, СтрокаНастроек);
			
			СтрокаВидыОплат.Представление = Строка(СтрокаВидыОплат.ВидОплаты);
			
		КонецЦикла;
		
		Если ПереданныеПараметры.ВидОперации = Перечисления.ВидыОперацийЧекККМ.Возврат Тогда
				
			Для Каждого СтрокаВидОплаты ИЗ Форма.ВидыОплат Цикл
				Форма.Элементы.ВидОплатыПлатежнойСистемы.СписокВыбора.Добавить(СтрокаВидОплаты.ВидОплаты);
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
	#Область НастройкаФормы
	Если Форма.ВидыОплат.Количество() > 0 Тогда
		
		Форма.Элементы.ФормаЗавершитьОплату.КнопкаПоУмолчанию	= Истина;
		
		Если Форма.ВидыОплат.Количество() = 1 Тогда
			ПереданныеПараметры.Вставить("ВидОплатыПлатежнойСистемы", Форма.ВидыОплат[0].ВидОплаты);
		КонецЕсли;
		
	КонецЕсли;
	#КонецОбласти
	
	#Область ПраваПользователей
	ПереданныеПараметры.РазрешитьОплатуВозвратБезПодтвержденияОтПлатежнойСистемы = 
		УправлениеПользователями.ПолучитьБулевоЗначениеПраваПользователя(
			ПланыВидовХарактеристик.ПраваПользователей.РазрешитьОплатуВозвратБезПодтвержденияОтПлатежнойСистемы,
			Ложь,
			ОбщегоНазначенияРТ.ПользовательСУчетомИзмененныхПрав());
			
	#КонецОбласти
	
	Товары = Новый Массив;
	
	Если Форма.Параметры.Свойство("Товары") Тогда
		
		Для Каждого Товар Из Форма.Параметры.Товары Цикл
			
			НовыйТовар = ИнтеграцияСПлатежнымиСистемамиРТКлиентСервер.СтрокаТоваров();
			ЗаполнитьЗначенияСвойств(НовыйТовар, Товар);
			
			НовыйТовар.ЕдиницаИзмерения = Товар.Номенклатура.ЕдиницаИзмерения;
			НовыйТовар.СуммаСкидки 		= Товар.СуммаРучнойСкидки + Товар.СуммаАвтоматическойСкидки;
			НовыйТовар.Наименование 	= Товар.Номенклатура.Наименование;
			НовыйТовар.Артикул 			= Товар.Номенклатура.Артикул;
			
			Товары.Добавить(НовыйТовар);
			
		КонецЦикла;
		
	КонецЕсли;
	
	ИнтеграцияСПлатежнымиСистемамиРТКлиентСервер.ИнициализироватьПараметры(Форма, ПереданныеПараметры, Форма.ВидыОплат, Товары);
	
КонецПроцедуры

// Определяет сумму, по который была выполнена последняя операции в платежной системе.
// Метод следует использовать для отложенного получения статуса выполнения операции.
//
// Параметры:
//  ДокументОперации - ОпределяемыйТип.ДокументОперацииСБП - документ оплаты или возврата,
//                   по которому были выполнены операции в платежных системах;
//
// Возвращаемое значение:
//  СуммаОплаты  - число - Сумма последней операции с платежной системой
//
Функция СуммаОперации(ДокументОперации) Экспорт
	
	СуммаОплаты = 0;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ДанныеОперацийСБП.СуммаОперации КАК СуммаОперации
	|ИЗ
	|	РегистрСведений.ДанныеОперацийСБПc2b КАК ДанныеОперацийСБП
	|ГДЕ
	|	ДанныеОперацийСБП.ДокументОперации = &ДокументОперации
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДанныеОперацийСБП.ДатаОперации УБЫВ";
	
	Запрос.УстановитьПараметр("ДокументОперации", ДокументОперации);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		СуммаОплаты = ВыборкаДетальныеЗаписи.СуммаОперации;
	КонецЕсли;
	
	Возврат СуммаОплаты;
	
КонецФункции

#КонецОбласти

#КонецОбласти
