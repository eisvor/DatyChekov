// Конвертация 1С:Кладовщик от 22.06.2020 13:15:07
#Область ПроцедурыКонвертации
Процедура ПередКонвертацией(КомпонентыОбмена) Экспорт
	ПараметрыКонвертации = КомпонентыОбмена.ПараметрыКонвертации;
	ВариантНастройки = Неопределено;
	Если КомпонентыОбмена.УзелКорреспондента <> Неопределено Тогда
		ВариантНастройки = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(КомпонентыОбмена.УзелКорреспондента.МобильноеПриложение, "ВариантНастройки");
	КонецЕсли;
	ПараметрыКонвертации.ВариантНастройки = ВариантНастройки;
	
	УзелОбмена = КомпонентыОбмена.УзелКорреспондента;
	Пользователь = Пользователи.ТекущийПользователь();
	ОбменЗапрещен = Ложь;
	Если ЗначениеЗаполнено(УзелОбмена.Пользователь) 
		И Пользователь <> УзелОбмена.Пользователь Тогда
		ОбменЗапрещен = Истина;
	ИначеЕсли ЗначениеЗаполнено(УзелОбмена.ГруппаПользователей) Тогда
		Если УзелОбмена.ГруппаПользователей.Состав.Найти(Пользователь, "Пользователь") = Неопределено Тогда
			ОбменЗапрещен = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Если ОбменЗапрещен Тогда
		СообщениеОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='Пользователь %1 не является участником настройки обмена'"), Пользователь);
		ОбменДаннымиXDTOСервер.ЗаписатьВПротоколВыполнения(КомпонентыОбмена, СообщениеОбОшибке);
	КонецЕсли;
КонецПроцедуры

Процедура ПослеКонвертации(КомпонентыОбмена) Экспорт
	Если КомпонентыОбмена.НаправлениеОбмена = "Отправка" Тогда
		ТипПересчетТоваров = Тип("ДокументСсылка.ПересчетТоваров");
		ТипПоступлениеТоваров = Тип("ДокументСсылка.ПоступлениеТоваров");
		Для Каждого ВыгруженныйОбъект Из КомпонентыОбмена.ВыгруженныеОбъекты Цикл
			Если ТипЗнч(ВыгруженныйОбъект) = ТипПоступлениеТоваров Тогда
				Если ЗначениеЗаполнено(ВыгруженныйОбъект.ТТНВходящаяЕГАИС) Тогда
					ТТНВходящаяЕГАИС = ВыгруженныйОбъект.ТТНВходящаяЕГАИС;
					ДанныеПроверкиИПодбора = ТТНВходящаяЕГАИС.ДанныеПроверкиИПодбора.Получить();
					Если ДанныеПроверкиИПодбора <> Неопределено Тогда
						Для Каждого СтрокаДерева Из ДанныеПроверкиИПодбора.ДеревоМаркированнойПродукции.Строки Цикл
							Если НЕ ИнтеграцияИСКлиентСервер.ЭтоУпаковка(СтрокаДерева.ТипУпаковки) Тогда
								СтрокаДерева.СтатусПроверки = Перечисления.СтатусыПроверкиНаличияПродукцииИС.Отложена;
								СтрокаДерева.ИндексКартинкиСтатусПроверки = 3;
							КонецЕсли;
						КонецЦикла;
						ТТНВходящаяЕГАИСОбъект = ТТНВходящаяЕГАИС.ПолучитьОбъект();
						ТТНВходящаяЕГАИСОбъект.ДанныеПроверкиИПодбора = Новый ХранилищеЗначения(ДанныеПроверкиИПодбора);
						ТТНВходящаяЕГАИСОбъект.ОбменДанными.Загрузка = Истина;
						ТТНВходящаяЕГАИСОбъект.Записать();
					КонецЕсли;
				Иначе
					НаборЗаписей = РегистрыСведений.СтатусыПроверкиИПодбораДокументовИС.СоздатьНаборЗаписей();
					НаборЗаписей.Отбор.Документ.Установить(ВыгруженныйОбъект);
					НаборЗаписей.Прочитать();
					Если НаборЗаписей.Количество() = 0 Тогда
						Продолжить;
					КонецЕсли;
					Для Каждого Запись Из НаборЗаписей Цикл
						ДанныеПроверкиИПодбора = Запись.ДанныеПроверкиИПодбора.Получить();
						Если ДанныеПроверкиИПодбора <> Неопределено Тогда
							ТипМаркированныйТовар = Перечисления.ТипыУпаковок.МаркированныйТовар;
							ТипПачкиБезБлока = Перечисления.ПрочиеЗоныПересчетаПродукцииИСМП.ПачкиБезБлока;
							СтатусПроверкиОтложена = Перечисления.СтатусыПроверкиНаличияПродукцииИС.Отложена;
							Для Каждого СтрокаДерева Из ДанныеПроверкиИПодбора.ДеревоМаркированнойПродукции.Строки Цикл
								Если СтрокаДерева.ТипУпаковки = ТипМаркированныйТовар Тогда
									СтрокаДерева.СтатусПроверки = СтатусПроверкиОтложена;
									СтрокаДерева.ИндексКартинкиСтатусПроверки = 3;
								ИначеЕсли СтрокаДерева.ТипУпаковки = ТипПачкиБезБлока Тогда
									Для Каждого СтрокаПачкаБезБлока из СтрокаДерева.Строки Цикл
										СтрокаПачкаБезБлока.СтатусПроверки = СтатусПроверкиОтложена;
										СтрокаПачкаБезБлока.ИндексКартинкиСтатусПроверки = 3;
									КонецЦикла;
								КонецЕсли;
							КонецЦикла;
						КонецЕсли;
						Для Каждого Строка Из ДанныеПроверкиИПодбора.ПодобраннаяМаркируемаяПродукция Цикл
							Строка.КоличествоПодобрано = 0;
							Строка.ИндексКодаМаркировки = 2;
						КонецЦикла;
						Запись.ДанныеПроверкиИПодбора = Новый ХранилищеЗначения(ДанныеПроверкиИПодбора);
					КонецЦикла;
					НаборЗаписей.Записать();
				КонецЕсли;
			ИначеЕсли ТипЗнч(ВыгруженныйОбъект) = ТипПересчетТоваров Тогда
				ДокументПересчет = ВыгруженныйОбъект.ПолучитьОбъект();
				ДокументПересчет.Статус = Перечисления.СтатусыПересчетовТоваров.ВнесениеРезультатов;
				ДокументПересчет.ОбменДанными.Загрузка = Истина;
				ДокументПересчет.Записать();
				ПланыОбмена.УдалитьРегистрациюИзменений(КомпонентыОбмена.УзелКорреспондента, ВыгруженныйОбъект);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

Процедура ПередОтложеннымЗаполнением(КомпонентыОбмена) Экспорт
	
КонецПроцедуры

// Возвращает версию формата менеджера обмена.
// Возвращаемое значение:
//  Число - номер версии.
Функция ВерсияФорматаМенеджераОбмена() Экспорт
    Возврат "2";
КонецФункции

#КонецОбласти
#Область ПОД
// Заполняет таблицу правил обработки данных.
//
// Параметры:
//  НаправлениеОбмена - строка ("Отправка" либо "Получение").
//  ПравилаОбработкиДанных - таблица значений, в которую добавляются правила. 
Процедура ЗаполнитьПравилаОбработкиДанных(НаправлениеОбмена, ПравилаОбработкиДанных) Экспорт
	Если НаправлениеОбмена = "Отправка" Тогда
		Если ПравилаОбработкиДанных.Колонки.Найти("ОчисткаДанных") = Неопределено Тогда
			ПравилаОбработкиДанных.Колонки.Добавить("ОчисткаДанных");
		КонецЕсли;
		ДобавитьПОД_Документ_ВозвратТоваровПоставщику_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ЗаказНаПеремещение_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ЗаказПокупателя_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ЗаказПоставщику_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ПересчетТоваров_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ПоступлениеТоваров_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_ЕдиницыИзмерения_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_Магазины_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_Номенклатура_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_Организации_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_Склады_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_Упаковки_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_ХарактеристикиНоменклатуры_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_ШтрихкодыНоменклатуры_Отправка(ПравилаОбработкиДанных);
	ИначеЕсли НаправлениеОбмена = "Получение" Тогда
		ДобавитьПОД_Документ_ПересчетТоваров_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_РаспоряжениеНаОтгрузку_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_РаспоряжениеНаПриемку_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_СерииНоменклатуры_Получение(ПравилаОбработкиДанных);
	КонецЕсли;
КонецПроцедуры

#Область Отправка
#Область Документ_ВозвратТоваровПоставщику_Отправка
Процедура ДобавитьПОД_Документ_ВозвратТоваровПоставщику_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_ВозвратТоваровПоставщику_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Документы.ВозвратТоваровПоставщику;
	ПравилоОбработки.ПриОбработке            = "ПОД_Документ_ВозвратТоваровПоставщику_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ВозвратТоваровПоставщику_Отправка");
КонецПроцедуры

Процедура ПОД_Документ_ВозвратТоваровПоставщику_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
	Запрос.УстановитьПараметр("ОсобенностиУчетаИСМП", ОсобенностиУчетаИСМП());
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВозвратТоваровПоставщикуТовары.НомерСтроки КАК НомерСтроки,
	|	ВозвратТоваровПоставщикуТовары.Номенклатура КАК Номенклатура,
	|	ВозвратТоваровПоставщикуТовары.Характеристика КАК Характеристика,
	|	ВозвратТоваровПоставщикуТовары.Количество КАК Количество,
	|	ВозвратТоваровПоставщикуТовары.Цена КАК Цена,
	|	ВозвратТоваровПоставщикуТовары.Сумма КАК Сумма,
	|	ВозвратТоваровПоставщикуТовары.СтавкаНДС КАК СтавкаНДС,
	|	ВозвратТоваровПоставщикуТовары.СуммаНДС КАК СуммаНДС,
	|	ВозвратТоваровПоставщикуТовары.Упаковка КАК Упаковка,
	|	ВозвратТоваровПоставщикуТовары.КоличествоУпаковок КАК КоличествоУпаковок,
	|	ВозвратТоваровПоставщикуТовары.СтатусУказанияСерий КАК СтатусУказанияСерий
	|ПОМЕСТИТЬ Товары
	|ИЗ
	|	Документ.ВозвратТоваровПоставщику.Товары КАК ВозвратТоваровПоставщикуТовары
	|ГДЕ
	|	ВозвратТоваровПоставщикуТовары.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВозвратТоваровПоставщикуСерии.Номенклатура КАК Номенклатура,
	|	ВозвратТоваровПоставщикуСерии.Характеристика КАК Характеристика,
	|	ВозвратТоваровПоставщикуСерии.Серия КАК Серия,
	|	ВозвратТоваровПоставщикуСерии.Количество КАК Количество,
	|	ЕСТЬNULL(СерииНоменклатуры.Номер, """") КАК Номер
	|ПОМЕСТИТЬ Серии
	|ИЗ
	|	Документ.ВозвратТоваровПоставщику.Серии КАК ВозвратТоваровПоставщикуСерии
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СерииНоменклатуры КАК СерииНоменклатуры
	|		ПО ВозвратТоваровПоставщикуСерии.Серия = СерииНоменклатуры.Ссылка
	|ГДЕ
	|	ВозвратТоваровПоставщикуСерии.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.Номенклатура КАК Номенклатура,
	|	Товары.Характеристика КАК Характеристика,
	|	Товары.Упаковка КАК Упаковка,
	|	МАКСИМУМ(ЕСТЬNULL(Штрихкоды.Штрихкод, """")) КАК Штрихкод
	|ПОМЕСТИТЬ Штрихкоды
	|ИЗ
	|	Товары КАК Товары
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.Штрихкоды КАК Штрихкоды
	|		ПО Товары.Номенклатура = Штрихкоды.Владелец
	|			И Товары.Характеристика = Штрихкоды.Характеристика
	|			И Товары.Упаковка = Штрихкоды.Упаковка
	|
	|СГРУППИРОВАТЬ ПО
	|	Товары.Номенклатура,
	|	Товары.Характеристика,
	|	Товары.Упаковка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.НомерСтроки КАК НомерСтроки,
	|	Товары.Номенклатура КАК Номенклатура,
	|	Товары.Характеристика КАК Характеристика,
	|	Товары.Упаковка КАК Упаковка,
	|	СправочникНоменклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	Товары.Количество КАК Количество,
	|	Товары.КоличествоУпаковок КАК КоличествоУпаковок,
	|	Товары.СтатусУказанияСерий КАК СтатусУказанияСерий,
	|	ЛОЖЬ КАК Маркируемый,
	|	СправочникНоменклатура.Весовой КАК Весовой,
	|	СправочникНоменклатура.Вес КАК ВесЕдиницыТовара,
	|	Товары.Цена КАК Цена,
	|	Товары.Сумма КАК Сумма,
	|	Товары.СтавкаНДС КАК СтавкаНДС,
	|	Товары.СуммаНДС КАК СуммаНДС
	|ПОМЕСТИТЬ ВТ_Товары
	|ИЗ
	|	Товары КАК Товары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
	|		ПО Товары.Номенклатура = СправочникНоменклатура.Ссылка
	|ГДЕ
	|	СправочникНоменклатура.ОсобенностьУчета = ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.БезОсобенностейУчета)
	|	И СправочникНоменклатура.ТипНоменклатуры <> ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Услуга)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Товары.НомерСтроки,
	|	Товары.Номенклатура,
	|	Товары.Характеристика,
	|	Товары.Упаковка,
	|	СправочникНоменклатура.ЕдиницаИзмерения,
	|	Товары.Количество,
	|	Товары.КоличествоУпаковок,
	|	Товары.СтатусУказанияСерий,
	|	ЕСТЬNULL(ВидыАлкогольнойПродукции.Маркируемый, ЛОЖЬ),
	|	СправочникНоменклатура.Весовой,
	|	СправочникНоменклатура.Вес,
	|	Товары.Цена,
	|	Товары.Сумма,
	|	Товары.СтавкаНДС,
	|	Товары.СуммаНДС
	|ИЗ
	|	Товары КАК Товары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
	|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыАлкогольнойПродукции КАК ВидыАлкогольнойПродукции
	|			ПО СправочникНоменклатура.ВидАлкогольнойПродукцииЕГАИС = ВидыАлкогольнойПродукции.Ссылка
	|		ПО Товары.Номенклатура = СправочникНоменклатура.Ссылка
	|ГДЕ
	|	СправочникНоменклатура.ОсобенностьУчета = ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.АлкогольнаяПродукция)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Товары.НомерСтроки,
	|	Товары.Номенклатура,
	|	Товары.Характеристика,
	|	Товары.Упаковка,
	|	СправочникНоменклатура.ЕдиницаИзмерения,
	|	Товары.Количество,
	|	Товары.КоличествоУпаковок,
	|	Товары.СтатусУказанияСерий,
	|	ИСТИНА,
	|	СправочникНоменклатура.Весовой,
	|	СправочникНоменклатура.Вес,
	|	Товары.Цена,
	|	Товары.Сумма,
	|	Товары.СтавкаНДС,
	|	Товары.СуммаНДС
	|ИЗ
	|	Товары КАК Товары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
	|		ПО Товары.Номенклатура = СправочникНоменклатура.Ссылка
	|ГДЕ
	|	СправочникНоменклатура.ОсобенностьУчета В(&ОсобенностиУчетаИСМП)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Товары.НомерСтроки КАК НомерСтроки,
	|	ВТ_Товары.Номенклатура КАК Номенклатура,
	|	ВТ_Товары.Характеристика КАК Характеристика,
	|	ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка) КАК Серия,
	|	ВТ_Товары.Упаковка КАК Упаковка,
	|	ЕСТЬNULL(Штрихкоды.Штрихкод, """") КАК Штрихкод,
	|	ВТ_Товары.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ВТ_Товары.Количество КАК Количество,
	|	ВТ_Товары.КоличествоУпаковок КАК КоличествоУпаковок,
	|	ВТ_Товары.СтатусУказанияСерий КАК СтатусУказанияСерий,
	|	ВТ_Товары.Маркируемый КАК Маркируемый,
	|	ВТ_Товары.Весовой КАК Весовой,
	|	ВТ_Товары.ВесЕдиницыТовара КАК ВесЕдиницыТовара,
	|	ВТ_Товары.Цена КАК Цена,
	|	ВТ_Товары.Сумма КАК Сумма,
	|	ВТ_Товары.СтавкаНДС КАК СтавкаНДС,
	|	ВТ_Товары.СуммаНДС КАК СуммаНДС
	|ПОМЕСТИТЬ ВТ_ТоварыИтог
	|ИЗ
	|	ВТ_Товары КАК ВТ_Товары
	|		ЛЕВОЕ СОЕДИНЕНИЕ Штрихкоды КАК Штрихкоды
	|		ПО ВТ_Товары.Номенклатура = Штрихкоды.Номенклатура
	|			И ВТ_Товары.Характеристика = Штрихкоды.Характеристика
	|			И ВТ_Товары.Упаковка = Штрихкоды.Упаковка
	|ГДЕ
	|	ВТ_Товары.СтатусУказанияСерий В (0, 1)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВТ_Товары.НомерСтроки,
	|	ВТ_Товары.Номенклатура,
	|	ВТ_Товары.Характеристика,
	|	ВЫБОР
	|		КОГДА Серии.Номер = """"
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
	|		ИНАЧЕ Серии.Серия
	|	КОНЕЦ,
	|	ВТ_Товары.Упаковка,
	|	ЕСТЬNULL(Штрихкоды.Штрихкод, """"),
	|	ВТ_Товары.ЕдиницаИзмерения,
	|	Серии.Количество,
	|	Серии.Количество,
	|	ВЫБОР
	|		КОГДА Серии.Номер = """"
	|			ТОГДА 1
	|		ИНАЧЕ ВТ_Товары.СтатусУказанияСерий
	|	КОНЕЦ,
	|	ВТ_Товары.Маркируемый,
	|	ВТ_Товары.Весовой,
	|	ВТ_Товары.ВесЕдиницыТовара,
	|	ВТ_Товары.Цена,
	|	ВТ_Товары.Сумма * Серии.Количество / ВТ_Товары.Количество,
	|	ВТ_Товары.СтавкаНДС,
	|	ВТ_Товары.СуммаНДС * Серии.Количество / ВТ_Товары.Количество
	|ИЗ
	|	ВТ_Товары КАК ВТ_Товары
	|		ЛЕВОЕ СОЕДИНЕНИЕ Штрихкоды КАК Штрихкоды
	|		ПО ВТ_Товары.Номенклатура = Штрихкоды.Номенклатура
	|			И ВТ_Товары.Характеристика = Штрихкоды.Характеристика
	|			И ВТ_Товары.Упаковка = Штрихкоды.Упаковка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Серии КАК Серии
	|		ПО ВТ_Товары.Номенклатура = Серии.Номенклатура
	|			И ВТ_Товары.Характеристика = Серии.Характеристика
	|ГДЕ
	|	ВТ_Товары.СтатусУказанияСерий = 2
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ТоварыИтог.Номенклатура КАК Номенклатура,
	|	ВТ_ТоварыИтог.Характеристика КАК Характеристика,
	|	ВТ_ТоварыИтог.Серия КАК Серия,
	|	ВТ_ТоварыИтог.Упаковка КАК Упаковка,
	|	ВТ_ТоварыИтог.Штрихкод КАК Штрихкод,
	|	ВТ_ТоварыИтог.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ВТ_ТоварыИтог.Количество КАК Количество,
	|	ВТ_ТоварыИтог.КоличествоУпаковок КАК КоличествоУпаковок,
	|	ВТ_ТоварыИтог.СтатусУказанияСерий КАК СтатусУказанияСерий,
	|	ВТ_ТоварыИтог.Маркируемый КАК Маркируемый,
	|	ВТ_ТоварыИтог.Весовой КАК Весовой,
	|	ВТ_ТоварыИтог.ВесЕдиницыТовара КАК ВесЕдиницыТовара,
	|	ВТ_ТоварыИтог.Цена КАК Цена,
	|	ВТ_ТоварыИтог.Сумма КАК Сумма,
	|	ВТ_ТоварыИтог.СтавкаНДС КАК СтавкаНДС,
	|	ВТ_ТоварыИтог.СуммаНДС КАК СуммаНДС
	|ИЗ
	|	ВТ_ТоварыИтог КАК ВТ_ТоварыИтог
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВТ_ТоварыИтог.НомерСтроки";
	
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		ИспользованиеПКО.Документ_ВозвратТоваровПоставщику_Отправка = Ложь;
	Иначе
		Товары = Результат.Выгрузить();
		ДанныеИБ.ДополнительныеСвойства.Вставить("Товары", Товары);
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ШтрихкодыУпаковокТоваров.Номенклатура КАК Номенклатура,
	|	ШтрихкодыУпаковокТоваров.Характеристика КАК Характеристика,
	|	ШтрихкодыУпаковокТоваров.ЗначениеШтрихкода КАК НомерАкцизнойМарки
	|ИЗ
	|	Документ.ВозвратТоваровПоставщику.ШтрихкодыУпаковок КАК ВозвратТоваровПоставщикуШтрихкодыУпаковок
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ШтрихкодыУпаковокТоваров КАК ШтрихкодыУпаковокТоваров
	|		ПО ВозвратТоваровПоставщикуШтрихкодыУпаковок.ШтрихкодУпаковки = ШтрихкодыУпаковокТоваров.Ссылка
	|ГДЕ
	|	ВозвратТоваровПоставщикуШтрихкодыУпаковок.Ссылка = &Ссылка";
	
	Результат = Запрос.Выполнить();
	
	Маркировка = Результат.Выгрузить();
	ДанныеИБ.ДополнительныеСвойства.Вставить("Маркировка", Маркировка);
КонецПроцедуры
#КонецОбласти
#Область Документ_ЗаказНаПеремещение_Отправка
Процедура ДобавитьПОД_Документ_ЗаказНаПеремещение_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_ЗаказНаПеремещение_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Документы.ЗаказНаПеремещение;
	ПравилоОбработки.ПриОбработке            = "ПОД_Документ_ЗаказНаПеремещение_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ОтгрузкаПоЗаказуНаПеремещение_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ПриемкаПоЗаказуНаПеремещение_Отправка");
КонецПроцедуры

Процедура ПОД_Документ_ЗаказНаПеремещение_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
	Запрос.УстановитьПараметр("ОсобенностиУчетаИСМП", ОсобенностиУчетаИСМП());
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЗаказНаПеремещениеТовары.НомерСтроки КАК НомерСтроки,
	|	ЗаказНаПеремещениеТовары.Номенклатура КАК Номенклатура,
	|	ЗаказНаПеремещениеТовары.Характеристика КАК Характеристика,
	|	ЗаказНаПеремещениеТовары.Количество КАК Количество,
	|	ЗаказНаПеремещениеТовары.Упаковка КАК Упаковка,
	|	ЗаказНаПеремещениеТовары.КоличествоУпаковок КАК КоличествоУпаковок
	|ПОМЕСТИТЬ Товары
	|ИЗ
	|	Документ.ЗаказНаПеремещение.Товары КАК ЗаказНаПеремещениеТовары
	|ГДЕ
	|	ЗаказНаПеремещениеТовары.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.Номенклатура КАК Номенклатура,
	|	Товары.Характеристика КАК Характеристика,
	|	Товары.Упаковка КАК Упаковка,
	|	МАКСИМУМ(ЕСТЬNULL(Штрихкоды.Штрихкод, """")) КАК Штрихкод
	|ПОМЕСТИТЬ Штрихкоды
	|ИЗ
	|	Товары КАК Товары
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.Штрихкоды КАК Штрихкоды
	|		ПО Товары.Номенклатура = Штрихкоды.Владелец
	|			И Товары.Характеристика = Штрихкоды.Характеристика
	|			И Товары.Упаковка = Штрихкоды.Упаковка
	|
	|СГРУППИРОВАТЬ ПО
	|	Товары.Номенклатура,
	|	Товары.Характеристика,
	|	Товары.Упаковка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.НомерСтроки КАК НомерСтроки,
	|	Товары.Номенклатура КАК Номенклатура,
	|	Товары.Характеристика КАК Характеристика,
	|	Товары.Упаковка КАК Упаковка,
	|	СправочникНоменклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	Товары.Количество КАК Количество,
	|	Товары.КоличествоУпаковок КАК КоличествоУпаковок,
	|	ЛОЖЬ КАК Маркируемый,
	|	СправочникНоменклатура.Весовой КАК Весовой,
	|	СправочникНоменклатура.Вес КАК ВесЕдиницыТовара
	|ПОМЕСТИТЬ ВТ_Товары
	|ИЗ
	|	Товары КАК Товары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
	|		ПО Товары.Номенклатура = СправочникНоменклатура.Ссылка
	|ГДЕ
	|	СправочникНоменклатура.ОсобенностьУчета = ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.БезОсобенностейУчета)
	|	И СправочникНоменклатура.ТипНоменклатуры <> ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Услуга)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Товары.НомерСтроки,
	|	Товары.Номенклатура,
	|	Товары.Характеристика,
	|	Товары.Упаковка,
	|	СправочникНоменклатура.ЕдиницаИзмерения,
	|	Товары.Количество,
	|	Товары.КоличествоУпаковок,
	|	ЕСТЬNULL(ВидыАлкогольнойПродукции.Маркируемый, ЛОЖЬ),
	|	СправочникНоменклатура.Весовой,
	|	СправочникНоменклатура.Вес
	|ИЗ
	|	Товары КАК Товары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
	|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыАлкогольнойПродукции КАК ВидыАлкогольнойПродукции
	|			ПО СправочникНоменклатура.ВидАлкогольнойПродукцииЕГАИС = ВидыАлкогольнойПродукции.Ссылка
	|		ПО Товары.Номенклатура = СправочникНоменклатура.Ссылка
	|ГДЕ
	|	СправочникНоменклатура.ОсобенностьУчета = ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.АлкогольнаяПродукция)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Товары.НомерСтроки,
	|	Товары.Номенклатура,
	|	Товары.Характеристика,
	|	Товары.Упаковка,
	|	СправочникНоменклатура.ЕдиницаИзмерения,
	|	Товары.Количество,
	|	Товары.КоличествоУпаковок,
	|	ИСТИНА,
	|	СправочникНоменклатура.Весовой,
	|	СправочникНоменклатура.Вес
	|ИЗ
	|	Товары КАК Товары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
	|		ПО Товары.Номенклатура = СправочникНоменклатура.Ссылка
	|ГДЕ
	|	СправочникНоменклатура.ОсобенностьУчета В(&ОсобенностиУчетаИСМП)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Товары.НомерСтроки КАК НомерСтроки,
	|	ВТ_Товары.Номенклатура КАК Номенклатура,
	|	ВТ_Товары.Характеристика КАК Характеристика,
	|	ВТ_Товары.Упаковка КАК Упаковка,
	|	ЕСТЬNULL(Штрихкоды.Штрихкод, """") КАК Штрихкод,
	|	ВТ_Товары.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ВТ_Товары.Количество КАК Количество,
	|	ВТ_Товары.КоличествоУпаковок КАК КоличествоУпаковок,
	|	ВТ_Товары.Маркируемый КАК Маркируемый,
	|	ВТ_Товары.Весовой КАК Весовой,
	|	ВТ_Товары.ВесЕдиницыТовара КАК ВесЕдиницыТовара
	|ПОМЕСТИТЬ ВТ_ТоварыИтог
	|ИЗ
	|	ВТ_Товары КАК ВТ_Товары
	|		ЛЕВОЕ СОЕДИНЕНИЕ Штрихкоды КАК Штрихкоды
	|		ПО ВТ_Товары.Номенклатура = Штрихкоды.Номенклатура
	|			И ВТ_Товары.Характеристика = Штрихкоды.Характеристика
	|			И ВТ_Товары.Упаковка = Штрихкоды.Упаковка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ТоварыИтог.Номенклатура КАК Номенклатура,
	|	ВТ_ТоварыИтог.Характеристика КАК Характеристика,
	|	ВТ_ТоварыИтог.Упаковка КАК Упаковка,
	|	ВТ_ТоварыИтог.Штрихкод КАК Штрихкод,
	|	ВТ_ТоварыИтог.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ВТ_ТоварыИтог.Количество КАК Количество,
	|	ВТ_ТоварыИтог.КоличествоУпаковок КАК КоличествоУпаковок,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ВидыНоменклатуры.ИспользоватьСерии, ЛОЖЬ)
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СтатусУказанияСерий,
	|	ВТ_ТоварыИтог.Маркируемый КАК Маркируемый,
	|	ВТ_ТоварыИтог.Весовой КАК Весовой,
	|	ВТ_ТоварыИтог.ВесЕдиницыТовара КАК ВесЕдиницыТовара
	|ИЗ
	|	ВТ_ТоварыИтог КАК ВТ_ТоварыИтог
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыНоменклатуры КАК ВидыНоменклатуры
	|		ПО ВТ_ТоварыИтог.Номенклатура.ВидНоменклатуры = ВидыНоменклатуры.Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВТ_ТоварыИтог.НомерСтроки";
	
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		ИспользованиеПКО.Документ_ОтгрузкаПоЗаказуНаПеремещение_Отправка = Ложь;
		ИспользованиеПКО.Документ_ПриемкаПоЗаказуНаПеремещение_Отправка = Ложь;
	Иначе
		Товары = Результат.Выгрузить();
		ДанныеИБ.ДополнительныеСвойства.Вставить("Товары", Товары);
	
		ИспользованиеПКО.Документ_ОтгрузкаПоЗаказуНаПеремещение_Отправка =
			УправлениеМобильнымиПриложениямиРТ.ПроверитьФильтрПоСкладу(
				КомпонентыОбмена.УзелКорреспондента, ДанныеИБ.МагазинОтправитель.СкладПродажи);
		
		ИспользованиеПКО.Документ_ПриемкаПоЗаказуНаПеремещение_Отправка =
			УправлениеМобильнымиПриложениямиРТ.ПроверитьФильтрПоСкладу(
				КомпонентыОбмена.УзелКорреспондента, ДанныеИБ.МагазинПолучатель.СкладПоступления);
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Документ_ЗаказПокупателя_Отправка
Процедура ДобавитьПОД_Документ_ЗаказПокупателя_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_ЗаказПокупателя_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Документы.ЗаказПокупателя;
	ПравилоОбработки.ПриОбработке            = "ПОД_Документ_ЗаказПокупателя_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ЗаказПокупателя_Отправка");
КонецПроцедуры

Процедура ПОД_Документ_ЗаказПокупателя_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
	Запрос.УстановитьПараметр("ОсобенностиУчетаИСМП", ОсобенностиУчетаИСМП());
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЗаказПокупателяТовары.НомерСтроки КАК НомерСтроки,
	|	ЗаказПокупателяТовары.Номенклатура КАК Номенклатура,
	|	ЗаказПокупателяТовары.Характеристика КАК Характеристика,
	|	ЗаказПокупателяТовары.Количество КАК Количество,
	|	ЗаказПокупателяТовары.Цена КАК Цена,
	|	ЗаказПокупателяТовары.Сумма КАК Сумма,
	|	ЗаказПокупателяТовары.СтавкаНДС КАК СтавкаНДС,
	|	ЗаказПокупателяТовары.СуммаНДС КАК СуммаНДС,
	|	ЗаказПокупателяТовары.Упаковка КАК Упаковка,
	|	ЗаказПокупателяТовары.КоличествоУпаковок КАК КоличествоУпаковок
	|ПОМЕСТИТЬ Товары
	|ИЗ
	|	Документ.ЗаказПокупателя.Товары КАК ЗаказПокупателяТовары
	|ГДЕ
	|	ЗаказПокупателяТовары.Ссылка = &Ссылка
	|	И НЕ ЗаказПокупателяТовары.Отменено
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗаказПокупателяПодарки.НомерСтроки,
	|	ЗаказПокупателяПодарки.Номенклатура,
	|	ЗаказПокупателяПодарки.Характеристика,
	|	ЗаказПокупателяПодарки.Количество,
	|	ЗаказПокупателяПодарки.Цена,
	|	ЗаказПокупателяПодарки.Сумма,
	|	ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.БезНДС),
	|	0,
	|	ЗаказПокупателяПодарки.Упаковка,
	|	ЗаказПокупателяПодарки.КоличествоУпаковок
	|ИЗ
	|	Документ.ЗаказПокупателя.Подарки КАК ЗаказПокупателяПодарки
	|ГДЕ
	|	ЗаказПокупателяПодарки.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.Номенклатура КАК Номенклатура,
	|	Товары.Характеристика КАК Характеристика,
	|	Товары.Упаковка КАК Упаковка,
	|	МАКСИМУМ(ЕСТЬNULL(Штрихкоды.Штрихкод, """")) КАК Штрихкод
	|ПОМЕСТИТЬ Штрихкоды
	|ИЗ
	|	Товары КАК Товары
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.Штрихкоды КАК Штрихкоды
	|		ПО Товары.Номенклатура = Штрихкоды.Владелец
	|			И Товары.Характеристика = Штрихкоды.Характеристика
	|			И Товары.Упаковка = Штрихкоды.Упаковка
	|
	|СГРУППИРОВАТЬ ПО
	|	Товары.Номенклатура,
	|	Товары.Характеристика,
	|	Товары.Упаковка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.НомерСтроки КАК НомерСтроки,
	|	Товары.Номенклатура КАК Номенклатура,
	|	Товары.Характеристика КАК Характеристика,
	|	Товары.Упаковка КАК Упаковка,
	|	СправочникНоменклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	Товары.Количество КАК Количество,
	|	Товары.КоличествоУпаковок КАК КоличествоУпаковок,
	|	ЛОЖЬ КАК Маркируемый,
	|	СправочникНоменклатура.Весовой КАК Весовой,
	|	СправочникНоменклатура.Вес КАК ВесЕдиницыТовара,
	|	Товары.Цена КАК Цена,
	|	Товары.Сумма КАК Сумма,
	|	Товары.СтавкаНДС КАК СтавкаНДС,
	|	Товары.СуммаНДС КАК СуммаНДС
	|ПОМЕСТИТЬ ВТ_Товары
	|ИЗ
	|	Товары КАК Товары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
	|		ПО Товары.Номенклатура = СправочникНоменклатура.Ссылка
	|ГДЕ
	|	СправочникНоменклатура.ОсобенностьУчета = ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.БезОсобенностейУчета)
	|	И СправочникНоменклатура.ТипНоменклатуры <> ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Услуга)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Товары.НомерСтроки,
	|	Товары.Номенклатура,
	|	Товары.Характеристика,
	|	Товары.Упаковка,
	|	СправочникНоменклатура.ЕдиницаИзмерения,
	|	Товары.Количество,
	|	Товары.КоличествоУпаковок,
	|	ЕСТЬNULL(ВидыАлкогольнойПродукции.Маркируемый, ЛОЖЬ),
	|	СправочникНоменклатура.Весовой,
	|	СправочникНоменклатура.Вес,
	|	Товары.Цена,
	|	Товары.Сумма,
	|	Товары.СтавкаНДС,
	|	Товары.СуммаНДС
	|ИЗ
	|	Товары КАК Товары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
	|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыАлкогольнойПродукции КАК ВидыАлкогольнойПродукции
	|			ПО СправочникНоменклатура.ВидАлкогольнойПродукцииЕГАИС = ВидыАлкогольнойПродукции.Ссылка
	|		ПО Товары.Номенклатура = СправочникНоменклатура.Ссылка
	|ГДЕ
	|	СправочникНоменклатура.ОсобенностьУчета = ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.АлкогольнаяПродукция)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Товары.НомерСтроки,
	|	Товары.Номенклатура,
	|	Товары.Характеристика,
	|	Товары.Упаковка,
	|	СправочникНоменклатура.ЕдиницаИзмерения,
	|	Товары.Количество,
	|	Товары.КоличествоУпаковок,
	|	ИСТИНА,
	|	СправочникНоменклатура.Весовой,
	|	СправочникНоменклатура.Вес,
	|	Товары.Цена,
	|	Товары.Сумма,
	|	Товары.СтавкаНДС,
	|	Товары.СуммаНДС
	|ИЗ
	|	Товары КАК Товары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
	|		ПО Товары.Номенклатура = СправочникНоменклатура.Ссылка
	|ГДЕ
	|	СправочникНоменклатура.ОсобенностьУчета В(&ОсобенностиУчетаИСМП)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Товары.НомерСтроки КАК НомерСтроки,
	|	ВТ_Товары.Номенклатура КАК Номенклатура,
	|	ВТ_Товары.Характеристика КАК Характеристика,
	|	ВТ_Товары.Упаковка КАК Упаковка,
	|	ЕСТЬNULL(Штрихкоды.Штрихкод, """") КАК Штрихкод,
	|	ВТ_Товары.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ВТ_Товары.Количество КАК Количество,
	|	ВТ_Товары.КоличествоУпаковок КАК КоличествоУпаковок,
	|	ВТ_Товары.Маркируемый КАК Маркируемый,
	|	ВТ_Товары.Весовой КАК Весовой,
	|	ВТ_Товары.ВесЕдиницыТовара КАК ВесЕдиницыТовара,
	|	ВТ_Товары.Цена КАК Цена,
	|	ВТ_Товары.Сумма КАК Сумма,
	|	ВТ_Товары.СтавкаНДС КАК СтавкаНДС,
	|	ВТ_Товары.СуммаНДС КАК СуммаНДС
	|ПОМЕСТИТЬ ВТ_ТоварыИтог
	|ИЗ
	|	ВТ_Товары КАК ВТ_Товары
	|		ЛЕВОЕ СОЕДИНЕНИЕ Штрихкоды КАК Штрихкоды
	|		ПО ВТ_Товары.Номенклатура = Штрихкоды.Номенклатура
	|			И ВТ_Товары.Характеристика = Штрихкоды.Характеристика
	|			И ВТ_Товары.Упаковка = Штрихкоды.Упаковка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ТоварыИтог.Номенклатура КАК Номенклатура,
	|	ВТ_ТоварыИтог.Характеристика КАК Характеристика,
	|	ВТ_ТоварыИтог.Упаковка КАК Упаковка,
	|	ВТ_ТоварыИтог.Штрихкод КАК Штрихкод,
	|	ВТ_ТоварыИтог.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ВТ_ТоварыИтог.Количество КАК Количество,
	|	ВТ_ТоварыИтог.КоличествоУпаковок КАК КоличествоУпаковок,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ВидыНоменклатуры.ИспользоватьСерии, ЛОЖЬ)
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СтатусУказанияСерий,
	|	ВТ_ТоварыИтог.Маркируемый КАК Маркируемый,
	|	ВТ_ТоварыИтог.Весовой КАК Весовой,
	|	ВТ_ТоварыИтог.ВесЕдиницыТовара КАК ВесЕдиницыТовара,
	|	ВТ_ТоварыИтог.Цена КАК Цена,
	|	ВТ_ТоварыИтог.Сумма КАК Сумма,
	|	ВТ_ТоварыИтог.СтавкаНДС КАК СтавкаНДС,
	|	ВТ_ТоварыИтог.СуммаНДС КАК СуммаНДС
	|ИЗ
	|	ВТ_ТоварыИтог КАК ВТ_ТоварыИтог
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыНоменклатуры КАК ВидыНоменклатуры
	|		ПО ВТ_ТоварыИтог.Номенклатура.ВидНоменклатуры = ВидыНоменклатуры.Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВТ_ТоварыИтог.НомерСтроки";
	
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		ИспользованиеПКО.Документ_ЗаказПокупателя_Отправка = Ложь;
	Иначе
		Товары = Результат.Выгрузить();
		ДанныеИБ.ДополнительныеСвойства.Вставить("Товары", Товары);
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Документ_ЗаказПоставщику_Отправка
Процедура ДобавитьПОД_Документ_ЗаказПоставщику_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_ЗаказПоставщику_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Документы.ЗаказПоставщику;
	ПравилоОбработки.ПриОбработке            = "ПОД_Документ_ЗаказПоставщику_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ЗаказПоставщику_Отправка");
КонецПроцедуры

Процедура ПОД_Документ_ЗаказПоставщику_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	Если ДанныеИБ.Закрыт Тогда
		ИспользованиеПКО.Документ_ЗаказПоставщику_Отправка = Ложь;
	Иначе
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ПоступлениеТоваров.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.ПоступлениеТоваров КАК ПоступлениеТоваров
		|ГДЕ
		|	ПоступлениеТоваров.ЗаказПоставщику = &ЗаказПоставщику
		|	И НЕ ПоступлениеТоваров.ПометкаУдаления";
		
		Запрос.УстановитьПараметр("ЗаказПоставщику", ДанныеИБ.Ссылка);
		
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			ИспользованиеПКО.Документ_ЗаказПоставщику_Отправка = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
	Запрос.УстановитьПараметр("ОсобенностиУчетаИСМП", ОсобенностиУчетаИСМП());
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЗаказПоставщикуТовары.НомерСтроки КАК НомерСтроки,
	|	ЗаказПоставщикуТовары.Номенклатура КАК Номенклатура,
	|	ЗаказПоставщикуТовары.Характеристика КАК Характеристика,
	|	ЗаказПоставщикуТовары.Количество КАК Количество,
	|	ЗаказПоставщикуТовары.Цена КАК Цена,
	|	ЗаказПоставщикуТовары.Сумма КАК Сумма,
	|	ЗаказПоставщикуТовары.СтавкаНДС КАК СтавкаНДС,
	|	ЗаказПоставщикуТовары.СуммаНДС КАК СуммаНДС,
	|	ЗаказПоставщикуТовары.Упаковка КАК Упаковка,
	|	ЗаказПоставщикуТовары.КоличествоУпаковок КАК КоличествоУпаковок
	|ПОМЕСТИТЬ Товары
	|ИЗ
	|	Документ.ЗаказПоставщику.Товары КАК ЗаказПоставщикуТовары
	|ГДЕ
	|	ЗаказПоставщикуТовары.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.Номенклатура КАК Номенклатура,
	|	Товары.Характеристика КАК Характеристика,
	|	Товары.Упаковка КАК Упаковка,
	|	МАКСИМУМ(ЕСТЬNULL(Штрихкоды.Штрихкод, """")) КАК Штрихкод
	|ПОМЕСТИТЬ Штрихкоды
	|ИЗ
	|	Товары КАК Товары
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.Штрихкоды КАК Штрихкоды
	|		ПО Товары.Номенклатура = Штрихкоды.Владелец
	|			И Товары.Характеристика = Штрихкоды.Характеристика
	|			И Товары.Упаковка = Штрихкоды.Упаковка
	|
	|СГРУППИРОВАТЬ ПО
	|	Товары.Номенклатура,
	|	Товары.Характеристика,
	|	Товары.Упаковка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.НомерСтроки КАК НомерСтроки,
	|	Товары.Номенклатура КАК Номенклатура,
	|	Товары.Характеристика КАК Характеристика,
	|	Товары.Упаковка КАК Упаковка,
	|	СправочникНоменклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	Товары.Количество КАК Количество,
	|	Товары.КоличествоУпаковок КАК КоличествоУпаковок,
	|	ЛОЖЬ КАК Маркируемый,
	|	СправочникНоменклатура.Весовой КАК Весовой,
	|	СправочникНоменклатура.Вес КАК ВесЕдиницыТовара,
	|	Товары.Цена КАК Цена,
	|	Товары.Сумма КАК Сумма,
	|	Товары.СтавкаНДС КАК СтавкаНДС,
	|	Товары.СуммаНДС КАК СуммаНДС
	|ПОМЕСТИТЬ ВТ_Товары
	|ИЗ
	|	Товары КАК Товары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
	|		ПО Товары.Номенклатура = СправочникНоменклатура.Ссылка
	|ГДЕ
	|	СправочникНоменклатура.ОсобенностьУчета = ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.БезОсобенностейУчета)
	|	И СправочникНоменклатура.ТипНоменклатуры <> ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Услуга)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Товары.НомерСтроки,
	|	Товары.Номенклатура,
	|	Товары.Характеристика,
	|	Товары.Упаковка,
	|	СправочникНоменклатура.ЕдиницаИзмерения,
	|	Товары.Количество,
	|	Товары.КоличествоУпаковок,
	|	ЕСТЬNULL(ВидыАлкогольнойПродукции.Маркируемый, ЛОЖЬ),
	|	СправочникНоменклатура.Весовой,
	|	СправочникНоменклатура.Вес,
	|	Товары.Цена,
	|	Товары.Сумма,
	|	Товары.СтавкаНДС,
	|	Товары.СуммаНДС
	|ИЗ
	|	Товары КАК Товары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
	|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыАлкогольнойПродукции КАК ВидыАлкогольнойПродукции
	|			ПО СправочникНоменклатура.ВидАлкогольнойПродукцииЕГАИС = ВидыАлкогольнойПродукции.Ссылка
	|		ПО Товары.Номенклатура = СправочникНоменклатура.Ссылка
	|ГДЕ
	|	СправочникНоменклатура.ОсобенностьУчета = ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.АлкогольнаяПродукция)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Товары.НомерСтроки,
	|	Товары.Номенклатура,
	|	Товары.Характеристика,
	|	Товары.Упаковка,
	|	СправочникНоменклатура.ЕдиницаИзмерения,
	|	Товары.Количество,
	|	Товары.КоличествоУпаковок,
	|	ИСТИНА,
	|	СправочникНоменклатура.Весовой,
	|	СправочникНоменклатура.Вес,
	|	Товары.Цена,
	|	Товары.Сумма,
	|	Товары.СтавкаНДС,
	|	Товары.СуммаНДС
	|ИЗ
	|	Товары КАК Товары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
	|		ПО Товары.Номенклатура = СправочникНоменклатура.Ссылка
	|ГДЕ
	|	СправочникНоменклатура.ОсобенностьУчета В(&ОсобенностиУчетаИСМП)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Товары.НомерСтроки КАК НомерСтроки,
	|	ВТ_Товары.Номенклатура КАК Номенклатура,
	|	ВТ_Товары.Характеристика КАК Характеристика,
	|	ВТ_Товары.Упаковка КАК Упаковка,
	|	ЕСТЬNULL(Штрихкоды.Штрихкод, """") КАК Штрихкод,
	|	ВТ_Товары.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ВТ_Товары.Количество КАК Количество,
	|	ВТ_Товары.КоличествоУпаковок КАК КоличествоУпаковок,
	|	ВТ_Товары.Маркируемый КАК Маркируемый,
	|	ВТ_Товары.Весовой КАК Весовой,
	|	ВТ_Товары.ВесЕдиницыТовара КАК ВесЕдиницыТовара,
	|	ВТ_Товары.Цена КАК Цена,
	|	ВТ_Товары.Сумма КАК Сумма,
	|	ВТ_Товары.СтавкаНДС КАК СтавкаНДС,
	|	ВТ_Товары.СуммаНДС КАК СуммаНДС
	|ПОМЕСТИТЬ ВТ_ТоварыИтог
	|ИЗ
	|	ВТ_Товары КАК ВТ_Товары
	|		ЛЕВОЕ СОЕДИНЕНИЕ Штрихкоды КАК Штрихкоды
	|		ПО ВТ_Товары.Номенклатура = Штрихкоды.Номенклатура
	|			И ВТ_Товары.Характеристика = Штрихкоды.Характеристика
	|			И ВТ_Товары.Упаковка = Штрихкоды.Упаковка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ТоварыИтог.Номенклатура КАК Номенклатура,
	|	ВТ_ТоварыИтог.Характеристика КАК Характеристика,
	|	ВТ_ТоварыИтог.Упаковка КАК Упаковка,
	|	ВТ_ТоварыИтог.Штрихкод КАК Штрихкод,
	|	ВТ_ТоварыИтог.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ВТ_ТоварыИтог.Количество КАК Количество,
	|	ВТ_ТоварыИтог.КоличествоУпаковок КАК КоличествоУпаковок,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ВидыНоменклатуры.ИспользоватьСерии, ЛОЖЬ)
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СтатусУказанияСерий,
	|	ВТ_ТоварыИтог.Маркируемый КАК Маркируемый,
	|	ВТ_ТоварыИтог.Весовой КАК Весовой,
	|	ВТ_ТоварыИтог.ВесЕдиницыТовара КАК ВесЕдиницыТовара,
	|	ВТ_ТоварыИтог.Цена КАК Цена,
	|	ВТ_ТоварыИтог.Сумма КАК Сумма,
	|	ВТ_ТоварыИтог.СтавкаНДС КАК СтавкаНДС,
	|	ВТ_ТоварыИтог.СуммаНДС КАК СуммаНДС
	|ИЗ
	|	ВТ_ТоварыИтог КАК ВТ_ТоварыИтог
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыНоменклатуры КАК ВидыНоменклатуры
	|		ПО ВТ_ТоварыИтог.Номенклатура.ВидНоменклатуры = ВидыНоменклатуры.Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВТ_ТоварыИтог.НомерСтроки";
	
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		ИспользованиеПКО.Документ_ЗаказПоставщику_Отправка = Ложь;
	Иначе
		Товары = Результат.Выгрузить();
		ДанныеИБ.ДополнительныеСвойства.Вставить("Товары", Товары);
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Документ_ПересчетТоваров_Отправка
Процедура ДобавитьПОД_Документ_ПересчетТоваров_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_ПересчетТоваров_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Документы.ПересчетТоваров;
	ПравилоОбработки.ПриОбработке            = "ПОД_Документ_ПересчетТоваров_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ПересчетТоваров_Отправка");
КонецПроцедуры

Процедура ПОД_Документ_ПересчетТоваров_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПересчетТоваровТовары.НомерСтроки КАК НомерСтроки,
	|	ПересчетТоваровТовары.Номенклатура КАК Номенклатура,
	|	ПересчетТоваровТовары.Характеристика КАК Характеристика,
	|	ПересчетТоваровТовары.Упаковка КАК Упаковка,
	|	ПересчетТоваровТовары.Количество КАК Количество,
	|	ПересчетТоваровТовары.КоличествоУпаковок КАК КоличествоУпаковок
	|ПОМЕСТИТЬ Товары
	|ИЗ
	|	Документ.ПересчетТоваров.Товары КАК ПересчетТоваровТовары
	|ГДЕ
	|	ПересчетТоваровТовары.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.Номенклатура КАК Номенклатура,
	|	Товары.Характеристика КАК Характеристика,
	|	Товары.Упаковка КАК Упаковка,
	|	МАКСИМУМ(ЕСТЬNULL(Штрихкоды.Штрихкод, """")) КАК Штрихкод
	|ПОМЕСТИТЬ Штрихкоды
	|ИЗ
	|	Товары КАК Товары
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.Штрихкоды КАК Штрихкоды
	|		ПО Товары.Номенклатура = Штрихкоды.Владелец
	|			И Товары.Характеристика = Штрихкоды.Характеристика
	|			И Товары.Упаковка = Штрихкоды.Упаковка
	|
	|СГРУППИРОВАТЬ ПО
	|	Товары.Номенклатура,
	|	Товары.Характеристика,
	|	Товары.Упаковка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.НомерСтроки КАК НомерСтроки,
	|	Товары.Номенклатура КАК Номенклатура,
	|	Товары.Характеристика КАК Характеристика,
	|	Товары.Упаковка КАК Упаковка,
	|	СправочникНоменклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	Товары.Количество КАК Количество,
	|	Товары.КоличествоУпаковок КАК КоличествоУпаковок
	|ПОМЕСТИТЬ ВТ_Товары
	|ИЗ
	|	Товары КАК Товары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
	|		ПО Товары.Номенклатура = СправочникНоменклатура.Ссылка
	|			И (СправочникНоменклатура.ТипНоменклатуры <> ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Услуга))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Товары.Номенклатура КАК Номенклатура,
	|	ВТ_Товары.Характеристика КАК Характеристика,
	|	ВТ_Товары.Упаковка КАК Упаковка,
	|	ЕСТЬNULL(Штрихкоды.Штрихкод, """") КАК Штрихкод,
	|	ВТ_Товары.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ВТ_Товары.Количество КАК Количество,
	|	ВТ_Товары.КоличествоУпаковок КАК КоличествоУпаковок
	|ИЗ
	|	ВТ_Товары КАК ВТ_Товары
	|		ЛЕВОЕ СОЕДИНЕНИЕ Штрихкоды КАК Штрихкоды
	|		ПО ВТ_Товары.Номенклатура = Штрихкоды.Номенклатура
	|			И ВТ_Товары.Характеристика = Штрихкоды.Характеристика
	|			И ВТ_Товары.Упаковка = Штрихкоды.Упаковка";
	
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		ИспользованиеПКО.Документ_ПересчетТоваров_Отправка = Ложь;
	Иначе
		Товары = Результат.Выгрузить();
		ДанныеИБ.ДополнительныеСвойства.Вставить("Товары", Товары);
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Документ_ПоступлениеТоваров_Отправка
Процедура ДобавитьПОД_Документ_ПоступлениеТоваров_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_ПоступлениеТоваров_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Документы.ПоступлениеТоваров;
	ПравилоОбработки.ПриОбработке            = "ПОД_Документ_ПоступлениеТоваров_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ПоступлениеТоваров_Отправка");
КонецПроцедуры

Процедура ПОД_Документ_ПоступлениеТоваров_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
	Запрос.УстановитьПараметр("ОсобенностиУчетаИСМП", ОсобенностиУчетаИСМП());
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПоступлениеТоваровТовары.НомерСтроки КАК НомерСтроки,
	|	ПоступлениеТоваровТовары.Номенклатура КАК Номенклатура,
	|	ПоступлениеТоваровТовары.Характеристика КАК Характеристика,
	|	ПоступлениеТоваровТовары.Количество КАК Количество,
	|	ПоступлениеТоваровТовары.Цена КАК Цена,
	|	ПоступлениеТоваровТовары.Сумма КАК Сумма,
	|	ПоступлениеТоваровТовары.СтавкаНДС КАК СтавкаНДС,
	|	ПоступлениеТоваровТовары.СуммаНДС КАК СуммаНДС,
	|	ПоступлениеТоваровТовары.Упаковка КАК Упаковка,
	|	ПоступлениеТоваровТовары.КоличествоУпаковок КАК КоличествоУпаковок,
	|	ПоступлениеТоваровТовары.СтатусУказанияСерий КАК СтатусУказанияСерий
	|ПОМЕСТИТЬ Товары
	|ИЗ
	|	Документ.ПоступлениеТоваров.Товары КАК ПоступлениеТоваровТовары
	|ГДЕ
	|	ПоступлениеТоваровТовары.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПоступлениеТоваровСерии.Номенклатура КАК Номенклатура,
	|	ПоступлениеТоваровСерии.Характеристика КАК Характеристика,
	|	ПоступлениеТоваровСерии.Серия КАК Серия,
	|	ПоступлениеТоваровСерии.Количество КАК Количество,
	|	ЕСТЬNULL(СерииНоменклатуры.Номер, """") КАК Номер
	|ПОМЕСТИТЬ Серии
	|ИЗ
	|	Документ.ПоступлениеТоваров.Серии КАК ПоступлениеТоваровСерии
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СерииНоменклатуры КАК СерииНоменклатуры
	|		ПО ПоступлениеТоваровСерии.Серия = СерииНоменклатуры.Ссылка
	|ГДЕ
	|	ПоступлениеТоваровСерии.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.Номенклатура КАК Номенклатура,
	|	Товары.Характеристика КАК Характеристика,
	|	Товары.Упаковка КАК Упаковка,
	|	МАКСИМУМ(ЕСТЬNULL(Штрихкоды.Штрихкод, """")) КАК Штрихкод
	|ПОМЕСТИТЬ Штрихкоды
	|ИЗ
	|	Товары КАК Товары
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.Штрихкоды КАК Штрихкоды
	|		ПО Товары.Номенклатура = Штрихкоды.Владелец
	|			И Товары.Характеристика = Штрихкоды.Характеристика
	|			И Товары.Упаковка = Штрихкоды.Упаковка
	|
	|СГРУППИРОВАТЬ ПО
	|	Товары.Номенклатура,
	|	Товары.Характеристика,
	|	Товары.Упаковка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.НомерСтроки КАК НомерСтроки,
	|	Товары.Номенклатура КАК Номенклатура,
	|	Товары.Характеристика КАК Характеристика,
	|	Товары.Упаковка КАК Упаковка,
	|	СправочникНоменклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	Товары.Количество КАК Количество,
	|	Товары.КоличествоУпаковок КАК КоличествоУпаковок,
	|	Товары.СтатусУказанияСерий КАК СтатусУказанияСерий,
	|	ЛОЖЬ КАК Маркируемый,
	|	СправочникНоменклатура.Весовой КАК Весовой,
	|	СправочникНоменклатура.Вес КАК ВесЕдиницыТовара,
	|	Товары.Цена КАК Цена,
	|	Товары.Сумма КАК Сумма,
	|	Товары.СтавкаНДС КАК СтавкаНДС,
	|	Товары.СуммаНДС КАК СуммаНДС
	|ПОМЕСТИТЬ ВТ_Товары
	|ИЗ
	|	Товары КАК Товары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
	|		ПО Товары.Номенклатура = СправочникНоменклатура.Ссылка
	|ГДЕ
	|	СправочникНоменклатура.ОсобенностьУчета = ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.БезОсобенностейУчета)
	|	И СправочникНоменклатура.ТипНоменклатуры <> ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Услуга)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Товары.НомерСтроки,
	|	Товары.Номенклатура,
	|	Товары.Характеристика,
	|	Товары.Упаковка,
	|	СправочникНоменклатура.ЕдиницаИзмерения,
	|	Товары.Количество,
	|	Товары.КоличествоУпаковок,
	|	Товары.СтатусУказанияСерий,
	|	ЕСТЬNULL(ВидыАлкогольнойПродукции.Маркируемый, ЛОЖЬ),
	|	СправочникНоменклатура.Весовой,
	|	СправочникНоменклатура.Вес,
	|	Товары.Цена,
	|	Товары.Сумма,
	|	Товары.СтавкаНДС,
	|	Товары.СуммаНДС
	|ИЗ
	|	Товары КАК Товары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
	|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыАлкогольнойПродукции КАК ВидыАлкогольнойПродукции
	|			ПО СправочникНоменклатура.ВидАлкогольнойПродукцииЕГАИС = ВидыАлкогольнойПродукции.Ссылка
	|		ПО Товары.Номенклатура = СправочникНоменклатура.Ссылка
	|ГДЕ
	|	СправочникНоменклатура.ОсобенностьУчета = ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.АлкогольнаяПродукция)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Товары.НомерСтроки,
	|	Товары.Номенклатура,
	|	Товары.Характеристика,
	|	Товары.Упаковка,
	|	СправочникНоменклатура.ЕдиницаИзмерения,
	|	Товары.Количество,
	|	Товары.КоличествоУпаковок,
	|	Товары.СтатусУказанияСерий,
	|	ИСТИНА,
	|	СправочникНоменклатура.Весовой,
	|	СправочникНоменклатура.Вес,
	|	Товары.Цена,
	|	Товары.Сумма,
	|	Товары.СтавкаНДС,
	|	Товары.СуммаНДС
	|ИЗ
	|	Товары КАК Товары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
	|		ПО Товары.Номенклатура = СправочникНоменклатура.Ссылка
	|ГДЕ
	|	СправочникНоменклатура.ОсобенностьУчета В(&ОсобенностиУчетаИСМП)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Товары.НомерСтроки КАК НомерСтроки,
	|	ВТ_Товары.Номенклатура КАК Номенклатура,
	|	ВТ_Товары.Характеристика КАК Характеристика,
	|	ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка) КАК Серия,
	|	ВТ_Товары.Упаковка КАК Упаковка,
	|	ЕСТЬNULL(Штрихкоды.Штрихкод, """") КАК Штрихкод,
	|	ВТ_Товары.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ВТ_Товары.Количество КАК Количество,
	|	ВТ_Товары.КоличествоУпаковок КАК КоличествоУпаковок,
	|	ВТ_Товары.СтатусУказанияСерий КАК СтатусУказанияСерий,
	|	ВТ_Товары.Маркируемый КАК Маркируемый,
	|	ВТ_Товары.Весовой КАК Весовой,
	|	ВТ_Товары.ВесЕдиницыТовара КАК ВесЕдиницыТовара,
	|	ВТ_Товары.Цена КАК Цена,
	|	ВТ_Товары.Сумма КАК Сумма,
	|	ВТ_Товары.СтавкаНДС КАК СтавкаНДС,
	|	ВТ_Товары.СуммаНДС КАК СуммаНДС
	|ПОМЕСТИТЬ ВТ_ТоварыИтог
	|ИЗ
	|	ВТ_Товары КАК ВТ_Товары
	|		ЛЕВОЕ СОЕДИНЕНИЕ Штрихкоды КАК Штрихкоды
	|		ПО ВТ_Товары.Номенклатура = Штрихкоды.Номенклатура
	|			И ВТ_Товары.Характеристика = Штрихкоды.Характеристика
	|			И ВТ_Товары.Упаковка = Штрихкоды.Упаковка
	|ГДЕ
	|	ВТ_Товары.СтатусУказанияСерий В (0, 1)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВТ_Товары.НомерСтроки,
	|	ВТ_Товары.Номенклатура,
	|	ВТ_Товары.Характеристика,
	|	ВЫБОР
	|		КОГДА Серии.Номер = """"
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
	|		ИНАЧЕ Серии.Серия
	|	КОНЕЦ,
	|	ВТ_Товары.Упаковка,
	|	ЕСТЬNULL(Штрихкоды.Штрихкод, """"),
	|	ВТ_Товары.ЕдиницаИзмерения,
	|	Серии.Количество,
	|	Серии.Количество,
	|	ВЫБОР
	|		КОГДА Серии.Номер = """"
	|			ТОГДА 1
	|		ИНАЧЕ ВТ_Товары.СтатусУказанияСерий
	|	КОНЕЦ,
	|	ВТ_Товары.Маркируемый,
	|	ВТ_Товары.Весовой,
	|	ВТ_Товары.ВесЕдиницыТовара,
	|	ВТ_Товары.Цена,
	|	ВТ_Товары.Сумма * Серии.Количество / ВТ_Товары.Количество,
	|	ВТ_Товары.СтавкаНДС,
	|	ВТ_Товары.СуммаНДС * Серии.Количество / ВТ_Товары.Количество
	|ИЗ
	|	ВТ_Товары КАК ВТ_Товары
	|		ЛЕВОЕ СОЕДИНЕНИЕ Штрихкоды КАК Штрихкоды
	|		ПО ВТ_Товары.Номенклатура = Штрихкоды.Номенклатура
	|			И ВТ_Товары.Характеристика = Штрихкоды.Характеристика
	|			И ВТ_Товары.Упаковка = Штрихкоды.Упаковка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Серии КАК Серии
	|		ПО ВТ_Товары.Номенклатура = Серии.Номенклатура
	|			И ВТ_Товары.Характеристика = Серии.Характеристика
	|ГДЕ
	|	ВТ_Товары.СтатусУказанияСерий = 2
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ТоварыИтог.Номенклатура КАК Номенклатура,
	|	ВТ_ТоварыИтог.Характеристика КАК Характеристика,
	|	ВТ_ТоварыИтог.Серия КАК Серия,
	|	ВТ_ТоварыИтог.Упаковка КАК Упаковка,
	|	ВТ_ТоварыИтог.Штрихкод КАК Штрихкод,
	|	ВТ_ТоварыИтог.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ВТ_ТоварыИтог.Количество КАК Количество,
	|	ВТ_ТоварыИтог.КоличествоУпаковок КАК КоличествоУпаковок,
	|	ВТ_ТоварыИтог.СтатусУказанияСерий КАК СтатусУказанияСерий,
	|	ВТ_ТоварыИтог.Маркируемый КАК Маркируемый,
	|	ВТ_ТоварыИтог.Весовой КАК Весовой,
	|	ВТ_ТоварыИтог.ВесЕдиницыТовара КАК ВесЕдиницыТовара,
	|	ВТ_ТоварыИтог.Цена КАК Цена,
	|	ВТ_ТоварыИтог.Сумма КАК Сумма,
	|	ВТ_ТоварыИтог.СтавкаНДС КАК СтавкаНДС,
	|	ВТ_ТоварыИтог.СуммаНДС КАК СуммаНДС
	|ИЗ
	|	ВТ_ТоварыИтог КАК ВТ_ТоварыИтог
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВТ_ТоварыИтог.НомерСтроки";
	
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		ИспользованиеПКО.Документ_ПоступлениеТоваров_Отправка = Ложь;
	Иначе
		Товары = Результат.Выгрузить();
		ДанныеИБ.ДополнительныеСвойства.Вставить("Товары", Товары);
	КонецЕсли;
	
	//Маркировка ЕГАИС
	ТаблицаМаркировка = Новый ТаблицаЗначений;
	ТаблицаМаркировка.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	ТаблицаМаркировка.Колонки.Добавить("Характеристика", Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
	ТаблицаМаркировка.Колонки.Добавить("Серия", Новый ОписаниеТипов("СправочникСсылка.СерииНоменклатуры"));
	ТаблицаМаркировка.Колонки.Добавить("НомерАкцизнойМарки", Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(200)));
	
	ТТНВходящаяЕГАИС = ДанныеИБ.Ссылка.ТТНВходящаяЕГАИС;
	Если ЗначениеЗаполнено(ТТНВходящаяЕГАИС) Тогда
		ДанныеПроверкиИПодбора = ТТНВходящаяЕГАИС.ДанныеПроверкиИПодбора.Получить();
		Если ДанныеПроверкиИПодбора <> Неопределено Тогда
			Для Каждого СтрокаДерева Из ДанныеПроверкиИПодбора.ДеревоМаркированнойПродукции.Строки Цикл
				Если НЕ ИнтеграцияИСКлиентСервер.ЭтоУпаковка(СтрокаДерева.ТипУпаковки) Тогда
					НоваяСтрока = ТаблицаМаркировка.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаДерева);
					НоваяСтрока.НомерАкцизнойМарки = СтрокаДерева.Штрихкод;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	ДанныеИБ.ДополнительныеСвойства.Вставить("Маркировка", ТаблицаМаркировка);
КонецПроцедуры
#КонецОбласти
#Область Справочник_ЕдиницыИзмерения_Отправка
Процедура ДобавитьПОД_Справочник_ЕдиницыИзмерения_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_ЕдиницыИзмерения_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Справочники.БазовыеЕдиницыИзмерения;
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_ЕдиницыИзмерения");
КонецПроцедуры
#КонецОбласти
#Область Справочник_Магазины_Отправка
Процедура ДобавитьПОД_Справочник_Магазины_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_Магазины_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Справочники.Магазины;
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_Магазины_Отправка");
КонецПроцедуры
#КонецОбласти
#Область Справочник_Номенклатура_Отправка
Процедура ДобавитьПОД_Справочник_Номенклатура_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_Номенклатура_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Справочники.Номенклатура;
	ПравилоОбработки.ПриОбработке            = "ПОД_Справочник_Номенклатура_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_Номенклатура_Отправка");
КонецПроцедуры

Процедура ПОД_Справочник_Номенклатура_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	Если ДанныеИБ.ТипНоменклатуры <> Перечисления.ТипыНоменклатуры.Товар Тогда
		ИспользованиеПКО.Справочник_Номенклатура_Отправка = Ложь;
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Справочник_Организации_Отправка
Процедура ДобавитьПОД_Справочник_Организации_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_Организации_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Справочники.Организации;
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_Организации_Отправка");
КонецПроцедуры
#КонецОбласти
#Область Справочник_Склады_Отправка
Процедура ДобавитьПОД_Справочник_Склады_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_Склады_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Справочники.Склады;
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_Склады_Отправка");
КонецПроцедуры
#КонецОбласти
#Область Справочник_Упаковки_Отправка
Процедура ДобавитьПОД_Справочник_Упаковки_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_Упаковки_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Справочники.УпаковкиНоменклатуры;
	ПравилоОбработки.ПриОбработке            = "ПОД_Справочник_Упаковки_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_Упаковки");
КонецПроцедуры

Процедура ПОД_Справочник_Упаковки_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	ВладелецТип = ТипЗнч(ДанныеИБ.Владелец);
	Если ВладелецТип <> Тип("СправочникСсылка.Номенклатура")
		ИЛИ ВладелецТип <> Тип("СправочникСсылка.НаборыУпаковок") Тогда
		ИспользованиеПКО.Справочник_Упаковки = Ложь;
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Справочник_ХарактеристикиНоменклатуры_Отправка
Процедура ДобавитьПОД_Справочник_ХарактеристикиНоменклатуры_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_ХарактеристикиНоменклатуры_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Справочники.ХарактеристикиНоменклатуры;
	ПравилоОбработки.ПриОбработке            = "ПОД_Справочник_ХарактеристикиНоменклатуры_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_ХарактеристикиНоменклатуры");
КонецПроцедуры

Процедура ПОД_Справочник_ХарактеристикиНоменклатуры_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	Если НЕ (ЗначениеЗаполнено(ДанныеИБ.Владелец) И ТипЗнч(ДанныеИБ.Владелец) = Тип("СправочникСсылка.Номенклатура")) Тогда
		ИспользованиеПКО.Справочник_ХарактеристикиНоменклатуры = Ложь;
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Справочник_ШтрихкодыНоменклатуры_Отправка
Процедура ДобавитьПОД_Справочник_ШтрихкодыНоменклатуры_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_ШтрихкодыНоменклатуры_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.РегистрыСведений.Штрихкоды;
	ПравилоОбработки.ПриОбработке            = "ПОД_Справочник_ШтрихкодыНоменклатуры_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_Штрихкоды_Отправка");
КонецПроцедуры

Процедура ПОД_Справочник_ШтрихкодыНоменклатуры_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	Номенклатура = ДанныеИБ.Отбор.Владелец.Значение;
	
	Если Не (ЗначениеЗаполнено(Номенклатура) И ТипЗнч(Номенклатура) = Тип("СправочникСсылка.Номенклатура")) Тогда
		ИспользованиеПКО.Справочник_Штрихкоды_Отправка = Ложь;
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#КонецОбласти
#Область Получение
#Область Документ_ПересчетТоваров_Получение
Процедура ДобавитьПОД_Документ_ПересчетТоваров_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_ПересчетТоваров_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Документ.ПересчетТоваров";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ПересчетТоваров_Получение");
КонецПроцедуры
#КонецОбласти
#Область Документ_РаспоряжениеНаОтгрузку_Получение
Процедура ДобавитьПОД_Документ_РаспоряжениеНаОтгрузку_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_РаспоряжениеНаОтгрузку_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Документ.РаспоряжениеНаОтгрузку";
	ПравилоОбработки.ПриОбработке            = "ПОД_Документ_РаспоряжениеНаОтгрузку_Получение_ПриОбработке";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ВозвратТоваровПоставщику_Получение");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ЧекККМ_Получение");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ОтгрузкаПоЗаказуНаПеремещение_Получение");
КонецПроцедуры

Процедура ПОД_Документ_РаспоряжениеНаОтгрузку_Получение_ПриОбработке(ДанныеXDTO, ИспользованиеПКО, КомпонентыОбмена)
	ИспользованиеПКО.Документ_ОтгрузкаПоЗаказуНаПеремещение_Получение = Ложь;
	ИспользованиеПКО.Документ_ВозвратТоваровПоставщику_Получение = Ложь;
	ИспользованиеПКО.Документ_ЧекККМ_Получение = Ложь;
	
	Если ДанныеXDTO.ВидОперации.Значение = "ОтгрузкаПоВозвратуПоставщику" Тогда
		ИспользованиеПКО.Документ_ВозвратТоваровПоставщику_Получение = Истина;
	ИначеЕсли ДанныеXDTO.ВидОперации.Значение = "ОтгрузкаПоПеремещению" Тогда
		ИспользованиеПКО.Документ_ОтгрузкаПоЗаказуНаПеремещение_Получение = Истина;
	ИначеЕсли ДанныеXDTO.ВидОперации.Значение = "ОтгрузкаКлиенту" Тогда
		ИспользованиеПКО.Документ_ЧекККМ_Получение = Истина;
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Документ_РаспоряжениеНаПриемку_Получение
Процедура ДобавитьПОД_Документ_РаспоряжениеНаПриемку_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_РаспоряжениеНаПриемку_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Документ.РаспоряжениеНаПриемку";
	ПравилоОбработки.ПриОбработке            = "ПОД_Документ_РаспоряжениеНаПриемку_Получение_ПриОбработке";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ПоступлениеТоваров_Получение");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ПоступлениеПоЗаказу_Получение");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ПриемкаПоЗаказуНаПеремещение_Получение");
КонецПроцедуры

Процедура ПОД_Документ_РаспоряжениеНаПриемку_Получение_ПриОбработке(ДанныеXDTO, ИспользованиеПКО, КомпонентыОбмена)
	ИспользованиеПКО.Документ_ПоступлениеТоваров_Получение = Ложь;
	ИспользованиеПКО.Документ_ПоступлениеПоЗаказу_Получение = Ложь;
	ИспользованиеПКО.Документ_ПриемкаПоЗаказуНаПеремещение_Получение = Ложь;
	
	Если ДанныеXDTO.ВидОперации.Значение = "ПриемкаОтПоставщика" Тогда
		Идентификатор = Новый УникальныйИдентификатор(ДанныеXDTO.Ссылка.Значение);
		ДокументПоступление = Документы.ПоступлениеТоваров.ПолучитьСсылку(Идентификатор);
		ДокументЗаказПоставщику = Документы.ЗаказПоставщику.ПолучитьСсылку(Идентификатор);
		
		Если ДокументПоступление.Дата = Дата(1,1,1)
			И ДокументЗаказПоставщику.Дата <> Дата(1,1,1) Тогда
			ИспользованиеПКО.Документ_ПоступлениеПоЗаказу_Получение = Истина;
		Иначе
			ИспользованиеПКО.Документ_ПоступлениеТоваров_Получение = Истина;
		КонецЕсли;
		
	ИначеЕсли ДанныеXDTO.ВидОперации.Значение = "ПриемкаПоПеремещению" Тогда
		ИспользованиеПКО.Документ_ПриемкаПоЗаказуНаПеремещение_Получение = Истина;
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Справочник_СерииНоменклатуры_Получение
Процедура ДобавитьПОД_Справочник_СерииНоменклатуры_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_СерииНоменклатуры_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Справочник.СерииНоменклатуры";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_СерииНоменклатуры_Получение");
КонецПроцедуры
#КонецОбласти
#КонецОбласти

#КонецОбласти
#Область ПКО
// Заполняет таблицу правил конвертации объектов.
//
// Параметры:
//  НаправлениеОбмена - строка ("Отправка" либо "Получение").
//  ПравилаКонвертации - таблица значений, в которую добавляются правила. 
Процедура ЗаполнитьПравилаКонвертацииОбъектов(НаправлениеОбмена, ПравилаКонвертации) Экспорт
	Если НаправлениеОбмена = "Отправка" Тогда
		ДобавитьПКО_Документ_ВозвратТоваровПоставщику_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ЗаказПокупателя_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ЗаказПоставщику_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ОтгрузкаПоЗаказуНаПеремещение_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ПересчетТоваров_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ПоступлениеТоваров_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ПриемкаПоЗаказуНаПеремещение_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Справочник_ВидыНоменклатуры_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Справочник_Контрагенты_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Справочник_Магазины_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Справочник_Номенклатура_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Справочник_Организации_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Справочник_СерииНоменклатуры_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Справочник_Склады_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Справочник_Штрихкоды_Отправка(ПравилаКонвертации);
	ИначеЕсли НаправлениеОбмена = "Получение" Тогда
		ДобавитьПКО_Документ_ВозвратТоваровПоставщику_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_ОтгрузкаПоЗаказуНаПеремещение_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_ПересчетТоваров_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_ПоступлениеПоЗаказу_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_ПоступлениеТоваров_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_ПриемкаПоЗаказуНаПеремещение_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_ЧекККМ_Получение(ПравилаКонвертации);
		ДобавитьПКО_Справочник_Контрагенты_Получение(ПравилаКонвертации);
		ДобавитьПКО_Справочник_Номенклатура_Получение(ПравилаКонвертации);
		ДобавитьПКО_Справочник_Организации_Получение(ПравилаКонвертации);
		ДобавитьПКО_Справочник_Пользователи_Получение(ПравилаКонвертации);
		ДобавитьПКО_Справочник_СерииНоменклатуры_Получение(ПравилаКонвертации);
		ДобавитьПКО_Справочник_Склады_Получение(ПравилаКонвертации);
	КонецЕсли;
	ДобавитьПКО_Справочник_ЕдиницыИзмерения(ПравилаКонвертации);
	ДобавитьПКО_Справочник_Упаковки(ПравилаКонвертации);
	ДобавитьПКО_Справочник_ХарактеристикиНоменклатуры(ПравилаКонвертации);
КонецПроцедуры

Функция ДобавитьПКТЧ(ПравилоКонвертации, ИмяТЧКонфигурации, ИмяТЧФормата)
    Если ПравилоКонвертации.СвойстваТабличныхЧастей.Колонки.Количество() = 0 Тогда
        ОбменДаннымиXDTOСервер.ИнициализироватьСвойстваТабличныхЧастей(ПравилоКонвертации);
    КонецЕсли;
    КонвертацияТабличнойЧасти                = ПравилоКонвертации.СвойстваТабличныхЧастей.Добавить();
    КонвертацияТабличнойЧасти.ТЧКонфигурации = ИмяТЧКонфигурации;
    КонвертацияТабличнойЧасти.ТЧФормата      = ИмяТЧФормата;
    КонвертацияТабличнойЧасти.Свойства       = ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации();
    Возврат КонвертацияТабличнойЧасти.Свойства;
КонецФункции

Процедура ДобавитьПКС(РодительПКС, СвойствоКонфигурации, СвойствоФормата, ИспользуетсяАлгоритмКонвертации = 0, 
                    ПравилоКонвертацииСвойства = "")
	НоваяСтрока                                 = РодительПКС.Добавить();
	НоваяСтрока.СвойствоКонфигурации            = СвойствоКонфигурации;
	НоваяСтрока.СвойствоФормата                 = СвойствоФормата;
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = ?(ИспользуетсяАлгоритмКонвертации = 0, Ложь, Истина);
	НоваяСтрока.ПравилоКонвертацииСвойства      = ПравилоКонвертацииСвойства;
КонецПроцедуры

#Область Отправка
#Область Документ_ВозвратТоваровПоставщику_Отправка
Процедура ДобавитьПКО_Документ_ВозвратТоваровПоставщику_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_ВозвратТоваровПоставщику_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.ВозвратТоваровПоставщику;
	ПравилоКонвертации.ОбъектФормата     = "Документ.РаспоряжениеНаОтгрузку";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ВозвратТоваровПоставщику_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Комментарий",     "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Контрагент",      "Контрагент", , "Справочник_Контрагенты_Отправка");
	ДобавитьПКС(СвойстваШапки, "Организация",     "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "Склад",           "Склад", , "Справочник_Склады_Отправка");
	ДобавитьПКС(СвойстваШапки, "Ссылка",          "Ссылка");
	ДобавитьПКС(СвойстваШапки, "ЦенаВключаетНДС", "ЦенаВключаетНДС");
	ДобавитьПКС(СвойстваШапки, "",                "ВидОперации", 1);
	ДобавитьПКС(СвойстваШапки, "",                "Менеджер", 1);
	ДобавитьПКС(СвойстваШапки, "",                "ОжидаемаяДатаОтгрузки", 1);
	ДобавитьПКС(СвойстваШапки, "",                "Представление", 1);
	ДобавитьПКС(СвойстваШапки, "",                "ТелефонМенеджера", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "Маркировка");
	ДобавитьПКС(СвойстваТЧ, "", "Номенклатура", 1,"Справочник_Номенклатура_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "НомерАкцизнойМарки", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Характеристика", 1,"Справочник_ХарактеристикиНоменклатуры");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "Товары");
	ДобавитьПКС(СвойстваТЧ, "", "ВесЕдиницыТовара", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Весовой", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ЕдиницаИзмерения", 1,"Справочник_ЕдиницыИзмерения");
	ДобавитьПКС(СвойстваТЧ, "", "Количество", 1);
	ДобавитьПКС(СвойстваТЧ, "", "КоличествоУпаковок", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Маркируемый", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Номенклатура", 1,"Справочник_Номенклатура_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "Серия", 1,"Справочник_СерииНоменклатуры_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "СтавкаНДС", 1,"Перечисление_СтавкиНДС");
	ДобавитьПКС(СвойстваТЧ, "", "СтатусУказанияСерий", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаНДС", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Упаковка", 1,"Справочник_Упаковки");
	ДобавитьПКС(СвойстваТЧ, "", "Характеристика", 1,"Справочник_ХарактеристикиНоменклатуры");
	ДобавитьПКС(СвойстваТЧ, "", "Цена", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Штрихкод", 1);

КонецПроцедуры

Процедура ПКО_Документ_ВозвратТоваровПоставщику_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	ДанныеXDTO.Вставить("Представление", Строка(ДанныеИБ.Ссылка));
	ДанныеXDTO.Вставить("ВидОперации", "ОтгрузкаПоВозвратуПоставщику");
	
	ДанныеXDTO.Вставить("ОжидаемаяДатаОтгрузки", ТекущаяДатаСеанса());
	ДанныеXDTO.Вставить("Товары", ДанныеИБ.ДополнительныеСвойства.Товары);
	ДанныеXDTO.Вставить("Маркировка", ДанныеИБ.ДополнительныеСвойства.Маркировка);
	
	ОтветственныйЗаДокумент = ДанныеИБ.Ответственный;
	ТелефонМенеджера = "";
	Менеджер = ОтветственныйЗаДокумент.ФизическоеЛицо.Наименование;
	
	Для Каждого СтрокаКИ Из ОтветственныйЗаДокумент.КонтактнаяИнформация Цикл
		Если СтрокаКИ.Тип = Перечисления.ТипыКонтактнойИнформации.Телефон Тогда
			ТелефонМенеджера = СтрокаКИ.Представление;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	ДанныеXDTO.Вставить("Менеджер", Менеджер);	
	ДанныеXDTO.Вставить("ТелефонМенеджера", ТелефонМенеджера);
КонецПроцедуры
#КонецОбласти
#Область Документ_ЗаказПокупателя_Отправка
Процедура ДобавитьПКО_Документ_ЗаказПокупателя_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_ЗаказПокупателя_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.ЗаказПокупателя;
	ПравилоКонвертации.ОбъектФормата     = "Документ.РаспоряжениеНаОтгрузку";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ЗаказПокупателя_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "ЖелаемаяДатаПродажи", "ОжидаемаяДатаОтгрузки");
	ДобавитьПКС(СвойстваШапки, "Комментарий",         "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Контрагент",          "Контрагент", , "Справочник_Контрагенты_Отправка");
	ДобавитьПКС(СвойстваШапки, "Организация",         "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "Склад",               "Склад", , "Справочник_Склады_Отправка");
	ДобавитьПКС(СвойстваШапки, "Ссылка",              "Ссылка");
	ДобавитьПКС(СвойстваШапки, "ЦенаВключаетНДС",     "ЦенаВключаетНДС");
	ДобавитьПКС(СвойстваШапки, "",                    "ВидОперации", 1);
	ДобавитьПКС(СвойстваШапки, "",                    "Менеджер", 1);
	ДобавитьПКС(СвойстваШапки, "",                    "Представление", 1);
	ДобавитьПКС(СвойстваШапки, "",                    "ТелефонМенеджера", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "Товары");
	ДобавитьПКС(СвойстваТЧ, "", "ВесЕдиницыТовара", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Весовой", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ЕдиницаИзмерения", 1,"Справочник_ЕдиницыИзмерения");
	ДобавитьПКС(СвойстваТЧ, "", "Количество", 1);
	ДобавитьПКС(СвойстваТЧ, "", "КоличествоУпаковок", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Маркируемый", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Номенклатура", 1,"Справочник_Номенклатура_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "СтавкаНДС", 1,"Перечисление_СтавкиНДС");
	ДобавитьПКС(СвойстваТЧ, "", "СтатусУказанияСерий", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаНДС", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Упаковка", 1,"Справочник_Упаковки");
	ДобавитьПКС(СвойстваТЧ, "", "Характеристика", 1,"Справочник_ХарактеристикиНоменклатуры");
	ДобавитьПКС(СвойстваТЧ, "", "Цена", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Штрихкод", 1);

КонецПроцедуры

Процедура ПКО_Документ_ЗаказПокупателя_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ЗаказПокупателя", ДанныеИБ.Ссылка);
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ЧекККМ.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.ЧекККМ КАК ЧекККМ
	|ГДЕ
	|	ЧекККМ.ЗаказПокупателя = &ЗаказПокупателя
	|	И ЧекККМ.СтатусЧекаККМ В (ЗНАЧЕНИЕ(Перечисление.СтатусыЧековККМ.Пробитый), ЗНАЧЕНИЕ(Перечисление.СтатусыЧековККМ.Архивный))
	|	И НЕ ЧекККМ.ОперацияСДенежнымиСредствами
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	РеализацияТоваров.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.РеализацияТоваров КАК РеализацияТоваров
	|ГДЕ
	|	НЕ РеализацияТоваров.ПометкаУдаления
	|	И РеализацияТоваров.Проведен
	|	И РеализацияТоваров.ЗаказПокупателя = &ЗаказПокупателя";
	
	Результат = Запрос.ВыполнитьПакет();
	Если НЕ(Результат[0].Пустой()
		И Результат[1].Пустой()) Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	ДанныеXDTO.Вставить("Представление", Строка(ДанныеИБ.Ссылка));
	ДанныеXDTO.Вставить("ВидОперации", "ОтгрузкаКлиенту");
	
	ДанныеXDTO.Вставить("Товары", ДанныеИБ.ДополнительныеСвойства.Товары);
	
	ОтветственныйЗаДокумент = ДанныеИБ.Ответственный;
	ТелефонМенеджера = "";
	Менеджер = ОтветственныйЗаДокумент.ФизическоеЛицо.Наименование;
	
	Для Каждого СтрокаКИ Из ОтветственныйЗаДокумент.КонтактнаяИнформация Цикл
		Если СтрокаКИ.Тип = Перечисления.ТипыКонтактнойИнформации.Телефон Тогда
			ТелефонМенеджера = СтрокаКИ.Представление;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	ДанныеXDTO.Вставить("Менеджер", Менеджер);	
	ДанныеXDTO.Вставить("ТелефонМенеджера", ТелефонМенеджера);
КонецПроцедуры
#КонецОбласти
#Область Документ_ЗаказПоставщику_Отправка
Процедура ДобавитьПКО_Документ_ЗаказПоставщику_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_ЗаказПоставщику_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.ЗаказПоставщику;
	ПравилоКонвертации.ОбъектФормата     = "Документ.РаспоряжениеНаПриемку";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ЗаказПоставщику_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "ДатаПоступления", "ОжидаемаяДатаПоступления");
	ДобавитьПКС(СвойстваШапки, "Комментарий",     "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Контрагент",      "Контрагент", , "Справочник_Контрагенты_Отправка");
	ДобавитьПКС(СвойстваШапки, "Организация",     "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "Склад",           "Склад", , "Справочник_Склады_Отправка");
	ДобавитьПКС(СвойстваШапки, "Ссылка",          "Ссылка");
	ДобавитьПКС(СвойстваШапки, "ЦенаВключаетНДС", "ЦенаВключаетНДС");
	ДобавитьПКС(СвойстваШапки, "",                "ВидОперации", 1);
	ДобавитьПКС(СвойстваШапки, "",                "Менеджер", 1);
	ДобавитьПКС(СвойстваШапки, "",                "Представление", 1);
	ДобавитьПКС(СвойстваШапки, "",                "ТелефонМенеджера", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "Товары");
	ДобавитьПКС(СвойстваТЧ, "", "ВесЕдиницыТовара", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Весовой", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ЕдиницаИзмерения", 1,"Справочник_ЕдиницыИзмерения");
	ДобавитьПКС(СвойстваТЧ, "", "Количество", 1);
	ДобавитьПКС(СвойстваТЧ, "", "КоличествоУпаковок", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Маркируемый", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Номенклатура", 1,"Справочник_Номенклатура_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "СтавкаНДС", 1,"Перечисление_СтавкиНДС");
	ДобавитьПКС(СвойстваТЧ, "", "СтатусУказанияСерий", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаНДС", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Упаковка", 1,"Справочник_Упаковки");
	ДобавитьПКС(СвойстваТЧ, "", "Характеристика", 1,"Справочник_ХарактеристикиНоменклатуры");
	ДобавитьПКС(СвойстваТЧ, "", "Цена", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Штрихкод", 1);

КонецПроцедуры

Процедура ПКО_Документ_ЗаказПоставщику_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ПоступлениеТоваров.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.ПоступлениеТоваров КАК ПоступлениеТоваров
	|ГДЕ
	|	ПоступлениеТоваров.ЗаказПоставщику = &ЗаказПоставщику
	|	И НЕ ПоступлениеТоваров.ПометкаУдаления";
	
	Запрос.УстановитьПараметр("ЗаказПоставщику", ДанныеИБ.Ссылка);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	ДанныеXDTO.Вставить("Представление", Строка(ДанныеИБ.Ссылка));
	ДанныеXDTO.Вставить("ВидОперации", "ПриемкаОтПоставщика");
	
	ДанныеXDTO.Вставить("Товары", ДанныеИБ.ДополнительныеСвойства.Товары);
	
	ОтветственныйЗаДокумент = ДанныеИБ.Ответственный;
	ТелефонМенеджера = "";
	Менеджер = ОтветственныйЗаДокумент.ФизическоеЛицо.Наименование;
	
	Для Каждого СтрокаКИ Из ОтветственныйЗаДокумент.КонтактнаяИнформация Цикл
		Если СтрокаКИ.Тип = Перечисления.ТипыКонтактнойИнформации.Телефон Тогда
			ТелефонМенеджера = СтрокаКИ.Представление;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	ДанныеXDTO.Вставить("Менеджер", Менеджер);
	ДанныеXDTO.Вставить("ТелефонМенеджера", ТелефонМенеджера);
КонецПроцедуры
#КонецОбласти
#Область Документ_ОтгрузкаПоЗаказуНаПеремещение_Отправка
Процедура ДобавитьПКО_Документ_ОтгрузкаПоЗаказуНаПеремещение_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_ОтгрузкаПоЗаказуНаПеремещение_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.ЗаказНаПеремещение;
	ПравилоКонвертации.ОбъектФормата     = "Документ.РаспоряжениеНаОтгрузку";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ОтгрузкаПоЗаказуНаПеремещение_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Комментарий", "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Ссылка",      "Ссылка");
	ДобавитьПКС(СвойстваШапки, "",            "ВидОперации", 1);
	ДобавитьПКС(СвойстваШапки, "",            "Менеджер", 1);
	ДобавитьПКС(СвойстваШапки, "",            "Организация", 1, "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "",            "ОрганизацияПолучатель", 1, "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "",            "Представление", 1);
	ДобавитьПКС(СвойстваШапки, "",            "Склад", 1, "Справочник_Склады_Отправка");
	ДобавитьПКС(СвойстваШапки, "",            "СкладПолучатель", 1, "Справочник_Склады_Отправка");
	ДобавитьПКС(СвойстваШапки, "",            "ТелефонМенеджера", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "Товары");
	ДобавитьПКС(СвойстваТЧ, "", "ВесЕдиницыТовара", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Весовой", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ЕдиницаИзмерения", 1,"Справочник_ЕдиницыИзмерения");
	ДобавитьПКС(СвойстваТЧ, "", "Количество", 1);
	ДобавитьПКС(СвойстваТЧ, "", "КоличествоУпаковок", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Маркируемый", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Номенклатура", 1,"Справочник_Номенклатура_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "СтатусУказанияСерий", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Упаковка", 1,"Справочник_Упаковки");
	ДобавитьПКС(СвойстваТЧ, "", "Характеристика", 1,"Справочник_ХарактеристикиНоменклатуры");
	ДобавитьПКС(СвойстваТЧ, "", "Штрихкод", 1);

КонецПроцедуры

Процедура ПКО_Документ_ОтгрузкаПоЗаказуНаПеремещение_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	ДанныеXDTO.Вставить("Представление", Строка(ДанныеИБ.Ссылка));
	ДанныеXDTO.Вставить("ВидОперации", "ОтгрузкаПоПеремещению");
	
	СкладПродажи = ДанныеИБ.МагазинОтправитель.СкладПродажи; 
	ДанныеXDTO.Вставить("Склад", СкладПродажи);
	ДанныеXDTO.Вставить("Организация", СкладПродажи.Организация);
	
	СкладПоступления = ДанныеИБ.МагазинПолучатель.СкладПоступления;
	ДанныеXDTO.Вставить("СкладПолучатель", СкладПоступления);
	ДанныеXDTO.Вставить("ОрганизацияПолучатель", СкладПоступления.Организация);
	
	ДанныеXDTO.Вставить("Товары", ДанныеИБ.ДополнительныеСвойства.Товары);
	
	ОтветственныйЗаДокумент = ДанныеИБ.Ответственный;
	ТелефонМенеджера = "";
	Менеджер = ОтветственныйЗаДокумент.ФизическоеЛицо.Наименование;
	
	Для Каждого СтрокаКИ Из ОтветственныйЗаДокумент.КонтактнаяИнформация Цикл
		Если СтрокаКИ.Тип = Перечисления.ТипыКонтактнойИнформации.Телефон Тогда
			ТелефонМенеджера = СтрокаКИ.Представление;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	ДанныеXDTO.Вставить("Менеджер", Менеджер);
	ДанныеXDTO.Вставить("ТелефонМенеджера", ТелефонМенеджера);
КонецПроцедуры
#КонецОбласти
#Область Документ_ПересчетТоваров_Отправка
Процедура ДобавитьПКО_Документ_ПересчетТоваров_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_ПересчетТоваров_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.ПересчетТоваров;
	ПравилоКонвертации.ОбъектФормата     = "Документ.ПересчетТоваров";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ПересчетТоваров_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Дата",        "Дата");
	ДобавитьПКС(СвойстваШапки, "Комментарий", "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Номер",       "Номер");
	ДобавитьПКС(СвойстваШапки, "Склад",       "Склад", , "Справочник_Склады_Отправка");
	ДобавитьПКС(СвойстваШапки, "Ссылка",      "Ссылка");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "Товары");
	ДобавитьПКС(СвойстваТЧ, "", "ЕдиницаИзмерения", 1,"Справочник_ЕдиницыИзмерения");
	ДобавитьПКС(СвойстваТЧ, "", "Количество", 1);
	ДобавитьПКС(СвойстваТЧ, "", "КоличествоУпаковок", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Номенклатура", 1,"Справочник_Номенклатура_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "Упаковка", 1,"Справочник_Упаковки");
	ДобавитьПКС(СвойстваТЧ, "", "Характеристика", 1,"Справочник_ХарактеристикиНоменклатуры");
	ДобавитьПКС(СвойстваТЧ, "", "Штрихкод", 1);

КонецПроцедуры

Процедура ПКО_Документ_ПересчетТоваров_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	ДанныеXDTO.Вставить("Товары", ДанныеИБ.ДополнительныеСвойства.Товары);
КонецПроцедуры
#КонецОбласти
#Область Документ_ПоступлениеТоваров_Отправка
Процедура ДобавитьПКО_Документ_ПоступлениеТоваров_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_ПоступлениеТоваров_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.ПоступлениеТоваров;
	ПравилоКонвертации.ОбъектФормата     = "Документ.РаспоряжениеНаПриемку";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ПоступлениеТоваров_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "ДатаВходящегоДокумента",  "ДатаВходящегоДокумента");
	ДобавитьПКС(СвойстваШапки, "Комментарий",             "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Контрагент",              "Контрагент", , "Справочник_Контрагенты_Отправка");
	ДобавитьПКС(СвойстваШапки, "НомерВходящегоДокумента", "НомерВходящегоДокумента");
	ДобавитьПКС(СвойстваШапки, "Организация",             "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "Склад",                   "Склад", , "Справочник_Склады_Отправка");
	ДобавитьПКС(СвойстваШапки, "ЦенаВключаетНДС",         "ЦенаВключаетНДС");
	ДобавитьПКС(СвойстваШапки, "",                        "ВидОперации", 1);
	ДобавитьПКС(СвойстваШапки, "",                        "Менеджер", 1);
	ДобавитьПКС(СвойстваШапки, "",                        "ОжидаемаяДатаПоступления", 1);
	ДобавитьПКС(СвойстваШапки, "",                        "Представление", 1);
	ДобавитьПКС(СвойстваШапки, "",                        "Ссылка", 1);
	ДобавитьПКС(СвойстваШапки, "",                        "ТелефонМенеджера", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "Маркировка");
	ДобавитьПКС(СвойстваТЧ, "", "Номенклатура", 1,"Справочник_Номенклатура_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "НомерАкцизнойМарки", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Серия", 1,"Справочник_СерииНоменклатуры_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "Характеристика", 1,"Справочник_ХарактеристикиНоменклатуры");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "Товары");
	ДобавитьПКС(СвойстваТЧ, "", "ВесЕдиницыТовара", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Весовой", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ЕдиницаИзмерения", 1,"Справочник_ЕдиницыИзмерения");
	ДобавитьПКС(СвойстваТЧ, "", "Количество", 1);
	ДобавитьПКС(СвойстваТЧ, "", "КоличествоУпаковок", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Маркируемый", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Номенклатура", 1,"Справочник_Номенклатура_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "Серия", 1,"Справочник_СерииНоменклатуры_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "СтавкаНДС", 1,"Перечисление_СтавкиНДС");
	ДобавитьПКС(СвойстваТЧ, "", "СтатусУказанияСерий", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаНДС", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Упаковка", 1,"Справочник_Упаковки");
	ДобавитьПКС(СвойстваТЧ, "", "Характеристика", 1,"Справочник_ХарактеристикиНоменклатуры");
	ДобавитьПКС(СвойстваТЧ, "", "Цена", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Штрихкод", 1);

КонецПроцедуры

Процедура ПКО_Документ_ПоступлениеТоваров_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	ЗаказПоставщику = ДанныеИБ.ЗаказПоставщику;
	Если ЗначениеЗаполнено(ЗаказПоставщику) Тогда
		ДанныеXDTO.Вставить("Ссылка", ЗаказПоставщику.Ссылка);
		ОжидаемаяДатаПоступления = ЗаказПоставщику.ДатаПоступления;
	Иначе
		ДанныеXDTO.Вставить("Ссылка", ДанныеИБ.Ссылка);
		ОжидаемаяДатаПоступления = ТекущаяДатаСеанса();
	КонецЕсли;
	
	ДанныеXDTO.Вставить("Представление", Строка(ДанныеИБ.Ссылка));
	ДанныеXDTO.Вставить("ВидОперации", "ПриемкаОтПоставщика");
	
	ДанныеXDTO.Вставить("ОжидаемаяДатаПоступления", ОжидаемаяДатаПоступления);
	ДанныеXDTO.Вставить("Товары", ДанныеИБ.ДополнительныеСвойства.Товары);
	ДанныеXDTO.Вставить("Маркировка", ДанныеИБ.ДополнительныеСвойства.Маркировка);
	
	ОтветственныйЗаДокумент = ДанныеИБ.Ответственный;
	ТелефонМенеджера = "";
	Менеджер = ОтветственныйЗаДокумент.ФизическоеЛицо.Наименование;
	
	Для Каждого СтрокаКИ Из ОтветственныйЗаДокумент.КонтактнаяИнформация Цикл
		Если СтрокаКИ.Тип = Перечисления.ТипыКонтактнойИнформации.Телефон Тогда
			ТелефонМенеджера = СтрокаКИ.Представление;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	ДанныеXDTO.Вставить("Менеджер", Менеджер);
	ДанныеXDTO.Вставить("ТелефонМенеджера", ТелефонМенеджера);
КонецПроцедуры
#КонецОбласти
#Область Документ_ПриемкаПоЗаказуНаПеремещение_Отправка
Процедура ДобавитьПКО_Документ_ПриемкаПоЗаказуНаПеремещение_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_ПриемкаПоЗаказуНаПеремещение_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.ЗаказНаПеремещение;
	ПравилоКонвертации.ОбъектФормата     = "Документ.РаспоряжениеНаПриемку";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ПриемкаПоЗаказуНаПеремещение_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "ЖелаемаяДатаПоступления", "ОжидаемаяДатаПоступления");
	ДобавитьПКС(СвойстваШапки, "Комментарий",             "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Ссылка",                  "Ссылка");
	ДобавитьПКС(СвойстваШапки, "",                        "ВидОперации", 1);
	ДобавитьПКС(СвойстваШапки, "",                        "Менеджер", 1);
	ДобавитьПКС(СвойстваШапки, "",                        "Организация", 1, "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "",                        "ОрганизацияОтправитель", 1, "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "",                        "Представление", 1);
	ДобавитьПКС(СвойстваШапки, "",                        "Склад", 1, "Справочник_Склады_Отправка");
	ДобавитьПКС(СвойстваШапки, "",                        "СкладОтправитель", 1, "Справочник_Склады_Отправка");
	ДобавитьПКС(СвойстваШапки, "",                        "ТелефонМенеджера", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "Товары");
	ДобавитьПКС(СвойстваТЧ, "", "ВесЕдиницыТовара", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Весовой", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ЕдиницаИзмерения", 1,"Справочник_ЕдиницыИзмерения");
	ДобавитьПКС(СвойстваТЧ, "", "Количество", 1);
	ДобавитьПКС(СвойстваТЧ, "", "КоличествоУпаковок", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Маркируемый", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Номенклатура", 1,"Справочник_Номенклатура_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "СтатусУказанияСерий", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Упаковка", 1,"Справочник_Упаковки");
	ДобавитьПКС(СвойстваТЧ, "", "Характеристика", 1,"Справочник_ХарактеристикиНоменклатуры");
	ДобавитьПКС(СвойстваТЧ, "", "Штрихкод", 1);

КонецПроцедуры

Процедура ПКО_Документ_ПриемкаПоЗаказуНаПеремещение_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	ДанныеXDTO.Вставить("Представление", Строка(ДанныеИБ.Ссылка));
	ДанныеXDTO.Вставить("ВидОперации", "ПриемкаПоПеремещению");
	
	СкладПоступления = ДанныеИБ.МагазинПолучатель.СкладПоступления;
	ДанныеXDTO.Вставить("Склад", СкладПоступления);
	ДанныеXDTO.Вставить("Организация", СкладПоступления.Организация);
	
	СкладПродажи = ДанныеИБ.МагазинОтправитель.СкладПродажи;
	ДанныеXDTO.Вставить("СкладОтправитель", СкладПродажи);
	ДанныеXDTO.Вставить("ОрганизацияОтправитель", СкладПродажи.Организация);
	
	ДанныеXDTO.Вставить("Товары", ДанныеИБ.ДополнительныеСвойства.Товары);
	
	ОтветственныйЗаДокумент = ДанныеИБ.Ответственный;
	ТелефонМенеджера = "";
	Менеджер = ОтветственныйЗаДокумент.ФизическоеЛицо.Наименование;
	
	Для Каждого СтрокаКИ Из ОтветственныйЗаДокумент.КонтактнаяИнформация Цикл
		Если СтрокаКИ.Тип = Перечисления.ТипыКонтактнойИнформации.Телефон Тогда
			ТелефонМенеджера = СтрокаКИ.Представление;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	ДанныеXDTO.Вставить("Менеджер", Менеджер);
	ДанныеXDTO.Вставить("ТелефонМенеджера", ТелефонМенеджера);
КонецПроцедуры
#КонецОбласти
#Область Справочник_ВидыНоменклатуры_Отправка
Процедура ДобавитьПКО_Справочник_ВидыНоменклатуры_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Справочник_ВидыНоменклатуры_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Справочники.ВидыНоменклатуры;
	ПравилоКонвертации.ОбъектФормата     = "Справочник.ВидыНоменклатуры";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Наименование",    "Наименование");
	ДобавитьПКС(СвойстваШапки, "ТипНоменклатуры", "ТипНоменклатуры");

КонецПроцедуры
#КонецОбласти
#Область Справочник_Контрагенты_Отправка
Процедура ДобавитьПКО_Справочник_Контрагенты_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Справочник_Контрагенты_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Справочники.Контрагенты;
	ПравилоКонвертации.ОбъектФормата     = "Справочник.Контрагенты";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "ИНН",          "ИНН");
	ДобавитьПКС(СвойстваШапки, "КПП",          "КПП");
	ДобавитьПКС(СвойстваШапки, "Наименование", "Наименование");
	ДобавитьПКС(СвойстваШапки, "Ссылка",       "Ссылка");
	ДобавитьПКС(СвойстваШапки, "ЮрФизЛицо",    "ЮридическоеФизическоеЛицо", , "ЮрФизЛицо_Организации_Отправка");

КонецПроцедуры
#КонецОбласти
#Область Справочник_Магазины_Отправка
Процедура ДобавитьПКО_Справочник_Магазины_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Справочник_Магазины_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Справочники.Магазины;
	ПравилоКонвертации.ОбъектФормата     = "Справочник.СкладыГруппа";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Наименование", "Наименование");
	ДобавитьПКС(СвойстваШапки, "Ссылка",       "Ссылка");

КонецПроцедуры
#КонецОбласти
#Область Справочник_Номенклатура_Отправка
Процедура ДобавитьПКО_Справочник_Номенклатура_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Справочник_Номенклатура_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Справочники.Номенклатура;
	ПравилоКонвертации.ОбъектФормата     = "Справочник.Номенклатура";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Справочник_Номенклатура_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Артикул",            "Артикул");
	ДобавитьПКС(СвойстваШапки, "Весовой",            "Весовой");
	ДобавитьПКС(СвойстваШапки, "ЕдиницаИзмерения",   "ЕдиницаИзмерения", , "Справочник_ЕдиницыИзмерения");
	ДобавитьПКС(СвойстваШапки, "Наименование",       "Наименование");
	ДобавитьПКС(СвойстваШапки, "НаименованиеПолное", "НаименованиеПолное");
	ДобавитьПКС(СвойстваШапки, "Ссылка",             "Ссылка");
	ДобавитьПКС(СвойстваШапки, "СтавкаНДС",          "СтавкаНДС", , "Перечисление_СтавкиНДС");
	ДобавитьПКС(СвойстваШапки, "ТипНоменклатуры",    "ТипНоменклатуры", , "ТипыНоменклатуры");

КонецПроцедуры

Процедура ПКО_Справочник_Номенклатура_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Маркируемый = Ложь;
	Если ЗначениеЗаполнено(ДанныеИБ.ВидАлкогольнойПродукцииЕГАИС) Тогда
		Маркируемый = ДанныеИБ.ВидАлкогольнойПродукцииЕГАИС.Маркируемый;
	Иначе
		ОсобенностиУчетаИСМП = ОсобенностиУчетаИСМП();
		Если ОсобенностиУчетаИСМП.Найти(ДанныеИБ.ОсобенностьУчета) <> Неопределено Тогда
			Маркируемый = Истина;
		КонецЕсли;
	КонецЕсли;
	
	СтруктураДопРеквизитов = Новый Структура;
	СтруктураДопРеквизитов.Вставить("Вес", ДанныеИБ.Вес);
	СтруктураДопРеквизитов.Вставить("ИспользоватьСерии", ДанныеИБ.ВидНоменклатуры.ИспользоватьСерии);
	СтруктураДопРеквизитов.Вставить("Маркируемый", Маркируемый);
	
	МассивДопРеквизитов = Новый Массив;
	
	Для каждого ЭлементНстроек Из СтруктураДопРеквизитов Цикл
		МассивДопРеквизитов.Добавить(ЭлементНстроек.Ключ);
	КонецЦикла;
	
	ЗаполнитьДополнительныеРеквизиты(СтруктураДопРеквизитов, ДанныеXDTO, МассивДопРеквизитов);
КонецПроцедуры
#КонецОбласти
#Область Справочник_Организации_Отправка
Процедура ДобавитьПКО_Справочник_Организации_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Справочник_Организации_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Справочники.Организации;
	ПравилоКонвертации.ОбъектФормата     = "Справочник.Организации";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "ИНН",          "ИНН");
	ДобавитьПКС(СвойстваШапки, "КПП",          "КПП");
	ДобавитьПКС(СвойстваШапки, "Наименование", "Наименование");
	ДобавитьПКС(СвойстваШапки, "ЮрФизЛицо",    "ЮридическоеФизическоеЛицо", , "ЮрФизЛицо_Организации_Отправка");

КонецПроцедуры
#КонецОбласти
#Область Справочник_СерииНоменклатуры_Отправка
Процедура ДобавитьПКО_Справочник_СерииНоменклатуры_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Справочник_СерииНоменклатуры_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Справочники.СерииНоменклатуры;
	ПравилоКонвертации.ОбъектФормата     = "Справочник.СерииНоменклатуры";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "ГоденДо",      "ГоденДо");
	ДобавитьПКС(СвойстваШапки, "Наименование", "Наименование");
	ДобавитьПКС(СвойстваШапки, "Номер",        "СерийныйНомер");
	ДобавитьПКС(СвойстваШапки, "Ссылка",       "Ссылка");

КонецПроцедуры
#КонецОбласти
#Область Справочник_Склады_Отправка
Процедура ДобавитьПКО_Справочник_Склады_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Справочник_Склады_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Справочники.Склады;
	ПравилоКонвертации.ОбъектФормата     = "Справочник.Склады";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Справочник_Склады_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Наименование", "Наименование");
	ДобавитьПКС(СвойстваШапки, "Ссылка",       "Ссылка");
	ДобавитьПКС(СвойстваШапки, "",             "СкладГруппа", 1);

КонецПроцедуры

Процедура ПКО_Справочник_Склады_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	СкладГруппа = Новый Структура();
	СкладГруппа.Вставить("Ссылка", ДанныеИБ.Магазин);
	СкладГруппа.Вставить("Наименование", ДанныеИБ.Магазин.Наименование);
	
	ДанныеXDTO.КлючевыеСвойства.Вставить("СкладГруппа", СкладГруппа);
	
	ЭтоСкладТекущегоУзла = УправлениеМобильнымиПриложениямиРТ.ПроверитьФильтрПоСкладу(
		КомпонентыОбмена.УзелКорреспондента, ДанныеИБ.Ссылка);
	Если ЭтоСкладТекущегоУзла Тогда
		СтруктураНастроек = Новый Структура;
		СтруктураНастроек.Вставить("ИспользоватьУпаковки", Ложь);
		СтруктураНастроек.Вставить("ИспользоватьСерии", Ложь);
		СтруктураНастроек.Вставить("ИспользоватьВес", Ложь);
		СтруктураНастроек.Вставить("РедактироватьЦеныТоваров", Ложь);
		
		Настройки = КомпонентыОбмена.УзелКорреспондента.НастройкиОбмена.Получить();
		Для Каждого ЭлементОтбора Из Настройки.Отбор.Элементы Цикл
			Если Не ЭлементОтбора.Использование Тогда
				Продолжить;
			КонецЕсли;
			ИмяНастройки = Строка(ЭлементОтбора.ЛевоеЗначение);
			Если СтруктураНастроек.Свойство(ИмяНастройки) Тогда
				СтруктураНастроек[ИмяНастройки] = ЭлементОтбора.ПравоеЗначение;
			КонецЕсли;
		КонецЦикла;
		
		МассивДопРеквизитов = Новый Массив;
		
		Для каждого ЭлементНастроек Из СтруктураНастроек Цикл
			МассивДопРеквизитов.Добавить(ЭлементНастроек.Ключ);
		КонецЦикла;
		
		ЗаполнитьДополнительныеРеквизиты(СтруктураНастроек, ДанныеXDTO, МассивДопРеквизитов);
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Справочник_Штрихкоды_Отправка
Процедура ДобавитьПКО_Справочник_Штрихкоды_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Справочник_Штрихкоды_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.РегистрыСведений.Штрихкоды;
	ПравилоКонвертации.ОбъектФормата     = "Справочник.ШтрихкодыНоменклатуры";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Справочник_Штрихкоды_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "", "Штрихкод", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "Записи");
	ДобавитьПКС(СвойстваТЧ, "", "Номенклатура", 1,"Справочник_Номенклатура_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "Упаковка", 1,"Справочник_Упаковки");
	ДобавитьПКС(СвойстваТЧ, "", "Характеристика", 1,"Справочник_ХарактеристикиНоменклатуры");
	ДобавитьПКС(СвойстваТЧ, "", "Штрихкод", 1);

КонецПроцедуры

Процедура ПКО_Справочник_Штрихкоды_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Номенклатура 	= ДанныеИБ.Отбор.Владелец.Значение;
	Упаковка 		= ДанныеИБ.Отбор.Упаковка.Значение;
	Характеристика 	= ДанныеИБ.Отбор.Характеристика.Значение;
	
	Штрихкоды = Новый ТаблицаЗначений;
	Штрихкоды.Колонки.Добавить("Номенклатура");
	Штрихкоды.Колонки.Добавить("Упаковка");
	Штрихкоды.Колонки.Добавить("Характеристика");
	Штрихкоды.Колонки.Добавить("Штрихкод");
	
	Если ЗначениеЗаполнено(Номенклатура)
		И ТипЗнч(Номенклатура) = Тип("СправочникСсылка.Номенклатура") Тогда
		
		СтрокаШК = Штрихкоды.Добавить();
		СтрокаШК.Номенклатура = Номенклатура;
		Если ЗначениеЗаполнено(Упаковка) Тогда
			СтрокаШК.Упаковка = Упаковка;
		КонецЕсли;
		Если ЗначениеЗаполнено(Характеристика) Тогда
			СтрокаШК.Характеристика = Характеристика;
		КонецЕсли;
		СтрокаШК.Штрихкод = ДанныеИБ.Отбор.Штрихкод.Значение;
	КонецЕсли;
	
	ДанныеXDTO.Вставить("Штрихкод", ДанныеИБ.Отбор.Штрихкод.Значение);
	ДанныеXDTO.Вставить("Записи", Штрихкоды);
КонецПроцедуры
#КонецОбласти
#КонецОбласти
#Область Получение
#Область Документ_ВозвратТоваровПоставщику_Получение
Процедура ДобавитьПКО_Документ_ВозвратТоваровПоставщику_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Документ_ВозвратТоваровПоставщику_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Документы.ВозвратТоваровПоставщику;
	ПравилоКонвертации.ОбъектФормата                = "Документ.РаспоряжениеНаОтгрузку";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Документ_ВозвратТоваровПоставщику_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_ВозвратТоваровПоставщику_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных      = "ОтложеннаяОбработка_СерииИМаркировка";
	ПравилоКонвертации.ВариантИдентификации         = "ПоУникальномуИдентификатору";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Дата",          "ДатаВыполнения");
	ДобавитьПКС(СвойстваШапки, "Комментарий",   "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Ответственный", "", 1, "Справочник_Пользователи_Получение");
	ДобавитьПКС(СвойстваШапки, "Проведен",      "", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "Серии",  "");
	ДобавитьПКС(СвойстваТЧ, "Количество",     "", 1);
	ДобавитьПКС(СвойстваТЧ, "Номенклатура",   "", 1,"Справочник_Номенклатура_Получение");
	ДобавитьПКС(СвойстваТЧ, "Серия",          "", 1,"Справочник_СерииНоменклатуры_Получение");
	ДобавитьПКС(СвойстваТЧ, "Характеристика", "", 1,"Справочник_ХарактеристикиНоменклатуры");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "Товары", "");
	ДобавитьПКС(СвойстваТЧ, "Количество",          "", 1);
	ДобавитьПКС(СвойстваТЧ, "КоличествоУпаковок",  "", 1);
	ДобавитьПКС(СвойстваТЧ, "Номенклатура",        "", 1,"Справочник_Номенклатура_Получение");
	ДобавитьПКС(СвойстваТЧ, "СтавкаНДС",           "", 1,"Перечисление_СтавкиНДС");
	ДобавитьПКС(СвойстваТЧ, "СтатусУказанияСерий", "", 1);
	ДобавитьПКС(СвойстваТЧ, "Сумма",               "", 1);
	ДобавитьПКС(СвойстваТЧ, "СуммаНДС",            "", 1);
	ДобавитьПКС(СвойстваТЧ, "Упаковка",            "", 1,"Справочник_Упаковки");
	ДобавитьПКС(СвойстваТЧ, "Характеристика",      "", 1,"Справочник_ХарактеристикиНоменклатуры");
	ДобавитьПКС(СвойстваТЧ, "Цена",                "", 1);

КонецПроцедуры

Процедура ПКО_Документ_ВозвратТоваровПоставщику_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	//Товары, серии
	
	ПравилаЗаполнения = Новый Соответствие;
	ПравилаЗаполнения.Вставить("Номенклатура", "Номенклатура");
	ПравилаЗаполнения.Вставить("Характеристика", "Характеристика");
	ПравилаЗаполнения.Вставить("СтатусУказанияСерий", "СтатусУказанияСерий");
	ПравилаЗаполнения.Вставить("Упаковка", "Упаковка");
	ПравилаЗаполнения.Вставить("Количество", "Количество");
	ПравилаЗаполнения.Вставить("КоличествоУпаковок", "КоличествоУпаковок");
	ПравилаЗаполнения.Вставить("Цена", "Цена");
	ПравилаЗаполнения.Вставить("Сумма", "Сумма");
	ПравилаЗаполнения.Вставить("СтавкаНДС", "СтавкаНДС");
	ПравилаЗаполнения.Вставить("СуммаНДС", "СуммаНДС");
	
	ПравилаЗаполненияСерий = Новый Соответствие;
	ПравилаЗаполненияСерий.Вставить("Номенклатура", "Номенклатура");
	ПравилаЗаполненияСерий.Вставить("Характеристика", "Характеристика");
	ПравилаЗаполненияСерий.Вставить("Серия", "Серия");
	ПравилаЗаполненияСерий.Вставить("Количество", "Количество");
	
	МассивСтрокТовары = Новый Массив;
	МассивСтрокСерии = Новый Массив;
	
	Если ДанныеXDTO.Свойство("Товары")
		И ЗначениеЗаполнено(ДанныеXDTO.Товары) Тогда
		Для Каждого Строка Из ДанныеXDTO.Товары Цикл
			СтруктураДанныхСтроки = ДанныеКоллекцииВВидеСтруктуры(Строка, ПравилаЗаполнения);
			МассивСтрокТовары.Добавить(СтруктураДанныхСтроки);
			Если ЗначениеЗаполнено(Строка.Серия) Тогда
				СтруктураДанныхСерия = ДанныеКоллекцииВВидеСтруктуры(Строка, ПравилаЗаполненияСерий);
				МассивСтрокСерии.Добавить(СтруктураДанныхСерия);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если МассивСтрокТовары.Количество() > 0 Тогда
		ПолученныеДанные.ДополнительныеСвойства.Вставить("Товары", МассивСтрокТовары);
	КонецЕсли;
	
	Если МассивСтрокСерии.Количество() > 0 Тогда
		ПолученныеДанные.ДополнительныеСвойства.Вставить("Серии", МассивСтрокСерии);
	КонецЕсли;
	
	//Маркировка
	ТаблицаМаркировка = ТаблицаМаркировка(ДанныеXDTO);
	ШтрихкодыУпаковок = ПодобратьШтрихкодыУпаковок(ТаблицаМаркировка, Истина);
	ПолученныеДанные.ДополнительныеСвойства.Вставить("ШтрихкодыУпаковок", ШтрихкодыУпаковок);
КонецПроцедуры

Процедура ПКО_Документ_ВозвратТоваровПоставщику_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	ПолученныеДанные.Ответственный = Пользователи.ТекущийПользователь();
	ПолученныеДанные.Проведен = Истина;
	
	ТекущийКомментарий = СокрЛП(ДанныеИБ.Комментарий); 
	Если Не ПустаяСтрока(ТекущийКомментарий) Тогда
		ПолученныеДанные.Комментарий = ПолученныеДанные.Комментарий + Символы.ПС + ТекущийКомментарий;
	КонецЕсли;
	
	ТабТовары = ПолученныеДанные.Товары.Выгрузить();
	ТабТовары.Свернуть("Номенклатура, Характеристика, СтатусУказанияСерий, Упаковка, Цена, СтавкаНДС",
						"Количество, КоличествоУпаковок, Сумма, СуммаНДС");
	ПолученныеДанные.Товары.Загрузить(ТабТовары);
	
	
	ШтрихкодыУпаковок = ПолученныеДанные.ДополнительныеСвойства.ШтрихкодыУпаковок.Скопировать(, "ШтрихкодУпаковки");
	ДанныеИБ.ШтрихкодыУпаковок.Загрузить(ШтрихкодыУпаковок);
КонецПроцедуры
#КонецОбласти
#Область Документ_ОтгрузкаПоЗаказуНаПеремещение_Получение
Процедура ДобавитьПКО_Документ_ОтгрузкаПоЗаказуНаПеремещение_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Документ_ОтгрузкаПоЗаказуНаПеремещение_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Документы.ПеремещениеТоваров;
	ПравилоКонвертации.ОбъектФормата                = "Документ.РаспоряжениеНаОтгрузку";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Документ_ОтгрузкаПоЗаказуНаПеремещение_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_ОтгрузкаПоЗаказуНаПеремещение_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных      = "ОтложеннаяОбработка_СерииИМаркировка";
	ПравилоКонвертации.ВариантИдентификации         = "ПоПолямПоиска";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Дата",                  "ДатаВыполнения");
	ДобавитьПКС(СвойстваШапки, "Комментарий",           "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Организация",           "Организация", , "Справочник_Организации_Получение");
	ДобавитьПКС(СвойстваШапки, "ОрганизацияПолучатель", "ОрганизацияПолучатель", , "Справочник_Организации_Получение");
	ДобавитьПКС(СвойстваШапки, "Ответственный",         "", , "Справочник_Пользователи_Получение");
	ДобавитьПКС(СвойстваШапки, "СкладОтправитель",      "Склад", , "Справочник_Склады_Получение");
	ДобавитьПКС(СвойстваШапки, "СкладПолучатель",       "СкладПолучатель", , "Справочник_Склады_Получение");
	ДобавитьПКС(СвойстваШапки, "ДокументОснование",     "", 1);
	ДобавитьПКС(СвойстваШапки, "МагазинОтправитель",    "", 1);
	ДобавитьПКС(СвойстваШапки, "МагазинПолучатель",     "", 1);
	ДобавитьПКС(СвойстваШапки, "Проведен",              "", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "АкцизныеМарки", "");
	ДобавитьПКС(СвойстваТЧ, "АкцизнаяМарка", "", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "Серии",         "");
	ДобавитьПКС(СвойстваТЧ, "Количество",     "", 1);
	ДобавитьПКС(СвойстваТЧ, "Номенклатура",   "", 1,"Справочник_Номенклатура_Получение");
	ДобавитьПКС(СвойстваТЧ, "Серия",          "", 1,"Справочник_СерииНоменклатуры_Получение");
	ДобавитьПКС(СвойстваТЧ, "Характеристика", "", 1,"Справочник_ХарактеристикиНоменклатуры");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "Товары",        "");
	ДобавитьПКС(СвойстваТЧ, "Количество",                      "", 1);
	ДобавитьПКС(СвойстваТЧ, "КоличествоУпаковок",              "", 1);
	ДобавитьПКС(СвойстваТЧ, "НеобходимостьВводаАкцизнойМарки", "", 1);
	ДобавитьПКС(СвойстваТЧ, "Номенклатура",                    "", 1,"Справочник_Номенклатура_Получение");
	ДобавитьПКС(СвойстваТЧ, "СтатусУказанияСерий",             "", 1);
	ДобавитьПКС(СвойстваТЧ, "Упаковка",                        "", 1,"Справочник_Упаковки");
	ДобавитьПКС(СвойстваТЧ, "Характеристика",                  "", 1,"Справочник_ХарактеристикиНоменклатуры");

	ПравилоКонвертации.ПоляПоиска.Добавить("ДокументОснование");
КонецПроцедуры

Процедура ПКО_Документ_ОтгрузкаПоЗаказуНаПеремещение_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	Идентификатор = Новый УникальныйИдентификатор(ДанныеXDTO.Ссылка.Значение);
	ЗаказНаПеремещение = Документы.ЗаказНаПеремещение.ПолучитьСсылку(Идентификатор);
	ПолученныеДанные.ДокументОснование = ЗаказНаПеремещение;
	
	//Товары, Серии
	
	ПравилаЗаполнения = Новый Соответствие;
	ПравилаЗаполнения.Вставить("Номенклатура", "Номенклатура");
	ПравилаЗаполнения.Вставить("Характеристика", "Характеристика");
	ПравилаЗаполнения.Вставить("СтатусУказанияСерий", "СтатусУказанияСерий");
	ПравилаЗаполнения.Вставить("Упаковка", "Упаковка");
	ПравилаЗаполнения.Вставить("Количество", "Количество");
	ПравилаЗаполнения.Вставить("КоличествоУпаковок", "КоличествоУпаковок");
	
	ПравилаЗаполненияСерий = Новый Соответствие;
	ПравилаЗаполненияСерий.Вставить("Номенклатура", "Номенклатура");
	ПравилаЗаполненияСерий.Вставить("Характеристика", "Характеристика");
	ПравилаЗаполненияСерий.Вставить("Серия", "Серия");
	ПравилаЗаполненияСерий.Вставить("Количество", "Количество");
	
	МассивСтрокТовары = Новый Массив;
	МассивСтрокСерии = Новый Массив;
	
	Если ДанныеXDTO.Свойство("Товары")
		И ЗначениеЗаполнено(ДанныеXDTO.Товары) Тогда
		Для Каждого Строка Из ДанныеXDTO.Товары Цикл
			СтруктураДанныхСтроки = ДанныеКоллекцииВВидеСтруктуры(Строка, ПравилаЗаполнения);
			МассивСтрокТовары.Добавить(СтруктураДанныхСтроки);
			Если ЗначениеЗаполнено(Строка.Серия) Тогда
				СтруктураДанныхСерия = ДанныеКоллекцииВВидеСтруктуры(Строка, ПравилаЗаполненияСерий);
				МассивСтрокСерии.Добавить(СтруктураДанныхСерия);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если МассивСтрокТовары.Количество() > 0 Тогда
		ПолученныеДанные.ДополнительныеСвойства.Вставить("Товары", МассивСтрокТовары);
	КонецЕсли;
	
	Если МассивСтрокСерии.Количество() > 0 Тогда
		ПолученныеДанные.ДополнительныеСвойства.Вставить("Серии", МассивСтрокСерии);
	КонецЕсли;
	
	//Маркировка
	ТаблицаМаркировка = ТаблицаМаркировка(ДанныеXDTO);
	ШтрихкодыУпаковок = ПодобратьШтрихкодыУпаковок(ТаблицаМаркировка, Истина);
	Для Каждого Строка Из ШтрихкодыУпаковок Цикл
		НоваяСтрока = ПолученныеДанные.АкцизныеМарки.Добавить();
		НоваяСтрока.АкцизнаяМарка = Строка.ШтрихкодУпаковки;
	КонецЦикла;
КонецПроцедуры

Процедура ПКО_Документ_ОтгрузкаПоЗаказуНаПеремещение_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	ПолученныеДанные.Ответственный = Пользователи.ТекущийПользователь();
	ПолученныеДанные.Проведен = Истина;
	
	ПолученныеДанные.МагазинОтправитель = ПолученныеДанные.СкладОтправитель.Магазин;
	ПолученныеДанные.МагазинПолучатель = ПолученныеДанные.СкладПолучатель.Магазин;
	
	ТабТовары = ПолученныеДанные.Товары.Выгрузить();
	ТабТовары.Свернуть("Номенклатура, Характеристика, СтатусУказанияСерий, Упаковка",
						"Количество, КоличествоУпаковок");
	ПолученныеДанные.Товары.Загрузить(ТабТовары);
	
	Для Каждого Строка Из ПолученныеДанные.АкцизныеМарки Цикл
		ШтрихкодУпаковки = Строка.АкцизнаяМарка;
		
		СтруктураПоиска = Новый Структура("Номенклатура, Характеристика");
		СтруктураПоиска.Номенклатура = ШтрихкодУпаковки.Номенклатура;
		СтруктураПоиска.Характеристика = ШтрихкодУпаковки.Характеристика;
		СтрокиТовар = ПолученныеДанные.Товары.НайтиСтроки(СтруктураПоиска);
		Если СтрокиТовар.Количество() > 0 Тогда
			СтрокаТовар = СтрокиТовар[0];
			СтрокаТовар.НеобходимостьВводаАкцизнойМарки = Истина;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры
#КонецОбласти
#Область Документ_ПересчетТоваров_Получение
Процедура ДобавитьПКО_Документ_ПересчетТоваров_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Документ_ПересчетТоваров_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Документы.ПересчетТоваров;
	ПравилоКонвертации.ОбъектФормата                = "Документ.ПересчетТоваров";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Документ_ПересчетТоваров_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_ПересчетТоваров_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных      = "ОтложеннаяОбработка_Документ_ПересчетТоваров";
	ПравилоКонвертации.ВариантИдентификации         = "ПоПолямПоиска";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Дата",              "Дата");
	ДобавитьПКС(СвойстваШапки, "Комментарий",       "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Ответственный",     "", , "Справочник_Пользователи_Получение");
	ДобавитьПКС(СвойстваШапки, "Склад",             "Склад", , "Справочник_Склады_Получение");
	ДобавитьПКС(СвойстваШапки, "ДокументОснование", "", 1);
	ДобавитьПКС(СвойстваШапки, "Магазин",           "", 1);
	ДобавитьПКС(СвойстваШапки, "Организация",       "", 1);
	ДобавитьПКС(СвойстваШапки, "Проведен",          "", 1);
	ДобавитьПКС(СвойстваШапки, "Статус",            "", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "Товары", "");
	ДобавитьПКС(СвойстваТЧ, "Количество",             "", 1);
	ДобавитьПКС(СвойстваТЧ, "КоличествоУпаковок",     "", 1);
	ДобавитьПКС(СвойстваТЧ, "КоличествоУпаковокФакт", "", 1);
	ДобавитьПКС(СвойстваТЧ, "КоличествоФакт",         "", 1);
	ДобавитьПКС(СвойстваТЧ, "Номенклатура",           "", 1,"Справочник_Номенклатура_Получение");
	ДобавитьПКС(СвойстваТЧ, "Сумма",                  "", 1);
	ДобавитьПКС(СвойстваТЧ, "СуммаФакт",              "");
	ДобавитьПКС(СвойстваТЧ, "Упаковка",               "", 1,"Справочник_Упаковки");
	ДобавитьПКС(СвойстваТЧ, "Характеристика",         "", 1,"Справочник_ХарактеристикиНоменклатуры");
	ДобавитьПКС(СвойстваТЧ, "Цена",                   "", 1);

	ПравилоКонвертации.ПоляПоиска.Добавить("ДокументОснование,Статус");
КонецПроцедуры

Процедура ПКО_Документ_ПересчетТоваров_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	Идентификатор = Новый УникальныйИдентификатор(ДанныеXDTO.Ссылка.Значение);
	ПересчетТоваров = Документы.ПересчетТоваров.ПолучитьСсылку(Идентификатор);
	ПолученныеДанные.ДокументОснование = ПересчетТоваров.ДокументОснование;
	ПолученныеДанные.Статус = Перечисления.СтатусыПересчетовТоваров.ВнесениеРезультатов;
	
	//Товары, Серии
	
	ПравилаЗаполнения = Новый Соответствие;
	ПравилаЗаполнения.Вставить("Номенклатура", "Номенклатура");
	ПравилаЗаполнения.Вставить("Характеристика", "Характеристика");
	ПравилаЗаполнения.Вставить("Упаковка", "Упаковка");
	ПравилаЗаполнения.Вставить("Количество", "Количество");
	ПравилаЗаполнения.Вставить("КоличествоУпаковок", "КоличествоУпаковок");
	ПравилаЗаполнения.Вставить("КоличествоФакт", "КоличествоФакт");
	ПравилаЗаполнения.Вставить("КоличествоУпаковокФакт", "КоличествоУпаковокФакт");
	
	МассивСтрокТовары = Новый Массив;
	
	Если ДанныеXDTO.Свойство("Товары")
		И ЗначениеЗаполнено(ДанныеXDTO.Товары) Тогда
		Для Каждого Строка Из ДанныеXDTO.Товары Цикл
			СтруктураДанныхСтроки = ДанныеКоллекцииВВидеСтруктуры(Строка, ПравилаЗаполнения);
			МассивСтрокТовары.Добавить(СтруктураДанныхСтроки);
		КонецЦикла;
	КонецЕсли;
	
	Если МассивСтрокТовары.Количество() > 0 Тогда
		ПолученныеДанные.ДополнительныеСвойства.Вставить("Товары", МассивСтрокТовары);
	КонецЕсли;
КонецПроцедуры

Процедура ПКО_Документ_ПересчетТоваров_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	Склад = ПолученныеДанные.Склад;
	ПолученныеДанные.Магазин = Склад.Магазин;
	ПолученныеДанные.Организация = Склад.Организация;
	
	ПолученныеДанные.Статус = Перечисления.СтатусыПересчетовТоваров.Выполнено;
	ПолученныеДанные.Ответственный = Пользователи.ТекущийПользователь();
	ПолученныеДанные.Проведен = Истина;
	
	ТабТовары = ПолученныеДанные.Товары.Выгрузить();
	ТабТовары.Свернуть("Номенклатура, Характеристика, Упаковка",
						"Количество, КоличествоУпаковок, КоличествоФакт, КоличествоУпаковокФакт");
	ПолученныеДанные.Товары.Загрузить(ТабТовары);
	
	Магазин = ПолученныеДанные.Магазин;
	ПериодЦен = ЗапасыСервер.ДатаДляЦенообразованияДляДокумента(ПолученныеДанные);
		
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Товары", ПолученныеДанные.Товары.Выгрузить(, "НомерСтроки,Номенклатура,Характеристика,Упаковка"));
	Запрос.УстановитьПараметр("Период", ?(ЗначениеЗаполнено(ПериодЦен), ПериодЦен, ТекущаяДатаСеанса()));
	Запрос.УстановитьПараметр("ВидЦены", Магазин.ПравилоЦенообразования.ВидЦен);
	Запрос.Текст = ЗапасыСервер.ТекстЗапросаПересчетаЦен("ПоВидуЦен", Ложь);
	
	ТаблицаЦен = Запрос.Выполнить().Выгрузить();
	
	Если ТаблицаЦен.Количество() > 0 Тогда
		Для Каждого ТекСтрока Из ПолученныеДанные.Товары Цикл
			ЦенаНайдена = Ложь;
			НайденнаяСтрока = ТаблицаЦен.Найти(ТекСтрока.НомерСтроки,"НомерСтроки");
			ЦенаНайдена = (НайденнаяСтрока <> Неопределено);
			Если НЕ ЦенаНайдена Тогда
				Продолжить;
			КонецЕсли;
	
			ТекСтрока.Цена = НайденнаяСтрока.Цена;
			ТекСтрока.Сумма = ТекСтрока.Цена * ТекСтрока.КоличествоУпаковок;
			ТекСтрока.СуммаФакт = ТекСтрока.Цена * ТекСтрока.КоличествоУпаковокФакт;
		КонецЦикла;
	КонецЕсли;
	
	ПолученныеДанные.ЗаполнитьКоличествоПоУчету();
КонецПроцедуры
#КонецОбласти
#Область Документ_ПоступлениеПоЗаказу_Получение
Процедура ДобавитьПКО_Документ_ПоступлениеПоЗаказу_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Документ_ПоступлениеПоЗаказу_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Документы.ПоступлениеТоваров;
	ПравилоКонвертации.ОбъектФормата                = "Документ.РаспоряжениеНаПриемку";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Документ_ПоступлениеПоЗаказу_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_ПоступлениеПоЗаказу_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных      = "ОтложеннаяОбработка_Документ_ПоступлениеТоваров";
	ПравилоКонвертации.ВариантИдентификации         = "ПоПолямПоиска";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Дата",                    "ДатаВыполнения");
	ДобавитьПКС(СвойстваШапки, "ДатаВходящегоДокумента",  "ДатаВходящегоДокумента");
	ДобавитьПКС(СвойстваШапки, "Комментарий",             "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Контрагент",              "Контрагент", , "Справочник_Контрагенты_Получение");
	ДобавитьПКС(СвойстваШапки, "НомерВходящегоДокумента", "НомерВходящегоДокумента");
	ДобавитьПКС(СвойстваШапки, "Организация",             "Организация", , "Справочник_Организации_Получение");
	ДобавитьПКС(СвойстваШапки, "Ответственный",           "", , "Справочник_Пользователи_Получение");
	ДобавитьПКС(СвойстваШапки, "Склад",                   "Склад", , "Справочник_Склады_Получение");
	ДобавитьПКС(СвойстваШапки, "ЦенаВключаетНДС",         "ЦенаВключаетНДС");
	ДобавитьПКС(СвойстваШапки, "ЗаказПоставщику",         "", 1);
	ДобавитьПКС(СвойстваШапки, "Магазин",                 "", 1);
	ДобавитьПКС(СвойстваШапки, "Проведен",                "", 1);
	ДобавитьПКС(СвойстваШапки, "УчитыватьНДС",            "", 1);
	ДобавитьПКС(СвойстваШапки, "ХозяйственнаяОперация",   "", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "Серии",             "");
	ДобавитьПКС(СвойстваТЧ, "Количество",     "", 1);
	ДобавитьПКС(СвойстваТЧ, "Номенклатура",   "", 1,"Справочник_Номенклатура_Получение");
	ДобавитьПКС(СвойстваТЧ, "Серия",          "", 1,"Справочник_СерииНоменклатуры_Получение");
	ДобавитьПКС(СвойстваТЧ, "Характеристика", "", 1,"Справочник_ХарактеристикиНоменклатуры");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "Товары",            "");
	ДобавитьПКС(СвойстваТЧ, "Количество",          "", 1);
	ДобавитьПКС(СвойстваТЧ, "КоличествоУпаковок",  "", 1);
	ДобавитьПКС(СвойстваТЧ, "Номенклатура",        "", 1,"Справочник_Номенклатура_Получение");
	ДобавитьПКС(СвойстваТЧ, "СтавкаНДС",           "", 1,"Перечисление_СтавкиНДС");
	ДобавитьПКС(СвойстваТЧ, "СтатусУказанияСерий", "", 1);
	ДобавитьПКС(СвойстваТЧ, "Сумма",               "", 1);
	ДобавитьПКС(СвойстваТЧ, "СуммаНДС",            "", 1);
	ДобавитьПКС(СвойстваТЧ, "Упаковка",            "", 1,"Справочник_Упаковки");
	ДобавитьПКС(СвойстваТЧ, "Характеристика",      "", 1,"Справочник_ХарактеристикиНоменклатуры");
	ДобавитьПКС(СвойстваТЧ, "Цена",                "", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "ШтрихкодыУпаковок", "");
	ДобавитьПКС(СвойстваТЧ, "ЗначениеШтрихкода", "", 1);

	ПравилоКонвертации.ПоляПоиска.Добавить("ЗаказПоставщику");
КонецПроцедуры

Процедура ПКО_Документ_ПоступлениеПоЗаказу_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	Идентификатор = Новый УникальныйИдентификатор(ДанныеXDTO.Ссылка.Значение);
	ЗаказПоставщику = Документы.ЗаказПоставщику.ПолучитьСсылку(Идентификатор);
	ПолученныеДанные.ЗаказПоставщику = ЗаказПоставщику;
	ПолученныеДанные.УчитыватьНДС = ЗаказПоставщику.УчитыватьНДС;
	
	//Товары, серии
	
	ПравилаЗаполнения = Новый Соответствие;
	ПравилаЗаполнения.Вставить("Номенклатура", "Номенклатура");
	ПравилаЗаполнения.Вставить("Характеристика", "Характеристика");
	ПравилаЗаполнения.Вставить("СтатусУказанияСерий", "СтатусУказанияСерий");
	ПравилаЗаполнения.Вставить("Упаковка", "Упаковка");
	ПравилаЗаполнения.Вставить("Количество", "Количество");
	ПравилаЗаполнения.Вставить("КоличествоУпаковок", "КоличествоУпаковок");
	ПравилаЗаполнения.Вставить("Цена", "Цена");
	ПравилаЗаполнения.Вставить("Сумма", "Сумма");
	ПравилаЗаполнения.Вставить("СтавкаНДС", "СтавкаНДС");
	ПравилаЗаполнения.Вставить("СуммаНДС", "СуммаНДС");
	
	ПравилаЗаполненияСерий = Новый Соответствие;
	ПравилаЗаполненияСерий.Вставить("Номенклатура", "Номенклатура");
	ПравилаЗаполненияСерий.Вставить("Характеристика", "Характеристика");
	ПравилаЗаполненияСерий.Вставить("Серия", "Серия");
	ПравилаЗаполненияСерий.Вставить("Количество", "Количество");
	
	МассивСтрокТовары = Новый Массив;
	МассивСтрокСерии = Новый Массив;
	
	Если ДанныеXDTO.Свойство("Товары")
		И ЗначениеЗаполнено(ДанныеXDTO.Товары) Тогда
		Для Каждого Строка Из ДанныеXDTO.Товары Цикл
			СтруктураДанныхСтроки = ДанныеКоллекцииВВидеСтруктуры(Строка, ПравилаЗаполнения);
			МассивСтрокТовары.Добавить(СтруктураДанныхСтроки);
			Если ЗначениеЗаполнено(Строка.Серия) Тогда
				СтруктураДанныхСерия = ДанныеКоллекцииВВидеСтруктуры(Строка, ПравилаЗаполненияСерий);
				МассивСтрокСерии.Добавить(СтруктураДанныхСерия);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если МассивСтрокТовары.Количество() > 0 Тогда
		ПолученныеДанные.ДополнительныеСвойства.Вставить("Товары", МассивСтрокТовары);
	КонецЕсли;
	
	Если МассивСтрокСерии.Количество() > 0 Тогда
		ПолученныеДанные.ДополнительныеСвойства.Вставить("Серии", МассивСтрокСерии);
	КонецЕсли;
	
	//Маркировка
	МассивСтрокМаркировка = МассивМаркировка(ДанныеXDTO);
	Если МассивСтрокМаркировка.Количество() > 0 Тогда
		ПолученныеДанные.ДополнительныеСвойства.Вставить("ШтрихкодыУпаковок", МассивСтрокМаркировка);
	КонецЕсли;
КонецПроцедуры

Процедура ПКО_Документ_ПоступлениеПоЗаказу_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	ПолученныеДанные.Ответственный = Пользователи.ТекущийПользователь();
	ПолученныеДанные.Проведен = Истина;
	ПолученныеДанные.Магазин = ПолученныеДанные.Склад.Магазин;
	Если ДанныеИБ = Неопределено Тогда
		ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПоступлениеТоваров;
	Иначе
		ХозяйственнаяОперация = ДанныеИБ.ХозяйственнаяОперация;
	КонецЕсли;
	ПолученныеДанные.ХозяйственнаяОперация = ХозяйственнаяОперация;
	
	ТабТовары = ПолученныеДанные.Товары.Выгрузить();
	ТабТовары.Свернуть("Номенклатура, Характеристика, СтатусУказанияСерий, Упаковка, Цена, СтавкаНДС",
						"Количество, КоличествоУпаковок, Сумма, СуммаНДС");
	ПолученныеДанные.Товары.Загрузить(ТабТовары);
	
	ТаблицаМаркировка = ПолученныеДанные.ШтрихкодыУпаковок.Выгрузить(, "ЗначениеШтрихкода");
	ШтрихкодыУпаковок = ПодобратьШтрихкодыУпаковок(ТаблицаМаркировка);
	ПолученныеДанные.ШтрихкодыУпаковок.Очистить();
	
	Если ПолученныеДанные.ДополнительныеСвойства.Свойство("ШтрихкодыУпаковок") Тогда
		
		ТаблицаСоответствия = Новый Соответствие;
		Для Каждого Строка Из ПолученныеДанные.ДополнительныеСвойства.ШтрихкодыУпаковок Цикл
			ДанныеШтрихкодаУпаковки = Новый Структура;
			ДанныеШтрихкодаУпаковки.Вставить("Номенклатура", Строка.Номенклатура);
			ДанныеШтрихкодаУпаковки.Вставить("Характеристика", Строка.Характеристика);
			ДанныеШтрихкодаУпаковки.Вставить("Серия", Строка.Серия);
			ДанныеШтрихкодаУпаковки.Вставить("Штрихкод", Строка.ЗначениеШтрихкода);
			ДанныеШтрихкодаУпаковки.Вставить("ТипУпаковки", Перечисления.ТипыУпаковок.МаркированныйТовар);
			
			ТаблицаСоответствия.Вставить(Строка.ЗначениеШтрихкода, ДанныеШтрихкодаУпаковки);
		КонецЦикла;
		
		Для Каждого Строка Из ШтрихкодыУпаковок Цикл
			НоваяСтрокаШК = ПолученныеДанные.ШтрихкодыУпаковок.Добавить();
			Если ЗначениеЗаполнено(Строка.ШтрихкодУпаковки) Тогда
				НоваяСтрокаШК.ШтрихкодУпаковки = Строка.ШтрихкодУпаковки;
			Иначе
				ДанныеШтрихкодаУпаковки = ТаблицаСоответствия.Получить(Строка.ЗначениеШтрихкода);
				Если ДанныеШтрихкодаУпаковки <> Неопределено Тогда
					НовыйШтрихкодУпаковки = Справочники.ШтрихкодыУпаковокТоваров.СоздатьШтрихкодУпаковки(ДанныеШтрихкодаУпаковки);
					НоваяСтрокаШК.ШтрихкодУпаковки = НовыйШтрихкодУпаковки;
				Иначе
					НоваяСтрокаШК.ЗначениеШтрихкода = Строка.ЗначениеШтрихкода;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Документ_ПоступлениеТоваров_Получение
Процедура ДобавитьПКО_Документ_ПоступлениеТоваров_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Документ_ПоступлениеТоваров_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Документы.ПоступлениеТоваров;
	ПравилоКонвертации.ОбъектФормата                = "Документ.РаспоряжениеНаПриемку";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Документ_ПоступлениеТоваров_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_ПоступлениеТоваров_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных      = "ОтложеннаяОбработка_Документ_ПоступлениеТоваров";
	ПравилоКонвертации.ВариантИдентификации         = "ПоУникальномуИдентификатору";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Дата",                    "ДатаВыполнения");
	ДобавитьПКС(СвойстваШапки, "ДатаВходящегоДокумента",  "ДатаВходящегоДокумента");
	ДобавитьПКС(СвойстваШапки, "Комментарий",             "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Контрагент",              "Контрагент", , "Справочник_Контрагенты_Получение");
	ДобавитьПКС(СвойстваШапки, "НомерВходящегоДокумента", "НомерВходящегоДокумента");
	ДобавитьПКС(СвойстваШапки, "Организация",             "Организация", , "Справочник_Организации_Получение");
	ДобавитьПКС(СвойстваШапки, "Ответственный",           "", , "Справочник_Пользователи_Получение");
	ДобавитьПКС(СвойстваШапки, "Склад",                   "Склад", , "Справочник_Склады_Получение");
	ДобавитьПКС(СвойстваШапки, "ЦенаВключаетНДС",         "ЦенаВключаетНДС");
	ДобавитьПКС(СвойстваШапки, "Магазин",                 "", 1);
	ДобавитьПКС(СвойстваШапки, "Проведен",                "", 1);
	ДобавитьПКС(СвойстваШапки, "УчитыватьНДС",            "", 1);
	ДобавитьПКС(СвойстваШапки, "ХозяйственнаяОперация",   "", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "Серии",             "");
	ДобавитьПКС(СвойстваТЧ, "Количество",     "", 1);
	ДобавитьПКС(СвойстваТЧ, "Номенклатура",   "", 1,"Справочник_Номенклатура_Получение");
	ДобавитьПКС(СвойстваТЧ, "Серия",          "", 1,"Справочник_СерииНоменклатуры_Получение");
	ДобавитьПКС(СвойстваТЧ, "Характеристика", "", 1,"Справочник_ХарактеристикиНоменклатуры");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "Товары",            "");
	ДобавитьПКС(СвойстваТЧ, "Количество",          "", 1);
	ДобавитьПКС(СвойстваТЧ, "КоличествоУпаковок",  "", 1);
	ДобавитьПКС(СвойстваТЧ, "Номенклатура",        "", 1,"Справочник_Номенклатура_Получение");
	ДобавитьПКС(СвойстваТЧ, "СтавкаНДС",           "", 1,"Перечисление_СтавкиНДС");
	ДобавитьПКС(СвойстваТЧ, "СтатусУказанияСерий", "", 1);
	ДобавитьПКС(СвойстваТЧ, "Сумма",               "", 1);
	ДобавитьПКС(СвойстваТЧ, "СуммаНДС",            "", 1);
	ДобавитьПКС(СвойстваТЧ, "Упаковка",            "", 1,"Справочник_Упаковки");
	ДобавитьПКС(СвойстваТЧ, "Характеристика",      "", 1,"Справочник_ХарактеристикиНоменклатуры");
	ДобавитьПКС(СвойстваТЧ, "Цена",                "", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "ШтрихкодыУпаковок", "");
	ДобавитьПКС(СвойстваТЧ, "ЗначениеШтрихкода", "", 1);

КонецПроцедуры

Процедура ПКО_Документ_ПоступлениеТоваров_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	//Товары, серии
	
	ПравилаЗаполнения = Новый Соответствие;
	ПравилаЗаполнения.Вставить("Номенклатура", "Номенклатура");
	ПравилаЗаполнения.Вставить("Характеристика", "Характеристика");
	ПравилаЗаполнения.Вставить("СтатусУказанияСерий", "СтатусУказанияСерий");
	ПравилаЗаполнения.Вставить("Упаковка", "Упаковка");
	ПравилаЗаполнения.Вставить("Количество", "Количество");
	ПравилаЗаполнения.Вставить("КоличествоУпаковок", "КоличествоУпаковок");
	ПравилаЗаполнения.Вставить("Цена", "Цена");
	ПравилаЗаполнения.Вставить("Сумма", "Сумма");
	ПравилаЗаполнения.Вставить("СтавкаНДС", "СтавкаНДС");
	ПравилаЗаполнения.Вставить("СуммаНДС", "СуммаНДС");
	
	ПравилаЗаполненияСерий = Новый Соответствие;
	ПравилаЗаполненияСерий.Вставить("Номенклатура", "Номенклатура");
	ПравилаЗаполненияСерий.Вставить("Характеристика", "Характеристика");
	ПравилаЗаполненияСерий.Вставить("Серия", "Серия");
	ПравилаЗаполненияСерий.Вставить("Количество", "Количество");
	
	МассивСтрокТовары = Новый Массив;
	МассивСтрокСерии = Новый Массив;
	
	Если ДанныеXDTO.Свойство("Товары")
		И ЗначениеЗаполнено(ДанныеXDTO.Товары) Тогда
		Для Каждого Строка Из ДанныеXDTO.Товары Цикл
			СтруктураДанныхСтроки = ДанныеКоллекцииВВидеСтруктуры(Строка, ПравилаЗаполнения);
			МассивСтрокТовары.Добавить(СтруктураДанныхСтроки);
			Если ЗначениеЗаполнено(Строка.Серия) Тогда
				СтруктураДанныхСерия = ДанныеКоллекцииВВидеСтруктуры(Строка, ПравилаЗаполненияСерий);
				МассивСтрокСерии.Добавить(СтруктураДанныхСерия);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если МассивСтрокТовары.Количество() > 0 Тогда
		ПолученныеДанные.ДополнительныеСвойства.Вставить("Товары", МассивСтрокТовары);
	КонецЕсли;
	
	Если МассивСтрокСерии.Количество() > 0 Тогда
		ПолученныеДанные.ДополнительныеСвойства.Вставить("Серии", МассивСтрокСерии);
	КонецЕсли;
	
	//Маркировка
	МассивСтрокМаркировка = МассивМаркировка(ДанныеXDTO);
	Если МассивСтрокМаркировка.Количество() > 0 Тогда
		ПолученныеДанные.ДополнительныеСвойства.Вставить("ШтрихкодыУпаковок", МассивСтрокМаркировка);
	КонецЕсли;
КонецПроцедуры

Процедура ПКО_Документ_ПоступлениеТоваров_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	ПолученныеДанные.Ответственный = Пользователи.ТекущийПользователь();
	ПолученныеДанные.Проведен = Истина;
	ПолученныеДанные.Магазин = ПолученныеДанные.Склад.Магазин;
	Если ДанныеИБ = Неопределено Тогда
		ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПоступлениеТоваров;
	Иначе
		ХозяйственнаяОперация = ДанныеИБ.ХозяйственнаяОперация;
	КонецЕсли;
	ПолученныеДанные.ХозяйственнаяОперация = ХозяйственнаяОперация;
	
	ТабТовары = ПолученныеДанные.Товары.Выгрузить();
	ТабТовары.Свернуть("Номенклатура, Характеристика, СтатусУказанияСерий, Упаковка, Цена, СтавкаНДС",
						"Количество, КоличествоУпаковок, Сумма, СуммаНДС");
	ПолученныеДанные.Товары.Загрузить(ТабТовары);
	
	СуммаНДС = ПолученныеДанные.Товары.Итог("СуммаНДС");
	ПолученныеДанные.УчитыватьНДС = ?(СуммаНДС > 0, Истина, Ложь);
	
	ТаблицаМаркировка = ПолученныеДанные.ШтрихкодыУпаковок.Выгрузить(, "ЗначениеШтрихкода");
	ШтрихкодыУпаковок = ПодобратьШтрихкодыУпаковок(ТаблицаМаркировка);
	ПолученныеДанные.ШтрихкодыУпаковок.Очистить();
	
	Если ПолученныеДанные.ДополнительныеСвойства.Свойство("ШтрихкодыУпаковок") Тогда
		
		ТаблицаСоответствия = Новый Соответствие;
		Для Каждого Строка Из ПолученныеДанные.ДополнительныеСвойства.ШтрихкодыУпаковок Цикл
			ДанныеШтрихкодаУпаковки = Новый Структура;
			ДанныеШтрихкодаУпаковки.Вставить("Номенклатура", Строка.Номенклатура);
			ДанныеШтрихкодаУпаковки.Вставить("Характеристика", Строка.Характеристика);
			ДанныеШтрихкодаУпаковки.Вставить("Серия", Строка.Серия);
			ДанныеШтрихкодаУпаковки.Вставить("Штрихкод", Строка.ЗначениеШтрихкода);
			ДанныеШтрихкодаУпаковки.Вставить("ТипУпаковки", Перечисления.ТипыУпаковок.МаркированныйТовар);
			
			ТаблицаСоответствия.Вставить(Строка.ЗначениеШтрихкода, ДанныеШтрихкодаУпаковки);
		КонецЦикла;
		
		Для Каждого Строка Из ШтрихкодыУпаковок Цикл
			НоваяСтрокаШК = ПолученныеДанные.ШтрихкодыУпаковок.Добавить();
			Если ЗначениеЗаполнено(Строка.ШтрихкодУпаковки) Тогда
				НоваяСтрокаШК.ШтрихкодУпаковки = Строка.ШтрихкодУпаковки;
			Иначе
				ДанныеШтрихкодаУпаковки = ТаблицаСоответствия.Получить(Строка.ЗначениеШтрихкода);
				Если ДанныеШтрихкодаУпаковки <> Неопределено Тогда
					НовыйШтрихкодУпаковки = Справочники.ШтрихкодыУпаковокТоваров.СоздатьШтрихкодУпаковки(ДанныеШтрихкодаУпаковки);
					НоваяСтрокаШК.ШтрихкодУпаковки = НовыйШтрихкодУпаковки;
				Иначе
					НоваяСтрокаШК.ЗначениеШтрихкода = Строка.ЗначениеШтрихкода;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		ЗаполнитьДокументТТНВходящаяЕГАИС(ПолученныеДанные, ДанныеИБ);
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Документ_ПриемкаПоЗаказуНаПеремещение_Получение
Процедура ДобавитьПКО_Документ_ПриемкаПоЗаказуНаПеремещение_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Документ_ПриемкаПоЗаказуНаПеремещение_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Документы.ПеремещениеТоваров;
	ПравилоКонвертации.ОбъектФормата                = "Документ.РаспоряжениеНаПриемку";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Документ_ПриемкаПоЗаказуНаПеремещение_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_ПриемкаПоЗаказуНаПеремещение_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных      = "ОтложеннаяОбработка_СерииИМаркировка";
	ПравилоКонвертации.ВариантИдентификации         = "ПоПолямПоиска";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Дата",                  "ДатаВыполнения");
	ДобавитьПКС(СвойстваШапки, "Комментарий",           "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Организация",           "ОрганизацияОтправитель", , "Справочник_Организации_Получение");
	ДобавитьПКС(СвойстваШапки, "ОрганизацияПолучатель", "Организация", , "Справочник_Организации_Получение");
	ДобавитьПКС(СвойстваШапки, "Ответственный",         "", , "Справочник_Пользователи_Получение");
	ДобавитьПКС(СвойстваШапки, "СкладОтправитель",      "СкладОтправитель", , "Справочник_Склады_Получение");
	ДобавитьПКС(СвойстваШапки, "СкладПолучатель",       "Склад", , "Справочник_Склады_Получение");
	ДобавитьПКС(СвойстваШапки, "ДокументОснование",     "", 1);
	ДобавитьПКС(СвойстваШапки, "МагазинОтправитель",    "", 1);
	ДобавитьПКС(СвойстваШапки, "МагазинПолучатель",     "", 1);
	ДобавитьПКС(СвойстваШапки, "Проведен",              "", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "АкцизныеМарки", "");
	ДобавитьПКС(СвойстваТЧ, "АкцизнаяМарка", "", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "Серии",         "");
	ДобавитьПКС(СвойстваТЧ, "Количество",     "", 1);
	ДобавитьПКС(СвойстваТЧ, "Номенклатура",   "", 1,"Справочник_Номенклатура_Получение");
	ДобавитьПКС(СвойстваТЧ, "Серия",          "", 1,"Справочник_СерииНоменклатуры_Получение");
	ДобавитьПКС(СвойстваТЧ, "Характеристика", "", 1,"Справочник_ХарактеристикиНоменклатуры");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "Товары",        "");
	ДобавитьПКС(СвойстваТЧ, "Количество",                      "", 1);
	ДобавитьПКС(СвойстваТЧ, "КоличествоУпаковок",              "", 1);
	ДобавитьПКС(СвойстваТЧ, "НеобходимостьВводаАкцизнойМарки", "", 1);
	ДобавитьПКС(СвойстваТЧ, "Номенклатура",                    "", 1,"Справочник_Номенклатура_Получение");
	ДобавитьПКС(СвойстваТЧ, "СтатусУказанияСерий",             "", 1);
	ДобавитьПКС(СвойстваТЧ, "Упаковка",                        "", 1,"Справочник_Упаковки");
	ДобавитьПКС(СвойстваТЧ, "Характеристика",                  "", 1,"Справочник_ХарактеристикиНоменклатуры");

	ПравилоКонвертации.ПоляПоиска.Добавить("ДокументОснование");
КонецПроцедуры

Процедура ПКО_Документ_ПриемкаПоЗаказуНаПеремещение_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	Идентификатор = Новый УникальныйИдентификатор(ДанныеXDTO.Ссылка.Значение);
	ЗаказНаПеремещение = Документы.ЗаказНаПеремещение.ПолучитьСсылку(Идентификатор);
	ПолученныеДанные.ДокументОснование = ЗаказНаПеремещение;
	
	//Маркировка
	ТаблицаМаркировка = ТаблицаМаркировка(ДанныеXDTO);
	ШтрихкодыУпаковок = ПодобратьШтрихкодыУпаковок(ТаблицаМаркировка, Истина);
	Для Каждого Строка Из ШтрихкодыУпаковок Цикл
		НоваяСтрока = ПолученныеДанные.АкцизныеМарки.Добавить();
		НоваяСтрока.АкцизнаяМарка = Строка.ШтрихкодУпаковки;
	КонецЦикла;
	
	//Товары, Серии
	
	ПравилаЗаполнения = Новый Соответствие;
	ПравилаЗаполнения.Вставить("Номенклатура", "Номенклатура");
	ПравилаЗаполнения.Вставить("Характеристика", "Характеристика");
	ПравилаЗаполнения.Вставить("СтатусУказанияСерий", "СтатусУказанияСерий");
	ПравилаЗаполнения.Вставить("Упаковка", "Упаковка");
	ПравилаЗаполнения.Вставить("Количество", "Количество");
	ПравилаЗаполнения.Вставить("КоличествоУпаковок", "КоличествоУпаковок");
	
	ПравилаЗаполненияСерий = Новый Соответствие;
	ПравилаЗаполненияСерий.Вставить("Номенклатура", "Номенклатура");
	ПравилаЗаполненияСерий.Вставить("Характеристика", "Характеристика");
	ПравилаЗаполненияСерий.Вставить("Серия", "Серия");
	ПравилаЗаполненияСерий.Вставить("Количество", "Количество");
	
	МассивСтрокТовары = Новый Массив;
	МассивСтрокСерии = Новый Массив;
	
	Если ДанныеXDTO.Свойство("Товары")
		И ЗначениеЗаполнено(ДанныеXDTO.Товары) Тогда
		Для Каждого Строка Из ДанныеXDTO.Товары Цикл
			СтруктураДанныхСтроки = ДанныеКоллекцииВВидеСтруктуры(Строка, ПравилаЗаполнения);
			МассивСтрокТовары.Добавить(СтруктураДанныхСтроки);
			Если ЗначениеЗаполнено(Строка.Серия) Тогда
				СтруктураДанныхСерия = ДанныеКоллекцииВВидеСтруктуры(Строка, ПравилаЗаполненияСерий);
				МассивСтрокСерии.Добавить(СтруктураДанныхСерия);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если МассивСтрокТовары.Количество() > 0 Тогда
		ПолученныеДанные.ДополнительныеСвойства.Вставить("Товары", МассивСтрокТовары);
	КонецЕсли;
	
	Если МассивСтрокСерии.Количество() > 0 Тогда
		ПолученныеДанные.ДополнительныеСвойства.Вставить("Серии", МассивСтрокСерии);
	КонецЕсли;
КонецПроцедуры

Процедура ПКО_Документ_ПриемкаПоЗаказуНаПеремещение_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	ПолученныеДанные.Проведен = Истина;
	
	ПолученныеДанные.МагазинОтправитель = ПолученныеДанные.СкладОтправитель.Магазин;
	ПолученныеДанные.МагазинПолучатель = ПолученныеДанные.СкладПолучатель.Магазин;
	
	НовоеПеремещение = ДанныеИБ = Неопределено;
	Если НЕ НовоеПеремещение Тогда
		ТекущийКомментарий = СокрЛП(ДанныеИБ.Комментарий);
		Если Не ПустаяСтрока(ТекущийКомментарий) Тогда
			ПолученныеДанные.Комментарий = ПолученныеДанные.Комментарий + Символы.ПС + Символы.ПС + ТекущийКомментарий;
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ НовоеПеремещение И ДанныеИБ.Проведен Тогда
	
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
		Запрос.УстановитьПараметр("ТоварыФакт", ПолученныеДанные.Товары.Выгрузить());
		Запрос.Текст = "ВЫБРАТЬ
		|	ТоварыФакт.Номенклатура КАК Номенклатура,
		|	ТоварыФакт.Характеристика КАК Характеристика,
		|	ТоварыФакт.Упаковка КАК Упаковка,
		|	ТоварыФакт.Количество КАК Количество,
		|	ТоварыФакт.КоличествоУпаковок КАК КоличествоУпаковок,
		|	ТоварыФакт.СтатусУказанияСерий КАК СтатусУказанияСерий
		|ПОМЕСТИТЬ ТоварыФакт
		|ИЗ
		|	&ТоварыФакт КАК ТоварыФакт
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТоварыФакт.Номенклатура КАК Номенклатура,
		|	ТоварыФакт.Характеристика КАК Характеристика,
		|	ТоварыФакт.Упаковка КАК Упаковка,
		|	СУММА(ТоварыФакт.Количество) КАК Количество,
		|	СУММА(ТоварыФакт.КоличествоУпаковок) КАК КоличествоУпаковок,
		|	МИНИМУМ(ТоварыФакт.СтатусУказанияСерий) КАК СтатусУказанияСерий
		|ПОМЕСТИТЬ ТоварыФакт_Свернутая
		|ИЗ
		|	ТоварыФакт КАК ТоварыФакт
		|
		|СГРУППИРОВАТЬ ПО
		|	ТоварыФакт.Номенклатура,
		|	ТоварыФакт.Характеристика,
		|	ТоварыФакт.Упаковка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ТоварыФакт
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПеремещениеТоваровТовары.Номенклатура КАК Номенклатура,
		|	ПеремещениеТоваровТовары.Характеристика КАК Характеристика,
		|	ПеремещениеТоваровТовары.Упаковка КАК Упаковка,
		|	СУММА(ПеремещениеТоваровТовары.Количество) КАК КоличествоВДокументе,
		|	СУММА(ПеремещениеТоваровТовары.КоличествоУпаковок) КАК КоличествоУпаковокВДокументе,
		|	МИНИМУМ(ПеремещениеТоваровТовары.СтатусУказанияСерий) КАК СтатусУказанияСерий
		|ПОМЕСТИТЬ Товары
		|ИЗ
		|	Документ.ПеремещениеТоваров.Товары КАК ПеремещениеТоваровТовары
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПеремещениеТоваров КАК ПеремещениеТоваров
		|		ПО ПеремещениеТоваровТовары.Ссылка = ПеремещениеТоваров.Ссылка
		|ГДЕ
		|	ПеремещениеТоваров.Ссылка = &Ссылка
		|
		|СГРУППИРОВАТЬ ПО
		|	ПеремещениеТоваровТовары.Номенклатура,
		|	ПеремещениеТоваровТовары.Характеристика,
		|	ПеремещениеТоваровТовары.Упаковка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЕСТЬNULL(Товары.Номенклатура, ТоварыФакт_Свернутая.Номенклатура) КАК Номенклатура,
		|	ЕСТЬNULL(Товары.Характеристика, ТоварыФакт_Свернутая.Характеристика) КАК Характеристика,
		|	ЕСТЬNULL(Товары.Упаковка, ТоварыФакт_Свернутая.Упаковка) КАК Упаковка
		|ИЗ
		|	Товары КАК Товары
		|		ПОЛНОЕ СОЕДИНЕНИЕ ТоварыФакт_Свернутая КАК ТоварыФакт_Свернутая
		|		ПО Товары.Номенклатура = ТоварыФакт_Свернутая.Номенклатура
		|			И Товары.Характеристика = ТоварыФакт_Свернутая.Характеристика
		|			И Товары.Упаковка = ТоварыФакт_Свернутая.Упаковка
		|ГДЕ
		|	ЕСТЬNULL(Товары.КоличествоУпаковокВДокументе, 0) <> ЕСТЬNULL(ТоварыФакт_Свернутая.КоличествоУпаковок, 0)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЕСТЬNULL(Товары.Номенклатура, ТоварыФакт_Свернутая.Номенклатура) КАК Номенклатура,
		|	ЕСТЬNULL(Товары.Характеристика, ТоварыФакт_Свернутая.Характеристика) КАК Характеристика,
		|	ЕСТЬNULL(Товары.Упаковка, ТоварыФакт_Свернутая.Упаковка) КАК Упаковка,
		|	ЕСТЬNULL(Товары.КоличествоВДокументе, 0) КАК КоличествоВДокументе,
		|	ЕСТЬNULL(Товары.КоличествоУпаковокВДокументе, 0) КАК КоличествоУпаковокВДокументе,
		|	ЕСТЬNULL(ТоварыФакт_Свернутая.Количество, 0) КАК Количество,
		|	ЕСТЬNULL(ТоварыФакт_Свернутая.КоличествоУпаковок, 0) КАК КоличествоУпаковок,
		|	ЕСТЬNULL(Товары.СтатусУказанияСерий, ТоварыФакт_Свернутая.СтатусУказанияСерий) КАК СтатусУказанияСерий,
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(Товары.КоличествоВДокументе, 0) = 0
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК ЗаполненоПоОснованию
		|ИЗ
		|	Товары КАК Товары
		|		ПОЛНОЕ СОЕДИНЕНИЕ ТоварыФакт_Свернутая КАК ТоварыФакт_Свернутая
		|		ПО Товары.Номенклатура = ТоварыФакт_Свернутая.Номенклатура
		|			И Товары.Характеристика = ТоварыФакт_Свернутая.Характеристика
		|			И Товары.Упаковка = ТоварыФакт_Свернутая.Упаковка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ТоварыФакт_Свернутая
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ Товары";
	
		Результат = Запрос.ВыполнитьПакет();
		ТаблицаРасхождений = Результат[4].Выгрузить();
	
		Если ТаблицаРасхождений.Количество() > 0 Тогда
			//Акт о расхождениях
			Запрос = Новый Запрос;
			Запрос.УстановитьПараметр("ДокументОснование", ДанныеИБ.Ссылка);
			Запрос.Текст = "ВЫБРАТЬ
			|	АктОРасхожденияхПриПриемкеТоваров.Ссылка КАК Ссылка
			|ИЗ
			|	Документ.АктОРасхожденияхПриПриемкеТоваров КАК АктОРасхожденияхПриПриемкеТоваров
			|ГДЕ
			|	АктОРасхожденияхПриПриемкеТоваров.ДокументОснование = &ДокументОснование";
			Выборка = Запрос.Выполнить().Выбрать();
			Если Выборка.Следующий() Тогда
				АктОРасхождениях = Выборка.Ссылка.ПолучитьОбъект();
				АктОРасхождениях.ПометкаУдаления = Ложь;
			Иначе
				АктОРасхождениях = Документы.АктОРасхожденияхПриПриемкеТоваров.СоздатьДокумент();
				АктОРасхождениях.ДокументОснование = ДанныеИБ.Ссылка;
			КонецЕсли;
			АктОРасхождениях.Дата = ПолученныеДанные.Дата;
			СписокСвойств =
				"МагазинОтправитель, МагазинПолучатель," +
				"Организация, ОрганизацияПолучатель," +
				"СкладОтправитель, СкладПолучатель";
			ЗаполнитьЗначенияСвойств(АктОРасхождениях, ДанныеИБ, СписокСвойств);
			ТоварыАкт = Результат[5].Выгрузить();
			АктОРасхождениях.Товары.Загрузить(ТоварыАкт);
			АктОРасхождениях.Серии.Загрузить(ПолученныеДанные.Серии.Выгрузить());
			АктОРасхождениях.Ответственный = Пользователи.ТекущийПользователь();
			АктОРасхождениях.Проведен = Истина;
			АктОРасхождениях.Записать(РежимЗаписиДокумента.Проведение);
			ОбработатьСерииНоменклатуры(АктОРасхождениях);
		КонецЕсли;
		
		ПолученныеДанные.Дата = ДанныеИБ.Дата;
		ПолученныеДанные.Товары.Загрузить(ДанныеИБ.Товары.Выгрузить());
		ПолученныеДанные.Серии.Загрузить(ДанныеИБ.Серии.Выгрузить());
		ПолученныеДанные.Ответственный = ДанныеИБ.Ответственный;
	Иначе
		ТабТовары = ПолученныеДанные.Товары.Выгрузить();
		ТабТовары.Свернуть("Номенклатура, Характеристика, СтатусУказанияСерий, Упаковка",
						"Количество, КоличествоУпаковок");
		ПолученныеДанные.Товары.Загрузить(ТабТовары);
		ПолученныеДанные.Ответственный = Пользователи.ТекущийПользователь();
	КонецЕсли;
	
	Для Каждого Строка Из ПолученныеДанные.АкцизныеМарки Цикл
		ШтрихкодУпаковки = Строка.АкцизнаяМарка;
		
		СтруктураПоиска = Новый Структура("Номенклатура, Характеристика");
		СтруктураПоиска.Номенклатура = ШтрихкодУпаковки.Номенклатура;
		СтруктураПоиска.Характеристика = ШтрихкодУпаковки.Характеристика;
		СтрокиТовар = ПолученныеДанные.Товары.НайтиСтроки(СтруктураПоиска);
		Если СтрокиТовар.Количество() > 0 Тогда
			СтрокаТовар = СтрокиТовар[0];
			СтрокаТовар.НеобходимостьВводаАкцизнойМарки = Истина;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры
#КонецОбласти
#Область Документ_ЧекККМ_Получение
Процедура ДобавитьПКО_Документ_ЧекККМ_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Документ_ЧекККМ_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Документы.ЧекККМ;
	ПравилоКонвертации.ОбъектФормата                = "Документ.РаспоряжениеНаОтгрузку";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Документ_ЧекККМ_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_ЧекККМ_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных      = "ОтложеннаяОбработка_Документ_ЧекККМ";
	ПравилоКонвертации.ВариантИдентификации         = "ПоПолямПоиска";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Дата",                           "ДатаВыполнения");
	ДобавитьПКС(СвойстваШапки, "Комментарий",                    "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Организация",                    "Организация", , "Справочник_Организации_Получение");
	ДобавитьПКС(СвойстваШапки, "АналитикаХозяйственнойОперации", "", 1);
	ДобавитьПКС(СвойстваШапки, "ВидОперации",                    "", 1);
	ДобавитьПКС(СвойстваШапки, "Контрагент",                     "", 1);
	ДобавитьПКС(СвойстваШапки, "ЗаказПокупателя",                "", 1);
	ДобавитьПКС(СвойстваШапки, "КассаККМ",                       "", 1);
	ДобавитьПКС(СвойстваШапки, "Магазин",                        "", 1);
	ДобавитьПКС(СвойстваШапки, "СистемаНалогообложения",         "", 1);
	ДобавитьПКС(СвойстваШапки, "СтатусЧекаККМ",                  "", 1);
	ДобавитьПКС(СвойстваШапки, "ЦенаВключаетНДС",                "", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "АкцизныеМарки", "");
	ДобавитьПКС(СвойстваТЧ, "АкцизнаяМарка",    "", 1);
	ДобавитьПКС(СвойстваТЧ, "КлючСвязи",        "", 1);
	ДобавитьПКС(СвойстваТЧ, "КодАкцизнойМарки", "", 1);
	ДобавитьПКС(СвойстваТЧ, "ШтрихкодУпаковки", "", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "Серии",         "");
	ДобавитьПКС(СвойстваТЧ, "Количество",     "", 1);
	ДобавитьПКС(СвойстваТЧ, "Номенклатура",   "", 1,"Справочник_Номенклатура_Получение");
	ДобавитьПКС(СвойстваТЧ, "Серия",          "", 1,"Справочник_СерииНоменклатуры_Получение");
	ДобавитьПКС(СвойстваТЧ, "Характеристика", "", 1,"Справочник_ХарактеристикиНоменклатуры");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "Товары",        "");
	ДобавитьПКС(СвойстваТЧ, "ЗаказПокупателя",                 "", 1);
	ДобавитьПКС(СвойстваТЧ, "КлючСвязи",                       "", 1);
	ДобавитьПКС(СвойстваТЧ, "Количество",                      "", 1);
	ДобавитьПКС(СвойстваТЧ, "КоличествоУпаковок",              "", 1);
	ДобавитьПКС(СвойстваТЧ, "НеобходимостьВводаАкцизнойМарки", "", 1);
	ДобавитьПКС(СвойстваТЧ, "Номенклатура",                    "", 1,"Справочник_Номенклатура_Получение");
	ДобавитьПКС(СвойстваТЧ, "Склад",                           "", 1);
	ДобавитьПКС(СвойстваТЧ, "СтавкаНДС",                       "", 1,"Перечисление_СтавкиНДС");
	ДобавитьПКС(СвойстваТЧ, "СтатусУказанияСерий",             "", 1);
	ДобавитьПКС(СвойстваТЧ, "Сумма",                           "", 1);
	ДобавитьПКС(СвойстваТЧ, "СуммаНДС",                        "", 1);
	ДобавитьПКС(СвойстваТЧ, "Упаковка",                        "", 1,"Справочник_Упаковки");
	ДобавитьПКС(СвойстваТЧ, "Характеристика",                  "", 1,"Справочник_ХарактеристикиНоменклатуры");
	ДобавитьПКС(СвойстваТЧ, "Цена",                            "", 1);

	ПравилоКонвертации.ПоляПоиска.Добавить("ЗаказПокупателя");
КонецПроцедуры

Процедура ПКО_Документ_ЧекККМ_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	Идентификатор = Новый УникальныйИдентификатор(ДанныеXDTO.Ссылка.Значение);
	ЗаказПокупателя = Документы.ЗаказПокупателя.ПолучитьСсылку(Идентификатор);
	
	ПолученныеДанные.Контрагент = ЗаказПокупателя.Контрагент;
	ПолученныеДанные.ЗаказПокупателя = ЗаказПокупателя;
	ПолученныеДанные.Магазин = ЗаказПокупателя.Магазин;
	ПолученныеДанные.ЦенаВключаетНДС = ЗаказПокупателя.ЦенаВключаетНДС;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Магазин", ЗаказПокупателя.Магазин);
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	КассыККМ.Ссылка КАК КассаККМ
	|ИЗ
	|	Справочник.КассыККМ КАК КассыККМ
	|ГДЕ
	|	КассыККМ.Магазин = &Магазин
	|	И НЕ КассыККМ.ПометкаУдаления
	|	И КассыККМ.ТипКассы В (ЗНАЧЕНИЕ(Перечисление.ТипыКассККМ.ФискальныйРегистратор), ЗНАЧЕНИЕ(Перечисление.ТипыКассККМ.АвтономнаяККМ))";
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ПолученныеДанные.КассаККМ = Выборка.КассаККМ;
	КонецЕсли;
	
	//Товары, серии
	
	ПравилаЗаполнения = Новый Соответствие;
	ПравилаЗаполнения.Вставить("Номенклатура", "Номенклатура");
	ПравилаЗаполнения.Вставить("Характеристика", "Характеристика");
	ПравилаЗаполнения.Вставить("СтатусУказанияСерий", "СтатусУказанияСерий");
	ПравилаЗаполнения.Вставить("Упаковка", "Упаковка");
	ПравилаЗаполнения.Вставить("Количество", "Количество");
	ПравилаЗаполнения.Вставить("КоличествоУпаковок", "КоличествоУпаковок");
	ПравилаЗаполнения.Вставить("Цена", "Цена");
	ПравилаЗаполнения.Вставить("Сумма", "Сумма");
	ПравилаЗаполнения.Вставить("СтавкаНДС", "СтавкаНДС");
	ПравилаЗаполнения.Вставить("СуммаНДС", "СуммаНДС");
	ПравилаЗаполнения.Вставить("КлючСвязи", "КлючСвязи");
	
	ПравилаЗаполненияСерий = Новый Соответствие;
	ПравилаЗаполненияСерий.Вставить("Номенклатура", "Номенклатура");
	ПравилаЗаполненияСерий.Вставить("Характеристика", "Характеристика");
	ПравилаЗаполненияСерий.Вставить("Серия", "Серия");
	ПравилаЗаполненияСерий.Вставить("Количество", "Количество");
	
	МассивСтрокТовары = Новый Массив;
	МассивСтрокСерии = Новый Массив;
	
	Если ДанныеXDTO.Свойство("Товары")
		И ЗначениеЗаполнено(ДанныеXDTO.Товары) Тогда
		Склад = ЗаказПокупателя.Склад;
		Для Каждого Строка Из ДанныеXDTO.Товары Цикл
			СтруктураДанныхСтроки = ДанныеКоллекцииВВидеСтруктуры(Строка, ПравилаЗаполнения);
			СтруктураДанныхСтроки.Вставить("ЗаказПокупателя", ЗаказПокупателя);
			СтруктураДанныхСтроки.Вставить("Склад", Склад);
			МассивСтрокТовары.Добавить(СтруктураДанныхСтроки);
			Если ЗначениеЗаполнено(Строка.Серия) Тогда
				СтруктураДанныхСерия = ДанныеКоллекцииВВидеСтруктуры(Строка, ПравилаЗаполненияСерий);
				МассивСтрокСерии.Добавить(СтруктураДанныхСерия);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если МассивСтрокТовары.Количество() > 0 Тогда
		ПолученныеДанные.ДополнительныеСвойства.Вставить("Товары", МассивСтрокТовары);
	КонецЕсли;
	
	Если МассивСтрокСерии.Количество() > 0 Тогда
		ПолученныеДанные.ДополнительныеСвойства.Вставить("Серии", МассивСтрокСерии);
	КонецЕсли;
	
	//Маркировка
	МассивСтрокМаркировка = Новый Массив;
	Если ДанныеXDTO.Свойство("Маркировка")
		И ЗначениеЗаполнено(ДанныеXDTO.Маркировка) Тогда
		Для Каждого Строка Из ДанныеXDTO.Маркировка Цикл
			ДвоичныеДанные = Base64Значение(Строка.НомерАкцизнойМарки);
			Если ДвоичныеДанные = Неопределено Тогда
				Штрихкод = Строка.НомерАкцизнойМарки;
			Иначе
				Штрихкод = ПолучитьСтрокуИзДвоичныхДанных(ДвоичныеДанные);
			КонецЕсли;
			ЗначениеШтрихкода = ИнтерфейсИСМП.РазобратьИНормализоватьКодМаркировки(Штрихкод);
			МассивСтрокМаркировка.Добавить(Новый Структура("КодАкцизнойМарки", ЗначениеШтрихкода));
		КонецЦикла;
	КонецЕсли;
	
	Если МассивСтрокМаркировка.Количество() > 0 Тогда
		ПолученныеДанные.ДополнительныеСвойства.Вставить("АкцизныеМарки", МассивСтрокМаркировка);
	КонецЕсли;
КонецПроцедуры

Процедура ПКО_Документ_ЧекККМ_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	ПолученныеДанные.ВидОперации = Перечисления.ВидыОперацийЧекККМ.Продажа;
	ПолученныеДанные.АналитикаХозяйственнойОперации = Справочники.АналитикаХозяйственныхОпераций.РеализацияТоваров;
	ПолученныеДанные.СтатусЧекаККМ = Перечисления.СтатусыЧековККМ.Отложенный;
	
	ПолученныеДанные.СистемаНалогообложения = ПодключаемоеОборудованиеРТ.ПолучитьСистемуНалогообложения(
				ПолученныеДанные.Дата, ПолученныеДанные.Организация, ПолученныеДанные.Магазин, 
				ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПолученныеДанные.Магазин, "СкладПродажи"));
	
	ТабТовары = ПолученныеДанные.Товары.Выгрузить();
	ТабТовары.Свернуть("Номенклатура, Характеристика, СтатусУказанияСерий, Упаковка, Цена, СтавкаНДС, Склад, ЗаказПокупателя, КлючСвязи",
						"Количество, КоличествоУпаковок, Сумма, СуммаНДС");
	
	Сч = 1;
	Для Каждого Строка Из ТабТовары Цикл
		Строка.КлючСвязи = Сч;
		Сч = Сч +1;
	КонецЦикла;
	
	ПолученныеДанные.Товары.Загрузить(ТабТовары);
	
	Подарки = ПолученныеДанные.ЗаказПокупателя.Подарки;
	Если Подарки.Количество() > 0 Тогда
		Для Каждого СтрПодарок Из Подарки Цикл
			Отбор = Новый Структура("Номенклатура, Характеристика, Количество, КоличествоУпаковок");
			ЗаполнитьЗначенияСвойств(Отбор, СтрПодарок);
			НайденныеТовары = ПолученныеДанные.Товары.НайтиСтроки(Отбор);
			Если НайденныеТовары.Количество() > 0 Тогда
				НоваяСтрока = ПолученныеДанные.Подарки.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, НайденныеТовары[0]);
				ПолученныеДанные.Товары.Удалить(НайденныеТовары[0]);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	ТаблицаМаркировка = Новый ТаблицаЗначений;
	ТаблицаМаркировка.Колонки.Добавить("ЗначениеШтрихкода", Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(200)));
	
	Для Каждого Строка Из ПолученныеДанные.АкцизныеМарки Цикл
		СтрокаМаркировка = ТаблицаМаркировка.Добавить();
		СтрокаМаркировка.ЗначениеШтрихкода = Строка.КодАкцизнойМарки;
	КонецЦикла;
	
	ПолученныеДанные.АкцизныеМарки.Очистить();
		
	ШтрихкодыУпаковок = ПодобратьШтрихкодыУпаковок(ТаблицаМаркировка, Истина);
	Для Каждого Строка Из ШтрихкодыУпаковок Цикл
		СтрокаМаркировка = ПолученныеДанные.АкцизныеМарки.Добавить();
		СтрокаМаркировка.КодАкцизнойМарки = Строка.ЗначениеШтрихкода;
		ШтрихкодУпаковки = Строка.ШтрихкодУпаковки;
		СтрокаМаркировка.АкцизнаяМарка = ШтрихкодУпаковки;
		СтрокаМаркировка.ШтрихкодУпаковки = ШтрихкодУпаковки;
		
		//КлючСвязи
		СтруктураПоиска = Новый Структура("Номенклатура, Характеристика");
		СтруктураПоиска.Номенклатура = ШтрихкодУпаковки.Номенклатура;
		СтруктураПоиска.Характеристика = ШтрихкодУпаковки.Характеристика;
		СтрокиТовар = ПолученныеДанные.Товары.НайтиСтроки(СтруктураПоиска);
		Если СтрокиТовар.Количество() > 0 Тогда
			СтрокаТовар = СтрокиТовар[0];
			СтрокаМаркировка.КлючСвязи = СтрокаТовар.КлючСвязи;
			СтрокаТовар.НеобходимостьВводаАкцизнойМарки = Истина;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры
#КонецОбласти
#Область Справочник_Контрагенты_Получение
Процедура ДобавитьПКО_Справочник_Контрагенты_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Справочник_Контрагенты_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Справочники.Контрагенты;
	ПравилоКонвертации.ОбъектФормата                = "Справочник.Контрагенты";
	ПравилоКонвертации.ВариантИдентификации         = "ПоУникальномуИдентификатору";
	

КонецПроцедуры
#КонецОбласти
#Область Справочник_Номенклатура_Получение
Процедура ДобавитьПКО_Справочник_Номенклатура_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Справочник_Номенклатура_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Справочники.Номенклатура;
	ПравилоКонвертации.ОбъектФормата                = "Справочник.Номенклатура";
	ПравилоКонвертации.ВариантИдентификации         = "ПоУникальномуИдентификатору";
	

КонецПроцедуры
#КонецОбласти
#Область Справочник_Организации_Получение
Процедура ДобавитьПКО_Справочник_Организации_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Справочник_Организации_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Справочники.Организации;
	ПравилоКонвертации.ОбъектФормата                = "Справочник.Организации";
	ПравилоКонвертации.ВариантИдентификации         = "ПоУникальномуИдентификатору";
	

КонецПроцедуры
#КонецОбласти
#Область Справочник_Пользователи_Получение
Процедура ДобавитьПКО_Справочник_Пользователи_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Справочник_Пользователи_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Справочники.Пользователи;
	ПравилоКонвертации.ОбъектФормата                = "Справочник.Пользователи";
	ПравилоКонвертации.ВариантИдентификации         = "ПоУникальномуИдентификатору";
	

КонецПроцедуры
#КонецОбласти
#Область Справочник_СерииНоменклатуры_Получение
Процедура ДобавитьПКО_Справочник_СерииНоменклатуры_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Справочник_СерииНоменклатуры_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Справочники.СерииНоменклатуры;
	ПравилоКонвертации.ОбъектФормата                = "Справочник.СерииНоменклатуры";
	ПравилоКонвертации.ВариантИдентификации         = "ПоУникальномуИдентификатору";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "ГоденДо",          "ГоденДо");
	ДобавитьПКС(СвойстваШапки, "ДатаПроизводства", "ДатаПроизводства");
	ДобавитьПКС(СвойстваШапки, "Наименование",     "Наименование");
	ДобавитьПКС(СвойстваШапки, "Номер",            "СерийныйНомер");

КонецПроцедуры
#КонецОбласти
#Область Справочник_Склады_Получение
Процедура ДобавитьПКО_Справочник_Склады_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Справочник_Склады_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Справочники.Склады;
	ПравилоКонвертации.ОбъектФормата                = "Справочник.Склады";
	ПравилоКонвертации.ВариантИдентификации         = "ПоУникальномуИдентификатору";
	

КонецПроцедуры
#КонецОбласти
#КонецОбласти
#Область ОтправкаИПолучение
#Область Справочник_ЕдиницыИзмерения
Процедура ДобавитьПКО_Справочник_ЕдиницыИзмерения(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Справочник_ЕдиницыИзмерения";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Справочники.БазовыеЕдиницыИзмерения;
	ПравилоКонвертации.ОбъектФормата                = "Справочник.ЕдиницыИзмерения";
	ПравилоКонвертации.ВариантИдентификации         = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Код",                "Код");
	ДобавитьПКС(СвойстваШапки, "Наименование",       "Наименование");
	ДобавитьПКС(СвойстваШапки, "НаименованиеПолное", "НаименованиеПолное");
	ДобавитьПКС(СвойстваШапки, "Ссылка",             "Ссылка");

	ПравилоКонвертации.ПоляПоиска.Добавить("Наименование");
	ПравилоКонвертации.ПоляПоиска.Добавить("Код");
КонецПроцедуры
#КонецОбласти
#Область Справочник_Упаковки
Процедура ДобавитьПКО_Справочник_Упаковки(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Справочник_Упаковки";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Справочники.УпаковкиНоменклатуры;
	ПравилоКонвертации.ОбъектФормата                = "Справочник.Упаковки";
	ПравилоКонвертации.ПриОтправкеДанных            = "ПКО_Справочник_Упаковки_ПриОтправкеДанных";
	ПравилоКонвертации.ВариантИдентификации         = "ПоУникальномуИдентификатору";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "ЕдиницаИзмерения", "ЕдиницаИзмерения", , "Справочник_ЕдиницыИзмерения");
	ДобавитьПКС(СвойстваШапки, "Коэффициент",      "Коэффициент");
	ДобавитьПКС(СвойстваШапки, "Наименование",     "Наименование");
	ДобавитьПКС(СвойстваШапки, "Ссылка",           "Ссылка");
	ДобавитьПКС(СвойстваШапки, "Владелец",         "Номенклатура", 1);

КонецПроцедуры

Процедура ПКО_Справочник_Упаковки_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Владелец = ДанныеИБ.Владелец;
	Если ЗначениеЗаполнено(Владелец) Тогда
		Если ТипЗнч(Владелец) = Тип("СправочникСсылка.Номенклатура") Тогда
			ДанныеXDTO.КлючевыеСвойства.Вставить("Номенклатура", Новый Структура("Значение, ИмяПКО", Владелец, "Справочник_Номенклатура_Отправка"));
		ИначеЕсли ТипЗнч(Владелец) = Тип("СправочникСсылка.НаборыУпаковок") Тогда
			Номенклатура = Справочники.Номенклатура.НайтиПоРеквизиту("НаборУпаковок", Владелец);
			Если Номенклатура.Пустая() Тогда
				Отказ = Истина;
				Возврат;
			Иначе
				ДанныеXDTO.КлючевыеСвойства.Вставить("Номенклатура", Новый Структура("Значение, ИмяПКО", Номенклатура, "Справочник_Номенклатура_Отправка"));
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Справочник_ХарактеристикиНоменклатуры
Процедура ДобавитьПКО_Справочник_ХарактеристикиНоменклатуры(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Справочник_ХарактеристикиНоменклатуры";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Справочники.ХарактеристикиНоменклатуры;
	ПравилоКонвертации.ОбъектФормата                = "Справочник.ХарактеристикиНоменклатуры";
	ПравилоКонвертации.ПриОтправкеДанных            = "ПКО_Справочник_ХарактеристикиНоменклатуры_ПриОтправкеДанных";
	ПравилоКонвертации.ВариантИдентификации         = "ПоУникальномуИдентификатору";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Наименование", "Наименование");
	ДобавитьПКС(СвойстваШапки, "Наименование", "НаименованиеПолное");
	ДобавитьПКС(СвойстваШапки, "Ссылка",       "Ссылка");
	ДобавитьПКС(СвойстваШапки, "",             "ВидНоменклатуры", 1, "Справочник_ВидыНоменклатуры_Отправка");
	ДобавитьПКС(СвойстваШапки, "",             "Номенклатура", 1, "Справочник_Номенклатура_Отправка");

КонецПроцедуры

Процедура ПКО_Справочник_ХарактеристикиНоменклатуры_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если ТипЗнч(ДанныеИБ.Владелец) = Тип("СправочникСсылка.Номенклатура") Тогда
		Номенклатура = ДанныеИБ.Владелец;
		ВидНоменклатуры = Номенклатура.ВидНоменклатуры;
	Иначе
		Номенклатура = Справочники.Номенклатура.ПустаяСсылка();
		ВидНоменклатуры = ДанныеИБ.Владелец;
	КонецЕсли;
	
	
	ДанныеXDTO.КлючевыеСвойства.Вставить("Номенклатура", Новый Структура("Значение, ИмяПКО", Номенклатура, "Справочник_Номенклатура_Отправка"));
	ДанныеXDTO.КлючевыеСвойства.Вставить("ВидНоменклатуры", Новый Структура("Значение, ИмяПКО", ВидНоменклатуры, "Справочник_ВидыНоменклатуры_Отправка"));
КонецПроцедуры
#КонецОбласти
#КонецОбласти

#КонецОбласти
#Область ПКПД
// Заполняет таблицу правил конвертации предопределенных данных.
//
// Параметры:
//  НаправлениеОбмена - строка ("Отправка" либо "Получение").
//  ПравилаКонвертации - таблица значений, в которую будут добавлены правила. 
Процедура ЗаполнитьПравилаКонвертацииПредопределенныхДанных(НаправлениеОбмена, ПравилаКонвертации) Экспорт
	Если НаправлениеОбмена = "Отправка" Тогда
		// ЮрФизЛицо_Организации_Отправка.
		ПравилоКонвертации           = ПравилаКонвертации.Добавить();
		ПравилоКонвертации.ИмяПКПД   = "ЮрФизЛицо_Организации_Отправка";
		ПравилоКонвертации.ТипДанных = Метаданные.Перечисления.ЮрФизЛицо;
		ПравилоКонвертации.ТипXDTO   = "ЮридическоеФизическоеЛицо";
	
		ЗначенияДляОтправки = Новый Соответствие;
		ЗначенияДляОтправки.Вставить(Перечисления.ЮрФизЛицо.ИндивидуальныйПредприниматель, "ФизическоеЛицо");
		ЗначенияДляОтправки.Вставить(Перечисления.ЮрФизЛицо.ФизЛицо, "ФизическоеЛицо");
		ЗначенияДляОтправки.Вставить(Перечисления.ЮрФизЛицо.ЮрЛицо, "ЮридическоеЛицо");
		ЗначенияДляОтправки.Вставить(Перечисления.ЮрФизЛицо.ЮрЛицоНеРезидент, "ЮридическоеЛицо");
		ПравилоКонвертации.КонвертацииЗначенийПриОтправке = ЗначенияДляОтправки;
	КонецЕсли;

	// Перечисление_СтавкиНДС.
	ПравилоКонвертации           = ПравилаКонвертации.Добавить();
	ПравилоКонвертации.ИмяПКПД   = "Перечисление_СтавкиНДС";
	ПравилоКонвертации.ТипДанных = Метаданные.Перечисления.СтавкиНДС;
	ПравилоКонвертации.ТипXDTO   = "СтавкиНДС";

	ЗначенияДляОтправки = Новый Соответствие;
	ЗначенияДляОтправки.Вставить(Перечисления.СтавкиНДС.БезНДС, "БезНДС");
	ЗначенияДляОтправки.Вставить(Перечисления.СтавкиНДС.НДС0, "НДС0");
	ЗначенияДляОтправки.Вставить(Перечисления.СтавкиНДС.НДС10, "НДС10");
	ЗначенияДляОтправки.Вставить(Перечисления.СтавкиНДС.НДС10_110, "НДС10_110");
	ЗначенияДляОтправки.Вставить(Перечисления.СтавкиНДС.НДС20, "НДС20");
	ЗначенияДляОтправки.Вставить(Перечисления.СтавкиНДС.НДС20_120, "НДС20_120");
	ПравилоКонвертации.КонвертацииЗначенийПриОтправке = ЗначенияДляОтправки;
	ЗначенияДляПолучения = Новый Соответствие;
	ЗначенияДляПолучения.Вставить("БезНДС", Перечисления.СтавкиНДС.БезНДС);
	ЗначенияДляПолучения.Вставить("НДС0", Перечисления.СтавкиНДС.НДС0);
	ЗначенияДляПолучения.Вставить("НДС10", Перечисления.СтавкиНДС.НДС10);
	ЗначенияДляПолучения.Вставить("НДС10_110", Перечисления.СтавкиНДС.НДС10_110);
	ЗначенияДляПолучения.Вставить("НДС20", Перечисления.СтавкиНДС.НДС20);
	ЗначенияДляПолучения.Вставить("НДС20_120", Перечисления.СтавкиНДС.НДС20_120);
	ПравилоКонвертации.КонвертацииЗначенийПриПолучении = ЗначенияДляПолучения;

	// ТипыНоменклатуры.
	ПравилоКонвертации           = ПравилаКонвертации.Добавить();
	ПравилоКонвертации.ИмяПКПД   = "ТипыНоменклатуры";
	ПравилоКонвертации.ТипДанных = Метаданные.Перечисления.ТипыНоменклатуры;
	ПравилоКонвертации.ТипXDTO   = "ТипыНоменклатуры";

	ЗначенияДляОтправки = Новый Соответствие;
	ЗначенияДляОтправки.Вставить(Перечисления.ТипыНоменклатуры.ПодарочныйСертификат, "Товар");
	ЗначенияДляОтправки.Вставить(Перечисления.ТипыНоменклатуры.Товар, "Товар");
	ЗначенияДляОтправки.Вставить(Перечисления.ТипыНоменклатуры.Услуга, "Услуга");
	ПравилоКонвертации.КонвертацииЗначенийПриОтправке = ЗначенияДляОтправки;
	ЗначенияДляПолучения = Новый Соответствие;
	ЗначенияДляПолучения.Вставить("Товар", Перечисления.ТипыНоменклатуры.ПодарочныйСертификат);
	ЗначенияДляПолучения.Вставить("Товар", Перечисления.ТипыНоменклатуры.Товар);
	ЗначенияДляПолучения.Вставить("Услуга", Перечисления.ТипыНоменклатуры.Услуга);
	ПравилоКонвертации.КонвертацииЗначенийПриПолучении = ЗначенияДляПолучения;

КонецПроцедуры

#КонецОбласти
#Область Алгоритмы


Функция ДанныеКоллекцииВВидеСтруктуры(Источник, ПравилаЗаполнения)
	Результат = Новый Структура;
	Для Каждого ПравилоЗаполнения Из ПравилаЗаполнения Цикл
		СтруктураДляПереносаЗначения = Новый Структура(ПравилоЗаполнения.Ключ, Неопределено);
		ЗаполнитьЗначенияСвойств(СтруктураДляПереносаЗначения, Источник);
		Значение = СтруктураДляПереносаЗначения[ПравилоЗаполнения.Ключ];
		Если Значение <> Неопределено Тогда
			Результат.Вставить(ПравилоЗаполнения.Значение, Значение);
		КонецЕсли;
	КонецЦикла;
	Возврат Результат;
КонецФункции
Процедура ЗаполнитьДокументТТНВходящаяЕГАИС(ПолученныеДанные, ДанныеИБ)
	Если ДанныеИБ <> Неопределено Тогда
		ТТНВходящаяЕГАИС = ДанныеИБ.Ссылка.ТТНВходящаяЕГАИС;
		Если НЕ ЗначениеЗаполнено(ТТНВходящаяЕГАИС) Тогда
			Возврат;
		КонецЕсли;
		
		ДанныеПроверкиИПодбора = ТТНВходящаяЕГАИС.ДанныеПроверкиИПодбора.Получить();
		Если ДанныеПроверкиИПодбора = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ШтрихкодыУпаковок", ПолученныеДанные.ШтрихкодыУпаковок.Выгрузить());
		Запрос.Текст = "ВЫБРАТЬ
		|	ВЫРАЗИТЬ(ШтрихкодыУпаковок.ШтрихкодУпаковки КАК Справочник.ШтрихкодыУпаковокТоваров) КАК ШтрихкодУпаковки
		|ПОМЕСТИТЬ ВТ_ШтрихкодыУпаковок
		|ИЗ
		|	&ШтрихкодыУпаковок КАК ШтрихкодыУпаковок
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_ШтрихкодыУпаковок.ШтрихкодУпаковки КАК ШтрихкодУпаковки,
		|	ВТ_ШтрихкодыУпаковок.ШтрихкодУпаковки.Номенклатура КАК Номенклатура,
		|	ВТ_ШтрихкодыУпаковок.ШтрихкодУпаковки.Характеристика КАК Характеристика,
		|	ВТ_ШтрихкодыУпаковок.ШтрихкодУпаковки.Серия КАК Серия,
		|	ВТ_ШтрихкодыУпаковок.ШтрихкодУпаковки.ЗначениеШтрихкода КАК Штрихкод,
		|	1 КАК КоличествоПодобрано,
		|	ЛОЖЬ КАК Проверено
		|ИЗ
		|	ВТ_ШтрихкодыУпаковок КАК ВТ_ШтрихкодыУпаковок";
		
		Результат = Запрос.Выполнить();
		Если Результат.Пустой() Тогда
			Возврат;
		КонецЕсли;
		
		ШтрихкодыУпаковок = Результат.Выгрузить();
		
		ТаблицаПодбора = Новый ТаблицаЗначений;
		ТаблицаПодбора.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
		ТаблицаПодбора.Колонки.Добавить("Характеристика", Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
		ТаблицаПодбора.Колонки.Добавить("Серия", Новый ОписаниеТипов("СправочникСсылка.СерииНоменклатуры"));
		ТаблицаПодбора.Колонки.Добавить("ИндексСтроки", Новый ОписаниеТипов("Число",,, Новый КвалификаторыЧисла(5,0)));
		
		ПроверкаЗавершенаУспешно = Истина;
		ТТНВходящаяЕГАИСОбъект = ТТНВходящаяЕГАИС.ПолучитьОбъект();
		ТТНВходящаяЕГАИСОбъект.АкцизныеМарки.Очистить();
		
		Сч = 0;
		Для Каждого СтрокаДерева Из ДанныеПроверкиИПодбора.ДеревоМаркированнойПродукции.Строки Цикл
			Если НЕ ИнтеграцияИСКлиентСервер.ЭтоУпаковка(СтрокаДерева.ТипУпаковки) Тогда
				НайденныеСтроки = ШтрихкодыУпаковок.НайтиСтроки(Новый Структура("Штрихкод", СтрокаДерева.Штрихкод));
				Если НайденныеСтроки.Количество() > 0 Тогда
					СтрокаДерева.СтатусПроверки = Перечисления.СтатусыПроверкиНаличияПродукцииИС.ВНаличии;
					НайденныеСтроки[0].Проверено = Истина;
					СтрокаТЧАкцизныеМарки = ТТНВходящаяЕГАИСОбъект.АкцизныеМарки.Добавить();
					СтрокаТЧАкцизныеМарки.АкцизнаяМарка = НайденныеСтроки[0].ШтрихкодУпаковки;
					СтрокаТЧАкцизныеМарки.Справка2      = СтрокаДерева.Справка2;
					СтрокаТЧАкцизныеМарки.Количество    = 1;
				Иначе
					СтрокаДерева.СтатусПроверки = Перечисления.СтатусыПроверкиНаличияПродукцииИС.Отсутствует;
					ПроверкаЗавершенаУспешно = Ложь;
				КонецЕсли;
				СтрокаПодбор = ТаблицаПодбора.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаПодбор, СтрокаДерева, "Номенклатура, Характеристика, Серия");
				СтрокаПодбор.ИндексСтроки = Сч;
			КонецЕсли;
			Сч = Сч + 1;
		КонецЦикла;
		
		СтрокиКРаспределению = ШтрихкодыУпаковок.НайтиСтроки(Новый Структура("Проверено", Ложь));
		Для Каждого СтрокаКРаспределению из СтрокиКРаспределению Цикл
			СтруктураПоиска = Новый Структура("Номенклатура, Характеристика, Серия");
			ЗаполнитьЗначенияСвойств(СтруктураПоиска, СтрокаКРаспределению);
			ПодобранныеСтроки = ТаблицаПодбора.НайтиСтроки(СтруктураПоиска);
			Если ПодобранныеСтроки.Количество() > 0 Тогда
				СтрокаДерева = ДанныеПроверкиИПодбора.ДеревоМаркированнойПродукции.Строки.Получить(ПодобранныеСтроки[0].ИндексСтроки);
				НоваяСтрока = ДанныеПроверкиИПодбора.ДеревоМаркированнойПродукции.Строки.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаДерева,, "Представление, Штрихкод, СтатусПроверки");
				НоваяСтрока.Представление = СтрокаКРаспределению.Штрихкод;
				НоваяСтрока.Штрихкод = СтрокаКРаспределению.Штрихкод;
				НоваяСтрока.СтатусПроверки = Перечисления.СтатусыПроверкиНаличияПродукцииИС.ВНаличии;
				СтрокаКРаспределению.Проверено = Истина;
			КонецЕсли;
		КонецЦикла;
		Если ПроверкаЗавершенаУспешно Тогда
			Если ШтрихкодыУпаковок.Найти(Ложь, "Проверено") <> Неопределено Тогда
				ПроверкаЗавершенаУспешно = Ложь;
			КонецЕсли;
		КонецЕсли;
		
		ТаблицаНеМаркируемойПродукции = ДанныеПроверкиИПодбора.ТаблицаНеМаркируемойПродукции;
		Если ТаблицаНеМаркируемойПродукции.Количество() > 0 Тогда
			//Заполняем фактическое количество не маркируемой продукции
			ТоварыТТН = ТТНВходящаяЕГАИС.Товары;
			ТоварыФакт = ПолученныеДанные.Товары;
			Для Каждого Строка Из ТаблицаНеМаркируемойПродукции Цикл
				КоличествоФакт = 0;
				Отбор = Новый Структура("АлкогольнаяПродукция, Справка2");
				ЗаполнитьЗначенияСвойств(Отбор, Строка);
				СтрокиТТН = ТоварыТТН.НайтиСтроки(Отбор);
				Если СтрокиТТН.Количество() > 0 Тогда
					ОтборТоварыФакт = Новый Структура("Номенклатура, Характеристика");
					ЗаполнитьЗначенияСвойств(ОтборТоварыФакт, СтрокиТТН[0]);
					СтрокиФакт = ТоварыФакт.НайтиСтроки(ОтборТоварыФакт);
					Для Каждого СтрокаТовары из СтрокиФакт Цикл
						КоличествоФакт = КоличествоФакт + СтрокаТовары.КоличествоУпаковок;
					КонецЦикла;
				КонецЕсли;
				Строка.КоличествоФактическое = КоличествоФакт;
			КонецЦикла;
		КонецЕсли;
		
		ТТНВходящаяЕГАИСОбъект.ДанныеПроверкиИПодбора = Новый ХранилищеЗначения(ДанныеПроверкиИПодбора);
		Если ПроверкаЗавершенаУспешно Тогда
			ТТНВходящаяЕГАИСОбъект.СтатусПроверкиИПодбора = Перечисления.СтатусыПроверкиИПодбораИС.Завершено;
		КонецЕсли;
		
		Документы.ТТНВходящаяЕГАИС.ЗаполнитьФактическоеКоличество(
			ТТНВходящаяЕГАИСОбъект, ДанныеПроверкиИПодбора.ДеревоМаркированнойПродукции, ДанныеПроверкиИПодбора.ТаблицаНеМаркируемойПродукции);
	
		Если ТТНВходящаяЕГАИСОбъект.Проведен Тогда
			Если ТТНВходящаяЕГАИСОбъект.ПроверитьЗаполнение() Тогда
				ТТНВходящаяЕГАИСОбъект.Записать(РежимЗаписиДокумента.Проведение);
			Иначе
				ТТНВходящаяЕГАИСОбъект.Записать(РежимЗаписиДокумента.ОтменаПроведения);
			КонецЕсли;
		Иначе
			ТТНВходящаяЕГАИСОбъект.Записать(РежимЗаписиДокумента.Запись);
		КонецЕсли;
		
		ПараметрыОбновленияСтатуса = ИнтеграцияЕГАИС.ПараметрыОбновленияСтатуса();
		ПараметрыОбновленияСтатуса.ОбновлятьДвижения = Ложь;
		ПараметрыОбновленияСтатуса.СтатусОбработки   = Перечисления.СтатусыОбработкиСообщенийЕГАИС.ПринятИзЕГАИС;
		ПараметрыОбновленияСтатуса.ДокументОбъект    = ТТНВходящаяЕГАИСОбъект;
		
		Документы.ТТНВходящаяЕГАИС.ОбновитьСтатусПослеПолученияДанных(
			ТТНВходящаяЕГАИСОбъект.Ссылка, Перечисления.ВидыДокументовЕГАИС.ТТН, ПараметрыОбновленияСтатуса);
		
		ПолученныеДанные.ШтрихкодыУпаковок.Очистить();
	КонецЕсли;
КонецПроцедуры
Процедура ЗаполнитьДополнительныеРеквизиты(ДанныеИБ, ДанныеXDTO, МассивДопРеквизитов)
	ДопРеквизиты = Новый ТаблицаЗначений;
	ДопРеквизиты.Колонки.Добавить("Свойство");
	ДопРеквизиты.Колонки.Добавить("ЗначениеСвойства");
	
	Для каждого Элемент Из МассивДопРеквизитов Цикл
		СтрокаДопРеквизита = ДопРеквизиты.Добавить();
		Свойство = Новый Структура("Наименование", Элемент);
		СтрокаДопРеквизита.Свойство = Свойство;
		СтрокаДопРеквизита.ЗначениеСвойства = ДанныеИБ[Элемент];
	КонецЦикла;
	
	ДанныеXDTO.Вставить("ДополнительныеРеквизиты", ДопРеквизиты);
КонецПроцедуры
Процедура ЗаполнитьСтатусыПроверкиИПодбораДокументовИСМП(ПроверяемыйДокумент)
	Если ТипЗнч(ПроверяемыйДокумент) = Тип("ДокументСсылка.ПеремещениеТоваров") Тогда
		Если ПроверяемыйДокумент.АкцизныеМарки.Количество() = 0 Тогда
			Возврат;
		КонецЕсли;
	ИначеЕсли ТипЗнч(ПроверяемыйДокумент) = Тип("ДокументСсылка.ВозвратТоваровПоставщику") Тогда
		Если ПроверяемыйДокумент.ШтрихкодыУпаковок.Количество() = 0 Тогда
			Возврат;
		КонецЕсли;
	Иначе
		Возврат;
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ГосИС.ИСМП") Тогда
		ВестиУчетМаркируемойПродукции = ПолучитьФункциональнуюОпцию("ВестиУчетМаркируемойПродукцииИСМП");
		Если ВестиУчетМаркируемойПродукции Тогда
			ВидыПродукцииДокумента = ИнтеграцияИСРТ.ВидыПродукцииВТоварах(ПроверяемыйДокумент.Товары);
			Если ВидыПродукцииДокумента.Количество() = 0 Тогда
				Возврат;
			КонецЕсли;
			
			Запрос = Новый Запрос;
			Запрос.УстановитьПараметр("ДатаСеанса", ТекущаяДатаСеанса());
			Запрос.Текст = "ВЫБРАТЬ
			|	НастройкиУчетаМаркируемойПродукцииИСМП.ВидПродукции КАК ВидПродукции
			|ИЗ
			|	РегистрСведений.НастройкиУчетаМаркируемойПродукцииИСМП КАК НастройкиУчетаМаркируемойПродукцииИСМП
			|ГДЕ
			|	НастройкиУчетаМаркируемойПродукцииИСМП.ВестиУчетПродукции
			|	И НастройкиУчетаМаркируемойПродукцииИСМП.ДатаОбязательнойМаркировки <= &ДатаСеанса";
			Результат = Запрос.Выполнить();
			Если Результат.Пустой() Тогда
				Возврат;
			КонецЕсли;
			ВидыПродукцииИС = Результат.Выгрузить().ВыгрузитьКолонку("ВидПродукции");
			Для Каждого ВидПродукции Из ВидыПродукцииДокумента Цикл
				Если ВидыПродукцииИС.Найти(ВидПродукции) = Неопределено Тогда
					Продолжить;
				КонецЕсли;
				РегистрыСведений.СтатусыПроверкиИПодбораДокументовИС.ОтразитьЗавершениеПроверкиДокумента(
					ПроверяемыйДокумент, ВидПродукции, Неопределено, Неопределено);
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры
Функция МассивМаркировка(ДанныеXDTO)
	МассивСтрокМаркировка = Новый Массив;
	Если ДанныеXDTO.Свойство("Маркировка")
		И ЗначениеЗаполнено(ДанныеXDTO.Маркировка) Тогда
		Для Каждого Строка Из ДанныеXDTO.Маркировка Цикл
			ИдентификаторНоменклатура = Новый УникальныйИдентификатор(Строка.Номенклатура.Ссылка.Значение);
			Номенклатура = Справочники.Номенклатура.ПолучитьСсылку(ИдентификаторНоменклатура);
			Если Строка.Характеристика = Неопределено Тогда
				Характеристика = Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка();
			Иначе
				ИдентификаторХарактеристика = Новый УникальныйИдентификатор(Строка.Характеристика.Ссылка.Значение);
				Характеристика = Справочники.ХарактеристикиНоменклатуры.ПолучитьСсылку(ИдентификаторХарактеристика);
			КонецЕсли;
			
			Если Строка.Серия = Неопределено Тогда
				Серия = Справочники.СерииНоменклатуры.ПустаяСсылка();
			Иначе
				ИдентификаторСерия = Новый УникальныйИдентификатор(Строка.Серия.Ссылка.Значение);
				Серия = Справочники.ХарактеристикиНоменклатуры.ПолучитьСсылку(ИдентификаторСерия);
			КонецЕсли;
			
			ДвоичныеДанные = Base64Значение(Строка.НомерАкцизнойМарки);
			Если ДвоичныеДанные = Неопределено Тогда
				Штрихкод = Строка.НомерАкцизнойМарки;
			Иначе
				Штрихкод = ПолучитьСтрокуИзДвоичныхДанных(ДвоичныеДанные);
			КонецЕсли;
			ЗначениеШтрихкода = ИнтерфейсИСМП.РазобратьИНормализоватьКодМаркировки(Штрихкод);
			
			СтруктураДанныхМарка = Новый Структура();
			СтруктураДанныхМарка.Вставить("Номенклатура", Номенклатура);
			СтруктураДанныхМарка.Вставить("Характеристика", Характеристика);
			СтруктураДанныхМарка.Вставить("Серия", Серия);
			СтруктураДанныхМарка.Вставить("ЗначениеШтрихкода", ЗначениеШтрихкода);
			
			МассивСтрокМаркировка.Добавить(СтруктураДанныхМарка);
		КонецЦикла;
	КонецЕсли;
	
	Возврат МассивСтрокМаркировка;
КонецФункции
Процедура ОбработатьСерииНоменклатуры(Объект)
	Для Каждого Строка из Объект.Серии Цикл
		СерияСтроки = Строка.Серия;
		Если ЗначениеЗаполнено(СерияСтроки.ВладелецСерии)
			И Не ПустаяСтрока(СерияСтроки.Номер) Тогда
			Продолжить;
		КонецЕсли;
		
		Серия = СерияСтроки.ПолучитьОбъект();
		ВидНоменклатуры = Строка.Номенклатура.ВидНоменклатуры;
		Серия.ВидНоменклатуры = ВидНоменклатуры;
		Если ВидНоменклатуры.ИспользованиеСерий
				= Перечисления.ВариантыВеденияДополнительныхДанныхПоНоменклатуре.ОбщиеДляВидаНоменклатуры Тогда
			Серия.ВладелецСерии = ВидНоменклатуры;
		ИначеЕсли ВидНоменклатуры.ИспользованиеСерий
				= Перечисления.ВариантыВеденияДополнительныхДанныхПоНоменклатуре.ИндивидуальныеДляНоменклатуры Тогда
			Серия.ВладелецСерии = Строка.Номенклатура;
		КонецЕсли;
		Если ПустаяСтрока(Серия.Номер) Тогда
			Серия.Номер = "-";
		КонецЕсли;
		Серия.ОбменДанными.Загрузка = Истина;
		Серия.Записать();
	КонецЦикла;
КонецПроцедуры
Функция ОсобенностиУчетаИСМП()
	МассивМаркируемойПродукции = Новый Массив;
	МассивМаркируемойПродукции.Добавить(Перечисления.ОсобенностиУчетаНоменклатуры.ТабачнаяПродукция);
	МассивМаркируемойПродукции.Добавить(Перечисления.ОсобенностиУчетаНоменклатуры.ОбувнаяПродукция);
	МассивМаркируемойПродукции.Добавить(Перечисления.ОсобенностиУчетаНоменклатуры.ЛегкаяПромышленность);
	МассивМаркируемойПродукции.Добавить(Перечисления.ОсобенностиУчетаНоменклатуры.МолочнаяПродукцияПодконтрольнаяВЕТИС);
	МассивМаркируемойПродукции.Добавить(Перечисления.ОсобенностиУчетаНоменклатуры.Шины);
	МассивМаркируемойПродукции.Добавить(Перечисления.ОсобенностиУчетаНоменклатуры.Фотоаппараты);
	МассивМаркируемойПродукции.Добавить(Перечисления.ОсобенностиУчетаНоменклатуры.Духи);
	МассивМаркируемойПродукции.Добавить(Перечисления.ОсобенностиУчетаНоменклатуры.Велосипеды);
	МассивМаркируемойПродукции.Добавить(Перечисления.ОсобенностиУчетаНоменклатуры.КреслаКоляски);
	
	Возврат МассивМаркируемойПродукции;
КонецФункции
Процедура ОтложеннаяОбработка_Документ_ПересчетТоваров(Объект)
	ПустаяУпаковка = Справочники.УпаковкиНоменклатуры.ПустаяСсылка();
	Для Каждого Строка Из Объект.Товары Цикл
		Если ЗначениеЗаполнено(Строка.Упаковка) Тогда
			Строка.КоличествоУпаковокФакт = Строка.КоличествоФакт;
			Строка.Упаковка = ПустаяУпаковка;
		КонецЕсли;
	КонецЦикла;
	
	Если ЗначениеЗаполнено(Объект.ДокументОснование) Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Склад", Объект.Склад);
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ПриказНаПроведениеИнвентаризацииТоваров.Ссылка КАК ДокументОснование
	|ИЗ
	|	Документ.ПриказНаПроведениеИнвентаризацииТоваров КАК ПриказНаПроведениеИнвентаризацииТоваров
	|ГДЕ
	|	ПриказНаПроведениеИнвентаризацииТоваров.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыПриказовНаПроведениеИнвентаризацийТоваров.ВРаботе)
	|	И ПриказНаПроведениеИнвентаризацииТоваров.Склад = &Склад
	|	И НЕ ПриказНаПроведениеИнвентаризацииТоваров.ПометкаУдаления
	|	И ПриказНаПроведениеИнвентаризацииТоваров.Проведен";
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Объект.ДокументОснование = Выборка.ДокументОснование;
	КонецЕсли;
КонецПроцедуры
Процедура ОтложеннаяОбработка_Документ_ПоступлениеТоваров(Объект)
	ОбработатьСерииНоменклатуры(Объект);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
	Запрос.Текст = "ВЫБРАТЬ
	|	ПоступлениеТоваровШтрихкодыУпаковок.ШтрихкодУпаковки.Номенклатура КАК Номенклатура,
	|	ПоступлениеТоваровШтрихкодыУпаковок.ШтрихкодУпаковки.Характеристика КАК Характеристика,
	|	ПоступлениеТоваровШтрихкодыУпаковок.ШтрихкодУпаковки.Серия КАК Серия,
	|	ПоступлениеТоваровШтрихкодыУпаковок.ШтрихкодУпаковки.ЗначениеШтрихкода КАК Штрихкод,
	|	1 КАК КоличествоПодобрано,
	|	ЛОЖЬ КАК Проверено
	|ИЗ
	|	Документ.ПоступлениеТоваров.ШтрихкодыУпаковок КАК ПоступлениеТоваровШтрихкодыУпаковок
	|ГДЕ
	|	ПоступлениеТоваровШтрихкодыУпаковок.Ссылка = &Ссылка";
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	ШтрихкодыУпаковок = Результат.Выгрузить();
	
	ТаблицаПодбора = Новый ТаблицаЗначений;
	ТаблицаПодбора.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	ТаблицаПодбора.Колонки.Добавить("Характеристика", Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
	ТаблицаПодбора.Колонки.Добавить("Серия", Новый ОписаниеТипов("СправочникСсылка.СерииНоменклатуры"));
	ТаблицаПодбора.Колонки.Добавить("ИндексСтроки", Новый ОписаниеТипов("Число",,, Новый КвалификаторыЧисла(5,0)));
	ТаблицаПодбора.Колонки.Добавить("ИндексВложеннойСтроки", Новый ОписаниеТипов("Число",,, Новый КвалификаторыЧисла(5,0)));
	
	НаборЗаписей = РегистрыСведений.СтатусыПроверкиИПодбораДокументовИС.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Документ.Установить(Объект.Ссылка);
	НаборЗаписей.Прочитать();
	ТипМаркированныйТовар = Перечисления.ТипыУпаковок.МаркированныйТовар;
	ТипПачкиБезБлока = Перечисления.ПрочиеЗоныПересчетаПродукцииИСМП.ПачкиБезБлока;
	Для Каждого Запись Из НаборЗаписей Цикл
		ДанныеПроверкиИПодбора = Запись.ДанныеПроверкиИПодбора.Получить();
		Если ДанныеПроверкиИПодбора <> Неопределено Тогда
			ПроверкаЗавершенаУспешно = Истина;
			Сч = 0;
			Для Каждого СтрокаДерева Из ДанныеПроверкиИПодбора.ДеревоМаркированнойПродукции.Строки Цикл
				Если СтрокаДерева.ТипУпаковки = ТипМаркированныйТовар Тогда
					НайденныеСтроки = ШтрихкодыУпаковок.НайтиСтроки(Новый Структура("Штрихкод", СтрокаДерева.Штрихкод));
					Если НайденныеСтроки.Количество() > 0 Тогда
						СтрокаДерева.СтатусПроверки = Перечисления.СтатусыПроверкиНаличияПродукцииИС.ВНаличии;
						НайденныеСтроки[0].Проверено = Истина;
					Иначе
						СтрокаДерева.СтатусПроверки = Перечисления.СтатусыПроверкиНаличияПродукцииИС.Отсутствует;
						ПроверкаЗавершенаУспешно = Ложь;
					КонецЕсли;
					СтрокаПодбор = ТаблицаПодбора.Добавить();
					ЗаполнитьЗначенияСвойств(СтрокаПодбор, СтрокаДерева, "Номенклатура, Характеристика, Серия");
					СтрокаПодбор.ИндексСтроки = Сч;
					СтрокаПодбор.ИндексВложеннойСтроки = -1;
				ИначеЕсли СтрокаДерева.ТипУпаковки = ТипПачкиБезБлока Тогда
					СчВложеннаяСтрока = 0;
					Для Каждого СтрокаПачкаБезБлока из СтрокаДерева.Строки Цикл
						НайденныеСтроки = ШтрихкодыУпаковок.НайтиСтроки(Новый Структура("Штрихкод", СтрокаПачкаБезБлока.Штрихкод));
						Если НайденныеСтроки.Количество() > 0 Тогда
							СтрокаПачкаБезБлока.СтатусПроверки = Перечисления.СтатусыПроверкиНаличияПродукцииИС.ВНаличии;
							НайденныеСтроки[0].Проверено = Истина;
						Иначе
							СтрокаПачкаБезБлока.СтатусПроверки = Перечисления.СтатусыПроверкиНаличияПродукцииИС.Отсутствует;
							ПроверкаЗавершенаУспешно = Ложь;
						КонецЕсли;
						СтрокаПодбор = ТаблицаПодбора.Добавить();
						ЗаполнитьЗначенияСвойств(СтрокаПодбор, СтрокаПачкаБезБлока, "Номенклатура, Характеристика, Серия");
						СтрокаПодбор.ИндексСтроки = Сч;
						СтрокаПодбор.ИндексВложеннойСтроки = СчВложеннаяСтрока;
						СчВложеннаяСтрока = СчВложеннаяСтрока + 1;
					КонецЦикла;
				КонецЕсли;
				Сч = Сч + 1;
			КонецЦикла;
			
			СтрокиКРаспределению = ШтрихкодыУпаковок.НайтиСтроки(Новый Структура("Проверено", Ложь));
			Для Каждого СтрокаКРаспределению из СтрокиКРаспределению Цикл
				СтруктураПоиска = Новый Структура("Номенклатура, Характеристика, Серия");
				ЗаполнитьЗначенияСвойств(СтруктураПоиска, СтрокаКРаспределению);
				ПодобранныеСтроки = ТаблицаПодбора.НайтиСтроки(СтруктураПоиска);
				Если ПодобранныеСтроки.Количество() > 0 Тогда
					ИндексСтроки = ПодобранныеСтроки[0].ИндексСтроки;
					ИндексВложеннойСтроки = ПодобранныеСтроки[0].ИндексВложеннойСтроки;
					СтрокаДерева = ДанныеПроверкиИПодбора.ДеревоМаркированнойПродукции.Строки.Получить(ИндексСтроки);
					Если ИндексВложеннойСтроки = -1 Тогда
						НоваяСтрока = ДанныеПроверкиИПодбора.ДеревоМаркированнойПродукции.Строки.Добавить();
						ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаДерева,, "Представление, Штрихкод, СтатусПроверки");
					Иначе
						СтрокаВложение = СтрокаДерева.Строки.Получить(ИндексВложеннойСтроки);
						НоваяСтрока = СтрокаДерева.Строки.Добавить();
						ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаВложение,, "Представление, Штрихкод, СтатусПроверки");
					КонецЕсли;
					НоваяСтрока.Представление = СтрокаКРаспределению.Штрихкод;
					НоваяСтрока.Штрихкод = СтрокаКРаспределению.Штрихкод;
					НоваяСтрока.СтатусПроверки = Перечисления.СтатусыПроверкиНаличияПродукцииИС.ВНаличии;
					СтрокаКРаспределению.Проверено = Истина;
				КонецЕсли;
			КонецЦикла;
			Если ПроверкаЗавершенаУспешно Тогда
				Если ШтрихкодыУпаковок.Найти(Ложь, "Проверено") <> Неопределено Тогда
					ПроверкаЗавершенаУспешно = Ложь;
				КонецЕсли;
			КонецЕсли;
			
			ШтрихкодыУпаковок.Свернуть("Номенклатура, Характеристика, Серия", "КоличествоПодобрано");
			Для Каждого СтрокаМП Из ДанныеПроверкиИПодбора.ПодобраннаяМаркируемаяПродукция Цикл
				СтруктураПоиска = Новый Структура("Номенклатура, Характеристика, Серия");
				ЗаполнитьЗначенияСвойств(СтруктураПоиска, СтрокаМП);
				НайденныеСтроки = ШтрихкодыУпаковок.НайтиСтроки(СтруктураПоиска);
				Если НайденныеСтроки.Количество() > 0 Тогда
					СтрокаМП.КоличествоПодобрано = НайденныеСтроки[0].КоличествоПодобрано;
					Если СтрокаМП.КоличествоПодобрано >= СтрокаМП.Количество
						И СтрокаМП.КоличествоПодобрано >= СтрокаМП.КоличествоИС Тогда
						СтрокаМП.ИндексКодаМаркировки = 1;
					Иначе
						СтрокаМП.ИндексКодаМаркировки = 2;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		Запись.ДанныеПроверкиИПодбора = Новый ХранилищеЗначения(ДанныеПроверкиИПодбора);
		Если ПроверкаЗавершенаУспешно Тогда
			Запись.СтатусПроверкиИПодбора = Перечисления.СтатусыПроверкиИПодбораИС.Завершено;
			Запись.ТребуемоеДействиеЭДО = Перечисления.ТребуемоеДействиеДокументЭДО.Подтвердить;
		Иначе
			Запись.СтатусПроверкиИПодбора = Перечисления.СтатусыПроверкиИПодбораИС.Выполняется;
		КонецЕсли;
	КонецЦикла;
	
	НаборЗаписей.Записать();
КонецПроцедуры
Процедура ОтложеннаяОбработка_Документ_ЧекККМ(Объект)
	ОбработатьСерииНоменклатуры(Объект);
	
	ЗаказПокупателя = Объект.ЗаказПокупателя;
	ТекущееСостояние = ОбменССайтомРТ.ПоследнееСостояниеДоставкиЗаказаПокупателя(ЗаказПокупателя);
	Если Не (ТекущееСостояние = Перечисления.СостоянияДоставкиЗаказаПокупателя.НеСобран
		Или ТекущееСостояние = Перечисления.СостоянияДоставкиЗаказаПокупателя.ГотовКОтгрузкеЧастично
		Или ТекущееСостояние = Перечисления.СостоянияДоставкиЗаказаПокупателя.ГотовКОтгрузке) Тогда
		Возврат;
	КонецЕсли;
	
	Товары = Объект.Товары.Выгрузить(, "Номенклатура, Характеристика, Количество");
	Товары.Свернуть("Номенклатура, Характеристика", "Количество");
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Товары", Товары);
	Запрос.УстановитьПараметр("ЗаказПокупателя", ЗаказПокупателя);
	Запрос.Текст = "ВЫБРАТЬ
	|	Товары.Номенклатура КАК Номенклатура,
	|	Товары.Характеристика КАК Характеристика,
	|	Товары.Количество КАК Количество
	|ПОМЕСТИТЬ ВТ_ТоварыЧек
	|ИЗ
	|	&Товары КАК Товары
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗаказПокупателяТовары.Номенклатура КАК Номенклатура,
	|	ЗаказПокупателяТовары.Характеристика КАК Характеристика,
	|	СУММА(ЗаказПокупателяТовары.Количество) КАК Количество
	|ПОМЕСТИТЬ ВТ_ТоварыЗаказ
	|ИЗ
	|	Документ.ЗаказПокупателя.Товары КАК ЗаказПокупателяТовары
	|ГДЕ
	|	ЗаказПокупателяТовары.Ссылка = &ЗаказПокупателя
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗаказПокупателяТовары.Номенклатура,
	|	ЗаказПокупателяТовары.Характеристика
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ВТ_ТоварыЗаказ.Номенклатура КАК Номенклатура,
	|	ВТ_ТоварыЗаказ.Характеристика КАК Характеристика
	|ИЗ
	|	ВТ_ТоварыЗаказ КАК ВТ_ТоварыЗаказ
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ТоварыЧек КАК ВТ_ТоварыЧек
	|		ПО ВТ_ТоварыЗаказ.Номенклатура = ВТ_ТоварыЧек.Номенклатура
	|			И ВТ_ТоварыЗаказ.Характеристика = ВТ_ТоварыЧек.Характеристика
	|ГДЕ
	|	ВТ_ТоварыЗаказ.Количество <> ЕСТЬNULL(ВТ_ТоварыЧек.Количество, 0)";
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		НовоеСостояние = Перечисления.СостоянияДоставкиЗаказаПокупателя.ГотовКОтгрузке;
	Иначе
		НовоеСостояние = Перечисления.СостоянияДоставкиЗаказаПокупателя.ГотовКОтгрузкеЧастично;
	КонецЕсли;
	
	ОбменССайтомРТ.ЗаписатьВРегистрСостояниеДоставкиЗаказаПокупателя(ЗаказПокупателя, НовоеСостояние, Объект.Ссылка, Ложь);
КонецПроцедуры
Процедура ОтложеннаяОбработка_СерииИМаркировка(Объект)
	ОбработатьСерииНоменклатуры(Объект);
	ЗаполнитьСтатусыПроверкиИПодбораДокументовИСМП(Объект.Ссылка);
КонецПроцедуры
Функция ПодобратьШтрихкодыУпаковок(Маркировка, ТолькоСуществующие = Ложь)
	Маркировка.Колонки.Добавить("ХэшШтрихкода", Новый ОписаниеТипов("Строка",,,,Новый КвалификаторыСтроки(50)));
	
	Для Каждого Строка Из Маркировка Цикл
		Строка.ХэшШтрихкода = ИнтеграцияИС.ХешированиеДанныхSHA256(Строка.ЗначениеШтрихкода);
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаШтрихкодов.ЗначениеШтрихкода КАК Штрихкод,
	|	ТаблицаШтрихкодов.ХэшШтрихкода КАК ХэшШтрихкода
	|ПОМЕСТИТЬ ТаблицаШтрихкодов
	|ИЗ
	|	&ТаблицаШтрихкодов КАК ТаблицаШтрихкодов
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Штрихкод
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ШтрихкодыУпаковокТоваров.Ссылка КАК Ссылка,
	|	ШтрихкодыУпаковокТоваров.ЗначениеШтрихкода КАК Штрихкод,
	|	ШтрихкодыУпаковокТоваров.ХешСумма КАК ХешСумма,
	|	ШтрихкодыУпаковокТоваров.ДатаУпаковки КАК ДатаУпаковки,
	|	ШтрихкодыУпаковокТоваров.ТипШтрихкода КАК ТипШтрихкода,
	|	ШтрихкодыУпаковокТоваров.ХешСуммаЗначенияШтрихкода КАК ХэшШтрихкода,
	|	ВЫБОР
	|		КОГДА ШтрихкодыУпаковокТоваров.ХешСуммаЗначенияШтрихкода = """"
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК СвязьПоХэшу,
	|	ШтрихкодыУпаковокТоваров.Номенклатура КАК Номенклатура,
	|	ШтрихкодыУпаковокТоваров.Характеристика КАК Характеристика,
	|	ШтрихкодыУпаковокТоваров.Серия КАК Серия
	|ПОМЕСТИТЬ ДанныеШтрихкодовУпаковокСОтборомПоШтрихкодам
	|ИЗ
	|	Справочник.ШтрихкодыУпаковокТоваров КАК ШтрихкодыУпаковокТоваров
	|ГДЕ
	|	ШтрихкодыУпаковокТоваров.ЗначениеШтрихкода В
	|			(ВЫБРАТЬ
	|				ТаблицаШтрихкодов.Штрихкод
	|			ИЗ
	|				ТаблицаШтрихкодов КАК ТаблицаШтрихкодов)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеШтрихкодовУпаковокСОтборомПоШтрихкодам.Ссылка КАК Ссылка,
	|	ДанныеШтрихкодовУпаковокСОтборомПоШтрихкодам.Штрихкод КАК Штрихкод,
	|	ДанныеШтрихкодовУпаковокСОтборомПоШтрихкодам.ХешСумма КАК ХешСумма,
	|	ДанныеШтрихкодовУпаковокСОтборомПоШтрихкодам.ДатаУпаковки КАК ДатаУпаковки,
	|	ДанныеШтрихкодовУпаковокСОтборомПоШтрихкодам.ТипШтрихкода КАК ТипШтрихкода,
	|	ДанныеШтрихкодовУпаковокСОтборомПоШтрихкодам.ХэшШтрихкода КАК ХэшШтрихкода,
	|	ДанныеШтрихкодовУпаковокСОтборомПоШтрихкодам.СвязьПоХэшу КАК СвязьПоХэшу,
	|	ДанныеШтрихкодовУпаковокСОтборомПоШтрихкодам.Номенклатура КАК Номенклатура,
	|	ДанныеШтрихкодовУпаковокСОтборомПоШтрихкодам.Характеристика КАК Характеристика,
	|	ДанныеШтрихкодовУпаковокСОтборомПоШтрихкодам.Серия КАК Серия
	|ПОМЕСТИТЬ ДанныеШтрихкодовУпаковок
	|ИЗ
	|	ДанныеШтрихкодовУпаковокСОтборомПоШтрихкодам КАК ДанныеШтрихкодовУпаковокСОтборомПоШтрихкодам
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаШтрихкодов КАК ТаблицаШтрихкодов
	|		ПО ДанныеШтрихкодовУпаковокСОтборомПоШтрихкодам.Штрихкод = ТаблицаШтрихкодов.Штрихкод
	|			И (ВЫБОР
	|				КОГДА ДанныеШтрихкодовУпаковокСОтборомПоШтрихкодам.СвязьПоХэшу
	|					ТОГДА ДанныеШтрихкодовУпаковокСОтборомПоШтрихкодам.ХэшШтрихкода = ТаблицаШтрихкодов.ХэшШтрихкода
	|				ИНАЧЕ ИСТИНА
	|			КОНЕЦ)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеШтрихкодовУпаковок.Штрихкод КАК Штрихкод,
	|	ДанныеШтрихкодовУпаковок.ХэшШтрихкода КАК ХэшШтрихкода,
	|	МАКСИМУМ(ДанныеШтрихкодовУпаковок.ДатаУпаковки) КАК ДатаУпаковки
	|ПОМЕСТИТЬ МаксимальныеДаты
	|ИЗ
	|	ДанныеШтрихкодовУпаковок КАК ДанныеШтрихкодовУпаковок
	|
	|СГРУППИРОВАТЬ ПО
	|	ДанныеШтрихкодовУпаковок.Штрихкод,
	|	ДанныеШтрихкодовУпаковок.ХэшШтрихкода
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеШтрихкодовУпаковок.Ссылка КАК ШтрихкодУпаковки,
	|	ДанныеШтрихкодовУпаковок.Штрихкод КАК ЗначениеШтрихкода
	|ИЗ
	|	ДанныеШтрихкодовУпаковок КАК ДанныеШтрихкодовУпаковок
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ МаксимальныеДаты КАК МаксимальныеДаты
	|		ПО ДанныеШтрихкодовУпаковок.Штрихкод = МаксимальныеДаты.Штрихкод
	|			И ДанныеШтрихкодовУпаковок.ДатаУпаковки = МаксимальныеДаты.ДатаУпаковки
	|			И ДанныеШтрихкодовУпаковок.ХэшШтрихкода = МаксимальныеДаты.ХэшШтрихкода
	|ГДЕ
	|	&ТолькоСуществующие
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДанныеШтрихкодовУпаковок.Ссылка,
	|	ЕСТЬNULL(ДанныеШтрихкодовУпаковок.Штрихкод, ТаблицаШтрихкодов.Штрихкод)
	|ИЗ
	|	ТаблицаШтрихкодов КАК ТаблицаШтрихкодов
	|		ЛЕВОЕ СОЕДИНЕНИЕ ДанныеШтрихкодовУпаковок КАК ДанныеШтрихкодовУпаковок
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ МаксимальныеДаты КАК МаксимальныеДаты
	|			ПО ДанныеШтрихкодовУпаковок.Штрихкод = МаксимальныеДаты.Штрихкод
	|				И ДанныеШтрихкодовУпаковок.ДатаУпаковки = МаксимальныеДаты.ДатаУпаковки
	|				И ДанныеШтрихкодовУпаковок.ХэшШтрихкода = МаксимальныеДаты.ХэшШтрихкода
	|		ПО ТаблицаШтрихкодов.Штрихкод = ДанныеШтрихкодовУпаковок.Штрихкод
	|			И ТаблицаШтрихкодов.ХэшШтрихкода = ДанныеШтрихкодовУпаковок.ХэшШтрихкода
	|ГДЕ
	|	НЕ &ТолькоСуществующие";
	
	Запрос.УстановитьПараметр("ТаблицаШтрихкодов", Маркировка);
	Запрос.УстановитьПараметр("ТолькоСуществующие", ТолькоСуществующие);
	
	Результат = Запрос.Выполнить();
	
	Возврат Результат.Выгрузить();
КонецФункции
Функция ТаблицаМаркировка(ДанныеXDTO)
	ТаблицаМаркировка = Новый ТаблицаЗначений;
	ТаблицаМаркировка.Колонки.Добавить("ЗначениеШтрихкода",
		Новый ОписаниеТипов("Строка",,,,Новый КвалификаторыСтроки(200)));
	
	Если ДанныеXDTO.Свойство("Маркировка")
		И ЗначениеЗаполнено(ДанныеXDTO.Маркировка) Тогда
		Для Каждого Строка Из ДанныеXDTO.Маркировка Цикл
			ДвоичныеДанные = Base64Значение(Строка.НомерАкцизнойМарки);
			Если ДвоичныеДанные = Неопределено Тогда
				Штрихкод = Строка.НомерАкцизнойМарки;
			Иначе
				Штрихкод = ПолучитьСтрокуИзДвоичныхДанных(ДвоичныеДанные);
			КонецЕсли;
			ЗначениеШтрихкода = ИнтерфейсИСМП.РазобратьИНормализоватьКодМаркировки(Штрихкод);
			НоваяСтрока = ТаблицаМаркировка.Добавить();
			НоваяСтрока.ЗначениеШтрихкода = ЗначениеШтрихкода;
		КонецЦикла;
	КонецЕсли;
	
	Возврат ТаблицаМаркировка;
КонецФункции

#КонецОбласти
#Область Параметры
// Заполняет параметры конвертации.
//
// Параметры:
//  ПараметрыКонвертации - структура, в которую добавляются параметры конвертации.
Процедура ЗаполнитьПараметрыКонвертации(ПараметрыКонвертации) Экспорт
	ПараметрыКонвертации.Вставить("ВариантНастройки");
КонецПроцедуры

#КонецОбласти
#Область ОбщегоНазначения
// Процедура-обертка, выполняет запуск указанной в параметрах процедуры модуля менеджера обмена через формат.
//
// Параметры:
//  ИмяПроцедуры - строка.
//  СтруктураПараметров - структура, содержащая передаваемые параметры.
Процедура ВыполнитьПроцедуруМодуляМенеджера(ИмяПроцедуры, Параметры) Экспорт
	Если ИмяПроцедуры = "ПОД_Документ_ВозвратТоваровПоставщику_Отправка_ПриОбработке" Тогда 
		ПОД_Документ_ВозвратТоваровПоставщику_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Документ_ЗаказНаПеремещение_Отправка_ПриОбработке" Тогда 
		ПОД_Документ_ЗаказНаПеремещение_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Документ_ЗаказПокупателя_Отправка_ПриОбработке" Тогда 
		ПОД_Документ_ЗаказПокупателя_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Документ_ЗаказПоставщику_Отправка_ПриОбработке" Тогда 
		ПОД_Документ_ЗаказПоставщику_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Документ_ПересчетТоваров_Отправка_ПриОбработке" Тогда 
		ПОД_Документ_ПересчетТоваров_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Документ_ПоступлениеТоваров_Отправка_ПриОбработке" Тогда 
		ПОД_Документ_ПоступлениеТоваров_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Справочник_Номенклатура_Отправка_ПриОбработке" Тогда 
		ПОД_Справочник_Номенклатура_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Справочник_Упаковки_Отправка_ПриОбработке" Тогда 
		ПОД_Справочник_Упаковки_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Справочник_ХарактеристикиНоменклатуры_Отправка_ПриОбработке" Тогда 
		ПОД_Справочник_ХарактеристикиНоменклатуры_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Справочник_ШтрихкодыНоменклатуры_Отправка_ПриОбработке" Тогда 
		ПОД_Справочник_ШтрихкодыНоменклатуры_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Документ_РаспоряжениеНаОтгрузку_Получение_ПриОбработке" Тогда 
		ПОД_Документ_РаспоряжениеНаОтгрузку_Получение_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Документ_РаспоряжениеНаПриемку_Получение_ПриОбработке" Тогда 
		ПОД_Документ_РаспоряжениеНаПриемку_Получение_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ВозвратТоваровПоставщику_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ВозвратТоваровПоставщику_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ЗаказПокупателя_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ЗаказПокупателя_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ЗаказПоставщику_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ЗаказПоставщику_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ОтгрузкаПоЗаказуНаПеремещение_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ОтгрузкаПоЗаказуНаПеремещение_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПересчетТоваров_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ПересчетТоваров_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПоступлениеТоваров_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ПоступлениеТоваров_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПриемкаПоЗаказуНаПеремещение_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ПриемкаПоЗаказуНаПеремещение_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_Номенклатура_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Справочник_Номенклатура_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_Склады_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Справочник_Склады_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_Штрихкоды_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Справочник_Штрихкоды_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ВозвратТоваровПоставщику_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_ВозвратТоваровПоставщику_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ВозвратТоваровПоставщику_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_ВозвратТоваровПоставщику_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ОтгрузкаПоЗаказуНаПеремещение_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_ОтгрузкаПоЗаказуНаПеремещение_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ОтгрузкаПоЗаказуНаПеремещение_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_ОтгрузкаПоЗаказуНаПеремещение_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПересчетТоваров_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_ПересчетТоваров_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПересчетТоваров_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_ПересчетТоваров_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПоступлениеПоЗаказу_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_ПоступлениеПоЗаказу_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПоступлениеПоЗаказу_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_ПоступлениеПоЗаказу_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПоступлениеТоваров_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_ПоступлениеТоваров_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПоступлениеТоваров_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_ПоступлениеТоваров_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПриемкаПоЗаказуНаПеремещение_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_ПриемкаПоЗаказуНаПеремещение_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПриемкаПоЗаказуНаПеремещение_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_ПриемкаПоЗаказуНаПеремещение_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ЧекККМ_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_ЧекККМ_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ЧекККМ_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_ЧекККМ_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_Упаковки_ПриОтправкеДанных" Тогда 
		ПКО_Справочник_Упаковки_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_ХарактеристикиНоменклатуры_ПриОтправкеДанных" Тогда 
		ПКО_Справочник_ХарактеристикиНоменклатуры_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ОтложеннаяОбработка_Документ_ПересчетТоваров" Тогда 
		ОтложеннаяОбработка_Документ_ПересчетТоваров(
			Параметры.Объект);
	ИначеЕсли ИмяПроцедуры = "ОтложеннаяОбработка_Документ_ПоступлениеТоваров" Тогда 
		ОтложеннаяОбработка_Документ_ПоступлениеТоваров(
			Параметры.Объект);
	ИначеЕсли ИмяПроцедуры = "ОтложеннаяОбработка_Документ_ЧекККМ" Тогда 
		ОтложеннаяОбработка_Документ_ЧекККМ(
			Параметры.Объект);
	ИначеЕсли ИмяПроцедуры = "ОтложеннаяОбработка_СерииИМаркировка" Тогда 
		ОтложеннаяОбработка_СерииИМаркировка(
			Параметры.Объект);
	КонецЕсли;
КонецПроцедуры

#КонецОбласти
