#Область СлужебныйПрограммныйИнтерфейс

#Область ОбъектыБиблиотеки

// Открывает форму сопоставления классификатора ЕГАИС с номенклатурой.
//
// Параметры:
//  Форма - УправляемаяФорма - форма, в которой вызывается команда открытия обработки сопоставления,
//  ОповещениеПриЗавершении - ОписаниеОповещения - процедура, вызываемая после закрытия формы сопоставления,
//  ПараметрыОткрытияФормы - Структура - параметры, передаваемые в форму сопоставления.
//  СтандартнаяОбработка - Булево - признак открытия библиотечной формы
Процедура ОткрытьФормуСопоставленияКлассификаторовЕГАИС(
	Форма,
	ОповещениеПриЗавершении = Неопределено,
	ПараметрыОткрытияФормы  = Неопределено,
	СтандартнаяОбработка    = Истина) Экспорт
	
	Если ПараметрыОткрытияФормы = Неопределено Тогда
		ПараметрыОткрытияФормы = Новый Структура;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
	ОткрытьФормуСопоставленияНоменклатурыСАлкогольнойПродукцией(Форма, ОповещениеПриЗавершении, ПараметрыОткрытияФормы);
	
КонецПроцедуры

// Открывает форму выбора алкогольной продукции.
//
// Параметры:
//  ВладелецФормы        - ЭлементФормы - поле в котором осуществляется выбор алкогольной продукции,
//  Реквизиты            - Структура    - параметры открытия формы и фильтры отбора,
//  СтандартнаяОбработка - Булево       - признак открытия библиотечной формы
Процедура ОткрытьФормуВыбораАлкогольнойПродукции(ВладелецФормы, Реквизиты, СтандартнаяОбработка) Экспорт
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыФормы = Новый Структура;
	Если ЗначениеЗаполнено(Реквизиты) Тогда
		Для Каждого КлючИЗначение Из Реквизиты Цикл
			Если КлючИЗначение.Значение = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			ПараметрыФормы.Вставить(КлючИЗначение.Ключ, КлючИЗначение.Значение);
		КонецЦикла;
	КонецЕсли;
	
	ПараметрыОтбора = Новый Структура;
	// Дополнительные параметры отбора
	Если ЗначениеЗаполнено(Реквизиты) Тогда
		
		Если Реквизиты.Свойство("ВидАлкогольнойПродукции")
			И ЗначениеЗаполнено(Реквизиты.ВидАлкогольнойПродукции) Тогда
			ПараметрыОтбора.Вставить("ВидПродукции", Реквизиты.ВидАлкогольнойПродукции);
		КонецЕсли;
		
	КонецЕсли;
	
	ПараметрыФормы.Вставить("Отбор",                ПараметрыОтбора);
	ПараметрыФормы.Вставить("ВыборГруппИЭлементов", ИспользованиеГруппИЭлементов.Элементы);
	
	ОткрытьФорму("Справочник.КлассификаторАлкогольнойПродукцииЕГАИС.ФормаВыбора", ПараметрыФормы, ВладелецФормы);
	
КонецПроцедуры

// Открывает форму сопоставления номенклатуры с классификатором ЕГАИС.
//
// Параметры:
//  Форма - УправляемаяФорма - форма, в которой вызывается команда открытия обработки сопоставления,
//  ОповещениеПриЗавершении - ОписаниеОповещения - процедура, вызываемая после закрытия формы сопоставления,
//  ПараметрыОткрытияФормы - Структура - параметры, передаваемые в форму сопоставления.
//
Процедура ОткрытьФормуСопоставленияНоменклатурыСАлкогольнойПродукцией(Форма, ОповещениеПриЗавершении = Неопределено, ПараметрыОткрытияФормы = Неопределено) Экспорт
		
	Режим = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
	
	Если Форма.ИмяФормы = "Документ.ТТНВходящаяЕГАИС.Форма.ФормаДокумента" Тогда
	
		ТТН = Форма.Объект.Ссылка;
		
		Если ТТН = Неопределено Тогда 
			Возврат;
		КонецЕсли;
		
		ПараметрыОткрытияФормы.Вставить("ТТН", ТТН);
		
		ОткрытьФорму("Обработка.СопоставлениеНоменклатурыЕГАИСРТ.Форма", ПараметрыОткрытияФормы, Форма,,,, ОповещениеПриЗавершении, Режим);
		
	ИначеЕсли Форма.ИмяФормы = "Документ.ТТНВходящаяЕГАИС.Форма.ФормаСпискаДокументов" Тогда
		
		ТТН = Неопределено;
		
		Если ТипЗнч(ПараметрыОткрытияФормы) = Тип("Структура") И ПараметрыОткрытияФормы.Свойство("ТоварноТранспортныеНакладные") Тогда
			Если ПараметрыОткрытияФормы.ТоварноТранспортныеНакладные.Количество() > 0 Тогда
				ТТН = ПараметрыОткрытияФормы.ТоварноТранспортныеНакладные[0];
			КонецЕсли;
		КонецЕсли;
		
		Если ТТН = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		ПараметрыОткрытияФормы.Вставить("ТТН", ТТН);
		
		ОткрытьФорму("Обработка.СопоставлениеНоменклатурыЕГАИСРТ.Форма", ПараметрыОткрытияФормы, Форма,,,, ОповещениеПриЗавершении, Режим);
		
	ИначеЕсли Форма.ИмяФормы = "Обработка.ПомощникКорректировкиОстатковЕГАИС.Форма.Форма" Тогда 
		
		ОткрытьФорму("Обработка.СопоставлениеНоменклатурыЕГАИСРТ.Форма", ПараметрыОткрытияФормы, Форма,,,, ОповещениеПриЗавершении, Режим);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ПрикладныеДокументы

// Открывает форму выбора документа перемещения товаров.
//
// Параметры:
//  Форма - УправляемаяФорма - форма, в которой вызывается команда выбора документа,
//  ОповещениеПриЗавершении - ОписаниеОповещения - процедура, вызываемая после закрытия формы выбора,
//  Отбор - Структура, ДокументСсылка.ТТНВходящаяЕГАИС - значения реквизитов, по которым нужно отобрать выбираемый документ
//                                                       или ссылка на ТТН ЕГАИС (входящая), по которой будет сформирован отбор.
Процедура ОткрытьФормуВыбораДокументаПеремещениеТоваров(Форма, ОповещениеПриЗавершении, Знач Отбор) Экспорт
	
	НовыйОтбор = Новый Структура;
	НовыйОтбор.Вставить("ПометкаУдаления", Ложь);
	НовыйОтбор.Вставить("ЕстьАлкогольнаяПродукция", Истина);
	
	Если ТипЗнч(Отбор) = Тип("ДокументСсылка.ТТНВходящаяЕГАИС") Тогда
		
		СтруктураОтбора = ИнтеграцияЕГАИСВызовСервера.СтруктураОтбораДляВыбораДокументаПоступления(Отбор);
		
		Если ЗначениеЗаполнено(СтруктураОтбора.Организация) Тогда
			НовыйОтбор.Вставить("ОрганизацияПолучатель", СтруктураОтбора.Организация);
		КонецЕсли;
		Если ЗначениеЗаполнено(СтруктураОтбора.ТорговыйОбъект) Тогда
			НовыйОтбор.Вставить("МагазинПолучатель", СтруктураОтбора.ТорговыйОбъект);
		КонецЕсли;
		
	Иначе
		
		Если Отбор.Свойство("Организация") Тогда
			НовыйОтбор.Вставить("Организация", Отбор.Организация);
		КонецЕсли;
		Если Отбор.Свойство("ТорговыйОбъект") Тогда
			НовыйОтбор.Вставить("МагазинПолучатель", Отбор.ТорговыйОбъект);
		КонецЕсли;
		
	КонецЕсли;
	
	ОткрытьФорму(
		"Документ.ПеремещениеТоваров.ФормаВыбора",
		Новый Структура("Отбор", НовыйОтбор),
		Форма,,,,
		ОповещениеПриЗавершении);
	
КонецПроцедуры

// Открывает форму выбора документа поступления товаров и услуг.
//
// Параметры:
//  Форма - УправляемаяФорма - форма, в которой вызывается команда выбора документа,
//  ОповещениеПриЗавершении - ОписаниеОповещения - процедура, вызываемая после закрытия формы выбора,
//  Отбор - Структура, ДокументСсылка.ТТНВходящаяЕГАИС - значения реквизитов, по которым нужно отобрать выбираемый документ
//                                                       или ссылка на ТТН ЕГАИС (входящая), по которой будет сформирован отбор.
Процедура ОткрытьФормуВыбораДокументаПоступлениеТоваровУслуг(Форма, ОповещениеПриЗавершении, Знач Отбор) Экспорт
	
	НовыйОтбор = Новый Структура;
	НовыйОтбор.Вставить("ПометкаУдаления", Ложь);
	НовыйОтбор.Вставить("ЕстьАлкогольнаяПродукция", Истина);
	
	Если ТипЗнч(Отбор) = Тип("ДокументСсылка.ТТНВходящаяЕГАИС") Тогда
		
		СтруктураОтбора = ИнтеграцияЕГАИСВызовСервера.СтруктураОтбораДляВыбораДокументаПоступления(Отбор);
		
		Если ЗначениеЗаполнено(СтруктураОтбора.Организация) Тогда
			НовыйОтбор.Вставить("Организация", СтруктураОтбора.Организация);
		КонецЕсли;
		Если ЗначениеЗаполнено(СтруктураОтбора.ТорговыйОбъект) Тогда
			НовыйОтбор.Вставить("Магазин", СтруктураОтбора.ТорговыйОбъект);
		КонецЕсли;
		Если ЗначениеЗаполнено(СтруктураОтбора.Контрагент) Тогда
			НовыйОтбор.Вставить("Контрагент", СтруктураОтбора.Контрагент);
		КонецЕсли;
		
	Иначе
		
		Если Отбор.Свойство("Организация") Тогда
			НовыйОтбор.Вставить("Организация", Отбор.Организация);
		КонецЕсли;
		Если Отбор.Свойство("ТорговыйОбъект") Тогда
			НовыйОтбор.Вставить("Магазин", Отбор.ТорговыйОбъект);
		КонецЕсли;
		Если Отбор.Свойство("Контрагент") Тогда
			НовыйОтбор.Вставить("Контрагент", Отбор.Контрагент);
		КонецЕсли;
		
	КонецЕсли;
	
	ОткрытьФорму(
		"Документ.ПоступлениеТоваров.ФормаВыбора",
		Новый Структура("Отбор", НовыйОтбор),
		Форма,,,,
		ОповещениеПриЗавершении);
	
КонецПроцедуры

// Открывает форму создания нового документа поступления товаров и услуг на основании ТТН ЕГАИС.
//
// Параметры:
//  ТТНВходящаяЕГАИС - ДокументСсылка.ТТНВходящаяЕГАИС - ссылка на ТТН.
Процедура ОткрытьФормуСозданияДокументаПоступленияТоваровНаОснованииТТНЕГАИС(ТТНВходящаяЕГАИС) Экспорт
	
	ОткрытьФорму("Документ.ПоступлениеТоваров.ФормаОбъекта", Новый Структура("Основание", ТТНВходящаяЕГАИС));
	
КонецПроцедуры

#КонецОбласти

#Область Номенклатура

// Открывает форму подбора номенклатуры.
//
// Параметры:
//  Форма - УправляемаяФорма - форма, в которой вызывается команда открытия обработки сопоставления,
//  ОповещениеПриЗавершении - ОписаниеОповещения - процедура, вызываемая после закрытия формы подбора.
Процедура ОткрытьФормуПодбораНоменклатуры(Форма, ОповещениеПриЗавершении = Неопределено) Экспорт
	
	Отказ = Ложь;
	
	Если Форма.ИмяФормы = "Документ.ТТНИсходящаяЕГАИС.Форма.ФормаДокумента" Тогда
		РеквизитОрганизацияЕГАИС = "Грузоотправитель";
	Иначе
		РеквизитОрганизацияЕГАИС = "ОрганизацияЕГАИС";
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Форма.Объект[РеквизитОрганизацияЕГАИС]) Тогда
		ОчиститьСообщения();
		
		ОбщегоНазначенияКлиент.СообщитьПользователю(
			НСтр("ru = 'Поле ""Организация ЕГАИС"" не заполнено'"),
			Форма.Объект,
			"Объект." + РеквизитОрганизацияЕГАИС,
			,
			Отказ);
	КонецЕсли;
	
	Магазин = ОбщегоНазначенияРТВызовСервера.ЗначениеРеквизитаОбъекта(Форма.Объект[РеквизитОрганизацияЕГАИС], "ТорговыйОбъект");
	
	Если НЕ ЗначениеЗаполнено(Магазин) Тогда
		ОчиститьСообщения();
		
		ОбщегоНазначенияКлиент.СообщитьПользователю(
			НСтр("ru = 'Выбранная организация ЕГАИС не сопоставлена с магазином'"),
			Форма.Объект,
			"Объект." + РеквизитОрганизацияЕГАИС,
			,
			Отказ);
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрЗаголовок = НСтр("ru = 'Подбор товаров в %Документ%'");
	Если ЗначениеЗаполнено(Форма.Объект.Ссылка) Тогда
		ПараметрЗаголовок = СтрЗаменить(ПараметрЗаголовок, "%Документ%", Форма.Объект.Ссылка);
	Иначе
		Если ТипЗнч(Форма.Объект.Ссылка) = Тип("ДокументСсылка.АктПостановкиНаБалансЕГАИС") Тогда
			ПараметрЗаголовок = СтрЗаменить(ПараметрЗаголовок, "%Документ%", НСтр("ru='Акт постановки на баланс ЕГАИС'"));
		ИначеЕсли ТипЗнч(Форма.Объект.Ссылка) = Тип("ДокументСсылка.АктСписанияЕГАИС") Тогда
			ПараметрЗаголовок = СтрЗаменить(ПараметрЗаголовок, "%Документ%", НСтр("ru='Акт списания ЕГАИС'"));
		ИначеЕсли ТипЗнч(Форма.Объект.Ссылка) = Тип("ДокументСсылка.ВозвратИзРегистра2ЕГАИС") Тогда
			ПараметрЗаголовок = СтрЗаменить(ПараметрЗаголовок, "%Документ%", НСтр("ru='Возврат из регистра №2 ЕГАИС'"));
		ИначеЕсли ТипЗнч(Форма.Объект.Ссылка) = Тип("ДокументСсылка.ЗапросАкцизныхМарокЕГАИС") Тогда
			ПараметрЗаголовок = СтрЗаменить(ПараметрЗаголовок, "%Документ%", НСтр("ru='Запрос акцизных марок ЕГАИС'"));
		ИначеЕсли ТипЗнч(Форма.Объект.Ссылка) = Тип("ДокументСсылка.ПередачаВРегистр2ЕГАИС") Тогда
			ПараметрЗаголовок = СтрЗаменить(ПараметрЗаголовок, "%Документ%", НСтр("ru='Передача в регистр №2 ЕГАИС'"));
		ИначеЕсли ТипЗнч(Форма.Объект.Ссылка) = Тип("ДокументСсылка.ТТНИсходящаяЕГАИС") Тогда
			ПараметрЗаголовок = СтрЗаменить(ПараметрЗаголовок, "%Документ%", НСтр("ru='Товарно-транспортная накладная ЕГАИС (исходящая)'"));
		ИначеЕсли ТипЗнч(Форма.Объект.Ссылка) = Тип("ДокументСсылка.ЧекЕГАИС") Тогда
			ПараметрЗаголовок = СтрЗаменить(ПараметрЗаголовок, "%Документ%", НСтр("ru='Чек ЕГАИС'"));
		ИначеЕсли ТипЗнч(Форма.Объект.Ссылка) = Тип("ДокументСсылка.ЧекЕГАИСВозврат") Тогда
			ПараметрЗаголовок = СтрЗаменить(ПараметрЗаголовок, "%Документ%", НСтр("ru='Чек ЕГАИС на возврат'"));
		КонецЕсли;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Магазин"                                  ,Магазин);
	ПараметрыФормы.Вставить("РежимПодбораБезУслуг"                     , Истина);
	ПараметрыФормы.Вставить("ИспользоватьОтборПоТипамНоменклатуры"     , Истина);
	ПараметрыФормы.Вставить("Заголовок"                                , ПараметрЗаголовок);
	ПараметрыФормы.Вставить("Дата"                                     , Форма.Объект.Дата);
	ПараметрыФормы.Вставить("РежимПодбораБезСуммовыхПараметров"        , Истина);
	ПараметрыФормы.Вставить("ЗаголовокКнопкиЗапрашиватьКоличествоИЦену", НСтр("ru = 'Запрашивать количество'"));
	
	ОткрытьФорму("Обработка.ПодборТоваров.Форма", ПараметрыФормы, Форма, Форма.УникальныйИдентификатор,,, ОповещениеПриЗавершении);
	
КонецПроцедуры

// Открывает форму создания номенклатуры.
// 
// Параметры:
//  ФормаВладелец - УправляемаяФорма - форма владелец.
//  Реквизиты     - Структура - параметры формы создания номенклатуры.
Процедура ОткрытьФормуСозданияНоменклатуры(ФормаВладелец, Знач Реквизиты) Экспорт
	
	Если Реквизиты = Неопределено Тогда
		Реквизиты = Новый Структура;
	КонецЕсли;
	
	Если Реквизиты.Свойство("ВидАлкогольнойПродукцииЕГАИС") Тогда
		ВидыАлкогольнойПродукции = ИнтеграцияЕГАИСРТКлиентПовтИсп.ВидыАлкогольнойПродукции(Реквизиты.ВидАлкогольнойПродукцииЕГАИС);
	Иначе
		ВидыАлкогольнойПродукции = Новый СписокЗначений;
	КонецЕсли;
	
	ДопПараметры = Новый Структура("ФормаВладелец, Реквизиты", ФормаВладелец, Реквизиты);
	Если ВидыАлкогольнойПродукции.Количество() > 1 Тогда
		Оповещение = Новый ОписаниеОповещения("ОткрытьФормуНоменклатуры", СобытияФормЕГАИСРТКлиент, ДопПараметры);
		ВидыАлкогольнойПродукции.ПоказатьВыборЭлемента(Оповещение,"Выберите вид номенклатуры");
	Иначе
		
		Если ВидыАлкогольнойПродукции.Количество() = 1 Тогда
			ВидНоменклатуры = ВидыАлкогольнойПродукции[0];
		Иначе
			ВидНоменклатуры = Неопределено;
		КонецЕсли;
		
		ОткрытьФормуНоменклатуры(ВидНоменклатуры, ДопПараметры);
		
	КонецЕсли;
	
КонецПроцедуры

// Открывает форму выбора номенклатуры.
// 
// Параметры:
//  ФормаВладелец - УправляемаяФорма - форма владелец.
//  Реквизиты     - Структура - параметры формы создания номенклатуры.
Процедура ОткрытьФормуВыбораНоменклатуры(ФормаВладелец, Реквизиты) Экспорт
	
	ПараметрыФормы = Новый Структура;
	Если ЗначениеЗаполнено(Реквизиты) Тогда
		Для Каждого КлючИЗначение Из Реквизиты Цикл
			Если КлючИЗначение.Значение = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			ПараметрыФормы.Вставить(КлючИЗначение.Ключ, КлючИЗначение.Значение);
		КонецЦикла;
	КонецЕсли;
	
	ДопустимыеОсобенностиУчета = Новый Массив;
	ДопустимыеОсобенностиУчета.Добавить(ПредопределенноеЗначение("Перечисление.ОсобенностиУчетаНоменклатуры.АлкогольнаяПродукция"));
	ДопустимыеОсобенностиУчета.Добавить(ПредопределенноеЗначение("Перечисление.ОсобенностиУчетаНоменклатуры.Пиво"));
	
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("ОсобенностьУчета", ДопустимыеОсобенностиУчета);
	ПараметрыОтбора.Вставить("ТипНоменклатуры",  ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Товар"));
	
	// Дополнительные параметры отбора
	Если ЗначениеЗаполнено(Реквизиты) Тогда
		
		Если Реквизиты.Свойство("ВидАлкогольнойПродукцииЕГАИС")
			И ЗначениеЗаполнено(Реквизиты.ВидАлкогольнойПродукцииЕГАИС) Тогда
			ПараметрыОтбора.Вставить("ВидАлкогольнойПродукцииЕГАИС", Реквизиты.ВидАлкогольнойПродукцииЕГАИС);
		КонецЕсли;
		
	КонецЕсли;
	
	ПараметрыФормы.Вставить("Отбор", ПараметрыОтбора);
	
	ОткрытьФорму("Справочник.Номенклатура.ФормаВыбора", ПараметрыФормы, ФормаВладелец);
	
КонецПроцедуры

// Вызывает процедуру обработки выбора номенклатуры, если произошел выбор из формы выбора.
//
// Параметры:
//  ОповещениеПриЗавершении - ОписаниеОповещения - процедура завершения подбора номенклатуры,
//  ВыбранноеЗначение - Произвольный - результат выбора в подчиненной форме,
//  ИсточникВыбора - УправляемаяФорма - форма, где осуществлен выбор.
Процедура ОбработкаВыбораНоменклатуры(ОповещениеПриЗавершении, ВыбранноеЗначение, ИсточникВыбора) Экспорт
	
	Если СтрНачинаетсяС(ИсточникВыбора.ИмяФормы, "Справочник.Номенклатура") Тогда
		ВыполнитьОбработкуОповещения(ОповещениеПриЗавершении, ВыбранноеЗначение);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ПартнерыИКонтрагенты

// Открывает форму создания нового контрагента.
//
// Параметры:
//  ДанныеКонтрагента - Структура - данные для заполнения нового контрагента. Структура со свойствами:
//   * Наименование - Строка - наименование контрагента,
//   * СокращенноеНаименование - Строка - сокращенное наименование контрагента,
//   * ИНН - Строка - ИНН контрагента,
//   * КПП - Строка - КПП контрагента.
//  Форма  - УправляемаяФорма - форма-владелец.
Процедура ОткрытьФормуСозданияКонтрагента(ФормаВладелец, Реквизиты) Экспорт
	
	Основание = Новый Структура;
	Основание.Вставить("ИНН",                     Реквизиты.ИНН);
	Основание.Вставить("КПП",                     Реквизиты.КПП);
	Основание.Вставить("Наименование",            Реквизиты.Наименование);
	Основание.Вставить("СокращенноеНаименование", Реквизиты.СокращенноеНаименование);
	
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("РежимВыбора", Истина);
	ПараметрыФормы.Вставить("Основание", Основание);
	
	ОткрытьФорму("Справочник.Контрагенты.Форма.ФормаЭлемента", ПараметрыФормы, ФормаВладелец);
	
КонецПроцедуры

// Открывает форму создания торгового объекта.
// 
// Параметры:
//  Форма     - УправляемаяФорма - форма-владелец.
//  Реквизиты - Структура - параметры формы создания номенклатуры.
Процедура ОткрытьФормуСозданияТорговогоОбъекта(ФормаВладелец, Реквизиты) Экспорт
	
	Основание = Новый Структура;
	Основание.Вставить("Наименование",            Реквизиты.Наименование);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Основание", Основание);
	
	ОткрытьФорму("Справочник.Магазины.ФормаОбъекта", ПараметрыФормы, ФормаВладелец);
	
КонецПроцедуры

// Открывает форму выбора контрагента.
// 
// Параметры:
//  ФормаВладелец - УправляемаяФорма - форма-владелец.
//  Реквизиты     - Структура - параметры формы создания номенклатуры.
//  Элемент       - ПолеВвода - необязательный, элемент формы в который происходит выбор.
Процедура ОткрытьФормуВыбораКонтрагента(ФормаВладелец, Реквизиты, Элемент = Неопределено) Экспорт
	
	Основание = Новый Структура;
	Основание.Вставить("ИНН",                     Реквизиты.ИНН);
	Основание.Вставить("КПП",                     Реквизиты.КПП);
	Основание.Вставить("Наименование",            Реквизиты.Наименование);
	Основание.Вставить("СокращенноеНаименование", Реквизиты.СокращенноеНаименование);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Основание", Основание);
	
	ОткрытьФорму("Справочник.Контрагенты.ФормаВыбора", ПараметрыФормы, ФормаВладелец);
	
КонецПроцедуры

// Открывает форму выбора торгового объекта.
// 
// Параметры:
//  ФормаВладелец - УправляемаяФорма - форма-владелец.
//  Реквизиты     - Структура - параметры формы создания номенклатуры.
Процедура ОткрытьФормуВыбораТорговогоОбъекта(ФормаВладелец, Реквизиты) Экспорт
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ВыборГруппИЭлементов", ИспользованиеГруппИЭлементов.Элементы);
	
	ОткрытьФорму("Справочник.Магазины.ФормаВыбора", ПараметрыФормы, ФормаВладелец);
	
КонецПроцедуры

// Вызывает процедуру обработки выбора номенклатуры, если произошел выбор из формы выбора.
//
// Параметры:
//  ОповещениеПриЗавершении - ОписаниеОповещения - процедура завершения подбора номенклатуры,
//  ВыбранноеЗначение - Произвольный - результат выбора в подчиненной форме,
//  ИсточникВыбора - УправляемаяФорма - форма, где осуществлен выбор.
Процедура ОбработкаВыбораТорговогоОбъекта(ОповещениеПриЗавершении, ВыбранноеЗначение, ИсточникВыбора) Экспорт
	
	Возврат;
	
КонецПроцедуры

#КонецОбласти

#Область Серии

// Вызывает процедуру обработки подбора, если произошел выбор из формы подбора.
//
// Параметры:
//  Форма                  - УправляемаяФорма - форма владелец.
//  ВыбраннаяСерия         - Произвольный - результат выбора в подчиненной форме.
//  ИсточникВыбора         - УправляемаяФорма - форма, где осуществлен выбор.
//  ПараметрыЗаполнения    - Структура - см. ИнтеграцияЕГАИСКлиентСервер.ПараметрыЗаполненияТабличнойЧасти
Процедура ОбработкаВыбораСерии(Форма, ВыбраннаяСерия, ИсточникВыбора, ПараметрыЗаполнения = Неопределено) Экспорт
	
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийФормы

Процедура ОбработкаОповещения(Форма, ИмяСобытия, Параметр, Источник, ДополнительныеПараметры) Экспорт
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, "Объект")
		И ЗначениеЗаполнено(Форма.Объект.Ссылка) Тогда
		
		ТекущийДокумент = Форма.Объект.Ссылка;
		
		Если ИнтеграцияЕГАИСРТВызовСервера.ТребуетсяБлокировкаФормыПоПодчиненным(ТекущийДокумент, ИмяСобытия, Параметр) Тогда
			Форма.ТолькоПросмотр = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Если ИмяСобытия = "ЗакрытиеФормыПроверкиИПодбораЕГАИС" Тогда
		Если ДополнительныеПараметры <> Неопределено Тогда
			ДополнительныеПараметры.СтандартнаяОбработка = Ложь;
			Если Источник = Форма.УникальныйИдентификатор Тогда
				ДополнительныеПараметры.ТребуетсяСерверныйВызов = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если ИмяСобытия = "ВыполненОбменЕГАИС" Тогда
		Если (Параметр = Неопределено
			Или (ТипЗнч(Параметр) = Тип("Структура") И Параметр.ОбновлятьСтатусВФормахДокументов)) Тогда
			
			СформироватьТекстДокументаЕГАИС(Форма);
			
		КонецЕсли;
		
		Возврат;
		
	КонецЕсли;
	
	ПараметрыИнтеграции = Форма.ПараметрыИнтеграцииГосИС.Получить("ЕГАИС");
	
	Если ТипЗнч(Параметр) <> Тип("Структура") Тогда
		Возврат;
	ИначеЕсли НЕ Параметр.Свойство("Основание") Тогда
		Возврат;
	КонецЕсли;
	
	Объект = Форма[ПараметрыИнтеграции.ИмяРеквизитаФормыОбъект];
	Если Параметр.Основание = Объект.Ссылка Тогда
		СформироватьТекстДокументаЕГАИС(Форма);
	КонецЕсли;

	
КонецПроцедуры

Процедура ОбработкаНавигационнойСсылки(Форма, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка) Экспорт
	
	Возврат;
	
КонецПроцедуры

Процедура ПослеЗаписи(Форма, ПараметрыЗаписи) Экспорт
	
	Если Форма.ИмяФормы = "Документ.ПриобретениеТоваровУслуг.Форма.ФормаДокумента" Тогда
		
		Если ЗначениеЗаполнено(Форма.ТТНВходящаяЕГАИС) Тогда
			
			ПараметрыОповещения = Новый Структура;
			ПараметрыОповещения.Вставить("Ссылка",     Форма.ТТНВходящаяЕГАИС);
			ПараметрыОповещения.Вставить("Основание",  Форма.Объект.Ссылка);
			ПараметрыОповещения.Вставить("Перечитать", Истина);
			Оповестить("Запись_ТТНВходящаяЕГАИС", ПараметрыОповещения, Форма.Объект.Ссылка);
			Форма.ТТНВходящаяЕГАИС = Неопределено;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Выполняет переопределяемую команду
//
// Параметры:
//  Форма                   - УправляемаяФорма - форма, в которой расположена команда
//  Команда                 - КомандаФормы     - команда формы
//  ДополнительныеПараметры - Структура        - дополнительные параметры.
//
Процедура ВыполнитьПереопределяемуюКоманду(Форма, Команда, ДополнительныеПараметры) Экспорт
	
	Если Команда.Имя = "ОтправитьРаспоряжениеНаПриемкуКладовщику" Тогда
		Контекст = Новый Структура;
		Контекст.Вставить("ОтправитьРаспоряжениеНаПриемкуКладовщику");
		Форма.Подключаемый_ВыполнитьПереопределяемуюКомандуНаСервере(Контекст, Неопределено);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

// Переопределяемая процедура, вызываемая из одноименного обработчика события элемента.
//
// Параметры:
//   Форма                     - УправляемаяФорма - форма, из которой происходит вызов процедуры.
//   Элемент                   - ЭлементФормы     - элемент-источник события "При изменении"
//   ДополнительныеПараметры - Структура        - значения дополнительных параметров влияющих на обработку.
//
Процедура ПриИзмененииЭлемента(Форма, Элемент, ДополнительныеПараметры) Экспорт
	
	Возврат;
	
КонецПроцедуры

// Переопределяемая процедура, вызываемая из одноименного обработчика события элемента.
//
Процедура ПриВыбореЭлемента(Форма, Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка, ДополнительныеПараметры) Экспорт
	
	Возврат;
	
КонецПроцедуры

// Переопределяемая процедура, вызываемая из одноименного обработчика события элемента.
//
Процедура ПриАктивизацииЯчейки(Форма, Элемент, ДополнительныеПараметры) Экспорт
	
	Возврат;
	
КонецПроцедуры

// Переопределяемая процедура, вызываемая из одноименного обработчика события элемента.
//
Процедура ПриНачалеРедактирования(Форма, Элемент, НоваяСтрока, Копирование, ДополнительныеПараметры) Экспорт
	
	Возврат;
	
КонецПроцедуры

// Выполняет действия при изменении номенклатуры в таблице Товары.
//
// Параметры:
//  Форма - УправляемаяФорма - форма, в которой произошло событие,
//  ТекущаяСтрока - ДанныеФормыЭлементКоллекции - строка таблицы товаров,
//  КэшированныеЗначения - Структура - сохраненные значения параметров, используемых при обработке,
//  ПараметрыЗаполнения - (См. функцию ИнтеграцияЕГАИСКлиентСервер.ПараметрыЗаполненияТабличнойЧасти).
Процедура ПриИзмененииНоменклатуры(Форма, ТекущаяСтрока, КэшированныеЗначения, ПараметрыЗаполнения, ПараметрыУказанияСерий = "") Экспорт
	
	ДанныеПродукции = ИнтеграцияЕГАИСРТВызовСервера.ДанныеАлкогольнойПродукции(ТекущаяСтрока.Номенклатура);
	
	Если ТекущаяСтрока.Свойство("ЕдиницаИзмерения") Тогда
		ТекущаяСтрока.ЕдиницаИзмерения = ДанныеПродукции.ЕдиницаИзмерения;
	КонецЕсли;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПроверитьХарактеристикуПоВладельцу", ТекущаяСтрока.Характеристика);
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("Номенклатура", "Номенклатура");
	СтруктураПараметров.Вставить("ХарактеристикиИспользуются", "ХарактеристикиИспользуются");
	
	СтруктураДействий.Вставить("ЗаполнитьПризнакХарактеристикиИспользуются", СтруктураПараметров);
	
	Если ПараметрыЗаполнения.ОбработатьУпаковки Тогда
		СтруктураДействий.Вставить("ПроверитьЗаполнитьУпаковкуПоВладельцу", ТекущаяСтрока.Упаковка);
		СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекущаяСтрока.Номенклатура) Тогда
		СтруктураДействий.Вставить("ПроверитьНеобходимостьВводаАкцизнойМарки");
	КонецЕсли;
	
	Если ПараметрыЗаполнения.ПересчитатьСумму Тогда
		ДанныеДокумента = Новый Структура;
		ДанныеДокумента.Вставить("Дата", Форма.Объект.Дата);
		
		Если Форма.Объект.Свойство("ОрганизацияЕГАИС") Тогда
			ДанныеДокумента.Вставить("Магазин", ИнтеграцияЕГАИСРТВызовСервера.ЗначениеРеквизитаОбъекта(Форма.Объект.ОрганизацияЕГАИС, "ТорговыйОбъект"));
		Иначе
			ДанныеДокумента.Вставить("Магазин", Неопределено);
		КонецЕсли;
		
		СтруктураДействий.Вставить("ЗаполнитьЦенуПродажи", ОбработкаТабличнойЧастиТоварыКлиентСервер.ПолучитьСтруктуруЗаполненияЦеныПродажиВСтрокеТЧ(ДанныеДокумента));
		СтруктураДействий.Вставить("ПересчитатьСумму");
	КонецЕсли;
	
	Если ПараметрыЗаполнения.ЗаполнитьАлкогольнуюПродукцию Тогда
		СтруктураДействий.Вставить("ЗаполнитьАлкогольнуюПродукцию", ПараметрыЗаполнения);
	КонецЕсли;
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма.Объект, "ОстаткиПоДаннымЕГАИС") Тогда
		ТабличнаяЧастьТовары = Форма.Объект.ОстаткиПоДаннымЕГАИС;
	Иначе
		ТабличнаяЧастьТовары = Форма.Объект.Товары;
	КонецЕсли;
	
	ОбработкаТабличнойЧастиТоварыКлиент.ПриИзмененииРеквизитовВТЧКлиент(ТабличнаяЧастьТовары, ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	Если ТекущаяСтрока.Свойство("МаркируемаяАлкогольнаяПродукция") Тогда
		ТекущаяСтрока.МаркируемаяАлкогольнаяПродукция = ДанныеПродукции.Маркируемый;
	КонецЕсли;
	
	Если ПараметрыЗаполнения.ЗаполнитьИндексАкцизнойМарки Тогда
		АкцизныеМаркиКлиентСервер.ЗаполнитьИндексАкцизнойМарки(ТекущаяСтрока, "Количество");
	КонецЕсли;
	
КонецПроцедуры

// Выполняет действия при изменении характеристики в таблице Товары.
//
// Параметры:
//  Форма - УправляемаяФорма - форма, в которой произошло событие,
//  ТекущаяСтрока - ДанныеФормыЭлементКоллекции - строка таблицы товаров,
//  КэшированныеЗначения - Структура - сохраненные значения параметров, используемых при обработке,
//  ПараметрыЗаполнения - (См. функцию ИнтеграцияЕГАИСКлиентСервер.ПараметрыЗаполненияТабличнойЧасти).
Процедура ПриИзмененииХарактеристики(Форма, ТекущаяСтрока, КэшированныеЗначения, ПараметрыЗаполнения) Экспорт
	
	Если ПараметрыЗаполнения.ПересчитатьСумму Тогда
		СтруктураДействий = Новый Структура;
		СтруктураДействий.Вставить("ПересчитатьСумму");
		ДанныеДокумента = Новый Структура;
		ДанныеДокумента.Вставить("Дата", Форма.Объект.Дата);
		
		Если Форма.Объект.Свойство("ОрганизацияЕГАИС") Тогда
			ДанныеДокумента.Вставить("Магазин", ИнтеграцияЕГАИСРТВызовСервера.ЗначениеРеквизитаОбъекта(Форма.Объект.ОрганизацияЕГАИС, "ТорговыйОбъект"));
		Иначе
			ДанныеДокумента.Вставить("Магазин", Неопределено);
		КонецЕсли;
		
		СтруктураДействий.Вставить("ЗаполнитьЦенуПродажи", ОбработкаТабличнойЧастиТоварыКлиентСервер.ПолучитьСтруктуруЗаполненияЦеныПродажиВСтрокеТЧ(ДанныеДокумента));
		ОбработкаТабличнойЧастиТоварыКлиент.ПриИзмененииРеквизитовВТЧКлиент(Форма.Объект.Товары, ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	КонецЕсли;
	
	ТекущаяСтрока.АлкогольнаяПродукция = ИнтеграцияЕГАИСРТВызовСервера.АлкогольнаяПродукцияПоНоменклатуре(ТекущаяСтрока.Номенклатура, ТекущаяСтрока.Характеристика);
	
	Если ПараметрыЗаполнения.ЗаполнитьИндексАкцизнойМарки Тогда
		АкцизныеМаркиКлиентСервер.ЗаполнитьИндексАкцизнойМарки(ТекущаяСтрока, "Количество");
	КонецЕсли;
	
КонецПроцедуры

// Выполняет действия при создании характеристики в таблице Товары.
//
// Параметры:
//  Форма                - УправляемаяФорма            - форма, в которой произошло событие,
//  ТекущаяСтрока        - ДанныеФормыЭлементКоллекции - строка таблицы товаров,
//  Элемент              - ПолеФормы                   - поле, в котором происходит создание характеристики,
//  СтандартнаяОбработка - Булево                      - признак отказа от стандартной обработки события.
Процедура ХарактеристикаСоздание(Форма, ТекущаяСтрока, Элемент, СтандартнаяОбработка) Экспорт
	
	Возврат;
	
КонецПроцедуры

// Выполняет действия при изменении упаковки в таблице Товары.
//
// Параметры:
//  Форма - УправляемаяФорма - форма, в которой произошло событие,
//  ТекущаяСтрока - ДанныеФормыЭлементКоллекции - строка таблицы товаров,
//  КэшированныеЗначения - Структура - сохраненные значения параметров, используемых при обработке,
//  ПараметрыЗаполнения - (См. функцию ИнтеграцияЕГАИСКлиентСервер.ПараметрыЗаполненияТабличнойЧасти).
Процедура ПриИзмененииУпаковки(Форма, ТекущаяСтрока, КэшированныеЗначения, ПараметрыЗаполнения) Экспорт
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
	Если ПараметрыЗаполнения.ПересчитатьСумму Тогда
		СтруктураДействий.Вставить("ПересчитатьСумму");
	КонецЕсли;
	
	ОбработкаТабличнойЧастиТоварыКлиент.ПриИзмененииРеквизитовВТЧКлиент(Форма.Объект.Товары, ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	Если ПараметрыЗаполнения.ЗаполнитьИндексАкцизнойМарки Тогда
		АкцизныеМаркиКлиентСервер.ЗаполнитьИндексАкцизнойМарки(ТекущаяСтрока, "Количество");
	КонецЕсли;
	
КонецПроцедуры

// Выполняет действия при изменении количества упаковок в таблице Товары.
//
// Параметры:
//  Форма - УправляемаяФорма - форма, в которой произошло событие,
//  ТекущаяСтрока - ДанныеФормыЭлементКоллекции - строка таблицы товаров,
//  КэшированныеЗначения - Структура - сохраненные значения параметров, используемых при обработке,
//  ПараметрыЗаполнения - (См. функцию ИнтеграцияЕГАИСКлиентСервер.ПараметрыЗаполненияТабличнойЧасти).
Процедура ПриИзмененииКоличестваУпаковок(Форма, ТекущаяСтрока, КэшированныеЗначения, ПараметрыЗаполнения) Экспорт
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
	Если ПараметрыЗаполнения.ПересчитатьСумму Тогда
		СтруктураДействий.Вставить("ПересчитатьСумму");
	КонецЕсли;
	
	ОбработкаТабличнойЧастиТоварыКлиент.ПриИзмененииРеквизитовВТЧКлиент(Форма.Объект.Товары, ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	Если ПараметрыЗаполнения.ЗаполнитьИндексАкцизнойМарки Тогда
		АкцизныеМаркиКлиентСервер.ЗаполнитьИндексАкцизнойМарки(ТекущаяСтрока, "Количество");
	КонецЕсли;
	
КонецПроцедуры

// Выполняет действия при изменении количества в таблице Товары.
//
// Параметры:
//  Форма - УправляемаяФорма - форма, в которой произошло событие,
//  ТекущаяСтрока - ДанныеФормыЭлементКоллекции - строка таблицы товаров,
//  КэшированныеЗначения - Структура - сохраненные значения параметров, используемых при обработке,
//  ПараметрыЗаполнения - (См. функцию ИнтеграцияЕГАИСКлиентСервер.ПараметрыЗаполненияТабличнойЧасти).
Процедура ПриИзмененииКоличества(Форма, ТекущаяСтрока, КэшированныеЗначения, ПараметрыЗаполнения) Экспорт
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьКоличествоУпаковок");
	
	Если ПараметрыЗаполнения.ПерезаполнитьНоменклатуруЕГАИС Тогда
		ТекущаяСтрока.АлкогольнаяПродукция = ИнтеграцияЕГАИСРТВызовСервера.АлкогольнаяПродукцияПоНоменклатуре(ТекущаяСтрока.Номенклатура, ТекущаяСтрока.Характеристика);
		
		ДанныеПродукции = ИнтеграцияЕГАИСРТВызовСервера.ДанныеАлкогольнойПродукции(ТекущаяСтрока.Номенклатура);
		
		Если ТекущаяСтрока.Свойство("МаркируемаяАлкогольнаяПродукция") Тогда
			ТекущаяСтрока.МаркируемаяАлкогольнаяПродукция = ДанныеПродукции.Маркируемый;
		КонецЕсли;
		
		СтруктураДействий.Вставить("ПроверитьХарактеристикуПоВладельцу", ТекущаяСтрока.Характеристика);
		СтруктураДействий.Вставить("ПроверитьЗаполнитьУпаковкуПоВладельцу", ТекущаяСтрока.Упаковка);
		СтруктураДействий.Вставить("ПроверитьНеобходимостьВводаАкцизнойМарки");
	КонецЕсли;
	
	Если ПараметрыЗаполнения.ПересчитатьСумму Тогда
		СтруктураДействий.Вставить("ПересчитатьСумму");
	КонецЕсли;
	
	ОбработкаТабличнойЧастиТоварыКлиент.ПриИзмененииРеквизитовВТЧКлиент(Форма.Объект.Товары, ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	Если ПараметрыЗаполнения.ЗаполнитьИндексАкцизнойМарки Тогда
		АкцизныеМаркиКлиентСервер.ЗаполнитьИндексАкцизнойМарки(ТекущаяСтрока, "Количество");
	КонецЕсли;
	
КонецПроцедуры

// Вызывает процедуру обработки подбора, если произошел выбор из формы подбора.
//
// Параметры:
//  Форма                  - УправляемаяФорма - форма владелец.
//  ТекущиеДанные          - ДанныеФормыЭлементКоллекции - строка таблицы товаров.
// 	КэшированныеЗначения   - Структура - Сохраненные значения параметров, используемых при обработке).
//  ПараметрыЗаполнения    - (См. ИнтеграцияЕГАИСКлиентСервер.ПараметрыЗаполненияТабличнойЧасти
Процедура ПриИзмененииСерии(Форма, ТекущиеДанные, КэшированныеЗначения = Неопределено, ПараметрыЗаполнения = Неопределено) Экспорт
	
	Возврат;
	
КонецПроцедуры

// Выполняет действия при начале выбора характеристики в таблице Товары.
//
// Параметры:
//  Форма - УправляемаяФорма - форма, в которой произошло событие,
//  ТекущаяСтрока - ДанныеФормыЭлементКоллекции - строка таблицы товаров,
//  Элемент - ПолеВвода - элемент формы Характеристика,
//  ДанныеВыбора - СписокЗначений - в обработчике можно сформировать и передать в этом параметре данные для выбора,
//  СтандартнаяОбработка - Булево - признак выполнения стандартной (системной) обработки события.
Процедура НачалоВыбораХарактеристики(Форма, ТекущаяСтрока, Элемент, ДанныеВыбора, СтандартнаяОбработка) Экспорт
	
	ОбработкаТабличнойЧастиТоварыКлиент.ВыбратьХарактеристикуНоменклатуры(Форма, Элемент, СтандартнаяОбработка, ТекущаяСтрока);
	
КонецПроцедуры

// Выполняет действия при начале выбора упаковки в таблице Товары.
//
// Параметры:
//  Форма - УправляемаяФорма - форма, в которой произошло событие,
//  ТекущаяСтрока - ДанныеФормыЭлементКоллекции - строка таблицы товаров,
//  Элемент - ПолеВвода - элемент формы Упаковка,
//  ДанныеВыбора - СписокЗначений - в обработчике можно сформировать и передать в этом параметре данные для выбора,
//  СтандартнаяОбработка - Булево - признак выполнения стандартной (системной) обработки события.
Процедура НачалоВыбораУпаковки(Форма, ТекущаяСтрока, Элемент, ДанныеВыбора, СтандартнаяОбработка) Экспорт
	
	ОбработкаТабличнойЧастиТоварыКлиент.ВыбратьУпаковкуНоменклатуры(ДанныеВыбора, СтандартнаяОбработка, ТекущаяСтрока);
	
КонецПроцедуры

#КонецОбласти

#Область ПодключаемоеОборудование

// Вызывается перед обработкой штрихкодов, не привязанных ни к одной номенклатуре.
//
// Параметры:
//  ОписаниеОповещения - ОписаниеОповещения - процедура, которую нужно вызвать после выполнения обработки,
//  Форма - УправляемаяФорма - форма, в которой отсканировали штрихкоды,
//  ИмяСобытия - Строка - имя события, инициировавшее оповещение,
//  Параметр - Структура - данные для обработки,
//  Источник - Произвольный - источник события.
Процедура ОбработкаОповещенияОбработаныНеизвестныеШтрихкоды(ОписаниеОповещения, Форма, ИмяСобытия, Параметр, Источник) Экспорт
	
	Если Источник = "ПодключаемоеОборудование"
		И ИмяСобытия = "НеизвестныеШтрихкоды"
		И Параметр.ФормаВладелец = Форма.УникальныйИдентификатор Тогда
		
		ДанныеШтрихкодов = Новый Массив;
		Для Каждого ПолученныйШтрихкод Из Параметр.ПолученыНовыеШтрихкоды Цикл
			ДанныеШтрихкодов.Добавить(ПолученныйШтрихкод);
		КонецЦикла;
		Для Каждого ПолученныйШтрихкод Из Параметр.ЗарегистрированныеШтрихкоды Цикл
			ДанныеШтрихкодов.Добавить(ПолученныйШтрихкод);
		КонецЦикла;
		
		ВыполнитьОбработкуОповещения(ОписаниеОповещения, ДанныеШтрихкодов);
		
	КонецЕсли;
	
КонецПроцедуры

// В процедуре нужно реализовать алгоритм передачи данных в ТСД.
//
// Параметры:
//  Форма - УправляемаяФорма - форма документа, инициировавшая выгрузку.
Процедура ВыгрузитьДанныеВТСД(Форма) Экспорт
	
	ПодключаемоеОборудованиеРТКлиент.ВыгрузитьДокументВТСД(Форма, Ложь, Новый Структура);
	
КонецПроцедуры

// В процедуре нужно реализовать алгоритм заполнения формы данными из ТСД.
//
// Параметры:
//  ОписаниеОповещения - ОписаниеОповещения - процедура, которую нужно вызвать после заполнения данных формы,
//  Форма - УправляемаяФорма - форма, данные в которой требуется заполнить,
//  РезультатВыполнения - (См. МенеджерОборудованияКлиент.ПараметрыВыполненияОперацииНаОборудовании).
Процедура ПриПолученииДанныхИзТСД(ОписаниеОповещения, Форма, РезультатВыполнения) Экспорт
	
	Если РезультатВыполнения.Результат Тогда
		
		ВыполнитьОбработкуОповещения(ОписаниеОповещения, РезультатВыполнения.ТаблицаТоваров);
		
	Иначе
		
		СобытияФормИСКлиент.СообщитьОбОшибке(РезультатВыполнения);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ПроверкаИПодборПродукцииЕГАИС

Процедура ПриЗакрытииФормыПроверкиИПодбора(Результат, ДополнительныеПараметры) Экспорт
	
	Форма = ДополнительныеПараметры.Форма;
	Если Не ЭтоАдресВременногоХранилища(Результат) Тогда
		Возврат;
	КонецЕсли;
	
	Оповестить("ЗакрытиеФормыПроверкиИПодбораЕГАИС", Результат, Форма.УникальныйИдентификатор);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ОткрытьФормуНоменклатуры(ВыбранныйЭлемент, ДополнительныеПараметры) Экспорт
	
	ПараметрыФормы = ДополнительныеПараметры.Реквизиты;
	
	Если ВыбранныйЭлемент <> Неопределено Тогда
		ПараметрыФормы.Вставить("ВидНоменклатуры", ВыбранныйЭлемент.Значение);
	КонецЕсли;
	
	Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияФормыНоменклатура", СобытияФормЕГАИСРТКлиент, ДополнительныеПараметры);
	
	ОткрытьФорму("Справочник.Номенклатура.ФормаОбъекта", ПараметрыФормы, ДополнительныеПараметры.ФормаВладелец,,,, Оповещение);
	
КонецПроцедуры

Процедура ПослеЗакрытияФормыНоменклатура(Результат, ДопПараметры) Экспорт
	
	Если ДопПараметры.ФормаВладелец.ИмяФормы = "РегистрСведений.СоответствиеНоменклатурыЕГАИС.Форма.ФормаЗаписи" Тогда
		Оповещение = Новый ОписаниеОповещения("Подключаемый_ОбработкаВыбораНоменклатуры", ДопПараметры.ФормаВладелец);
		ВыполнитьОбработкуОповещения(Оповещение, ДопПараметры.НоменклатураСсылка);
	КонецЕсли;
	
КонецПроцедуры

Процедура СформироватьТекстДокументаЕГАИС(Форма, ОчищатьВместоИзмененияВидимости = Ложь) Экспорт
	
	ПараметрыИнтеграции = Форма.ПараметрыИнтеграцииГосИС.Получить("ЕГАИС");
	Объект = Форма[ПараметрыИнтеграции.ИмяРеквизитаФормыОбъект];
	
	ПараметрыИнтеграции = Форма.ПараметрыИнтеграцииГосИС.Получить("ЕГАИС.ДокументОснование");
	ЭлементИнтерфейса  = Форма.Элементы[ПараметрыИнтеграции.ИмяЭлементаФормы];
	
	Если Форма.ИмяФормы = "Документ.ПоступлениеТоваров.Форма.ФормаДокумента" Тогда
		ТекстГиперссылки = ИнтеграцияЕГАИСРТВызовСервера.ТекстДокументаЕГАИСВПоступленииТоваров(Объект, Объект.ТТНВходящаяЕГАИС);
	Иначе
	ТекстГиперссылки = ИнтеграцияЕГАИСВызовСервера.ТекстДокументаЕГАИС(Объект.Ссылка);
	КонецЕсли;
	
	ЭлементИнтерфейса.Видимость = ОчищатьВместоИзмененияВидимости ИЛИ ЗначениеЗаполнено(ТекстГиперссылки);
	Форма[ПараметрыИнтеграции.ИмяРеквизитаФормы] = ТекстГиперссылки;
	
КонецПроцедуры

#КонецОбласти


#КонецОбласти
