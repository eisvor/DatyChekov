////////////////////////////////////////////////////////////////////////////////
// ФинансыКлиент содержит процедуры и функции для работы 
// с финансами и обработки действий пользователя с финансами.
//  
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Определяет вхождение ПКО или РКО в кассовую книгу по ссылке.
//
// Параметры:
//  Ссылка - ДокументСсылка.ПриходныйКассовыйОрдер, 
//           ДокументСсылка.РасходныйКассовыйОрдер - документы для определения вхождения.
//
Функция ОпределитьВхождениеВКассовуюКнигу(Ссылка) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	ВходитВКассовуюКнигу = Ложь;
	ИспользоватьКассовуюКнигу = ПолучитьФункциональнуюОпцию("ИспользоватьКассовуюКнигу");
	
	Если ИспользоватьКассовуюКнигу Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		
		"ВЫБРАТЬ
		|	КассоваяКнигаДокументы.Ссылка
		|ИЗ
		|	Документ.КассоваяКнига.КассовыеОрдера КАК КассоваяКнигаДокументы
		|ГДЕ
		|	КассоваяКнигаДокументы.Ссылка.Проведен
		|	И КассоваяКнигаДокументы.КассовыйОрдер = &Ссылка";
		
		Запрос.УстановитьПараметр("Ссылка", Ссылка);
		
		Результат = Запрос.Выполнить();
		
		ВходитВКассовуюКнигу = НЕ Результат.Пустой();
		
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат ВходитВКассовуюКнигу;
	
КонецФункции

// Заполнение РасшифровкиПлатежа по Заказа покупателю
// Объект - Объект финансового документа
// ЗаказПокупателя
// ДанныеЗаполнения - структура
// Организация - СправочникСсылка.Организации - в случае распределения номенклатуры
//
Процедура ЗаполнениеРасшифровкиПлатежаПоЗаказуПокупателя(Объект, ЗаказПокупателя, ДанныеЗаполнения, Организация = Неопределено) Экспорт
	
	Объект.РасшифровкаПлатежа.Очистить();
	
	Запрос = Новый Запрос();
	
	Если ЗначениеЗаполнено(Организация) Тогда
		МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
		Документы.ЗаказПокупателя.ПодготовитьВременнуюТаблицуРаспределенияНоменклатуры(ЗаказПокупателя, МенеджерВременныхТаблиц);
		Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
		
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	ДокументОснования.Ссылка КАК ДокументОснование,
		|	МАКСИМУМ(ДокументОснования.Контрагент) КАК Контрагент,
		|	МАКСИМУМ(ВТРаспределениеНоменклатуры.Организация) КАК Организация,
		|	МАКСИМУМ(ДокументОснования.Магазин) КАК Магазин,
		|	МАКСИМУМ(ДокументОснования.ЦенаВключаетНДС) КАК ЦенаВключаетНДС,
		|	СУММА(ЕСТЬNULL(ТоварыДокументОснования.Сумма, ДокументОснования.СуммаДокумента)) КАК Сумма,
		|	СУММА(ЕСТЬNULL(ТоварыДокументОснования.СуммаНДС, 0)) КАК СуммаНДС
		|ПОМЕСТИТЬ ДанныеДокумента
		|ИЗ
		|	Документ.ЗаказПокупателя КАК ДокументОснования
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказПокупателя.Товары КАК ТоварыДокументОснования
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТРаспределениеНоменклатуры КАК ВТРаспределениеНоменклатуры
		|			ПО ТоварыДокументОснования.Номенклатура = ВТРаспределениеНоменклатуры.Номенклатура
		|				И (ВТРаспределениеНоменклатуры.Организация = &Организация)
		|		ПО (ТоварыДокументОснования.Ссылка = &Ссылка)
		|ГДЕ
		|	ДокументОснования.Ссылка = &Ссылка
		|
		|СГРУППИРОВАТЬ ПО
		|	ДокументОснования.Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|"
		
	Иначе
		
		Организация = ЗаказПокупателя.Организация;
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	ДокументОснования.Ссылка КАК ДокументОснование,
		|	МАКСИМУМ(ДокументОснования.Контрагент) КАК Контрагент,
		|	МАКСИМУМ(ДокументОснования.Организация) КАК Организация,
		|	МАКСИМУМ(ДокументОснования.Магазин) КАК Магазин,
		|	МАКСИМУМ(ДокументОснования.ЦенаВключаетНДС) КАК ЦенаВключаетНДС,
		|	СУММА(ЕСТЬNULL(ТоварыДокументОснования.Сумма, ДокументОснования.СуммаДокумента)) КАК Сумма,
		|	СУММА(ЕСТЬNULL(ТоварыДокументОснования.СуммаНДС, 0)) КАК СуммаНДС
		|ПОМЕСТИТЬ ДанныеДокумента
		|ИЗ
		|	Документ.ЗаказПокупателя КАК ДокументОснования
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказПокупателя.Товары КАК ТоварыДокументОснования
		|		ПО (ТоварыДокументОснования.Ссылка = &Ссылка)
		|ГДЕ
		|	ДокументОснования.Ссылка = &Ссылка
		|
		|СГРУППИРОВАТЬ ПО
		|	ДокументОснования.Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|"
		
	КонецЕсли;
	
	Запрос.Текст = ТекстЗапроса +
	"ВЫБРАТЬ
	|	ДанныеДокумента.ДокументОснование КАК ДокументОснование,
	|	ДанныеДокумента.Контрагент КАК Контрагент,
	|	ДанныеДокумента.Организация КАК Организация,
	|	ДанныеДокумента.Магазин КАК Магазин,
	|	ДанныеДокумента.ЦенаВключаетНДС КАК ЦенаВключаетНДС,
	|	&ХозяйственнаяОперация КАК ХозяйственнаяОперация,
	|	ВЫБОР
	|		КОГДА ДанныеДокумента.ЦенаВключаетНДС
	|			ТОГДА ДанныеДокумента.Сумма
	|		ИНАЧЕ ДанныеДокумента.Сумма + ДанныеДокумента.СуммаНДС
	|	КОНЕЦ КАК СуммаДокумента,
	|	ЕСТЬNULL(Контрагенты.Наименование, "")       КАК Наименование,
	|				ЕСТЬNULL(Контрагенты.НаименованиеПолное, "") КАК НаименованиеПолное
	|ИЗ
	|	ДанныеДокумента КАК ДанныеДокумента
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Контрагенты КАК Контрагенты
	|		ПО (Контрагенты.Ссылка = ДанныеДокумента.Контрагент)";
	Запрос.УстановитьПараметр("Ссылка", ЗаказПокупателя);
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("ХозяйственнаяОперация", Перечисления.ХозяйственныеОперации.ПоступлениеОплатыОтКлиента);
	
	Если ТипЗнч(Объект.Ссылка) = Тип("ДокументСсылка.РегистрацияБезналичнойОплаты") Тогда
		Объект.ДокументОснование = ЗаказПокупателя;
	Иначе
		Объект.ЗаказПокупателя = ЗаказПокупателя;
	КонецЕсли;
	
	РезультатЗапроса = Запрос.ВыполнитьПакет()[1];
	
	Для Каждого РеквизитЗаполнения Из РезультатЗапроса.Колонки Цикл
		ДанныеЗаполнения.Вставить(РеквизитЗаполнения.Имя);
	КонецЦикла;
	ВыборкаДанныхЗаполнения = РезультатЗапроса.Выбрать();
	ВыборкаДанныхЗаполнения.Следующий();
	ЗаполнитьЗначенияСвойств(ДанныеЗаполнения, ВыборкаДанныхЗаполнения);
	
	Если ДанныеЗаполнения.Свойство("СтатьяДвиженияДенежныхСредств") Тогда
		СтатьяДвиженияДенежныхСредств = ДанныеЗаполнения.СтатьяДвиженияДенежныхСредств;
	Иначе
		СтатьяДвиженияДенежныхСредств = ЗначениеНастроекПовтИсп.СтатьяДвиженияДенежныхСредств(ДанныеЗаполнения.ХозяйственнаяОперация);
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	-РасчетыСКлиентамиОстатки.СуммаОстаток КАК Сумма,
	|	РасчетыСКлиентамиОстатки.ДокументРасчета КАК ДокументРасчета,
	|	ВЫРАЗИТЬ(РасчетыСКлиентамиОстатки.ДокументРасчета КАК Документ.РегистрацияБезналичнойОплаты).Организация КАК Организация
	|ИЗ
	|	РегистрНакопления.РасчетыСКлиентами.Остатки(&ПериодОстатков, ЗаказПокупателя = &ЗаказПокупателя) КАК РасчетыСКлиентамиОстатки
	|ГДЕ
	|	РасчетыСКлиентамиОстатки.СуммаОстаток < 0
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДокументРасчета
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СУММА(ЕСТЬNULL(ВложенныйЗапрос.Сумма, 0)) КАК Сумма,
	|	ВложенныйЗапрос.Организация КАК Организация
	|ИЗ
	|	(ВЫБРАТЬ
	|		-РасчетыСКлиентами.Сумма КАК Сумма,
	|		ВЫРАЗИТЬ(РасчетыСКлиентами.ДокументРасчета КАК Документ.РегистрацияБезналичнойОплаты).Организация КАК Организация
	|	ИЗ
	|		РегистрНакопления.РасчетыСКлиентами КАК РасчетыСКлиентами
	|	ГДЕ
	|		ЛОЖЬ
	|		И РасчетыСКлиентами.ЗаказПокупателя = &ЗаказПокупателя
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		РасчетыСКлиентамиОбороты.СуммаПриход,
	|		ВЫРАЗИТЬ(РасчетыСКлиентамиОбороты.ДокументРасчета КАК Документ.РегистрацияБезналичнойОплаты).Организация
	|	ИЗ
	|		РегистрНакопления.РасчетыСКлиентами.Обороты(, , , ЗаказПокупателя = &ЗаказПокупателя) КАК РасчетыСКлиентамиОбороты) КАК ВложенныйЗапрос
	|
	|СГРУППИРОВАТЬ ПО
	|	ВложенныйЗапрос.Организация";
	
	Запрос.УстановитьПараметр("ЗаказПокупателя", ЗаказПокупателя);
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Запрос.УстановитьПараметр("ПериодОстатков", Новый Граница(Объект.Ссылка.МоментВремени(), ВидГраницы.Исключая));
		Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеРегистратор", "РасчетыСКлиентами.Регистратор = &Ссылка");
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ПериодОстатков", "");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеРегистратор", "Ложь");
	КонецЕсли;
	
	РезультатПакета = Запрос.ВыполнитьПакет();
	
	// Заполним расшифровку платежа.
	СуммаКРаспределению = ?(ЗначениеЗаполнено(Объект.СуммаДокумента), Объект.СуммаДокумента, ДанныеЗаполнения.СуммаДокумента);
	
	// Распределим сумму платежа на задолженность по документам отгрузки.
	ВыборкаЗадолженность = РезультатПакета[0].Выбрать();
	Пока ВыборкаЗадолженность.Следующий() Цикл
		Если ЗначениеЗаполнено(ВыборкаЗадолженность.Организация) И ВыборкаЗадолженность.Организация = Организация Тогда
			СтрокаПлатеж = Объект.РасшифровкаПлатежа.Добавить();
			СтрокаПлатеж.СтатьяДвиженияДенежныхСредств = СтатьяДвиженияДенежныхСредств;
			СтрокаПлатеж.ДокументРасчетовСКонтрагентом = ВыборкаЗадолженность.ДокументРасчета;
			СтрокаПлатеж.Сумма                         = Мин(СуммаКРаспределению, ВыборкаЗадолженность.Сумма);
			
			СуммаКРаспределению = СуммаКРаспределению - СтрокаПлатеж.Сумма;
		КонецЕсли;
		
		Если СуммаКРаспределению = 0 Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	// Вычтем из суммы заказа поступившие оплаты.
	Если СуммаКРаспределению > 0 И НЕ ЗначениеЗаполнено(Объект.СуммаДокумента) Тогда
		ВыборкаОплаты = РезультатПакета[1].Выбрать();
		Пока ВыборкаОплаты.Следующий() Цикл
			Если ЗначениеЗаполнено(ВыборкаОплаты.Организация) И ВыборкаОплаты.Организация = Организация Тогда
				СуммаКРаспределению = СуммаКРаспределению - Мин(ВыборкаОплаты.Сумма, СуммаКРаспределению);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	// Оставшуюся сумму к распределению отнесем на аванс.
	Если СуммаКРаспределению > 0 Тогда
		СтрокаПлатеж = Объект.РасшифровкаПлатежа.Добавить();
		СтрокаПлатеж.СтатьяДвиженияДенежныхСредств = СтатьяДвиженияДенежныхСредств;
		СтрокаПлатеж.Сумма                         = СуммаКРаспределению;
	КонецЕсли;
	
	Объект.СуммаДокумента = Объект.РасшифровкаПлатежа.Итог("Сумма");
	ДанныеЗаполнения.СуммаДокумента = Объект.СуммаДокумента;
	
	ДенежныеСредстваСервер.ЗаполнитьПризнакСпособаРасчета(Объект);
	
КонецПроцедуры

// Возвращает признак пробития чека по безналичному платежу.
//
// Возвращаемое значение - Булево.
//
// Параметры:
//  ЧекККМ - ДокументСсылка.ЧекККМ;
//  РБО -    ДокументСсылка.РегистрацияБезналичнойОплаты.
//
Функция ПробитЧекНаБезналичныйПлатеж(ЧекККМ, РБО) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЧекККМ.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.ЧекККМ КАК ЧекККМ
	|ГДЕ
	|	ЧекККМ.ДокументРасчета = &РБО
	|	И НЕ ЧекККМ.Ссылка = &ЧекККМ
	|	И (ЧекККМ.СтатусЧекаККМ = ЗНАЧЕНИЕ(Перечисление.СтатусыЧековККМ.Пробитый)
	|			ИЛИ ЧекККМ.СтатусЧекаККМ = ЗНАЧЕНИЕ(Перечисление.СтатусыЧековККМ.Архивный))
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	РегистрацияБезналичнойОплаты.Ссылка
	|ИЗ
	|	Документ.РегистрацияБезналичнойОплаты КАК РегистрацияБезналичнойОплаты
	|ГДЕ
	|	РегистрацияБезналичнойОплаты.Ссылка = &РБО
	|	И РегистрацияБезналичнойОплаты.ПробитЧек";
	
	Запрос.УстановитьПараметр("РБО", РБО);
	Запрос.УстановитьПараметр("ЧекККМ", ЧекККМ);
	Выборка = Запрос.Выполнить().Выбрать();
	
	ПробитЧек = Ложь;
	Если Выборка.Следующий() Тогда 
		ПробитЧек = Истина;
	КонецЕсли;
	
	Возврат ПробитЧек;
	
КонецФункции

#КонецОбласти
