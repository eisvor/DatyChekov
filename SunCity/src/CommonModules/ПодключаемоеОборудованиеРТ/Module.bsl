////////////////////////////////////////////////////////////////////////////////
// ПодключаемоеОборудованиеРТ содержит процедуры и функции 
// для работы с подключаемым оборудованием.
//  
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

#Область RFID

// Возвращает параметры обработки считанных меток и киз.
//
// Возвращаемое значение:
//  Структура - структура параметров считанных данных.
//
Функция ПараметрыОбработкиСчитанныхRFIDИКиЗ() Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("СчитывательRFID");
	Результат.Вставить("УникальныйИдентификатор");
	Результат.Вставить("GTIN");
	Результат.Вставить("НастройкиИспользованияСерий");
	Результат.Вставить("ЭтоМаркировкаПерсонифицированнымиКиЗ");
	Результат.Вставить("ЭтоМаркировкаТоваровГИСМ");
	Результат.Вставить("ВидНоменклатуры");
	Результат.Вставить("ВладелецСерии");
	Результат.Вставить("ЭтоМаркировкаОстатковГИСМ");
	
	Возврат Результат;
	
КонецФункции

// Обрабатывает считывание RFID.
// 
// Параметры:
//  ДанныеМеток - Массив - массив данных считанных меток.
//  Параметры - Структура - структура параметров выполнения операции.
//  ТЧСерии - ТабличнаяЧасть - табличная часть серий.
//  ИдентификаторТекущейСтроки - УникальныйИдентификатор - уникальный идентификатор текущей строки.
//
// Возвращаемое значение:
//  Структура - структура результата выполнения операции.
//
Функция ОбработатьСчитываниеRFID(ДанныеМеток, Параметры, ТЧСерии = Неопределено, ИдентификаторТекущейСтроки = Неопределено) Экспорт
	
	GTIN                                 = Параметры.GTIN;
	НастройкиИспользованияСерий          = Параметры.НастройкиИспользованияСерий;
	ЭтоМаркировкаПерсонифицированнымиКиЗ = Параметры.ЭтоМаркировкаПерсонифицированнымиКиЗ;
	
	КорректноСчитанныеМетки = Новый Массив;
	
	Для Каждого Метка Из ДанныеМеток Цикл
		
		// Если TID не считался, то нельзя считать чтение метки успешным
		Если ЗначениеЗаполнено(Метка.TID) Тогда
			КорректноСчитанныеМетки.Добавить(Метка);
		КонецЕсли;
		
	КонецЦикла;
	
	Результат = Новый Структура;
	Результат.Вставить("ЗакрытьФорму", Ложь);
	Результат.Вставить("ИдентификаторТекущейСтроки", Неопределено);
	Результат.Вставить("ДанныеСерии", Неопределено);
	
	// От считывателя одна и та же метка могла приехать несколько раз
	// Поэтому сначала свернем приехавшие данные.
	ТаблицаМеток = МассивВТаблицуЗначений(КорректноСчитанныеМетки);
	ИменаКолонок = Новый Массив;
	
	Для Каждого Колонка Из ТаблицаМеток.Колонки Цикл
		ИменаКолонок.Добавить(Колонка.Имя);
	КонецЦикла;

	ТаблицаМеток.Свернуть(СтрСоединить(ИменаКолонок,","));
	
	Если ТаблицаМеток.Количество() > 1 Тогда
		ТекстСообщения = НСтр("ru = 'Считалось сразу несколько RFID-метки. Оставьте в зоне действия считывателя только одну метку и повторите считывание.'");
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
		Возврат Результат;
	КонецЕсли;
	
	ОбрабатываемаяСтрока = Неопределено;
	
	Если ТЧСерии = Неопределено Тогда
		ТЧСерии = Новый ТаблицаЗначений;
		ТЧСерии.Колонки.Добавить("Серия", Новый ОписаниеТипов("СправочникСсылка.СерииНоменклатуры"));
		ТЧСерии.Колонки.Добавить("Номер",ОбщегоНазначения.ОписаниеТипаСтрока(50));
		ТЧСерии.Колонки.Добавить("НомерКиЗГИСМ", Метаданные.ОпределяемыеТипы.НомерКиЗГИСМ.Тип);
		ТЧСерии.Колонки.Добавить("RFIDTID", Метаданные.ОпределяемыеТипы.RFIDTID.Тип);
		ТЧСерии.Колонки.Добавить("RFIDUser",ОбщегоНазначения.ОписаниеТипаСтрока(30));
		ТЧСерии.Колонки.Добавить("RFIDEPC",ОбщегоНазначения.ОписаниеТипаСтрока(30));
		ТЧСерии.Колонки.Добавить("EPCGTIN", Метаданные.ОпределяемыеТипы.GTIN.Тип);
		ТЧСерии.Колонки.Добавить("ГоденДо", ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.ДатаВремя));
		ТЧСерии.Колонки.Добавить("НужноЗаписатьМетку", Новый ОписаниеТипов("Булево"));
		ТЧСерии.Колонки.Добавить("ЗаполненRFIDTID", Новый ОписаниеТипов("Булево"));
		ТЧСерии.Колонки.Добавить("СтатусРаботыRFID", ОбщегоНазначения.ОписаниеТипаЧисло(1));
		ТЧСерии.Колонки.Добавить("Количество", ОбщегоНазначения.ОписаниеТипаЧисло(1));
		ТЧСерии.Колонки.Добавить("КоличествоУпаковок", ОбщегоНазначения.ОписаниеТипаЧисло(1));
	КонецЕсли;
	
	ТекущаяМетка = ТаблицаМеток[0];

	Если НастройкиИспользованияСерий.ИспользоватьНомерКИЗГИСМСерии Тогда
		
		ИнформацияПоКиЗ = ИнтеграцияГИСМ.ИнформацияОКиЗПоRFIDTID(ТекущаяМетка.TID);
		
		Если ЗначениеЗаполнено(ИнформацияПоКиЗ.НомерКиЗ) Тогда
			ОбрабатываемаяСтрока = НоваяСерияПоИнформацииПоКиЗ(ИнформацияПоКиЗ, Параметры, ТЧСерии, ИдентификаторТекущейСтроки);
		Иначе
			ОбрабатываемаяСтрока = НоваяСерияПоИнформацииОМетке(ТекущаяМетка, Параметры, ТЧСерии, ИдентификаторТекущейСтроки);	
		КонецЕсли;
	Иначе
		ОбрабатываемаяСтрока = НоваяСерияПоИнформацииОМетке(ТекущаяМетка, Параметры, ТЧСерии, ИдентификаторТекущейСтроки);	
	КонецЕсли;
	
	ШтрихкодированиеНоменклатурыКлиентСервер.ЗаполнитьФлагиРаботыСМеткой(ОбрабатываемаяСтрока, GTIN, ТекущаяМетка, НастройкиИспользованияСерий, ЭтоМаркировкаПерсонифицированнымиКиЗ);

	Если ОбщегоНазначения.РежимОтладки() Тогда
		СтрокаМетки = "";
		
		Для Каждого Колонка Из ТаблицаМеток.Колонки Цикл
			СтрокаМетки = СтрокаМетки + Колонка.Имя + " " + ТаблицаМеток[0][Колонка.Имя] + " ";
		КонецЦикла;
		ОбщегоНазначения.СообщитьПользователю(СтрокаМетки);
	КонецЕсли;

	Если ОбрабатываемаяСтрока <> Неопределено Тогда
		Если ТипЗнч(ТЧСерии) <> Тип("ТаблицаЗначений") Тогда
			Результат.ИдентификаторТекущейСтроки = ОбрабатываемаяСтрока.ПолучитьИдентификатор();
		Иначе
			Результат.ДанныеСерии = ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(ОбрабатываемаяСтрока);
		КонецЕсли;
	КонецЕсли;

	Возврат Результат;

КонецФункции

// Возвращает таблицу значений на основании массива структур.
// 
// Параметры:
//  МассивСтруктур - Массив - массив структур, которые будут преобразованы в таблицу значений.
//                            Свойства структуры первого элемента массива определяют состав колонок результирующей таблицы.
//
// Возвращаемое значение:
//  ТаблицаЗначений - таблица значений, созданная из массива структур.
// 
Функция МассивВТаблицуЗначений(МассивСтруктур) Экспорт
	Таблица = Новый ТаблицаЗначений;
	// Создадим колонки по первой структуре массива
	Если ТипЗнч(МассивСтруктур) = Тип("Массив")
		И МассивСтруктур.Количество() <> 0 Тогда
		ПерваяСтруктура = МассивСтруктур[0];
		Для Каждого Свойство Из ПерваяСтруктура Цикл 
			Таблица.Колонки.Добавить(Свойство.Ключ, ОписаниеТиповПоТипу(ТипЗнч(Свойство.Значение)));
		КонецЦикла;
		
		Для Каждого Структура Из МассивСтруктур Цикл 
			НоваяСтрока = Таблица.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Структура);
		КонецЦикла;
	КонецЕсли;
	
	Возврат Таблица;
КонецФункции

// Раскладывает переданный массив считанных штрихкодов по типам штрихкодов
//
// Параметры:
//  Штрихкоды - Массив - массив структур, который передается БПО от оборудования, см. ШтрихкодированиеНоменклатурыКлиент.СтруктураДанныхШтрихкода.
//
// Возвращаемое значение:
//  Структура - структура: 
//		*БезТипа - Массив - штрихкоды, тип которых не определен, элементы - структуры, см. ШтрихкодированиеНоменклатурыКлиент.СтруктураДанныхШтрихкода 
//		*АкцизныеМарки - Массив - массив акцизных марок.
//
Функция СтруктураПоТипамШтрихкодов(Штрихкоды) Экспорт
	
	Результат = Новый Структура();
	Результат.Вставить("БезТипа", Новый Массив);
	Результат.Вставить("АкцизныеМарки", Новый Массив);
	Результат.Вставить("КиЗ", Новый Массив);
	
	ПроверятьАкцизныеМарки = ПолучитьФункциональнуюОпцию("ВестиСведенияДляДекларацийПоАлкогольнойПродукции"); 
	ПроверятьКиз           = ПолучитьФункциональнуюОпцию("ВестиУчетМаркировкиПродукцииВГИСМ")
		И НЕ ИнтеграцияГИСМ.ПодсистемаНеИспользуется();
	
	Для Каждого СтрМас Из Штрихкоды Цикл
		
		Если ПроверятьАкцизныеМарки
			И ИнтеграцияЕГАИСРТ.ЭтоШтрихкодАкцизнойМарки(СтрМас.Штрихкод) Тогда
			Результат.АкцизныеМарки.Добавить(СтрМас);
		ИначеЕсли ПроверятьКиз
			И ИнтеграцияГИСМКлиентСервер.ЭтоНомерКиЗ(СтрМас.Штрихкод) Тогда
			Результат.КиЗ.Добавить(СтрМас);
		Иначе
			Результат.БезТипа.Добавить(СтрМас);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;
КонецФункции

// Выполняет сравнение штрихкода и акцизной марки.
//
// Параметры:
//  Штрихкод - Строка - штрихкод товара.
//
// Возвращаемое значение:
//  Булево - результат сравнения.
//
Функция ШтрихкодСоответствуетШаблонуАкцизнойМарки(Штрихкод) Экспорт
	
	ТекстОшибки = "";
	ПространствоИмен = Перечисления.ВидыДокументовЕГАИС.ПространствоИмен(Перечисления.ВидыДокументовЕГАИС.ЧекККМ, Неопределено);
	
	Если ПространствоИмен = Неопределено Тогда
		Возврат Ложь;
	Иначе
		ТипШтрихкодМарки = ФабрикаXDTO.Тип(ПространствоИмен, "BK");
		Попытка
			ТипШтрихкодМарки.Проверить(Штрихкод);
		Исключение
			Возврат Ложь;
		КонецПопытки;
	КонецЕсли;
	
	Возврат Истина;

КонецФункции

// Добавляет строку серии по информации по КиЗ в табличную часть.
//
// Параметры:
//  ИнформацияПоКиЗ - Структура - структура данных метки.
//  Параметры - Структура - структура параметров выполнения операции.
//  ТЧСерии - ТабличнаяЧасть - табличная часть серий.
//  ИдентификаторТекущейСтроки - УникальныйИдентификатор - уникальный идентификатор текущей строки.
//
// Возвращаемое значение:
//  СтрокаТаблицыЗначений - добавляемая строка таблицы значений.
//
Функция НоваяСерияПоИнформацииПоКиЗ(ИнформацияПоКиЗ, Параметры, ТЧСерии, ИдентификаторТекущейСтроки) Экспорт
	
	GTIN                        = Параметры.GTIN;
	ЭтоМаркировкаТоваровГИСМ    = Параметры.ЭтоМаркировкаТоваровГИСМ;
	НастройкиИспользованияСерий = Параметры.НастройкиИспользованияСерий;
	ВидНоменклатуры             = Параметры.ВидНоменклатуры;
	ВладелецСерии               = Параметры.ВладелецСерии;
	ЭтоМаркировкаПерсонифицированнымиКиЗ = Параметры.ЭтоМаркировкаПерсонифицированнымиКиЗ;
	
	Если Не ЗначениеЗаполнено(ИнформацияПоКиЗ.НомерКиЗ) Тогда
		ТекстСообщения = НСтр("ru = 'Ошибка добавления серии по информации о КиЗ: не заполнен номер КиЗ.'");
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
		Возврат Неопределено;
	КонецЕсли;
	
	Если ЭтоМаркировкаТоваровГИСМ Тогда		
		Если ЗначениеЗаполнено(ИнформацияПоКиЗ.GTIN) 
			И GTIN <> ИнформацияПоКиЗ.GTIN Тогда
			ТекстСообщения = НСтр("ru = 'Считанный КиЗ не может быть использован для маркировки товаров с GTIN %GTINТовара%, т.к. предназначен для маркировки товаров с GTIN %GTINКиЗ%.'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%GTINТовара%", GTIN);
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%GTINКиЗ%", ИнформацияПоКиЗ.GTIN);
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
			Возврат Неопределено;
		КонецЕсли;
		
		Если Параметры.ЭтоМаркировкаОстатковГИСМ Тогда
			
			Если ИнформацияПоКиЗ.ДляМаркировкиОстатков = Ложь Тогда
				ТекстСообщения = НСтр("ru = 'Считанный КиЗ не может быть использован для маркировки остатков товаров.'");
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%GTINТовара%", GTIN);
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%GTINКиЗ%", ИнформацияПоКиЗ.GTIN);
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
				Возврат Неопределено;
			КонецЕсли;	
			
		Иначе
			
			Если ИнформацияПоКиЗ.ДляМаркировкиОстатков = Истина Тогда
				ТекстСообщения = НСтр("ru = 'Считанный КиЗ не может быть использован только для маркировки остатков товаров.'");
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%GTINТовара%", GTIN);
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%GTINКиЗ%", ИнформацияПоКиЗ.GTIN);
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
				Возврат Неопределено;
			КонецЕсли;	
			
		КонецЕсли;
		
	КонецЕсли;
	
	НайденныеСтроки = ТЧСерии.НайтиСтроки(Новый Структура("НомерКИЗГИСМ", ИнформацияПоКиЗ.НомерКиЗ));
	
	ОбрабатываемаяСтрока = Неопределено;
	
	Если ИдентификаторТекущейСтроки <> Неопределено Тогда
		ТекущаяСтрока = ТЧСерии.НайтиПоИдентификатору(ИдентификаторТекущейСтроки);
	Иначе
		ТекущаяСтрока = Неопределено;
	КонецЕсли;
	
	// Для случая, когда информации о КиЗ в системе нет, поэтому мы считываем RFID и сканером номер КиЗ
	Если НайденныеСтроки.Количество() = 0
		И ТекущаяСтрока <> Неопределено
		И Не ЗначениеЗаполнено(ТекущаяСтрока.НомерКИЗГИСМ)
		И (ТекущаяСтрока.RFIDTID = ИнформацияПоКиЗ.RFIDTID
		Или Не ЗначениеЗаполнено(ИнформацияПоКиЗ.RFIDTID)) Тогда
		
		ОбрабатываемаяСтрока = ТекущаяСтрока;
		ЗаполнитьСтрокуПоИнформацииПоКиЗ(ОбрабатываемаяСтрока, ИнформацияПоКиЗ, НастройкиИспользованияСерий);
		
	ИначеЕсли НайденныеСтроки.Количество() > 0 Тогда
		
		ОбрабатываемаяСтрока = НайденныеСтроки[0];
		
		Если Не ЗначениеЗаполнено(ОбрабатываемаяСтрока.Серия) Тогда
			Выборка = ВыборкаИзЗапросаПоискаСерииПоНомеруКиЗ(ИнформацияПоКиЗ.НомерКиЗ, ВладелецСерии);
			
			Если Выборка.Следующий() Тогда
				Если РеквизитыСерииСовпадаютСИнформациейПоКиЗ(Выборка, ИнформацияПоКиЗ, ЭтоМаркировкаТоваровГИСМ) Тогда
					ЗаполнитьЗначенияСвойств(ОбрабатываемаяСтрока, Выборка);
				КонецЕсли;
			Иначе
				ЗаполнитьСтрокуПоИнформацииПоКиЗ(ОбрабатываемаяСтрока, ИнформацияПоКиЗ, НастройкиИспользованияСерий);
			КонецЕсли;
			
		Иначе
			Если Не РеквизитыСерииСовпадаютСИнформациейПоКиЗ(ОбрабатываемаяСтрока, ИнформацияПоКиЗ, ЭтоМаркировкаТоваровГИСМ) Тогда
				ТЧСерии.Удалить(ОбрабатываемаяСтрока);
				ОбрабатываемаяСтрока = Неопределено;
			КонецЕсли;
		КонецЕсли;
	Иначе
		
		Выборка = ВыборкаИзЗапросаПоискаСерииПоНомеруКиЗ(ИнформацияПоКиЗ.НомерКиЗ, ВладелецСерии);
		
		Если Выборка.Следующий() Тогда
			Если РеквизитыСерииСовпадаютСИнформациейПоКиЗ(Выборка, ИнформацияПоКиЗ, ЭтоМаркировкаТоваровГИСМ) Тогда
				ОбрабатываемаяСтрока = ТЧСерии.Добавить();
				ЗаполнитьЗначенияСвойств(ОбрабатываемаяСтрока, Выборка);
				ОбрабатываемаяСтрока.Количество         = 1;
				ОбрабатываемаяСтрока.КоличествоУпаковок = 1;
			КонецЕсли;
		Иначе
			ОбрабатываемаяСтрока = ТЧСерии.Добавить();
			ЗаполнитьСтрокуПоИнформацииПоКиЗ(ОбрабатываемаяСтрока, ИнформацияПоКиЗ, НастройкиИспользованияСерий);
			ОбрабатываемаяСтрока.Количество         = 1;
			ОбрабатываемаяСтрока.КоличествоУпаковок = 1;
		КонецЕсли;	
				
	КонецЕсли;
	
	ШтрихкодированиеНоменклатурыКлиентСервер.ЗаполнитьФлагиРаботыСМеткой(ОбрабатываемаяСтрока,
		GTIN, Неопределено, НастройкиИспользованияСерий, ЭтоМаркировкаПерсонифицированнымиКиЗ);
	
	Возврат ОбрабатываемаяСтрока;
	
КонецФункции

// Добавляет строку серии по информации по метке в табличную часть.
//
// Параметры:
//  ТекущаяМетка - Структура - структура данных метки.
//  Параметры - Структура - структура параметров выполнения операции.
//  ТЧСерии - ТабличнаяЧасть - табличная часть серий.
//  ИдентификаторТекущейСтроки - УникальныйИдентификатор - уникальный идентификатор текущей строки.
//
// Возвращаемое значение:
//  СтрокаТаблицыЗначений - добавляемая строка таблицы значений.
//
Функция НоваяСерияПоИнформацииОМетке(ТекущаяМетка, Параметры, ТЧСерии, ИдентификаторТекущейСтроки) Экспорт
	
	НастройкиИспользованияСерий = Параметры.НастройкиИспользованияСерий;
	ВидНоменклатуры             = Параметры.ВидНоменклатуры;
	ВладелецСерии               = Параметры.ВладелецСерии;
	
	Если Не ЗначениеЗаполнено(ТекущаяМетка.TID) Тогда
		ТекстСообщения = НСтр("ru = 'Ошибка добавления серии по информации о RFID-метке: не заполнен TID.'");
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
		Возврат Неопределено;
	ИначеЕсли Не НастройкиИспользованияСерий.ИспользоватьRFIDМеткиСерии Тогда
		ТекстСообщения = НСтр("ru = 'Ошибка добавления серии по информации о RFID-метке: для серий этого вида номенклатуры не используются метки.'");
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
		Возврат Неопределено;
	КонецЕсли;
	
	НайденныеСтроки = ТЧСерии.НайтиСтроки(Новый Структура("RFIDTID", ТекущаяМетка.TID));
		
	ОбрабатываемаяСтрока = Неопределено;
	
	Если ИдентификаторТекущейСтроки <> Неопределено Тогда
		ТекущаяСтрока = ТЧСерии.НайтиПоИдентификатору(ИдентификаторТекущейСтроки);
	Иначе
		ТекущаяСтрока = Неопределено;
	КонецЕсли;
	
	//Для случая, когда информации о КиЗ в системе нет, поэтому мы считываем RFID и сканером номер КиЗ
	Если НайденныеСтроки.Количество() = 0
		И ТекущаяСтрока <> Неопределено
		И Не ЗначениеЗаполнено(ТекущаяСтрока.RFIDTID)
		И (Не ЗначениеЗаполнено(ТекущаяСтрока.Номер)
			Или Не НастройкиИспользованияСерий.ИспользоватьНомерСерии 
			Или ТекущаяСтрока.Номер = ТекущаяМетка.СерийныйНомер) Тогда
		
		ОбрабатываемаяСтрока = ТекущаяСтрока;
		ОбрабатываемаяСтрока.RFIDTID = ТекущаяМетка.TID;
		Если ЗначениеЗаполнено(ТекущаяМетка.GTIN)
			И Не ЗначениеЗаполнено(ОбрабатываемаяСтрока.EPCGTIN) Тогда
			ОбрабатываемаяСтрока.EPCGTIN = СтроковыеФункцииКлиентСервер.УдалитьПовторяющиесяСимволы(ТекущаяМетка.GTIN, "0");
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ТекущаяМетка.СерийныйНомер)
			И Не ЗначениеЗаполнено(ОбрабатываемаяСтрока.Номер) Тогда
			ОбрабатываемаяСтрока.Номер = ТекущаяМетка.СерийныйНомер;
		КонецЕсли;
		
		Возврат ОбрабатываемаяСтрока;	
	
	ИначеЕсли НайденныеСтроки.Количество() > 0 Тогда
		ОбрабатываемаяСтрока = НайденныеСтроки[0];
		
		Возврат ОбрабатываемаяСтрока;
	Иначе
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	СерииНоменклатуры.Ссылка КАК Серия,
		|	СерииНоменклатуры.Номер КАК Номер,
		|	СерииНоменклатуры.НомерКиЗГИСМ КАК НомерКиЗГИСМ,
		|	СерииНоменклатуры.RFIDTID КАК RFIDTID,
		|	СерииНоменклатуры.RFIDUser КАК RFIDUser,
		|	СерииНоменклатуры.RFIDEPC КАК RFIDEPC,
		|	СерииНоменклатуры.EPCGTIN КАК EPCGTIN,
		|	СерииНоменклатуры.ГоденДо КАК  ГоденДо
		|ИЗ
		|	Справочник.СерииНоменклатуры КАК СерииНоменклатуры
		|ГДЕ
		|	СерииНоменклатуры.ВладелецСерии = &ВладелецСерии
		|	И СерииНоменклатуры.RFIDTID = &TID";
		
		Запрос.УстановитьПараметр("TID", ТекущаяМетка.TID);
		Запрос.УстановитьПараметр("ВладелецСерии", ВладелецСерии);
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Если Выборка.Следующий() Тогда
			ОбрабатываемаяСтрока = ТЧСерии.Добавить();
			ЗаполнитьЗначенияСвойств(ОбрабатываемаяСтрока, Выборка);
			ОбрабатываемаяСтрока.Количество         = 1;
			ОбрабатываемаяСтрока.КоличествоУпаковок = 1;
		Иначе
			ОбрабатываемаяСтрока = ТЧСерии.Добавить();
			ОбрабатываемаяСтрока.RFIDTID = ТекущаяМетка.TID;
			
			Если ЗначениеЗаполнено(ТекущаяМетка.GTIN) Тогда
				ОбрабатываемаяСтрока.EPCGTIN = СтроковыеФункцииКлиентСервер.УдалитьПовторяющиесяСимволы(ТекущаяМетка.GTIN, "0");
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ТекущаяМетка.СерийныйНомер)
				И  НастройкиИспользованияСерий.ИспользоватьНомерСерии Тогда
				ОбрабатываемаяСтрока.Номер = ТекущаяМетка.СерийныйНомер;
			КонецЕсли;
		КонецЕсли;	
				
	КонецЕсли;
		
	Возврат ОбрабатываемаяСтрока;
	
КонецФункции

// Заполняет строку табличной части по информации по КиЗ.
//
// Параметры:
//  Строка - СтрокаТабличнойЧасти - строка табличной части для заполнения.
//  ИнформацияПоКиЗ - Структура - структура данных по КиЗ.
//  НастройкиИспользованияСерий - Структура -структура параметров настроек использования серий в конфигурации.
//
Процедура ЗаполнитьСтрокуПоИнформацииПоКиЗ(Строка, ИнформацияПоКиЗ, НастройкиИспользованияСерий)
	Строка.НомерКИЗГИСМ = ИнформацияПоКиЗ.НомерКиЗ;
		
	Если НастройкиИспользованияСерий.ИспользоватьRFIDМеткиСерии Тогда
		Если ЗначениеЗаполнено(ИнформацияПоКиЗ.RFIDTID) Тогда
			Строка.RFIDTID = ИнформацияПоКиЗ.RFIDTID;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ИнформацияПоКиЗ.RFIDEPC) Тогда
			Строка.RFIDEPC = ИнформацияПоКиЗ.RFIDEPC;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ИнформацияПоКиЗ.GTIN) Тогда
			Строка.EPCGTIN = ИнформацияПоКиЗ.GTIN;
		КонецЕсли;
	КонецЕсли;
	
	Если НастройкиИспользованияСерий.ИспользоватьНомерСерии 
		И ЗначениеЗаполнено(ИнформацияПоКиЗ.СерийныйНомер) Тогда
		Строка.Номер = ИнформацияПоКиЗ.СерийныйНомер;
	КонецЕсли;
	
	Если Строка.Количество = 0 Тогда
		Строка.Количество = 1;
	КонецЕсли;
	
	Если Строка.КоличествоУпаковок = 0 Тогда
		Строка.КоличествоУпаковок = 1;
	КонецЕсли;
	
КонецПроцедуры

// Возвращает выборку из запроса поиска серии по номеру КиЗ.
//
// Параметры:
//  НомерКиЗ - Число - номер КиЗ.
//  ВидНоменклатуры - СправочникСсылка.ВидыНоменклатуры - вид номенклатуры.
//
// Возвращаемое значение:
//  ВыборкаИзРезультатаЗапроса - выборка из результата запроса.
//
Функция ВыборкаИзЗапросаПоискаСерииПоНомеруКиЗ(НомерКиЗ, ВладелецСерии)
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СерииНоменклатуры.Ссылка КАК Серия,
	|	СерииНоменклатуры.Номер КАК Номер,
	|	СерииНоменклатуры.НомерКиЗГИСМ КАК НомерКиЗГИСМ,
	|	СерииНоменклатуры.RFIDTID КАК RFIDTID,
	|	СерииНоменклатуры.RFIDUser КАК RFIDUser,
	|	СерииНоменклатуры.RFIDEPC КАК RFIDEPC,
	|	СерииНоменклатуры.EPCGTIN КАК EPCGTIN,
	|	СерииНоменклатуры.ГоденДо КАК  ГоденДо
	|ИЗ
	|	Справочник.СерииНоменклатуры КАК СерииНоменклатуры
	|ГДЕ
	|	СерииНоменклатуры.ВладелецСерии = &ВладелецСерии
	|	И СерииНоменклатуры.НомерКиЗГИСМ = &НомерКиЗГИСМ";
	
	Запрос.УстановитьПараметр("НомерКиЗГИСМ", НомерКиЗ);
	Запрос.УстановитьПараметр("ВладелецСерии", ВладелецСерии);
	
	Возврат Запрос.Выполнить().Выбрать();
КонецФункции

// Проверяет идентичность реквизитов серии и информации по КиЗ.
//
// Параметры:
//  РеквизитыСерии - Структура - данные реквизитов серии.
//  ИнформацияПоКиЗ - Структура - данные информации по КиЗ.
//  ЭтоМаркировкаТоваровГИСМ - Булево - признак маркировки ГИСМ,
//
// Возвращаемое значение:
//  Булево - результат сравнения данных.
//
Функция РеквизитыСерииСовпадаютСИнформациейПоКиЗ(РеквизитыСерии, ИнформацияПоКиЗ, ЭтоМаркировкаТоваровГИСМ)
	
	Если ЭтоМаркировкаТоваровГИСМ
        И (РеквизитыСерии.RFIDTID <> ИнформацияПоКиЗ.RFIDTID 
		Или (ЗначениеЗаполнено(ИнформацияПоКиЗ.GTIN) 
			И РеквизитыСерии.EPCGTIN <> ИнформацияПоКиЗ.GTIN)
		Или (ЗначениеЗаполнено(ИнформацияПоКиЗ.СерийныйНомер)
		    И СтрЧислоВхождений(ИнформацияПоКиЗ.СерийныйНомер, "0") <> СтрДлина(ИнформацияПоКиЗ.СерийныйНомер)
			И РеквизитыСерии.Номер <> ИнформацияПоКиЗ.СерийныйНомер)) Тогда
		ТекстСообщения = НСтр("ru = 'Информация о КиЗ с номером %НомерКиЗ% предоставленная эмитентом не соответствует информации, сохраненной в серии. Этот КиЗ не может быть использован для маркировки.'");	
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%НомерКиЗ%", ИнформацияПоКиЗ.НомерКиЗ); 
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);	
		Возврат Ложь;
	КонецЕсли;

	Возврат Истина;
	
КонецФункции

// Возвращает описание типов по переданному типу.
// 
// Параметры:
//  Тип - Тип - тип значения.
//
// Возвращаемое значение:
//  ОписаниеТипов - созданное на основании переданного типа описание типов.
//
Функция ОписаниеТиповПоТипу(Тип) Экспорт
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип);
	
	ОписаниеТипов = Новый ОписаниеТипов(МассивТипов);
	
	Возврат ОписаниеТипов;
КонецФункции

// СтандартныеПодсистемы.УправлениеДоступом

// Позволяет переопределить ограничение, указанное в модуле менеджера объекта метаданных.
//
// Параметры:
//  Менеджер - ОбъектМетаданных - список, для которого нужно вернуть текст ограничения.
//                                В процедуре ПриЗаполненииСписковСОграничениемДоступа нужно
//                                указать для списка значение Ложь, иначе вызова не будет.
//
//  Ограничение - Структура - со свойствами, как для процедур в модулях менеджеров. См. свойства
//                            в комментарии к процедуре ПриЗаполненииСписковСОграничениемДоступа.
//
Процедура ПриЗаполненииОграниченияДоступа(Менеджер, Ограничение) Экспорт

	
	Если Менеджер = "РегистрСведений.ФискальныеОперации" Тогда
		Ограничение.Текст =
		"РазрешитьЧтениеИзменение
		|ГДЕ
		|	ЗначениеРазрешено(ТорговыйОбъект)";
	КонецЕсли;

КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

#Область Поддержка54ФЗ

// Возвращает параметры платежного договора
// 
// Параметры:
//  ПлатежныйДоговор - ДокументОбъект - документ по которому необходимо получить параметры платежного договора.
//  СуммаДокумента - Число - сумма документа.
// 
// Возвращаемое значение:
//  Структура - реквизиты платежного договора.
//
Функция ПараметрыПлатежногоДоговора(ПлатежныйДоговор, СуммаДокумента) Экспорт
	
	Если НЕ ЗначениеЗаполнено(ПлатежныйДоговор) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	СтруктураРеквизитов = Новый Структура;
	СтруктураРеквизитов.Вставить("Агент");
	СтруктураРеквизитов.Вставить("ПроцентКомиссионногоВознаграждения");
	СтруктураРеквизитов.Вставить("АдресОператораПеревода");
	СтруктураРеквизитов.Вставить("ИННОператораПеревода");
	СтруктураРеквизитов.Вставить("НаименованиеОператораПеревода");
	СтруктураРеквизитов.Вставить("ОперацияПлатежногоАгента");
	СтруктураРеквизитов.Вставить("ПризнакАгента");
	СтруктураРеквизитов.Вставить("ТелефонПлатежногоАгента");
	СтруктураРеквизитов.Вставить("ТелефонОператораПоПриемуПлатежей");
	СтруктураРеквизитов.Вставить("ТелефонОператораПеревода");
	СтруктураРеквизитов.Вставить("ТелефонПоставщика");
	СтруктураРеквизитов.Вставить("ПризнакАгента");
	СтруктураРеквизитов.Вставить("ИННПоставщикаУслуг");
	
	РеквизитыПлатежногоДоговора = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ПлатежныйДоговор, СтруктураРеквизитов);
	
	Если ЗначениеЗаполнено(РеквизитыПлатежногоДоговора.Агент) И НЕ ЗначениеЗаполнено(РеквизитыПлатежногоДоговора.ИННПоставщикаУслуг) Тогда
		РеквизитыПлатежногоДоговора.ИННПоставщикаУслуг = ОбщегоНазначенияРТ.ПолучитьИННКонтрагента(РеквизитыПлатежногоДоговора.Агент);
	КонецЕсли;
	
	ВознагражденияАгента = СуммаДокумента / 100 * РеквизитыПлатежногоДоговора.ПроцентКомиссионногоВознаграждения;
	РеквизитыПлатежногоДоговора.Вставить("ВознагражденияАгента", ВознагражденияАгента);
	
	Возврат РеквизитыПлатежногоДоговора;
	
КонецФункции

// Возвращает ставку НДС в формате БПО
//
//  Параметры:
//   СтавкаНДС - Перечисление.СтавкиНДС - ставка НДС в формате конфигурации.
//   ЭтоАванс - Булево - признак аванса.
//  
// ВозвращаемоеЗначение:
//  Неопределено, Перечисление.СтавкиНДС - значение ставки НДС.
//
Функция СтавкаНДСВФорматеБПО(СтавкаНДС, ЭтоАванс = Ложь) Экспорт
		
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтавкаНДС, "Ставка");
	
КонецФункции // СтавкаНДСВФорматеБПО()

// Заполняет данные платежного договора из базы данных.
//
// Параметры:
//  ОбщиеПараметры - Структура - параметры платежного договора.
//  ДоговорКонтрагента - СправочникСсылка.ДоговорыКонтрагентов - договор платежного агента для заполнения.
//  СуммаДокумента - Число - сумма документа.
//
Процедура ЗаполнитьПараметрыПлатежногоДоговора(ОбщиеПараметры, ДоговорКонтрагента, СуммаДокумента) Экспорт
	
	РеквизитыПлатежногоДоговора = ПодключаемоеОборудованиеРТ.ПараметрыПлатежногоДоговора(ДоговорКонтрагента, 
																						 СуммаДокумента);
	
	Если ЗначениеЗаполнено(РеквизитыПлатежногоДоговора) Тогда
		
		ОбщиеПараметры.ПризнакАгента = РеквизитыПлатежногоДоговора.ПризнакАгента;
		
		ОбщиеПараметры.ДанныеАгента.ПлатежныйАгент.Операция = РеквизитыПлатежногоДоговора.ОперацияПлатежногоАгента;
		ОбщиеПараметры.ДанныеАгента.ПлатежныйАгент.Телефон  = РеквизитыПлатежногоДоговора.ТелефонПлатежногоАгента;
		
		ОбщиеПараметры.ДанныеАгента.ОператорПеревода.Телефон      = РеквизитыПлатежногоДоговора.ТелефонОператораПеревода;
		ОбщиеПараметры.ДанныеАгента.ОператорПеревода.Наименование = РеквизитыПлатежногоДоговора.НаименованиеОператораПеревода;
		ОбщиеПараметры.ДанныеАгента.ОператорПеревода.Адрес        = РеквизитыПлатежногоДоговора.АдресОператораПеревода;
		ОбщиеПараметры.ДанныеАгента.ОператорПеревода.ИНН          = РеквизитыПлатежногоДоговора.ИННОператораПеревода;
		
		ОбщиеПараметры.ДанныеАгента.ОператорПоПриемуПлатежей.Телефон = РеквизитыПлатежногоДоговора.ТелефонОператораПоПриемуПлатежей;
		
		ОбщиеПараметры.ДанныеПоставщика.Телефон      = РеквизитыПлатежногоДоговора.ТелефонПоставщика;
		ОбщиеПараметры.ДанныеПоставщика.Наименование = Строка(РеквизитыПлатежногоДоговора.Агент);
		ОбщиеПараметры.ДанныеПоставщика.ИНН          = РеквизитыПлатежногоДоговора.ИННПоставщикаУслуг;
	КонецЕсли;
	
КонецПроцедуры

// Заполняет данные платежного договора строки чека на основании шапке
//
// Параметры:
//  ОбщиеПараметры - Структура - см. ОборудованиеЧекопечатающиеУстройстваКлиентСервер.ПараметрыОперацииФискализацииЧека()
//  ПозицияЧека - Структура - см функцию БПО ОборудованиеЧекопечатающиеУстройстваКлиентСервер.ПараметрыФискальнойСтрокиЧека()
//
Процедура ЗаполнитьПараметрыПлатежногоДоговораВСтроке(ОбщиеПараметры, ПозицияЧека, СтрокаТовары = Неопределено) Экспорт
	
	ПараметрыПлатежногоДоговора = Неопределено;
	Если ЗначениеЗаполнено(ОбщиеПараметры.ПризнакАгента) Тогда
		// Договор в шапке.
		ПараметрыПлатежногоДоговора = ОбщиеПараметры;
	ИначеЕсли НЕ СтрокаТовары = Неопределено И ЗначениеЗаполнено(СтрокаТовары.Договор) Тогда
		// Договор в строке.
		ПараметрыПлатежногоДоговора = Новый Структура;
		ПараметрыПлатежногоДоговора.Вставить("ПризнакАгента");
		ПараметрыПлатежногоДоговора.Вставить("ДанныеАгента", МенеджерОборудованияКлиентСервер.ПараметрыДанныеАгента());
		ПараметрыПлатежногоДоговора.Вставить("ДанныеПоставщика", МенеджерОборудованияКлиентСервер.ПараметрыДанныеПоставщика());
		
		ЗаполнитьПараметрыПлатежногоДоговора(ПараметрыПлатежногоДоговора, СтрокаТовары.Договор, СтрокаТовары.Сумма);
		
	КонецЕсли;
	
	Если ПараметрыПлатежногоДоговора = Неопределено Тогда
		Возврат;
	ИначеЕсли ПараметрыПлатежногоДоговора.ПризнакАгента = Перечисления.ПризнакиАгента.Комиссионер Тогда
		Возврат;
	КонецЕсли;
	
	ПозицияЧека.ПризнакАгентаПоПредметуРасчета = ПараметрыПлатежногоДоговора.ПризнакАгента;
		
	ПозицияЧека.ДанныеАгента.ПлатежныйАгент.Операция = ПараметрыПлатежногоДоговора.ДанныеАгента.ПлатежныйАгент.Операция;
	ПозицияЧека.ДанныеАгента.ПлатежныйАгент.Телефон  = ПараметрыПлатежногоДоговора.ДанныеАгента.ПлатежныйАгент.Телефон;
	
	ПозицияЧека.ДанныеАгента.ОператорПеревода.Телефон      = ПараметрыПлатежногоДоговора.ДанныеАгента.ОператорПеревода.Телефон;
	ПозицияЧека.ДанныеАгента.ОператорПеревода.Наименование = ПараметрыПлатежногоДоговора.ДанныеАгента.ОператорПеревода.Наименование;
	ПозицияЧека.ДанныеАгента.ОператорПеревода.Адрес        = ПараметрыПлатежногоДоговора.ДанныеАгента.ОператорПеревода.Адрес;
	ПозицияЧека.ДанныеАгента.ОператорПеревода.ИНН          = ПараметрыПлатежногоДоговора.ДанныеАгента.ОператорПеревода.ИНН;
	
	ПозицияЧека.ДанныеАгента.ОператорПоПриемуПлатежей.Телефон = ПараметрыПлатежногоДоговора.ДанныеАгента.ОператорПоПриемуПлатежей.Телефон;
	
	ПозицияЧека.ДанныеПоставщика.Телефон      = ПараметрыПлатежногоДоговора.ДанныеПоставщика.Телефон;
	ПозицияЧека.ДанныеПоставщика.Наименование = ПараметрыПлатежногоДоговора.ДанныеПоставщика.Наименование;
	ПозицияЧека.ДанныеПоставщика.ИНН          = ПараметрыПлатежногоДоговора.ДанныеПоставщика.ИНН;  
	
КонецПроцедуры

// Заполняет позиции чека для передачи данных для фискализации данных.
//
//  Параметры:
//   ДокументСсылка - ДокументСсылка.РеализацияТоваров,
//                    ДокументСсылка.ЗаказПокупателя, 
//                    ДокументСсылка.ЧекККМ - документ для заполнения позиций.
//   ПараметрыДокумента - Структура - структура ранее определенных полей (тегов).
//   ОбщиеПараметры - Структура - см. ОборудованиеЧекопечатающиеУстройстваКлиентСервер.ПараметрыОперацииФискализацииЧека().
//   СуммаДокументовРасчетов - Число - сумма по подготовленным строкам.
//   ЭтоВыплата - Булево - признак того, что операция является выплатой.
//
Процедура ДобавитьСтрокиДляФискализацииТоваров(ДокументСсылка, 
											ПараметрыДокумента, 
											ОбщиеПараметры, 
											СуммаДокументовРасчетов,
											ЭтоВыплата = Истина) Экспорт
	
	ИспользуетсяКомиссионнаяТорговля  = ПолучитьФункциональнуюОпцию("ИспользоватьКомиссионнуюТорговлю");
	ИспользуетсяУчетИмпортныхТоваров  = ПолучитьФункциональнуюОпцию("ИспользоватьУчетИмпортныхТоваров");
	ВестиУчетМаркируемойПродукцииИСМП = ИнтеграцияИСМПКлиентСерверПовтИсп.ВестиУчетМаркируемойПродукции();
	
	ТипДокумента = ТипЗнч(ДокументСсылка);
	
	Запрос = Новый Запрос;
	
	Если ТипЗнч(ДокументСсылка) <> Тип("ДокументСсылка.ЗаказПокупателя")
		И (ИспользуетсяУчетИмпортныхТоваров 
		Или ИспользуетсяКомиссионнаяТорговля) Тогда
		ИспользуютсяРегистрОстатков = Истина;
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	ВЫРАЗИТЬ(Товары.Номенклатура КАК Справочник.Номенклатура) КАК Номенклатура,
		|	ВЫРАЗИТЬ(Товары.Характеристика КАК Справочник.ХарактеристикиНоменклатуры) КАК Характеристика,
		|	ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка) КАК Поставщик,
		|	ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка) КАК Договор,
		|	ЗНАЧЕНИЕ(Справочник.НомераГТД.ПустаяСсылка) КАК НомерГТД,
		|	Товары.НомерСтроки КАК НомерСтроки,
		|	Товары.Количество КАК Количество,
		|	Товары.КоличествоУпаковок КАК КоличествоУпаковок,
		|	ВЫРАЗИТЬ(Товары.Упаковка КАК Справочник.УпаковкиНоменклатуры) КАК Упаковка,
		|	Товары.Цена КАК Цена,
		|	Товары.Сумма КАК Сумма,
		|	Товары.СтавкаНДС КАК СтавкаНДС,
		|	Товары.СуммаНДС КАК СуммаНДС,
		|	Товары.СуммаАвтоматическойСкидки КАК СуммаАвтоматическойСкидки,
		|	Товары.СуммаРучнойСкидки КАК СуммаРучнойСкидки,
		|	&Ссылка КАК Ссылка,
		|	Товары.СуммаСкидкиОплатыБонусом КАК СуммаСкидкиОплатыБонусом,
		|	Товары.Штрихкод КАК Штрихкод
		|ПОМЕСТИТЬ ТаблицаТоваров
		|ИЗ
		|	&Товары КАК Товары
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТоварыОрганизаций.Количество КАК Количество,
		|	ТоварыОрганизаций.НомерСтрокиДокумента КАК НомерСтрокиДокумента,
		|	ТоварыОрганизаций.Регистратор КАК Регистратор,
		|	ТоварыОрганизаций.НомерГТД КАК НомерГТД,
		|	ТоварыОрганизаций.Договор КАК Договор,
		|	ТоварыОрганизаций.Поставщик КАК Поставщик
		|ПОМЕСТИТЬ ТоварыОрганизаций
		|ИЗ
		|	РегистрНакопления.ТоварыОрганизаций КАК ТоварыОрганизаций
		|ГДЕ
		|	ТоварыОрганизаций.Регистратор = &Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВЫРАЗИТЬ(ТаблицаТоваров.Номенклатура КАК Справочник.Номенклатура) КАК Номенклатура,
		|	ВЫРАЗИТЬ(ТаблицаТоваров.Характеристика КАК Справочник.ХарактеристикиНоменклатуры) КАК Характеристика,
		|	ЕСТЬNULL(ТаблицаДвижений.Поставщик, ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)) КАК Поставщик,
		|	ЕСТЬNULL(ТаблицаДвижений.Договор, ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)) КАК Договор,
		|	ЕСТЬNULL(ТаблицаДвижений.НомерГТД, ЗНАЧЕНИЕ(Справочник.НомераГТД.ПустаяСсылка)) КАК НомерГТД,
		|	ТаблицаТоваров.НомерСтроки КАК НомерСтроки,
		|	ТаблицаТоваров.КоличествоУпаковок * ВЫБОР
		|		КОГДА ЕСТЬNULL(ТаблицаДвижений.Количество, 0) = 0
		|			ТОГДА 1
		|		ИНАЧЕ ЕСТЬNULL(ТаблицаДвижений.Количество, 0) / ТаблицаТоваров.Количество
		|	КОНЕЦ КАК КоличествоУпаковок,
		|	ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка) КАК Упаковка,
		|	ТаблицаТоваров.Цена КАК Цена,
		|	ТаблицаТоваров.Сумма * ВЫБОР
		|		КОГДА ЕСТЬNULL(ТаблицаДвижений.Количество, 0) = 0
		|			ТОГДА 1
		|		ИНАЧЕ ЕСТЬNULL(ТаблицаДвижений.Количество, 0) / ТаблицаТоваров.Количество
		|	КОНЕЦ КАК Сумма,
		|	ТаблицаТоваров.СтавкаНДС КАК СтавкаНДС,
		|	ТаблицаТоваров.СуммаНДС * ВЫБОР
		|		КОГДА ЕСТЬNULL(ТаблицаДвижений.Количество, 0) = 0
		|			ТОГДА 1
		|		ИНАЧЕ ЕСТЬNULL(ТаблицаДвижений.Количество, 0) / ТаблицаТоваров.Количество
		|	КОНЕЦ КАК СуммаНДС,
		|	ТаблицаТоваров.СуммаАвтоматическойСкидки * ВЫБОР
		|		КОГДА ЕСТЬNULL(ТаблицаДвижений.Количество, 0) = 0
		|			ТОГДА 1
		|		ИНАЧЕ ЕСТЬNULL(ТаблицаДвижений.Количество, 0) / ТаблицаТоваров.Количество
		|	КОНЕЦ КАК СуммаАвтоматическойСкидки,
		|	ТаблицаТоваров.СуммаРучнойСкидки * ВЫБОР
		|		КОГДА ЕСТЬNULL(ТаблицаДвижений.Количество, 0) = 0
		|			ТОГДА 1
		|		ИНАЧЕ ЕСТЬNULL(ТаблицаДвижений.Количество, 0) / ТаблицаТоваров.Количество
		|	КОНЕЦ КАК СуммаРучнойСкидки,
		|	ТаблицаТоваров.СуммаСкидкиОплатыБонусом * ВЫБОР
		|		КОГДА ЕСТЬNULL(ТаблицаДвижений.Количество, 0) = 0
		|			ТОГДА 1
		|		ИНАЧЕ ЕСТЬNULL(ТаблицаДвижений.Количество, 0) / ТаблицаТоваров.Количество
		|	КОНЕЦ КАК СуммаСкидкиОплатыБонусом,
		|	ЕСТЬNULL(ТаблицаДвижений.Количество, ТаблицаТоваров.Количество) КАК Количество,
		|	ТаблицаТоваров.Штрихкод КАК Штрихкод
		|ПОМЕСТИТЬ Товары
		|ИЗ
		|	ТаблицаТоваров КАК ТаблицаТоваров
		|		ЛЕВОЕ СОЕДИНЕНИЕ ТоварыОрганизаций КАК ТаблицаДвижений
		|		ПО ТаблицаТоваров.Ссылка = ТаблицаДвижений.Регистратор
		|			И ТаблицаТоваров.НомерСтроки = ТаблицаДвижений.НомерСтрокиДокумента
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|";
	Иначе
		ИспользуютсяРегистрОстатков = Ложь;
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	ВЫРАЗИТЬ(Товары.Номенклатура КАК Справочник.Номенклатура) КАК Номенклатура,
		|	ВЫРАЗИТЬ(Товары.Характеристика КАК Справочник.ХарактеристикиНоменклатуры) КАК Характеристика,
		|	ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)        КАК Поставщик,
		|	ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка) КАК Договор,
		|	ЗНАЧЕНИЕ(Справочник.НомераГТД.ПустаяСсылка) КАК НомерГТД,
		|	Товары.НомерСтроки КАК НомерСтроки,
		|	Товары.Количество КАК Количество,
		|	Товары.КоличествоУпаковок КАК КоличествоУпаковок,
		|	ВЫРАЗИТЬ(Товары.Упаковка КАК Справочник.УпаковкиНоменклатуры) КАК Упаковка,
		|	Товары.Цена КАК Цена,
		|	Товары.Сумма КАК Сумма,
		|	Товары.СтавкаНДС КАК СтавкаНДС,
		|	Товары.СуммаНДС КАК СуммаНДС,
		|	Товары.СуммаАвтоматическойСкидки КАК СуммаАвтоматическойСкидки,
		|	Товары.СуммаРучнойСкидки КАК СуммаРучнойСкидки,
		|	Товары.СуммаСкидкиОплатыБонусом КАК СуммаСкидкиОплатыБонусом,
		|	Товары.Штрихкод КАК Штрихкод
		|ПОМЕСТИТЬ Товары
		|ИЗ
		|	&Товары КАК Товары
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|";
	КонецЕсли; 
	
	
	ТекстЗапроса = ТекстЗапроса + 
		"ВЫБРАТЬ
		|	Товары.НомерСтроки КАК НомерСтрокиТовара,
		|	Товары.Номенклатура КАК Номенклатура,
		|	Товары.Характеристика КАК Характеристика,
		|	ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка) КАК Серия,
		|	Товары.Упаковка КАК Упаковка,
		|	Товары.Поставщик КАК Поставщик,
		|	Товары.Договор КАК Договор,
		|	Товары.НомерГТД КАК НомерГТД,
		|	Товары.Количество КАК Количество,
		|	Товары.КоличествоУпаковок КАК КоличествоУпаковок,
		|	Товары.Цена КАК Цена,
		|	Товары.Сумма КАК Сумма,
		|	Товары.СуммаАвтоматическойСкидки + Товары.СуммаРучнойСкидки + Товары.СуммаСкидкиОплатыБонусом КАК СуммаСкидок,
		|	Товары.СтавкаНДС КАК СтавкаНДС,
		|	Товары.СуммаНДС КАК СуммаНДС,
		|	ВЫБОР
		|		КОГДА Товары.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка)
		|			ТОГДА Товары.Номенклатура.ЕдиницаИзмерения.Наименование
		|		ИНАЧЕ Товары.Упаковка.Наименование
		|	КОНЕЦ КАК ЕдиницаИзмеренияПредметаРасчета,
		|	ВЫБОР
		|		КОГДА Товары.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка)
		|			ТОГДА Товары.Номенклатура.ЕдиницаИзмерения.Код
		|		ИНАЧЕ Товары.Упаковка.ЕдиницаИзмерения.Код
		|	КОНЕЦ КАК КодЕдиницыИзмерения,
		|	ВЫБОР
		|		КОГДА Товары.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка)
		|			ТОГДА ПРЕДСТАВЛЕНИЕ(Товары.Номенклатура.ЕдиницаИзмерения)
		|		ИНАЧЕ ПРЕДСТАВЛЕНИЕ(Товары.Упаковка.ЕдиницаИзмерения)
		|	КОНЕЦ КАК НаименованиеЕдиницыИзмерения,
		|	Товары.Номенклатура.ДоговорКонтрагента КАК ДоговорКонтрагента,
		|	Товары.Номенклатура.ВидНоменклатуры.ПризнакПредметаРасчета.ТипПризнакаПредметаРасчета КАК ПризнакПредметаРасчета,
		|	Товары.Номенклатура.Наименование КАК ТоварНаименование,
		|	&ОпределениеВидаПродукции КАК ВидПродукцииИС,
		|	&УсловиеОсобенностьУчета КАК МаркируемаяПродукция,
		|	СправочникНоменклатура.ТипНоменклатуры КАК ТипНоменклатуры,
		|	ДоговорыКонтрагентов.ПризнакАгента КАК ПризнакАгента,
		|	ДоговорыКонтрагентов.ТелефонПоставщика КАК ТелефонПоставщика,
		|	ДоговорыКонтрагентов.ИННПоставщикаУслуг КАК ИННПоставщикаУслуг,
		|	Контрагенты.Наименование КАК ПоставщикНаименование,
		|	Товары.Штрихкод КАК Штрихкод
		|ИЗ
		|	Товары КАК Товары
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
		|		ПО Товары.Номенклатура = СправочникНоменклатура.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
		|		ПО Товары.Договор = ДоговорыКонтрагентов.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Контрагенты КАК Контрагенты
		|		ПО Товары.Поставщик = Контрагенты.Ссылка";
	
	ТаблицаТовары = ДокументСсылка.Товары.Выгрузить();
	Если ТаблицаТовары.Колонки.Найти("СуммаАвтоматическойСкидки") = Неопределено Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
		"Товары.СуммаАвтоматическойСкидки КАК СуммаАвтоматическойСкидки,",
		"0 КАК СуммаАвтоматическойСкидки,");
	КонецЕсли;
	
	Если ТаблицаТовары.Колонки.Найти("СуммаРучнойСкидки") = Неопределено Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
		"Товары.СуммаРучнойСкидки КАК СуммаРучнойСкидки,",
		"0 КАК СуммаРучнойСкидки,");
	КонецЕсли;
	
	Если ТаблицаТовары.Колонки.Найти("СуммаСкидкиОплатыБонусом") = Неопределено Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
		"Товары.СуммаСкидкиОплатыБонусом КАК СуммаСкидкиОплатыБонусом,",
		"0 КАК СуммаСкидкиОплатыБонусом,");
	КонецЕсли;
	
	Если ТаблицаТовары.Колонки.Найти("Штрихкод") = Неопределено Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
		"Товары.Штрихкод КАК Штрихкод",
		""""" КАК Штрихкод");
	КонецЕсли;
	
	ИнтеграцияИСРТ.ОпределитьВидПродукцииТекстаЗапроса(ТекстЗапроса, "СправочникНоменклатура");
	ИнтеграцияИСРТ.ОпределитьОсобенностиУчетаТекстаЗапроса(ТекстЗапроса, "СправочникНоменклатура");
	
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("Товары", ТаблицаТовары);
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	
	ТаблицаТоваровЧека  = Запрос.Выполнить().Выгрузить();
	ТаблицаТоваровЧека.Колонки.Добавить("РезультатРаспределенияШтрихкодов");
	
	НомерСтроки = 0;
	
	Если ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.ВозвратТоваровОтПокупателя")
		И ВестиУчетМаркируемойПродукцииИСМП Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ШтрихкодыУпаковок.ШтрихкодУпаковки КАК ШтрихкодУпаковки,
		|	ШтрихкодыУпаковок.ЧастичноеВыбытиеКоличество КАК ЧастичноеВыбытиеКоличество,
		|	ШтрихкодыУпаковок.ЧастичноеВыбытиеВариантУчета КАК ЧастичноеВыбытиеВариантУчета,
		|	ШтрихкодыУпаковок.ЧастичноеВыбытиеНоменклатура КАК ЧастичноеВыбытиеНоменклатура,
		|	ШтрихкодыУпаковок.ЧастичноеВыбытиеХарактеристика КАК ЧастичноеВыбытиеХарактеристика,
		|	ШтрихкодыУпаковок.РазрешительныйРежимИдентификаторЗапросаГИСМТ КАК РазрешительныйРежимИдентификаторЗапросаГИСМТ,
		|	ШтрихкодыУпаковок.РазрешительныйРежимДатаЗапросаГИСМТ КАК РазрешительныйРежимДатаЗапросаГИСМТ
		|ИЗ
		|	Документ.ВозвратТоваровОтПокупателя.ШтрихкодыУпаковок КАК ШтрихкодыУпаковок
		|ГДЕ
		|	ШтрихкодыУпаковок.Ссылка = &Ссылка";
		
		Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
		
		ВыборкаИзРезультатаПоШтрихкодам = Запрос.Выполнить().Выбрать();
		
		ШтрихкодыУпаковок = Новый Массив;
		Пока ВыборкаИзРезультатаПоШтрихкодам.Следующий() Цикл
			НовыйЭлемент = ШтрихкодированиеИС.НовыйЭлементКоллекцииУпаковокДляРаспределенияПоТоварам();
			ЗаполнитьЗначенияСвойств(НовыйЭлемент, ВыборкаИзРезультатаПоШтрихкодам);
			
			ШтрихкодыУпаковок.Добавить(НовыйЭлемент);
		КонецЦикла;
		
		ДокументОбъект = ДокументСсылка.ПолучитьОбъект();
		
		Если ТипЗнч(ШтрихкодыУпаковок) = Тип("Массив") И ШтрихкодыУпаковок.Количество() > 0 Тогда
			ТаблицаТоваровЧека = ПродажиСервер.РаспределитьШтрихкодыПоТаблицеТоваров(ДокументОбъект, ШтрихкодыУпаковок, ТаблицаТоваровЧека);
		КонецЕсли;
		
	КонецЕсли;
	
	КэшСНО = Новый Соответствие;
	Для Каждого СтрокаТовары Из ТаблицаТоваровЧека Цикл
		
		СтрокаПозицииЧека = МенеджерОборудованияКлиентСервер.ПараметрыФискальнойСтрокиЧека(); 
		ЗаполнитьЗначенияСвойств(СтрокаПозицииЧека, СтрокаТовары);
		ЗаполнитьЗначенияСвойств(СтрокаПозицииЧека, ПараметрыДокумента);
		НомерСтроки = НомерСтроки + 1;
		СтрокаПозицииЧека.НомерСтрокиТовара = НомерСтроки;
		
		Если ЭтоВыплата Тогда
			СтрокаПозицииЧека.ПризнакПредметаРасчета = Перечисления.ПризнакиПредметаРасчета.ПлатежВыплата;
		КонецЕсли;
		
		СуммаДокументовРасчетов = СуммаДокументовРасчетов + СтрокаТовары.Сумма;
		
		СтрокаПозицииЧека.Наименование = ФормированиеПечатныхФормСервер.ПолучитьПредставлениеНоменклатурыДляПечати(
		СтрокаТовары.ТоварНаименование,
		СтрокаТовары.Характеристика);
		
		ПризнакСпособаРасчета = ПараметрыДокумента.ПризнакСпособаРасчета;
		
		Если ПризнакСпособаРасчета = Перечисления.ПризнакиСпособаРасчета.Аванс
			ИЛИ ПризнакСпособаРасчета = Перечисления.ПризнакиСпособаРасчета.ПредоплатаПолная
			ИЛИ ПризнакСпособаРасчета = Перечисления.ПризнакиСпособаРасчета.ПредоплатаЧастичная Тогда
			ЭтоАванс = Истина;
		Иначе
			ЭтоАванс = Ложь;
		КонецЕсли;
		
		СтрокаПозицииЧека.СтавкаНДС = СтавкаНДСВФорматеБПО(СтрокаТовары.СтавкаНДС, ЭтоАванс);
		
		СтрокаПозицииЧека.ОсвобожденныйОборотНДС = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрокаТовары.СтавкаНДС, "ДляОсвобожденногоОборота");
		
		ЗаполнитьПараметрыПлатежногоДоговораВСтроке(ОбщиеПараметры, СтрокаПозицииЧека);
		
		Если ИспользуетсяКомиссионнаяТорговля Тогда
			Если СтрокаТовары.ТипНоменклатуры <> Перечисления.ТипыНоменклатуры.Услуга Тогда
				Если ЗначениеЗаполнено(СтрокаТовары.Договор) Тогда
					Если СтрокаТовары.ПризнакАгента = Перечисления.ПризнакиАгента.Комиссионер Тогда
						СтрокаПозицииЧека.ПризнакАгентаПоПредметуРасчета      = Перечисления.ПризнакиАгента.Комиссионер;
						СтрокаПозицииЧека.ДанныеАгента.ПлатежныйАгент.Телефон = СтрокаТовары.ТелефонПоставщика;
						СтрокаПозицииЧека.ДанныеПоставщика.ИНН                = СтрокаТовары.ИННПоставщикаУслуг;
						СтрокаПозицииЧека.ДанныеПоставщика.Телефон            = СтрокаТовары.ТелефонПоставщика;
						СтрокаПозицииЧека.ДанныеПоставщика.Наименование       = СтрокаТовары.ПоставщикНаименование;
						
						УчетНДСУКомитента = ПодключаемоеОборудованиеРТ.КэшируемыеСНО(СтрокаТовары.Договор, КэшСНО);
							ПодключаемоеОборудованиеРТ.ПерезаполнитьНДСКомитента(СтрокаПозицииЧека,
							СтрокаТовары.Номенклатура,
							УчетНДСУКомитента,
							ЭтоАванс);
						
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Если ИспользуетсяУчетИмпортныхТоваров Тогда
			СтрокаПозицииЧека.КодСтраныПроисхожденияТовара = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрокаТовары.НомерГТД.СтранаПроисхождения, "Код");
			СтрокаПозицииЧека.НомерТаможеннойДекларации    = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрокаТовары.НомерГТД, "Код");
		КонецЕсли;
		
		СтрокаПозицииЧека.Вставить("РезультатРаспределенияШтрихкодов");
		Если ЗначениеЗаполнено(СтрокаТовары.Штрихкод) Тогда
			
			Штрихкод = СтрокаТовары.Штрихкод;
			
			Если РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйКлиентСервер.ПроверитьКорректностьGTIN(Штрихкод) Тогда
				СтрокаПозицииЧека.Штрихкод               = Штрихкод;
			Иначе
				СтрокаПозицииЧека.Штрихкод               = "";
			КонецЕсли;
			
			
			Если СтрокаТовары.МаркируемаяПродукция Тогда
			
				ДанныеРазбора = РазборКодаМаркировкиИССлужебный.РазобратьКодМаркировки(СтрокаТовары.Штрихкод, СтрокаТовары.ВидПродукцииИС);
				ТипМаркировкиККТ = ИнтеграцияИСКлиентСервер.ТипМаркировкиККТПоВидуПродукции(СтрокаТовары.ВидПродукцииИС);
				
				Если НЕ (ДанныеРазбора = Неопределено ИЛИ ТипМаркировкиККТ = Неопределено) Тогда
					// Необходимо указать ТипМаркировки, GTIN, серийный номер для обеспечения совместимости (драйвера стандарта 2.5). 
					СтрокаПозицииЧека.ДанныеКодаТоварнойНоменклатуры.ТипМаркировки                          = ТипМаркировкиККТ;
					СтрокаПозицииЧека.ДанныеКодаТоварнойНоменклатуры.ГлобальныйИдентификаторТорговойЕдиницы = ДанныеРазбора.СоставКодаМаркировки.GTIN;
					СтрокаПозицииЧека.ДанныеКодаТоварнойНоменклатуры.СерийныйНомер                          = ДанныеРазбора.СоставКодаМаркировки.СерийныйНомер;
				КонецЕсли;
			
				Если ЗначениеЗаполнено(СтрокаТовары.РезультатРаспределенияШтрихкодов) Тогда
					СтрокаПозицииЧека.РезультатРаспределенияШтрихкодов = СтрокаТовары.РезультатРаспределенияШтрихкодов;
					
					ПолныйКодМаркировки = СтрокаТовары.РезультатРаспределенияШтрихкодов.ПолныйКодМаркировки;
					Если ЗначениеЗаполнено(ПолныйКодМаркировки) Тогда
						СтрокаПозицииЧека.ШтрихкодBase64 = ПолныйКодМаркировки;
						СтрокаПозицииЧека.КонтрольнаяМарка = ПолныйКодМаркировки;
					КонецЕсли;
					
					Если СтрокаТовары.РезультатРаспределенияШтрихкодов.ЧастичноеВыбытие Тогда
						СтрокаПозицииЧека.ДробноеКоличество.Числитель   = СтрокаТовары.РезультатРаспределенияШтрихкодов.Количество;
						СтрокаПозицииЧека.ДробноеКоличество.Знаменатель = СтрокаТовары.РезультатРаспределенияШтрихкодов.ЕмкостьПотребительскойУпаковки;
					КонецЕсли;
					
					Если ЗначениеЗаполнено(СтрокаТовары.РезультатРаспределенияШтрихкодов.РазрешительныйРежимИдентификаторЗапросаГИСМТ) Тогда
						СтрокаПозицииЧека.ЗапросПроверкиКода.ИдентификаторЗапроса
							= СтрокаТовары.РезультатРаспределенияШтрихкодов.РазрешительныйРежимИдентификаторЗапросаГИСМТ;
						СтрокаПозицииЧека.ЗапросПроверкиКода.ВременнаяМетка
							= СтрокаТовары.РезультатРаспределенияШтрихкодов.РазрешительныйРежимДатаЗапросаГИСМТ;
					КонецЕсли;
					
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		ОбщиеПараметры.ПозицииЧека.Добавить(СтрокаПозицииЧека);
	
	КонецЦикла;
	
КонецПроцедуры

// Возвращает текст запроса по внереализованной прибыли
//
// ВозвращаемоеЗначение:
//  Строка - текст запроса по внереализационной прибыли.
//
Функция ТекстЗапросаПоВнереализациннойПрибыли() Экспорт
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ВЫРАЗИТЬ(ПогашениеПодарочныхСертификатов.ПодарочныйСертификат КАК Справочник.Номенклатура) КАК ПодарочныйСертификат,
	|	ВЫРАЗИТЬ(ПогашениеПодарочныхСертификатов.СерийныйНомер КАК Справочник.СерийныеНомера) КАК СерийныйНомер,
	|	ПогашениеПодарочныхСертификатов.СуммаПогашенияСертификата КАК СуммаПогашенияСертификата,
	|	ПогашениеПодарочныхСертификатов.Организация КАК Организация
	|ПОМЕСТИТЬ ПогашениеПодарочныхСертификатов
	|ИЗ
	|	&ПогашениеПодарочныхСертификатов КАК ПогашениеПодарочныхСертификатов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПогашениеПодарочныхСертификатов.ПодарочныйСертификат КАК ПодарочныйСертификат,
	|	ПогашениеПодарочныхСертификатов.СерийныйНомер КАК СерийныйНомер,
	|	ПогашениеПодарочныхСертификатов.ПодарочныйСертификат.ЧастичноеПогашение КАК ЧастичноеПогашение,
	|	ВЫБОР
	|		КОГДА &ПроверкаВРазрезеОрганизаций
	|			ТОГДА ПогашениеПодарочныхСертификатов.Организация
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|	КОНЕЦ КАК Организация,
	|	СУММА(ЕСТЬNULL(ПодарочныеСертификатыОстатки.СуммаОстаток, ВЫБОР
	|				КОГДА НЕ ПогашениеПодарочныхСертификатов.ПодарочныйСертификат.ЧастичноеПогашение
	|					ТОГДА ПогашениеПодарочныхСертификатов.ПодарочныйСертификат.Номинал
	|				ИНАЧЕ 0
	|			КОНЕЦ)) КАК Остаток,
	|	СУММА(ПогашениеПодарочныхСертификатов.СуммаПогашенияСертификата) КАК СуммаПогашенияСертификата
	|ПОМЕСТИТЬ ПогашениеПоОрганизациям
	|ИЗ
	|	ПогашениеПодарочныхСертификатов КАК ПогашениеПодарочныхСертификатов
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ПодарочныеСертификаты.Остатки(
	|				,
	|				(ПодарочныйСертификат, НомерСертификата) В
	|					(ВЫБРАТЬ
	|						ПогашениеПодарочныхСертификатов.ПодарочныйСертификат,
	|						ПогашениеПодарочныхСертификатов.СерийныйНомер
	|					ИЗ
	|						ПогашениеПодарочныхСертификатов)) КАК ПодарочныеСертификатыОстатки
	|		ПО ПогашениеПодарочныхСертификатов.ПодарочныйСертификат = ПодарочныеСертификатыОстатки.ПодарочныйСертификат
	|			И ПогашениеПодарочныхСертификатов.СерийныйНомер = ПодарочныеСертификатыОстатки.НомерСертификата
	|
	|СГРУППИРОВАТЬ ПО
	|	ПогашениеПодарочныхСертификатов.ПодарочныйСертификат,
	|	ПогашениеПодарочныхСертификатов.СерийныйНомер,
	|	ПогашениеПодарочныхСертификатов.ПодарочныйСертификат.ЧастичноеПогашение,
	|	ВЫБОР
	|		КОГДА &ПроверкаВРазрезеОрганизаций
	|			ТОГДА ПогашениеПодарочныхСертификатов.Организация
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|	КОНЕЦ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА ПогашениеПоОрганизациям.ЧастичноеПогашение
	|			ТОГДА ПогашениеПоОрганизациям.Остаток - ПогашениеПоОрганизациям.СуммаПогашенияСертификата
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК Остаток,
	|	ВЫБОР
	|		КОГДА НЕ ПогашениеПоОрганизациям.ЧастичноеПогашение
	|			ТОГДА ПогашениеПоОрганизациям.Остаток - ПогашениеПоОрганизациям.СуммаПогашенияСертификата
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК Разница
	|ИЗ
	|	ПогашениеПоОрганизациям КАК ПогашениеПоОрганизациям
	|ГДЕ
	|	ПогашениеПоОрганизациям.СуммаПогашенияСертификата < ПогашениеПоОрганизациям.Остаток";
	
	Возврат ТекстЗапроса;
КонецФункции

// Возвращает текст запроса по внереализованной прибыли для фискализации.
//
// ВозвращаемоеЗначение:
//  Строка - текст запроса по внереализационной прибыли для фискализации.
//
Функция ТекстЗапросаПоВнереализациннойПрибылиДляФискализации() Экспорт
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ВЫРАЗИТЬ(ПогашениеПодарочныхСертификатов.ПодарочныйСертификат КАК Справочник.Номенклатура) КАК ПодарочныйСертификат,
	|	ВЫРАЗИТЬ(ПогашениеПодарочныхСертификатов.СерийныйНомер КАК Справочник.СерийныеНомера) КАК СерийныйНомер,
	|	ПогашениеПодарочныхСертификатов.СуммаПогашенияСертификата КАК СуммаПогашенияСертификата
	|ПОМЕСТИТЬ ПогашениеПодарочныхСертификатов
	|ИЗ
	|	&ПогашениеПодарочныхСертификатов КАК ПогашениеПодарочныхСертификатов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПогашениеПодарочныхСертификатов.ПодарочныйСертификат КАК ПодарочныйСертификат,
	|	ПогашениеПодарочныхСертификатов.СерийныйНомер КАК СерийныйНомер,
	|	ПогашениеПодарочныхСертификатов.ПодарочныйСертификат.ЧастичноеПогашение КАК ЧастичноеПогашение,
	|	СУММА(ЕСТЬNULL(ПодарочныеСертификатыОстатки.СуммаОстаток, ВЫБОР
	|				КОГДА НЕ ПогашениеПодарочныхСертификатов.ПодарочныйСертификат.ЧастичноеПогашение
	|					ТОГДА ПогашениеПодарочныхСертификатов.ПодарочныйСертификат.Номинал
	|				ИНАЧЕ 0
	|			КОНЕЦ)) КАК Остаток,
	|	СУММА(ПогашениеПодарочныхСертификатов.СуммаПогашенияСертификата) КАК СуммаПогашенияСертификата
	|ПОМЕСТИТЬ ПогашениеПоСертификатам
	|ИЗ
	|	ПогашениеПодарочныхСертификатов КАК ПогашениеПодарочныхСертификатов
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ПодарочныеСертификаты.Остатки(
	|				,
	|				(ПодарочныйСертификат, НомерСертификата) В
	|					(ВЫБРАТЬ
	|						ПогашениеПодарочныхСертификатов.ПодарочныйСертификат,
	|						ПогашениеПодарочныхСертификатов.СерийныйНомер
	|					ИЗ
	|						ПогашениеПодарочныхСертификатов)) КАК ПодарочныеСертификатыОстатки
	|		ПО ПогашениеПодарочныхСертификатов.ПодарочныйСертификат = ПодарочныеСертификатыОстатки.ПодарочныйСертификат
	|			И ПогашениеПодарочныхСертификатов.СерийныйНомер = ПодарочныеСертификатыОстатки.НомерСертификата
	|
	|СГРУППИРОВАТЬ ПО
	|	ПогашениеПодарочныхСертификатов.ПодарочныйСертификат,
	|	ПогашениеПодарочныхСертификатов.СерийныйНомер,
	|	ПогашениеПодарочныхСертификатов.ПодарочныйСертификат.ЧастичноеПогашение
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА НЕ ПогашениеПоСертификатам.ЧастичноеПогашение
	|			ТОГДА ПогашениеПоСертификатам.Остаток - ПогашениеПоСертификатам.СуммаПогашенияСертификата
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК Разница
	|ИЗ
	|	ПогашениеПоСертификатам КАК ПогашениеПоСертификатам
	|ГДЕ
	|	ПогашениеПоСертификатам.СуммаПогашенияСертификата < ПогашениеПоСертификатам.Остаток";
	
	Возврат ТекстЗапроса;
КонецФункции

// При обнаружении потери покупателя нужно помести ее во внереализованную прибыль
// Используются при фискализации чека.
//
// Параметры:
//  ДокументСсылка - ДокументСсылка - документ в котором отображается внереализационная прибыль.
//  ОбщиеПараметры - Структура - структура параметров выполнения операции.
//
Процедура ДобавитьВнереализационнуюПрибыль(ДокументСсылка, ОбщиеПараметры) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапросаПоВнереализациннойПрибылиДляФискализации();
	
	Запрос.УстановитьПараметр("ПогашениеПодарочныхСертификатов", ДокументСсылка.ПогашениеПодарочныхСертификатов.Выгрузить());
	Запрос.УстановитьПараметр("Оплата", ДокументСсылка.Оплата.Выгрузить());
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат
	КонецЕсли;
	
	ТаблицаЗапроса = Результат.Выгрузить();
	ПотериПокупателя = ТаблицаЗапроса.Итог("Разница");
	
	Если ПотериПокупателя > 0 Тогда
		
		СтрокаПозицииЧека = МенеджерОборудованияКлиентСервер.ПараметрыФискальнойСтрокиЧека(); 
		СтрокаПозицииЧека.Количество = 1;
		СтрокаПозицииЧека.Наименование = "8";
		Если ОбщиеПараметры.ПозицииЧека.Количество() > 0 Тогда
			ПоследняяПозиция = ОбщиеПараметры.ПозицииЧека[ОбщиеПараметры.ПозицииЧека.Количество() - 1];
			СтрокаПозицииЧека.НомерСекции = ПоследняяПозиция.НомерСекции;
		Иначе
			СтрокаПозицииЧека.НомерСекции = 1;
		КонецЕсли; 
		
		СтрокаПозицииЧека.НомерСтрокиТовара      = ОбщиеПараметры.ПозицииЧека.Количество();
		СтрокаПозицииЧека.ПризнакПредметаРасчета = Перечисления.ПризнакиПредметаРасчета.ВнереализационныйДоход;
		СтрокаПозицииЧека.ПризнакСпособаРасчета  = Перечисления.ПризнакиСпособаРасчета.ПередачаСПолнойОплатой;
		СтрокаПозицииЧека.СтавкаНДС              = Неопределено;
		СтрокаПозицииЧека.Сумма                  = ПотериПокупателя;
		СтрокаПозицииЧека.Цена                   = ПотериПокупателя;
		СтрокаПозицииЧека.ЦенаСоСкидками         = ПотериПокупателя;
		
		СтрокаПозицииЧека.Вставить("РезультатРаспределенияШтрихкодов");
		
		ОбщиеПараметры.ПозицииЧека.Добавить(СтрокаПозицииЧека);
		
		СтрокаТаблицыОплат = МенеджерОборудованияКлиентСервер.ПараметрыСтрокиОплаты();
		СтрокаТаблицыОплат.Сумма     = ПотериПокупателя;
		СтрокаТаблицыОплат.ТипОплаты = Перечисления.ТипыОплатыККТ.Предоплата;
		ОбщиеПараметры.ТаблицаОплат.Добавить(СтрокаТаблицыОплат);
		
	КонецЕсли;
	
КонецПроцедуры // ДобавитьВнереализационнуюПрибыль()

// Переопределяет печать слип чека эквайринговой операции. 
//  ПечатьСлипЧека - Булево - Определяет будет ли распечатан слип-чек, по умолчанию Истина.  
//  ПолныйСлипЧек  - Булево - Определяет какой слип-чек будет распечатан полный или короткий, по умолчанию Истина. 
//  СтандартнаяОбработка - Булево - выполнение стандартной обработки.
//
Процедура ПечатьСлипЧекаЭквайринговойОперации(ПечатьСлипЧека, ПолныйСлипЧек, СтандартнаяОбработка) Экспорт
	
	СтандартнаяОбработка = Ложь;
	ПечатьСлипЧека = ЗначениеНастроекПовтИсп.ПолучитьЗначениеКонстанты("ПечатьСлипЧека");
	Если ПечатьСлипЧека Тогда
		ПолныйСлипЧек = ЗначениеНастроекПовтИсп.ПолучитьЗначениеКонстанты("ПолныйСлипЧек");
	Иначе
		ПолныйСлипЧек = Ложь;
	КонецЕсли;
	
КонецПроцедуры

#Область ЭлектронныйПлатеж

// Возвращает возможность использования электронного платежа.
// 
// Параметры:
//  ПодключаемоеОборудование - Справочник.ПодключаемоеОборудование - экземпляр оборудования для осуществления платежа.
//
// Возвращаемое значение:
//  Булево - возмонжость выполнения платежа.
// 
Функция ВозможностьЭлектронногоПлатежа(ПодключаемоеОборудование) Экспорт
	
	Если НЕ ЗначениеЗаполнено(ПодключаемоеОборудование) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если ПодключаемоеОборудование.ТипОборудования = Перечисления.ТипыПодключаемогоОборудования.ККТ Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь
	
КонецФункции

// Возвращает возможность использования электронного платежа.
// 
// Параметры:
//  ПодключаемоеОборудование - Справочник.ПодключаемоеОборудование - экземпляр оборудования для осуществления платежа.
//
// Возвращаемое значение:
//  Булево - возмонжость выполнения платежа.
// 
Функция ПроверитьВозможностьПечатиБумажногоЧека(ПодключаемоеОборудование) Экспорт
	
	Если НЕ ЗначениеЗаполнено(ПодключаемоеОборудование) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ПараметрыПечати = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ПодключаемоеОборудование, "ТипОборудования, НеПечататьБумажныйЧек");
	
	Если ПараметрыПечати.ТипОборудования = Перечисления.ТипыПодключаемогоОборудования.ККТ 
		И ПараметрыПечати.НеПечататьБумажныйЧек Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь
	
КонецФункции

// Возвращает телефоны объекта для чека. Если передана Информационная карта, тогда возвращает
// телефоны из самой карты и телефоны владельца
//
// Параметры:
//  ОбъектСсылка - СправочникСсылка.ИнформационныеКарты, СправочникСсылка.Контрагенты - объект, 
//				   по которому необходимо получить телефоны
//
Функция ТелефоныОбъектаДляЧека(ОбъектСсылка) Экспорт
	
	СписокТелефонов = Новый СписокЗначений;
	
	Запрос = Новый Запрос;
	
	Если ТипЗнч(ОбъектСсылка) = Тип("СправочникСсылка.ИнформационныеКарты") Тогда
		
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	0 КАК ПолеСортировки,
		|	ИнформационныеКартыКонтактнаяИнформация.НомерТелефона,
		|	ИнформационныеКартыКонтактнаяИнформация.НомерСтроки КАК НомерСтроки
		|ИЗ
		|	Справочник.ИнформационныеКарты.КонтактнаяИнформация КАК ИнформационныеКартыКонтактнаяИнформация
		|ГДЕ
		|	ИнформационныеКартыКонтактнаяИнформация.Тип = &Тип
		|	И ИнформационныеКартыКонтактнаяИнформация.Ссылка = &ДисконтнаяКарта
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	1,
		|	ФизическиеЛицаКонтактнаяИнформация.НомерТелефона,
		|	ФизическиеЛицаКонтактнаяИнформация.НомерСтроки
		|ИЗ
		|	Справочник.ФизическиеЛица.КонтактнаяИнформация КАК ФизическиеЛицаКонтактнаяИнформация
		|ГДЕ
		|	ФизическиеЛицаКонтактнаяИнформация.Ссылка = &ВладелецКарты
		|	И ФизическиеЛицаКонтактнаяИнформация.Тип = &Тип
		|
		|УПОРЯДОЧИТЬ ПО
		|	ПолеСортировки,
		|	НомерСтроки";
		
		Запрос.УстановитьПараметр("ДисконтнаяКарта", ОбъектСсылка);
		Запрос.УстановитьПараметр("ВладелецКарты"  , ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ОбъектСсылка,"ВладелецКарты"));
		
	Иначе
		
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	КонтрагентыКонтактнаяИнформация.НомерТелефона КАК НомерТелефона,
		|	КонтрагентыКонтактнаяИнформация.НомерСтроки КАК НомерСтроки
		|ИЗ
		|	Справочник.Контрагенты.КонтактнаяИнформация КАК КонтрагентыКонтактнаяИнформация
		|ГДЕ
		|	КонтрагентыКонтактнаяИнформация.Тип = &Тип
		|	И КонтрагентыКонтактнаяИнформация.Ссылка = &Контрагент
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки";
		
		Запрос.УстановитьПараметр("Контрагент", ОбъектСсылка);
		
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Тип" , Перечисления.ТипыКонтактнойИнформации.Телефон);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Если ЗначениеЗаполнено(Выборка.НомерТелефона) Тогда
			НомерТелефона = СокрЛП(Выборка.НомерТелефона);
			Если СтрДлина(НомерТелефона) > 10 Тогда
				НомерТелефона = Прав(НомерТелефона, 10);
			КонецЕсли;
		Иначе
			Продолжить;
		КонецЕсли;
		
		ТелефонСтрокой = "";
		ПодключаемоеОборудованиеРТ.ПреобразоватьТелефонКПользовательскомуВиду(НомерТелефона, ТелефонСтрокой);
		
		СписокТелефонов.Добавить(НомерТелефона, ТелефонСтрокой);
		
	КонецЦикла;
	
	Возврат СписокТелефонов
	
КонецФункции

// Преобразовывает телефон к пользовательскому виду.
//
// Параметры:
//  ВведенноеЧисло - Число - пользовательский телефон числом.
//  ТелефонСтрокой - Строка - пользовательский телефон строкой.
// 
Процедура ПреобразоватьТелефонКПользовательскомуВиду(ВведенноеЧисло, ТелефонСтрокой) Экспорт
	
	ВведенноеЧислоСтрокой = Формат(ВведенноеЧисло, "ЧГ=0");
	ВведенноеЧислоСтрокой = Лев(ВведенноеЧислоСтрокой, 10);
	Если СтрДлина(ВведенноеЧислоСтрокой) < 10 Тогда
		ВведенноеЧислоСтрокой = Формат(ВведенноеЧисло, "ЧЦ=10; ЧДЦ=0; ЧН=0000000000; ЧВН=; ЧГ=0");
	КонецЕсли;
	
	ТелефонСтрокой = "+7(";
	ТелефонСтрокой = ТелефонСтрокой + Сред(ВведенноеЧислоСтрокой, 1, 3);
	ТелефонСтрокой = ТелефонСтрокой + ")";
	ТелефонСтрокой = ТелефонСтрокой + Сред(ВведенноеЧислоСтрокой, 4, 3);
	ТелефонСтрокой = ТелефонСтрокой + "-";
	ТелефонСтрокой = ТелефонСтрокой + Сред(ВведенноеЧислоСтрокой, 7, 2);
	ТелефонСтрокой = ТелефонСтрокой + "-";
	ТелефонСтрокой = ТелефонСтрокой + Сред(ВведенноеЧислоСтрокой, 9, 2);
	
КонецПроцедуры

// Записывает телефон в информационную карту.
//
// Параметры:
//  ДисконтнаяКарта - СправочникСсылка.ИнформационныеКарты - информационная карта для записи телефона.
//  Телефон - Строка - телефон строкой.
//
Процедура ЗаписатьТелефонВИнформационнуюКарту(ДисконтнаяКарта, НомерТелефона) Экспорт
	
	Если НЕ ЗначениеЗаполнено(ДисконтнаяКарта)
		ИЛИ НЕ ЗначениеЗаполнено(НомерТелефона)
		ИЛИ (НЕ СтрДлина(СокрЛП(НомерТелефона)) = 10) Тогда
		Возврат;
	КонецЕсли;
	
	ВидКИ = Справочники.ВидыКонтактнойИнформации.ТелефонИнформационнойКарты;
	ТипКИ = Перечисления.ТипыКонтактнойИнформации.Телефон;
	ЗаписатьКИ = Ложь;
	ТелефонСуществует = Ложь;
	ИндексНайденнойСтроки = 0;
	ПредставлениеТелефона = "";
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	ИнформационныеКартыКонтактнаяИнформация.НомерТелефона,
	|	ИнформационныеКартыКонтактнаяИнформация.НомерСтроки,
	|	ИнформационныеКартыКонтактнаяИнформация.Вид,
	|	ИнформационныеКартыКонтактнаяИнформация.Тип
	|ИЗ
	|	Справочник.ИнформационныеКарты.КонтактнаяИнформация КАК ИнформационныеКартыКонтактнаяИнформация
	|ГДЕ
	|	ИнформационныеКартыКонтактнаяИнформация.Ссылка = &ДисконтнаяКарта
	|	И ИнформационныеКартыКонтактнаяИнформация.НомерТелефона = &НомерТелефона
	|	И ИнформационныеКартыКонтактнаяИнформация.Тип = &Тип
	|	И ИнформационныеКартыКонтактнаяИнформация.Вид = &Вид");
	
	Запрос.УстановитьПараметр("ДисконтнаяКарта", ДисконтнаяКарта);
	Запрос.УстановитьПараметр("НомерТелефона", НомерТелефона);
	Запрос.УстановитьПараметр("Тип", ТипКИ);
	Запрос.УстановитьПараметр("Вид", ВидКИ);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Если Выборка.Следующий() Тогда
		ТелефонСуществует = Истина;
		ИндексНайденнойСтроки = Выборка.НомерСтроки - 1;
		Если НЕ ИндексНайденнойСтроки = 0 Тогда
			ЗаписатьКИ = Истина;
		КонецЕсли;
	Иначе
		ТелефонСтрокой = ШтрихкодированиеРТКлиентСервер.ПодготовитьТелефон(НомерТелефона);
		Попытка
			ТелефонЧислом = Число(ТелефонСтрокой);
			ПреобразоватьТелефонКПользовательскомуВиду(ТелефонЧислом, ПредставлениеТелефона);
			Если НЕ ПредставлениеТелефона = "" Тогда
				ЗаписатьКИ = Истина;
			КонецЕсли;
		Исключение
			ЗаписатьКИ = Ложь;
		КонецПопытки;
	КонецЕсли;
	
	Если НЕ ЗаписатьКИ Тогда
		Возврат;
	КонецЕсли;
	
	НачатьТранзакцию();
	
	Попытка
		
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("Справочник.ИнформационныеКарты");
		ЭлементБлокировки.УстановитьЗначение("Ссылка", ДисконтнаяКарта);
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		Блокировка.Заблокировать();
		
		ДисконтнаяКартаОбъект = ДисконтнаяКарта.ПолучитьОбъект();
		ДисконтнаяКартаОбъект.Заблокировать();
		
		Если ТелефонСуществует Тогда
			// Такой телефон есть, делаем его первым в тч КИ.
			ДисконтнаяКартаОбъект.КонтактнаяИнформация.Сдвинуть(ИндексНайденнойСтроки, - ИндексНайденнойСтроки);
		Иначе
			КонтактнаяИнформацияДляЗаписи =
				УправлениеКонтактнойИнформацией.КонтактнаяИнформацияПоПредставлению(ПредставлениеТелефона, ВидКИ);
			УправлениеКонтактнойИнформацией.ЗаписатьКонтактнуюИнформацию(
				ДисконтнаяКартаОбъект,
				КонтактнаяИнформацияДляЗаписи,
				ВидКИ,
				ТипКИ);
			
			КоличествоСтрок = ДисконтнаяКартаОбъект.КонтактнаяИнформация.Количество();
			ИндексСтроки = КоличествоСтрок - 1;
			Если НЕ (ИндексСтроки = 0) Тогда
				ДисконтнаяКартаОбъект.КонтактнаяИнформация.Сдвинуть(ИндексСтроки, - ИндексСтроки);
			КонецЕсли;
		КонецЕсли;
		
		ДисконтнаяКартаОбъект.Записать();
		ЗафиксироватьТранзакцию();
		
	Исключение
		ОтменитьТранзакцию();
		
		ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ОбщегоНазначения.СообщитьПользователю(ТекстОшибки);
	КонецПопытки;
	
КонецПроцедуры

// Записывает email в информационную карту.
//
// Параметры:
//  ДисконтнаяКарта - СправочникСсылка.ИнформационныеКарты - информационная карта для записи email.
//  Email - Строка - email строкой.
//
Процедура ЗаписатьEmailВИнформационнуюКарту(ДисконтнаяКарта, Email) Экспорт
	
	Если НЕ ЗначениеЗаполнено(ДисконтнаяКарта)
		ИЛИ НЕ ЗначениеЗаполнено(Email) Тогда
		Возврат;
	КонецЕсли;
	
	НачатьТранзакцию();
	
	Попытка
		
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("Справочник.ИнформационныеКарты");
		ЭлементБлокировки.УстановитьЗначение("Ссылка", ДисконтнаяКарта);
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		Блокировка.Заблокировать();
		
		// Поиск
		ДисконтнаяКартаОбъект = ДисконтнаяКарта.ПолучитьОбъект();
		ДисконтнаяКартаОбъект.Заблокировать();
		ВидКИ = Справочники.ВидыКонтактнойИнформации.EmailИнформационнойКарты;
		ТипКИ = Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты;
		Email = НРег(Email);
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ИнформационныеКартыКонтактнаяИнформация.НомерСтроки,
		|	ИнформационныеКартыКонтактнаяИнформация.АдресЭП,
		|	ИнформационныеКартыКонтактнаяИнформация.Вид,
		|	ИнформационныеКартыКонтактнаяИнформация.Тип
		|ИЗ
		|	Справочник.ИнформационныеКарты.КонтактнаяИнформация КАК ИнформационныеКартыКонтактнаяИнформация
		|ГДЕ
		|	ИнформационныеКартыКонтактнаяИнформация.Ссылка = &ДисконтнаяКарта
		|	И ИнформационныеКартыКонтактнаяИнформация.АдресЭП = &АдресЭП
		|	И ИнформационныеКартыКонтактнаяИнформация.Тип = &Тип
		|	И ИнформационныеКартыКонтактнаяИнформация.Вид = &Вид";
		
		Запрос.УстановитьПараметр("ДисконтнаяКарта", ДисконтнаяКарта);
		Запрос.УстановитьПараметр("АдресЭП"        , Email);
		Запрос.УстановитьПараметр("Тип"  , ТипКИ);
		Запрос.УстановитьПараметр("Вид"  , ВидКИ);
		
		Результат = Запрос.Выполнить();
		Выборка = Результат.Выбрать();
		
		Если Выборка.Следующий() Тогда
			// Такой адрес ЭП есть
			НомерНайденнойСтроки = Выборка.НомерСтроки;
			ИндексСтроки = НомерНайденнойСтроки - 1;
			Если НЕ(ИндексСтроки = 0) Тогда
				ДисконтнаяКартаОбъект.КонтактнаяИнформация.Сдвинуть(ИндексСтроки, - ИндексСтроки);
			КонецЕсли;
		Иначе
			// Добавляем Адрес ЭП
			ЗначенияПолей = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияПоПредставлению(Email, ВидКИ);
			
			УправлениеКонтактнойИнформацией.ЗаписатьКонтактнуюИнформацию(ДисконтнаяКартаОбъект,
			ЗначенияПолей,
			ВидКИ,
			ТипКИ);
			
			КоличествоСтрок = ДисконтнаяКартаОбъект.КонтактнаяИнформация.Количество();
			ИндексСтроки = КоличествоСтрок - 1;
			Если ИндексСтроки > 0 Тогда
				ДисконтнаяКартаОбъект.КонтактнаяИнформация.Сдвинуть(ИндексСтроки, - ИндексСтроки);
			КонецЕсли;
			
		КонецЕсли;
		ДисконтнаяКартаОбъект.Записать();
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		ОтменитьТранзакцию();
		
		ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ОбщегоНазначения.СообщитьПользователю(ТекстОшибки);
	КонецПопытки;
	
КонецПроцедуры

// Возвращает телефоны объекта для чека. Если передана Информационная карта, тогда возвращает
// телефоны из самой карты и телефоны владельца
//
// Параметры:
//  ОбъектСсылка - СправочникСсылка.ИнформационныеКарты, СправочникСсылка.Контрагенты - объект, 
//				   по которому необходимо получить телефоны
//
Функция EmailОбъектаДляЧека(ОбъектСсылка) Экспорт
	
	СписокАдресовЭП = Новый СписокЗначений;
	Запрос 			= Новый Запрос;
	
	Если ТипЗнч(ОбъектСсылка) = Тип("СправочникСсылка.ИнформационныеКарты") Тогда
		
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	0 КАК ПолеСортировки,
		|	ИнформационныеКартыКонтактнаяИнформация.АдресЭП,
		|	ИнформационныеКартыКонтактнаяИнформация.НомерСтроки КАК НомерСтроки
		|ИЗ
		|	Справочник.ИнформационныеКарты.КонтактнаяИнформация КАК ИнформационныеКартыКонтактнаяИнформация
		|ГДЕ
		|	ИнформационныеКартыКонтактнаяИнформация.Тип = &Тип
		|	И ИнформационныеКартыКонтактнаяИнформация.Ссылка = &ДисконтнаяКарта
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	1,
		|	ФизическиеЛицаКонтактнаяИнформация.АдресЭП,
		|	ФизическиеЛицаКонтактнаяИнформация.НомерСтроки
		|ИЗ
		|	Справочник.ФизическиеЛица.КонтактнаяИнформация КАК ФизическиеЛицаКонтактнаяИнформация
		|ГДЕ
		|	ФизическиеЛицаКонтактнаяИнформация.Ссылка = &ВладелецКарты
		|	И ФизическиеЛицаКонтактнаяИнформация.Тип = &Тип
		|
		|УПОРЯДОЧИТЬ ПО
		|	ПолеСортировки,
		|	НомерСтроки";
		
		Запрос.УстановитьПараметр("ДисконтнаяКарта", ОбъектСсылка);
		Запрос.УстановитьПараметр("ВладелецКарты"  , ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ОбъектСсылка,"ВладелецКарты"));
		
	Иначе
		
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	КонтрагентыКонтактнаяИнформация.АдресЭП,
		|	КонтрагентыКонтактнаяИнформация.НомерСтроки КАК НомерСтроки
		|ИЗ
		|	Справочник.Контрагенты.КонтактнаяИнформация КАК КонтрагентыКонтактнаяИнформация
		|ГДЕ
		|	КонтрагентыКонтактнаяИнформация.Тип = &Тип
		|	И КонтрагентыКонтактнаяИнформация.Ссылка = &Контрагент
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки";
		
		Запрос.УстановитьПараметр("Контрагент", ОбъектСсылка);
		
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Тип"            , Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		СписокАдресовЭП.Добавить(Выборка.АдресЭП);
	КонецЦикла;
	
	Возврат СписокАдресовЭП;
	
КонецФункции

Процедура ЗаполнитьДанныеЭлектронногоЧека(Объект, ДисконтнаяКарта, ТелефонСтрокой = "") Экспорт
	
	Телефон			= "";
	АдресЭП			= "";
	ТелефонСтрокой	= "";
	
	Если ЗначениеЗаполнено(ДисконтнаяКарта) Тогда
	
		СписокТелефонов = ТелефоныОбъектаДляЧека(ДисконтнаяКарта);
	
		Если СписокТелефонов.Количество() > 0 Тогда
			
			НомерТелефона	 = ШтрихкодированиеРТКлиентСервер.ПодготовитьТелефон(Объект.Телефон);
			ВыбранныйТелефон = СписокТелефонов.НайтиПоЗначению(НомерТелефона);
		
			Если ЗначениеЗаполнено(НомерТелефона)
				И ВыбранныйТелефон <> Неопределено Тогда
			
				Телефон 		= ВыбранныйТелефон.Значение;
				ТелефонСтрокой  = ВыбранныйТелефон.Представление;
			
			Иначе
			
				Телефон 		= СписокТелефонов[0].Значение;
				ТелефонСтрокой  = СписокТелефонов[0].Представление;
			
			КонецЕсли;
		Иначе
		
			СписокАдресовЭП 	= EmailОбъектаДляЧека(ДисконтнаяКарта);
			СписокТелефоновШК	= ШтрихкодированиеРТ.ТелефоныДисконтнойКартыПоДаннымШК(ДисконтнаяКарта);
			
			Если СписокАдресовЭП.Количество() > 0 Тогда
			
				ВыбранныйАдресЭП = СписокАдресовЭП.НайтиПоЗначению(Объект.АдресЭП);
			
				Если ЗначениеЗаполнено(Объект.АдресЭП)
					И ВыбранныйАдресЭП <> Неопределено Тогда
					АдресЭП = ВыбранныйАдресЭП.Значение;
				Иначе
					АдресЭП = СписокАдресовЭП[0].Значение;
				КонецЕсли;
				
			ИначеЕсли СписокТелефоновШК.Количество() Тогда
				
				Телефон 		= СписокТелефоновШК[0].Значение;
				ТелефонСтрокой  = СписокТелефоновШК[0].Представление;
				
			КонецЕсли;
		
		КонецЕсли;
		
	КонецЕсли;
	
	Объект.Телефон = Телефон;
	Объект.АдресЭП = АдресЭП;
	
КонецПроцедуры

#КонецОбласти

// Получает систему налогообложения из регистра ПрименениеСистемНалогообложения по указанным параметрам.
//
// Параметры:
//  Дата - Дата - жата, на которую необходимо определить систему налогообложения. Необязательный.
//  Организация - СправочникСсылка.Организации - организация, для которой необходимо определить систему налогообложения. Обязательный.
//  Магазин - СправочникСсылка.Магазины - магазин, для которого необходимо определить систему налогообложения. Необязательный.
//                                        Если заполнен склад, но не заполнен магазин - берется из склада.
//  Склад - СправочникСсылка.Склады - склад, для которого необходимо определить систему налогообложения. Необязательный.
//  ТоварнаяГруппа - СправочникСсылка.ТоварныеГруппы  - товарная группа номенклатуры, для которой необходимо определить систему налогообложения. Необязательный.
// 
// Возвращаемое значение:
//  Перечисления.ТипыСистемНалогообложенияККТ - система налогообложения по параметрам.
//
Функция ПолучитьСистемуНалогообложения(Дата = Неопределено, 
									   Организация, 
									   Магазин 		  = Неопределено, 
									   Склад 		  = Неопределено, 
									   ТоварнаяГруппа = Неопределено) Экспорт
									   
	Если НЕ ЗначениеЗаполнено(Организация) Тогда
		Возврат Перечисления.ТипыСистемНалогообложенияККТ.ПустаяСсылка();
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Дата) Тогда
		Дата = ТекущаяДатаСеанса();
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Склад) И НЕ ЗначениеЗаполнено(Магазин) Тогда
		Магазин = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Склад, "Магазин");
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПрименениеСистемНалогообложенияСрезПоследних.СистемаНалогообложения КАК СистемаНалогообложения,
	|	ПрименениеСистемНалогообложенияСрезПоследних.Период КАК Период,
	|	ПрименениеСистемНалогообложенияСрезПоследних.Магазин КАК Магазин,
	|	ПрименениеСистемНалогообложенияСрезПоследних.Склад КАК Склад,
	|	ПрименениеСистемНалогообложенияСрезПоследних.ТоварнаяГруппа КАК ТоварнаяГруппа
	|ПОМЕСТИТЬ ВТСрезПоследних
	|ИЗ
	|	РегистрСведений.ПрименениеСистемНалогообложения.СрезПоследних(
	|			&Дата,
	|			Организация = &Организация
	|				И (Магазин = &Магазин
	|					ИЛИ Магазин = ЗНАЧЕНИЕ(Справочник.Магазины.ПустаяСсылка))
	|				И (Склад = &Склад
	|					ИЛИ Склад = ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка))
	|				И (ТоварнаяГруппа = &ТоварнаяГруппа
	|					ИЛИ ТоварнаяГруппа = ЗНАЧЕНИЕ(Справочник.ТоварныеГруппы.ПустаяСсылка))
	|				И ВЫБОР
	|					КОГДА СистемаНалогообложения = ЗНАЧЕНИЕ(Перечисление.ТипыСистемНалогообложенияККТ.Патент)
	|						ТОГДА &Дата >= ДатаНачалаПатента
	|									И &Дата <= ДатаОкончанияПатента
	|								ИЛИ ДатаНачалаПатента = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|									И ДатаОкончанияПатента = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|					ИНАЧЕ ИСТИНА
	|				КОНЕЦ) КАК ПрименениеСистемНалогообложенияСрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МАКСИМУМ(ВТСрезПоследних.Период) КАК Период,
	|	ВТСрезПоследних.Магазин КАК Магазин,
	|	ВТСрезПоследних.Склад КАК Склад,
	|	ВТСрезПоследних.ТоварнаяГруппа КАК ТоварнаяГруппа
	|ПОМЕСТИТЬ ВТПериод
	|ИЗ
	|	ВТСрезПоследних КАК ВТСрезПоследних
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТСрезПоследних.Магазин,
	|	ВТСрезПоследних.Склад,
	|	ВТСрезПоследних.ТоварнаяГруппа
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТСрезПоследних.СистемаНалогообложения КАК СистемаНалогообложения,
	|	ВТСрезПоследних.Магазин КАК Магазин,
	|	ВТСрезПоследних.Склад КАК Склад,
	|	ВТСрезПоследних.ТоварнаяГруппа КАК ТоварнаяГруппа
	|ПОМЕСТИТЬ ВТСистемыНалогообложения
	|ИЗ
	|	ВТСрезПоследних КАК ВТСрезПоследних
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТПериод КАК ВТПериод
	|		ПО ВТСрезПоследних.Период = ВТПериод.Период
	|			И ВТСрезПоследних.Магазин = ВТПериод.Магазин
	|			И ВТСрезПоследних.Склад = ВТПериод.Склад
	|			И ВТСрезПоследних.ТоварнаяГруппа = ВТПериод.ТоварнаяГруппа
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	ПрименениеСистемНалогообложенияСрезПоследних.СистемаНалогообложения КАК СистемаНалогообложения,
	|	ВЫБОР
	|		КОГДА ПрименениеСистемНалогообложенияСрезПоследних.Магазин <> ЗНАЧЕНИЕ(Справочник.Магазины.ПустаяСсылка)
	|				И ПрименениеСистемНалогообложенияСрезПоследних.Склад <> ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
	|				И ПрименениеСистемНалогообложенияСрезПоследних.ТоварнаяГруппа <> ЗНАЧЕНИЕ(Справочник.ТоварныеГруппы.ПустаяСсылка)
	|			ТОГДА 1
	|		КОГДА ПрименениеСистемНалогообложенияСрезПоследних.Магазин <> ЗНАЧЕНИЕ(Справочник.Магазины.ПустаяСсылка)
	|				И ПрименениеСистемНалогообложенияСрезПоследних.Склад = ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
	|				И ПрименениеСистемНалогообложенияСрезПоследних.ТоварнаяГруппа <> ЗНАЧЕНИЕ(Справочник.ТоварныеГруппы.ПустаяСсылка)
	|			ТОГДА 2
	|		КОГДА ПрименениеСистемНалогообложенияСрезПоследних.Магазин = ЗНАЧЕНИЕ(Справочник.Магазины.ПустаяСсылка)
	|				И ПрименениеСистемНалогообложенияСрезПоследних.Склад = ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
	|				И ПрименениеСистемНалогообложенияСрезПоследних.ТоварнаяГруппа <> ЗНАЧЕНИЕ(Справочник.ТоварныеГруппы.ПустаяСсылка)
	|			ТОГДА 3
	|		КОГДА ПрименениеСистемНалогообложенияСрезПоследних.Магазин <> ЗНАЧЕНИЕ(Справочник.Магазины.ПустаяСсылка)
	|				И ПрименениеСистемНалогообложенияСрезПоследних.Склад <> ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
	|				И ПрименениеСистемНалогообложенияСрезПоследних.ТоварнаяГруппа = ЗНАЧЕНИЕ(Справочник.ТоварныеГруппы.ПустаяСсылка)
	|			ТОГДА 4
	|		КОГДА ПрименениеСистемНалогообложенияСрезПоследних.Магазин <> ЗНАЧЕНИЕ(Справочник.Магазины.ПустаяСсылка)
	|				И ПрименениеСистемНалогообложенияСрезПоследних.Склад = ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
	|				И ПрименениеСистемНалогообложенияСрезПоследних.ТоварнаяГруппа = ЗНАЧЕНИЕ(Справочник.ТоварныеГруппы.ПустаяСсылка)
	|			ТОГДА 5
	|		КОГДА ПрименениеСистемНалогообложенияСрезПоследних.Магазин = ЗНАЧЕНИЕ(Справочник.Магазины.ПустаяСсылка)
	|				И ПрименениеСистемНалогообложенияСрезПоследних.Склад = ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
	|				И ПрименениеСистемНалогообложенияСрезПоследних.ТоварнаяГруппа = ЗНАЧЕНИЕ(Справочник.ТоварныеГруппы.ПустаяСсылка)
	|			ТОГДА 6
	|	КОНЕЦ КАК Приоритет
	|ИЗ
	|	ВТСистемыНалогообложения КАК ПрименениеСистемНалогообложенияСрезПоследних
	|
	|УПОРЯДОЧИТЬ ПО
	|	Приоритет";
	
	Запрос.УстановитьПараметр("Дата", 			НачалоДня(Дата));
	Запрос.УстановитьПараметр("Организация", 	Организация);
	Запрос.УстановитьПараметр("Магазин", 		?(ЗначениеЗаполнено(Магазин), Магазин, ПредопределенноеЗначение("Справочник.Магазины.ПустаяСсылка")));
	Запрос.УстановитьПараметр("Склад", 			?(ЗначениеЗаполнено(Склад), Склад, ПредопределенноеЗначение("Справочник.Склады.ПустаяСсылка")));
	Запрос.УстановитьПараметр("ТоварнаяГруппа", ?(ЗначениеЗаполнено(ТоварнаяГруппа), ТоварнаяГруппа, ПредопределенноеЗначение("Справочник.ТоварныеГруппы.ПустаяСсылка")));
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Выборка.СистемаНалогообложения;
	Иначе
		Возврат Перечисления.ТипыСистемНалогообложенияККТ.ПустаяСсылка();
	КонецЕсли;
	
КонецФункции

// Заполняет свойство СистемаНалогообложения у переданного Объекта.
//
// Параметры:
//  Объект - ОбъектМетаданных - объект сл свойствами: Ссылка, Дата, Организация, Магазин, Склад, СистемаНалогообложения.
//
Процедура ЗаполнитьСистемуНалогообложения(Объект) Экспорт
	
	Если ТипЗнч(Объект.Ссылка) = Тип("ДокументСсылка.ОтчетКомитентуОПродажах") Тогда
		Возврат;
	КонецЕсли;
	
	Объект.СистемаНалогообложения = ПолучитьСистемуНалогообложения(
			Объект.Дата, 
			Объект.Организация, 
			Объект.Магазин, 
			Объект.Склад);
	
КонецПроцедуры

// Заполняет данные покупателя. Теги 1227 и 1228.
//
// Параметры:
//  ОбщиеПараметры - Структура - См. описание МенеджерОборудованияКлиентСервер.ПараметрыОперацииФискализацииЧека.
//  РеквизитыДокумента - Структура - реквизиты документа для заполнения;
//  ТребуетсяУказаниеДанныхФизЛица - Булево - если операция соответствует п. 6.1, 6.2 ст. 4.7 Закона № 54-ФЗ,
//    требуется указание данных (наименование, ИНН и пр.) для физ. лица.
//
Процедура ЗаполнитьДанныеПокупателя(ОбщиеПараметры, РеквизитыДокумента, ТребуетсяУказаниеДанныхФизЛица = Ложь) Экспорт
	
	КонтрагентРозничныйПокупатель = Константы.КонтрагентРозничныйПокупатель.Получить();
	Если ЗначениеЗаполнено(РеквизитыДокумента.Контрагент)
		И НЕ КонтрагентРозничныйПокупатель = РеквизитыДокумента.Контрагент Тогда
		
		РеквизитыПокупателя = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(РеквизитыДокумента.Контрагент, "Наименование, ИНН, ДокументУдостоверяющийЛичность, ЮрФизЛицо, ФизЛицо");
		Если РеквизитыПокупателя.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ФизЛицо
			И НЕ ТребуетсяУказаниеДанныхФизЛица Тогда
			Возврат;
		КонецЕсли;
		
		Если РеквизитыПокупателя.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ФизЛицо
			И ЗначениеЗаполнено(РеквизитыПокупателя.ФизЛицо) Тогда
			
			ДокументУдостоверяющийЛичность = РегистрыСведений.ДокументыФизическихЛиц.ДокументУдостоверяющийЛичностьФизлица(РеквизитыПокупателя.ФизЛицо);
			РеквизитыПокупателя = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(РеквизитыПокупателя.ФизЛицо, "Наименование, ИНН");
			Если ОбщиеПараметры.Свойство("ЕстьПерсональныеДанные") И ЗначениеЗаполнено(ДокументУдостоверяющийЛичность) Тогда 
				ОбщиеПараметры.ЕстьПерсональныеДанные = Истина;
			КонецЕсли;
		Иначе
			ДокументУдостоверяющийЛичность = РеквизитыПокупателя.ДокументУдостоверяющийЛичность;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ДокументУдостоверяющийЛичность) Тогда
			ДокументУдостоверяющийЛичность = " " + СокрЛП(ДокументУдостоверяющийЛичность);
		КонецЕсли;
		
		Если ОбщиеПараметры.Свойство("Получатель") Тогда
			ОбщиеПараметры.Получатель    = РеквизитыПокупателя.Наименование + ДокументУдостоверяющийЛичность;
		ИначеЕсли ОбщиеПараметры.Свойство("Покупатель") Тогда
			ОбщиеПараметры.Покупатель    = РеквизитыПокупателя.Наименование + ДокументУдостоверяющийЛичность;
		КонецЕсли;
		
		Если ОбщиеПараметры.Свойство("ПолучательИНН") Тогда
			ОбщиеПараметры.ПолучательИНН    = РеквизитыПокупателя.ИНН;
		ИначеЕсли ОбщиеПараметры.Свойство("ПокупательИНН") Тогда
			ОбщиеПараметры.ПокупательИНН    = РеквизитыПокупателя.ИНН;
		КонецЕсли;
		
		Если ОбщиеПараметры.СведенияОПокупателе.Свойство("Покупатель") Тогда
			ОбщиеПараметры.СведенияОПокупателе.Покупатель = РеквизитыПокупателя.Наименование + ДокументУдостоверяющийЛичность;
		КонецЕсли;
		
		Если ОбщиеПараметры.СведенияОПокупателе.Свойство("ПокупательИНН") Тогда
			ОбщиеПараметры.СведенияОПокупателе.ПокупательИНН    = РеквизитыПокупателя.ИНН;
		КонецЕсли;
		
		Если ОбщиеПараметры.Свойство("СубъектПерсональныхДанных") Тогда
			ОбщиеПараметры.СубъектПерсональныхДанных = РеквизитыДокумента.Контрагент.ФизЛицо;
		КонецЕсли;
		
		Если ОбщиеПараметры.СведенияОПокупателе.Свойство("ПокупательАдрес") Тогда
			ОбщиеПараметры.СведенияОПокупателе.ПокупательАдрес = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(РеквизитыДокумента.Контрагент, "ЮрАдресКонтрагента");
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Дополняет кэшируемые СНО, если найдена, то возвращает систему налогооблочения
// 
// Параметры:
//  КэшСНО - Соответствие, где ключ, Договор, Значение Перечисление.ТипыСистемНалогообложенияККТ
//
// Возвращаемое значение:
// Перечисление.ТипыСистемНалогообложенияККТ
//
Функция КэшируемыеСНО(Договор, КэшСНО) Экспорт
	
	// Найти есть ли Договор в соответствии
	УчетНДСУКомитента = КэшСНО[Договор];
	Если УчетНДСУКомитента = Неопределено Тогда
		
		УчетНДСУКомитента = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Договор, "УчетНДСУКомитента");
		КэшСНО.Вставить(Договор, УчетНДСУКомитента);
	
	КонецЕсли;
	
	Возврат УчетНДСУКомитента;
	
КонецФункции

// Перезаполнить НДС по СНО Комитента
//
// Параметры:
//  СтрокаПозицииЧека - Структура см. МенеджерОборудованияКлиентСервер.ПараметрыФискальнойСтрокиЧека();
//  Номенклатура - Справочник.Номенклатура
//  УчетНДСУКомитента - Перечисление.УчетНДСУКомитента 
//  ЭтоАванс - Булево, Признак предмета расчета
//  ПараметрыЗаполнения - Структура содержит свойства "СтавкаНДСБезНДС" и "ФорматБПО"
//
Процедура ПерезаполнитьНДСКомитента(СтрокаПозицииЧека, Номенклатура, УчетНДСУКомитента, ЭтоАванс, ПараметрыЗаполнения = Неопределено) Экспорт
	
	Если НЕ ЗначениеЗаполнено(УчетНДСУКомитента) Тогда
		Возврат;
	КонецЕсли;
	
	Если УчетНДСУКомитента = Перечисления.УчетНДСУКомитента.ПустаяСсылка() Тогда
		Возврат;
	КонецЕсли;
	
	СтавкаНДСБезНДС = Неопределено;
	ФорматБПО = Истина;
	Если ТипЗнч(ПараметрыЗаполнения) = Тип("Структура") Тогда
		ПараметрыЗаполнения.Свойство("СтавкаНДСБезНДС", СтавкаНДСБезНДС);
		ПараметрыЗаполнения.Свойство("ФорматБПО", ФорматБПО);
	КонецЕсли;
	
	Если УчетНДСУКомитента = Перечисления.УчетНДСУКомитента.НеВыделятьНДСЗаКомиссионныеТоварыПриПечатиЧека Тогда
		// Обнуляем НДС
		СтрокаПозицииЧека.СтавкаНДС = СтавкаНДСБезНДС;
		СтрокаПозицииЧека.СуммаНДС  = 0;
	Иначе
		// Пересчитываем НДС
		СтавкаНДС = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Номенклатура, "СтавкаНДС");
		СтрокаПозицииЧека.СтавкаНДС = ?(ФорматБПО = Истина, ПодключаемоеОборудованиеРТ.СтавкаНДСВФорматеБПО(СтавкаНДС, ЭтоАванс), СтавкаНДС);
		СтрокаПозицииЧека.СуммаНДС = ОбработкаТабличнойЧастиТоварыКлиентСервер.СуммаНДС(СтрокаПозицииЧека.Сумма, 
																							СтавкаНДС, 
																							Истина);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ПроцедурыПоискаИОпределенияТиповШтрихкодов

// Обработка полученного штрихкода.
//
// Штрихкод - Строка - полученный штрихкод со сканера.
// Форма - УправляемаяФорма - форма родитель в которой определен обработчик действия "ПолученыШтрихкоды".
//
// Возвращаемое значение:
//  Структура - данные штрихкода.
//
Функция ДанныеПоискаПоШтрихкоду(Штрихкод, Форма) Экспорт
	
	Если Форма.ПараметрыСобытийПО = Неопределено Тогда
		СтруктураДействий = Новый Структура;
	Иначе
		СтруктураДействий = Форма.ПараметрыСобытийПО;
	КонецЕсли;
	
	Если НЕ Константы.ИспользоватьУпрощенныйАлгоритмПоискаПоШтрихкоду.Получить() Тогда
		
		ИскатьПоАкцизнойМарке = Ложь;
		Если ПолучитьФункциональнуюОпцию("ВестиСведенияДляДекларацийПоАлкогольнойПродукции") Тогда
			Если ШтрихкодированиеОбщегоНазначенияЕГАИС.ЭтоШтрихкодАкцизнойМарки(Штрихкод) Тогда
				Если СтруктураДействий.Свойство("ПоискАкцизнойМарки") Тогда
					ИскатьПоАкцизнойМарке = Истина;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Если Не ИскатьПоАкцизнойМарке Тогда
			РаботаСоШтрихкодамиРТ.ОпределитьФильтрПоискаШтрихкода(Форма);
			Возврат РаботаСоШтрихкодами.ДанныеПоискаПоШтрихкоду(Штрихкод, Форма);
		КонецЕсли;
		
	КонецЕсли;
	
	ТипШтрихкодаРТ = ТипШтрихкода(Штрихкод);
	НеизвестныеДанныеПО = Истина;
	
	Запрос = Новый Запрос;
	ТекстЗапроса = "";
	
	НайденоОбъектов = 0;
	СтруктураПараметров = СтруктураДанныхПоиска();
	ДоступенВводНомераТелефонаИлиАдресаЭП = ШтрихкодированиеРТКлиентСервер.ДоступенВводНомераТелефонаИлиАдресаЭП(Форма);
	
	Если ДоступенВводНомераТелефонаИлиАдресаЭП
		И ШтрихкодированиеРТКлиентСервер.ТелефонКорректен(Штрихкод) Тогда
		
		НомерТелефона   = ШтрихкодированиеРТКлиентСервер.ПодготовитьТелефон(ШтрихКод);
		ПолныйНомер   	= НСтр("ru = '7'") + НомерТелефона;
		
		ШтрихкодированиеРТ.НайтиДисконтнуюКарту(Форма, СтруктураПараметров, ПолныйНомер, "НомерТелефона", НеизвестныеДанныеПО, НайденоОбъектов);
		
		Если НайденоОбъектов = 0 Тогда
			ШтрихкодированиеРТ.НайтиДисконтнуюКарту(Форма, СтруктураПараметров, ШтрихКод, "КодКарты", НеизвестныеДанныеПО, НайденоОбъектов);
		КонецЕсли;
		
	ИначеЕсли ДоступенВводНомераТелефонаИлиАдресаЭП
		И ШтрихкодированиеРТКлиентСервер.ЕмаилКорректен(Штрихкод) Тогда
		
		ШтрихкодированиеРТ.НайтиДисконтнуюКарту(Форма, СтруктураПараметров, Штрихкод, "Email", НеизвестныеДанныеПО, НайденоОбъектов);
		
		Если НайденоОбъектов = 0 Тогда
			
			СтруктураШтрихкода = Новый Структура;
			
			СтруктураШтрихкода.Вставить("ДанныеПО", 	Штрихкод);
			СтруктураШтрихкода.Вставить("АдресЭП", 		Штрихкод);
			СтруктураШтрихкода.Вставить("Штрихкод", 	Штрихкод);
			СтруктураШтрихкода.Вставить("МагнитныйКод", "");
			СтруктураШтрихкода.Вставить("Количество", 	1);
			
			СтруктураПараметров.ЗначенияПоиска.Добавить(СтруктураШтрихкода);
			
			НайденоОбъектов = 1;
			
		КонецЕсли;
		
		НеизвестныеДанныеПО = Ложь;
			
	КонецЕсли;
	
	// Весовые товары и штучные на весах.
	Если ТипШтрихкодаРТ = ПланыВидовХарактеристик.ТипыШтрихкодов.EAN13 Тогда
		
		ПрефиксВнутреннегоШтрихкодаВесовогоТовара = ЗначениеНастроекПовтИсп.ПолучитьЗначениеКонстанты("ПрефиксВнутреннегоШтрихкодаВесовогоТовара");
		ПрефиксВнутреннегоШтрихкодаШтучногоФасованногоТовара = ЗначениеНастроекПовтИсп.ПолучитьЗначениеКонстанты("ПрефиксВнутреннегоШтрихкодаШтучногоФасованногоТовара");
		ДлинаКодаВесовогоТовара = СтрДлина(Формат(ЗначениеНастроекПовтИсп.ПолучитьЗначениеКонстанты("ВерхняяГраницаДиапазонаSKUВесовогоТовара"), "ЧГ = 0"));
		
		ПрефиксКода = Лев(Штрихкод, 2);
		ПрефиксВесовой = "2" + ПрефиксВнутреннегоШтрихкодаВесовогоТовара;
		ПрефиксШтучный = "2" + ПрефиксВнутреннегоШтрихкодаШтучногоФасованногоТовара;
		ЭтоВесовой = ПрефиксКода = ПрефиксВесовой;
		ЭтоШтучный = ПрефиксКода = ПрефиксШтучный;
		
		Если ДлинаКодаВесовогоТовара < 5 Тогда
			ДлинаКодаВесовогоТовара = 5;
		КонецЕсли;
		
		Если ЭтоВесовой ИЛИ ЭтоШтучный Тогда
			
			КодТовара        = Число(Сред(Штрихкод, 3,  ДлинаКодаВесовогоТовара));
			КоличествоТовара = Число(Сред(Штрихкод, 3 + ДлинаКодаВесовогоТовара, 10 - ДлинаКодаВесовогоТовара));
			Если ЭтоВесовой Тогда // В количестве указан вес.
				КоличествоТовара = КоличествоТовара / 1000;
			КонецЕсли;
			 
			ТекстЗапроса = "
			|ВЫБРАТЬ
			|	0 КАК НомерСтроки,
			|	КодыТоваровSKU.Номенклатура КАК Владелец,
			|	КодыТоваровSKU.Характеристика КАК Характеристика,
			|	КодыТоваровSKU.Упаковка КАК Упаковка,
			|	&ТипШтрихкода КАК ТипШтрихкода,
			|	&КоличествоТовара КАК Количество,
			|	&ПустойШтрихКодУпаковки КАК ШтрихкодУпаковкиЕГАИС,
			|	&ПустойТипУпаковки КАК ТипУпаковки
			|ИЗ
			|	РегистрСведений.КодыТоваровSKU КАК КодыТоваровSKU
			|ГДЕ
			|	КодыТоваровSKU.SKU = &Код
			|
			|ОБЪЕДИНИТЬ ВСЕ 
			|
			|ВЫБРАТЬ
			|	0,
			|	Штрихкоды.Владелец КАК Владелец,
			|	Штрихкоды.Характеристика КАК Характеристика,
			|	Штрихкоды.Упаковка КАК Упаковка,
			|	Штрихкоды.ТипШтрихкода КАК ТипШтрихкода,
			|	1 КАК Количество,
			|	&ПустойШтрихКодУпаковки,
			|	&ПустойТипУпаковки
			|ИЗ
			|	РегистрСведений.Штрихкоды КАК Штрихкоды
			|ГДЕ
			|	Штрихкоды.Штрихкод = &Штрихкод
			|";
			
			Запрос.УстановитьПараметр("Код", КодТовара);
			Запрос.УстановитьПараметр("КоличествоТовара", КоличествоТовара);
			
		КонецЕсли;
		
	ИначеЕсли ПолучитьФункциональнуюОпцию("ВестиСведенияДляДекларацийПоАлкогольнойПродукции") Тогда
		Если ШтрихкодированиеОбщегоНазначенияЕГАИС.ЭтоШтрихкодАкцизнойМарки(Штрихкод) Тогда
			Если СтруктураДействий.Свойство("ПоискАкцизнойМарки") Тогда
				НайтиПоАкцизнойМарке(Форма, СтруктураПараметров, Штрихкод, ТипШтрихкодаРТ, НеизвестныеДанныеПО, НайденоОбъектов);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	ДанныеМаркировки = Неопределено;
	
	Если НайденоОбъектов = 0 Тогда
		
		Если ПустаяСтрока(ТекстЗапроса) Тогда
			
			ДанныеМаркировки = МенеджерОборудованияМаркировкаКлиентСервер.РазобратьКодМаркировки(Штрихкод);
			Если ДанныеМаркировки.Разобран Тогда
				
				//ИнтеграцияИСМПТК_РозничноеВыбытие
				//Вмешательство необходимо для случаев, когда в базе не ведется учет маркировки
				EAN = "";
				Если ЗначениеЗаполнено(ДанныеМаркировки.ГлобальныйИдентификаторТорговойЕдиницы)
					И Не ЗначениеЗаполнено(ДанныеМаркировки.EAN) Тогда
					EAN = РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйКлиентСервер.EANПоGTIN(ДанныеМаркировки.ГлобальныйИдентификаторТорговойЕдиницы);
				КонецЕсли;
				Если EAN = "" Тогда
					EAN = ДанныеМаркировки.EAN;
				КонецЕсли;
				//Конец ИнтеграцияИСМПТК_РозничноеВыбытие
			
				ТекстЗапроса = "ВЫБРАТЬ
				|	0 КАК НомерСтроки,
				|	Штрихкоды.Владелец КАК Владелец,
				|	Штрихкоды.Характеристика КАК Характеристика,
				|	Штрихкоды.Упаковка КАК Упаковка,
				|	Штрихкоды.ТипШтрихкода КАК ТипШтрихкода,
				|	1 КАК Количество,
				|	&ПустойШтрихКодУпаковки КАК ШтрихкодУпаковкиЕГАИС,
				|	&ПустойТипУпаковки КАК ТипУпаковки
				|ИЗ
				|	РегистрСведений.Штрихкоды КАК Штрихкоды
				|ГДЕ
				|	Штрихкоды.Штрихкод = &EAN
				|";
				//ИнтеграцияИСМПТК_РозничноеВыбытие
				Запрос.УстановитьПараметр("EAN", EAN);
				//Конец ИнтеграцияИСМПТК_РозничноеВыбытие				
			Иначе
				
				ТекстЗапроса = "ВЫБРАТЬ
				|	0 КАК НомерСтроки,
				|	Штрихкоды.Владелец КАК Владелец,
				|	Штрихкоды.Характеристика КАК Характеристика,
				|	Штрихкоды.Упаковка КАК Упаковка,
				|	Штрихкоды.ТипШтрихкода КАК ТипШтрихкода,
				|	1 КАК Количество,
				|	&ПустойШтрихКодУпаковки КАК ШтрихкодУпаковкиЕГАИС,
				|	&ПустойТипУпаковки КАК ТипУпаковки
				|ИЗ
				|	РегистрСведений.Штрихкоды КАК Штрихкоды
				|ГДЕ
				|	Штрихкоды.Штрихкод = &Штрихкод
				|
				|ОБЪЕДИНИТЬ ВСЕ
				|
				|ВЫБРАТЬ
				|	0,
				|	Штрихкоды.Номенклатура,
				|	Штрихкоды.Характеристика,
				|	ВЫБОР
				|		КОГДА Штрихкоды.Упаковка ССЫЛКА Справочник.УпаковкиНоменклатуры
				|			ТОГДА Штрихкоды.Упаковка
				|		ИНАЧЕ &ПустаяУпаковка
				|	КОНЕЦ,
				|	&ТипШтрихкода,
				|	ВЫБОР
				|		КОГДА Штрихкоды.Количество = 0
				|			ТОГДА 1
				|		ИНАЧЕ Штрихкоды.Количество
				|	КОНЕЦ,
				|	Штрихкоды.Ссылка,
				|	Штрихкоды.ТипУпаковки
				|ИЗ
				|	Справочник.ШтрихкодыУпаковокТоваров КАК Штрихкоды
				|ГДЕ
				|	Штрихкоды.ЗначениеШтрихкода = &Штрихкод";
				
			КонецЕсли;
		КонецЕсли;
		
		Запрос.Текст = ТекстЗапроса;
		Запрос.УстановитьПараметр("Штрихкод", Штрихкод);
		Запрос.УстановитьПараметр("ТипШтрихкода", ТипШтрихкодаРТ);
		Запрос.УстановитьПараметр("ПустаяУпаковка", Справочники.УпаковкиНоменклатуры.ПустаяСсылка());
		Запрос.УстановитьПараметр("ПустойШтрихКодУпаковки", Справочники.ШтрихкодыУпаковокТоваров.ПустаяСсылка());
		Запрос.УстановитьПараметр("ПустойТипУпаковки", Перечисления.ТипыУпаковок.ПустаяСсылка());
		Запрос.УстановитьПараметр("ТипУпаковки", Перечисления.ТипыУпаковок.МаркированныйТовар);
		РезультатЗапроса = Запрос.Выполнить();
		Выборка = РезультатЗапроса.Выбрать();
		НайденоОбъектов = Выборка.Количество();
		ДополнитьСтруктуруРезультатамиПоиска(СтруктураПараметров, Выборка, Штрихкод, "", НеизвестныеДанныеПО, ДанныеМаркировки);
		
	КонецЕсли;
	
	// Индивидуальные серии по номеру.
	СерияВТЧТовары = Ложь;
	МассивФормПоискаШтрихкодаВСериях = МассивФормПоискаШтрихкодаВСериях();
	ИмяФормы = Форма.ИмяФормы;
	Если НайденоОбъектов = 0 
		И ПолучитьФункциональнуюОпцию("ИспользоватьСерииНоменклатуры")
		И НЕ МассивФормПоискаШтрихкодаВСериях.Найти(ИмяФормы) = Неопределено
		Тогда
		МассивФорм = МассивСерияВТЧТовары();
		СерияВТЧТовары = НЕ МассивФорм.Найти(ИмяФормы) = Неопределено;
		
		ЗапросСерии = Новый Запрос;
		ЗапросСерии.Текст = 
		"ВЫБРАТЬ
		|	ВЫРАЗИТЬ(ТаблицаСерии.Серия КАК Справочник.СерииНоменклатуры) КАК Серия,
		|	ТаблицаСерии.Номенклатура КАК Номенклатура,
		|	ТаблицаСерии.Характеристика КАК Характеристика
		|ПОМЕСТИТЬ ТаблицаСерий
		|ИЗ
		|	&Серии КАК ТаблицаСерии
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаСерий.Серия КАК Серия,
		|	ТаблицаСерий.Номенклатура КАК Номенклатура,
		|	ТаблицаСерий.Характеристика КАК Характеристика
		|ИЗ
		|	ТаблицаСерий КАК ТаблицаСерий
		|ГДЕ
		|	ТаблицаСерий.Серия.Номер = &Номер";
		
		ЗапросСерии.УстановитьПараметр("Номер", Штрихкод);
		ИменаТЧ = УникальныеИменаТабличныхЧастей(ИмяФормы);
		Если СерияВТЧТовары Тогда
			ЗапросСерии.УстановитьПараметр("Серии"   , Форма.Объект[ИменаТЧ.Товары].Выгрузить());
		Иначе
			ЗапросСерии.УстановитьПараметр("Серии"   , Форма.Объект[ИменаТЧ.Серии].Выгрузить());
		КонецЕсли;
		
		РезультатСерии = ЗапросСерии.Выполнить();
		Если НЕ РезультатСерии.Пустой() Тогда
			Выборка = РезультатСерии.Выбрать();
			
			Если Выборка.Следующий() Тогда
				
				СтруктураПоиска = Новый Структура;
				СтруктураПоиска.Вставить("Номенклатура"  , Выборка.Номенклатура);
				СтруктураПоиска.Вставить("Характеристика", Выборка.Характеристика);
				СтрокиНоменклатуры = Форма.Объект[ИменаТЧ.Товары].НайтиСтроки(СтруктураПоиска);
				
				Если СтрокиНоменклатуры.Количество() > 0 Тогда
					НайденнаяСтрока = СтрокиНоменклатуры[0];
					ИдентификаторСтроки = НайденнаяСтрока.ПолучитьИдентификатор();
					НеизвестныеДанныеПО = Ложь;
					
					СтруктураШтрихкода = Новый Структура;
					Если ЗначениеЗаполнено(СтруктураПараметров.ДанныеПО) Тогда
						СтруктураШтрихкода.Вставить("ДанныеПО", СтруктураПараметров.ДанныеПО);
					ИначеЕсли ЗначениеЗаполнено(Штрихкод) Тогда
						СтруктураШтрихкода.Вставить("ДанныеПО", Штрихкод);
					КонецЕсли;
					СтруктураШтрихкода.Вставить("Штрихкод", Штрихкод);
					СтруктураШтрихкода.Вставить("МагнитныйКод", "");
					СтруктураШтрихкода.Вставить("Количество", 1);
					
					СтруктураПараметров.ЗначенияПоиска.Добавить(СтруктураШтрихкода);
					СтруктураПараметров.Вставить("АктивизироватьСтроку", ИдентификаторСтроки);
					СтруктураПараметров.Вставить("ТекстПредупреждения", НСтр("ru = 'Серия уже считана в этом документе'"));
					СтруктураПараметров.Вставить("ДействиеОтменено");
					НайденоОбъектов = 1;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Если НайденоОбъектов = 0 Тогда
			Запрос = Новый Запрос;
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	0 КАК НомерСтроки,
			|	СерииНоменклатуры.Номер КАК Номер,
			|	СерииНоменклатуры.ВладелецСерии КАК Номенклатура,
			|	1 КАК Количество,
			|	&ПустаяУпаковка КАК Упаковка,
			|	&ТипШтрихкода КАК ТипШтрихкода,
			|	&ПустойШтрихКодУпаковки КАК ШтрихкодУпаковкиЕГАИС,
			|	&ПустойТипУпаковки КАК ТипУпаковки,
			|	СерииНоменклатуры.Ссылка КАК Владелец,
			|	&ИспользоватьХарактеристики
			|		И СерииНоменклатуры.ВидНоменклатуры.ИспользоватьХарактеристики КАК ИспользоватьХарактеристики,
			|	ВЫБОР
			|		КОГДА СерииНоменклатуры.ВидНоменклатуры.ИспользованиеХарактеристик = &ХарактеристикиИндивидуальные
			|			ТОГДА СерииНоменклатуры.ВладелецСерии
			|		ИНАЧЕ СерииНоменклатуры.ВидНоменклатуры
			|	КОНЕЦ КАК ВладелецХарактеристики
			|ИЗ
			|	Справочник.СерииНоменклатуры КАК СерииНоменклатуры
			|ГДЕ
			|	СерииНоменклатуры.ВидНоменклатуры.ИспользованиеСерий = &ИспользованиеСерий
			|	И СерииНоменклатуры.Номер = &ШтрихКод";
			
			Запрос.УстановитьПараметр("ИспользованиеСерий"          , Перечисления.ВариантыВеденияДополнительныхДанныхПоНоменклатуре.ИндивидуальныеДляНоменклатуры);
			Запрос.УстановитьПараметр("ХарактеристикиИндивидуальные", Перечисления.ВариантыВеденияДополнительныхДанныхПоНоменклатуре.ИндивидуальныеДляНоменклатуры);
			Запрос.УстановитьПараметр("Штрихкод"                    , Штрихкод);
			Запрос.УстановитьПараметр("ПустаяУпаковка"              , Справочники.УпаковкиНоменклатуры.ПустаяСсылка());
			Запрос.УстановитьПараметр("ПустойШтрихКодУпаковки"      , Справочники.ШтрихкодыУпаковокТоваров.ПустаяСсылка());
			Запрос.УстановитьПараметр("ПустойТипУпаковки"           , Перечисления.ТипыУпаковок.ПустаяСсылка());
			Запрос.УстановитьПараметр("ТипШтрихкода"                , ТипШтрихкодаРТ);
			Запрос.УстановитьПараметр("ИспользоватьХарактеристики"  , ПолучитьФункциональнуюОпцию("ИспользоватьХарактеристикиНоменклатуры"));
			
			Результат = Запрос.Выполнить();
			Выборка = Результат.Выбрать();
			НайденоОбъектов = Выборка.Количество();
			
			ДополнитьСтруктуруРезультатамиПоиска(СтруктураПараметров, Выборка, Штрихкод, "", НеизвестныеДанныеПО, ДанныеМаркировки);
			
		КонецЕсли;
	КонецЕсли;
	
	Если НайденоОбъектов = 0 Тогда
		ДополнитьСтруктуруДляРегистрацииНовогоОбъекта(
			СтруктураПараметров,
			Штрихкод,
			СтруктураДействий,
			НеизвестныеДанныеПО,
			ТипШтрихкодаРТ,
			Истина);
		
	КонецЕсли;
	
	СтруктураПараметров.НеизвестныеДанныеПО = НеизвестныеДанныеПО;
	
	Позиция = НайтиНедопустимыеСимволыXML(Штрихкод);
	Если Позиция > 0 Тогда
		Штрихкод = Лев(Штрихкод, Позиция - 1);
	КонецЕсли;
	
	СтруктураПараметров.ДанныеПО = Штрихкод;
	СтруктураПараметров.ТипДанныхПО = "Штрихкод";
	
	Возврат СтруктураПараметров;
	
КонецФункции

// Подготовка данных для выбора.
//
// Параметры:
//  СтруктураРезультат - Структура - структура данных для выбора.
//
Процедура ПодготовитьДанныеДляВыбора(СтруктураРезультат) Экспорт
	
	ТаблицаВыбора = Новый ТаблицаЗначений;
	ТаблицаВыбора.Колонки.Добавить("ШтрихКод");
	ТаблицаВыбора.Колонки.Добавить("ТипШтрихКода");
	ТаблицаВыбора.Колонки.Добавить("Номенклатура");
	ТаблицаВыбора.Колонки.Добавить("Характеристика");
	ТаблицаВыбора.Колонки.Добавить("Упаковка");
	ТаблицаВыбора.Колонки.Добавить("Серия");
	ТаблицаВыбора.Колонки.Добавить("ИспользоватьХарактеристики");
	ТаблицаВыбора.Колонки.Добавить("ВладелецХарактеристики");
	ТаблицаВыбора.Колонки.Добавить("Количество");
	ТаблицаВыбора.Колонки.Добавить("СерийныйНомер");
	ТаблицаВыбора.Колонки.Добавить("Карта");
	ТаблицаВыбора.Колонки.Добавить("ВладелецКарты");
	ТаблицаВыбора.Колонки.Добавить("ТипКарты");
	ТаблицаВыбора.Колонки.Добавить("ШтрихкодУпаковкиЕГАИС");
	ТаблицаВыбора.Колонки.Добавить("ТипУпаковки");
	
	Для Каждого СтрокаТовара Из СтруктураРезультат.ЗначенияПоиска Цикл
		НоваяСтрока = ТаблицаВыбора.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТовара);
	КонецЦикла;
	
	СтруктураВыбора = Новый Структура;
	СтруктураВыбора.Вставить("ТаблицаВыбора", ТаблицаВыбора);
	Если СтруктураРезультат.ТипДанныхПО = "Штрихкод" Тогда
		СтруктураВыбора.Вставить("Штрихкод", СтруктураРезультат.ДанныеПО);
	ИначеЕсли СтруктураРезультат.ТипДанныхПО = "МагнитныйКод" Тогда
		СтруктураВыбора.Вставить("МагнитныйКод", СтруктураРезультат.ДанныеПО);
	КонецЕсли;
	СтруктураРезультат.Вставить("ВыборДанныхПоиска", ПоместитьВоВременноеХранилище(СтруктураВыбора));
	
КонецПроцедуры

// Возвращает тип штрихкода по значению.
//
// Параметры:
//  Штрихкод - Строка - штрихкод по которому определяется тип.
// 
// Возвращаемое значение:
//  ПланыВидовХарактеристик.ТипыШтрихкодов - тип штрихкода.
//
Функция ТипШтрихкода(Штрихкод) Экспорт
	
	ТипШтрихкодаРТ = ПланыВидовХарактеристик.ТипыШтрихкодов.ПустаяСсылка();
	ТипШтрихкодаВрем = МенеджерОборудованияКлиентСервер.ОпределитьТипШтрихкода(Штрихкод);
	
	Если ТипШтрихкодаВрем = "EAN8" Тогда
		ТипШтрихкодаРТ = ПланыВидовХарактеристик.ТипыШтрихкодов.EAN8;
	ИначеЕсли ТипШтрихкодаВрем = "EAN13" Тогда
		ТипШтрихкодаРТ = ПланыВидовХарактеристик.ТипыШтрихкодов.EAN13;
	ИначеЕсли ТипШтрихкодаВрем = "EAN128" Тогда
		ТипШтрихкодаРТ = ПланыВидовХарактеристик.ТипыШтрихкодов.EAN128;
	ИначеЕсли ТипШтрихкодаВрем = "CODE39" Тогда
		ТипШтрихкодаРТ = ПланыВидовХарактеристик.ТипыШтрихкодов.CODE39;
	ИначеЕсли ТипШтрихкодаВрем = "CODE128" Тогда
		ТипШтрихкодаРТ = ПланыВидовХарактеристик.ТипыШтрихкодов.CODE128;
	ИначеЕсли ТипШтрихкодаВрем = "ITF14" Тогда
		ТипШтрихкодаРТ = ПланыВидовХарактеристик.ТипыШтрихкодов.ITF14;
	КонецЕсли;
	
	Возврат ТипШтрихкодаРТ;
	
КонецФункции

// Вычисляет контрольный символ кода EAN.
//
// Параметры:
//  Штрихкод -Строка - штрихкод (без контрольной цифры).
//  Тип - Число - тип штрихкода: 13 - EAN13, 8 - EAN8.
//
// Возвращаемое значение:
//  Число - контрольный символ штрихкода.
//
Функция КонтрольныйСимволEAN(Штрихкод, Тип) Экспорт

	Четные   = 0;
	Нечетные = 0;

	КоличествоИтераций = ?(Тип = 13, 6, 4);

	Для Индекс = 1 По КоличествоИтераций Цикл
		Если (Тип = 8) И (Индекс = КоличествоИтераций) Тогда
		Иначе
			Четные   = Четные   + Сред(ШтрихКод, 2 * Индекс, 1);
		КонецЕсли;
		Нечетные = Нечетные + Сред(ШтрихКод, 2 * Индекс - 1, 1);
	КонецЦикла;

	Если Тип = 13 Тогда
		Четные = Четные * 3;
	Иначе
		Нечетные = Нечетные * 3;
	КонецЕсли;

	КонтрольнаяЦифра = 10 - (Четные + Нечетные) % 10;

	Возврат ?(КонтрольнаяЦифра = 10, "0", Строка(КонтрольнаяЦифра));

КонецФункции 

// Обработка полученного штрихкода.
//
// Штрихкод - Строка - полученный штрихкод со сканера.
// Форма - УправляемаяФорма - форма родитель в которой определен обработчик действия "ПолученыШтрихкоды".
//
// Возвращаемое значение:
//  Структура - данные штрихкода.
//
Процедура ДанныеПоШтрихкоду(Штрихкод, МассивТоваровДляПечати) Экспорт
	
	Запрос = Новый Запрос();
	
	ТипШтрихкодаРТ = ТипШтрихкода(Штрихкод);
	
	ТекстЗапроса = "ВЫБРАТЬ
	|	0 КАК НомерСтроки,
	|	Штрихкоды.Владелец КАК Владелец,
	|	Штрихкоды.Характеристика КАК Характеристика,
	|	Штрихкоды.Упаковка КАК Упаковка,
	|	Штрихкоды.ТипШтрихкода КАК ТипШтрихкода,
	|	1 КАК Количество,
	|	&ПустойШтрихКодУпаковки КАК ШтрихкодУпаковкиЕГАИС,
	|	&ПустойТипУпаковки КАК ТипУпаковки
	|ИЗ
	|	РегистрСведений.Штрихкоды КАК Штрихкоды
	|ГДЕ
	|	Штрихкоды.Штрихкод = &Штрихкод
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	0,
	|	Штрихкоды.Номенклатура,
	|	Штрихкоды.Характеристика,
	|	ВЫБОР
	|		КОГДА Штрихкоды.Упаковка ССЫЛКА Справочник.УпаковкиНоменклатуры
	|			ТОГДА Штрихкоды.Упаковка
	|		ИНАЧЕ &ПустаяУпаковка
	|	КОНЕЦ,
	|	&ТипШтрихкода,
	|	ВЫБОР
	|		КОГДА Штрихкоды.Количество = 0
	|			ТОГДА 1
	|		ИНАЧЕ Штрихкоды.Количество
	|	КОНЕЦ,
	|	Штрихкоды.Ссылка,
	|	Штрихкоды.ТипУпаковки
	|ИЗ
	|	Справочник.ШтрихкодыУпаковокТоваров КАК Штрихкоды
	|ГДЕ
	|	Штрихкоды.ЗначениеШтрихкода = &Штрихкод";
	
	Запрос.Текст = ТекстЗапроса;
	
	Запрос.УстановитьПараметр("Штрихкод", Штрихкод);
	Запрос.УстановитьПараметр("ТипШтрихкода", ТипШтрихкодаРТ);
	Запрос.УстановитьПараметр("ПустаяУпаковка", Справочники.УпаковкиНоменклатуры.ПустаяСсылка());
	Запрос.УстановитьПараметр("ПустойШтрихКодУпаковки", Справочники.ШтрихкодыУпаковокТоваров.ПустаяСсылка());
	Запрос.УстановитьПараметр("ПустойТипУпаковки", Перечисления.ТипыУпаковок.ПустаяСсылка());
	Запрос.УстановитьПараметр("ТипУпаковки", Перечисления.ТипыУпаковок.МаркированныйТовар);
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	НайденоОбъектов = Выборка.Количество();
	
	СтруктураПараметров = СтруктураДанныхПоиска();
	
	ДополнитьСтруктуруРезультатамиПоиска(СтруктураПараметров, Выборка, Штрихкод, "");
	
	Для Каждого Товар Из СтруктураПараметров.ЗначенияПоиска Цикл
		
		СтруктураТовара = ПечатьЭтикетокИЦенниковБПОКлиентСервер.ТоварДляПечати();
		СтруктураТовара.НомеклатураБПО = Товар.Номенклатура;
		СтруктураТовара.ХарактеристикаБПО = Товар.Характеристика;
		СтруктураТовара.УпаковкаБПО = Товар.Упаковка;
		СтруктураТовара.Штрихкод = Товар.Штрихкод;
		
		МассивТоваровДляПечати.Добавить(СтруктураТовара);
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ПроцедурыОбработкиШтрихкодовВСправочникахИДокументах

// Возвращает штрихкод для товара.
//
// Параметры:
//  Владелец - СправочникСсылка.Номенклатура - номенклатура владелец штрихкода.
//  Характеристика - СправочникСсылка.ХарактеристикиНоменклатуры - характеристики номенклатуры.
//  Упаковка - СправочникСсылка.УпаковкиНоменклатуры - упаковка номенклатуры.
//
// Возвращаемое значение:
//  Структура - структура штрихкода.
//
Функция ШтрихкодТовара(Владелец, Характеристика = Неопределено, Упаковка = Неопределено) Экспорт

	СтруктураШтрихкода = Неопределено;
	Если Упаковка = Неопределено Тогда
		Упаковка = Справочники.УпаковкиНоменклатуры.ПустаяСсылка();
	КонецЕсли;
	
	Если Характеристика = Неопределено Тогда
		Характеристика = Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка();
	КонецЕсли;
		
	Запрос = Новый Запрос("ВЫБРАТЬ ПЕРВЫЕ 1
	|	Штрихкоды.ТипШтрихкода,
	|	Штрихкоды.Штрихкод
	|ИЗ
	|	РегистрСведений.Штрихкоды КАК Штрихкоды
	|ГДЕ
	|	Штрихкоды.Владелец = &Владелец
	|	И Штрихкоды.Упаковка = &Упаковка
	|	И Штрихкоды.Характеристика = &Характеристика");

	Запрос.УстановитьПараметр("Владелец", Владелец);
	Запрос.УстановитьПараметр("Упаковка", Упаковка);
	Запрос.УстановитьПараметр("Характеристика", Характеристика);
	
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	Если Выборка.Следующий() Тогда
		СтруктураШтрихкода = ОбщегоНазначенияРТ.СтруктураПоСтрокеВыборки(РезультатЗапроса, Выборка);
	КонецЕсли;	
	
	Возврат СтруктураШтрихкода;

КонецФункции 

// Сформировать новый штрихкод.
//
// Параметры:
//  ПрефиксВнутреннегоШтрихкодаШтучногоТовара - Число - префикс внутреннего штрихкода.
//  ПрефиксШтрихкодаУзлаРИБ - Число - префикс штрихкода на узле РИБ.
// 
// Возвращаемое значение:
//  Строка - сформированный штрихкод товара.
//
Функция СформироватьШтрихкод(Знач ПрефиксВнутреннегоШтрихкодаШтучногоТовара = Неопределено, Знач ПрефиксШтрихкодаУзлаРИБ = Неопределено) Экспорт
	
	Если ПрефиксВнутреннегоШтрихкодаШтучногоТовара = Неопределено Тогда
		ПрефиксВнутреннегоШтрихкодаШтучногоТовара = СокрЛП(Константы.ПрефиксВнутреннегоШтрихкодаШтучногоТовара.Получить());
	КонецЕсли;

	Если ПрефиксШтрихкодаУзлаРИБ = Неопределено Тогда
		ПрефиксШтрихкодаУзлаРИБ = Константы.ПрефиксШтрихкодаУзлаРИБ.Получить();
	КонецЕсли;

	ПрефиксВнутреннегоШтрихкодаШтучногоТовара = ?(ПустаяСтрока(ПрефиксВнутреннегоШтрихкодаШтучногоТовара), "0", ПрефиксВнутреннегоШтрихкодаШтучногоТовара);
	ПрефиксШтрихкодаУзлаРИБ = Формат(ПрефиксШтрихкодаУзлаРИБ, "ЧЦ=2; ЧН=; ЧВН=");
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	МАКСИМУМ(ПОДСТРОКА(Штрихкоды.Штрихкод, 5, 8)) КАК Код
	|ИЗ
	|	РегистрСведений.Штрихкоды КАК Штрихкоды
	|ГДЕ
	|	Штрихкоды.ТипШтрихкода = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ТипыШтрихкодов.EAN13)
	|	И Штрихкоды.Штрихкод ПОДОБНО ""2" + ПрефиксВнутреннегоШтрихкодаШтучногоТовара + ПрефиксШтрихкодаУзлаРИБ + "_________""");

	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	ТекущийКод = ?(Выборка.Код = NULL, 1, Мин(Число(Выборка.Код) + 1, 99999999));

	Штрихкод = "2" + ПрефиксВнутреннегоШтрихкодаШтучногоТовара + ПрефиксШтрихкодаУзлаРИБ + Формат(ТекущийКод, "ЧЦ=8; ЧВН=; ЧГ=");
	Штрихкод = Штрихкод + КонтрольныйСимволEAN(ШтрихКод, 13);

	Возврат Штрихкод;

КонецФункции // СформироватьШтрихКод()

// Устанавливает новый штрихкод для товара.
// 
// Параметры:
//  Штрихкод - Строка - новый штрихкод товара.
//  Владелец - СправочникСсылка.Номенклатура - номенклатура владелец штрихкода.
//  Характеристика - СправочникСсылка.ХарактеристикиНоменклатуры - характеристики номенклатуры.
//  Упаковка - СправочникСсылка.УпаковкиНоменклатуры - упаковка номенклатуры.
//
// Возвращаемое значение:
//  Булево - признак успешности выполнения операции.
//
Функция УстановитьШтрихкод(Штрихкод, Владелец, Характеристика, Упаковка, ОписаниеОшибки) Экспорт
	
	НачатьТранзакцию();
	
	Попытка
		
		ТипШтрихкодаРТ = ТипШтрихкода(Штрихкод);
		
		НовыйШтрихкод = РегистрыСведений.Штрихкоды.СоздатьМенеджерЗаписи();
		НовыйШтрихкод.Владелец = Владелец; 
		Если ПолучитьФункциональнуюОпцию("ИспользоватьХарактеристикиНоменклатуры") Тогда
			НовыйШтрихкод.Характеристика = Характеристика;
		КонецЕсли;
		Если ПолучитьФункциональнуюОпцию("ИспользоватьУпаковкиНоменклатуры") Тогда
			НовыйШтрихкод.Упаковка       = Упаковка;
		КонецЕсли;
		
		НовыйШтрихкод.ТипШтрихкода = ТипШтрихкодаРТ;
		НовыйШтрихкод.Штрихкод = Штрихкод;
		НовыйШтрихкод.Записать();
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		
		ОписаниеОшибки = НСтр("ru = 'При записи штрихкодов произошла ошибка.
		                      |Запись штрихкодов не выполнена.
		                      |Дополнительное описание:
		                      |%ДополнительноеОписание%'");
		ОписаниеОшибки = СтрЗаменить(ОписаниеОшибки, "%ДополнительноеОписание%", ИнформацияОбОшибке().Описание);
		
		Возврат Ложь;
		
	КонецПопытки;
	
	Возврат Истина;
	
КонецФункции

#КонецОбласти

#Область ПроцедурыОбработкиРаспределенияВыручкиПоСекциямФР

// Возвращает распределение выручки по секциям фискального регистратора.
//
// Параметры:
//  НастройкаРаспределения - СправочникСсылка.НастройкиРаспределенияВыручкиПоСекциямФР - настройки распределения выручка.
//
// Возвращаемое значение:
//  Структура - распределение выручки по секциям.
//
Функция РаспределениеВыручкиПоСекциям(НастройкаРаспределения) Экспорт
	
	Результат = Новый Структура;   
	
	СоответствиеВидовНоменклатурыСекциям = Новый Соответствие();
	СоответствиеДоговоровСекциям = Новый Соответствие();
	Результат.Вставить("НомерСекцииДляПриходныхКассовыхОрдеров"  , 2);
	Результат.Вставить("НомерСекцииДляРасходныхКассовыхОрдеров"  , 2);
	Результат.Вставить("НомерСекцииДляОплатыКартой"              , 2);
	Результат.Вставить("НомерСекцииДляВозвратаОплатыНаКарту"     , 2);
	Результат.Вставить("НомерСекцииПоУмолчаниюДляФискальныхЧеков", 1);
	Результат.Вставить("СоответствиеВидовНоменклатурыСекциям", СоответствиеВидовНоменклатурыСекциям);
	Результат.Вставить("СоответствиеДоговоровСекциям", СоответствиеДоговоровСекциям);
	
	Распределение = НастройкаРаспределения;
	
	Если (Распределение = Неопределено) Или (Распределение = Справочники.НастройкиРаспределенияВыручкиПоСекциямФР.ПустаяСсылка()) Тогда
		// Получаем распределение по умолчанию.
		Распределение = ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.НастройкиРаспределенияВыручкиПоСекциямФР.РаспределениеПоУмолчанию");
		
		Если НЕ ЗначениеЗаполнено(Распределение) Тогда 
			Возврат Результат;
		КонецЕсли;
		
	КонецЕсли;
	
	Результат.НомерСекцииДляПриходныхКассовыхОрдеров   = Распределение.НомерСекцииДляПриходныхКассовыхОрдеров; 
	Результат.НомерСекцииДляРасходныхКассовыхОрдеров   = Распределение.НомерСекцииДляРасходныхКассовыхОрдеров;
	Результат.НомерСекцииДляОплатыКартой               = Распределение.НомерСекцииДляОплатыКартой;
	Результат.НомерСекцииДляВозвратаОплатыНаКарту      = Распределение.НомерСекцииДляВозвратаОплатыНаКарту;
	Результат.НомерСекцииПоУмолчаниюДляФискальныхЧеков = Распределение.НомерСекцииПоУмолчаниюДляФискальныхЧеков;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	РаспределениеВыручкиПоСекциямФР.НомерСекции КАК НомерСекции,
	|	РаспределениеВыручкиПоСекциямФР.ВидНоменклатуры КАК ВидНоменклатуры
	|ИЗ
	|	Справочник.НастройкиРаспределенияВыручкиПоСекциямФР.СоответствиеВидовНоменклатурыСекциям КАК РаспределениеВыручкиПоСекциямФР
	|ГДЕ РаспределениеВыручкиПоСекциямФР.Ссылка = &Идентификатор";
	
	Запрос.УстановитьПараметр("Идентификатор", Распределение.Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Результат.СоответствиеВидовНоменклатурыСекциям.Вставить(ВыборкаДетальныеЗаписи.ВидНоменклатуры, ВыборкаДетальныеЗаписи.НомерСекции);
	КонецЦикла;
		
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	РаспределениеВыручкиПоСекциямФР.НомерСекции КАК НомерСекции,
	|	РаспределениеВыручкиПоСекциямФР.ДоговорКонтрагента КАК ДоговорКонтрагента
	|ИЗ
	|	Справочник.НастройкиРаспределенияВыручкиПоСекциямФР.СоответствиеДоговоровПлатежныхАгентовСекциям КАК РаспределениеВыручкиПоСекциямФР
	|ГДЕ РаспределениеВыручкиПоСекциямФР.Ссылка = &Идентификатор";
	
	Запрос.УстановитьПараметр("Идентификатор", Распределение.Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		Результат.СоответствиеДоговоровСекциям.Вставить(Выборка.ДоговорКонтрагента, Выборка.НомерСекции);
	КонецЦикла;
	Возврат Результат;

КонецФункции

// Заполняет соответствие секций фискального регистратора для табличной части по кассе ККМ.
// 
// Параметры:
//  КассаККМ - СправочникСсылка.КассыККМ - касса ККМ по которой заполняется соответствие.
//  Товары - ТаблицаЗначений - таблица товаров.
//  ТаблицаТоваровСоответствииСекциям - Соответствие - соответствие товаров секциям.
//  
Процедура ЗаполнитьСоответствиеСекцийДляТабличнойЧастиПоКассеККМ(КассаККМ, Знач Товары, ТаблицаТоваровСоответствииСекциям) Экспорт
	
	Распределение = РаспределениеВыручкиПоСекциям(КассаККМ.НастройкаРаспределенияВыручкиПоСекциям);
	СтруктураРеквизитов = Новый Структура;
	СтруктураРеквизитов.Вставить("ВидНоменклатуры", "ВидНоменклатуры");
	СтруктураРеквизитов.Вставить("ТипНоменклатуры", "ВидНоменклатуры.ТипНоменклатуры");
	СтруктураРеквизитов.Вставить("ДоговорКонтрагента", "ДоговорКонтрагента");
	
	Для Каждого СтрокаТЧ Из Товары Цикл
		
		ДанныеНоменклатуры = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СтрокаТЧ.Номенклатура, СтруктураРеквизитов);
		Если ДанныеНоменклатуры.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Услуга
			И ЗначениеЗаполнено(ДанныеНоменклатуры.ДоговорКонтрагента) Тогда
			Секция = Распределение.СоответствиеДоговоровСекциям.Получить(ДанныеНоменклатуры.ДоговорКонтрагента);
		Иначе
			Секция = Распределение.СоответствиеВидовНоменклатурыСекциям.Получить(ДанныеНоменклатуры.ВидНоменклатуры);
		КонецЕсли;
		Если Секция = Неопределено Тогда
			ТаблицаТоваровСоответствииСекциям.Вставить(СтрокаТЧ.НомерСтроки, Распределение.НомерСекцииПоУмолчаниюДляФискальныхЧеков);
		Иначе
			ТаблицаТоваровСоответствииСекциям.Вставить(СтрокаТЧ.НомерСтроки, Секция);
		КонецЕсли
		
	КонецЦикла;
	
КонецПроцедуры

// Записывает признак пробития чека в документ.
//
// Параметры:
//  ДокументыНаККМ - ДокументСсылка - документ для пробития.
//  НомерЧекаККМ - Число - номер чека ККМ.
//
// Возвращаемое значение:
//  Булево - признак выполнения операции.
//
Функция ПровестиПробитыйДокумент(ДокументНаККМ, НомерЧекаККМ) Экспорт
	
	Попытка
		ДокументНаККМОбъект = ДокументНаККМ.ПолучитьОбъект();
		
		ДокументНаККМОбъект.НомерЧекаККМ  = НомерЧекаККМ;
		ДокументНаККМОбъект.ПробитЧек     = Истина;
		ДокументНаККМОбъект.Записать(РежимЗаписиДокумента.Запись);
		Возврат Истина;
	Исключение
		Возврат Ложь;
	КонецПопытки;
	
КонецФункции

// Подготавливает данные для печати чека на ФР.
// 
// Параметры:
//  ДокументыНаККМ - ДокументСсылка - документ для пробития.
//  РаспределениеВыручкиПоСекциям - 
//  НомерЧекаККМ - Число - номер чека ККМ.
//
Функция ВходящиеДанныеДляФР(ДокументНаККМ, РаспределениеВыручкиПоСекциям, НомерЧека) Экспорт
	
	// Получить модуль менеджера
	
	МенеджерОбъектаПоСсылке = ОбщегоНазначения.МенеджерОбъектаПоСсылке(ДокументНаККМ);
	
	Возврат МенеджерОбъектаПоСсылке.ПодготовитьДанныеДляПробитияЧека(ДокументНаККМ, РаспределениеВыручкиПоСекциям, НомерЧека);
	
КонецФункции //невозможно убрать

#КонецОбласти

#Область ПроцедурыПоискаИОпределенияПоМагнитномуКоду

// Возвращает данные поиска по магнитному коду.
//
// Параметры: 
//  МагнитныйКод - Строка - магнитный код строкой.
//  Форма - УправляемаяФорма - форма в которой определен обработчик действия "ПолученыШтрихкоды".
//
// Возвращаемое значение:
//  Структура - структура данных по магнитному коду.
//
Функция ДанныеПоискаПоМагнитномуКоду(МагнитныйКод, Форма) Экспорт
	
	Если Форма.ПараметрыСобытийПО = Неопределено Тогда
		СтруктураДействий = Новый Структура;
	Иначе
		СтруктураДействий = Форма.ПараметрыСобытийПО;
	КонецЕсли;
	
	НеизвестныеДанныеПО = Истина;
	
	Запрос = Новый Запрос;
	ТекстЗапроса = "ВЫБРАТЬ
	|	0 КАК НомерСтроки,
	|	СерийныеНомера.Ссылка КАК Владелец,
	|	СерийныеНомера.Владелец КАК Номенклатура,
	|	NULL КАК ВладелецКарты,
	|	NULL КАК ТипКарты,
	|	1 КАК Количество
	|ИЗ
	|	Справочник.СерийныеНомера КАК СерийныеНомера
	|ГДЕ
	|	СерийныеНомера.КодСерийногоНомера = &МагнитныйКод
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	0,
	|	ИнформационныеКарты.Ссылка,
	|	NULL,
	|	ИнформационныеКарты.ВладелецКарты,
	|	ИнформационныеКарты.ТипКарты,
	|	1 КАК Количество
	|ИЗ
	|	Справочник.ИнформационныеКарты КАК ИнформационныеКарты
	|ГДЕ
	|	ИнформационныеКарты.КодКарты = &МагнитныйКод";
	
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("МагнитныйКод", МагнитныйКод);
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	
	НайденоОбъектов = Выборка.Количество();
	СтруктураПараметров = СтруктураДанныхПоиска();
	
	ДополнитьСтруктуруРезультатамиПоиска(СтруктураПараметров, Выборка, "", МагнитныйКод, НеизвестныеДанныеПО);
	
	ДополнитьСтруктуруДляРегистрацииНовогоОбъекта(
		СтруктураПараметров,
		МагнитныйКод,
		СтруктураДействий,
		НеизвестныеДанныеПО);
		
	СтруктураПараметров.НеизвестныеДанныеПО = НеизвестныеДанныеПО;
	СтруктураПараметров.ДанныеПО = МагнитныйКод;
	СтруктураПараметров.ТипДанныхПО = "МагнитныйКод";
	
	Возврат СтруктураПараметров;
	
КонецФункции

// Возвращает список кодов карты, полученный из данных
// карты с применением форматов записи кодов магнитных карт.
// 
// Параметры:
//  ДанныеКарты - Строка - данные магнитной карты.
//
// Возвращаемое значение:
//  СписокЗначений - таблица кодов карты.
//
Функция ПолучитьКодыКарты(ДанныеКарты) Экспорт
	
	ТаблицаКодовКарты = Новый ТаблицаЗначений;
	ТаблицаКодовКарты.Колонки.Добавить("Значение");
	
	Выборка = РегистрыСведений.ФорматыЗаписиКодовМагнитныхКарт.Выбрать();
	
	Пока Выборка.Следующий() Цикл
	
		СписокКодовКартыПоФормату = ПрименитьФорматДляДанныхКарты(ДанныеКарты, Выборка.НомерДорожки, Выборка.Префикс, Выборка.Суффикс, Выборка.КоличествоЗнаков);
		
		Для Каждого ТекСписокКодовКартыПоФормату Из СписокКодовКартыПоФормату Цикл
			НовСтрока          = ТаблицаКодовКарты.Добавить();
			НовСтрока.Значение = ТекСписокКодовКартыПоФормату.Значение;
		КонецЦикла;
		
	КонецЦикла;

	ТаблицаКодовКарты.Свернуть("Значение");
	
	СписокКодовКарты  = Новый СписокЗначений;
	СписокКодовКарты.ЗагрузитьЗначения(ТаблицаКодовКарты.ВыгрузитьКолонку("Значение"));
	
	Возврат СписокКодовКарты;

КонецФункции


#КонецОбласти

#Область ВспомогательныеПроцедурыРаботыСПодключаемымОборудованием

// Получает доступное подключаемое оборудование.
//
// Параметры:
//  ИспользоватьПодключаемоеОборудование - Булево - признак использования подключаемого оборудования.
//  ЕстьТСД - Булево - признак использования ТСД.
//  ЕстьВесы - Булево - признак использования весов.
//
Процедура ПолучитьДоступноеПодключаемоеОборудование(ИспользоватьПодключаемоеОборудование, ЕстьТСД, ЕстьВесы) Экспорт
	
	ТипыПодключенногоОборудования = МенеджерОборудованияВызовСервера.ТипыИспользуемогоОборудованияТекущегоРабочегоМеста();
	
	ИспользоватьПодключаемоеОборудование = ОбщегоНазначенияРТ.ИспользоватьПодключаемоеОборудование(ТипыПодключенногоОборудования);
	
	ЕстьТСД = ИспользоватьПодключаемоеОборудование 
		И ТипыПодключенногоОборудования <> Неопределено
		И ТипыПодключенногоОборудования.Найти(Перечисления.ТипыПодключаемогоОборудования.ТерминалСбораДанных) <> Неопределено;
		
	ЕстьВесы = ИспользоватьПодключаемоеОборудование 
		И ТипыПодключенногоОборудования <> Неопределено
		И ТипыПодключенногоОборудования.Найти(Перечисления.ТипыПодключаемогоОборудования.ЭлектронныеВесы) <> Неопределено;
	
КонецПроцедуры

// Настраивает подключаемое оборудование в форме,
// устанавливает флаг ИспользоватьПодключаемоеОборудование в форме.
//
// Параметры:
//  Форма - УправляемаяФорма - форма в которой настраивается подключение оборудования.
//  МассивКомандПО - Массив - массив команд подключаемого оборудования.
//
Процедура НастроитьПодключаемоеОборудование(Форма, МассивКомандПО = Неопределено) Экспорт
	
	ЕстьТСД = Ложь;
	ЕстьВесы = Ложь;
	
	ПолучитьДоступноеПодключаемоеОборудование(Форма.ИспользоватьПодключаемоеОборудование, ЕстьТСД, ЕстьВесы);
	
	Если МассивКомандПО = Неопределено Тогда
		ОбщегоНазначенияРТКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Форма.Элементы,
			"ТоварыЗагрузитьДанныеИзТСД",
			"Видимость",
			ЕстьТСД);
		
		ОбщегоНазначенияРТКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Форма.Элементы,
			"ТоварыВыгрузитьДанныеВТСД",
			"Видимость",
			ЕстьТСД);
		
		ОбщегоНазначенияРТКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Форма.Элементы,
			"ТоварыПолучитьВес",
			"Видимость",
			ЕстьВесы);
	Иначе
		Для Каждого КомандаПО Из МассивКомандПО Цикл
			Если Найти(КомандаПО, "ЗагрузитьДанныеИзТСД") > 0
				ИЛИ Найти(КомандаПО, "ВыгрузитьДанныеВТСД") > 0 Тогда
				Форма.Элементы[КомандаПО].Видимость = ЕстьТСД;
			ИначеЕсли Найти(КомандаПО, "ПолучитьВес") > 0 Тогда
				Форма.Элементы[КомандаПО].Видимость = ЕстьВесы;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;

КонецПроцедуры

// Получить структуру шаблона чека.
//
Функция ПолучитьСтруктуруШаблонаЧека(ПараметрыШаблонаЧека, ДополнительныйТекст = "", ТипОборудования = "") Экспорт
	
	ХранилищеШаблона = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПараметрыШаблонаЧека.ШаблонЧека, "Шаблон");
	СтруктураХранилища = ХранилищеШаблона.Получить();
	
	Если СтруктураХранилища = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	НовыеПараметрыЧека = Новый Структура;
	Для Каждого ВходящийПараметр Из ПараметрыШаблонаЧека Цикл
		Если ВходящийПараметр.Ключ = "ПозицииЧека" Тогда
			НовыеПараметрыЧека.Вставить("ПозицииЧека", Новый Массив);
		Иначе
			НовыеПараметрыЧека.Вставить(ВходящийПараметр.Ключ, ВходящийПараметр.Значение);
		КонецЕсли;
	КонецЦикла;
	НовыйТипШаблона = Ложь;
	СКД = Неопределено;
	Если ТипОборудования = "ККТ" 
		ИЛИ ТипОборудования = Перечисления.ТипыПодключаемогоОборудования.ККТ Тогда
		СКД = ПараметрыШаблонаЧека.ШаблонЧека.СхемаКомпоновкиДанных.Получить();
		НовыйТипШаблона = Истина;
	ИначеЕсли ТипОборудования = "ПринтерЧеков" 
		ИЛИ ТипОборудования = Перечисления.ТипыПодключаемогоОборудования.ПринтерЧеков Тогда
		ТипШаблона = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПараметрыШаблонаЧека.ШаблонЧека, "ТипШаблона");
		Если ТипШаблона = Перечисления.ТипыШаблонов.ЧекККТ Тогда
			СКД = ПараметрыШаблонаЧека.ШаблонЧека.СхемаКомпоновкиДанных.Получить();
			НовыйТипШаблона = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Если НовыйТипШаблона Тогда
		Если СКД = Неопределено Тогда
			Возврат Неопределено;
		КонецЕсли;
		ТаблицаДанных = УправлениеШаблонами.ТаблицаСКД(СКД, ПараметрыШаблонаЧека.ДокументОснование);
		ШаблонДерево = СтруктураХранилища.Шаблон;
		КоличествоСтрокТабличнойЧасти = 0;
		Для Каждого СтрокаДерева Из ШаблонДерево.Строки Цикл
			Если СтрокаДерева.ИмяКолонки = "ФискальныйДокумент" Тогда
				Для Каждого СтрокаЧека Из СтрокаДерева.Строки Цикл
					Если СтрокаЧека.ИмяКолонки = "СоставЧека" Тогда
						Для Каждого СтрокаОсновногоРаздела Из СтрокаЧека.Строки Цикл
							УправлениеШаблонами.ОбработатьСоставЧека(НовыеПараметрыЧека, СтрокаОсновногоРаздела, ТаблицаДанных, ПараметрыШаблонаЧека.ПозицииЧека);
						КонецЦикла;
					КонецЕсли;
				КонецЦикла;
			ИначеЕсли СтрокаДерева.ИмяКолонки = "НефискальныйДокумент" Тогда
				НовыйНефискальныйДокумент = Новый Структура;
				НовыйНефискальныйДокумент.Вставить("ПозицииЧека", Новый Массив);
				НовыйНефискальныйДокумент.Вставить("ДокументОснование", НовыеПараметрыЧека.ДокументОснование);
				Для Каждого СтрокаЧека Из СтрокаДерева.Строки Цикл
					Если СтрокаЧека.ИмяКолонки = "СоставЧека" Тогда
						Для Каждого СтрокаОсновногоРаздела Из СтрокаЧека.Строки Цикл
							УправлениеШаблонами.ОбработатьСоставЧека(НовыйНефискальныйДокумент, СтрокаОсновногоРаздела, ТаблицаДанных, ПараметрыШаблонаЧека.ПозицииЧека);
						КонецЦикла;
					КонецЕсли;
				КонецЦикла;
				Если НовыйНефискальныйДокумент.ПозицииЧека.Количество() > 0 Тогда
					НовыеПараметрыЧека.НефискальныеДокументы.Добавить(НовыйНефискальныйДокумент.ПозицииЧека);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
	Иначе
		СтруктураШаблонаЧека = Новый Структура;
		СтруктураШаблонаЧека.Вставить("Шапка", Новый Массив);
		СтруктураШаблонаЧека.Вставить("МассивТекстаСтрокиШапки", Новый Массив);
		СтруктураШаблонаЧека.Вставить("МассивТекстаСтрокиПодвал", Новый Массив);
		СтруктураШаблонаЧека.Вставить("Подвал", Новый Массив);
		СтруктураШаблонаЧека.Вставить("ОднаФискальнаяСтрока", Ложь);
		СтруктураШаблонаЧека.Вставить("ФискальнаяСтрокаБезПечати", Ложь);
		
		ТаблицаИсходная_Количество = ПараметрыШаблонаЧека.ПозицииЧека.Количество();
		
		Для Итератор = 0 По ТаблицаИсходная_Количество - 1 Цикл
			СтруктураШаблонаЧека.МассивТекстаСтрокиШапки.Добавить(Новый Массив);
			СтруктураШаблонаЧека.МассивТекстаСтрокиПодвал.Добавить(Новый Массив);
		КонецЦикла;
		
		СкидкиНаценкиСерверПереопределяемый.ОбработатьСтруктуруШаблонаЧекаПриПечати(СтруктураХранилища, ПараметрыШаблонаЧека.ДокументОснование);
		СтруктураШаблонаЧека.ФискальнаяСтрокаБезПечати = Истина;

		МассивТекстаСтрокиШапки = Новый Массив;
		МассивТекстаСтрокиПодвал = Новый Массив;
		
		ПараметрыМакета = Новый Структура;
		ПараметрыМакета.Вставить("СхемаКомпоновкиДанных", Неопределено);
		ПараметрыМакета.Вставить("КомпоновщикМакета", Неопределено);
		ПараметрыМакета.Вставить("КэшМакетов", Неопределено);
		
		МенеджерОбъекта = ОбщегоНазначения.МенеджерОбъектаПоСсылке(ПараметрыШаблонаЧека.ДокументОснование);
		Шаблон = МенеджерОбъекта.МакетФискальногоЧека(ПараметрыШаблонаЧека.ДокументОснование, СтруктураХранилища.Шаблон, СтруктураХранилища.ШиринаЧека, ПараметрыМакета);
		СтруктураХранилища.Вставить("Шаблон", Шаблон);
		СтруктураХранилища.Вставить("СоставнойМассив", Новый Массив);
		
		СтруктураШаблонаЧека.Вставить("Шапка", ПечатьФискальныхЧеков.НапечататьСтроки(СтруктураХранилища, "Шапка"));
		
		Для Итератор = 0 По ТаблицаИсходная_Количество - 1 Цикл
			МассивСтрокиШапки = ПечатьФискальныхЧеков.НапечататьСтроки(СтруктураХранилища, "ТелоШапка_" + Итератор);
			МассивТекстаСтрокиШапки.Добавить(МассивСтрокиШапки);
			МассивСтрокиПодвал = ПечатьФискальныхЧеков.НапечататьСтроки(СтруктураХранилища, "ТелоПодвал_" + Итератор);
			МассивТекстаСтрокиПодвал.Добавить(МассивСтрокиПодвал);
		КонецЦикла;
		СтруктураШаблонаЧека.Вставить("Подвал", ПечатьФискальныхЧеков.НапечататьСтроки(СтруктураХранилища, "Подвал"));
		СтруктураШаблонаЧека.Вставить("МассивТекстаСтрокиШапки", МассивТекстаСтрокиШапки);
		СтруктураШаблонаЧека.Вставить("МассивТекстаСтрокиПодвал", МассивТекстаСтрокиПодвал);
		СтруктураШаблонаЧека.ОднаФискальнаяСтрока = СтруктураХранилища.ОднаФискальнаяСтрока;
	
		// Печатаем строки чека   
			
		МассивТекстаСтрокиШапки   = СтруктураШаблонаЧека.МассивТекстаСтрокиШапки;
		МассивТекстаСтрокиПодвал  = СтруктураШаблонаЧека.МассивТекстаСтрокиПодвал;
		МассивШапкаЧека           = СтруктураШаблонаЧека.Шапка;
		МассивПодвалЧека          = СтруктураШаблонаЧека.Подвал;
		ОднаФискальнаяСтрока      = СтруктураШаблонаЧека.ОднаФискальнаяСтрока;
		ФискальнаяСтрокаБезПечати = СтруктураШаблонаЧека.ФискальнаяСтрокаБезПечати;
		
		ИтогПоЧеку = 0;
		ПроцентСкидки = 0;
		НомерСекции = 0;
		
		// Печать шапки чека.
		Для Каждого СтрокаШапки Из МассивШапкаЧека Цикл
			СтрокаПозицииЧека = Новый Структура;
			СтрокаПозицииЧека.Вставить("ТекстоваяСтрока");
			СтрокаПозицииЧека.Вставить("Текст", СтрокаШапки);
			НовыеПараметрыЧека.ПозицииЧека.Добавить(СтрокаПозицииЧека);
			НовыеПараметрыЧека.Вставить("ПечатьКлише", Ложь);
		КонецЦикла;
		
		// Товарный состав
		Для ИндексМассива = 0 По ТаблицаИсходная_Количество - 1 Цикл
			
			СтрокаИсходная = ПараметрыШаблонаЧека.ПозицииЧека[ИндексМассива];
			
			Если СтрокаИсходная.Свойство("ФискальнаяСтрока") Тогда
			
				// Печать шапки строки.
				Для Каждого СтрокаШапки Из МассивТекстаСтрокиШапки[ИндексМассива] Цикл
					СтрокаПозицииЧека = Новый Структура();
					СтрокаПозицииЧека.Вставить("ТекстоваяСтрока");
					СтрокаПозицииЧека.Вставить("Текст", СтрокаШапки);
					НовыеПараметрыЧека.ПозицииЧека.Добавить(СтрокаПозицииЧека);
				КонецЦикла;
				
				Если ОднаФискальнаяСтрока Тогда
					Сумма = ?(СтрокаИсходная.Свойство("Сумма"), СтрокаИсходная.Сумма, 0);
					ИтогПоЧеку = ИтогПоЧеку + Сумма;
				Иначе
					Если ФискальнаяСтрокаБезПечати Тогда
						Наименование = "";
					Иначе
						Наименование  = ?(СтрокаИсходная.Свойство("Наименование") , СтрокаИсходная.Наименование, "");
					КонецЕсли;
					
					Количество    = ?(СтрокаИсходная.Свойство("Количество")   , СтрокаИсходная.Количество  , 1);
					Цена          = ?(СтрокаИсходная.Свойство("Цена")         , СтрокаИсходная.Цена        , 0);
					Сумма         = ?(СтрокаИсходная.Свойство("Сумма")        , СтрокаИсходная.Сумма       , 0);
					НомерСекции   = ?(СтрокаИсходная.Свойство("НомерСекции")  , СтрокаИсходная.НомерСекции , 0);
					СтавкаНДС     = ?(СтрокаИсходная.Свойство("СтавкаНДС")    , СтрокаИсходная.СтавкаНДС   , 0);
					
					СтрокаПозицииЧека = Новый Структура;
					СтрокаПозицииЧека.Вставить("ФискальнаяСтрока");
					СтрокаПозицииЧека.Вставить("Наименование", Наименование);
					СтрокаПозицииЧека.Вставить("Количество"  , Количество);
					СтрокаПозицииЧека.Вставить("Цена"        , Цена);
					СтрокаПозицииЧека.Вставить("Сумма"       , Сумма);
					СтрокаПозицииЧека.Вставить("НомерСекции" , НомерСекции);
					СтрокаПозицииЧека.Вставить("СтавкаНДС"   , СтавкаНДС);
					
					НовыеПараметрыЧека.ПозицииЧека.Добавить(СтрокаПозицииЧека);
					
				КонецЕсли;
				
				// Печать подвала строки.
				Для Каждого СтрокаПодвала Из МассивТекстаСтрокиПодвал[ИндексМассива] Цикл
					СтрокаПозицииЧека = Новый Структура;
					СтрокаПозицииЧека.Вставить("ТекстоваяСтрока");
					СтрокаПозицииЧека.Вставить("Текст", СтрокаПодвала);
					НовыеПараметрыЧека.ПозицииЧека.Добавить(СтрокаПозицииЧека);
				КонецЦикла;
			Иначе
				СтрокаПозицииЧека = Новый Структура;
				Для Каждого ПолеИсходное Из СтрокаИсходная Цикл
					СтрокаПозицииЧека.Вставить(ПолеИсходное.Ключ, ПолеИсходное.Значение);
				КонецЦикла;
				НовыеПараметрыЧека.ПозицииЧека.Добавить(СтрокаПозицииЧека);
			КонецЕсли;
			
		КонецЦикла;
			
		// если одна фискальная строка в чеке.
		Если ОднаФискальнаяСтрока Тогда
			СтрокаПозицииЧека = Новый Структура;
			СтрокаПозицииЧека.Вставить("ФискальнаяСтрока");
			СтрокаПозицииЧека.Вставить("Наименование", НСтр("ru='Всего:'"));
			СтрокаПозицииЧека.Вставить("Количество"  , 1);
			СтрокаПозицииЧека.Вставить("Цена"        , ИтогПоЧеку);
			СтрокаПозицииЧека.Вставить("Сумма"       , ИтогПоЧеку);
			СтрокаПозицииЧека.Вставить("НомерСекции" , НомерСекции);
			СтрокаПозицииЧека.Вставить("СтавкаНДС"   , 0);
			НовыеПараметрыЧека.ПозицииЧека.Добавить(СтрокаПозицииЧека);
		КонецЕсли;
		
		// Печать подвала чека.
		Для Каждого СтрокаПодвала Из МассивПодвалЧека Цикл
			СтрокаПозицииЧека = Новый Структура;
			СтрокаПозицииЧека.Вставить("ТекстоваяСтрока");
			СтрокаПозицииЧека.Вставить("Текст", СтрокаПодвала);
			НовыеПараметрыЧека.ПозицииЧека.Добавить(СтрокаПозицииЧека);
		КонецЦикла;
		
		Если НЕ ПустаяСтрока(ДополнительныйТекст) Тогда
			СтрокаПозицииЧека = Новый Структура();
			СтрокаПозицииЧека.Вставить("ТекстоваяСтрока");
			СтрокаПозицииЧека.Вставить("Текст",  ДополнительныйТекст);
			НовыеПараметрыЧека.Добавить(СтрокаПозицииЧека);
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат НовыеПараметрыЧека;
	
КонецФункции
#КонецОбласти

// Устанавливает контрагента по дисконтной карте.
//
// Параметры:
//  Форма - УправляемаяФорма - форма на которой выполняется операция.
//  СтруктураРезультат - Структура - структура результата выполнения операции.
//  СтрокаРезультата - Структура - структура результата по которой вставляется предупреждение.
//
Процедура УстановитьКонтрагентаПоДисконтнойКарте(Форма, СтруктураРезультат, СтрокаРезультата) Экспорт
	
	Если ЗначениеЗаполнено(СтрокаРезультата.ВладелецКарты)
		И ТипЗнч(СтрокаРезультата.ВладелецКарты) = Тип("СправочникСсылка.Контрагенты") Тогда
		Форма.Объект.Контрагент = СтрокаРезультата.ВладелецКарты;
		Форма.Модифицированность = Истина;
	Иначе
		ТекстПредупреждения = НСтр("ru = 'По коду ""%1"" найдена дисконтная карта, не связанная с контрагентом.'");
		ТекстПредупреждения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстПредупреждения, СтруктураРезультат.ДанныеПО);
		СтруктураРезультат.Вставить("ТекстПредупреждения", ТекстПредупреждения);
	КонецЕсли;
	
КонецПроцедуры

#Область ПоискЧекаПоQRКоду

Процедура ДанныеПоискаЧекаПоДаннымQRКода(Штрихкод, ДанныеПоискаПоШтрихкоду = Неопределено, Знач ИмяТипаДанных = "ЧекККМ") Экспорт
	
	Если ДанныеПоискаПоШтрихкоду = Неопределено Тогда
		ДанныеПоискаПоШтрихкоду = СтруктураДанныхПоиска();
	КонецЕсли;
	
	РасшифровкаКодаQR = МенеджерОборудованияКлиентСервер.РасшифроватьQRКодЧекаККТ(Штрихкод);
	
	ДанныеПоискаЧека = Новый Структура();
	Если РасшифровкаКодаQR.Расшифрован Тогда
		
		ДанныеПоискаЧека.Вставить("ЧекПоФискальнымДанным", Документы[ИмяТипаДанных].ПустаяСсылка());
		
		ДанныеПоискаПоШтрихкоду.Вставить("ЗначенияПоиска", Новый Массив());
		ДанныеПоискаПоШтрихкоду.Вставить("НеизвестныеДанныеПО", Ложь);
		ДанныеПоискаПоШтрихкоду.Вставить("ДанныеПО", Штрихкод);
		
		Запрос = Новый Запрос();
		ТекстЗапроса = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ФискальныеОперации.ДокументОснование КАК Ссылка
		|ИЗ
		|	РегистрСведений.ФискальныеОперации КАК ФискальныеОперации
		|ГДЕ
		|	ФискальныеОперации.ФискальныйПризнак = &ФискальныйПризнак
		|	И ТИПЗНАЧЕНИЯ(ФискальныеОперации.ДокументОснование) = ТИП(Документ.%1)";
		
		ТекстЗапроса = СтрШаблон(ТекстЗапроса, ИмяТипаДанных);
		Запрос.Текст = ТекстЗапроса;
		Запрос.УстановитьПараметр("ФискальныйПризнак", РасшифровкаКодаQR.ФискальныйПризнак);
		
		НайденныеЧеки = Запрос.Выполнить().Выгрузить();
		
		Если НайденныеЧеки.Количество()>0 Тогда
			ДанныеПоискаЧека.Вставить("ЧекПоФискальнымДанным", НайденныеЧеки[0].Ссылка);
		КонецЕсли;
		
		ДанныеПоискаПоШтрихкоду.ЗначенияПоиска.Добавить(ДанныеПоискаЧека);
		
	Иначе
		
		ДанныеПоискаПоШтрихкоду.Вставить("НеизвестныеДанныеПО", Ложь);
		ДанныеПоискаПоШтрихкоду.Вставить("ДанныеПО", Штрихкод);
		
		Запрос = Новый Запрос();
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	ФискальныеОперации.ДокументОснование КАК Ссылка
		
		|ИЗ
		|	РегистрСведений.ФискальныеОперации КАК ФискальныеОперации
		|ГДЕ
		|	ФискальныеОперации.ИдентификаторОплатыПлатежнойСистемы = &ФискальныйПризнак
		|	И ФискальныеОперации.ИдентификаторОплатыПлатежнойСистемы <> """" 
		|	И ТИПЗНАЧЕНИЯ(ФискальныеОперации.ДокументОснование) = ТИП(Документ.%1)";
		
		ТекстЗапроса = СтрШаблон(ТекстЗапроса, ИмяТипаДанных);
		Запрос.Текст = ТекстЗапроса;
		Запрос.УстановитьПараметр("ФискальныйПризнак", Штрихкод);
		
		НайденныеЧеки = Запрос.Выполнить().Выгрузить();
		
		Если НайденныеЧеки.Количество()>0 Тогда
			
			ДанныеПоискаЧека.Вставить("ЧекПоФискальнымДанным", НайденныеЧеки[0].Ссылка);
			ДанныеПоискаПоШтрихкоду.ЗначенияПоиска.Добавить(ДанныеПоискаЧека);
		
		КонецЕсли;
		
	КонецЕсли;
	
	Если ДанныеПоискаПоШтрихкоду.ЗначенияПоиска.Количество() = 0 Тогда
		
		ДанныеПоискаЧека.Вставить("ТекстПредупреждения",
			НСтр("ru = 'Чек не найден.'"));
		ДанныеПоискаПоШтрихкоду.ЗначенияПоиска.Добавить(ДанныеПоискаЧека);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти
#Область ВспомогательныеФункцииИПроцедурыОбработкиСобытийПоискаПоШКМКИРаботыСТСД

// Формирует предопределенную структуру,
// Которая используется при поиске по ШК, магнитному коду и загрузке из ТСД.
// В том числе, и при ручном вводе позиций.
//
// Возвращаемое значение:
//  Структура - структура данных поиска.
//
Функция СтруктураДанныхПоиска() Экспорт
	
	СтруктураПараметров = Новый Структура;
	
	СтруктураПараметров.Вставить("ЗначенияПоиска", Новый Массив);
	СтруктураПараметров.Вставить("НеизвестныеДанныеПО", Истина);
	СтруктураПараметров.Вставить("ДанныеПО", "");
	СтруктураПараметров.Вставить("ТипДанныхПО", "Штрихкод");
	
	Возврат СтруктураПараметров;
	
КонецФункции

// Сформировать массив товаров по массиву штрихкодов.
// 
// Параметры:
//  ДанныеШтрихкодов - Массив - данные штрихкодов.
//  ОбновитьКоличество - Булево - признак необходимости обновления количества.
//
// Возвращаемое значение:
//  Структура - структруа сформированных товаров.
//
Функция СформироватьМассивТоваров(ДанныеШтрихкодов, ОбновитьКоличество) Экспорт
	
	ОпознанныеШтрихкоды = СтруктураДанныхПоиска();
	ПовторяющиесяШтрихкоды = СтруктураДанныхПоиска();
	НеопознанныеШтрихкоды = Новый Массив;
	
	КС = Новый КвалификаторыСтроки(100, ДопустимаяДлина.Переменная);
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("Строка"));
	ОписаниеТиповСтрока = Новый ОписаниеТипов(МассивТипов, , КС);
	
	КЧ_15_3 = Новый КвалификаторыЧисла(15, 3);
	КЧ_10_0 = Новый КвалификаторыЧисла(10, 0);
	КЧ_1_0 = Новый КвалификаторыЧисла(1, 0);
	МассивТипов.Очистить();
	МассивТипов.Добавить(Тип("Число"));
	ОписаниеТиповЧисло_15_3 = Новый ОписаниеТипов(МассивТипов, , , КЧ_15_3);
	ОписаниеТиповЧисло_10_0 = Новый ОписаниеТипов(МассивТипов, , , КЧ_10_0);
	ОписаниеТиповЧисло_1_0 = Новый ОписаниеТипов(МассивТипов, , , КЧ_1_0);

	ТаблицаШтрихкодов = Новый ТаблицаЗначений;
	ТаблицаШтрихкодов.Колонки.Добавить("НомерСтроки", ОписаниеТиповЧисло_10_0);
	ТаблицаШтрихкодов.Колонки.Добавить("ШтрихКод", ОписаниеТиповСтрока);
	ТаблицаШтрихкодов.Колонки.Добавить("КодСКУ", ОписаниеТиповЧисло_10_0);
	ТаблицаШтрихкодов.Колонки.Добавить("Количество", ОписаниеТиповЧисло_15_3);
	
	ТаблицаSKU = ТаблицаШтрихкодов.Скопировать();
	
	ПрефиксВнутреннегоШтрихкодаВесовогоТовара            = ЗначениеНастроекПовтИсп.ПолучитьЗначениеКонстанты("ПрефиксВнутреннегоШтрихкодаВесовогоТовара");
	ПрефиксВнутреннегоШтрихкодаШтучногоФасованногоТовара = ЗначениеНастроекПовтИсп.ПолучитьЗначениеКонстанты("ПрефиксВнутреннегоШтрихкодаШтучногоФасованногоТовара");
	ДлинаКодаВесовогоТовара  = СтрДлина(Формат(ЗначениеНастроекПовтИсп.ПолучитьЗначениеКонстанты("ВерхняяГраницаДиапазонаSKUВесовогоТовара"),"ЧГ=0"));
	Если ДлинаКодаВесовогоТовара < 5 Тогда
		ДлинаКодаВесовогоТовара = 5;
	КонецЕсли;
	
	СчетчикСтрок = 0;
	Для Каждого СтрокаМассива Из ДанныеШтрихкодов Цикл
		
		СчетчикСтрок = СчетчикСтрок + 1;
		
		ТипШтрихкодаРТ = ТипШтрихкода(СтрокаМассива.ШтрихКод);
		
		Если ТипШтрихкодаРТ = ПланыВидовХарактеристик.ТипыШтрихкодов.EAN13
			И (ПрефиксВнутреннегоШтрихкодаВесовогоТовара > 0)
			И (ДлинаКодаВесовогоТовара > 0)
			И (Лев(СтрокаМассива.ШтрихКод, 2) = "2" + ПрефиксВнутреннегоШтрихкодаВесовогоТовара
				ИЛИ Лев(СтрокаМассива.ШтрихКод, 2) = "2" + ПрефиксВнутреннегоШтрихкодаШтучногоФасованногоТовара) Тогда
			
			КодТовара        = Сред(СтрокаМассива.ШтрихКод, 3,  ДлинаКодаВесовогоТовара);
			КоличествоТовара = Число(Сред(СтрокаМассива.ШтрихКод, 3 + ДлинаКодаВесовогоТовара, 10 - ДлинаКодаВесовогоТовара)) * СтрокаМассива.Количество;
			
			НоваяСтрока = ТаблицаSKU.Добавить();
			НоваяСтрока.НомерСтроки = СчетчикСтрок;
			НоваяСтрока.ШтрихКод = СтрокаМассива.ШтрихКод;
			НоваяСтрока.КодСКУ = Число(КодТовара);
			Если Лев(СтрокаМассива.ШтрихКод, 2) = ("2" + ПрефиксВнутреннегоШтрихкодаВесовогоТовара) Тогда  
				// Весовой товар, расфасованный на весах.
				НоваяСтрока.Количество = КоличествоТовара / 1000;
			Иначе
				// Штучный товар, расфасованный на весах.
				НоваяСтрока.Количество = КоличествоТовара;
			КонецЕсли;
		КонецЕсли;
		
		НоваяСтрока = ТаблицаШтрихкодов.Добавить();
		НоваяСтрока.НомерСтроки = СчетчикСтрок;
		НоваяСтрока.ШтрихКод = СтрокаМассива.ШтрихКод;
		НоваяСтрока.КодСКУ = 0;
		НоваяСтрока.Количество = СтрокаМассива.Количество;
		
	КонецЦикла;
	
	Запрос = Новый Запрос;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ДанныеШтрихкодов.НомерСтроки КАК НомерСтроки,
	|	ДанныеШтрихкодов.Штрихкод КАК Штрихкод,
	|	ДанныеШтрихкодов.КодСКУ КАК КодСКУ,
	|	ДанныеШтрихкодов.Количество КАК Количество
	|ПОМЕСТИТЬ ДанныеШтрихкодов
	|ИЗ
	|	&ТаблицаШтрихкодов КАК ДанныеШтрихкодов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаSKU.НомерСтроки КАК НомерСтроки,
	|	ТаблицаSKU.Штрихкод КАК Штрихкод,
	|	ТаблицаSKU.КодСКУ КАК КодСКУ,
	|	ТаблицаSKU.Количество КАК Количество
	|ПОМЕСТИТЬ ТаблицаSKU
	|ИЗ
	|	&ТаблицаSKU КАК ТаблицаSKU
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеШтрихкодов.Штрихкод КАК Штрихкод,
	|	СУММА(ДанныеШтрихкодов.Количество) КАК Количество,
	|	Штрихкоды.Владелец КАК Владелец,
	|	Штрихкоды.Характеристика КАК Характеристика,
	|	Штрихкоды.Упаковка КАК Упаковка,
	|	&ПустойШтрихКодУпаковки КАК ШтрихкодУпаковкиЕГАИС,
	|	&ПустойТипУпаковки КАК ТипУпаковки,
	|	МИНИМУМ(ДанныеШтрихкодов.НомерСтроки) КАК НомерСтроки
	|ПОМЕСТИТЬ НайденныеШтрихкоды
	|ИЗ
	|	ДанныеШтрихкодов КАК ДанныеШтрихкодов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.Штрихкоды КАК Штрихкоды
	|		ПО ДанныеШтрихкодов.Штрихкод = Штрихкоды.Штрихкод
	|
	|СГРУППИРОВАТЬ ПО
	|	ДанныеШтрихкодов.Штрихкод,
	|	Штрихкоды.Владелец,
	|	Штрихкоды.Характеристика,
	|	Штрихкоды.Упаковка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДанныеШтрихкодов.Штрихкод,
	|	СУММА(ДанныеШтрихкодов.Количество),
	|	КодыТоваровSKU.Номенклатура,
	|	КодыТоваровSKU.Характеристика,
	|	КодыТоваровSKU.Упаковка,
	|	&ПустойШтрихКодУпаковки,
	|	&ПустойТипУпаковки,
	|	МИНИМУМ(ДанныеШтрихкодов.НомерСтроки)
	|ИЗ
	|	ТаблицаSKU КАК ДанныеШтрихкодов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.КодыТоваровSKU КАК КодыТоваровSKU
	|		ПО ДанныеШтрихкодов.КодСКУ = КодыТоваровSKU.SKU
	|
	|СГРУППИРОВАТЬ ПО
	|	ДанныеШтрихкодов.Штрихкод,
	|	КодыТоваровSKU.Номенклатура,
	|	КодыТоваровSKU.Характеристика,
	|	КодыТоваровSKU.Упаковка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДанныеШтрихкодов.Штрихкод,
	|	СУММА(ДанныеШтрихкодов.Количество),
	|	ШтрихкодыУпаковокТоваров.Номенклатура,
	|	ШтрихкодыУпаковокТоваров.Характеристика,
	|	ШтрихкодыУпаковокТоваров.Упаковка,
	|	ШтрихкодыУпаковокТоваров.Ссылка,
	|	ШтрихкодыУпаковокТоваров.ТипУпаковки,
	|	МИНИМУМ(ДанныеШтрихкодов.НомерСтроки)
	|ИЗ
	|	ДанныеШтрихкодов КАК ДанныеШтрихкодов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ШтрихкодыУпаковокТоваров КАК ШтрихкодыУпаковокТоваров
	|		ПО ДанныеШтрихкодов.Штрихкод = ШтрихкодыУпаковокТоваров.ЗначениеШтрихкода
	|
	|СГРУППИРОВАТЬ ПО
	|	ДанныеШтрихкодов.Штрихкод,
	|	ШтрихкодыУпаковокТоваров.Номенклатура,
	|	ШтрихкодыУпаковокТоваров.Характеристика,
	|	ШтрихкодыУпаковокТоваров.Упаковка,
	|	ШтрихкодыУпаковокТоваров.Ссылка,
	|	ШтрихкодыУпаковокТоваров.ТипУпаковки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	НайденныеШтрихкоды.Штрихкод КАК Штрихкод,
	|	НайденныеШтрихкоды.Количество КАК Количество,
	|	ИСТИНА КАК ШтрихКодНайден,
	|	НайденныеШтрихкоды.Владелец КАК Владелец,
	|	НайденныеШтрихкоды.Владелец.Наименование КАК НаименованиеВладельца,
	|	НайденныеШтрихкоды.Характеристика КАК Характеристика,
	|	НайденныеШтрихкоды.Упаковка КАК Упаковка,
	|	НайденныеШтрихкоды.НомерСтроки КАК НомерСтроки,
	|	НайденныеШтрихкоды.ШтрихкодУпаковкиЕГАИС КАК ШтрихкодУпаковкиЕГАИС,
	|	НайденныеШтрихкоды.ТипУпаковки КАК ТипУпаковки,
	|	&ТипШтрихкода КАК ТипШтрихкода
	|ИЗ
	|	НайденныеШтрихкоды КАК НайденныеШтрихкоды
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДанныеШтрихкодов.Штрихкод,
	|	ДанныеШтрихкодов.Количество,
	|	ЛОЖЬ,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	ДанныеШтрихкодов.НомерСтроки,
	|	NULL,
	|	NULL,
	|	NULL
	|ИЗ
	|	ДанныеШтрихкодов КАК ДанныеШтрихкодов
	|		ЛЕВОЕ СОЕДИНЕНИЕ НайденныеШтрихкоды КАК НайденныеШтрихкоды
	|		ПО (НайденныеШтрихкоды.Штрихкод = ДанныеШтрихкодов.Штрихкод)
	|ГДЕ
	|	НайденныеШтрихкоды.НомерСтроки ЕСТЬ NULL
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки,
	|	Штрихкод,
	|	НаименованиеВладельца,
	|	Владелец
	|ИТОГИ
	|	МАКСИМУМ(ШтрихКодНайден),
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Владелец),
	|	МИНИМУМ(НомерСтроки)
	|ПО
	|	Штрихкод";
	
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("ТаблицаШтрихкодов", ТаблицаШтрихкодов);
	Запрос.УстановитьПараметр("ТаблицаSKU", ТаблицаSKU);
	Запрос.УстановитьПараметр("ТипШтрихкода", ПланыВидовХарактеристик.ТипыШтрихкодов.ПустаяСсылка());
	Запрос.УстановитьПараметр("ПустойШтрихКодУпаковки", Справочники.ШтрихкодыУпаковокТоваров.ПустаяСсылка());
	Запрос.УстановитьПараметр("ПустойТипУпаковки", Перечисления.ТипыУпаковок.ПустаяСсылка());
	Результат = Запрос.Выполнить();
	ВыборкаИтоги = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаИтоги.Следующий() Цикл
		Если ВыборкаИтоги.Владелец > 1 Тогда
			Выборка = ВыборкаИтоги.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			ДополнитьСтруктуруРезультатамиПоиска(ПовторяющиесяШтрихкоды, Выборка, Выборка.Штрихкод, "", Ложь);
		Иначе
			Выборка = ВыборкаИтоги.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			Если ВыборкаИтоги.ШтрихКодНайден Тогда
				ДополнитьСтруктуруРезультатамиПоиска(ОпознанныеШтрихкоды, Выборка, Выборка.Штрихкод, "", Ложь);
			Иначе
				Пока Выборка.Следующий() Цикл
					СтруктураНеТовара = Новый Структура;
					СтруктураНеТовара.Вставить("НомерСтрокиЗагрузки", Выборка.НомерСтроки);
					СтруктураНеТовара.Вставить("Штрихкод", Выборка.Штрихкод);
					СтруктураНеТовара.Вставить("Количество", Выборка.Количество);
					НеопознанныеШтрихкоды.Добавить(СтруктураНеТовара);
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	СтруктураРезультат = Новый Структура;
	СтруктураРезультат.Вставить("ОпознанныеШтрихкоды", ОпознанныеШтрихкоды);
	СтруктураРезультат.Вставить("НеопознанныеШтрихкоды", НеопознанныеШтрихкоды);
	СтруктураРезультат.Вставить("ПовторяющиесяШтрихкоды", ПовторяющиесяШтрихкоды);
	
	Возврат СтруктураРезультат;
	
КонецФункции

// Обрабатывает данные по номенклатуре из ТСД
//
// Параметры:
//  СтруктураПараметров - Структура - структура параметров свертки данных.
//
// Возвращаемое значение:
//  Массив - массив свернутых данных по номенклатуре.
// 
Функция СвернутьДанныеПоНоменклатуреИзТСДСервер(СтруктураПараметров) Экспорт
	
	МассивДанных = СтруктураПараметров.ЗначенияПоиска;
	УчитыватьСерийныеНомера = СтруктураПараметров.УчитыватьСерийныеНомераПриСвертке;
	СворачиватьУпаковки = СтруктураПараметров.Свойство("СворачиватьУпаковки");
	
	МассивПослеСвертки = Новый Массив;	// Результат сворачивания.
	
	ТЗ_СворачиваемыеСтроки = Новый ТаблицаЗначений;	// Таблица значений для сворачивания строк.
	ТЗ_СворачиваемыеСтроки.Колонки.Добавить("НомерСтрокиЗагрузки", ОбщегоНазначения.ОписаниеТипаЧисло(10, 0));
	ТЗ_СворачиваемыеСтроки.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	ТЗ_СворачиваемыеСтроки.Колонки.Добавить("Упаковка", Новый ОписаниеТипов("СправочникСсылка.УпаковкиНоменклатуры"));
	ТЗ_СворачиваемыеСтроки.Колонки.Добавить("Характеристика", Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
	ТЗ_СворачиваемыеСтроки.Колонки.Добавить("СерийныйНомер", Новый ОписаниеТипов("СправочникСсылка.СерийныеНомера"));
	ТЗ_СворачиваемыеСтроки.Колонки.Добавить("Количество", ОбщегоНазначения.ОписаниеТипаЧисло(15, 3));
	ТЗ_СворачиваемыеСтроки.Колонки.Добавить("Штрихкод", ОбщегоНазначения.ОписаниеТипаСтрока(200));
	ТЗ_СворачиваемыеСтроки.Колонки.Добавить("МагнитныйКод", ОбщегоНазначения.ОписаниеТипаСтрока(200));
	ТЗ_СворачиваемыеСтроки.Колонки.Добавить("ДанныеПО",  ОбщегоНазначения.ОписаниеТипаСтрока(200));
	ТЗ_СворачиваемыеСтроки.Колонки.Добавить("ТипШтрихкода", Новый ОписаниеТипов("ПланВидовХарактеристикСсылка.ТипыШтрихкодов"));
	
	// Перебираем строки массива "МассивДанных".
	Для Каждого ТекСтрока Из МассивДанных Цикл
		
		// Если текущая строка содержит дисконтную карту.
		Если ТекСтрока.Свойство("Карта") ИЛИ НЕ ТекСтрока.Свойство("Количество") Тогда
			МассивПослеСвертки.Добавить(ТекСтрока);
			Продолжить;
		КонецЕсли;
		
		Если СворачиватьУпаковки Тогда
			Если ТекСтрока.Свойство("Упаковка")
				И ЗначениеЗаполнено(ТекСтрока.Упаковка) Тогда
				КоэффициентУпаковкиПоиска = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТекСтрока.Упаковка, "Коэффициент");
				Если КоэффициентУпаковкиПоиска <= 0 Тогда
					КоэффициентУпаковкиПоиска = 1;
				КонецЕсли;
				ТекСтрока.Количество = ТекСтрока.Количество * КоэффициентУпаковкиПоиска;
				ТекСтрока.Упаковка = Справочники.УпаковкиНоменклатуры.ПустаяСсылка();
			КонецЕсли;
		КонецЕсли;
		
		НоваяСворачиваемаяСтрока = ТЗ_СворачиваемыеСтроки.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСворачиваемаяСтрока, ТекСтрока);
		
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ИсходнаяТаблица.НомерСтрокиЗагрузки КАК НомерСтрокиЗагрузки,
	|	ИсходнаяТаблица.Номенклатура КАК Номенклатура,
	|	ИсходнаяТаблица.Упаковка КАК Упаковка,
	|	ИсходнаяТаблица.Характеристика КАК Характеристика,
	|	ИсходнаяТаблица.СерийныйНомер КАК СерийныйНомер,
	|	ИсходнаяТаблица.Количество КАК Количество,
	|	ИсходнаяТаблица.Штрихкод КАК Штрихкод,
	|	ИсходнаяТаблица.МагнитныйКод КАК МагнитныйКод,
	|	ИсходнаяТаблица.ДанныеПО КАК ДанныеПО,
	|	ИсходнаяТаблица.ТипШтрихкода КАК ТипШтрихкода
	|ПОМЕСТИТЬ ИсходнаяТаблица
	|ИЗ
	|	&ИсходнаяТаблица КАК ИсходнаяТаблица
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МИНИМУМ(ИсходнаяТаблица.НомерСтрокиЗагрузки) КАК НомерСтрокиЗагрузки,
	|	ИсходнаяТаблица.Номенклатура КАК Номенклатура,
	|	ИсходнаяТаблица.Упаковка КАК Упаковка,
	|	ИсходнаяТаблица.Характеристика КАК Характеристика,
	|	ИсходнаяТаблица.СерийныйНомер КАК СерийныйНомер,
	|	МАКСИМУМ(ИсходнаяТаблица.Штрихкод) КАК Штрихкод,
	|	МАКСИМУМ(ИсходнаяТаблица.МагнитныйКод) КАК МагнитныйКод,
	|	МАКСИМУМ(ИсходнаяТаблица.ДанныеПО) КАК ДанныеПО,
	|	МАКСИМУМ(ИсходнаяТаблица.ТипШтрихкода) КАК ТипШтрихкода,
	|	СУММА(ИсходнаяТаблица.Количество) КАК Количество
	|ИЗ
	|	ИсходнаяТаблица КАК ИсходнаяТаблица
	|
	|СГРУППИРОВАТЬ ПО
	|	ИсходнаяТаблица.Номенклатура,
	|	ИсходнаяТаблица.Упаковка,
	|	ИсходнаяТаблица.Характеристика,
	|	ИсходнаяТаблица.СерийныйНомер
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтрокиЗагрузки
	|";
	Запрос.УстановитьПараметр("ИсходнаяТаблица", ТЗ_СворачиваемыеСтроки);
	Выборка = Запрос.Выполнить().Выбрать();
	
	// Добавляем сгруппированные строки в массив "МассивПослеСвертки".
	Пока Выборка.Следующий() Цикл
		
		СтруктураСтроки = Новый Структура;
		СтруктураСтроки.Вставить("НомерСтрокиЗагрузки", Выборка.НомерСтрокиЗагрузки);
		СтруктураСтроки.Вставить("Номенклатура", Выборка.Номенклатура);
		СтруктураСтроки.Вставить("Характеристика", Выборка.Характеристика);
		СтруктураСтроки.Вставить("Упаковка", Выборка.Упаковка);
		СтруктураСтроки.Вставить("Штрихкод", Выборка.Штрихкод);
		СтруктураСтроки.Вставить("МагнитныйКод", Выборка.МагнитныйКод);
		СтруктураСтроки.Вставить("ДанныеПО", Выборка.ДанныеПО);
		СтруктураСтроки.Вставить("ТипШтрихкода", Выборка.ТипШтрихкода);
		Если УчитыватьСерийныеНомера
			И ЗначениеЗаполнено(Выборка.СерийныйНомер) Тогда
			СтруктураСтроки.Вставить("СерийныйНомер", Выборка.СерийныйНомер);
		КонецЕсли;
		СтруктураСтроки.Вставить("Количество", Выборка.Количество);
		
		МассивПослеСвертки.Добавить(СтруктураСтроки);
		
	КонецЦикла;
	
	Возврат МассивПослеСвертки;
	
КонецФункции

// Находит или добавляет новую строку
// в табличную часть документа.
//
// Параметры:
//  Форма - УправляемаяФорма - форма для добавления серийных номеров.
//  СтруктураПараметров - Структура - структура параметров инициализации строки.
//  ДобавленаСтрока - Булево - признак добавления строки.
//  ИмяТабличнойЧасти - Строка - наименование табличной части.
//
// Возвращаемое значение:
//  СтрокаТаблицыЗначений - строка таблицы значений.
//
Функция ИнициализацияСтрокиТоваров(
	Форма,
	СтруктураПараметров,
	ДобавленаСтрока,
	ИмяТабличнойЧасти = "Товары") Экспорт
	
	КоличествоУпаковок = 1;
	Если СтруктураПараметров.Свойство("Количество") Тогда
		КоличествоУпаковок = СтруктураПараметров.Количество;
	КонецЕсли;
	
	ОбновитьКоличество = Ложь;
	Если СтруктураПараметров.Свойство("ОбновитьКоличество") Тогда
		ОбновитьКоличество = Истина;
	КонецЕсли;
	
	Если СтруктураПараметров.Свойство("УчетУпаковок") Тогда
		УчетУпаковок = СтруктураПараметров.УчетУпаковок;
	Иначе
		УчетУпаковок = Истина;
	КонецЕсли; 
	
	Если СтруктураПараметров.Свойство("СворачиватьПоСтрокеПоиска") Тогда
		СворачиватьПоСтрокеПоиска = СтруктураПараметров.СворачиватьПоСтрокеПоиска;
	Иначе
		СворачиватьПоСтрокеПоиска = Истина;
	КонецЕсли; 
	
	СтруктураПоиска = Новый Структура;
	
	Если НЕ СворачиватьПоСтрокеПоиска Тогда
		МассивСтрок = Новый Массив;
		
	ИначеЕсли Форма.Объект[ИмяТабличнойЧасти].Количество() > 0 Тогда
		СтруктураПоиска.Вставить("Номенклатура", СтруктураПараметров.Номенклатура);
		СтруктураПоиска.Вставить("Характеристика", СтруктураПараметров.Характеристика);
		Если УчетУпаковок Тогда
			СтруктураПоиска.Вставить("Упаковка", СтруктураПараметров.Упаковка);
		КонецЕсли;
		Если СтруктураПараметров.Свойство("Справка2") И Форма.Объект[ИмяТабличнойЧасти][0].Свойство("Справка2") Тогда
			СтруктураПоиска.Вставить("Справка2", СтруктураПараметров.Справка2);
		КонецЕсли;
		МассивСтрок = Форма.Объект[ИмяТабличнойЧасти].НайтиСтроки(СтруктураПоиска);
		
	Иначе
		МассивСтрок = Новый Массив;

		
	КонецЕсли;
	
	Если МассивСтрок.Количество() > 0 Тогда 





		
		ДобавленаСтрока = Ложь;
		ТекущаяСтрока = МассивСтрок[0];

		
		Если СтруктураПараметров.Свойство("СтруктураОтбораРедактируемыхСтрок") Тогда
			РедактируемыеСтроки = Форма.Объект[ИмяТабличнойЧасти].НайтиСтроки(СтруктураПараметров.СтруктураОтбораРедактируемыхСтрок);
			Если РедактируемыеСтроки.Найти(ТекущаяСтрока) = Неопределено Тогда
				Возврат ТекущаяСтрока;
			КонецЕсли;
		КонецЕсли;
		
		Если ТекущаяСтрока.Свойство("ИспользоватьСерийныеНомера") Тогда
			УстановитьКоличество = ОбновитьКоличество И НЕ ТекущаяСтрока.ИспользоватьСерийныеНомера;
		Иначе
			УстановитьКоличество = ОбновитьКоличество;
		КонецЕсли;
		Если УстановитьКоличество Тогда
			Если УчетУпаковок Тогда
				ТекущаяСтрока.КоличествоУпаковок = КоличествоУпаковок;
			Иначе
				ТекущаяСтрока.Количество = КоличествоУпаковок;
			КонецЕсли;
		ИначеЕсли УчетУпаковок Тогда
			Если СтруктураПараметров.Упаковка = ТекущаяСтрока.Упаковка Тогда
				КоэффициентПересчета = 1;
			Иначе
				КоэффициентУпаковкиПоиска = 1;
				Если ЗначениеЗаполнено(СтруктураПараметров.Упаковка) Тогда
					КоэффициентУпаковкиПоиска = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтруктураПараметров.Упаковка, "Коэффициент");
					Если КоэффициентУпаковкиПоиска <= 0 Тогда
						КоэффициентУпаковкиПоиска = 1;
					КонецЕсли;
				КонецЕсли;
				
				КоэффициентУпаковкиСтроки = 1;
				Если ЗначениеЗаполнено(ТекущаяСтрока.Упаковка) Тогда
					КоэффициентУпаковкиПоиска = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТекущаяСтрока.Упаковка, "Коэффициент");
					Если КоэффициентУпаковкиСтроки <= 0 Тогда
						КоэффициентУпаковкиСтроки = 1;
					КонецЕсли;
				КонецЕсли;
			
				КоэффициентПересчета = КоэффициентУпаковкиПоиска / КоэффициентУпаковкиСтроки;
			КонецЕсли;
			
			ТекущаяСтрока.КоличествоУпаковок = ТекущаяСтрока.КоличествоУпаковок + КоличествоУпаковок * КоэффициентПересчета;
		Иначе
			ТекущаяСтрока.Количество = ТекущаяСтрока.Количество + КоличествоУпаковок;
		КонецЕсли;
		
	Иначе
		
		ДобавленаСтрока = Истина;
		ТекущаяСтрока = Форма.Объект[ИмяТабличнойЧасти].Добавить();
		ТекущаяСтрока.Номенклатура = СтруктураПараметров.Номенклатура;
		ТекущаяСтрока.Характеристика = СтруктураПараметров.Характеристика;
		Если УчетУпаковок Тогда
			ТекущаяСтрока.Упаковка = СтруктураПараметров.Упаковка;
		КонецЕсли;
		Если ТекущаяСтрока.Свойство("ИспользоватьСерийныеНомера") Тогда
			ТекущаяСтрока.ИспользоватьСерийныеНомера = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтруктураПараметров.Номенклатура, "ИспользоватьСерийныеНомера");
		КонецЕсли;
		Если ТекущаяСтрока.Свойство("Штрихкод")
			И СтруктураПараметров.Свойство("Штрихкод") Тогда
			Если СтруктураПараметров.Свойство("ШтрихкодУпаковкиЕГАИС") Тогда
				Если НЕ ЗначениеЗаполнено(СтруктураПараметров.ШтрихкодУпаковкиЕГАИС) Тогда
					ТекущаяСтрока.Штрихкод = СтруктураПараметров.Штрихкод;
				КонецЕсли;
			Иначе
				ТекущаяСтрока.Штрихкод = СтруктураПараметров.Штрихкод;
			КонецЕсли;
		КонецЕсли;
		Если УчетУпаковок Тогда
			ТекущаяСтрока.КоличествоУпаковок = КоличествоУпаковок;
		Иначе
			ТекущаяСтрока.Количество = КоличествоУпаковок
		КонецЕсли; 
		Если ТекущаяСтрока.Свойство("Справка2") И СтруктураПараметров.Свойство("Справка2") Тогда
			ТекущаяСтрока.Справка2 = СтруктураПараметров.Справка2;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ТекущаяСтрока.Свойство("ИспользоватьСерийныеНомера")
		И ТекущаяСтрока.ИспользоватьСерийныеНомера
		И НЕ СтруктураПараметров.Свойство("ДобавитьКоличество") Тогда
		МассивСерийныхНомеров = ОбработкаТабличнойЧастиТоварыКлиентСервер.МассивСерийныхНомеровДляСтрокиТоваров(
									ТекущаяСтрока.КлючСвязиСерийныхНомеров,
									Форма.Объект.СерийныеНомера);
		Если УчетУпаковок Тогда
			ТекущаяСтрока.КоличествоУпаковок = МассивСерийныхНомеров.Количество();
		Иначе
			ТекущаяСтрока.Количество = МассивСерийныхНомеров.Количество();
		КонецЕсли;
	КонецЕсли;
	
	Возврат ТекущаяСтрока;
	
КонецФункции

// Завершает обработку строки в табличной части документа.
// Или удаляет ее, если номенклатура не заполнена.
//
// Параметры:
//  Форма - УправляемаяФорма - форма на которой завершается обаботка строк.
//  ТекущаяСтрока - Структура - строка на которой завершается обработка выбора.
//  СтруктураДействий - Структура - структура действий над строкой.
//  ИмяТабличнойЧасти - Строка - наименование табличной части.
//  ПараметрыУказанияСерий - Структура - структура параметров серий.
// 
// Возвращаемое значение:
//  УникальныйИдентификатор - уникальный идентификатор строки.
//  
Функция ЗавершениеОбработкиСтрокиТоваров(
	Форма,
	ТекущаяСтрока,
	СтруктураДействий,
	ИмяТабличнойЧасти = "Товары",
	ПараметрыУказанияСерий = Неопределено) Экспорт
	
	КэшированныеЗначения = ОбработкаТабличнойЧастиТоварыКлиентСервер.СтруктураКэшируемыхЗначений();
	ОбработкаТабличнойЧастиТоварыСервер.ОбработатьСтрокуТЧСервер(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	Если ЗначениеЗаполнено(ТекущаяСтрока.Номенклатура) Тогда
		
		Если ТекущаяСтрока.Свойство("Характеристика") Тогда
			ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьПризнакИспользованияХарактеристик(Форма.Объект[ИмяТабличнойЧасти], , ТекущаяСтрока.ПолучитьИдентификатор());
		КонецЕсли;
		
		Если ТекущаяСтрока.Свойство("СтатусУказанияСерий") Тогда
			МассивСтрок = Новый Массив;
			МассивСтрок.Добавить(ТекущаяСтрока);
			Если ПараметрыУказанияСерий = Неопределено Тогда
				ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьСтатусыУказанияСерий(Форма.Объект, Форма.ПараметрыУказанияСерий, МассивСтрок);
			Иначе
				ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьСтатусыУказанияСерий(Форма.Объект, ПараметрыУказанияСерий, МассивСтрок);
			КонецЕсли;
		КонецЕсли;
		
		Если ТекущаяСтрока.Свойство("СтатусыСерийИПодарочныхСертификатов") Тогда
			ОбработкаТабличнойЧастиТоварыКлиентСервер.ОбновитьСтатусыСерийИПодарочныхСертификатовВСтроке(ТекущаяСтрока);
		КонецЕсли;
		
		ИдентификаторСтроки = ТекущаяСтрока.ПолучитьИдентификатор();
		
	Иначе
		
		Форма.Объект[ИмяТабличнойЧасти].Удалить(ТекущаяСтрока.НомерСтроки - 1);
		ИдентификаторСтроки = Неопределено;
		
	КонецЕсли;
	
	Форма.Модифицированность = Истина;
	
	Возврат ИдентификаторСтроки;
	
КонецФункции

// Вставляет предупреждение о невозможности обработки карт.
//
// Параметры:
//  СтруктураРезультат - Структура - структура результата выполнения операции.
//  СтрокаРезультата - Структура - структура результата по которой вставляется предупреждение.
//
Процедура ВставитьПредупреждениеОНевозможностиОбработкиКарт(СтруктураРезультат, СтрокаРезультата) Экспорт
	
	ТипКарты = ?(СтрокаРезультата.ЭтоРегистрационнаяКарта,  НСтр("ru = 'регистрационная'"), НСтр("ru = 'дисконтная'"));
	ТиповКарт = ?(СтрокаРезультата.ЭтоРегистрационнаяКарта,  НСтр("ru = 'регистрационных'"), НСтр("ru = 'дисконтных'"));
	ТекстПредупреждения = НСтр("ru = 'По коду ""%1"" найдена %2 карта. Обработка %3 карт в данной форме не предусмотрена'");
	ТекстПредупреждения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстПредупреждения, СтруктураРезультат.ДанныеПО, ТипКарты, ТиповКарт);
	СтруктураРезультат.Вставить("ТекстПредупреждения", ТекстПредупреждения);
	
КонецПроцедуры

// Вставляет предупреждение о невозможности обработки номенклатуры.
//
// Параметры:
//  СтруктураРезультат - Структура - структура результата выполнения операции.
//  СтрокаРезультата - Структура - структура результата по которой вставляется предупреждение.
//
Процедура ВставитьПредупреждениеОНевозможностиОбработкиНоменклатуры(СтруктураРезультат, СтрокаРезультата) Экспорт
	
	ТекстПредупреждения = НСтр("ru = 'По коду ""%1"" найдена номенклатура. Обработка номенклатуры в данной форме не предусмотрена'");
	ТекстПредупреждения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстПредупреждения, СтруктураРезультат.ДанныеПО);
	СтруктураРезультат.Вставить("ТекстПредупреждения", ТекстПредупреждения);
	
КонецПроцедуры

// Вставляет предупреждение о невозможности обработки сертификатов.
//
// Параметры:
//  СтруктураРезультат - Структура - структура результата выполнения операции.
//  СтрокаРезультата - Структура - структура результата по которой вставляется предупреждение.
//
Процедура ВставитьПредупреждениеОНевозможностиОбработкиСертификатов(СтруктураРезультат, СтрокаРезультата) Экспорт
	
	ТекстПредупреждения = НСтр("ru = 'По коду ""%1"" найден подарочный сертификат. Обработка сертификатов в данной форме не предусмотрена'");
	ТекстПредупреждения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстПредупреждения, СтруктураРезультат.ДанныеПО);
	СтруктураРезультат.Вставить("ТекстПредупреждения", ТекстПредупреждения);
	
КонецПроцедуры

// Вставляет предупреждение о невозможности обработки карт.
//
// Параметры:
//  СтруктураРезультат - Структура - структура результата выполнения операции.
//  СтрокаРезультата - Структура - структура результата по которой вставляется предупреждение.
//
Процедура ВставитьПредупреждениеОНевозможностиОбработкиАкцизныхМарок(СтруктураРезультат, СтрокаРезультата) Экспорт
	
	Если СтрокаРезультата.Свойство("ТипУпаковки") Тогда
		Если СтрокаРезультата.ТипУпаковки = Перечисления.ТипыУпаковок.МаркированныйТовар Тогда
			ТекстПредупреждения = НСтр("ru = 'По коду ""%1"" найдена акцизная марка. Обработка акцизных марок в данной форме не предусмотрена'");
		Иначе
			ТекстПредупреждения = НСтр("ru = 'По коду ""%1"" найдена упаковка ЕГАИС. Обработка упаковок ЕГАИС в данной форме не предусмотрена'");
		КонецЕсли;
	Иначе
		ТекстПредупреждения = НСтр("ru = 'По коду ""%1"" найдена упаковка ЕГАИС. Обработка упаковок ЕГАИС в данной форме не предусмотрена'");
	КонецЕсли;
	ТекстПредупреждения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстПредупреждения, СтруктураРезультат.ДанныеПО);
	СтруктураРезультат.Вставить("ТекстПредупреждения", ТекстПредупреждения);
	
КонецПроцедуры

// Находит контрагента по дисконтной карте.
//
// Параметры:
//  Форма - УправляемаяФорма - форма на которой выполняется операция.
//  СтруктураРезультат - Структура - структура результата выполнения операции.
//  СтрокаРезультата - Структура - структура результата по которой вставляется предупреждение.
//  ИмяТаблицы - Строка - имя таблицы для поиска контрагента.
//
Процедура НайтиКонтрагентаВДинамическомСпискеПоДисконтнойКарте(Форма, СтруктураРезультат, СтрокаРезультата, ИмяТаблицы = "Список") Экспорт
	
	Если ЗначениеЗаполнено(СтрокаРезультата.ВладелецКарты)
		И ТипЗнч(СтрокаРезультата.ВладелецКарты) = Тип("СправочникСсылка.Контрагенты") Тогда
		Если Форма.Элементы[ИмяТаблицы].ТекущаяСтрока <> СтрокаРезультата.ВладелецКарты Тогда
			Форма.ТекущийЭлемент = Форма.Элементы[ИмяТаблицы];
			Форма.Элементы[ИмяТаблицы].ТекущаяСтрока = СтрокаРезультата.ВладелецКарты;
		КонецЕсли;
	Иначе
		ТекстПредупреждения = НСтр("ru = 'По коду ""%1"" найдена дисконтная карта, не связанная с контрагентом.'");
		ТекстПредупреждения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстПредупреждения, СтруктураРезультат.ДанныеПО);
		СтруктураРезультат.Вставить("ТекстПредупреждения", ТекстПредупреждения);
	КонецЕсли;
	
КонецПроцедуры

// Находит физическое лицо по дисконтной карте.
//
// Параметры:
//  Форма - УправляемаяФорма - форма на которой выполняется операция.
//  СтруктураРезультат - Структура - структура результата выполнения операции.
//  СтрокаРезультата - Структура - структура результата по которой вставляется предупреждение.
//  ИмяТаблицы - Строка - имя таблицы для поиска контрагента.
//
Процедура НайтиФизическоеЛицоВДинамическомСпискеПоКарте(Форма, СтруктураРезультат, СтрокаРезультата, ИмяТаблицы = "Список") Экспорт
	
	Если ЗначениеЗаполнено(СтрокаРезультата.ВладелецКарты)
		И ТипЗнч(СтрокаРезультата.ВладелецКарты) = Тип("СправочникСсылка.ФизическиеЛица") Тогда
		Если Форма.Элементы[ИмяТаблицы].ТекущаяСтрока <> СтрокаРезультата.ВладелецКарты Тогда
			Форма.ТекущийЭлемент = Форма.Элементы[ИмяТаблицы];
			Форма.Элементы[ИмяТаблицы].ТекущаяСтрока = СтрокаРезультата.ВладелецКарты;
		КонецЕсли;
	Иначе
		ТекстПредупреждения = НСтр("ru = 'По коду ""%1"" найдена дисконтная карта, не связанная с физическим лицом.'");
		ТекстПредупреждения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстПредупреждения, СтруктураРезультат.ДанныеПО);
		СтруктураРезультат.Вставить("ТекстПредупреждения", ТекстПредупреждения);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ДополнитьСтруктуруРезультатамиПоиска(
	СтруктураПараметров,
	Выборка,
	Знач Штрихкод = "",
	МагнитныйКод = "",
	НеизвестныеДанныеПО = Ложь,
	ДанныеМаркировки = Неопределено)
	
	Если Не ПустаяСтрока(Штрихкод) Тогда
		Позиция = НайтиНедопустимыеСимволыXML(Штрихкод);
		Если Позиция > 0 Тогда
			Штрихкод = Лев(Штрихкод, Позиция - 1);
		КонецЕсли;
	КонецЕсли;
	
	Пока Выборка.Следующий() Цикл
		
		Если ЗначениеЗаполнено(Выборка.Владелец) Тогда
			НеизвестныеДанныеПО = Ложь;
			
			СтруктураШтрихкода = НачатьСтруктуруРезультатовПоиска(СтруктураПараметров, Выборка, Штрихкод, МагнитныйКод);
			
			ТипВладельца = ТипЗнч(Выборка.Владелец);
			Если ТипВладельца = Тип("СправочникСсылка.Номенклатура") Тогда
				СтруктураШтрихкода.Вставить("Номенклатура"         , Выборка.Владелец);
				СтруктураШтрихкода.Вставить("Характеристика"       , Выборка.Характеристика);
				СтруктураШтрихкода.Вставить("Упаковка"             , Выборка.Упаковка);
				СтруктураШтрихкода.Вставить("ТипШтрихкода"         , Выборка.ТипШтрихкода);
				СтруктураШтрихкода.Вставить("ШтрихкодУпаковкиЕГАИС", Выборка.ШтрихкодУпаковкиЕГАИС);
				СтруктураШтрихкода.Вставить("ТипУпаковки"          , Выборка.ТипУпаковки);
				Если ДанныеМаркировки <> Неопределено Тогда
					СтруктураШтрихкода.Вставить("ДанныеМаркировки", Новый Структура("Разобран", ДанныеМаркировки.Разобран));
				КонецЕсли;
			ИначеЕсли ТипВладельца = Тип("СправочникСсылка.СерийныеНомера") Тогда
				Номенклатура = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Выборка.Владелец, "Владелец");
				СтруктураШтрихкода.Вставить("СерийныйНомер", Выборка.Владелец);
				СтруктураШтрихкода.Вставить("Номенклатура" , Номенклатура);
				Если Номенклатура.ПроизвольныйНоминал Тогда
					СтруктураШтрихкода.Вставить("ВвестиНоминал" , Истина);
				КонецЕсли;
			ИначеЕсли ТипВладельца = Тип("СправочникСсылка.СерииНоменклатуры") Тогда
				СтруктураШтрихкода.Вставить("Серия", Выборка.Владелец);
				СтруктураШтрихкода.Вставить("Номенклатура" , Выборка.Номенклатура);
				СтруктураШтрихкода.Вставить("ИспользоватьХарактеристики" , Выборка.ИспользоватьХарактеристики);
				СтруктураШтрихкода.Вставить("ВладелецХарактеристики"     , Выборка.ВладелецХарактеристики);
			ИначеЕсли ТипВладельца = Тип("СправочникСсылка.ИнформационныеКарты") Тогда
				РеквизитыКарты = Новый Структура;
				РеквизитыКарты.Вставить("ТипКарты");
				РеквизитыКарты.Вставить("ВладелецКарты");
				ЗначенияРеквизитовКарты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Выборка.Владелец, РеквизитыКарты);
				СтруктураШтрихкода.Вставить("Карта", Выборка.Владелец);
				СтруктураШтрихкода.Вставить("ТипКарты", ЗначенияРеквизитовКарты.ТипКарты);
				СтруктураШтрихкода.Вставить("ВладелецКарты", ЗначенияРеквизитовКарты.ВладелецКарты);
				СтруктураШтрихкода.Вставить("ЭтоРегистрационнаяКарта", ЗначенияРеквизитовКарты.ТипКарты = Перечисления.ТипыИнформационныхКарт.Регистрационная);
			ИначеЕсли ТипВладельца = Тип("СправочникСсылка.Справки2ЕГАИС") Тогда
				ДанныеНоменклатуры = ИнтеграцияЕГАИСРТ.ДанныеНоменклатурыПоСправке2(Выборка.Владелец);
				СтруктураШтрихкода.Вставить("Номенклатура", ДанныеНоменклатуры.Номенклатура);
				Если ДанныеНоменклатуры.Уникальность Тогда // не заполняем характеристику, если не можем однозначно ее идентифицировать
					СтруктураШтрихкода.Вставить("Характеристика", ДанныеНоменклатуры.Характеристика);
				Иначе
					СтруктураШтрихкода.Вставить("Характеристика", Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка());
				КонецЕсли;
				СтруктураШтрихкода.Вставить("Упаковка", ДанныеНоменклатуры.Упаковка);
				СтруктураШтрихкода.Вставить("ТипШтрихкода", Выборка.ТипШтрихкода);
				СтруктураШтрихкода.Вставить("Справка2", Выборка.Владелец);
			КонецЕсли;
			СтруктураПараметров.ЗначенияПоиска.Добавить(СтруктураШтрихкода);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция НачатьСтруктуруРезультатовПоиска(
	СтруктураПараметров,
	Выборка,
	Штрихкод,
	МагнитныйКод)
	
	СтруктураШтрихкода = Новый Структура;
	Если ЗначениеЗаполнено(СтруктураПараметров.ДанныеПО) Тогда
		СтруктураШтрихкода.Вставить("ДанныеПО", СтруктураПараметров.ДанныеПО);
	ИначеЕсли ЗначениеЗаполнено(Штрихкод) Тогда
		СтруктураШтрихкода.Вставить("ДанныеПО", Штрихкод);
	Иначе
		СтруктураШтрихкода.Вставить("ДанныеПО", МагнитныйКод);
	КонецЕсли;
	СтруктураШтрихкода.Вставить("НомерСтрокиЗагрузки", Выборка.НомерСтроки);
	СтруктураШтрихкода.Вставить("Штрихкод", Штрихкод);
	СтруктураШтрихкода.Вставить("МагнитныйКод", МагнитныйКод);
	СтруктураШтрихкода.Вставить("Количество", Выборка.Количество);
	
	Возврат СтруктураШтрихкода;
	
КонецФункции

Процедура НайтиПоАкцизнойМарке(
	Форма,
	СтруктураПараметров,
	Штрихкод,
	ТипШтрихкодаРТ,
	НеизвестныеДанныеПО,
	НайденоОбъектов)
	
	СтруктураПоиска = Новый Структура;
	СтруктураПоиска.Вставить("КодАкцизнойМарки", Штрихкод);
	СтрокиМарок = Форма.Объект.АкцизныеМарки.НайтиСтроки(СтруктураПоиска);
	Если СтрокиМарок.Количество() > 0 Тогда
		НайденнаяСтрока = СтрокиМарок[0];
		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("КлючСвязи", НайденнаяСтрока.КлючСвязи);
		СтрокиНоменклатуры = Форма.Объект.Товары.НайтиСтроки(СтруктураПоиска);
		Если СтрокиНоменклатуры.Количество() > 0 Тогда
			НайденнаяСтрока = СтрокиНоменклатуры[0];
			ИдентификаторСтроки = НайденнаяСтрока.ПолучитьИдентификатор();
			НеизвестныеДанныеПО = Ложь;
			
			СтруктураШтрихкода = Новый Структура;
			Если ЗначениеЗаполнено(СтруктураПараметров.ДанныеПО) Тогда
				СтруктураШтрихкода.Вставить("ДанныеПО", СтруктураПараметров.ДанныеПО);
			ИначеЕсли ЗначениеЗаполнено(Штрихкод) Тогда
				СтруктураШтрихкода.Вставить("ДанныеПО", Штрихкод);
			КонецЕсли;
			СтруктураШтрихкода.Вставить("Штрихкод", Штрихкод);
			СтруктураШтрихкода.Вставить("МагнитныйКод", "");
			СтруктураШтрихкода.Вставить("Количество", 1);
			
			СтруктураПараметров.ЗначенияПоиска.Добавить(СтруктураШтрихкода);
			СтруктураПараметров.Вставить("АктивизироватьСтроку", ИдентификаторСтроки);
			СтруктураПараметров.Вставить("ПовторАкцизнойМарки", Истина);
			СтруктураПараметров.Вставить("ТекстПредупреждения", НСтр("ru = 'Акцизная марка уже считана в этом документе'"));
			НайденоОбъектов = 1;
		КонецЕсли;
	Иначе
		ТекстОшибки = "";
		Операция = "";
		ОрганизацияЕГАИС = Неопределено;
		Если Форма.ИмяФормы = "Обработка.РМКУправляемыйРежим.Форма.Форма"
			ИЛИ Форма.ИмяФормы = "Документ.ЧекККМ.Форма.ФормаДокумента" Тогда
			Если Форма.Объект.ВидОперации = Перечисления.ВидыОперацийЧекККМ.Возврат Тогда
				Операция = "Возврат";
			Иначе
				Операция = "Продажа";
			КонецЕсли;
		ИначеЕсли Форма.ИмяФормы = "Документ.ВозвратТоваровОтПокупателя.Форма.ФормаДокумента" Тогда
			Операция = "Возврат";
		ИначеЕсли Форма.ИмяФормы = "Документ.РеализацияТоваров.Форма.ФормаДокумента" Тогда
			Операция = "Продажа";
		ИначеЕсли Форма.ИмяФормы = "Документ.ПеремещениеТоваров.Форма.ФормаДокумента" Тогда
			Операция = "Продажа";
		КонецЕсли;
		
		Если Форма.ИмяФормы = "Обработка.РМКУправляемыйРежим.Форма.Форма" Тогда 
			ОрганизацияЕГАИС = Форма.ОрганизацияЕГАИС;
		ИначеЕсли Форма.ИмяФормы = "Документ.ПеремещениеТоваров.Форма.ФормаДокумента" Тогда
			ОрганизацияЕГАИС = Справочники.КлассификаторОрганизацийЕГАИС.ОрганизацияЕГАИСПоОрганизацииИТорговомуОбъекту(
								Форма.Объект.Организация,
								Форма.Объект.МагазинОтправитель);
		Иначе
			ОрганизацияЕГАИС = Справочники.КлассификаторОрганизацийЕГАИС.ОрганизацияЕГАИСПоОрганизацииИТорговомуОбъекту(
								Форма.Объект.Организация,
								Форма.Объект.Магазин);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Операция) Тогда
			АкцизныеМаркиЕГАИСРТ.ПроверитьУникальностьАкцизнойМарки(Операция, Штрихкод, ТекстОшибки, ОрганизацияЕГАИС);
			Если НЕ ЗначениеЗаполнено(ТекстОшибки) Тогда
				ЗапросМарка = Новый Запрос;
				ЗапросМарка.Текст = "
				|ВЫБРАТЬ
				|	0 КАК НомерСтроки,
				|	Штрихкоды.Номенклатура КАК Владелец,
				|	Штрихкоды.Характеристика КАК Характеристика,
				|	ВЫБОР
				|		КОГДА Штрихкоды.Упаковка ССЫЛКА Справочник.УпаковкиНоменклатуры
				|			ТОГДА Штрихкоды.Упаковка
				|		ИНАЧЕ &ПустаяУпаковка
				|	КОНЕЦ КАК Упаковка,
				|	&ТипШтрихкода КАК ТипШтрихкода,
				|	ВЫБОР
				|		КОГДА Штрихкоды.Количество = 0
				|			ТОГДА 1
				|		ИНАЧЕ Штрихкоды.Количество
				|	КОНЕЦ КАК Количество,
				|	Штрихкоды.Ссылка КАК ШтрихкодУпаковкиЕГАИС,
				|	Штрихкоды.ТипУпаковки КАК ТипУпаковки
				|ИЗ
				|	Справочник.ШтрихкодыУпаковокТоваров КАК Штрихкоды
				|ГДЕ
				|	Штрихкоды.ЗначениеШтрихкода = &Штрихкод";
				
				
				ЗапросМарка.УстановитьПараметр("Штрихкод", Штрихкод);
				ЗапросМарка.УстановитьПараметр("ТипШтрихкода", ТипШтрихкодаРТ);
				ЗапросМарка.УстановитьПараметр("ПустаяУпаковка", Справочники.УпаковкиНоменклатуры.ПустаяСсылка());
				ЗапросМарка.УстановитьПараметр("ПустойШтрихКодУпаковки", Справочники.ШтрихкодыУпаковокТоваров.ПустаяСсылка());
				ЗапросМарка.УстановитьПараметр("ПустойТипУпаковки", Перечисления.ТипыУпаковок.ПустаяСсылка());
				ЗапросМарка.УстановитьПараметр("ТипУпаковки", Перечисления.ТипыУпаковок.МаркированныйТовар);
				РезультатЗапроса = ЗапросМарка.Выполнить();
				Выборка = РезультатЗапроса.Выбрать();
				НайденоОбъектов = Выборка.Количество();
				Если НайденоОбъектов > 0 Тогда
					ДополнитьСтруктуруРезультатамиПоиска(СтруктураПараметров, Выборка, Штрихкод, "", НеизвестныеДанныеПО);
				Иначе
					Если СтрДлина(Штрихкод) < 150 Тогда
						// Старый формат.
						КодАлкогольнойПродукции = АкцизныеМаркиВызовСервера.КодКлассификатораНоменклатурыЕГАИС(Штрихкод);
						Если ЗначениеЗаполнено(КодАлкогольнойПродукции) Тогда
							ЗапросМарка.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
							|	0 КАК НомерСтроки,
							|	СоответствиеНоменклатурыЕГАИС.Номенклатура КАК Владелец,
							|	СоответствиеНоменклатурыЕГАИС.Характеристика КАК Характеристика,
							|	&ПустаяУпаковка КАК Упаковка,
							|	&ТипШтрихкода КАК ТипШтрихкода,
							|	1 КАК Количество,
							|	NULL КАК ШтрихкодУпаковкиЕГАИС,
							|	&ТипУпаковки КАК ТипУпаковки
							|ИЗ
							|	РегистрСведений.СоответствиеНоменклатурыЕГАИС КАК СоответствиеНоменклатурыЕГАИС
							|ГДЕ
							|	СоответствиеНоменклатурыЕГАИС.АлкогольнаяПродукция.Код = &КодАлкогольнойПродукции";
							ЗапросМарка.УстановитьПараметр("КодАлкогольнойПродукции", КодАлкогольнойПродукции);
							РезультатЗапроса = ЗапросМарка.Выполнить();
							Выборка = РезультатЗапроса.Выбрать();
							НайденоОбъектов = Выборка.Количество();
							Если НайденоОбъектов > 0 Тогда
								ДополнитьСтруктуруРезультатамиПоиска(СтруктураПараметров, Выборка, Штрихкод, "", НеизвестныеДанныеПО);
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			Иначе
				СтруктураПараметров.Вставить("ТекстПредупреждения", Строка(ТекстОшибки));
				НайденоОбъектов = 1;
				НеизвестныеДанныеПО = Ложь;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ДополнитьСтруктуруДляРегистрацииНовогоОбъекта(
	СтруктураПараметров,
	ДанныеПО,
	СтруктураДействий,
	НеизвестныеДанныеПО,
	ТипШтрихкодаРТ = Неопределено,
	ВозможнаРегистрацияНовойНоменклатуры = Ложь) Экспорт
	
	РегистрироватьНовыйОбъект = Истина;
	
	Если СтруктураДействий.Свойство("РегистрацияНовойКарты") Тогда
		Пользователь = Неопределено;
		Если НЕ СтруктураДействий.Свойство("Пользователь", Пользователь) Тогда
			Пользователь = Пользователи.ТекущийПользователь();
		КонецЕсли;
		              
		Если УправлениеПользователями.ПолучитьБулевоЗначениеПраваПользователя(
				ПланыВидовХарактеристик.ПраваПользователей.РазрешитьРегистрациюДисконтнойКартыПриСчитыванииНовогоКода,
				Ложь,
				Пользователь) Тогда
				
			Если ТипШтрихкодаРТ = Неопределено Тогда
				ТипКарты = Перечисления.ВидыИнформационныхКарт.Магнитная;
			Иначе
				ТипКарты = Перечисления.ВидыИнформационныхКарт.Штриховая;
			КонецЕсли;
			МассивШаблонов = Новый Массив;
			Если РегистрыСведений.ШаблоныРегистрацииНовыхКарт.РезультатПроверкиСоответствияШаблонам(
					ДанныеПО,
					ТипКарты,
					ТипШтрихкодаРТ,
					МассивШаблонов) Тогда
				
				РегистрироватьНовыйОбъект = Ложь;
				НеизвестныеДанныеПО = Ложь;
				
				ПредставлениеКарты = ДанныеПО;
				Если МассивШаблонов.Количество() = 1 Тогда
					
					СтруктураНовойКарты = МассивШаблонов[0];
					СтруктураНовойКарты.Вставить("ТипШтрихкода", ТипШтрихкодаРТ);
					СтруктураНовойКарты.Вставить("КодКарты", ДанныеПО);
					
					СтруктураПараметров.Вставить("РегистрацияНовойКарты", СтруктураНовойКарты);
					
					Если СтруктураНовойКарты.Свойство("НаименованиеШаблона")
						И ЗначениеЗаполнено(СтруктураНовойКарты.НаименованиеШаблона) Тогда
							ПредставлениеКарты = ПредставлениеКарты + " (" + СтруктураНовойКарты.НаименованиеШаблона+")";
					КонецЕсли;
					
				Иначе
					
					СтруктураПараметров.Вставить("РегистрацияНовойКартыВыборШаблона", ПоместитьВоВременноеХранилище(МассивШаблонов, Новый УникальныйИдентификатор()));

				КонецЕсли;
				
				ТекстВопроса = НСтр("ru = 'Создать новую информационную карту? Карта %1.'");
				ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстВопроса, ПредставлениеКарты);
				
				СтруктураПараметров.Вставить("ТекстВопросаНовойКарты", ТекстВопроса);
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Если РегистрироватьНовыйОбъект
		И ВозможнаРегистрацияНовойНоменклатуры
		И СтруктураДействий.Свойство("РегистрацияНовойНоменклатуры") Тогда
		
		РегистрироватьНовыйОбъект = Ложь;
		НеизвестныеДанныеПО = Ложь;
		
		ТекстВопроса = НСтр("ru = 'Создать новую позицию товара с штрихкодом %1?'");
		ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстВопроса, ДанныеПО);
		
		СтруктураПараметров.Вставить("ДанныеПО", ДанныеПО);
		СтруктураПараметров.Вставить("Штрихкод", ДанныеПО);
		СтруктураПараметров.Вставить("ТипШтрихкода", ТипШтрихкодаРТ);
		СтруктураПараметров.Вставить("ТекстВопроса", ТекстВопроса);
		СтруктураПараметров.Вставить("РегистрацияНовойНоменклатуры", Истина);
		
		Если СтруктураДействий.Свойство("ИспользоватьКоличество") Тогда
			СтруктураПараметров.Вставить("ИспользоватьКоличество", СтруктураДействий.ИспользоватьКоличество);
			Если СтруктураДействий.Свойство("ОбновитьКоличество") Тогда
				СтруктураПараметров.Вставить("ОбновитьКоличество", СтруктураДействий.ИспользоватьКоличество);
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
		
КонецПроцедуры

Функция ПрименитьФорматДляДанныхКарты(ДанныеКарты, НомерДорожки, ПрефиксКода, СуффиксКода, КоличествоЗнаков)

	СписокКодовКарты = Новый СписокЗначений;

	ДанныеРазбитыНаДорожки = (СтрЧислоСтрок(ДанныеКарты) > 1);

	Если Не ДанныеРазбитыНаДорожки  Тогда
		СтрокаКода = ДанныеКарты;
	Иначе
		СтрокаКода = СтрПолучитьСтроку(ДанныеКарты, НомерДорожки);
	КонецЕсли;
	
	Префикс       = СокрЛП(ПрефиксКода);
	Суффикс       = СокрЛП(СуффиксКода);
	ДлинаПрефикса = СтрДлина(Префикс);
	ДлинаСуффикса = СтрДлина(Суффикс);

	Отказ = Ложь;
	Пока Не Отказ Цикл
		
		ПозицияНачалаПрефикса = Найти(СтрокаКода, Префикс);
		
		Если ПозицияНачалаПрефикса = 0 Тогда
			// Входит, когда указан префикс, но не найден в строке.
			Отказ = Истина;
			Продолжить;
		Иначе
			// Входит, когда префикс не указан, или указан и найден в строке.
			ПозицияНачалаКода = ПозицияНачалаПрефикса + ДлинаПрефикса;
		КонецЕсли;
		
		ПрефиксСодержитСуффикс = ?(Найти(Префикс, Суффикс) = 0, Ложь, Истина);
		
		Если ДлинаСуффикса = 0 Тогда
			
			ПозицияНачалаСуффикса = СтрДлина(СтрокаКода) + 1;
			
		ИначеЕсли ДлинаСуффикса <> 0 И Не ПрефиксСодержитСуффикс Тогда
			
			ПозицияНачалаСуффикса = Найти(СтрокаКода, Суффикс);
			// Если суффикс найден раньше префикса или это на том же месте,
			// то отрезаем строку до префикса и пытаемся найти префикс еще раз.
			Если ПозицияНачалаПрефикса > ПозицияНачалаСуффикса И ПозицияНачалаСуффикса <> 0 Тогда
				СтрокаКода = Сред(СтрокаКода, ПозицияНачалаСуффикса + 1);
				Продолжить;
			КонецЕсли;
			
		ИначеЕсли ДлинаСуффикса <> 0 И ПрефиксСодержитСуффикс Тогда
			
			СлужебнаяСтрока  = Сред(СтрокаКода, ПозицияНачалаКода);
			СлужебнаяПозиция = Найти(СлужебнаяСтрока, Суффикс);
			Если СлужебнаяПозиция = 0 Тогда
				Отказ = Истина;
				Продолжить
			КонецЕсли;
			ПозицияНачалаСуффикса = ПозицияНачалаКода + СлужебнаяПозиция - 1;
		КонецЕсли;
		
		Если ПозицияНачалаСуффикса <= 1 Тогда
			Отказ = Истина;
			Продолжить
		КонецЕсли;

		Если КоличествоЗнаков = 0 Тогда
			ДлинаКода = ПозицияНачалаСуффикса - ПозицияНачалаКода;
		Иначе
			ДлинаКода = КоличествоЗнаков;
		КонецЕсли;
		
		СтрокаКодаПоСуффиксу = Ложь;
		Если ДлинаПрефикса = 0 И ДлинаСуффикса <> 0 И КоличествоЗнаков <> 0 Тогда
			ПозицияНачалаКода = ПозицияНачалаСуффикса - КоличествоЗнаков;
			СтрокаКодаПоСуффиксу = Истина;
		КонецЕсли;

		КодКарты = Сред(СтрокаКода, ПозицияНачалаКода, ДлинаКода);
		
		Если ДлинаСуффикса <> 0 Тогда
			ПредполагаемыйСуффикс = Сред(СтрокаКода, ПозицияНачалаКода + ДлинаКода, ДлинаСуффикса);
			Если ПредполагаемыйСуффикс <> Суффикс Тогда
				КодКарты = "";
			КонецЕсли;
		КонецЕсли;
		
		Если Не СтрокаКодаПоСуффиксу
		 И (ПозицияНачалаПрефикса > 1
		 Или ((ПозицияНачалаПрефикса = 1) И (ПозицияНачалаКода > 1))) Тогда
			СтрокаКода = Сред(СтрокаКода, ПозицияНачалаПрефикса + 1);
		Иначе
			СтрокаКода = Сред(СтрокаКода, ПозицияНачалаСуффикса + 1);
		КонецЕсли;

		Если КодКарты <> "" Тогда
			СписокКодовКарты.Добавить(КодКарты);
		КонецЕсли;

	КонецЦикла;

	Возврат СписокКодовКарты;

КонецФункции

Функция МаркируемаяПродукция(Штрихкод) Экспорт
	
	СтруктураМаркируемойПродукции = Новый Структура;
	СтруктураМаркируемойПродукции.Вставить("ЭтоАлкоголь", ИнтеграцияЕГАИСРТ.ЭтоШтрихкодАкцизнойМарки(Штрихкод));
	
	//ИнтеграцияИСМПТК
	СтруктураМаркируемойПродукции.Вставить("ЭтоТабак",    РозничноеВыбытиеИСМПТК.ЭтоШтрихкодТабачнойПродукции(Штрихкод, Истина));
	СтруктураМаркируемойПродукции.Вставить("ЭтоОбувь", 	  РозничноеВыбытиеИСМПТК.ЭтоШтрихкодОбувнойПродукции(Штрихкод));
	СтруктураМаркируемойПродукции.Вставить("ЭтоФарма", 	  РозничноеВыбытиеИСМПТК.ЭтоШтрихкодЛекарственнойПродукции(Штрихкод));
	//Конец ИнтеграцияИСМПТК
	
	Возврат СтруктураМаркируемойПродукции;
	
КонецФункции

Функция МассивСерияВТЧТовары()
	
	МассивФорм = Новый Массив;
	МассивФорм.Добавить("Документ.ОрдерНаОтражениеИзлишковТоваров.Форма.ФормаДокумента");
	МассивФорм.Добавить("Документ.ОрдерНаОтражениеНедостачТоваров.Форма.ФормаДокумента");
	
	Возврат МассивФорм;
КонецФункции // МассивСерияВТЧТовары()

Функция МассивФормПоискаШтрихкодаВСериях()
	
	МассивФорм = Новый Массив;
	МассивФорм.Добавить("Документ.АктОРасхожденияхПриПриемкеТоваров.Форма.ФормаДокумента");
	МассивФорм.Добавить("Документ.ВозвратТоваровОтПокупателя.Форма.ФормаДокумента");
	МассивФорм.Добавить("Документ.ВозвратТоваровПоставщику.Форма.ФормаДокумента");
	МассивФорм.Добавить("Документ.ОприходованиеТоваров.Форма.ФормаДокумента");
	МассивФорм.Добавить("Документ.ОрдерНаОтражениеИзлишковТоваров.Форма.ФормаДокумента");
	МассивФорм.Добавить("Документ.ОрдерНаОтражениеНедостачТоваров.Форма.ФормаДокумента");
	МассивФорм.Добавить("Документ.ОрдерНаПеремещениеТоваров.Форма.ФормаДокумента");
	МассивФорм.Добавить("Документ.ОтчетОРозничныхПродажах.Форма.ФормаДокумента");
	МассивФорм.Добавить("Документ.ПеремещениеТоваров.Форма.ФормаДокумента");
	МассивФорм.Добавить("Документ.ПоступлениеТоваров.Форма.ФормаДокумента");
	МассивФорм.Добавить("Документ.ПриходныйОрдерНаТовары.Форма.ФормаДокумента");
	МассивФорм.Добавить("Документ.РасходныйОрдерНаТовары.Форма.ФормаДокумента");
	МассивФорм.Добавить("Документ.РеализацияТоваров.Форма.ФормаДокумента");
	МассивФорм.Добавить("Документ.СборкаТоваров.Форма.ФормаДокумента");
	МассивФорм.Добавить("Документ.СписаниеТоваров.Форма.ФормаДокумента");
	МассивФорм.Добавить("Документ.ЧекККМ.Форма.ФормаДокумента");
	МассивФорм.Добавить("Обработка.ПомощникПриемкиОтгрузки.Форма.Форма");
	МассивФорм.Добавить("Обработка.РМКУправляемыйРежим.Форма.Форма");
	
	Возврат МассивФорм;
КонецФункции // МассивФормПоискаШтрихкодаВСериях()

Функция УникальныеИменаТабличныхЧастей(ИмяФормы)
	
	ИменаТЧ = Новый Структура;
	ИменаТЧ.Вставить("Товары", "Товары");
	ИменаТЧ.Вставить("Серии" , "Серии");
	
	Если ИмяФормы = "Обработка.ПомощникПриемкиОтгрузки.Форма.Форма" Тогда
		
		ИменаТЧ.Вставить("Товары", "ТоварыФакт");
		ИменаТЧ.Вставить("Серии" , "СерииФакт");
		
	КонецЕсли;
	
	Возврат ИменаТЧ
	
КонецФункции

#КонецОбласти
#КонецОбласти

