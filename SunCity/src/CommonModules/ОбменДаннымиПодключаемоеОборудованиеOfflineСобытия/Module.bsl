////////////////////////////////////////////////////////////////////////////////
// ОбменДаннымиПодключаемоеОборудованиеOfflineСобытия содержит процедуры и функции 
// обработки событий обмена данными с подключаемым оборудованием офлайн.
//  
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Регистрирует изменения справочников.
//
// Параметры:
//  Источник - СправочникОбъект - источник события.
//  Отказ - Булево - флаг отказа от выполнения обработчика.
//
Процедура ЗарегистрироватьИзмененияСправочника(Источник, Отказ) Экспорт

	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеНастроекПовтИсп.ПолучитьЗначениеКонстанты("ИспользоватьОбменСПодключаемымОборудованием") Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТипИсточника = ТипЗнч(Источник);
	Если ТипИсточника = Тип("СправочникОбъект.Номенклатура") Тогда
		
		Запрос = Новый Запрос(   
		"ВЫБРАТЬ
		|	КодыТоваровSKU.SKU КАК SKU
		|ПОМЕСТИТЬ КодыSKU
		|ИЗ
		|	РегистрСведений.КодыТоваровSKU КАК КодыТоваровSKU
		|ГДЕ
		|	КодыТоваровSKU.Номенклатура = &Значение
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	КодыТоваровPLUНаОборудовании.ПравилоОбмена КАК ПравилоОбмена
		|ПОМЕСТИТЬ ИспользуемыеПравилаОбмена
		|ИЗ
		|	РегистрСведений.КодыТоваровPLUНаОборудовании КАК КодыТоваровPLUНаОборудовании
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ КодыSKU КАК КодыSKU
		|		ПО КодыТоваровPLUНаОборудовании.КодТовараSKU = КодыSKU.SKU
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	КодыТоваровPLUНаОборудовании.КодТовараPLU КАК КодТовараPLU,
		|	КодыТоваровPLUНаОборудовании.ПравилоОбмена КАК ПравилоОбмена
		|ИЗ
		|	РегистрСведений.КодыТоваровPLUНаОборудовании КАК КодыТоваровPLUНаОборудовании
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ КодыSKU КАК КодыSKU
		|		ПО КодыТоваровPLUНаОборудовании.КодТовараSKU = КодыSKU.SKU
		|
		|СГРУППИРОВАТЬ ПО
		|	КодыТоваровPLUНаОборудовании.КодТовараPLU,
		|	КодыТоваровPLUНаОборудовании.ПравилоОбмена
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ПодключаемоеОборудование.УзелИнформационнойБазы КАК УзелИнформационнойБазы
		|ИЗ
		|	Справочник.ПодключаемоеОборудование КАК ПодключаемоеОборудование
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ИспользуемыеПравилаОбмена КАК ИспользуемыеПравилаОбмена
		|		ПО ПодключаемоеОборудование.ПравилоОбмена = ИспользуемыеПравилаОбмена.ПравилоОбмена
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланОбмена.ОбменСПодключаемымОборудованием КАК ОбменСПодключаемымОборудованием
		|		ПО ПодключаемоеОборудование.УзелИнформационнойБазы = ОбменСПодключаемымОборудованием.Ссылка");
		
		Запрос.УстановитьПараметр("Значение", Источник.Ссылка);
		
		Результат = Запрос.ВыполнитьПакет();
		УзлыДляЗаписи = Результат[3].Выгрузить();
		ДанныеДляРегистрации = Результат[2].Выгрузить();
		
		МассивУзлов = УзлыДляЗаписи.ВыгрузитьКолонку("УзелИнформационнойБазы");
		
		Набор = РегистрыСведений.КодыТоваровPLUНаОборудовании.СоздатьНаборЗаписей();
		Для Каждого Товар Из ДанныеДляРегистрации Цикл
			Набор.Отбор.ПравилоОбмена.Значение = Товар.ПравилоОбмена;
			Набор.Отбор.ПравилоОбмена.Использование = Истина;
			
			Набор.Отбор.КодТовараPLU.Значение = Товар.КодТовараPLU;
			Набор.Отбор.КодТовараPLU.Использование = Истина;
			
			ПланыОбмена.ЗарегистрироватьИзменения(МассивУзлов, Набор);
		КонецЦикла;
		
	ИначеЕсли ТипИсточника = Тип("СправочникОбъект.ХарактеристикиНоменклатуры") Тогда
		
		Запрос = Новый Запрос(   
		"ВЫБРАТЬ
		|	КодыТоваровSKU.SKU КАК SKU
		|ПОМЕСТИТЬ КодыSKU
		|ИЗ
		|	РегистрСведений.КодыТоваровSKU КАК КодыТоваровSKU
		|ГДЕ
		|	КодыТоваровSKU.Характеристика = &Значение
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	КодыТоваровPLUНаОборудовании.ПравилоОбмена КАК ПравилоОбмена
		|ПОМЕСТИТЬ ИспользуемыеПравилаОбмена
		|ИЗ
		|	РегистрСведений.КодыТоваровPLUНаОборудовании КАК КодыТоваровPLUНаОборудовании
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ КодыSKU КАК КодыSKU
		|		ПО КодыТоваровPLUНаОборудовании.КодТовараSKU = КодыSKU.SKU
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	КодыТоваровPLUНаОборудовании.КодТовараPLU КАК КодТовараPLU,
		|	КодыТоваровPLUНаОборудовании.ПравилоОбмена КАК ПравилоОбмена
		|ИЗ
		|	РегистрСведений.КодыТоваровPLUНаОборудовании КАК КодыТоваровPLUНаОборудовании
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ КодыSKU КАК КодыSKU
		|		ПО КодыТоваровPLUНаОборудовании.КодТовараSKU = КодыSKU.SKU
		|
		|СГРУППИРОВАТЬ ПО
		|	КодыТоваровPLUНаОборудовании.КодТовараPLU,
		|	КодыТоваровPLUНаОборудовании.ПравилоОбмена
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ПодключаемоеОборудование.УзелИнформационнойБазы КАК УзелИнформационнойБазы
		|ИЗ
		|	Справочник.ПодключаемоеОборудование КАК ПодключаемоеОборудование
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ИспользуемыеПравилаОбмена КАК ИспользуемыеПравилаОбмена
		|		ПО ПодключаемоеОборудование.ПравилоОбмена = ИспользуемыеПравилаОбмена.ПравилоОбмена
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланОбмена.ОбменСПодключаемымОборудованием КАК ОбменСПодключаемымОборудованием
		|		ПО ПодключаемоеОборудование.УзелИнформационнойБазы = ОбменСПодключаемымОборудованием.Ссылка");
		
		Запрос.УстановитьПараметр("Значение", Источник.Ссылка);
		
		Результат = Запрос.ВыполнитьПакет();
		УзлыДляЗаписи = Результат[3].Выгрузить();
		ДанныеДляРегистрации = Результат[2].Выгрузить();
		
		МассивУзлов = УзлыДляЗаписи.ВыгрузитьКолонку("УзелИнформационнойБазы");
		
		Набор = РегистрыСведений.КодыТоваровPLUНаОборудовании.СоздатьНаборЗаписей();
		Для Каждого Товар Из ДанныеДляРегистрации Цикл
			Набор.Отбор.ПравилоОбмена.Значение = Товар.ПравилоОбмена;
			Набор.Отбор.ПравилоОбмена.Использование = Истина;
			
			Набор.Отбор.КодТовараPLU.Значение = Товар.КодТовараPLU;
			Набор.Отбор.КодТовараPLU.Использование = Истина;
			
			ПланыОбмена.ЗарегистрироватьИзменения(МассивУзлов, Набор);
		КонецЦикла;
		
	ИначеЕсли ТипИсточника = Тип("СправочникОбъект.УпаковкиНоменклатуры") Тогда
		
		Запрос = Новый Запрос(   
		"ВЫБРАТЬ
		|	КодыТоваровSKU.SKU КАК SKU
		|ПОМЕСТИТЬ КодыSKU
		|ИЗ
		|	РегистрСведений.КодыТоваровSKU КАК КодыТоваровSKU
		|ГДЕ
		|	КодыТоваровSKU.Упаковка = &Значение
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	КодыТоваровPLUНаОборудовании.ПравилоОбмена КАК ПравилоОбмена
		|ПОМЕСТИТЬ ИспользуемыеПравилаОбмена
		|ИЗ
		|	РегистрСведений.КодыТоваровPLUНаОборудовании КАК КодыТоваровPLUНаОборудовании
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ КодыSKU КАК КодыSKU
		|		ПО КодыТоваровPLUНаОборудовании.КодТовараSKU = КодыSKU.SKU
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	КодыТоваровPLUНаОборудовании.КодТовараPLU КАК КодТовараPLU,
		|	КодыТоваровPLUНаОборудовании.ПравилоОбмена КАК ПравилоОбмена
		|ИЗ
		|	РегистрСведений.КодыТоваровPLUНаОборудовании КАК КодыТоваровPLUНаОборудовании
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ КодыSKU КАК КодыSKU
		|		ПО КодыТоваровPLUНаОборудовании.КодТовараSKU = КодыSKU.SKU
		|
		|СГРУППИРОВАТЬ ПО
		|	КодыТоваровPLUНаОборудовании.КодТовараPLU,
		|	КодыТоваровPLUНаОборудовании.ПравилоОбмена
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ПодключаемоеОборудование.УзелИнформационнойБазы КАК УзелИнформационнойБазы
		|ИЗ
		|	Справочник.ПодключаемоеОборудование КАК ПодключаемоеОборудование
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ИспользуемыеПравилаОбмена КАК ИспользуемыеПравилаОбмена
		|		ПО ПодключаемоеОборудование.ПравилоОбмена = ИспользуемыеПравилаОбмена.ПравилоОбмена
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланОбмена.ОбменСПодключаемымОборудованием КАК ОбменСПодключаемымОборудованием
		|		ПО ПодключаемоеОборудование.УзелИнформационнойБазы = ОбменСПодключаемымОборудованием.Ссылка");
		
		Запрос.УстановитьПараметр("Значение", Источник.Ссылка);
		
		Результат = Запрос.ВыполнитьПакет();
		УзлыДляЗаписи = Результат[3].Выгрузить();
		ДанныеДляРегистрации = Результат[2].Выгрузить();
		
		МассивУзлов = УзлыДляЗаписи.ВыгрузитьКолонку("УзелИнформационнойБазы");
		
		Набор = РегистрыСведений.КодыТоваровPLUНаОборудовании.СоздатьНаборЗаписей();
		Для Каждого Товар Из ДанныеДляРегистрации Цикл
			Набор.Отбор.ПравилоОбмена.Значение = Товар.ПравилоОбмена;
			Набор.Отбор.ПравилоОбмена.Использование = Истина;
			
			Набор.Отбор.КодТовараPLU.Значение = Товар.КодТовараPLU;
			Набор.Отбор.КодТовараPLU.Использование = Истина;
			
			ПланыОбмена.ЗарегистрироватьИзменения(МассивУзлов, Набор);
		КонецЦикла;
		
	ИначеЕсли ТипИсточника = Тип("СправочникОбъект.ВидыНоменклатуры") Тогда  
		
		Запрос = Новый Запрос(   
		"ВЫБРАТЬ
		|	КодыТоваровSKU.SKU КАК SKU
		|ПОМЕСТИТЬ КодыSKU
		|ИЗ
		|	РегистрСведений.КодыТоваровSKU КАК КодыТоваровSKU
		|ГДЕ
		|	КодыТоваровSKU.Номенклатура В
		|			(ВЫБРАТЬ
		|				Номенклатура.Ссылка КАК Номенклатура
		|			ИЗ
		|				Справочник.Номенклатура КАК Номенклатура
		|			ГДЕ
		|				Номенклатура.ВидНоменклатуры = &Значение)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	КодыТоваровPLUНаОборудовании.ПравилоОбмена КАК ПравилоОбмена
		|ПОМЕСТИТЬ ИспользуемыеПравилаОбмена
		|ИЗ
		|	РегистрСведений.КодыТоваровPLUНаОборудовании КАК КодыТоваровPLUНаОборудовании
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ КодыSKU КАК КодыSKU
		|		ПО КодыТоваровPLUНаОборудовании.КодТовараSKU = КодыSKU.SKU
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	КодыТоваровPLUНаОборудовании.КодТовараPLU КАК КодТовараPLU,
		|	КодыТоваровPLUНаОборудовании.ПравилоОбмена КАК ПравилоОбмена
		|ИЗ
		|	РегистрСведений.КодыТоваровPLUНаОборудовании КАК КодыТоваровPLUНаОборудовании
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ КодыSKU КАК КодыSKU
		|		ПО КодыТоваровPLUНаОборудовании.КодТовараSKU = КодыSKU.SKU
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ПодключаемоеОборудование.УзелИнформационнойБазы КАК УзелИнформационнойБазы
		|ИЗ
		|	Справочник.ПодключаемоеОборудование КАК ПодключаемоеОборудование
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ИспользуемыеПравилаОбмена КАК ИспользуемыеПравилаОбмена
		|		ПО ПодключаемоеОборудование.ПравилоОбмена = ИспользуемыеПравилаОбмена.ПравилоОбмена
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланОбмена.ОбменСПодключаемымОборудованием КАК ОбменСПодключаемымОборудованием
		|		ПО ПодключаемоеОборудование.УзелИнформационнойБазы = ОбменСПодключаемымОборудованием.Ссылка");
		
		Запрос.УстановитьПараметр("Значение",             Источник.Ссылка);
	
		Результат = Запрос.ВыполнитьПакет();
		УзлыДляЗаписи = Результат[3].Выгрузить();
		ДанныеДляРегистрации = Результат[2].Выгрузить();
		
		МассивУзлов = УзлыДляЗаписи.ВыгрузитьКолонку("УзелИнформационнойБазы");
		
		Набор = РегистрыСведений.КодыТоваровPLUНаОборудовании.СоздатьНаборЗаписей();
		Для Каждого Товар Из ДанныеДляРегистрации Цикл
			Набор.Отбор.ПравилоОбмена.Значение = Товар.ПравилоОбмена;
			Набор.Отбор.ПравилоОбмена.Использование = Истина;
			
			Набор.Отбор.КодТовараPLU.Значение = Товар.КодТовараPLU;
			Набор.Отбор.КодТовараPLU.Использование = Истина;
			
			ПланыОбмена.ЗарегистрироватьИзменения(МассивУзлов, Набор);
		КонецЦикла;
		
	ИначеЕсли ТипИсточника = Тип("СправочникОбъект.ПодключаемоеОборудование") Тогда
		
		Если  ЗначениеЗаполнено(Источник.УзелИнформационнойБазы)
			И ЗначениеЗаполнено(Источник.ПравилоОбмена)
			И Источник.ПравилоОбмена <> Источник.Ссылка.ПравилоОбмена
			И (Источник.ТипОборудования = Перечисления.ТипыПодключаемогоОборудования.ВесыСПечатьюЭтикеток) Тогда
			
			ПланыОбмена.УдалитьРегистрациюИзменений(Источник.УзелИнформационнойБазы);
			
			Запрос = Новый Запрос(
			"ВЫБРАТЬ
			|	КодыТоваровPLUНаОборудовании.ПравилоОбмена КАК ПравилоОбмена,
			|	КодыТоваровPLUНаОборудовании.КодТовараPLU  КАК КодТовараPLU
			|	&УзелИнформационнойБазы                    КАК УзелИнформационнойБазы
			|ИЗ
			|	РегистрСведений.КодыТоваровPLUНаОборудовании КАК КодыТоваровPLUНаОборудовании
			|ГДЕ
			|	КодыТоваровPLUНаОборудовании.ПравилоОбмена = &ПравилоОбмена");
			
			Запрос.УстановитьПараметр("ПравилоОбмена", Источник.ПравилоОбмена);
			Запрос.УстановитьПараметр("УзелИнформационнойБазы", Источник.УзелИнформационнойБазы);
			
			Запрос.УстановитьПараметр("Значение",             Источник.Ссылка);
	
			Результат = Запрос.Выполнить();
			Выборка = Результат.Выбрать();
			
			Набор = РегистрыСведений.КодыТоваровPLUНаОборудовании.СоздатьНаборЗаписей();
			Пока Выборка.Следующий() Цикл
				
				Набор.Отбор.ПравилоОбмена.Значение = Выборка.ПравилоОбмена;
				Набор.Отбор.ПравилоОбмена.Использование = Истина;
				
				Набор.Отбор.КодТовараPLU.Значение = Выборка.КодТовараPLU;
				Набор.Отбор.КодТовараPLU.Использование = Истина;
				
				ПланыОбмена.ЗарегистрироватьИзменения(Выборка.УзелИнформационнойБазы, Набор);
			
			КонецЦикла;
			
		Иначе
			Возврат;
		КонецЕсли;
		
	Иначе
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

// Регистрирует изменения в документах.
//
// Параметры:
//  Источник - ДокументОбъект - источник события.
//  Отказ - Булево - флаг отказа от выполнения обработчика.
//  РежимЗаписи - РежимЗаписиДокумента - режим записи документа.
//  РежимПроведения - РежимПроведенияДокумента - режим проведения документа.
//
Процедура ЗарегистрироватьИзмененияДокумента(Источник, Отказ, РежимЗаписи, РежимПроведения) Экспорт
	
	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеНастроекПовтИсп.ПолучитьЗначениеКонстанты("ИспользоватьОбменСПодключаемымОборудованием") Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТипИсточника = ТипЗнч(Источник);
	Если ТипИсточника = Тип("ДокументОбъект.УстановкаЦенНоменклатуры") Тогда
		
		Запрос = Новый Запрос(
		
		"ВЫБРАТЬ
		|	УстановкаЦенНоменклатурыТовары.Номенклатура КАК Номенклатура,
		|	УстановкаЦенНоменклатурыТовары.Характеристика КАК Характеристика,
		|	УстановкаЦенНоменклатурыТовары.Ссылка КАК Ссылка
		|ПОМЕСТИТЬ ПереченьТоваров
		|ИЗ
		|	Документ.УстановкаЦенНоменклатуры.Товары КАК УстановкаЦенНоменклатурыТовары
		|ГДЕ
		|	УстановкаЦенНоменклатурыТовары.Ссылка = &Значение
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	КодыТоваровSKU.SKU КАК SKU
		|ПОМЕСТИТЬ КодыSKU
		|ИЗ
		|	РегистрСведений.КодыТоваровSKU КАК КодыТоваровSKU
		|ГДЕ
		|	(КодыТоваровSKU.Номенклатура, КодыТоваровSKU.Характеристика) В
		|			(ВЫБРАТЬ
		|				ПереченьТоваров.Номенклатура,
		|				ПереченьТоваров.Характеристика
		|			ИЗ
		|				ПереченьТоваров КАК ПереченьТоваров)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	КодыТоваровPLUНаОборудовании.ПравилоОбмена КАК ПравилоОбмена
		|ПОМЕСТИТЬ ИспользуемыеПравилаОбмена
		|ИЗ
		|	РегистрСведений.КодыТоваровPLUНаОборудовании КАК КодыТоваровPLUНаОборудовании
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ КодыSKU КАК КодыSKU
		|		ПО КодыТоваровPLUНаОборудовании.КодТовараSKU = КодыSKU.SKU
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	КодыТоваровPLUНаОборудовании.КодТовараPLU КАК КодТовараPLU,
		|	КодыТоваровPLUНаОборудовании.ПравилоОбмена КАК ПравилоОбмена
		|ИЗ
		|	РегистрСведений.КодыТоваровPLUНаОборудовании КАК КодыТоваровPLUНаОборудовании
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ КодыSKU КАК КодыSKU
		|		ПО КодыТоваровPLUНаОборудовании.КодТовараSKU = КодыSKU.SKU
		|
		|СГРУППИРОВАТЬ ПО
		|	КодыТоваровPLUНаОборудовании.ПравилоОбмена,
		|	КодыТоваровPLUНаОборудовании.КодТовараPLU
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ПодключаемоеОборудование.УзелИнформационнойБазы КАК УзелИнформационнойБазы
		|ИЗ
		|	Справочник.ПодключаемоеОборудование КАК ПодключаемоеОборудование
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ИспользуемыеПравилаОбмена КАК ИспользуемыеПравилаОбмена
		|		ПО ПодключаемоеОборудование.ПравилоОбмена = ИспользуемыеПравилаОбмена.ПравилоОбмена
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланОбмена.ОбменСПодключаемымОборудованием КАК ОбменСПодключаемымОборудованием
		|		ПО ПодключаемоеОборудование.УзелИнформационнойБазы = ОбменСПодключаемымОборудованием.Ссылка");
		
		Запрос.УстановитьПараметр("Значение", Источник.Ссылка);
		
		Результат = Запрос.ВыполнитьПакет();
		УзлыДляЗаписи = Результат[4].Выгрузить();
		ДанныеДляРегистрации = Результат[3].Выгрузить();
		
		МассивУзлов = УзлыДляЗаписи.ВыгрузитьКолонку("УзелИнформационнойБазы");
		
		Набор = РегистрыСведений.КодыТоваровPLUНаОборудовании.СоздатьНаборЗаписей();
		Для Каждого Товар Из ДанныеДляРегистрации Цикл
			Набор.Отбор.ПравилоОбмена.Значение = Товар.ПравилоОбмена;
			Набор.Отбор.ПравилоОбмена.Использование = Истина;
			
			Набор.Отбор.КодТовараPLU.Значение = Товар.КодТовараPLU;
			Набор.Отбор.КодТовараPLU.Использование = Истина;
			
			ПланыОбмена.ЗарегистрироватьИзменения(МассивУзлов, Набор);
		КонецЦикла;
		
	ИначеЕсли ТипИсточника = Тип("ДокументОбъект.ЗаказПокупателя") Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЗаказПокупателя.Ссылка КАК Ссылка,
		|	ЗаказПокупателя.КассаККМ КАК КассаККМ,
		|	ЗаказПокупателя.КассаККМ.ПодключаемоеОборудование.УзелИнформационнойБазы КАК УзелИнформационнойБазы
		|ИЗ
		|	Документ.ЗаказПокупателя КАК ЗаказПокупателя
		|ГДЕ
		|	ЗаказПокупателя.КассаККМ <> ЗНАЧЕНИЕ(Справочник.КассыККМ.ПустаяСсылка)
		|	И ЗаказПокупателя.Ссылка = &Ссылка";
		
		Запрос.УстановитьПараметр("Ссылка", Источник.Ссылка);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		Выборка = РезультатЗапроса.Выбрать();
		
		Если Выборка.Следующий() Тогда
			
			ПланыОбмена.ЗарегистрироватьИзменения(Выборка.УзелИнформационнойБазы, Выборка.Ссылка);
			
		КонецЕсли;
		
		
	ИначеЕсли ТипИсточника = Тип("ДокументОбъект.ПриходныйКассовыйОрдер") Тогда
		
		Если ЗначениеЗаполнено(Источник.ЗаказПокупателя) Тогда
			
			Запрос = Новый Запрос;
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	Ордер.ЗаказПокупателя КАК ЗаказПокупателя,
			|	Ордер.ЗаказПокупателя.КассаККМ.ПодключаемоеОборудование.УзелИнформационнойБазы КАК УзелИнформационнойБазы
			|ИЗ
			|	Документ.ПриходныйКассовыйОрдер КАК Ордер
			|ГДЕ
			|	Ордер.Ссылка = &Ссылка
			|	И НЕ Ордер.ЗаказПокупателя.КассаККМ.ПодключаемоеОборудование.УзелИнформационнойБазы ЕСТЬ NULL";
			
			Запрос.УстановитьПараметр("Ссылка", Источник.Ссылка);
			
			РезультатЗапроса = Запрос.Выполнить();
			
			Выборка = РезультатЗапроса.Выбрать();
			
			Если Выборка.Следующий() Тогда
				
				ПланыОбмена.ЗарегистрироватьИзменения(Выборка.УзелИнформационнойБазы, Выборка.ЗаказПокупателя);
				
			КонецЕсли;
			
		КонецЕсли;
		
	ИначеЕсли ТипИсточника = Тип("ДокументОбъект.РасходныйКассовыйОрдер") Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	РасходныйКассовыйОрдерРасшифровкаПлатежа.Ссылка КАК Ссылка,
		|	ВЫРАЗИТЬ(РасходныйКассовыйОрдерРасшифровкаПлатежа.ДокументРасчетовСКонтрагентом КАК Документ.ПриходныйКассовыйОрдер) КАК ПриходныйКассовыйОрдер
		|ПОМЕСТИТЬ РасшифровкаПлатежа
		|ИЗ
		|	Документ.РасходныйКассовыйОрдер.РасшифровкаПлатежа КАК РасходныйКассовыйОрдерРасшифровкаПлатежа
		|ГДЕ
		|	РасходныйКассовыйОрдерРасшифровкаПлатежа.Ссылка = &Ссылка
		|	И РасходныйКассовыйОрдерРасшифровкаПлатежа.ДокументРасчетовСКонтрагентом ССЫЛКА Документ.ПриходныйКассовыйОрдер
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	РасшифровкаПлатежа.ПриходныйКассовыйОрдер.ЗаказПокупателя КАК ЗаказПокупателя,
		|	РасшифровкаПлатежа.ПриходныйКассовыйОрдер.ЗаказПокупателя.КассаККМ.ПодключаемоеОборудование.УзелИнформационнойБазы КАК УзелИнформационнойБазы
		|ИЗ
		|	РасшифровкаПлатежа КАК РасшифровкаПлатежа
		|ГДЕ
		|	НЕ РасшифровкаПлатежа.ПриходныйКассовыйОрдер.ЗаказПокупателя.КассаККМ.ПодключаемоеОборудование.УзелИнформационнойБазы ЕСТЬ NULL";
		
		Запрос.УстановитьПараметр("Ссылка", Источник.Ссылка);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		Выборка = РезультатЗапроса.Выбрать();
		
		Если Выборка.Следующий() Тогда
			
			ПланыОбмена.ЗарегистрироватьИзменения(Выборка.УзелИнформационнойБазы, Выборка.ЗаказПокупателя);
			
		КонецЕсли;
		
	ИначеЕсли ТипИсточника = Тип("ДокументОбъект.ОплатаОтПокупателяПлатежнойКартой") Тогда
		
		Если ЗначениеЗаполнено(Источник.ЗаказПокупателя) Тогда
			
			Запрос = Новый Запрос;
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	ОплатаКартой.ЗаказПокупателя КАК ЗаказПокупателя,
			|	ОплатаКартой.ЗаказПокупателя.КассаККМ.ПодключаемоеОборудование.УзелИнформационнойБазы КАК УзелИнформационнойБазы
			|ИЗ
			|	Документ.ОплатаОтПокупателяПлатежнойКартой КАК ОплатаКартой
			|ГДЕ
			|	ОплатаКартой.Ссылка = &Ссылка
			|	И НЕ ОплатаКартой.ЗаказПокупателя.КассаККМ.ПодключаемоеОборудование.УзелИнформационнойБазы ЕСТЬ NULL";
			
			Запрос.УстановитьПараметр("Ссылка", Источник.Ссылка);
			
			РезультатЗапроса = Запрос.Выполнить();
			
			Выборка = РезультатЗапроса.Выбрать();
			
			Если Выборка.Следующий() Тогда
				
				ПланыОбмена.ЗарегистрироватьИзменения(Выборка.УзелИнформационнойБазы, Выборка.ЗаказПокупателя);
				
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

// Регистрирует изменения регистра сведений.
//
// Параметры:
//  Источник - НаборЗаписейРегистра - источник события.
//  Отказ - Булево - флаг отказа от выполнения обработчика.
//  Замещение - Булево - признак замещения существующего набора записей.
//
Процедура ЗарегистрироватьИзмененияРегистраСведений(Источник, Отказ, Замещение) Экспорт
	
	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеНастроекПовтИсп.ПолучитьЗначениеКонстанты("ИспользоватьОбменСПодключаемымОборудованием") Тогда
		Возврат;
	КонецЕсли;

	УстановитьПривилегированныйРежим(Истина);
	
	ТипИсточника = ТипЗнч(Источник);
	Если ТипИсточника = Тип("РегистрСведенийНаборЗаписей.Штрихкоды") Тогда
		
		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	КодыТоваровSKU.SKU КАК SKU
		|ПОМЕСТИТЬ КодыSKU
		|ИЗ
		|	РегистрСведений.КодыТоваровSKU КАК КодыТоваровSKU
		|ГДЕ
		|	(КодыТоваровSKU.Номенклатура, КодыТоваровSKU.Характеристика, КодыТоваровSKU.Упаковка) В
		|			(ВЫБРАТЬ
		|				Штрихкоды.Владелец КАК Владелец,
		|				Штрихкоды.Характеристика КАК Характеристика,
		|				Штрихкоды.Упаковка КАК Упаковка
		|			ИЗ
		|				РегистрСведений.Штрихкоды КАК Штрихкоды
		|			ГДЕ
		|				Штрихкоды.Штрихкод = &Значение)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	КодыТоваровPLUНаОборудовании.КодТовараPLU КАК КодТовараPLU,
		|	КодыТоваровPLUНаОборудовании.ПравилоОбмена КАК ПравилоОбмена
		|ПОМЕСТИТЬ ИспользуемыеПравилаОбмена
		|ИЗ
		|	РегистрСведений.КодыТоваровPLUНаОборудовании КАК КодыТоваровPLUНаОборудовании
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ КодыSKU КАК КодыSKU
		|		ПО КодыТоваровPLUНаОборудовании.КодТовараSKU = КодыSKU.SKU
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ПодключаемоеОборудование.УзелИнформационнойБазы КАК УзелИнформационнойБазы,
		|	ИспользуемыеПравилаОбмена.КодТовараPLU КАК КодТовараPLU,
		|	ИспользуемыеПравилаОбмена.ПравилоОбмена КАК ПравилоОбмена
		|ИЗ
		|	Справочник.ПодключаемоеОборудование КАК ПодключаемоеОборудование
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ИспользуемыеПравилаОбмена КАК ИспользуемыеПравилаОбмена
		|		ПО ПодключаемоеОборудование.ПравилоОбмена = ИспользуемыеПравилаОбмена.ПравилоОбмена
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланОбмена.ОбменСПодключаемымОборудованием КАК ОбменСПодключаемымОборудованием
		|		ПО ПодключаемоеОборудование.УзелИнформационнойБазы = ОбменСПодключаемымОборудованием.Ссылка");
		
		Запрос.УстановитьПараметр("Значение", Источник.Отбор.Штрихкод.Значение);
	Иначе
		Возврат;
	КонецЕсли;
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Набор = РегистрыСведений.КодыТоваровPLUНаОборудовании.СоздатьНаборЗаписей();
	Пока Выборка.Следующий() Цикл
		
		Набор.Отбор.ПравилоОбмена.Значение = Выборка.ПравилоОбмена;
		Набор.Отбор.ПравилоОбмена.Использование = Истина;
		
		Набор.Отбор.КодТовараPLU.Значение = Выборка.КодТовараPLU;
		Набор.Отбор.КодТовараPLU.Использование = Истина;
		
		ПланыОбмена.ЗарегистрироватьИзменения(Выборка.УзелИнформационнойБазы, Набор);
	
	КонецЦикла;
	
КонецПроцедуры

// Создает узел обмена с подключаемым оборудованием Offline.
//
// Параметры:
//  Источник - ПланОбменаСсылка - источник события.
//  Отказ - Булево - флаг отказа от выполнения обработчика.
//
Процедура СоздатьУзелОбменаСПодключаемымОборудованиемOffline(Источник, Отказ) Экспорт
	
	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Источник.УзелИнформационнойБазы) Тогда
		Если ТипЗнч(Источник) = Тип("СправочникОбъект.ПодключаемоеОборудование") Тогда
			Если Источник.ТипОборудования = Перечисления.ТипыПодключаемогоОборудования.ВесыСПечатьюЭтикеток Тогда
				Источник.УзелИнформационнойБазы = ПолучитьУзелРИБ(Источник);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Источник.ДополнительныеСвойства.Вставить("ИзмененоПравилоОбмена", Источник.ПравилоОбмена <> Источник.Ссылка.ПравилоОбмена);
	
КонецПроцедуры

// Удаляет узел плана обмена с подключаемым оборудованием Offline при удалении экземпляра оборудования.
//
// Параметры:
//  Источник - ПланОбменаСсылка - источник события.
//  Отказ - Булево - флаг отказа от выполнения обработчика.
//
Процедура УдалитьУзелОбменаСПодключаемымОборудованиемOffline(Источник, Отказ) Экспорт
	
	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	Если ЗначениеЗаполнено(Источник.УзелИнформационнойБазы) Тогда
		УзелИнформационнойБазыСсылка = Источник.УзелИнформационнойБазы;
		УзелИнформационнойБазы       = УзелИнформационнойБазыСсылка.ПолучитьОбъект();
		УзелИнформационнойБазы.Удалить();
	КонецЕсли;
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

// Очищает узел обмена с подключаемым оборудованием Offline.
//
// Параметры:
//  Источник - ПланОбменаСсылка - источник события.
//  Отказ - Булево - флаг отказа от выполнения обработчика.
//
Процедура ОчиститьУзелОбменаСПодключаемымОборудованиемOffline(Источник, ОбъектКопирования) Экспорт
	
	Источник.УзелИнформационнойБазы = ПланыОбмена.ОбменСПодключаемымОборудованием.ПустаяСсылка();
	
КонецПроцедуры

// Регистрирует изменения при смене правила обмена подключаемого оборудования.
//
// Параметры:
//  Источник - ПланОбменаСсылка - источник события.
//  Отказ - Булево - флаг отказа от выполнения обработчика.
//
Процедура ЗарегистрироватьИзмененияПриСменеПравилаОбменаПодключаемогоОборудования(Источник, Отказ) Экспорт
	
	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(Источник) = Тип("СправочникСсылка.ПодключаемоеОборудование") И Источник.ДополнительныеСвойства.ИзмененоПравилоОбмена Тогда
		Если Источник.ТипОборудования = Перечисления.ТипыПодключаемогоОборудования.ВесыСПечатьюЭтикеток Тогда
			УстановитьПривилегированныйРежим(Истина);
			ПланыОбмена.ЗарегистрироватьИзменения(Источник.УзелИнформационнойБазы, Метаданные.РегистрыСведений.КодыТоваровPLUНаОборудовании);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Регистрирует изменения регистра накоплений.
//
// Параметры:
//  Источник - НаборЗаписейРегистра - источник события.
//  Отказ - Булево - флаг отказа от выполнения обработчика.
//  Замещение - Булево - признак замещения существующего набора записей.
//
Процедура ЗарегистрироватьИзмененияРегистраНакопленияДляОбменаСОборудованиемOfflineПриЗаписи(Источник, Отказ, Замещение) Экспорт
	
	ОбменДаннымиСобытия.МеханизмРегистрацииОбъектовПередЗаписьюРегистра("ОбменСПодключаемымОборудованием", Источник, Отказ, Замещение);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Создает узел для данного экземпляра подключаемого оборудования и возвращает ссылку на него.
// Применяется перед записью элемента справочника Подключаемое оборудование.
//
Функция ПолучитьУзелРИБ(ПодключаемоеОборудованиеОбъект)
	
	УзелОбъект = ПланыОбмена.ОбменСПодключаемымОборудованием.СоздатьУзел();
	УзелОбъект.УстановитьНовыйКод();
	УзелОбъект.Наименование = ПодключаемоеОборудованиеОбъект.Наименование;
	УзелОбъект.Записать();
	
	Возврат УзелОбъект.Ссылка;
	
КонецФункции

#КонецОбласти
