
#Область ПрограммныйИнтерфейс

// См. ОбменСКонтрагентамиПереопределяемый.ЗаполнитьПараметрыЭДПоИсточнику
// Определяет параметры электронного документа по типу владельца.
//
// Параметры:
//  Источник - Объект, ЛюбаяСсылка - документ или справочник источника.
//  ПараметрыЭД - Структура - параметры источника, необходимых для определения
//                настроек обмена ЭД. Обязательные параметры: НаправлениеЭД, ВидЭД,
//                Контрагент, СоглашениеЭД или Организация.
//  ФорматCML - Булево - если истина, то для формирования ЭД будут использоваться схемы CML (не ФНС),
//    в параметрах должны быть указаны соответствующие виды ЭД.
//
Процедура ЗаполнитьПараметрыЭДПоИсточнику(Источник, ПараметрыЭД, ФорматCML = Ложь) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ВидыЭД = ОбменСКонтрагентами.ТипыДокументов();
	НаправленияЭД = ОбменСКонтрагентами.НаправленияДокументов();
	ТипИсточника = ТипЗнч(Источник);
	ЭтоСсылка = ОбщегоНазначения.ЭтоСсылка(ТипИсточника);
	
	Если ТипИсточника = Тип("ДокументСсылка.ПоступлениеТоваров")
		ИЛИ ТипИсточника = Тип("ДокументОбъект.ПоступлениеТоваров") Тогда
		
		Если Источник.ЕстьРасхождения Тогда
			ВидЭД = ВидыЭД.АктОРасхождениях;
			НаправлениеЭД = НаправленияЭД.Исходящий;
			Если ЭтоСсылка Тогда
				ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Источник, "Организация, Контрагент");
				Организация = ЗначенияРеквизитов.Организация;
				Контрагент = ЗначенияРеквизитов.Контрагент;
			Иначе
				Организация = Источник.Организация;
				Контрагент = Источник.Контрагент;
			КонецЕсли;
		Иначе
			ВидЭД = ВидыЭД.ТоварнаяНакладная;
			НаправлениеЭД = НаправленияЭД.Входящий;
			Если ЭтоСсылка Тогда
				ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Источник, "Организация, Контрагент");
				Организация = ЗначенияРеквизитов.Организация;
				Контрагент = ЗначенияРеквизитов.Контрагент;
			Иначе
				Организация = Источник.Организация;
				Контрагент = Источник.Контрагент;
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли ТипИсточника = Тип("ДокументСсылка.СчетФактураВыданный")
		ИЛИ ТипИсточника = Тип("ДокументОбъект.СчетФактураВыданный") Тогда
		
		Если ЭтоКорректировочныйДокумент(Источник) Тогда
			ВидЭД = ВидыЭД.КорректировочныйСчетФактура;
		Иначе
			ВидЭД = ВидыЭД.СчетФактура;
		КонецЕсли;
		
		НаправлениеЭД = НаправленияЭД.Исходящий;
		Если ЭтоСсылка Тогда
			ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Источник, 
				"Организация, Контрагент, ДокументОснование");
			Организация = ЗначенияРеквизитов.Организация;
			Если ТипЗнч(ЗначенияРеквизитов.Контрагент) = Тип("СправочникСсылка.Организации") Тогда
				Контрагент = ЗначенияРеквизитов.Контрагент.СобственныйКонтрагент;
			Иначе
				Контрагент = ЗначенияРеквизитов.Контрагент;
			КонецЕсли;
			ДокументОснование = ЗначенияРеквизитов.ДокументОснование;
		Иначе
			Организация = Источник.Организация;
			Если ТипЗнч(Источник.Контрагент) = Тип("СправочникСсылка.Организации") Тогда
				Контрагент = Источник.Контрагент.СобственныйКонтрагент;
			Иначе
				Контрагент = Источник.Контрагент;
			КонецЕсли;
			ДокументОснование = Источник.ДокументОснование;
		КонецЕсли;
		
	ИначеЕсли ТипИсточника = Тип("ДокументСсылка.СчетФактураПолученный")
		ИЛИ ТипИсточника = Тип("ДокументОбъект.СчетФактураПолученный") Тогда
		
		Если ЭтоКорректировочныйДокумент(Источник) Тогда
			ВидЭД = ВидыЭД.КорректировочныйСчетФактура;
		Иначе
			ВидЭД = ВидыЭД.СчетФактура;
		КонецЕсли;
		НаправлениеЭД = НаправленияЭД.Входящий;
		
		Если ЭтоСсылка Тогда
			
			Запрос = Новый Запрос;
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	СчетФактураПолученный.Организация КАК Организация
			|ИЗ
			|	Документ.СчетФактураПолученный КАК СчетФактураПолученный
			|ГДЕ
			|	СчетФактураПолученный.Ссылка = &Источник
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	СчетФактураПолученныйДокументыОснования.ДокументОснование КАК ДокументОснование
			|ИЗ
			|	Документ.СчетФактураПолученный.ДокументыОснования КАК СчетФактураПолученныйДокументыОснования
			|ГДЕ
			|	СчетФактураПолученныйДокументыОснования.Ссылка = &Источник";
			Запрос.УстановитьПараметр("Источник", Источник);
			РезультатыЗапроса = Запрос.ВыполнитьПакет();
			Реквизиты = РезультатыЗапроса[0].Выбрать();
			Реквизиты.Следующий();
			
			Организация = Реквизиты.Организация;
			ДокументыОснования = РезультатыЗапроса[1].Выгрузить();
		Иначе
			Организация = Источник.Организация;
			ДокументыОснования = Источник.ДокументыОснования;
		КонецЕсли;
		
		Для Каждого Строка Из ДокументыОснования Цикл
			Если ЗначениеЗаполнено(Строка.ДокументОснование) Тогда
				Если ТипЗнч(Строка.ДокументОснование) = Тип("ДокументСсылка.ПеремещениеТоваров") Тогда
					РеквизитыОснования = Новый Структура("ОрганизацияПолучатель");
					ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Строка.ДокументОснование, РеквизитыОснования);
					ОрганизацияПолучатель = ЗначенияРеквизитов.ОрганизацияПолучатель;
					РеквизитыОснования = Новый Структура("СобственныйКонтрагент");
					ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ОрганизацияПолучатель, РеквизитыОснования);
					Контрагент = ЗначенияРеквизитов.СобственныйКонтрагент;
					Прервать;
				Иначе
					РеквизитыОснования = Новый Структура("Контрагент");
					ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Строка.ДокументОснование, РеквизитыОснования);
					Контрагент = ЗначенияРеквизитов.Контрагент;
					Прервать;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
	ИначеЕсли ТипИсточника = Тип("ДокументСсылка.ЗаказПоставщику")
		ИЛИ ТипИсточника = Тип("ДокументОбъект.ЗаказПоставщику") Тогда
		
		ВидЭД = ВидыЭД.ЗаказТовара;
		НаправлениеЭД = НаправленияЭД.Исходящий;
		Если ЭтоСсылка Тогда
			ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Источник, "Организация, Контрагент");
			Организация = ЗначенияРеквизитов.Организация;
			Контрагент = ЗначенияРеквизитов.Контрагент;
		Иначе
			Организация = Источник.Организация;
			Контрагент = Источник.Контрагент;
		КонецЕсли;
		
	ИначеЕсли ТипИсточника = Тип("ДокументСсылка.ОтчетКомитентуОПродажах")
		ИЛИ ТипИсточника = Тип("ДокументОбъект.ОтчетКомитентуОПродажах") Тогда
		
		ВидЭД = ВидыЭД.ОтчетОПродажахКомиссионногоТовара;
		НаправлениеЭД = НаправленияЭД.Исходящий;
		Если ЭтоСсылка Тогда
			ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Источник, "Организация, Контрагент");
			Организация = ЗначенияРеквизитов.Организация;
			Контрагент = ЗначенияРеквизитов.Контрагент;
		Иначе
			Организация = Источник.Организация;
			Контрагент = Источник.Контрагент;
		КонецЕсли;
		
	ИначеЕсли ТипИсточника = Тип("ДокументСсылка.ОтчетКомитентуОСписании")
		ИЛИ ТипИсточника = Тип("ДокументОбъект.ОтчетКомитентуОСписании") Тогда
		
		ВидЭД = ВидыЭД.ОтчетОСписанииКомиссионногоТовара;
		НаправлениеЭД = НаправленияЭД.Исходящий;
		Если ЭтоСсылка Тогда
			ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Источник, "Организация, Контрагент");
			Организация = ЗначенияРеквизитов.Организация;
			Контрагент = ЗначенияРеквизитов.Контрагент;
		Иначе
			Организация = Источник.Организация;
			Контрагент = Источник.Контрагент;
		КонецЕсли;
		
	ИначеЕсли ТипИсточника = Тип("ДокументСсылка.ВозвратТоваровПоставщику")
		ИЛИ ТипИсточника = Тип("ДокументОбъект.ВозвратТоваровПоставщику")
		ИЛИ ТипИсточника = Тип("ДокументСсылка.РеализацияТоваров")
		ИЛИ ТипИсточника = Тип("ДокументОбъект.РеализацияТоваров") Тогда
		
		ВидЭД = ВидыЭД.ТоварнаяНакладная;
		
		НаправлениеЭД = НаправленияЭД.Исходящий;
		Если ЭтоСсылка Тогда
			ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Источник, "Организация, Контрагент");
			Организация = ЗначенияРеквизитов.Организация;
			Контрагент = ЗначенияРеквизитов.Контрагент;
		Иначе
			Организация = Источник.Организация;
			Контрагент = Источник.Контрагент;
		КонецЕсли;
		
	ИначеЕсли ТипИсточника = Тип("ДокументСсылка.ПеремещениеТоваров")
		ИЛИ ТипИсточника = Тип("ДокументОбъект.ПеремещениеТоваров") Тогда
		
		ВидЭД = ВидыЭД.ТоварнаяНакладная;
		
		НаправлениеЭД = НаправленияЭД.Исходящий;
		Если ЭтоСсылка Тогда
			ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Источник, "Организация, ОрганизацияПолучатель");
			Организация = ЗначенияРеквизитов.Организация;
			ОрганизацияПолучатель = ЗначенияРеквизитов.ОрганизацияПолучатель;
		Иначе
			Организация = Источник.Организация;
			ОрганизацияПолучатель = Источник.ОрганизацияПолучатель;
		КонецЕсли;
		Если ЗначениеЗаполнено(ОрганизацияПолучатель) Тогда
			Контрагент = ОрганизацияПолучатель.СобственныйКонтрагент;
		Иначе
			Контрагент = Справочники.Контрагенты.ПустаяСсылка();
		КонецЕсли;
		
	ИначеЕсли ТипИсточника = Тип("ДокументСсылка.КоммерческоеПредложениеПоставщика") Тогда
		
		ВидЭД = ВидыЭД.КоммерческоеПредложение;
		
		НаправлениеЭД = НаправленияЭД.Входящий;
		Если ЭтоСсылка Тогда
			ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Источник, "Организация, Контрагент");
			Организация = ЗначенияРеквизитов.Организация;
			Контрагент = ЗначенияРеквизитов.Контрагент;
		Иначе
			Организация = Источник.Организация;
			Контрагент = Источник.Контрагент;
		КонецЕсли;
		
	КонецЕсли;
	
	ПараметрЭД = ПараметрыЭД.Добавить();
	ПараметрЭД.Тип = ВидЭД;
	ПараметрЭД.Направление = НаправлениеЭД;
	ПараметрЭД.Организация = Организация;
	ПараметрЭД.Контрагент = Контрагент;
	
КонецПроцедуры

// См. ОбменСКонтрагентамиПереопределяемый.ОпределитьДокументЯвляетсяСчетомФактурой
// Определяет является ли документ информационной базы счет-фактурой.
//
// Параметры:
//  ДокументСсылка - ДокументСсылка - документ информационной базы.
//  Результат - Булево - является ли документ счет-фактурой.
//
Процедура ОпределитьДокументЯвляетсяСчетомФактурой(ДокументСсылка, Результат) Экспорт
	
	ТипДокумента = ТипЗнч(ДокументСсылка);
	Если ТипДокумента = Тип("ДокументСсылка.СчетФактураВыданный")
			ИЛИ ТипДокумента = Тип("ДокументСсылка.СчетФактураПолученный") Тогда
		Результат = Истина;
	Иначе
		Результат = Ложь;
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Определение соответствий объектов библиотеки ЭД и прикладного решения.

// См. ОбменСКонтрагентамиПереопределяемый.ПолучитьСоответствиеПеречислений
// Получает значение перечисления по имени объектов метаданных.
// 
// Параметры:
//  СоответствиеПеречислений - Соответствие - соответствие библиотечных и прикладных перечислений.
//
Процедура ПолучитьСоответствиеПеречислений(СоответствиеПеречислений) Экспорт
	
	СоответствиеПеречислений.Вставить("НДС", "СтавкиНДС");
	СоответствиеПеречислений.Вставить("ЮрФизЛицо", "ЮрФизЛицо");
	СоответствиеПеречислений.Вставить("ФормыОплаты", "ФормыОплаты");
	
КонецПроцедуры

// См. ОбменСКонтрагентамиПереопределяемый.ЗаполнитьСоответствиеСтавокНДС
// В процедуре указывается соответствие строковых представлений ставок НДС (используемые в БЭД)
// с прикладными значениями этих ставок.
//
// Параметры:
//   Соответствие - Соответствие - заполняемое соответствие ставок НДС.
//
// Пример:
//   Соответствие.Вставить("0",       Перечисления.СтавкиНДС.НДС0);
//   Соответствие.Вставить("10",      Перечисления.СтавкиНДС.НДС10);
//   Соответствие.Вставить("18",      Перечисления.СтавкиНДС.НДС18);
//   Соответствие.Вставить("10/110",  Перечисления.СтавкиНДС.НДС10_110);
//   Соответствие.Вставить("18/118",  Перечисления.СтавкиНДС.НДС18_118);
//   Соответствие.Вставить("20",      Перечисления.СтавкиНДС.НДС20);
//   Соответствие.Вставить("20/120",  Перечисления.СтавкиНДС.НДС20_120);
//   Соответствие.Вставить("без НДС", Перечисления.СтавкиНДС.БезНДС);
//
Процедура ЗаполнитьСоответствиеСтавокНДС(Соответствие) Экспорт
	
	Соответствие.Вставить("0",       Перечисления.СтавкиНДС.НДС0);
	Соответствие.Вставить("10",      Перечисления.СтавкиНДС.НДС10);
	Соответствие.Вставить("18",      Перечисления.СтавкиНДС.НДС18);
	Соответствие.Вставить("20",      Перечисления.СтавкиНДС.НДС20);
	Соответствие.Вставить("10/110",  Перечисления.СтавкиНДС.НДС10_110);
	Соответствие.Вставить("18/118",  Перечисления.СтавкиНДС.НДС18_118);
	Соответствие.Вставить("20/120",  Перечисления.СтавкиНДС.НДС20_120);
	Соответствие.Вставить("без НДС", Перечисления.СтавкиНДС.БезНДС); // терм, локализации не подлежит (определение типов фабрик XDTO, см. ON_SCHFDOPPR_5_01)
	Соответствие.Вставить("НДС исчисляется налоговым агентом", "НДС исчисляется налоговым агентом");
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Настройка обмена ЭД.

// См. ОбменСКонтрагентамиПереопределяемый.ДополнительнаяАналитикаКонтрагентовСправочникПартнеры
// Процедура возвращает признак использования справочника Партнеров в качестве
// дополнительной аналитики к справочнику Контрагенты.
//
// Параметры:
//  ИспользуетсяСправочникПартнеры - Булево - флаг использования в библиотеке справочника Партнеры.
//
Процедура ДополнительнаяАналитикаКонтрагентовСправочникПартнеры(ИспользуетсяСправочникПартнеры) Экспорт
	
	ИспользуетсяСправочникПартнеры = Ложь;
	
КонецПроцедуры

// См. ОбменСКонтрагентамиПереопределяемый.ДополнительнаяАналитикаСправочникХарактеристикиНоменклатуры
// Процедура возвращает признак использования справочника "Характеристики номенклатуры" в качестве
// дополнительной аналитики к справочнику Номенклатура.
//
// Параметры:
//  ИспользуетсяСправочникХарактеристикиНоменклатуры - Булево - флаг использования справочника "Характеристики номенклатуры".
//
Процедура ДополнительнаяАналитикаСправочникХарактеристикиНоменклатуры(ИспользуетсяСправочникХарактеристикиНоменклатуры) Экспорт
	
	ИспользуетсяСправочникХарактеристикиНоменклатуры = ПолучитьФункциональнуюОпцию("ИспользоватьХарактеристикиНоменклатуры");
	
КонецПроцедуры

// См. ОбменСКонтрагентамиПереопределяемый.ДополнительнаяАналитикаСправочникУпаковкиНоменклатуры
// Процедура возвращает признак использования справочника "Упаковка номенклатуры" в качестве
// дополнительной аналитики к справочнику Номенклатура.
//
// Параметры:
//  ИспользуетсяСправочникУпаковкиНоменклатуры - Булево - флаг использования справочника "Упаковки номенклатуры".
//
Процедура ДополнительнаяАналитикаСправочникУпаковкиНоменклатуры(ИспользуетсяСправочникУпаковкиНоменклатуры) Экспорт
	
	ИспользуетсяСправочникУпаковкиНоменклатуры = ПолучитьФункциональнуюОпцию("ИспользоватьУпаковкиНоменклатуры");
	
КонецПроцедуры

// См. ОбменСКонтрагентамиПереопределяемый.ПодготовитьСтруктуруОбъектовКомандЭДО
// Заполняет список команд ЭДО в прикладном решении.
// 
// Параметры:
//  СоставКомандЭДО - Структура - структура состава команд ЭДО.
//    Исходящие - Массив - состав объектов, например "Документ.РеализацияТоваровУслуг".
//    Входящие - Массив - состав объектов.
//    БезПодписи - Массив - состав объектов для обмена без ЭП.
//    Интеркампани - Массив - состав объектов Интеркампани.
//
Процедура ПодготовитьСтруктуруОбъектовКомандЭДО(СоставКомандЭДО) Экспорт
	
	СоставКомандЭДО.Исходящие.Добавить("Документ.ЗаказПоставщику");
	СоставКомандЭДО.Исходящие.Добавить("Документ.ВозвратТоваровПоставщику");
	СоставКомандЭДО.Исходящие.Добавить("Документ.ПеремещениеТоваров");
	СоставКомандЭДО.Исходящие.Добавить("Документ.РеализацияТоваров");
	СоставКомандЭДО.Исходящие.Добавить("Документ.ОтчетКомитентуОПродажах");
	СоставКомандЭДО.Исходящие.Добавить("Документ.ОтчетКомитентуОСписании");
	СоставКомандЭДО.Исходящие.Добавить("Документ.СчетФактураВыданный");
	СоставКомандЭДО.Исходящие.Добавить("Документ.ПоступлениеТоваров");

	
	СоставКомандЭДО.Входящие.Добавить("Документ.ПоступлениеТоваров");
	СоставКомандЭДО.Входящие.Добавить("Документ.СчетФактураПолученный");
	
	СоставКомандЭДО.БезПодписи.Добавить("Документ.ЗаказПоставщику");
	СоставКомандЭДО.БезПодписи.Добавить("Документ.ВозвратТоваровПоставщику");
	СоставКомандЭДО.БезПодписи.Добавить("Документ.РеализацияТоваров");
	СоставКомандЭДО.БезПодписи.Добавить("Документ.ПоступлениеТоваров");
	
	СоставКомандЭДО.Контрагенты.Добавить("Справочник.Контрагенты");
	СоставКомандЭДО.Организации.Добавить("Справочник.Организации");
	
КонецПроцедуры


#Область СопоставлениеНоменклатуры

// Создает номенклатуру по данным контрагента.
//
// Параметры:
//  НаборНоменклатурыКонтрагентов - Массив - номенклатура контрагентов, по которой нужно создать номенклатуру информационной базы.
//                                           См. СопоставлениеНоменклатурыКонтрагентовКлиентСервер.НоваяНоменклатураКонтрагента.
//  ЗначенияПоУмолчанию - Структура - значения реквизитов по умолчанию.
//
// Возвращаемое значение:
//  Массив - описания созданной номенклатуры. Элементы представлены структурой:
//   * НоменклатураКонтрагента - Структура - элемент из параметра НаборНоменклатурыКонтрагентов, для которого удалось создать номенклатуру.
//   * НоменклатураИБ - Структура - описание созданной номенклатуры. См. СопоставлениеНоменклатурыКонтрагентовКлиентСервер.НоваяНоменклатураИнформационнойБазы.
//
Функция СоздатьНоменклатуруПоДаннымКонтрагента(Знач НаборНоменклатурыКонтрагентов, Знач ЗначенияПоУмолчанию) Экспорт
	
	Результат = Новый Массив;
	СозданныеНоменклатуры = Новый Соответствие;
	
	Для каждого НоменклатураКонтрагента Из НаборНоменклатурыКонтрагентов Цикл
		
		ОшибкаПриЗаписи = Ложь;
		НайденнаяНоменклатура = СозданныеНоменклатуры.Получить(НоменклатураКонтрагента.ИдентификаторНоменклатуры);
		Если НайденнаяНоменклатура <> Неопределено Тогда
			НоменклатураИБ = СопоставлениеНоменклатурыКонтрагентовКлиентСервер.НоваяНоменклатураИнформационнойБазы(НайденнаяНоменклатура);
		Иначе
			НоваяНоменклатура = Справочники.Номенклатура.СоздатьЭлемент();
			ЗаполнитьЗначенияСвойств(НоваяНоменклатура, ЗначенияПоУмолчанию);
			НоваяНоменклатура.Наименование = НоменклатураКонтрагента.Наименование;
			НоваяНоменклатура.НаименованиеПолное = НоменклатураКонтрагента.Наименование;
			НоваяНоменклатура.Артикул = НоменклатураКонтрагента.Артикул;
			ЗначенияРеквизитовВидаНоменклатуры = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(НоваяНоменклатура.ВидНоменклатуры, 
				"ТипНоменклатуры, ОсобенностьУчета");
			ТипНоменклатуры = ЗначенияРеквизитовВидаНоменклатуры.ТипНоменклатуры;
			НоваяНоменклатура.ТипНоменклатуры = ТипНоменклатуры;
			ОсобенностьУчета = ЗначенияРеквизитовВидаНоменклатуры.ОсобенностьУчета;
			НоваяНоменклатура.ОсобенностьУчета = ОсобенностьУчета;
			
			Если Не ЗначениеЗаполнено(НоваяНоменклатура.ЕдиницаИзмерения) Тогда
				Если ЗначениеЗаполнено(НоменклатураКонтрагента.ЕдиницаИзмеренияКод) Тогда
					НоваяНоменклатура.ЕдиницаИзмерения = ЭлектронноеВзаимодействиеРТ.НайтиСсылкуНаОбъектПоРеквизиту("БазовыеЕдиницыИзмерения",
						"Код", НоменклатураКонтрагента.ЕдиницаИзмеренияКод);
				ИначеЕсли ЗначениеЗаполнено(НоменклатураКонтрагента.ЕдиницаИзмерения) Тогда
					НоваяНоменклатура.ЕдиницаИзмерения = ЭлектронноеВзаимодействиеРТ.НайтиСсылкуНаОбъектПоРеквизиту("БазовыеЕдиницыИзмерения",
						"Наименование", НоменклатураКонтрагента.ЕдиницаИзмерения);
				КонецЕсли;
			КонецЕсли;
			
			Если НЕ НоваяНоменклатура.ПроверитьЗаполнение() Тогда
				Продолжить;
			КонецЕсли;
		
			Попытка
				НоваяНоменклатура.Записать();
				ЗаписатьШтрикходыНоменклатуры(НоваяНоменклатура.Ссылка, НоменклатураКонтрагента.ШтрихкодыНоменклатуры);
				НоменклатураИБ = СопоставлениеНоменклатурыКонтрагентовКлиентСервер.НоваяНоменклатураИнформационнойБазы(НоваяНоменклатура.Ссылка);
				СозданныеНоменклатуры.Вставить(НоменклатураКонтрагента.ИдентификаторНоменклатуры, НоменклатураИБ.Номенклатура);
			Исключение
				ОшибкаПриЗаписи = Истина;
				ШаблонСообщения = НСтр("ru = 'Не удалось записать номенклатуру ""%1""
				|%2'");
				
				ТекстСообщения = СтрШаблон(
				ШаблонСообщения, 
				НоменклатураКонтрагента.Наименование,
				КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
				
				ТекстСообщения = СтрШаблон(
				ШаблонСообщения, 
				НоменклатураКонтрагента.Наименование,
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
				
				ОписаниеОшибки = ИнформацияОбОшибке();
				ЗаписьЖурналаРегистрации(
				НСтр("ru = 'Создание номенклатуры'", ОбщегоНазначения.КодОсновногоЯзыка()), 
				УровеньЖурналаРегистрации.Ошибка,
				Метаданные.Справочники.Номенклатура,, 
				ОписаниеОшибки.Описание);
			КонецПопытки;
			
		КонецЕсли;
		
		Если НЕ ОшибкаПриЗаписи Тогда
			СозданныйЭлемент = Новый Структура;
			СозданныйЭлемент.Вставить("НоменклатураКонтрагента", НоменклатураКонтрагента);
			СозданныйЭлемент.Вставить("НоменклатураИБ", НоменклатураИБ);
			Результат.Добавить(СозданныйЭлемент);
		КонецЕсли;
		
	КонецЦикла;
	
	// Удалим сообщения, возникшие при проверке заполнения номенклатуры.
	// Остальные сообщения выводим как есть.
	НаборСообщений = ПолучитьСообщенияПользователю(Истина);
	Для каждого Сообщение Из НаборСообщений Цикл
		Если Сообщение.КлючДанных <> Справочники.Номенклатура.ПустаяСсылка() Тогда
			Сообщение.Сообщить();
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область НоменклатураКонтрагентов

// Заполняет представление номенклатуры контрагента в источнике, 
// используя полученные из него данные о владельце номенклатуры и ее идентификаторе.
//
// Параметры:
//  Источник - Произвольный - объект (или данные формы), в котором нужно заполнить представление номенклатуры контрагента.
//  ПутьКВладельцу - Строка - путь к свойству источника, содержащему информацию о владельце номенклатуры.
//  ПутьКТаблице - Строка - путь к свойству источника, содержащему таблицу с номенклатурой контрагента.
//  ПутьКИдентификатору - Строка - путь к полю таблицы (ПутьКТаблице), содержащему идентификатор номенклатуры контрагента.
//  ПутьКПредставлению - Строка - путь к полю таблицы (ПутьКТаблице), в которое нужно поместить представление номенклатуры контрагента.
//
// Пример:
//  ОбменСКонтрагентамиРТ.ЗаполнитьПредставлениеНоменклатурыКонтрагентовВИсточнике(
//		Объект, "Контрагент", "Товары", "ИдентификаторНоменклатурыПоставщика", "НаименованиеНоменклатурыПоставщика");
//
Процедура ЗаполнитьПредставлениеНоменклатурыКонтрагентовВИсточнике(Источник, ПутьКВладельцу, ПутьКТаблице, ПутьКИдентификатору, ПутьКПредставлению) Экспорт
	
	Если Источник[ПутьКТаблице].Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	НаборНоменклатурыКонтрагентов = Новый Массив;
	Для Каждого СтрокаТаблицы Из Источник[ПутьКТаблице] Цикл
		
		НоменклатураКонтрагента = СопоставлениеНоменклатурыКонтрагентовКлиентСервер.НоваяНоменклатураКонтрагента(
			Источник[ПутьКВладельцу], СтрокаТаблицы[ПутьКИдентификатору]);
			
		НаборНоменклатурыКонтрагентов.Добавить(НоменклатураКонтрагента);
		
	КонецЦикла;
	
	Отбор = Новый Структура("НоменклатураКонтрагента", НаборНоменклатурыКонтрагентов);
	Сопоставление = СопоставлениеНоменклатурыКонтрагентов.НайтиСоответствиеНоменклатуры(Отбор);
	
	Для Каждого СтрокаТаблицы Из Источник[ПутьКТаблице] Цикл
		
		Для Каждого Элемент Из Сопоставление Цикл
			
			Если СтрокаТаблицы[ПутьКИдентификатору] <> Элемент.НоменклатураКонтрагента.Идентификатор Тогда
				Продолжить;
			КонецЕсли;
			
			Представление = ОбменСКонтрагентамиРТКлиентСервер.ПредставлениеНоменклатурыКонтрагента(Элемент.НоменклатураКонтрагента);
			СтрокаТаблицы[ПутьКПредставлению] = Представление;
			Прервать;
			
		КонецЦикла;
		
		Если ЗначениеЗаполнено(СтрокаТаблицы[ПутьКИдентификатору]) 
			И Не ЗначениеЗаполнено(СтрокаТаблицы[ПутьКПредставлению]) Тогда
			СтрокаТаблицы[ПутьКПредставлению] = СтрокаТаблицы[ПутьКИдентификатору];
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Заполняет идентификатор и представление номенклатуры контрагента в источнике,
// используя полученные из него данные о номенклатуре информационной базы.
//
// Параметры:
//  Источник - Произвольный - объект (или данные формы), в котором нужно заполнить данные номенклатуры контрагента.
//  ПутьКВладельцу - Строка - путь к свойству источника, содержащему информацию о владельце номенклатуры.
//  ПутьКТаблице - Строка - путь к свойству источник, содержащему таблицу с номенклатурой контрагента.
//  ПутьКИдентификатору - Строка - путь к полю таблицы (ПутьКТаблице), в которое нужно поместить идентификатор номенклатуры контрагента.
//  ПутьКПредставлению - Строка - путь к полю таблицы (ПутьКТаблице), в которое нужно поместить представление номенклатуры контрагента.
//
// Пример:
//  ОбменСКонтрагентамиРТ.ПерезаполнитьИдентификаторыКонтрагентаВИсточнике(
//		Объект, "Контрагент", "Товары", "ИдентификаторНоменклатурыПоставщика", "НаименованиеНоменклатурыПоставщика");
//
Процедура ПерезаполнитьИдентификаторыКонтрагентаВИсточнике(Источник, ПутьКВладельцу, ПутьКТаблице, ПутьКИдентификатору, ПутьКПредставлению = Неопределено) Экспорт
	
	УстанавливатьПредставление = НЕ (ПутьКПредставлению = Неопределено);
	НаборНоменклатурыИБ = Новый Массив;
	
	Для каждого СтрокаТаблицы Из Источник[ПутьКТаблице] Цикл
		
		НоменклатураИБ = СопоставлениеНоменклатурыКонтрагентовКлиентСервер.НоваяНоменклатураИнформационнойБазы(
			СтрокаТаблицы.Номенклатура, СтрокаТаблицы.Характеристика, СтрокаТаблицы.Упаковка);
		
		НаборНоменклатурыИБ.Добавить(НоменклатураИБ);
		СтрокаТаблицы[ПутьКИдентификатору] = "";
		Если УстанавливатьПредставление Тогда
			СтрокаТаблицы[ПутьКПредставлению] = "";
		КонецЕсли;
		
	КонецЦикла;
	
	Отбор = Новый Структура("Владелец,НоменклатураИБ", Источник[ПутьКВладельцу], НаборНоменклатурыИБ);
	Сопоставление = СопоставлениеНоменклатурыКонтрагентов.НайтиСоответствиеНоменклатуры(Отбор);
	
	Для каждого СтрокаТаблицы Из Источник[ПутьКТаблице] Цикл
		
		ЕстьСопоставление = Ложь;
		
		Для каждого Элемент Из Сопоставление Цикл
			
			Если СтрокаТаблицы.Номенклатура = Элемент.НоменклатураИБ.Номенклатура
				И СтрокаТаблицы.Характеристика = Элемент.НоменклатураИБ.Характеристика
				И СтрокаТаблицы.Упаковка = Элемент.НоменклатураИБ.Упаковка Тогда
				
				Если ЕстьСопоставление Тогда // неоднозначное сопоставление.
					// оставим первое попавшее сопоставление.
					Прервать;
				Иначе
					ЕстьСопоставление = Истина;
					СтрокаТаблицы[ПутьКИдентификатору] = Элемент.НоменклатураКонтрагента.Идентификатор;
					Если УстанавливатьПредставление Тогда
						Представление = ОбменСКонтрагентамиРТКлиентСервер.ПредставлениеНоменклатурыКонтрагента(Элемент.НоменклатураКонтрагента);
						СтрокаТаблицы[ПутьКПредставлению] = Представление;
					КонецЕсли;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
		Если УстанавливатьПредставление Тогда
			Если ЗначениеЗаполнено(СтрокаТаблицы[ПутьКИдентификатору]) 
				И Не ЗначениеЗаполнено(СтрокаТаблицы[ПутьКПредставлению]) Тогда
				СтрокаТаблицы[ПутьКПредставлению] = СтрокаТаблицы[ПутьКИдентификатору];
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Заполняет идентификатор и представление номенклатуры контрагента в строке источника,
// используя полученные из нее данные о номенклатуре информационной базы.
//
// Параметры:
//  Источник - Произвольный - объект (или данные формы), которому принадлежит заполняемая строка таблицы.
//  СтрокаИсточника - Произвольный - строка таблицы (ДанныеФормыЭлементКоллекции), в котором нужно заполнить данные номенклатуры контрагента.
//  ПутьКВладельцу - Строка - путь к свойству источника, содержащему информацию о владельце номенклатуры.
//  ПутьКИдентификатору - Строка - путь к полю строки (СтрокаИсточника), в которое нужно поместить идентификатор номенклатуры контрагента.
//  ПутьКПредставлению - Строка - путь к полю строки (СтрокаИсточника), в которое нужно поместить представление номенклатуры контрагента.
//
// Пример:
//  ОбменСКонтрагентамиРТ.ЗаполнитьИдентификаторКонтрагентаВСтрокеИсточника(
//		Объект, СтрокаТовара, "Контрагент", "ИдентификаторНоменклатурыПоставщика", "НаименованиеНоменклатурыПоставщика");
//
Процедура ЗаполнитьИдентификаторКонтрагентаВСтрокеИсточника(Источник, СтрокаИсточника, ПутьКВладельцу, ПутьКИдентификатору, ПутьКПредставлению) Экспорт
	
	НоменклатураИБ = СопоставлениеНоменклатурыКонтрагентовКлиентСервер.НоваяНоменклатураИнформационнойБазы(
		СтрокаИсточника.Номенклатура, СтрокаИсточника.Характеристика, СтрокаИсточника.Упаковка);
		
	Отбор = Новый Структура("Владелец,НоменклатураИБ", Источник[ПутьКВладельцу], НоменклатураИБ);
	Сопоставление = СопоставлениеНоменклатурыКонтрагентов.НайтиСоответствиеНоменклатуры(Отбор);
	
	Если Сопоставление.Количество() = 1 Тогда
		Элемент = Сопоставление[0];
		СтрокаИсточника[ПутьКИдентификатору] = Элемент.НоменклатураКонтрагента.Идентификатор;
		Представление = ОбменСКонтрагентамиРТКлиентСервер.ПредставлениеНоменклатурыКонтрагента(Элемент.НоменклатураКонтрагента);
		СтрокаИсточника[ПутьКПредставлению] = Представление;
	ИначеЕсли Сопоставление.Количество() = 0 Тогда
		СтрокаИсточника[ПутьКИдентификатору] = "";
		СтрокаИсточника[ПутьКПредставлению] = "";
	КонецЕсли;
	
КонецПроцедуры

// Проверяет корректность сопоставление с номенклатурой поставщика.
//
// Параметры:
//  ТаблицаТоваров                   - ТаблицаЗначений - Сведения о товарах для проверки сопоставления.
//  ДеревоДокумента                  - ДеревоЗначений - Данные файла электронного документа.
//  НеУдалосьСопоставитьНоменклатуру - Булево - Признак сопоставления номенклатуры. Если истина, то номенклатура не сопоставлена.
//
Процедура ПроверитьСопоставлениеСНоменклатуройПоставщика(ТаблицаТоваров, ДеревоДокумента, НеУдалосьСопоставитьНоменклатуру)  Экспорт 
	
	ПроверенныеСтроки = Новый Массив;
	Для Каждого ТекСтрока Из ТаблицаТоваров Цикл
		
		Если Не ПроверенныеСтроки.Найти(ТекСтрока.Номенклатура) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		// Если в таблице товаров несколько строк с одинаковым НомерСтроки,
		// то сопоставлено более одной номенклатуры поставщика.
		ОшибкаСопоставления = ТаблицаТоваров.НайтиСтроки(Новый Структура("Номенклатура, НомерСтроки",
			ТекСтрока.Номенклатура, ТекСтрока.НомерСтроки)).Количество() > 1;
			
		Если Не ЗначениеЗаполнено(ТекСтрока.ИдентификаторНоменклатурыПоставщика) Или ОшибкаСопоставления Тогда
			
			
			Если Не ЗначениеЗаполнено(ТекСтрока.ИдентификаторНоменклатурыПоставщика) Тогда
				ШаблонСообщения = НСтр("ru = 'Номенклатура ""%1"" не сопоставлена с номенклатурой контрагента.
				|Выполните сопоставление и повторите попытку.'");
				
			Иначе
				ШаблонСообщения = НСтр("ru = 'Установлено неоднозначное сопоставление номенклатуры ""%1"" с номенклатурой контрагента.
				|Проверьте, что выбранной номенклатуре соответствует только одна номенклатура контрагента.'");
				ПроверенныеСтроки.Добавить(ТекСтрока.Номенклатура);
				
			КонецЕсли;
			
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения,
				Строка(ТекСтрока.Номенклатура) + ?(ЗначениеЗаполнено(ТекСтрока.Характеристика), " (" + ТекСтрока.Характеристика + ")", ""));
			
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,,, НеУдалосьСопоставитьНоменклатуру);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ЗаполнениеЭлектронныхДокументов

// Заполняет данные участника ЭДО в дерево данных.
//
// Параметры:
//  ДеревоДанных        - ДеревоЗначений - Данные для формирования электронного документа.
//  СведенияОбУчастнике - Структура - Информация об участнике ЭДО.
//  ВидУчастника        - Строка - Роль участника сделки.
//  ФорматCML           - Булево - Признак формирования электронного документа в формате CML.
//  ВидАдреса           - Строка - Вид адреса для заполнения в электронный документ.
//     Принимает значения: ЮридическийАдрес, ФактическийАдрес, ПочтовыйАдрес, ПроизвольныйАдрес.
//
Процедура ЗаполнитьДанныеУчастника(ДеревоДанных, СведенияОбУчастнике, ВидУчастника, ФорматCML = Ложь, ВидАдреса = "ЮридическийАдрес") Экспорт 
	
	// Подготовим параметры обработки ошибок
	КлючДанных = Неопределено;
	СведенияОбУчастнике.Свойство("Ссылка", КлючДанных);
	
	ПараметрыОбработкиОшибокИНН = ЭлектронноеВзаимодействиеКлиентСервер.НовыеПараметрыОбработкиОшибки(
		КлючДанных, "Объект.ИНН");
	ПараметрыОбработкиОшибокКПП = ЭлектронноеВзаимодействиеКлиентСервер.НовыеПараметрыОбработкиОшибки(
		КлючДанных, "Объект.КПП");
	ПараметрыОбработкиОшибокНаименование = ЭлектронноеВзаимодействиеКлиентСервер.НовыеПараметрыОбработкиОшибки(
		КлючДанных, "Объект.НаименованиеПолное");
	
	// Передаем в дерево данные для заполнения адреса.
	ВидКонтактнойИнформации = Неопределено;
	
	ТипУчастникаОрганизация = ТипЗнч(КлючДанных) = Тип("СправочникСсылка.Организации");
	
	Если ВидАдреса = "ПроизвольныйАдрес"
		И ЗначениеЗаполнено(СведенияОбУчастнике.ПроизвольныйАдресЗначенияПолей) Тогда
		
		СведенияОбАдресе = РаботаСАдресами.СведенияОбАдресе(СведенияОбУчастнике.ПроизвольныйАдресЗначенияПолей);
		
		Если ФорматCML Тогда
			ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
				ВидУчастника + ".Адрес.Иностранный.КодСтр", СведенияОбАдресе.КодСтраны);
			ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
				ВидУчастника + ".Адрес.Иностранный.АдрТекст", СведенияОбАдресе.Представление);
		Иначе
			ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
				ВидУчастника + ".Адрес.Иностранный.КодСтраны", СведенияОбАдресе.КодСтраны);
			ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
				ВидУчастника + ".Адрес.Иностранный.АдресТекст", СведенияОбАдресе.Представление);
		КонецЕсли;
		
	ИначеЕсли ВидАдреса = "ПочтовыйАдрес"
		И ЗначениеЗаполнено(СведенияОбУчастнике[ВидАдреса]) Тогда
		
		ВидКонтактнойИнформации = ?(ТипУчастникаОрганизация, Справочники.ВидыКонтактнойИнформации.ПочтовыйАдресОрганизации,
			Справочники.ВидыКонтактнойИнформации.ПочтовыйАдресКонтрагента);
		
	ИначеЕсли ВидАдреса = "ФактическийАдрес" 
		И ЗначениеЗаполнено(СведенияОбУчастнике[ВидАдреса]) Тогда
		
		ВидКонтактнойИнформации = ?(ТипУчастникаОрганизация, Справочники.ВидыКонтактнойИнформации.ФактАдресОрганизации,
			Справочники.ВидыКонтактнойИнформации.ФактАдресКонтрагента);
		
	Иначе
		
		ВидКонтактнойИнформации = ?(ТипУчастникаОрганизация, Справочники.ВидыКонтактнойИнформации.ЮрАдресОрганизации,
			Справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагента);
		
	КонецЕсли;
	
	Если ВидКонтактнойИнформации <> Неопределено Тогда
		
		ПостфиксПоляАдрес = ?(ТипУчастникаОрганизация, "Организации", "Контрагента");
		
		ПараметрыОбработкиОшибок = ЭлектронноеВзаимодействиеКлиентСервер.НовыеПараметрыОбработкиОшибки(
			СведенияОбУчастнике.Ссылка, "КонтактнаяИнформацияПолеЮрАдрес" + ПостфиксПоляАдрес + ".");
		
		ЭлектронноеВзаимодействие.ДобавитьВРеквизитОбработкуОшибки(ДеревоДанных, ВидУчастника + ".Адрес.АвтоматическиЗаполняемый",
			ПараметрыОбработкиОшибок);
		
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
			ВидУчастника + ".Адрес.АвтоматическиЗаполняемый.ОбъектКонтактнойИнформации", КлючДанных);
		
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
			ВидУчастника + ".Адрес.АвтоматическиЗаполняемый.ВидКонтактнойИнформации", ВидКонтактнойИнформации);
		
	КонецЕсли;
	
	Если СведенияОбУчастнике.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицо Тогда
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
									ДеревоДанных,
									ВидУчастника + ".ТипУчастника.ЮЛ.ИНН",
									СведенияОбУчастнике.ИНН, ПараметрыОбработкиОшибокИНН);
									
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
									ДеревоДанных,
									ВидУчастника + ".ТипУчастника.ЮЛ.КПП",
									СведенияОбУчастнике.КПП, ПараметрыОбработкиОшибокКПП);
									
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
									ДеревоДанных,
									ВидУчастника + ".ТипУчастника.ЮЛ.НаименованиеОрганизации",
									СведенияОбУчастнике.ПолноеНаименование, ПараметрыОбработкиОшибокНаименование);
									
	ИначеЕсли СведенияОбУчастнике.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицоНеРезидент Тогда
	
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
									ДеревоДанных,
									ВидУчастника + ".ТипУчастника.ИностраннаяОрганизация.НаименованиеОрганизации",
									СведенияОбУчастнике.ПолноеНаименование, ПараметрыОбработкиОшибокНаименование);
									
		Если ЗначениеЗаполнено(СведенияОбУчастнике.ЮридическийАдресXML) Тогда
			
			СведенияОбАдресе = РаботаСАдресами.СведенияОбАдресе(СведенияОбУчастнике.ЮридическийАдресXML);
			
			ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
									ДеревоДанных,
									ВидУчастника + ".ТипУчастника.ИностраннаяОрганизация.Страна",
									СведенияОбАдресе.Страна);
		КонецЕсли;
									
	ИначеЕсли СведенияОбУчастнике.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ИндивидуальныйПредприниматель И Не ФорматCML Тогда
		
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
									ДеревоДанных,
									ВидУчастника + ".ТипУчастника.ИП.ИНН",
									СведенияОбУчастнике.ИНН, ПараметрыОбработкиОшибокИНН);
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
									ДеревоДанных,
									ВидУчастника + ".ТипУчастника.ИП.Фамилия",
									СведенияОбУчастнике.Фамилия, ПараметрыОбработкиОшибокНаименование);
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
									ДеревоДанных,
									ВидУчастника + ".ТипУчастника.ИП.Имя",
									СведенияОбУчастнике.Имя, ПараметрыОбработкиОшибокНаименование);
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
									ДеревоДанных,
									ВидУчастника + ".ТипУчастника.ИП.Отчество",
									СведенияОбУчастнике.Отчество, ПараметрыОбработкиОшибокНаименование);
									
		Если ЗначениеЗаполнено(СведенияОбУчастнике.СвидетельствоСерияНомер) Тогда
			Свидетельство = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
							НСтр("ru = 'Свидетельство №%1 от %2'"),
							СведенияОбУчастнике.СвидетельствоСерияНомер,
							Формат(СведенияОбУчастнике.СвидетельствоДатаВыдачи, "ДЛФ=D"));
			
			ПараметрыОбработкиОшибок = ЭлектронноеВзаимодействиеКлиентСервер.НовыеПараметрыОбработкиОшибки(
				КлючДанных, "Объект.СвидетельствоСерияНомер");
			ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
										ДеревоДанных,
										ВидУчастника + ".ТипУчастника.ИП.СвидетельствоОГосРегистрации",
										Свидетельство, ПараметрыОбработкиОшибок);
		КонецЕсли;
		
	Иначе
		
		ПолныйПуть = ВидУчастника + ".ТипУчастника.ФЛ.ПолноеНаименование";
		Если ЭлектронноеВзаимодействие.СуществуетРеквизитВДереве(ДеревоДанных, ПолныйПуть) Тогда
			ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, ПолныйПуть,
				СведенияОбУчастнике.ПолноеНаименование, ПараметрыОбработкиОшибокНаименование);
		КонецЕсли;
		
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
									ДеревоДанных,
									ВидУчастника + ".ТипУчастника.ФЛ.ИНН",
									СведенияОбУчастнике.ИНН, ПараметрыОбработкиОшибокНаименование);
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
									ДеревоДанных,
									ВидУчастника + ".ТипУчастника.ФЛ.Фамилия",
									СведенияОбУчастнике.Фамилия, ПараметрыОбработкиОшибокНаименование);
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
									ДеревоДанных,
									ВидУчастника + ".ТипУчастника.ФЛ.Имя",
									СведенияОбУчастнике.Имя, ПараметрыОбработкиОшибокНаименование);
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
									ДеревоДанных,
									ВидУчастника + ".ТипУчастника.ФЛ.Отчество",
									СведенияОбУчастнике.Отчество, ПараметрыОбработкиОшибокНаименование);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СведенияОбУчастнике.Телефоны)
		И ЭлектронноеВзаимодействие.СуществуетРеквизитВДереве(ДеревоДанных, ВидУчастника + ".Контакт.Телефон") Тогда
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДанных,
			ВидУчастника + ".Контакт.Телефон",
			СведенияОбУчастнике.Телефоны, ПараметрыОбработкиОшибок);
	КонецЕсли;
	
	НомерСчета = "";
	Если СведенияОбУчастнике.Свойство("НомерСчета", НомерСчета) И ЗначениеЗаполнено(НомерСчета)
		И ЭлектронноеВзаимодействие.СуществуетРеквизитВДереве(ДеревоДанных, ВидУчастника + ".БанковскийСчет") Тогда
		Банк = "";
		БИК = "";
		
		ПараметрыОбработкиОшибок = Неопределено;
		Если СведенияОбУчастнике.Свойство("БанковскийСчет") Тогда
			ПараметрыОбработкиОшибок = ЭлектронноеВзаимодействиеКлиентСервер.НовыеПараметрыОбработкиОшибки(
				СведенияОбУчастнике.БанковскийСчетСсылка, "Объект.НомерСчета");
		КонецЕсли;
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
				ДеревоДанных,
				ВидУчастника + ".БанковскийСчет.НомерСчета",
				НомерСчета, ПараметрыОбработкиОшибок);
				
		Если СведенияОбУчастнике.Свойство("Банк", Банк) И ЗначениеЗаполнено(Банк) Тогда
			ПараметрыОбработкиОшибок = Неопределено;
			Если СведенияОбУчастнике.Свойство("БанкСсылка") Тогда
				ПараметрыОбработкиОшибок = ЭлектронноеВзаимодействиеКлиентСервер.НовыеПараметрыОбработкиОшибки(
					СведенияОбУчастнике.БанкСсылка, "Объект.Наименование");
			КонецЕсли;
				
			ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
										ДеревоДанных,
										ВидУчастника + ".БанковскийСчет.НаимБанк",
										Банк, ПараметрыОбработкиОшибок);
		КонецЕсли;
		Если СведенияОбУчастнике.Свойство("БИК", БИК) И ЗначениеЗаполнено(БИК) Тогда
			ПараметрыОбработкиОшибок = Неопределено;
			Если СведенияОбУчастнике.Свойство("БанкСсылка") Тогда
				ПараметрыОбработкиОшибок = ЭлектронноеВзаимодействиеКлиентСервер.НовыеПараметрыОбработкиОшибки(
					СведенияОбУчастнике.БанкСсылка, "Объект.Код");
			КонецЕсли;
			
			ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
										ДеревоДанных,
										ВидУчастника + ".БанковскийСчет.БИК",
										БИК, ПараметрыОбработкиОшибок);
		КонецЕсли;
	КонецЕсли;
	
	ПолныйПуть = ВидУчастника + ".Руководитель";
	Значение = "";
	Если ЭлектронноеВзаимодействие.СуществуетРеквизитВДереве(ДеревоДанных, ПолныйПуть)
		И СведенияОбУчастнике.Свойство("Руководитель", Значение) Тогда
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, ПолныйПуть + ".Фамилия", Значение.Фамилия);
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, ПолныйПуть + ".Имя", Значение.Имя);
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, ПолныйПуть + ".Отчество", Значение.Отчество);
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, ПолныйПуть + ".Должность", Значение.Должность);
	КонецЕсли;
	
	ПолныйПуть = ВидУчастника + ".КодОКПО";
	Значение = "";
	Если ЭлектронноеВзаимодействие.СуществуетРеквизитВДереве(ДеревоДанных, ПолныйПуть)
		И СведенияОбУчастнике.Свойство("КодПоОКПО", Значение) Тогда
		ПараметрыОбработкиОшибок = ЭлектронноеВзаимодействиеКлиентСервер.НовыеПараметрыОбработкиОшибки(КлючДанных,
			"Объект.КодПоОКПО");
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, ПолныйПуть, Значение, 
			ПараметрыОбработкиОшибок);
	КонецЕсли;

	ПолныйПуть = ВидУчастника + ".Комментарий";
	Значение = "";
	Если ЭлектронноеВзаимодействие.СуществуетРеквизитВДереве(ДеревоДанных, ПолныйПуть)
		И СведенияОбУчастнике.Свойство("Комментарий", Значение) Тогда
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, ПолныйПуть, Значение);
	КонецЕсли;
	
КонецПроцедуры

// Подготавливает данные для обработки ошибок заполнения обязательных полей.
//
// Параметры:
//  ТаблицаТоваров   - ТаблицаЗначений - сведения о товарах для формирования электронного документа.
//  СсылкаНаДокумент - ДокументСсылка - Ссылка на основание электронного документа.
//
Процедура ЗаполнитьПараметрыОбработкиОшибокВТаблицеТоваровCML(ТаблицаТоваров, СсылкаНаДокумент = Неопределено) Экспорт

	// Обработка ошибки через механизм сообщений пользователю.
	ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(ТаблицаТоваров,
		"Артикул", "Номенклатура", "Объект.Артикул");
	ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(ТаблицаТоваров,
		"Наименование", "Номенклатура", "Объект.Наименование");
	
	Если ЗначениеЗаполнено(СсылкаНаДокумент) Тогда
		Если ТаблицаТоваров.Колонки.Найти("Количество") <> Неопределено Тогда
			ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(ТаблицаТоваров,
				"Количество", СсылкаНаДокумент, "Объект.Товары.Количество",, "НомерСтроки");
		КонецЕсли;
		
		Если ТаблицаТоваров.Колонки.Найти("Цена") <> Неопределено Тогда
			ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(ТаблицаТоваров,
				"Цена", СсылкаНаДокумент, "Объект.Товары.Количество",, "НомерСтроки");
		КонецЕсли;
		
		Если ТаблицаТоваров.Колонки.Найти("Сумма") <> Неопределено Тогда
			ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(ТаблицаТоваров,
				"Сумма", СсылкаНаДокумент, "Объект.Товары.Сумма",, "НомерСтроки");
		КонецЕсли;
		
		Если ТаблицаТоваров.Колонки.Найти("СуммаСкидки") <> Неопределено Тогда
			ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(ТаблицаТоваров,
				"СуммаСкидки", СсылкаНаДокумент, "Объект.Товары.Сумма",, "НомерСтроки");
		КонецЕсли;
		
		Если ТаблицаТоваров.Колонки.Найти("СуммаСкидки") <> Неопределено Тогда
			ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(ТаблицаТоваров,
				"СуммаСкидки", СсылкаНаДокумент, "Объект.Товары.Сумма",, "НомерСтроки");
		КонецЕсли;
	КонецЕсли;
	
	Если ТаблицаТоваров.Колонки.Найти("ЕдиницаИзмеренияКодПоОКЕИ") <> Неопределено Тогда
		ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(ТаблицаТоваров,
			"ЕдиницаИзмеренияКодПоОКЕИ", "ЕдиницаИзмерения", "Объект.Код");
		
	КонецЕсли;
	
	ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(ТаблицаТоваров,
		"БазоваяЕдиницаКод", "БазоваяЕдиницаСсылка", "Объект.Код");
	ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(ТаблицаТоваров,
		"БазоваяЕдиницаМеждународноеСокращение", "БазоваяЕдиницаСсылка", "Объект.МеждународноеСокращение");
	ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(ТаблицаТоваров,
		"БазоваяЕдиницаНаименование", "БазоваяЕдиницаСсылка", "Объект.Наименование");
	ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(ТаблицаТоваров,
		"БазоваяЕдиницаНаименованиеПолное", "БазоваяЕдиницаСсылка", "Объект.НаименованиеПолное");
	
	// Если единица пустая, надо ссылаться на незаполненность самой единицы, а не ее полей.
	СтрокиСПустойЕдиницей = ТаблицаТоваров.НайтиСтроки(Новый Структура("БазоваяЕдиницаСсылка", 
		Справочники.БазовыеЕдиницыИзмерения.ПустаяСсылка()));
	
	Если СтрокиСПустойЕдиницей.Количество() Тогда
		// Это каталог товаров - для него единица берется из номенклатуры.
		ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(СтрокиСПустойЕдиницей,
			"БазоваяЕдиницаКод", "Номенклатура", "Объект.ЕдиницаИзмерения");
		ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(СтрокиСПустойЕдиницей,
			"БазоваяЕдиницаМеждународноеСокращение", "Номенклатура", "Объект.ЕдиницаИзмерения");
		ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(СтрокиСПустойЕдиницей,
			"БазоваяЕдиницаНаименование", "Номенклатура", "Объект.ЕдиницаИзмерения");
		ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(СтрокиСПустойЕдиницей,
			"БазоваяЕдиницаНаименованиеПолное", "Номенклатура", "Объект.ЕдиницаИзмерения");
	КонецЕсли;
	
	Если ТаблицаТоваров.Колонки.Найти("ВалютаЦены") <> Неопределено Тогда
		ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(ТаблицаТоваров,
			"ВалютаЦены", "Валюта", "Объект.Код");
	КонецЕсли;
	
КонецПроцедуры

// Подготавливает данные для электронного документа вида "Акт сверки расчетов с контрагентом".
//
// Параметры:
//  Основание - ОпределяемыйТип.ОснованияЭлектронныхДокументовЭДО - основание для электронного документа.
//  Настройки - ФиксированнаяСтруктура - настройки заполнения данных:
//   * ТипДокумента - Произвольный - ожидаемый вид документа. Доступные значения представлены следующими свойствами
//                                   результата функции см. ОбменСКонтрагентами.ТипыДокументов:
//                                    - АктСверкиВзаиморасчетов.
//  Данные - ДеревоЗначений - данные для заполнения электронного документа. Строится по макету 
//                            см. Обработка.ОбменСКонтрагентами.Макет.АктСверкиВзаиморасчетов_ИнформацияПолучателя. Выходной параметр.
//  Описание - Структура - дополнительная информация о документе. Выходной параметр.
//   * Основания - Массив из ОпределяемыйТип.ОснованияЭлектронныхДокументовЭДО - ссылки на дополнительные объекты-основания
//                 электронного документа помимо указанного в параметре "Основание".
//  Отказ - Булево - признак отказа от дальнейшего формирования электронного документа.
//                   Информационное сообщение пользователю необходимо формировать самостоятельно.
//
Процедура ЗаполнитьДанныеАктСверкиВзаиморасчетов_ИнформацияПолучателя(Основание, Настройки, Данные, Описание, Отказ) Экспорт
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
		Данные, "ПризнакНаличияРазногласий", Ложь);
	
КонецПроцедуры

#КонецОбласти

// См. ОбменСКонтрагентамиПереопределяемый.ЗаполнитьДанныеПоКаталогуТоваровCML.
Процедура ЗаполнитьДанныеПоКаталогуТоваровCML(Организация, ТоварыКаталога, ДеревоДанных, Отказ) Экспорт
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "СодержитТолькоИзменения", Истина);
	
	СведенияОбОрганизации = Неопределено;
	ЭлектронноеВзаимодействиеПереопределяемый.ПолучитьДанныеЮрФизЛица(Организация, СведенияОбОрганизации);
	ЗаполнитьДанныеУчастника(ДеревоДанных, СведенияОбОрганизации, "Владелец", Истина);
	
	ТоварыКаталога.Колонки.Добавить("Сопоставление");
	Для Каждого СтрокаТовара Из ТоварыКаталога Цикл
		
		Сопоставление = Новый Структура;
		Сопоставление.Вставить("Наименование", СтрокаТовара.Наименование);
		Сопоставление.Вставить("Характеристика", СтрокаТовара.ХарактеристикаНаименование);
		Сопоставление.Вставить("ЕдиницаИзмерения", СтрокаТовара.ЕдиницаНаименование);
		Сопоставление.Вставить("ЕдиницаИзмеренияКод", СтрокаТовара.ЕдиницаИзмеренияКод);
		Сопоставление.Вставить("Артикул", СтрокаТовара.Артикул);
		Если ТоварыКаталога.Колонки.Найти("Штрихкоды") <> Неопределено Тогда
			Если ТипЗнч(СтрокаТовара.Штрихкоды) = Тип("ТаблицаЗначений") Тогда
				НаборШтрихкодов = СтрокаТовара.Штрихкоды.ВыгрузитьКолонку("Штрихкод");
				Если ЗначениеЗаполнено(НаборШтрихкодов) Тогда
					Сопоставление.Вставить("ШтрихкодыНоменклатуры", НаборШтрихкодов);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		Сопоставление.Вставить("НоменклатураИБ", СтрокаТовара.НоменклатураИБ);
		Сопоставление.Вставить("ХарактеристикаИБ", СтрокаТовара.ХарактеристикаИБ);
		Сопоставление.Вставить("УпаковкаИБ", СтрокаТовара.УпаковкаИБ);
		СтрокаТовара.Сопоставление = Сопоставление;
		
	КонецЦикла;
	
	ЗаполнитьПараметрыОбработкиОшибокВТаблицеТоваровCML(ТоварыКаталога);
	ЭлектронноеВзаимодействие.ЗагрузитьТаблицуВДерево(ДеревоДанных, ТоварыКаталога, "Товары");
	
КонецПроцедуры

// См. ОбменСКонтрагентамиПереопределяемый.ЗаполнитьДанныеПоЗаказуТоваров.
Процедура ЗаполнитьДанныеПоЗаказуТоваров(СсылкаНаОбъект, ДеревоДокумента, Отказ) Экспорт 
	
	СтруктураДанных = Документы[СсылкаНаОбъект.Метаданные().Имя].ПолучитьДанныеДляЭД(СсылкаНаОбъект);
	ТаблицаТоваров = СтруктураДанных.РезультатПоТабличнойЧасти.Выгрузить();
	ТаблицаШтрихкодов = СтруктураДанных.РезультатПоШтрихкодам.Выгрузить();
	
	Если ВыполнятьПроверкуСопоставленияНоменклатуры() Тогда
		ПроверитьСопоставлениеСНоменклатуройПоставщика(ТаблицаТоваров, ДеревоДокумента, Отказ);
	КонецЕсли;
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	РеквизитыШапки = СтруктураДанных.РезультатПоШапке.Выбрать();
	РеквизитыШапки.Следующий();
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "Валюта", РеквизитыШапки.ВалютаКод);
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "Курс", 1);
	
	ТекстОшибки = НСтр("ru = 'Не удалось заполнить сумму документа. Возможные причины:
		|	- не заполнена табличная часть ""Товары""
		|	- не заполнена колонка ""Сумма""'");
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "Сумма", РеквизитыШапки.СуммаДокумента,
		ТекстОшибки);
	
	// Заполняем Организацию
	СведенияОбОрганизации = Неопределено; 
	ЭлектронноеВзаимодействиеПереопределяемый.ПолучитьДанныеЮрФизЛица(СсылкаНаОбъект.Организация, СведенияОбОрганизации);
	ЗаполнитьДанныеУчастника(ДеревоДокумента, СведенияОбОрганизации, "Покупатель", Истина);
	ЗаполнитьДанныеУчастника(ДеревоДокумента, СведенияОбОрганизации, "Получатель", Истина);
	
	// Заполняем контрагента
	Если ТипЗнч(СсылкаНаОбъект.Контрагент) = Тип("Структура") Тогда
		// Бизнес-сеть.
		ЗаполнитьДанныеУчастника(ДеревоДокумента, СсылкаНаОбъект.Контрагент, "Продавец");
	Иначе
		СведенияОКонтрагенте = Неопределено; 
		ЭлектронноеВзаимодействиеПереопределяемый.ПолучитьДанныеЮрФизЛица(СсылкаНаОбъект.Контрагент, СведенияОКонтрагенте);
		ЗаполнитьДанныеУчастника(ДеревоДокумента, СведенияОКонтрагенте, "Продавец", Истина);
	КонецЕсли;
	
	ТаблицаТоваров.Колонки.Добавить("Сопоставление");
	Для Каждого СтрокаТовара Из ТаблицаТоваров Цикл
		СтрокаТовара.Сопоставление = СопоставлениеНоменклатурыДляЭлектронногоДокументаCML(СтрокаТовара, ТаблицаШтрихкодов);
	КонецЦикла;
	
	ЗаполнитьПараметрыОбработкиОшибокВТаблицеТоваровCML(ТаблицаТоваров);
	ЭлектронноеВзаимодействие.ЗагрузитьТаблицуВДерево(ДеревоДокумента, ТаблицаТоваров, "Товары");
	СуммаИтог   =  ТаблицаТоваров.Итог("Сумма");
	СкидкаИтог  =  ТаблицаТоваров.Итог("СуммаСкидки");
	НалогиИтог  =  ТаблицаТоваров.Итог("СуммаНДС");
	// Заполняем банковский счет
	Если ЗначениеЗаполнено(РеквизитыШапки.НомерСчета) Тогда
		ДобавитьВДеревоДанныеСчета(ДеревоДокумента, РеквизитыШапки);
	КонецЕсли;
	
	// Заполним строку Итогов
	СуммаИтог = ТаблицаТоваров.Итог("Сумма");
	
	ТекстОшибки = НСтр("ru = 'Не удалось заполнить итоговые стоимостные показатели. Возможные причины:
		|	- не заполнена табличная часть ""Товары""
		|	- не заполнена колонка ""Сумма""'");
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "Сумма", РеквизитыШапки.СуммаДокумента,
		ТекстОшибки);
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "ИтогоПоДокументу.СуммаИтог", 
		СуммаИтог, ТекстОшибки);
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "ИтогоПоДокументу.СуммаНалогаИтог",
		НалогиИтог, ТекстОшибки);
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "ИтогоПоДокументу.ЦенаВключаетНДС",
		РеквизитыШапки.ЦенаВключаетНДС);
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "ИтогоПоДокументу.СуммаБезСкидкиИтог",
		СуммаИтог + СкидкаИтог, ТекстОшибки);
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "ИтогоПоДокументу.СуммаСкидкиИтог",
		СкидкаИтог, ТекстОшибки);
	
	// Заполнение данных о доставке.
	СтруктураАдреса = ПолучитьАдресПоСкладу(РеквизитыШапки.Склад);
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "Доставка.СпособДоставки",
		РеквизитыШапки.СпособДоставки);
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "Доставка.АдресДоставки", 
		СтруктураАдреса.Представление);
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "Доставка.АдресДоставкиЗначенияПолей",
		СтруктураАдреса.Значение);
	
	// Заполним итоги прописью
	ШаблонИтоговаяСтрока = НСтр("ru='Всего наименований %1 на сумму %2'");
	ИтоговаяСтрока = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонИтоговаяСтрока,
																			ТаблицаТоваров.Количество(),
																			РеквизитыШапки.СуммаДокумента);
																			
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "ИтогиПрописью", ИтоговаяСтрока);
	
КонецПроцедуры

// См. ОбменСКонтрагентамиПереопределяемый.ЗаполнитьДанныеПоОтчетуОПродажахКомиссионногоТовара.
Процедура ЗаполнитьДанныеПоОтчетуОПродажахКомиссионногоТовара(СсылкаНаОбъект, ДеревоДокумента, Отказ) Экспорт
	
	ДополнительныеРеквизитыДляТаблицыТоваров = Новый Структура;
	ДополнительныеРеквизитыДляТаблицыТоваров.Вставить("ДатаПродажи");
	ДополнительныеРеквизитыДляТаблицыТоваров.Вставить("СтавкаНДС");
	ДополнительныеРеквизитыДляТаблицыТоваров.Вставить("ПокупательНаименование");
	ДополнительныеРеквизитыДляТаблицыТоваров.Вставить("ПокупательИНН");
	ДополнительныеРеквизитыДляТаблицыТоваров.Вставить("ПокупательКПП");
	ДополнительныеРеквизитыДляТаблицыТоваров.Вставить("ПокупательФактАдрес", СтруктураАдресаФНС());
	ДополнительныеРеквизитыДляТаблицыТоваров.Вставить("ПокупательЮрАдрес", СтруктураАдресаФНС());
	
	СтруктураДанных = Документы[СсылкаНаОбъект.Метаданные().Имя].ПолучитьДанныеДляЭД(СсылкаНаОбъект);
	РезультатПоТоварам = СтруктураДанных.РезультатПоТабличнойЧасти;
	
	РеквизитыШапки = СтруктураДанных.РезультатПоШапке.Выбрать();
	РеквизитыШапки.Следующий();
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "ДатаФормирования", РеквизитыШапки.Дата);
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "Валюта", НСтр("ru = '643'"));
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "Курс",	1);
	
	ТекстОшибки = НСтр("ru = 'Не удалось заполнить сумму документа. Возможные причины:
		|	- не заполнена табличная часть ""Товары""
		|	- не заполнена колонка ""Сумма""'");
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "Сумма", РеквизитыШапки.СуммаДокумента,
		ТекстОшибки);
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "НачалоПериода", РеквизитыШапки.НачалоПериода);
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "КонецПериода", РеквизитыШапки.КонецПериода);
	
	// Заполняем Контрагента
	СведенияОКомитенте = Неопределено;
	ЭлектронноеВзаимодействиеПереопределяемый.ПолучитьДанныеЮрФизЛица(СсылкаНаОбъект.Контрагент, СведенияОКомитенте);
	ЗаполнитьДанныеУчастника(ДеревоДокумента, СведенияОКомитенте, "Комитент", Истина);
	
	// Заполняем Организацию
	СведенияОКомиссионере = Неопределено; 
	ЭлектронноеВзаимодействиеПереопределяемый.ПолучитьДанныеЮрФизЛица(СсылкаНаОбъект.Организация, СведенияОКомиссионере);
	ЗаполнитьДанныеУчастника(ДеревоДокумента, СведенияОКомиссионере, "Комиссионер", Истина);
	
	ТаблицаТоваров = ТаблицаТоваров();
	
	ВыборкаПоТоварам = РезультатПоТоварам.Выбрать();
	ТаблицаШтрихкодов = СтруктураДанных.РезультатПоШтрихкодам.Выгрузить();
	СообщениеОбОшибке = "";
	
	// Таблица для контроля совпадений номенклатуры с номенклатурой поставщика
	КонтрольСовпаденийНоменклатуры = РезультатПоТоварам.Выгрузить();
	
	Если ВыполнятьПроверкуСопоставленияНоменклатуры() Тогда
		ПроверитьСопоставлениеСНоменклатуройПоставщика(КонтрольСовпаденийНоменклатуры, ДеревоДокумента, Отказ);
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Пока ВыборкаПоТоварам.Следующий() Цикл
		
		НоваяСтрока = ТаблицаТоваров.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаПоТоварам);
		
		// Заполним сведения, необходимые для выставления счета-фактуры комитентом
		СтруктураДополнительныхДанных = ОбщегоНазначения.СкопироватьРекурсивно(
													ДополнительныеРеквизитыДляТаблицыТоваров);
		
		МассивЗначений = Новый Массив;
		МассивЗначений.Добавить(ВыборкаПоТоварам.ДатаПродажи);
		СтруктураДополнительныхДанных.Вставить("ДатаПродажи", МассивЗначений);
		
		МассивЗначений = Новый Массив;
		МассивЗначений.Добавить(ВыборкаПоТоварам.СтавкаНДС);
		СтруктураДополнительныхДанных.Вставить("СтавкаНДС", МассивЗначений);
		НоваяСтрока.ДополнительныеРеквизиты = СтруктураДополнительныхДанных;
		
		НоваяСтрока.Сопоставление = СопоставлениеНоменклатурыДляЭлектронногоДокументаCML(ВыборкаПоТоварам, ТаблицаШтрихкодов);
		
	КонецЦикла;
	
	ЗаполнитьПараметрыОбработкиОшибокВТаблицеТоваровCML(ТаблицаТоваров);
	ЭлектронноеВзаимодействие.ЗагрузитьТаблицуВДерево(ДеревоДокумента, ТаблицаТоваров, "Товары");
	
	КонтрагентРозничныйПокупатель = Константы.КонтрагентРозничныйПокупатель.Получить();
	Если ЗначениеЗаполнено(КонтрагентРозничныйПокупатель) Тогда
		ЧастноеЛицо = Неопределено;
		ЭлектронноеВзаимодействиеПереопределяемый.ПолучитьДанныеЮрФизЛица(КонтрагентРозничныйПокупатель, ЧастноеЛицо);
		
		Если ЧастноеЛицо.Свойство("ЮрФизЛицо") И ЧастноеЛицо.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ФизЛицо Тогда
			Если ЧастноеЛицо.Свойство("ИНН") И Не ЗначениеЗаполнено(ЧастноеЛицо.ИНН) Тогда
				ЧастноеЛицо.ИНН = НСтр("ru = '123456789110'");
			КонецЕсли;
		КонецЕсли;
		
	Иначе
		ЧастноеЛицо = Новый Структура("Представление, ПолноеНаименование, КодПоОКПО, ИНН, КПП, Телефоны,
			| ЮридическийАдрес, ФактическийАдрес, ЮрФизЛицо, Фамилия, Имя, Отчество, Ссылка, АдрТекст");
		ЧастноеЛицо.ПолноеНаименование = НСтр("ru = 'Частное лицо'");
		ЧастноеЛицо.Представление = НСтр("ru = 'Частное лицо'");
		ЧастноеЛицо.ИНН = НСтр("ru = '123456789110'");
		ЧастноеЛицо.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ФизЛицо;
		ЧастноеЛицо.Ссылка = Справочники.ФизическиеЛица.ПустаяСсылка();
		ЧастноеЛицо.Фамилия = НСтр("ru = 'Частное лицо'");
		ЧастноеЛицо.Имя = НСтр("ru = 'Частное лицо'");
		ЧастноеЛицо.Отчество = НСтр("ru = 'Частное лицо'");
		ЧастноеЛицо.ЮридическийАдрес = НСтр("ru = 'Неопределено'");
		ЧастноеЛицо.ФактическийАдрес = НСтр("ru = 'Неопределено'");
		ЧастноеЛицо.АдрТекст = НСтр("ru = 'Неопределено'");
	КонецЕсли;
	
	СтрокаТаблицаТоваров = ДеревоДокумента.Строки.Найти("Товары", "ПолныйПуть");

	Если ТаблицаТоваров.Количество() Тогда 
		Для Каждого Товар Из СтрокаТаблицаТоваров.Строки Цикл
			ЗаполнитьДанныеУчастника(Товар, ЧастноеЛицо, "Товары.НомерСтроки.Покупатель");
		КонецЦикла;
	КонецЕсли;
	
	// Итоговая строка прописью
	Если РеквизитыШапки.СуммаДокумента < 0 Тогда
		ТекстИтоговаяСтрока = НСтр("ru = 'Всего возвращено наименований'");
	Иначе
		ТекстИтоговаяСтрока = НСтр("ru = 'Всего продано наименований'");
	КонецЕсли;
	
	СуммаПредставление = "";
	ФорматСумм(РеквизитыШапки.СуммаДокумента, СуммаПредставление, РеквизитыШапки.ВалютаКод);
	
	ИтоговаяСтрока = ТекстИтоговаяСтрока
		+ " "
		+ ТаблицаТоваров.Количество()
		+ ?(РеквизитыШапки.СуммаДокумента <> 0, НСтр("ru = ', на сумму'") + " ", "")
		+ ?(РеквизитыШапки.СуммаДокумента <> 0, СуммаПредставление, "");
		
	СуммаПрописью = ФормированиеПечатныхФормСервер.СформироватьСуммуПрописью(РеквизитыШапки.СуммаДокумента);
	
	
	ИтоговаяСтрока = ИтоговаяСтрока + Символы.ПС + СуммаПрописью;
		
	Если РеквизитыШапки.СуммаВознаграждения <> 0 Тогда
		СуммаВознаграждения = НСтр("ru = 'Сумма комиссионного вознаграждения составила'")
			+ " "
			+ ?(РеквизитыШапки.СуммаВознаграждения < 0,  НСтр("ru = 'минус'") + " ", "")
			+ ФормированиеПечатныхФормСервер.СформироватьСуммуПрописью(РеквизитыШапки.СуммаВознаграждения);
	КонецЕсли;

	ИтогиПрописью = ИтоговаяСтрока + Символы.ПС + СуммаВознаграждения;
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "ИтогиПрописью", ИтогиПрописью);
	
	// Итоговые суммы
	ТекстОшибки = НСтр("ru = 'Не удалось заполнить итоговые стоимостные показатели. Возможные причины:
		|	- не заполнена табличная часть ""Товары""
		|	- не заполнена колонка ""Сумма""'");
	
	СуммаПродажиИтог = ТаблицаТоваров.Итог("СуммаПродажи");
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "ИтогоПоДокументу.СуммаДокумента",
		СуммаПродажиИтог, ТекстОшибки);
		
	СуммаВознагражденияИтог = ТаблицаТоваров.Итог("СуммаВознаграждения");
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "ИтогоПоДокументу.СуммаВознаграждения",
		СуммаВознагражденияИтог, ТекстОшибки);
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "ИтогоПоДокументу.СтавкаНДСВознаграждения", 
		Перечисления.СтавкиНДС.НДС20);
		
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "ИтогоПоДокументу.СуммаНДСВознаграждения",
		?(СуммаВознагражденияИтог = 0, 0, 
			Окр(ОбработкаТабличнойЧастиТоварыКлиентСервер.СуммаНДС(СуммаВознагражденияИтог, Перечисления.СтавкиНДС.НДС20), 2, РежимОкругления.Окр15как20)),
				ТекстОшибки);
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "ИтогоПоДокументу.ЦенаВключаетНДС", Истина);
	
	Если ЗначениеЗаполнено (РеквизитыШапки.ПроцентВознаграждения) Тогда
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "ИтогоПоДокументу.Процент", 
			РеквизитыШапки.ПроцентВознаграждения);
	КонецЕсли;
	
КонецПроцедуры

// См. ОбменСКонтрагентамиПереопределяемый.ЗаполнитьДанныеПоОтчетуОПродажахКомиссионногоТовара.
Процедура ЗаполнитьДанныеПоОтчетуОСписанииКомиссионногоТовара(СсылкаНаОбъект, ДеревоДокумента, Отказ) Экспорт
	
	ДополнительныеРеквизитыДляТаблицыТоваров = Новый Структура;
	ДополнительныеРеквизитыДляТаблицыТоваров.Вставить("ДатаПродажи");
	ДополнительныеРеквизитыДляТаблицыТоваров.Вставить("СтавкаНДС");
	ДополнительныеРеквизитыДляТаблицыТоваров.Вставить("ПокупательНаименование");
	ДополнительныеРеквизитыДляТаблицыТоваров.Вставить("ПокупательИНН");
	ДополнительныеРеквизитыДляТаблицыТоваров.Вставить("ПокупательКПП");
	ДополнительныеРеквизитыДляТаблицыТоваров.Вставить("ПокупательФактАдрес", СтруктураАдресаФНС());
	ДополнительныеРеквизитыДляТаблицыТоваров.Вставить("ПокупательЮрАдрес", СтруктураАдресаФНС());
	
	
	СтруктураДанных = Документы[СсылкаНаОбъект.Метаданные().Имя].ПолучитьДанныеДляЭД(СсылкаНаОбъект);
	РезультатПоТоварам = СтруктураДанных.РезультатПоТабличнойЧасти;
	
	РеквизитыШапки = СтруктураДанных.РезультатПоШапке.Выбрать();
	РеквизитыШапки.Следующий();
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "ДатаФормирования",	РеквизитыШапки.Дата);
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "Валюта", НСтр("ru = '643'"));
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "Курс",	1);
	
	ТекстОшибки = НСтр("ru = 'Не удалось заполнить сумму документа. Возможные причины:
		|	- не заполнена табличная часть ""Товары""
		|	- не заполнена колонка ""Сумма""'");
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "Сумма", РеквизитыШапки.СуммаДокумента,
		ТекстОшибки);
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "НачалоПериода", РеквизитыШапки.НачалоПериода);
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "КонецПериода", РеквизитыШапки.КонецПериода);
	
	// Заполняем Контрагента
	СведенияОКомитенте = Неопределено;
	ЭлектронноеВзаимодействиеПереопределяемый.ПолучитьДанныеЮрФизЛица(СсылкаНаОбъект.Контрагент, СведенияОКомитенте);
	ЗаполнитьДанныеУчастника(ДеревоДокумента, СведенияОКомитенте, "Комитент", Истина);
	
	// Заполняем Организацию
	СведенияОКомиссионере = Неопределено; 
	ЭлектронноеВзаимодействиеПереопределяемый.ПолучитьДанныеЮрФизЛица(СсылкаНаОбъект.Организация, СведенияОКомиссионере);
	ЗаполнитьДанныеУчастника(ДеревоДокумента, СведенияОКомиссионере, "Комиссионер", Истина);
	
	ТаблицаТоваров = ТаблицаТоваров();
	
	ВыборкаПоТоварам = РезультатПоТоварам.Выбрать();
	ТаблицаШтрихкодов = СтруктураДанных.РезультатПоШтрихкодам.Выгрузить();
	СообщениеОбОшибке = "";
	
	// Таблица для контроля совпадений номенклатуры с номенклатурой поставщика
	КонтрольСовпаденийНоменклатуры = РезультатПоТоварам.Выгрузить();
	
	Если ВыполнятьПроверкуСопоставленияНоменклатуры() Тогда
		ПроверитьСопоставлениеСНоменклатуройПоставщика(КонтрольСовпаденийНоменклатуры, ДеревоДокумента, Отказ);
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Пока ВыборкаПоТоварам.Следующий() Цикл
		
		НоваяСтрока = ТаблицаТоваров.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаПоТоварам);
		
		// Заполним сведения, необходимые для выставления счета-фактуры комитентом
		СтруктураДополнительныхДанных = ОбщегоНазначения.СкопироватьРекурсивно(
													ДополнительныеРеквизитыДляТаблицыТоваров);
		
		МассивЗначений = Новый Массив;
		МассивЗначений.Добавить(ВыборкаПоТоварам.ДатаПродажи);
		СтруктураДополнительныхДанных.Вставить("ДатаПродажи", МассивЗначений);
		
		МассивЗначений = Новый Массив;
		МассивЗначений.Добавить(ВыборкаПоТоварам.СтавкаНДС);
		СтруктураДополнительныхДанных.Вставить("СтавкаНДС", МассивЗначений);
		НоваяСтрока.ДополнительныеРеквизиты = СтруктураДополнительныхДанных;
		
		НоваяСтрока.Сопоставление = СопоставлениеНоменклатурыДляЭлектронногоДокументаCML(ВыборкаПоТоварам, ТаблицаШтрихкодов);
		
	КонецЦикла;
	
	ЗаполнитьПараметрыОбработкиОшибокВТаблицеТоваровCML(ТаблицаТоваров);
	ЭлектронноеВзаимодействие.ЗагрузитьТаблицуВДерево(ДеревоДокумента, ТаблицаТоваров, "Товары");
	
	ТекстИтоговаяСтрока = НСтр("ru = 'Всего списано наименований'");
	
	СуммаПредставление = "";
	ФорматСумм(РеквизитыШапки.СуммаДокумента, СуммаПредставление, РеквизитыШапки.ВалютаКод);
	
	ИтоговаяСтрока = ТекстИтоговаяСтрока
		+ " "
		+ ТаблицаТоваров.Количество()
		+ ?(РеквизитыШапки.СуммаДокумента <> 0, НСтр("ru = ', на сумму'") + " ", "")
		+ ?(РеквизитыШапки.СуммаДокумента <> 0, СуммаПредставление, "");
		
	СуммаПрописью = ФормированиеПечатныхФормСервер.СформироватьСуммуПрописью(РеквизитыШапки.СуммаДокумента);
	
	ИтоговаяСтрока = ИтоговаяСтрока + Символы.ПС + СуммаПрописью;
	ИтогиПрописью = ИтоговаяСтрока + Символы.ПС;
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "ИтогиПрописью", ИтогиПрописью);
	
	// Итоговые суммы
	ТекстОшибки = НСтр("ru = 'Не удалось заполнить итоговые стоимостные показатели. Возможные причины:
		|	- не заполнена табличная часть ""Товары""
		|	- не заполнена колонка ""Сумма""'");
	СуммаПродажиИтог = ТаблицаТоваров.Итог("СуммаПродажи");
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// Формирование данных для электронных документов.

// Работа с деревом данных ФНС.

#Область УПД_2019

// См. ОбменСКонтрагентамиПереопределяемый.СохранитьДанныеОбъектаВБД.
////////////////////////////////////////////////////////////////////////////////
// Поиск и создание документов
// Сохраняет данные из электронного документа в объект ИБ.
//
// Параметры:
//  СтрокаДляЗагрузки - Строка - параметры для загрузки.
//  ДеревоРазбора     - ДеревоЗначений - структура параметров документа ИБ.
//  ПараметрыОбработки - Структура - дополнительные параметры для обработки объекта.
//    См. ОбменСКонтрагентамиСлужебный.НовыеПараметрыОбработкиСохранитьДанныеОбъектаВБД.
//    * СсылкаНаВладельца - ДокументСсылка - владелец электронного документа (передается при перезаполнении уже
//                                           существующего документа учета). Необязательный.
//    * Записывать - Булево - если Истина, то объект должен быть записан. По умолчанию Истина.
//    * СпособОбработки - Строка - способ сохранения данных в информационной базе. Необязательный.
//      См. ОбменСКонтрагентамиПереопределяемый.СписокОперацийВидаЭД,
//      См. ОбменСКонтрагентамиПереопределяемый.ПриОпределенииСпособовОбработкиПрикладногоВидаЭлектронногоДокумента.
//  НайденныйОбъект - Произвольный - созданный объект.
//
// Возвращаемое значение:
//  НайденныйОбъект - ссылка на объект.
//
Процедура СохранитьДанныеОбъектаВБД(СтрокаДляЗагрузки, ДеревоРазбора, ПараметрыОбработки = Неопределено,
	НайденныйОбъект = Неопределено) Экспорт
	
	ВидыЭД = ОбменСКонтрагентами.ТипыДокументов();
	Если СтрокаДляЗагрузки.ВидЭД = ВидыЭД.ПрайсЛист Тогда
		НайденныйОбъект = ЗагрузитьПрайсЛист(СтрокаДляЗагрузки, ДеревоРазбора, ПараметрыОбработки.СсылкаНаВладельца);
		
	ИначеЕсли СтрокаДляЗагрузки.ВидЭД = ВидыЭД.ТОРГ12
		ИЛИ СтрокаДляЗагрузки.ВидЭД = ВидыЭД.ТоварнаяНакладная 
		ИЛИ СтрокаДляЗагрузки.ВидЭД = ВидыЭД.АктНаПередачуПрав Тогда
		
	ИначеЕсли СтрокаДляЗагрузки.ВидЭД = ВидыЭД.КаталогТоваров Тогда
		ЗагрузитьКаталогТоваров(СтрокаДляЗагрузки, ДеревоРазбора, ПараметрыОбработки.СсылкаНаВладельца, 
			ПараметрыОбработки.Записывать);
	КонецЕсли;
	
КонецПроцедуры

// См. ОбменСКонтрагентамиПереопределяемый.НайтиСоздатьДокументПередачаТоваров.
// Поиск и создание документа передачи товаров.
//
// Параметры:
//  ДеревоДанных		 - ДеревоЗначений - дерево данных электронного документа.
//  СсылкаНаВладельца	 - ДокументСсылка - ссылка на документ учета.
//  Записывать			 - Булево - признак записи документа.
//  СпособОбработки		 - Строка - способ сохранения данных в информационной базе.
//
Процедура НайтиСоздатьДокументПередачаТоваров(ДеревоДанных, СсылкаНаВладельца, Записывать = Истина, СпособОбработки = "") Экспорт
	
	Если ЗначениеЗаполнено(СсылкаНаВладельца) И ТипЗнч(СсылкаНаВладельца) = Тип("ДокументСсылка.ПоступлениеТоваров") Тогда
		ДокументОбъект = СсылкаНаВладельца.ПолучитьОбъект();
		ДокументОбъект.Товары.Очистить();
		ДокументОбъект.ТоварыПоДаннымПоставщика.Очистить();
		ДокументОбъект.ЕстьРасхождения = Ложь;
		
	Иначе
		ДокументОбъект = Документы.ПоступлениеТоваров.СоздатьДокумент();
		ДокументОбъект.Заполнить(Неопределено);
		ДокументОбъект.Дата = ТекущаяДатаСеанса();
		ДокументОбъект.УстановитьНовыйНомер();
	КонецЕсли;
	
	ДокументОбъект.Организация = ОрганизацияПоДаннымЭД(ДеревоДанных, "Плательщик");
	ДокументОбъект.Контрагент  = КонтрагентПоДаннымЭД(ДеревоДанных, "Поставщик");
	
	ДокументОбъект.НомерВходящегоДокумента = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, 
		"НомерТоварнойНакладной");
	ДокументОбъект.ДатаВходящегоДокумента = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, 
		"ДатаТоварнойНакладной");
	
	СведенияОТоварах = ДеревоДанных.Строки.Найти("ТаблицаТоваров", "ПолныйПуть");
	Для Каждого СведенияОТоваре Из СведенияОТоварах.Строки Цикл
		
		НоваяСтрока = ДокументОбъект.Товары.Добавить();
		
		МассаНетто = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(СведенияОТоваре, "ТаблицаТоваров.НомерСтроки.МассаНетто");
		КоличествоМест = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(СведенияОТоваре, 
			"ТаблицаТоваров.НомерСтроки.КоличествоМест");
		НоваяСтрока.КоличествоУпаковок = ?(ЗначениеЗаполнено(МассаНетто), МассаНетто, КоличествоМест);
		СтавкаНДСЧисло = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(СведенияОТоваре,
			"ТаблицаТоваров.НомерСтроки.СтавкаНДС");
		Если СтавкаНДСЧисло = "НДС исчисляется налоговым агентом" Тогда // терм, локализации не подлежит (определение типов фабрик XDTO, см. ON_SCHFDOPPR_5_01)
			НоваяСтрока.Сумма = НоваяСтрока.Сумма;
			НоваяСтрока.СтавкаНДС = Перечисления.СтавкиНДС.БезНДС;
		Иначе
			НоваяСтрока.Сумма = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(СведенияОТоваре, 
				"ТаблицаТоваров.НомерСтроки.СуммаСНДС");
			НоваяСтрока.СуммаНДС = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(СведенияОТоваре, 
				"ТаблицаТоваров.НомерСтроки.СуммаНДС");
			НоваяСтрока.СтавкаНДС = НайтиПеречисление("НДС", СтавкаНДСЧисло);
		КонецЕсли;
		
		НомерТаможеннойДекларации = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(
			СведенияОТоваре, "ТаблицаТоваров.НомерСтроки.ДопДанныеПодписанные.НомерТД", Ложь);
		КодСтраныПроисхождения = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(
			СведенияОТоваре, "ТаблицаТоваров.НомерСтроки.ДопДанныеПодписанные.КодСтраныПроисхождения", Ложь);
			
		ЭтоРНПТ = Ложь;
		// Заполняем количество для прослеживаемости
		СведенияОПрослеживаемости = СведенияОТоваре.Строки.Найти(
		"СведенияОТоварах.НомерСтроки.СведенияОПрослеживаемости", "ПолныйПуть", Истина);
		Если СведенияОПрослеживаемости <> Неопределено И СведенияОПрослеживаемости.Строки.Количество() > 0 Тогда
			КоличествоПрослеживаемости = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(СведенияОПрослеживаемости.Строки[0],
			"СведенияОТоварах.НомерСтроки.СведенияОПрослеживаемости.НомерСтроки.Количество");
			Если ЗначениеЗаполнено(КоличествоПрослеживаемости) Тогда
				НоваяСтрока.КоличествоПоРНПТ = КоличествоПрослеживаемости;
				ЭтоРНПТ = Истина;
			КонецЕсли;
			
			СтоимостьПрослеживаемости = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(СведенияОПрослеживаемости.Строки[0],
			"СведенияОТоварах.НомерСтроки.СведенияОПрослеживаемости.НомерСтроки.СтоимостьБезНДС");
			Если ЗначениеЗаполнено(СтоимостьПрослеживаемости) Тогда
				НоваяСтрока.СуммаПоРНПТ = СтоимостьПрослеживаемости;
			КонецЕсли;
			
		КонецЕсли;
			
		Если ЗначениеЗаполнено(НомерТаможеннойДекларации) Тогда
			ТаможеннаяДекларация = Неопределено;
			СтранаПроисхождения = Неопределено;
			ЭлектронноеВзаимодействиеПереопределяемый.НайтиСсылкуНаОбъект("ТаможенныеДекларации", ТаможеннаяДекларация, 
				НомерТаможеннойДекларации);
			ЭлектронноеВзаимодействиеПереопределяемый.НайтиСсылкуНаОбъект("СтраныМира", СтранаПроисхождения, 
				КодСтраныПроисхождения);
			Если НЕ ЗначениеЗаполнено(ТаможеннаяДекларация) Тогда
				НоваяТаможеннаяДекларация = Справочники.НомераГТД.СоздатьЭлемент();
				НоваяТаможеннаяДекларация.Код = НомерТаможеннойДекларации;
				НоваяТаможеннаяДекларация.СтранаПроисхождения = СтранаПроисхождения;
				НоваяТаможеннаяДекларация.ЭтоРНПТ = ЭтоРНПТ;
				НоваяТаможеннаяДекларация.Записать();
				ТаможеннаяДекларация = НоваяТаможеннаяДекларация.Ссылка;
			КонецЕсли;
			НоваяСтрока.НомерГТД = ТаможеннаяДекларация;
		КонецЕсли;
		
		Сопоставление = СведенияОТоваре.Строки.Найти(
			"ТаблицаТоваров.НомерСтроки.Сопоставление", "ПолныйПуть", Истина);
		Если Сопоставление <> Неопределено Тогда
			
			Номенклатура = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(СведенияОТоваре,
				"ТаблицаТоваров.НомерСтроки.Сопоставление.НоменклатураИБ");
			Если ЗначениеЗаполнено(Номенклатура) Тогда
				НоваяСтрока.Номенклатура = Номенклатура;
			КонецЕсли;
			
			Характеристика = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(СведенияОТоваре,
				"ТаблицаТоваров.НомерСтроки.Сопоставление.ХарактеристикаИБ");
			Если ЗначениеЗаполнено(Характеристика) Тогда
				НоваяСтрока.Характеристика = Характеристика;
			КонецЕсли;
			
			ЕдиницаИзмерения = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(СведенияОТоваре,
				"ТаблицаТоваров.НомерСтроки.Сопоставление.УпаковкаИБ");
			Если ЗначениеЗаполнено(ЕдиницаИзмерения) Тогда
				Если ТипЗнч(ЕдиницаИзмерения) = Тип("СправочникСсылка.УпаковкиНоменклатуры") Тогда
					НоваяСтрока.Упаковка = ЕдиницаИзмерения;
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(НоваяСтрока.Упаковка) Тогда
			КоэффициентУпаковки = НоваяСтрока.Упаковка.Коэффициент;
			Если ЗначениеЗаполнено(КоэффициентУпаковки) И КоэффициентУпаковки <> 1 Тогда
				НоваяСтрока.Количество = НоваяСтрока.КоличествоУпаковок * КоэффициентУпаковки;
			Иначе
				НоваяСтрока.Количество = НоваяСтрока.КоличествоУпаковок;
			КонецЕсли;
		Иначе
			НоваяСтрока.Количество = НоваяСтрока.КоличествоУпаковок;
		КонецЕсли;
		
		Если ДокументОбъект.ЦенаВключаетНДС Тогда
			НоваяСтрока.Цена = ?(НоваяСтрока.КоличествоУпаковок = 0, 
									НоваяСтрока.Сумма, 
									НоваяСтрока.Сумма / НоваяСтрока.КоличествоУпаковок);
		КонецЕсли;
		
		Если НоваяСтрока.Цена = 0 Тогда
			НоваяСтрока.Цена = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(
			СведенияОТоваре, "ТаблицаТоваров.НомерСтроки.Цена");
		КонецЕсли;
		
		
	КонецЦикла;
	
	ЗавершениеЗагрузкиИЗаписьДокумента(СсылкаНаВладельца, ДокументОбъект, Записывать);
	
КонецПроцедуры

// См. ОбменСКонтрагентамиПереопределяемый.НайтиСоздатьУниверсальныйПередаточныйДокумент.
// Сохраняет данные из электронного документа в объекты ИБ.
//
// Параметры:
//  ДеревоДанных - ДеревоЗначений - структура параметров документа ИБ.
//  СсылкиНаВладельцев - Массив - документы информационной базы, созданные ранее по входящему электронному документу.
//  Записывать - Булево - признак необходимости записывать объект ИБ.
//  СпособОбработки - Структура - способы сохранения данных в информационной базе.
//     * ПервичныйДокумент - Строка - способ сохранения первичного документа.
//     * СчетФактура       - Строка - способ сохранения счета-фактуры.
//  ОписаниеОшибки - Строка - описание ошибки создания учетного документа.
//
Процедура НайтиСоздатьУниверсальныйПередаточныйДокумент(ДеревоДанных, СсылкиНаВладельцев, СпособОбработки, ОписаниеОшибки) Экспорт
	
	ПервичныйДокумент = Неопределено;
	СчетФактура = Неопределено;
	
	ФункцияУПД = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, "Функция");
	
	НачатьТранзакцию();
	Попытка
		Если СсылкиНаВладельцев <> Неопределено Тогда
			Для каждого Строка Из СсылкиНаВладельцев Цикл
				Если ТипЗнч(Строка) = Тип("ДокументСсылка.СчетФактураПолученный") Тогда
					СчетФактура = Строка;
				Иначе
					ПервичныйДокумент = Строка;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		ДокументыУчета = Новый Массив;
		
		Если ФункцияУПД = "СЧФДОП" Тогда
			
			НайтиСоздатьУПДДокументОПередаче(ДеревоДанных, ПервичныйДокумент, Истина, СпособОбработки, ОписаниеОшибки);
			ДокументыУчета.Добавить(ПервичныйДокумент);
			
			// Заполним основание в СФ.
			ДокументыОснованияСчетаФактуры = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, 
			"ДокументыОснованияСчетаФактуры");
			Если ЗначениеЗаполнено(ДокументыОснованияСчетаФактуры) Тогда
				ДокументыОснованияСчетаФактуры.Добавить(ПервичныйДокумент);
			Иначе
				ДокументыОснованияСчетаФактуры = Новый Массив;
				ДокументыОснованияСчетаФактуры.Добавить(ПервичныйДокумент);
			КонецЕсли;
			ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ДокументыОснованияСчетаФактуры", 
				ДокументыОснованияСчетаФактуры);
			
			НайтиСоздатьУПДСчетФактуру(ДеревоДанных, СчетФактура, Истина, СпособОбработки, ОписаниеОшибки);
			ДокументыУчета.Добавить(СчетФактура);
			
		ИначеЕсли ФункцияУПД = "ДОП" Тогда
			
			НайтиСоздатьУПДДокументОПередаче(ДеревоДанных, ПервичныйДокумент, Истина, СпособОбработки, ОписаниеОшибки);
			ДокументыУчета.Добавить(ПервичныйДокумент);
			
		Иначе
			
			НайтиСоздатьУПДСчетФактуру(ДеревоДанных, СчетФактура, Истина, СпособОбработки, ОписаниеОшибки);
			ДокументыУчета.Добавить(СчетФактура);
			
		КонецЕсли;
		
		СсылкиНаВладельцев = ДокументыУчета;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		ОтменитьТранзакцию();
		ТекстСообщения = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'Создание УПД'", ОбщегоНазначения.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка,
			,
			,
			ТекстСообщения);
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

// См. ОбменСКонтрагентамиПереопределяемый.НайтиСоздатьУПДДокументОПередаче.
// Сохраняет данные из электронного документа в объекты ИБ.
//
// Параметры:
//  ДеревоДанных - ДеревоЗначений - структура параметров документа ИБ.
//  СсылкаНаВладельца - Ссылка - ссылка на объект ИБ, владельца электронного документа.
//  Записывать - Булево - признак необходимости записывать объект ИБ.
//  СпособОбработки - Строка - способ сохранения данных в информационной базе.
//  ОписаниеОшибки - Строка - описание ошибки создания учетного документа.
//
Процедура НайтиСоздатьУПДДокументОПередаче(ДеревоДанных, СсылкаНаВладельца, Записывать, СпособОбработки, ОписаниеОшибки) Экспорт
	
	Если СпособОбработки = "ПеремещениеТоваров" Тогда
		ОписаниеОшибки = НСтр("ru = 'Создание перемещений не поддерживается.'");
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СсылкаНаВладельца) И ТипЗнч(СсылкаНаВладельца) = Тип("ДокументСсылка.ПоступлениеТоваров") Тогда
		ДокументОбъект = СсылкаНаВладельца.ПолучитьОбъект();
		ДокументОбъект.Товары.Очистить();
		ДокументОбъект.ТоварыПоДаннымПоставщика.Очистить();
		ДокументОбъект.ЕстьРасхождения = Ложь;
	Иначе
		ДокументОбъект = Документы.ПоступлениеТоваров.СоздатьДокумент();
		ДокументОбъект.Заполнить(Неопределено);
		ДокументОбъект.Дата = ТекущаяДатаСеанса();
		ДокументОбъект.УстановитьНовыйНомер();
	КонецЕсли;
	
	ДокументОбъект.Контрагент  = КонтрагентПоДаннымЭД(ДеревоДанных,  "СведенияОПродавце");
	ДокументОбъект.Организация = ОрганизацияПоДаннымЭД(ДеревоДанных, "СведенияОПокупателе");
	
	ДокументОбъект.НомерВходящегоДокумента = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, "НомерДокумента");
	ДокументОбъект.ДатаВходящегоДокумента = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, "ДатаДокумента");
	
	ИдентификаторСтроки = 0;
	СведенияОТоварах = ДеревоДанных.Строки.Найти("СведенияОТоварах", "ПолныйПуть");
	
	// ГосИС.МОТП
	ШтрихкодыУпаковок = ЭлектронноеВзаимодействиеИСМП.НоваяТаблицаШтрихкодыУпаковок();
	// Конец ГосИс.МОТП
	
	Для Каждого СведенияОТоваре Из СведенияОТоварах.Строки Цикл
		
		ИдентификаторСтроки = ИдентификаторСтроки + 1;
		НоваяСтрока = ДокументОбъект.Товары.Добавить();
		НоваяСтрока.ИдентификаторСтроки = ИдентификаторСтроки;
		
		КоличествоМест = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(СведенияОТоваре, 
			"СведенияОТоварах.НомерСтроки.Количество");
		НоваяСтрока.КоличествоУпаковок = КоличествоМест;
		Если НоваяСтрока.КоличествоУпаковок = 0 Тогда
			НоваяСтрока.Цена = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(СведенияОТоваре,
				"СведенияОТоварах.НомерСтроки.ЦенаЗаЕдиницуИзмерения");
		Иначе
			НоваяСтрока.Сумма = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(СведенияОТоваре, 
				"СведенияОТоварах.НомерСтроки.СтоимостьТоваровСНалогом");
			НоваяСтрока.Цена = Окр(НоваяСтрока.Сумма / НоваяСтрока.КоличествоУпаковок, 2, 1);
		КонецЕсли;
		
		СтавкаНДСЧисло = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(СведенияОТоваре,
			"СведенияОТоварах.НомерСтроки.НалоговаяСтавка");
		Если СтавкаНДСЧисло = "НДС исчисляется налоговым агентом" Тогда // терм, локализации не подлежит (определение типов фабрик XDTO, см. ON_SCHFDOPPR_5_01)
			НоваяСтрока.СтавкаНДС = Перечисления.СтавкиНДС.БезНДС;
		Иначе
			НоваяСтрока.СуммаНДС = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(СведенияОТоваре, 
				"СведенияОТоварах.НомерСтроки.СуммаНалога");
			НоваяСтрока.СтавкаНДС = НайтиПеречисление("НДС", СтавкаНДСЧисло);
		КонецЕсли;
		
		ЭтоРНПТ = Ложь;
		// Заполняем количество для прослеживаемости
		СведенияОПрослеживаемости = СведенияОТоваре.Строки.Найти(
		"СведенияОТоварах.НомерСтроки.СведенияОПрослеживаемости", "ПолныйПуть", Истина);
		Если СведенияОПрослеживаемости <> Неопределено И СведенияОПрослеживаемости.Строки.Количество() > 0 Тогда
			КоличествоПрослеживаемости = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(СведенияОПрослеживаемости.Строки[0],
			"СведенияОТоварах.НомерСтроки.СведенияОПрослеживаемости.НомерСтроки.Количество");
			Если ЗначениеЗаполнено(КоличествоПрослеживаемости) Тогда
				НоваяСтрока.КоличествоПоРНПТ = КоличествоПрослеживаемости;
				ЭтоРНПТ = Истина;
			КонецЕсли;
			
			СтоимостьПрослеживаемости = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(СведенияОПрослеживаемости.Строки[0],
			"СведенияОТоварах.НомерСтроки.СведенияОПрослеживаемости.НомерСтроки.СтоимостьБезНДС");
			Если ЗначениеЗаполнено(СтоимостьПрослеживаемости) Тогда
				НоваяСтрока.СуммаПоРНПТ = СтоимостьПрослеживаемости;
			КонецЕсли;
			
		КонецЕсли;
		
		СведенияОТаможеннойДекларации = СведенияОТоваре.Строки.Найти(
			"СведенияОТоварах.НомерСтроки.СведенияОТаможеннойДекларации", "ПолныйПуть", Истина);
		
		Если СведенияОТаможеннойДекларации <> Неопределено И СведенияОТаможеннойДекларации.Строки.Количество() > 0 Тогда
			НомерТаможеннойДекларации = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(СведенияОТаможеннойДекларации.Строки[0],
			"СведенияОТоварах.НомерСтроки.СведенияОТаможеннойДекларации.НомерСтроки.ТаможеннаяДекларацияНомер");
			КодСтраныПроисхождения = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(СведенияОТаможеннойДекларации.Строки[0],
			"СведенияОТоварах.НомерСтроки.СведенияОТаможеннойДекларации.НомерСтроки.СтранаПроисхожденияКод");
			Если ЗначениеЗаполнено(НомерТаможеннойДекларации) Тогда
				ТаможеннаяДекларация = Неопределено;
				СтранаПроисхождения = Неопределено;
				ЭлектронноеВзаимодействиеПереопределяемый.НайтиСсылкуНаОбъект("ТаможенныеДекларации", ТаможеннаяДекларация, 
					НомерТаможеннойДекларации);
				ЭлектронноеВзаимодействиеПереопределяемый.НайтиСсылкуНаОбъект("СтраныМира", СтранаПроисхождения, 
					КодСтраныПроисхождения);
				Если НЕ ЗначениеЗаполнено(ТаможеннаяДекларация) Тогда
					НоваяТаможеннаяДекларация = Справочники.НомераГТД.СоздатьЭлемент();
					НоваяТаможеннаяДекларация.Код = НомерТаможеннойДекларации;
					НоваяТаможеннаяДекларация.СтранаПроисхождения = СтранаПроисхождения;
					НоваяТаможеннаяДекларация.ЭтоРНПТ = ЭтоРНПТ;
					НоваяТаможеннаяДекларация.Записать();
					ТаможеннаяДекларация = НоваяТаможеннаяДекларация.Ссылка;
				КонецЕсли;
				НоваяСтрока.НомерГТД = ТаможеннаяДекларация;
			КонецЕсли;
		КонецЕсли;
		
		ОбменСКонтрагентамиРТКлиентСервер.ЗаполнитьИдентификаторСтроки(НоваяСтрока);
		
		Сопоставление = СведенияОТоваре.Строки.Найти(
			"СведенияОТоварах.НомерСтроки.Сопоставление", "ПолныйПуть", Истина);
		Если Сопоставление <> Неопределено Тогда
			
			Номенклатура = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(СведенияОТоваре,
				"СведенияОТоварах.НомерСтроки.Сопоставление.НоменклатураИБ");
			Если ЗначениеЗаполнено(Номенклатура) Тогда
				НоваяСтрока.Номенклатура = Номенклатура;
			КонецЕсли;
			
			Характеристика = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(СведенияОТоваре,
				"СведенияОТоварах.НомерСтроки.Сопоставление.ХарактеристикаИБ");
			Если ЗначениеЗаполнено(Характеристика) Тогда
				НоваяСтрока.Характеристика = Характеристика;
			КонецЕсли;
			
			ЕдиницаИзмерения = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(СведенияОТоваре,
				"СведенияОТоварах.НомерСтроки.Сопоставление.УпаковкаИБ");
			Если ЗначениеЗаполнено(ЕдиницаИзмерения) Тогда
				Если ТипЗнч(ЕдиницаИзмерения) = Тип("СправочникСсылка.УпаковкиНоменклатуры") Тогда
					НоваяСтрока.Упаковка = ЕдиницаИзмерения;
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
		НоваяСтрока.Количество = НоваяСтрока.КоличествоУпаковок;
		
		// Выполним пересчет количества товара если поступление в упаковках
		КоэффициентУпаковки = ?(ЗначениеЗаполнено(НоваяСтрока.Упаковка),
			ОбщегоНазначения.ЗначениеРеквизитаОбъекта(НоваяСтрока.Упаковка, "Коэффициент"), 1);
		Если КоэффициентУпаковки <> 0 И КоэффициентУпаковки <> 1 Тогда
			НоваяСтрока.Количество = НоваяСтрока.КоличествоУпаковок * КоэффициентУпаковки;
		КонецЕсли;
		
		// ГосИС.МОТП
		ЭлектронноеВзаимодействиеИСМП.ДобавитьШтрихкодыТаблицуШтрихкодовУпаковок(ШтрихкодыУпаковок, СведенияОТоваре);
		// Конец ГосИс.МОТП
		
	КонецЦикла;
	
	// ГосИС.МОТП
	ЭлектронноеВзаимодействиеИСМП.СвернутьТаблицуШтрихкодовУпаковок(ШтрихкодыУпаковок);
	ДокументОбъект.ШтрихкодыУпаковок.Загрузить(ШтрихкодыУпаковок);
	// Конец ГосИс.МОТП
	
	ЗавершениеЗагрузкиИЗаписьДокумента(СсылкаНаВладельца, ДокументОбъект, Записывать);
	
КонецПроцедуры

// См. ОбменСКонтрагентамиПереопределяемый.НайтиСоздатьУПДСчетФактуру.
// Сохраняет данные из электронного документа в объекты ИБ.
//
// Параметры:
//  ДеревоДанных - ДеревоЗначений - структура параметров документа ИБ.
//  СсылкаНаВладельца - Ссылка - ссылка на объект ИБ, владельца электронного документа.
//  Записывать - Булево - признак необходимости записывать объект ИБ.
//  СпособОбработки - Строка - способ сохранения данных в информационной базе.
//  ОписаниеОшибки - Строка - описание ошибки создания учетного документа.
//
Процедура НайтиСоздатьУПДСчетФактуру(ДеревоДанных, СсылкаНаВладельца, Записывать, СпособОбработки, ОписаниеОшибки) Экспорт
	
	Если ЗначениеЗаполнено(СсылкаНаВладельца) И ТипЗнч(СсылкаНаВладельца) = Тип("ДокументСсылка.СчетФактураПолученный") Тогда
		ДокументОбъект = СсылкаНаВладельца.ПолучитьОбъект();
		ДокументОбъект.ДатаСоставления = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(
			ДеревоДанных, "ДатаДокумента");
	Иначе
		ДокументОбъект = Документы.СчетФактураПолученный.СоздатьДокумент();
		ДокументОбъект.Заполнить(Неопределено);
		ДокументОбъект.ДатаСоставления = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(
			ДеревоДанных, "ДатаДокумента");
		ДокументОбъект.Дата = ТекущаяДатаСеанса();
	КонецЕсли;
	ДокументОбъект.Контрагент  = КонтрагентПоДаннымЭД(ДеревоДанных,  "СведенияОПродавце");
	ДокументОбъект.Организация = ОрганизацияПоДаннымЭД(ДеревоДанных, "СведенияОПокупателе");
	
	ДокументОбъект.ПолученВЭлектронномВиде = Истина;
	ДокументОбъект.Номер = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, "НомерДокумента");
	
	ДокументОбъект.НомерИсправления = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, "НомерИсправления");
	Если ЗначениеЗаполнено(ДокументОбъект.НомерИсправления) Тогда
		ДокументОбъект.Исправление = Истина;
		ДокументОбъект.ДатаИсправления  = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, "ДатаИсправления");
	КонецЕсли;
	
	// Заполним основание в СФ.
	ДокументыОснованияСчетаФактуры = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, 
		"ДокументыОснованияСчетаФактуры");
	Если ЗначениеЗаполнено(ДокументыОснованияСчетаФактуры) Тогда
		ДокументОбъект.ДокументыОснования.Очистить();
		Для Каждого ДокументОснования Из ДокументыОснованияСчетаФактуры Цикл
			Если ТипЗнч(ДокументОснования) = Тип("ДокументСсылка.СчетФактураПолученный") Тогда
				ДокументОбъект.СчетФактураОснование = ДокументОснования;
			Иначе
				СтрокаТаблицы = ДокументОбъект.ДокументыОснования.Добавить();
				СтрокаТаблицы.ДокументОснование = ДокументОснования;
			КонецЕсли;
			
			Если Не ЗначениеЗаполнено(ДокументОбъект.СчетФактураОснование) И ДокументОбъект.Исправление Тогда
				ДокументОбъект.СчетФактураОснование = ЗакупкиВызовСервера.СчетФактураДокумента(ДокументыОснованияСчетаФактуры[0], ДокументОбъект.Организация, Ложь, Истина);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	ЗавершениеЗагрузкиИЗаписьДокумента(СсылкаНаВладельца, ДокументОбъект, Записывать);
	
КонецПроцедуры

// См. ОбменСКонтрагентамиПереопределяемый.НайтиСоздатьУКДСчетФактуру.
// Сохраняет данные из электронного документа в объекты ИБ.
//
// Параметры:
//  ДеревоДанных - ДеревоЗначений - структура параметров документа ИБ.
//  СсылкаНаВладельца - Ссылка - ссылка на объект ИБ, владельца электронного документа.
//  Записывать - Булево - признак необходимости записывать объект ИБ.
//  СпособОбработки - Строка - способ сохранения данных в информационной базе.
Процедура НайтиСоздатьУКДСчетФактуру(ДеревоДанных, СсылкаНаВладельца, Записывать, СпособОбработки) Экспорт
	
	Если ЗначениеЗаполнено(СсылкаНаВладельца) И ТипЗнч(СсылкаНаВладельца) = Тип("ДокументСсылка.СчетФактураПолученный") Тогда
		ДокументОбъект = СсылкаНаВладельца.ПолучитьОбъект();
		ДокументОбъект.ДатаСоставления = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(
			ДеревоДанных, "ДатаДокумента");
	Иначе
		ДокументОбъект = Документы.СчетФактураПолученный.СоздатьДокумент();
		ДокументОбъект.Заполнить(Неопределено);
		ДокументОбъект.ДатаСоставления = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(
			ДеревоДанных, "ДатаДокумента");
		ДокументОбъект.Дата = ТекущаяДатаСеанса();
	КонецЕсли;
	ДокументОбъект.Контрагент  = КонтрагентПоДаннымЭД(ДеревоДанных,  "СведенияОПродавце");
	ДокументОбъект.Организация = ОрганизацияПоДаннымЭД(ДеревоДанных, "СведенияОПокупателе");
	
	ДокументОбъект.ПолученВЭлектронномВиде = Истина;
	ДокументОбъект.Номер = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, "НомерДокумента");
	
	ДокументОбъект.НомерИсправления = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, "НомерИсправления");
	Если ЗначениеЗаполнено(ДокументОбъект.НомерИсправления) Тогда
		ДокументОбъект.Исправление = Истина;
		ДокументОбъект.ДатаИсправления  = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, "ДатаИсправления");
	Иначе
		ДокументОбъект.Корректировочный = Истина;
	КонецЕсли;
	
	// Заполним основание в СФ.
	ДокументыОснованияСчетаФактуры = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, 
		"ДокументыОснованияСчетаФактуры");
	Если ЗначениеЗаполнено(ДокументыОснованияСчетаФактуры) Тогда
		ДокументОбъект.ДокументыОснования.Очистить();
		Для Каждого ДокументОснования Из ДокументыОснованияСчетаФактуры Цикл
			Если ТипЗнч(ДокументОснования) = Тип("ДокументСсылка.СчетФактураПолученный") Тогда
				ДокументОбъект.СчетФактураОснование = ДокументОснования;
			Иначе
				СтрокаТаблицы = ДокументОбъект.ДокументыОснования.Добавить();
				СтрокаТаблицы.ДокументОснование = ДокументОснования;
			КонецЕсли;
		КонецЦикла;
		
		Если Не ЗначениеЗаполнено(ДокументОбъект.СчетФактураОснование) И (ДокументОбъект.Исправление ИЛИ ДокументОбъект.Корректировочный) Тогда
			ДокументОбъект.СчетФактураОснование = ЗакупкиВызовСервера.СчетФактураДокумента(ДокументыОснованияСчетаФактуры[0], ДокументОбъект.Организация, Ложь, ДокументОбъект.Исправление);
		КонецЕсли;
	КонецЕсли;
	
	ЗавершениеЗагрузкиИЗаписьДокумента(СсылкаНаВладельца, ДокументОбъект, Записывать);
	
КонецПроцедуры

// См. ОбменСКонтрагентамиПереопределяемый.НайтиСоздатьУниверсальныйПередаточныйДокумент_2019.
// Сохраняет данные из электронного документа в объекты ИБ (УПД версии 2019).
//
// Параметры:
//  ДеревоДанных - ДеревоЗначений - структура параметров документа ИБ.
//  СсылкиНаВладельцев - Массив - документы информационной базы, созданные ранее по входящему электронному документу.
//  СпособОбработки - Структура - способы сохранения данных в информационной базе.
//     * ПервичныйДокумент - Строка - способ сохранения первичного документа.
//     * СчетФактура       - Строка - способ сохранения счета-фактуры.
//  ОписаниеОшибки - Строка - описание ошибки создания учетного документа.
//
Процедура НайтиСоздатьУниверсальныйПередаточныйДокумент_2019(ДеревоДанных, СсылкиНаВладельцев = Неопределено, СпособОбработки = Неопределено, ОписаниеОшибки = "") Экспорт
	
	ПервичныйДокумент = Неопределено;
	СчетФактура = Неопределено;
	
	ФункцияУПД = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, "Функция");
	
	НачатьТранзакцию();
	Попытка
		Если СсылкиНаВладельцев <> Неопределено Тогда
			Для каждого Строка Из СсылкиНаВладельцев Цикл
				Если ТипЗнч(Строка) = Тип("ДокументСсылка.СчетФактураПолученный") Тогда
					СчетФактура = Строка;
				Иначе
					ПервичныйДокумент = Строка;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		ДокументыУчета = Новый Массив;
		
		Если ФункцияУПД = "СЧФДОП" Тогда
			
			НайтиСоздатьУПДДокументОПередаче_2019(ДеревоДанных, ПервичныйДокумент, Истина, СпособОбработки, ОписаниеОшибки);
			ДокументыУчета.Добавить(ПервичныйДокумент);
			
			// Заполним основание в СФ.
			ДокументыОснованияСчетаФактуры = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, 
			"ДокументыОснованияСчетаФактуры");
			Если ЗначениеЗаполнено(ДокументыОснованияСчетаФактуры) Тогда
				ДокументыОснованияСчетаФактуры.Добавить(ПервичныйДокумент);
			Иначе
				ДокументыОснованияСчетаФактуры = Новый Массив;
				ДокументыОснованияСчетаФактуры.Добавить(ПервичныйДокумент);
			КонецЕсли;
			ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ДокументыОснованияСчетаФактуры", 
				ДокументыОснованияСчетаФактуры);
			
			НайтиСоздатьУПДСчетФактуру_2019(ДеревоДанных, СчетФактура, СпособОбработки, ОписаниеОшибки);
			ДокументыУчета.Добавить(СчетФактура);
			
		ИначеЕсли ФункцияУПД = "ДОП" Тогда
			
			НайтиСоздатьУПДДокументОПередаче_2019(ДеревоДанных, ПервичныйДокумент, Истина, СпособОбработки, ОписаниеОшибки);
			ДокументыУчета.Добавить(ПервичныйДокумент);
			
		Иначе
			
			НайтиСоздатьУПДСчетФактуру_2019(ДеревоДанных, СчетФактура, СпособОбработки, ОписаниеОшибки);
			ДокументыУчета.Добавить(СчетФактура);
			
		КонецЕсли;
		
		СсылкиНаВладельцев = ДокументыУчета;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		ОтменитьТранзакцию();
		ТекстСообщения = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'Создание УПД'", ОбщегоНазначения.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка,
			,
			,
			ТекстСообщения);
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

// См. ОбменСКонтрагентамиПереопределяемый.НайтиСоздатьУПДДокументОПередаче_2019.
Процедура НайтиСоздатьУПДДокументОПередаче_2019(ДеревоДанных, СсылкаНаВладельца, Записывать, СпособОбработки, ОписаниеОшибки) Экспорт
	
	Если СпособОбработки = "ПеремещениеТоваров" Тогда
		ОписаниеОшибки = НСтр("ru = 'Создание перемещений не поддерживается.'");
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СсылкаНаВладельца) Тогда
		ДокументОбъект = СсылкаНаВладельца.ПолучитьОбъект();
		Если ДокументОбъект.Проведен Тогда 
			РежимЗаписи = РежимЗаписиДокумента.Проведение;
			Текст = НСтр("ru = 'Операция возможна только для непроведенных документов.'");
		КонецЕсли;
	Иначе
		ДокументОбъект = Документы.ПоступлениеТоваров.СоздатьДокумент();
		ДокументОбъект.Заполнить(Неопределено);
		ДокументОбъект.Дата = ТекущаяДатаСеанса();
		ДокументОбъект.УстановитьНовыйНомер();
	КонецЕсли;
	
	ДокументОбъект.НомерВходящегоДокумента = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, "НомерДокумента");
	ДокументОбъект.ДатаВходящегоДокумента = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, "ДатаДокумента");
	
	СведенияОПродавце = ДеревоДанных.Строки.Найти("СведенияОПродавце", "ПолныйПуть");
	СведенияОПокупателе = ДеревоДанных.Строки.Найти("СведенияОПокупателе", "ПолныйПуть");
	Если СведенияОПродавце.Строки.Количество() > 1
		ИЛИ СведенияОПокупателе.Строки.Количество() > 1 Тогда
		ТекстИсключения = СтрШаблон(НСтр("ru = 'Ошибка загрузки электронной товарной накладной %1 от %2.'"), 
			ДокументОбъект.НомерВходящегоДокумента, Формат(ДокументОбъект.ДатаВходящегоДокумента,"ДЛФ=D")) + Символы.ПС
			+ НСтр("ru = 'Загрузка сводных накладных не поддерживается.'");
		ВызватьИсключение ТекстИсключения;
	КонецЕсли;
	
	ОсновнаяСтрокаПродавца = Неопределено;
	Для каждого СтрокаПродавца Из СведенияОПродавце.Строки Цикл
		ДокументОбъект.Контрагент = КонтрагентПоДаннымЭД(СтрокаПродавца, "СведенияОПродавце.НомерСтроки");
		ОсновнаяСтрокаПродавца = СтрокаПродавца;
		Прервать;
	КонецЦикла;
	Для каждого СтрокаПокупателя Из СведенияОПокупателе.Строки Цикл
		ДокументОбъект.Организация = ОрганизацияПоДаннымЭД(СтрокаПокупателя, "СведенияОПокупателе.НомерСтроки");
		Прервать;
	КонецЦикла;
	
	// Поиск и заполнение банковского счета контрагента.
	НомерСчета = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ОсновнаяСтрокаПродавца,
		"СведенияОПродавце.НомерСтроки.БанковскиеРеквизиты.НомерСчета");
	БИКБанка = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ОсновнаяСтрокаПродавца,
		"СведенияОПродавце.НомерСтроки.БанковскиеРеквизиты.БИКБанка");
	ДокументОбъект.БанковскийСчетКонтрагента = БанковскийСчетКонтрагента(
		ДокументОбъект.Контрагент, БИКБанка, НомерСчета);
	
	
	
	ЕстьТовары = Ложь;
	ЕстьРаботы = Ложь;
	ЕстьПрава  = Ложь;
	
	ОблагаетсяНДСУПокупателя = Ложь;
	
	ДокументОбъект.Товары.Очистить();
	ДокументОбъект.ТоварыПоДаннымПоставщика.Очистить();
	ДокументОбъект.ШтрихкодыУпаковокРасхождения.Очистить();
	ДокументОбъект.ЕстьРасхождения = Ложь;
	
	СведенияОНоменклатуре = ТаблицаСведенийОНоменклатуреПоставщика();
	
	// ГосИС.МОТП
	ШтрихкодыУпаковок = ЭлектронноеВзаимодействиеИСМП.НоваяТаблицаШтрихкодыУпаковок();
	// Конец ГосИс.МОТП
	
	// Сведения таблицы.
	СведенияОТоварах = ДеревоДанных.Строки.Найти("СведенияОТоварах", "ПолныйПуть");
	Для Каждого СведенияОТоваре Из СведенияОТоварах.Строки Цикл
		
		Признак = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(СведенияОТоваре, "СведенияОТоварах.НомерСтроки.Признак");
		
		Если Признак = "1" Тогда
			ЕстьТовары = Истина;
		ИначеЕсли Признак = "2" ИЛИ Признак = "3" Тогда
			ЕстьРаботы = Истина;
		ИначеЕсли Признак = "4" Тогда
			ЕстьПрава  = Истина;
		КонецЕсли;
		
		НоваяСтрока = ДокументОбъект.Товары.Добавить();
		
		НоваяСтрока.Количество = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(СведенияОТоваре,
			"СведенияОТоварах.НомерСтроки.Количество");
		НоваяСтрока.Цена = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(СведенияОТоваре,
			"СведенияОТоварах.НомерСтроки.ЦенаЗаЕдиницуИзмерения");
		НоваяСтрока.Сумма = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(СведенияОТоваре,
			"СведенияОТоварах.НомерСтроки.СтоимостьТоваровБезНалога");
		
		КоличествоМест = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(СведенияОТоваре, 
			"СведенияОТоварах.НомерСтроки.Количество");
		НоваяСтрока.КоличествоУпаковок = КоличествоМест;
		Если НоваяСтрока.КоличествоУпаковок = 0 Тогда
			НоваяСтрока.Цена = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(СведенияОТоваре,
				"СведенияОТоварах.НомерСтроки.ЦенаЗаЕдиницуИзмерения");
		Иначе
			НоваяСтрока.Сумма = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(СведенияОТоваре, 
				"СведенияОТоварах.НомерСтроки.СтоимостьТоваровСНалогом");
			НоваяСтрока.Цена = Окр(НоваяСтрока.Сумма / НоваяСтрока.КоличествоУпаковок, 2, 1);
		КонецЕсли;
		
		СтавкаНДС = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(СведенияОТоваре,
			"СведенияОТоварах.НомерСтроки.НалоговаяСтавка");
		Если СтавкаНДС = "НДС исчисляется налоговым агентом" Тогда // терм, локализации не подлежит (определение типов фабрик XDTO, см. ON_SCHFDOPPR_5_01)
			НоваяСтрока.СтавкаНДС = Перечисления.СтавкиНДС.БезНДС;
			ОблагаетсяНДСУПокупателя = Истина;
		Иначе
			НоваяСтрока.СтавкаНДС = СтавкаНДС;
		КонецЕсли;
		НоваяСтрока.СуммаНДС  = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(СведенияОТоваре,
				"СведенияОТоварах.НомерСтроки.СуммаНалога");
		
		ЭтоРНПТ = Ложь;
		// Заполняем количество для прослеживаемости
		СведенияОПрослеживаемости = СведенияОТоваре.Строки.Найти(
		"СведенияОТоварах.НомерСтроки.СведенияОПрослеживаемости", "ПолныйПуть", Истина);
		Если СведенияОПрослеживаемости <> Неопределено И СведенияОПрослеживаемости.Строки.Количество() > 0 Тогда
			КоличествоПрослеживаемости = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(СведенияОПрослеживаемости.Строки[0],
			"СведенияОТоварах.НомерСтроки.СведенияОПрослеживаемости.НомерСтроки.Количество");
			Если ЗначениеЗаполнено(КоличествоПрослеживаемости) Тогда
				НоваяСтрока.КоличествоПоРНПТ = КоличествоПрослеживаемости;
				ЭтоРНПТ = Истина;
			КонецЕсли;
			
			СтоимостьПрослеживаемости = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(СведенияОПрослеживаемости.Строки[0],
			"СведенияОТоварах.НомерСтроки.СведенияОПрослеживаемости.НомерСтроки.СтоимостьБезНДС");
			Если ЗначениеЗаполнено(СтоимостьПрослеживаемости) Тогда
				НоваяСтрока.СуммаПоРНПТ = СтоимостьПрослеживаемости;
			КонецЕсли;
			
		КонецЕсли;
		
		СведенияОТаможеннойДекларации = СведенияОТоваре.Строки.Найти(
			"СведенияОТоварах.НомерСтроки.СведенияОТаможеннойДекларации", "ПолныйПуть", Истина);
		
		Если СведенияОТаможеннойДекларации <> Неопределено И СведенияОТаможеннойДекларации.Строки.Количество() > 0 Тогда
			НомерТаможеннойДекларации = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(СведенияОТаможеннойДекларации.Строки[0],
			"СведенияОТоварах.НомерСтроки.СведенияОТаможеннойДекларации.НомерСтроки.ТаможеннаяДекларацияНомер");
			КодСтраныПроисхождения = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(СведенияОТаможеннойДекларации.Строки[0],
			"СведенияОТоварах.НомерСтроки.СведенияОТаможеннойДекларации.НомерСтроки.СтранаПроисхожденияКод");
			Если ЗначениеЗаполнено(НомерТаможеннойДекларации) Тогда
				ТаможеннаяДекларация = Неопределено;
				СтранаПроисхождения = Неопределено;
				ЭлектронноеВзаимодействиеПереопределяемый.НайтиСсылкуНаОбъект("ТаможенныеДекларации", ТаможеннаяДекларация, 
					НомерТаможеннойДекларации);
				ЭлектронноеВзаимодействиеПереопределяемый.НайтиСсылкуНаОбъект("СтраныМира", СтранаПроисхождения, 
					КодСтраныПроисхождения);
				Если НЕ ЗначениеЗаполнено(ТаможеннаяДекларация) Тогда
					НоваяТаможеннаяДекларация = Справочники.НомераГТД.СоздатьЭлемент();
					НоваяТаможеннаяДекларация.Код = НомерТаможеннойДекларации;
					НоваяТаможеннаяДекларация.СтранаПроисхождения = СтранаПроисхождения;
					НоваяТаможеннаяДекларация.ЭтоРНПТ = ЭтоРНПТ;
					НоваяТаможеннаяДекларация.Записать();
					ТаможеннаяДекларация = НоваяТаможеннаяДекларация.Ссылка;
				КонецЕсли;
				НоваяСтрока.НомерГТД = ТаможеннаяДекларация;
			КонецЕсли;
		КонецЕсли;
		
		ОбменСКонтрагентамиРТКлиентСервер.ЗаполнитьИдентификаторСтроки(НоваяСтрока);
		
		Сопоставление = СведенияОТоваре.Строки.Найти(
			"СведенияОТоварах.НомерСтроки.Сопоставление", "ПолныйПуть", Истина);
		Если Сопоставление <> Неопределено Тогда
			
			Номенклатура = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(СведенияОТоваре,
				"СведенияОТоварах.НомерСтроки.Сопоставление.НоменклатураИБ");
			Если ЗначениеЗаполнено(Номенклатура) Тогда
				НоваяСтрока.Номенклатура = Номенклатура;
			КонецЕсли;
			
			Характеристика = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(СведенияОТоваре,
				"СведенияОТоварах.НомерСтроки.Сопоставление.ХарактеристикаИБ");
			Если ЗначениеЗаполнено(Характеристика) Тогда
				НоваяСтрока.Характеристика = Характеристика;
			КонецЕсли;
			
			ЕдиницаИзмерения = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(СведенияОТоваре,
				"СведенияОТоварах.НомерСтроки.Сопоставление.УпаковкаИБ");
			Если ЗначениеЗаполнено(ЕдиницаИзмерения) Тогда
				Если ТипЗнч(ЕдиницаИзмерения) = Тип("СправочникСсылка.УпаковкиНоменклатуры") Тогда
					НоваяСтрока.Упаковка = ЕдиницаИзмерения;
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
		НоваяСтрока.Количество = НоваяСтрока.КоличествоУпаковок;
		
		// Выполним пересчет количества товара если поступление в упаковках
		КоэффициентУпаковки = ?(ЗначениеЗаполнено(НоваяСтрока.Упаковка),
			ОбщегоНазначения.ЗначениеРеквизитаОбъекта(НоваяСтрока.Упаковка, "Коэффициент"), 1);
		Если КоэффициентУпаковки <> 0 И КоэффициентУпаковки <> 1 Тогда
			НоваяСтрока.Количество = НоваяСтрока.КоличествоУпаковок * КоэффициентУпаковки;
		КонецЕсли;
		
		Если НоваяСтрока.Количество = 0
			И (Признак = "2" ИЛИ Признак = "3") Тогда
			НоваяСтрока.Количество = 1;
		КонецЕсли;
		
		Если НоваяСтрока.Цена = 0
			И (Признак = "2" ИЛИ Признак = "3") Тогда
			НоваяСтрока.Цена = НоваяСтрока.Сумма / НоваяСтрока.Количество;
		КонецЕсли;
		
		// ГосИС.МОТП
		ЭлектронноеВзаимодействиеИСМП.ДобавитьШтрихкодыТаблицуШтрихкодовУпаковок_2019(ШтрихкодыУпаковок, СведенияОТоваре);
		// Конец ГосИс.МОТП
		
	КонецЦикла;
	
	// ГосИС.МОТП
	ЭлектронноеВзаимодействиеИСМП.СвернутьТаблицуШтрихкодовУпаковок(ШтрихкодыУпаковок);
	ДокументОбъект.ШтрихкодыУпаковок.Загрузить(ШтрихкодыУпаковок);
	// Конец ГосИс.МОТП
	
	ДокументОбъект.УчитыватьНДС = УчетНДС.ПрименяетсяНДС(ДокументОбъект.Дата,
										ДокументОбъект.Организация,
										ДокументОбъект.Магазин,
										ДокументОбъект.Склад);
	
	Если ОблагаетсяНДСУПокупателя Тогда
		ДокументОбъект.СуммаДокумента = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных,
			"ВсегоКОплате.ВсегоСтоимостьТоваровБезНалога");
	Иначе
		ДокументОбъект.СуммаДокумента = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных,
			"ВсегоКОплате.ВсегоСтоимостьТоваровСНалогом");
	КонецЕсли;
	
	РежимЗаписиПроведение = Истина;
	
	Если Записывать Тогда
		ЗаписатьДокумент(ДокументОбъект, РежимЗаписиПроведение);
		СсылкаНаВладельца = ДокументОбъект.Ссылка;
	Иначе // если функция вызвана из формы "Обработки.ОбменСКонтрагентами.ЗагрузкаПросмотрЭлектронногоДокумента"
		СсылкаНаВладельца = ДокументОбъект;
	КонецЕсли;
	
КонецПроцедуры

// См. ОбменСКонтрагентамиПереопределяемый.НайтиСоздатьУПДСчетФактуру_2019.
Процедура НайтиСоздатьУПДСчетФактуру_2019(ДеревоДанных, СсылкаНаВладельца = Неопределено, СпособОбработки = "", ОписаниеОшибки = "") Экспорт
	
	ТекущаяДатаСеанса = ТекущаяДатаСеанса();
	
	Если ЗначениеЗаполнено(СсылкаНаВладельца) 
		И ТипЗнч(СсылкаНаВладельца) = Тип("ДокументСсылка.СчетФактураПолученный") Тогда
		ДокументОбъект = СсылкаНаВладельца.ПолучитьОбъект();
	Иначе
		ДокументОбъект = Документы.СчетФактураПолученный.СоздатьДокумент();
		ДокументОбъект.Заполнить(Неопределено);
		ДокументОбъект.Дата = ТекущаяДатаСеанса;
	КонецЕсли;
	
	ДокументОбъект.ПолученВЭлектронномВиде = Истина;
	
	ВидСчетаФактуры = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, "ВидСчетаФактуры");
	Если ВидСчетаФактуры = "Авансовый" Тогда
		ДокументОбъект.КодВидаОперации = "02";;
	Иначе
		ДокументОбъект.КодВидаОперации = "01";;
	КонецЕсли;
	
	ДокументОбъект.Номер = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, "НомерДокумента");
	ДокументОбъект.ДатаСоставления  = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, "ДатаДокумента");
	
	ДокументОбъект.Исправление = Ложь;
	НомерИсправления = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, "НомерИсправления");
	Если ТипЗнч(НомерИсправления) = Тип("Число") Тогда
		Если НомерИсправления > 0 Тогда
			ДокументОбъект.НомерИсправления = НомерИсправления;
			ДокументОбъект.Исправление = Истина;
			ДокументОбъект.ДатаИсправления  = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(
				ДеревоДанных, "ДатаИсправления");
		КонецЕсли;
	ИначеЕсли ЗначениеЗаполнено(НомерИсправления) Тогда
		ДокументОбъект.НомерИсправления = НомерИсправления;
		ДокументОбъект.Исправление = Истина;
		ДокументОбъект.ДатаИсправления  = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(
			ДеревоДанных, "ДатаИсправления");
	КонецЕсли;
		
	ДокументОбъект.Валюта = "RUB";
	
	СведенияОПродавце = ДеревоДанных.Строки.Найти("СведенияОПродавце", "ПолныйПуть");
	СведенияОПокупателе = ДеревоДанных.Строки.Найти("СведенияОПокупателе", "ПолныйПуть");
	Если СведенияОПродавце.Строки.Количество() > 1
		ИЛИ СведенияОПокупателе.Строки.Количество() > 1 Тогда
		ОписаниеОшибки = СтрШаблон(НСтр("ru = 'Ошибка загрузки электронного счета-фактуры %1 от %2.'"), 
			ДокументОбъект.НомерЭД, Формат(ДокументОбъект.ДатаЭД,"ДЛФ=D")) + Символы.ПС
			+ НСтр("ru = 'Загрузка сводных счетов-фактур не поддерживается.'");
		Возврат;
	КонецЕсли;
	
	Для каждого СтрокаПродавца Из СведенияОПродавце.Строки Цикл
		ДокументОбъект.Контрагент = КонтрагентПоДаннымЭД(СтрокаПродавца, "СведенияОПродавце.НомерСтроки");
		Прервать;
	КонецЦикла;
	Для каждого СтрокаПокупателя Из СведенияОПокупателе.Строки Цикл
		ДокументОбъект.Организация = ОрганизацияПоДаннымЭД(СтрокаПокупателя, "СведенияОПокупателе.НомерСтроки");
		Прервать;
	КонецЦикла;
	
	ОснованияОтгрузки = ДеревоДанных.Строки.Найти("ОснованиеОтгрузкиТоваров", "ПолныйПуть");
	
	ДокументОбъект.ДокументыОснования.Очистить();
	ДокументыОснованияСчетаФактуры = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, 
		"ДокументыОснованияСчетаФактуры");
	Если ЗначениеЗаполнено(ДокументыОснованияСчетаФактуры) Тогда
		ДокументОбъект.ДокументыОснования.Очистить();
		Для Каждого ДокументОснования Из ДокументыОснованияСчетаФактуры Цикл
			Если ТипЗнч(ДокументОснования) = Тип("ДокументСсылка.СчетФактураПолученный") Тогда
				ДокументОбъект.СчетФактураОснование = ДокументОснования;
			Иначе
				СтрокаТаблицы = ДокументОбъект.ДокументыОснования.Добавить();
				СтрокаТаблицы.ДокументОснование = ДокументОснования;
			КонецЕсли;
			
			Если Не ЗначениеЗаполнено(ДокументОбъект.СчетФактураОснование) И ДокументОбъект.Исправление Тогда
				ДокументОбъект.СчетФактураОснование = ЗакупкиВызовСервера.СчетФактураДокумента(ДокументыОснованияСчетаФактуры[0], ДокументОбъект.Организация, Ложь, Истина);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	РежимЗаписиПроведение = Истина;
	
	ЗаписатьДокумент(ДокументОбъект, РежимЗаписиПроведение);
	СсылкаНаВладельца = ДокументОбъект.Ссылка;
	
КонецПроцедуры

// См. ОбменСКонтрагентамиПереопределяемый.ЗаполнитьДанныеУПД2019_ИнформацияПродавца.
Процедура ЗаполнитьДанныеУПД2019_ИнформацияПродавца(Основание, Настройки, ДеревоДанных, Описание, Отказ) Экспорт
	
	ТипыДокументов = ОбменСКонтрагентами.ТипыДокументов();
	ТипДокумента = Настройки.ТипДокумента;
	
	СтруктураДанных = Документы[Основание.Метаданные().Имя].ПолучитьДанныеДляЭД(Основание);
	
	ВыборкаШапки = СтруктураДанных.ВыборкаШапки;
	ВыборкаШапки.Следующий();
	
	НомерСтроки = 1;
	ВыборкаТоваров = СтруктураДанных.ВыборкаТоваров;
	Штрихкоды = СтруктураДанных.Штрихкоды;
	
	СведенияОПродавце = Неопределено;
	Если ЗначениеЗаполнено(ВыборкаШапки.Организация) Тогда
		ЭлектронноеВзаимодействиеПереопределяемый.ПолучитьДанныеЮрФизЛица(ВыборкаШапки.Организация, СведенияОПродавце);
		
		Если ТипЗнч(ВыборкаШапки.Ссылка) <> Тип("ДокументСсылка.СчетФактураВыданный")
			И ЗначениеЗаполнено(ВыборкаШапки.БанковскийСчетОрганизации) Тогда
			ЗаполнитьРеквизитыБанковскогоСчета(СведенияОПродавце, ВыборкаШапки.БанковскийСчетОрганизации,
				"БанковскиеСчета");
		КонецЕсли;
		
		МодульЭлектронноеВзаимодействие = ОбщегоНазначения.ОбщийМодуль("ЭлектронноеВзаимодействие");
		ТаблицаПродавцов = МодульЭлектронноеВзаимодействие.ДанныеЭлементаДереваЭлектронногоДокумента(
			ДеревоДанных, "СведенияОПродавце");
		ТаблицаПродавцов.Колонки.Добавить("СведенияОбУчастнике");
		ДанныеПродавца = ПолучитьДанныеУчастникаУПД(СведенияОПродавце);
		СтрокаПродавца = ТаблицаПродавцов.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаПродавца, ДанныеПродавца);
		ДобавитьОбработкуОшибокВТаблицуУчастниковУПД(ТаблицаПродавцов);
		ЭлектронноеВзаимодействие.ЗагрузитьТаблицуВДерево(ДеревоДанных, ТаблицаПродавцов, "СведенияОПродавце");
		
		СоставительДокументаНаименование = СведенияОПродавце.ПолноеНаименование
			+ ?(ЗначениеЗаполнено(СведенияОПродавце.КПП),
				СтрШаблон(НСтр("ru = ', ИНН/КПП %1/%2'"), СведенияОПродавце.ИНН, СведенияОПродавце.КПП),
				СтрШаблон(НСтр("ru = ', ИНН %1'"), СведенияОПродавце.ИНН));
		
		ПараметрыОбработкиОшибок = ЭлектронноеВзаимодействиеКлиентСервер.НовыеПараметрыОбработкиОшибки(ВыборкаШапки.Ссылка, 
			"Объект.Организация");
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
			"СоставительДокументаНаименование", СоставительДокументаНаименование, ПараметрыОбработкиОшибок);
	КонецЕсли;
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "НомерДокумента", ВыборкаШапки.Номер,
		ПараметрыОбработкиОшибок);
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ДатаДокумента",  ВыборкаШапки.Дата,
		ПараметрыОбработкиОшибок);
	
	Если ТипЗнч(Основание) = Тип("ДокументСсылка.ВозвратТоваровПоставщику") Тогда
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ДокументыОснованияДокументаОтгрузки",
		ВыборкаШапки.ДокументОснование);
	КонецЕсли;
	
	Если ТипЗнч(Основание) = Тип("ДокументСсылка.ПеремещениеТоваров") Тогда
		Если ЗначениеЗаполнено(ВыборкаШапки.СведенияОВыбытииМаркированныхТоваров) Тогда
			ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "СведенияОВыбытииМаркированныхТоваров",
				ВыборкаШапки.СведенияОВыбытииМаркированныхТоваров);
		КонецЕсли;
	КонецЕсли;
	
	СведенияОПокупателе = Неопределено;
	Если ЗначениеЗаполнено(ВыборкаШапки.Контрагент) Тогда
		ЭлектронноеВзаимодействиеПереопределяемый.ПолучитьДанныеЮрФизЛица(ВыборкаШапки.Контрагент, СведенияОПокупателе);
		
		Если ТипЗнч(ВыборкаШапки.Ссылка) = Тип("ДокументСсылка.ВозвратТоваровПоставщику")
			И ЗначениеЗаполнено(ВыборкаШапки.БанковскийСчетКонтрагента) Тогда
			ЗаполнитьРеквизитыБанковскогоСчета(СведенияОПокупателе, ВыборкаШапки.БанковскийСчетКонтрагента,
				"БанковскиеСчета");
		КонецЕсли;
		
		МодульЭлектронноеВзаимодействие = ОбщегоНазначения.ОбщийМодуль("ЭлектронноеВзаимодействие");
		ТаблицаПокупателей = МодульЭлектронноеВзаимодействие.ДанныеЭлементаДереваЭлектронногоДокумента(
			ДеревоДанных, "СведенияОПокупателе");
		ТаблицаПокупателей.Колонки.Добавить("СведенияОбУчастнике");
		ДанныеПокупателя = ПолучитьДанныеУчастникаУПД(СведенияОПокупателе);
		СтрокаПокупателя = ТаблицаПокупателей.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаПокупателя, ДанныеПокупателя);
		ДобавитьОбработкуОшибокВТаблицуУчастниковУПД(ТаблицаПокупателей);
		ЭлектронноеВзаимодействие.ЗагрузитьТаблицуВДерево(ДеревоДанных, ТаблицаПокупателей, "СведенияОПокупателе");
	КонецЕсли;
	
	// Обработка ошибки с указанием расширенного текста сообщения вместо параметров обработки ошибки.
	ТекстОшибки = НСтр("ru = 'Не удалось заполнить код валюты документа'");
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ВалютаКод",
		ВыборкаШапки.ВалютаКод, ТекстОшибки);
	
	МодульЭлектронноеВзаимодействие = ОбщегоНазначения.ОбщийМодуль("ЭлектронноеВзаимодействие");
	ТаблицаГрузоотправителей = МодульЭлектронноеВзаимодействие.ДанныеЭлементаДереваЭлектронногоДокумента(
		ДеревоДанных, "СведенияОГрузоотправителе");
	ТаблицаГрузоотправителей.Колонки.Добавить("СведенияОбУчастнике");
	
	Если ЗначениеЗаполнено(ВыборкаШапки.Грузоотправитель) Тогда
		СведенияОГрузоотправителе = Неопределено; 
		ЭлектронноеВзаимодействиеПереопределяемый.ПолучитьДанныеЮрФизЛица(ВыборкаШапки.Грузоотправитель, 
			СведенияОГрузоотправителе);
		СведенияОГрузоотправителе.Вставить("Грузоотправитель", Истина);
		ДанныеГрузоотправителя = ПолучитьДанныеУчастникаУПД(СведенияОГрузоотправителе);
		СтрокаГрузоотправителя = ТаблицаГрузоотправителей.Добавить();
		СтрокаГрузоотправителя.Грузоотправитель = ДанныеГрузоотправителя;
		СтрокаГрузоотправителя.СведенияОбУчастнике = СведенияОГрузоотправителе;
	Иначе
		ТаблицаГрузоотправителей.Добавить().ОнЖе = Истина;
	КонецЕсли;
	
	ДобавитьОбработкуОшибокВТаблицуУчастниковУПД(ТаблицаГрузоотправителей, "Грузоотправитель");
	ЭлектронноеВзаимодействие.ЗагрузитьТаблицуВДерево(ДеревоДанных, ТаблицаГрузоотправителей, "СведенияОГрузоотправителе");
	
	МодульЭлектронноеВзаимодействие = ОбщегоНазначения.ОбщийМодуль("ЭлектронноеВзаимодействие");
	ТаблицаГрузополучателей = МодульЭлектронноеВзаимодействие.ДанныеЭлементаДереваЭлектронногоДокумента(
		ДеревоДанных, "СведенияОГрузополучателе");
	ТаблицаГрузополучателей.Колонки.Добавить("СведенияОбУчастнике");
	
	Если ЗначениеЗаполнено(ВыборкаШапки.Грузополучатель) Тогда
		СведенияОГрузополучателе = Неопределено; 
		ЭлектронноеВзаимодействиеПереопределяемый.ПолучитьДанныеЮрФизЛица(ВыборкаШапки.Грузополучатель, 
			СведенияОГрузополучателе);
		СведенияОГрузополучателе.Вставить("Грузополучатель", Истина);
		ДанныеГрузополучателя = ПолучитьДанныеУчастникаУПД(СведенияОГрузополучателе);
		ЗаполнитьЗначенияСвойств(ТаблицаГрузополучателей.Добавить(), ДанныеГрузополучателя);
	Иначе
		СведенияОПокупателе.Вставить("Грузополучатель", Истина);
		ДанныеГрузополучателя = ПолучитьДанныеУчастникаУПД(СведенияОПокупателе);
		ЗаполнитьЗначенияСвойств(ТаблицаГрузополучателей.Добавить(), ДанныеГрузополучателя);
	КонецЕсли;
	
	ДобавитьОбработкуОшибокВТаблицуУчастниковУПД(ТаблицаГрузополучателей);
	ЭлектронноеВзаимодействие.ЗагрузитьТаблицуВДерево(ДеревоДанных, ТаблицаГрузополучателей, "СведенияОГрузополучателе");
	
	// ДокументОбОтгрузке (5а)
	КоличествоТоваров = ВыборкаТоваров.Количество();
	Если КоличествоТоваров = 1 Тогда
		ДокументОбОтгрузке = СтрШаблон(НСтр("ru = '№ п/п 1 № %1 от %2'"),
				ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(ВыборкаШапки.Номер),
				Формат(ВыборкаШапки.Дата, "ДЛФ=D"));
	Иначе
		ДокументОбОтгрузке = СтрШаблон(НСтр("ru = '№ п/п 1-%3 № %1 от %2'"),
				ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(ВыборкаШапки.Номер),
				Формат(ВыборкаШапки.Дата, "ДЛФ=D"),
				КоличествоТоваров);
	КонецЕсли;
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ДокументОбОтгрузке",
			ДокументОбОтгрузке, ПараметрыОбработкиОшибок);
	
	//Строка 8 УПД
	Если ЗначениеЗаполнено(ВыборкаШапки.ОснованиеОтгрузкиТоваров) Тогда
		
		ОснованиеОтгрузкиТоваров = Новый ТаблицаЗначений;
		ОснованиеОтгрузкиТоваров.Колонки.Добавить("ДокументНаименование");
		ОснованиеОтгрузкиТоваров.Колонки.Добавить("ДокументДата");
		
		НоваяСтрока = ОснованиеОтгрузкиТоваров.Добавить();
		НоваяСтрока.ДокументНаименование = ВыборкаШапки.ОснованиеОтгрузкиТоваров;
		НоваяСтрока.ДокументДата = ВыборкаШапки.ДатаОснованияОтгрузкиТоваров;
		
		// Дополним таблицу оснований параметрами обработки ошибок.
		ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(НоваяСтрока,
			"ДокументДата", ВыборкаШапки.Ссылка, "Объект.ДатаОснованияОтгрузкиТоваров");
		
		ЭлектронноеВзаимодействие.ЗагрузитьТаблицуВДерево(ДеревоДанных, ОснованиеОтгрузкиТоваров, "ОснованиеОтгрузкиТоваров");
		
	КонецЕсли;
	
	// Данные документа подтверждения отгрузки
	ДокументыПодтвержденияОтгрузки = Новый ТаблицаЗначений;
	ДокументыПодтвержденияОтгрузки.Колонки.Добавить("Наименование");
	ДокументыПодтвержденияОтгрузки.Колонки.Добавить("Номер");
	ДокументыПодтвержденияОтгрузки.Колонки.Добавить("Дата");
	СтрокаДокументыПодтвержденияОтгрузки = ДокументыПодтвержденияОтгрузки.Добавить();
	СтрокаДокументыПодтвержденияОтгрузки.Номер        = ВыборкаШапки.Номер;
	СтрокаДокументыПодтвержденияОтгрузки.Дата         = ВыборкаШапки.Дата;
	СтрокаДокументыПодтвержденияОтгрузки.Наименование = "Реализация (акт, накладная, УПД)";
	ЭлектронноеВзаимодействие.ЗагрузитьТаблицуВДерево(
		ДеревоДанных, ДокументыПодтвержденияОтгрузки, "ДокументыПодтвержденияОтгрузки");
	
	Если Не ТипДокумента = ТипыДокументов.СчетФактура Тогда
		
		Если ЗначениеЗаполнено(ВыборкаШапки.Перевозчик) Тогда
			СведенияОПеревозчике = Неопределено; 
			ЭлектронноеВзаимодействиеПереопределяемый.ПолучитьДанныеЮрФизЛица(ВыборкаШапки.Перевозчик, СведенияОПеревозчике);
			ЗаполнитьДанныеУчастникаУПД(ДеревоДанных, СведенияОПеревозчике, "СведенияОПеревозчике", "ПочтовыйАдрес");
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ВыборкаШапки.ДатаОтгрузки) Тогда
			ПараметрыОбработкиОшибок = ЭлектронноеВзаимодействиеКлиентСервер.НовыеПараметрыОбработкиОшибки(ВыборкаШапки.Ссылка, 
			"Объект.ДатаОтгрузки");
			ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ДатаОтгрузкиТоваров",
			ВыборкаШапки.ДатаОтгрузки, ПараметрыОбработкиОшибок);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ВыборкаШапки.СведенияОТранспортировкеИГрузе) Тогда
			ПараметрыОбработкиОшибок = ЭлектронноеВзаимодействиеКлиентСервер.НовыеПараметрыОбработкиОшибки(ВыборкаШапки.Ссылка, 
			"Объект.СведенияОТранспортировкеИГрузе");
			ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "СведенияОТранспортировке",
			ВыборкаШапки.СведенияОТранспортировкеИГрузе, ПараметрыОбработкиОшибок);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ВыборкаШапки.НомерТранспортнойНакладной)
			ИЛИ ЗначениеЗаполнено(ВыборкаШапки.ДатаТранспортнойНакладной) Тогда
			
			ТранспортнаяНакладная = Новый ТаблицаЗначений;
			ТранспортнаяНакладная.Колонки.Добавить("ТранспортнаяНакладнаяНомер");
			ТранспортнаяНакладная.Колонки.Добавить("ТранспортнаяНакладнаяДата");
			
			НоваяСтрока = ТранспортнаяНакладная.Добавить();
			НоваяСтрока.ТранспортнаяНакладнаяНомер = ВыборкаШапки.НомерТранспортнойНакладной;
			НоваяСтрока.ТранспортнаяНакладнаяДата  = ВыборкаШапки.ДатаТранспортнойНакладной;
			
			// Дополним таблицу транспортных накладных параметрами обработки ошибок.
			ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(НоваяСтрока,
			"ТранспортнаяНакладнаяНомер", ВыборкаШапки.Ссылка, "Объект.НомерТранспортнойНакладной");
			ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(НоваяСтрока,
			"ТранспортнаяНакладнаяДата", ВыборкаШапки.Ссылка, "Объект.ДатаТранспортнойНакладной");
			
			ЭлектронноеВзаимодействие.ЗагрузитьТаблицуВДерево(ДеревоДанных, ТранспортнаяНакладная, "ТранспортнаяНакладная");
			
		КонецЕсли;
	КонецЕсли;
	
	Если Не ТипДокумента = ТипыДокументов.ТоварнаяНакладная Тогда
		ВидСчетаФактуры = "Реализация";
		ОбстоятельстваФормированияСФ = "1";
		
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
			"ДополнительныеСведенияОбУчастниках.ОбстоятельстваФормированияСФ", 
			ОбстоятельстваФормированияСФ, ПараметрыОбработкиОшибок);
			
		СсылкаНаСчетФактуру = Документы.СчетФактураВыданный.ПустаяСсылка();
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ВидСчетаФактуры", ВидСчетаФактуры);
		Если ТипЗнч(Основание) = Тип("ДокументСсылка.СчетФактураВыданный") Тогда
			ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "СсылкаСчетаФактуры", Основание);
			СсылкаНаСчетФактуру = Основание;
		Иначе
			РеквизитыСчетФактуры = Новый Структура;
			Документы.СчетФактураВыданный.СчетаФактурыПоОснованию(Основание, Основание.Организация, РеквизитыСчетФактуры);
			Если РеквизитыСчетФактуры.Свойство("Ссылка") И ЗначениеЗаполнено(РеквизитыСчетФактуры.Ссылка) Тогда
				ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "СсылкаСчетаФактуры", РеквизитыСчетФактуры.Ссылка);
				Описание.Основания.Добавить(РеквизитыСчетФактуры.Ссылка);
				СсылкаНаСчетФактуру = РеквизитыСчетФактуры.Ссылка;
			КонецЕсли;
			Если ТипЗнч(Основание) = Тип("ДокументСсылка.ПеремещениеТоваров") Тогда
				РеквизитыСчетФактуры = Новый Структура;
				Документы.СчетФактураПолученный.СчетаФактурыПоОснованию(Основание, Основание.ОрганизацияПолучатель, РеквизитыСчетФактуры);
				Если РеквизитыСчетФактуры.Свойство("Ссылка") И ЗначениеЗаполнено(РеквизитыСчетФактуры.Ссылка) Тогда
					Описание.Основания.Добавить(РеквизитыСчетФактуры.Ссылка);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СсылкаНаСчетФактуру) Тогда
			СтруктураРеквизитов = Новый Структура("Номер,Дата,Исправление,НомерИсправления,СчетФактураОснование");
			РеквизитыСчетФактуры = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СсылкаНаСчетФактуру, СтруктураРеквизитов);
			
			Если РеквизитыСчетФактуры.Исправление Тогда
				НомерДокумента = РеквизитыСчетФактуры.СчетФактураОснование.Номер;
				ДатаДокумента = РеквизитыСчетФактуры.СчетФактураОснование.Дата;
				
				НомерИсправления = Число(РеквизитыСчетФактуры.НомерИсправления);
				ДатаИсправления = РеквизитыСчетФактуры.Дата;
				
				ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "НомерИсправления", НомерИсправления,
					ПараметрыОбработкиОшибок);
				ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ДатаИсправления", ДатаИсправления,
					ПараметрыОбработкиОшибок);
			Иначе
				НомерДокумента = РеквизитыСчетФактуры.Номер;
				ДатаДокумента = РеквизитыСчетФактуры.Дата;
			КонецЕсли;
			
			НомерДокумента = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(НомерДокумента, Ложь, Ложь);
			Если Лев(НомерДокумента, 1) = НСтр("ru='И'") Тогда
				НомерДокумента = Прав(НомерДокумента, СтрДлина(НомерДокумента)-1);
			КонецЕсли;
			
			ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "НомерДокумента", НомерДокумента,
				ПараметрыОбработкиОшибок);

			ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ДатаДокумента", ДатаДокумента,
				ПараметрыОбработкиОшибок);
				
			КонецЕсли;
		
	КонецЕсли;
	
	СведенияОТоварах = Новый ТаблицаЗначений;
	СведенияОТоварах.Колонки.Добавить("НомерСтроки");
	СведенияОТоварах.Колонки.Добавить("НомерСтрокиИсходногоДокумента");
	СведенияОТоварах.Колонки.Добавить("ТоварКод", Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(255)));
	СведенияОТоварах.Колонки.Добавить("КодВидаТовара", Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(255)));
	СведенияОТоварах.Колонки.Добавить("ТоварНаименование");
	СведенияОТоварах.Колонки.Добавить("ЕдиницаИзмеренияКод");
	СведенияОТоварах.Колонки.Добавить("ЕдиницаИзмеренияНаименование");
	СведенияОТоварах.Колонки.Добавить("Количество", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(26,11)));
	СведенияОТоварах.Колонки.Добавить("ЦенаЗаЕдиницуИзмерения", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(26,11)));
	СведенияОТоварах.Колонки.Добавить("СтоимостьТоваровБезНалога", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(19,2)));
	СведенияОТоварах.Колонки.Добавить("НалоговаяСтавка");
	СведенияОТоварах.Колонки.Добавить("СуммаНалога", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(19,2)));
	СведенияОТоварах.Колонки.Добавить("СтоимостьТоваровСНалогом", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(19,2)));
	СведенияОТоварах.Колонки.Добавить("СуммаАкциза", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(19,2)));
	СведенияОТоварах.Колонки.Добавить("СведенияОТаможеннойДекларации", Новый ОписаниеТипов("ТаблицаЗначений"));
	СведенияОТоварах.Колонки.Добавить("СтранаПроисхожденияНаименование", Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(255)));
	СведенияОТоварах.Колонки.Добавить("Признак", Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(1)));
	СведенияОТоварах.Колонки.Добавить("Номенклатура");
	СведенияОТоварах.Колонки.Добавить("ЕдиницаИзмерения");
	СведенияОТоварах.Колонки.Добавить("ТоварНаименованиеНавигационнаяСсылка");
	СведенияОТоварах.Колонки.Добавить("Сопоставление");
	СведенияОТоварах.Колонки.Добавить("ИдентификаторСтроки");
	СведенияОТоварах.Колонки.Добавить("СведенияОМаркировке");
	СведенияОТоварах.Колонки.Добавить("СведенияОПрослеживаемости");
	СведенияОТоварах.Колонки.Добавить("СведенияОДокументеОтгрузки");
	
	ЕстьТовары = Ложь;
	ЕстьУслуги = Ложь;
	ЕстьРаботы = Ложь;
	ЕстьПрава  = Ложь;
	
	ЗаполнениеКодаТовара = Настройки.ВариантыЗаполненияПолей.ТоварКод;
	
	// ГосИС.МОТП
	ТаблицаКодовМаркировки = Неопределено;
	СтруктураДанных.Свойство("Маркировка", ТаблицаКодовМаркировки);
	// Конец ГосИС.МОТП
	
	Пока ВыборкаТоваров.Следующий() Цикл
		
		НоваяСтрока = СведенияОТоварах.Добавить();
		НоваяСтрока.НомерСтроки = НомерСтроки;
		НоваяСтрока.НомерСтрокиИсходногоДокумента = ВыборкаТоваров.НомерСтроки;
		НомерСтроки = НомерСтроки + 1;
		
		НоваяСтрока.ТоварКод                     = ВыборкаТоваров.НоменклатураКод;
		НоваяСтрока.КодВидаТовара                = ВыборкаТоваров.КодВидаТовара;
		НоваяСтрока.ТоварНаименование            = ПредставлениеНоменклатурыДляЭД(ВыборкаТоваров);
		НоваяСтрока.ЕдиницаИзмеренияКод          = ВыборкаТоваров.ЕдиницаИзмеренияКод;
		НоваяСтрока.ЕдиницаИзмеренияНаименование = ВыборкаТоваров.ЕдиницаИзмеренияНаименование;
		НоваяСтрока.Количество                   = ВыборкаТоваров.Количество;
		НоваяСтрока.ЦенаЗаЕдиницуИзмерения       = ?(ВыборкаТоваров.Количество = 0, 0,
			Окр(ВыборкаТоваров.СуммаБезНДС / ВыборкаТоваров.Количество, 2));
		НоваяСтрока.СтоимостьТоваровБезНалога    = ВыборкаТоваров.СуммаБезНДС;
		НоваяСтрока.НалоговаяСтавка          = ВыборкаТоваров.СтавкаНДС;
		НоваяСтрока.СуммаНалога              = ВыборкаТоваров.СуммаНДС;
		НоваяСтрока.СтоимостьТоваровСНалогом = ВыборкаТоваров.СуммаСНДС;
		
		НоваяСтрока.Номенклатура = ВыборкаТоваров.Номенклатура;
		НоваяСтрока.ЕдиницаИзмерения = ВыборкаТоваров.ЕдиницаИзмерения;
		НоваяСтрока.ТоварНаименованиеНавигационнаяСсылка = ПолучитьНавигационнуюСсылку(
			ВыборкаТоваров.Номенклатура, "Наименование");
			
		Если ВыборкаТоваров.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Товар
			ИЛИ ВыборкаТоваров.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.ПодарочныйСертификат Тогда
			ЕстьТовары = Истина;
			НоваяСтрока.Признак = "1";
			
		ИначеЕсли ВыборкаТоваров.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Услуга Тогда
			ЕстьУслуги = Истина;
			НоваяСтрока.Признак = "3";
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ВыборкаТоваров.НомерГТД) Тогда
			СведенияОТаможеннойДекларации = Новый ТаблицаЗначений;
			СведенияОТаможеннойДекларации.Колонки.Добавить("СтранаПроисхожденияКод",
				Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(3)));
			СведенияОТаможеннойДекларации.Колонки.Добавить("ТаможеннаяДекларацияНомер",
				Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(29)));
			СтрокаТД = СведенияОТаможеннойДекларации.Добавить();
			СтрокаТД.ТаможеннаяДекларацияНомер = СокрЛП(Строка(ВыборкаТоваров.НомерГТД));
			СтрокаТД.СтранаПроисхожденияКод    = ВыборкаТоваров.СтранаПроисхожденияКод;
			НоваяСтрока.СведенияОТаможеннойДекларации   = СведенияОТаможеннойДекларации;
			НоваяСтрока.СтранаПроисхожденияНаименование = ВыборкаТоваров.СтранаПроисхожденияНаименование;
		КонецЕсли;
		
		Если ВыборкаТоваров.ПрослеживаемыйТовар = Истина Тогда
			
			СведенияОПрослеживаемости = Новый ТаблицаЗначений;
			СведенияОПрослеживаемости.Колонки.Добавить("НомерТовара",
				Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(29)));
			СведенияОПрослеживаемости.Колонки.Добавить("ЕдиницаИзмеренияКод",
				Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(4)));
			СведенияОПрослеживаемости.Колонки.Добавить("ЕдиницаИзмеренияНаименование",
				Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(255)));
			СведенияОПрослеживаемости.Колонки.Добавить("Количество",
				Новый ОписаниеТипов("Число",, Новый КвалификаторыЧисла(26, 11, ДопустимыйЗнак.Неотрицательный)));
			СведенияОПрослеживаемости.Колонки.Добавить("КоличествоУчетное",
				Новый ОписаниеТипов("Число",, Новый КвалификаторыЧисла(15, 3, ДопустимыйЗнак.Неотрицательный)));
			СведенияОПрослеживаемости.Колонки.Добавить("СтоимостьБезНДС",
				Новый ОписаниеТипов("Число",, Новый КвалификаторыЧисла(19, 2, ДопустимыйЗнак.Неотрицательный)));
				
			СтрокаПрослеживаемости = СведенияОПрослеживаемости.Добавить();
			СтрокаПрослеживаемости.НомерТовара 					= СокрЛП(Строка(ВыборкаТоваров.НомерГТД));
			СтрокаПрослеживаемости.ЕдиницаИзмеренияКод 			= ВыборкаТоваров.ЕдиницаИзмеренияТНВЭДКод;
			СтрокаПрослеживаемости.ЕдиницаИзмеренияНаименование = ВыборкаТоваров.ЕдиницаИзмеренияТНВЭДНаименование;
			СтрокаПрослеживаемости.Количество 					= ВыборкаТоваров.КоличествоПоРНПТ;
			СтрокаПрослеживаемости.КоличествоУчетное			= ВыборкаТоваров.Количество;
			
			СтруктураПараметровРНПТ = УчетПрослеживаемыхТоваровРТ.ПолучитьСтруктуруПараметровРНПТ();
			ЗаполнитьЗначенияСвойств(СтруктураПараметровРНПТ, ВыборкаТоваров);
			СтруктураПараметровРНПТ.КоличествоРНПТ = ВыборкаТоваров.КоличествоПоРНПТ;
			СтрокаПрослеживаемости.СтоимостьБезНДС = УчетПрослеживаемыхТоваровРТ.ПолучитьСтоимостьРНПТ(СтруктураПараметровРНПТ);
			
			НоваяСтрока.СведенияОПрослеживаемости = СведенияОПрослеживаемости;
		КонецЕсли;
		
		// ГосИС.МОТП
		ЭлектронноеВзаимодействиеИСМП.ЗаполнитьСведенияОМаркировке_2019(НоваяСтрока, ВыборкаТоваров, ТаблицаКодовМаркировки);
		// Конец ГосИС.МОТП
		
		НоваяСтрока.Сопоставление = СопоставлениеНоменклатурыДляЭлектронногоДокументаФНС(ВыборкаТоваров, Штрихкоды);
		
		Если ЗаполнениеКодаТовара = "Артикул" Тогда
			НоваяСтрока.ТоварКод = ВыборкаТоваров.НоменклатураАртикул;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(НоваяСтрока.ЕдиницаИзмерения) И НоваяСтрока.ЕдиницаИзмеренияКод = "0000" 
			И ТипЗнч(НоваяСтрока.ЕдиницаИзмерения) = Тип("Строка") Тогда
			ЗаполнитьКодЕдиницыИзмеренияПоКлассификатору(НоваяСтрока);
		КонецЕсли;
		
	КонецЦикла;
	
	ТекстОшибки = НСтр("ru = 'Не удалось заполнить итоговые стоимостные показатели. Возможные причины:
	|	- не заполнена табличная часть ""Товары""
	|	- не заполнены колонки ""Сумма"", ""НДС"", ""Количество""'");
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
		"ВсегоКОплате.ВсегоСтоимостьТоваровБезНалога", СведенияОТоварах.Итог("СтоимостьТоваровБезНалога"), ТекстОшибки);
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
		"ВсегоКОплате.ВсегоСтоимостьТоваровСНалогом", СведенияОТоварах.Итог("СтоимостьТоваровСНалогом"), ТекстОшибки);
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
		"ВсегоКОплате.ВсегоСуммаНалога", СведенияОТоварах.Итог("СуммаНалога"), ТекстОшибки);
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
		"ВсегоКОплате.ВсегоКоличество", СведенияОТоварах.Итог("Количество"), ТекстОшибки);
	
	// Обработка ошибки с открытием формы по навигационной ссылке.
	ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезНавигационнуюСсылку(СведенияОТоварах,
		"ТоварНаименование", "ТоварНаименованиеНавигационнаяСсылка");
	ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезОткрытиеФормы(СведенияОТоварах,
		"ТоварНаименование", "Справочник.Номенклатура.ФормаОбъекта",, Новый Структура("Ключ", "Номенклатура"));
	
	// Обработка ошибки через механизм сообщений пользователю.
	ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(СведенияОТоварах,
		"ТоварКод", "Номенклатура", "Объект.Код");
	ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(СведенияОТоварах,
		"ТоварНаименование", "Номенклатура", "Объект.НаименованиеПолное");
	ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(СведенияОТоварах,
		"Количество", ВыборкаТоваров.Ссылка, "Объект.Товары.Количество",, "НомерСтрокиИсходногоДокумента");
	ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(СведенияОТоварах,
		"ЦенаЗаЕдиницуИзмерения", ВыборкаТоваров.Ссылка, "Объект.Товары.Цена",, "НомерСтрокиИсходногоДокумента");
	ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(СведенияОТоварах,
		"СтоимостьТоваровБезНалога", ВыборкаТоваров.Ссылка, "Объект.Товары.Сумма",, "НомерСтрокиИсходногоДокумента");
	ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(СведенияОТоварах,
		"СуммаНалога", ВыборкаТоваров.Ссылка, "Объект.Товары.СуммаНДС",, "НомерСтрокиИсходногоДокумента");
	ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(СведенияОТоварах,
		"ЕдиницаИзмеренияНаименование", "ЕдиницаИзмерения", "Объект.Наименование");
	ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(СведенияОТоварах,
		"ЕдиницаИзмеренияКод", "ЕдиницаИзмерения", "Объект.Код");
	ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(СведенияОТоварах,
		"Признак", "Номенклатура", "Объект.ВидНоменклатуры");
	
	// Обработка ошибки через упрощенный механизм
	ТекстОшибки = НСтр("ru = 'для формирования электронного документа необходимо указать налоговую ставку'");
	ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(СведенияОТоварах,
		"НалоговаяСтавка",,, ТекстОшибки);
	
	ЭлектронноеВзаимодействие.ЗагрузитьТаблицуВДерево(ДеревоДанных, СведенияОТоварах, "СведенияОТоварах");
	
	ТекстОшибки = НСтр("ru = 'Возникла ошибка при заполнении страны происхождения в сведениях по ГТД. Возможные причины:
	|	- не заполнена колонка ""Страна происхождения""
	|	- указанной страны нет в классификаторе стран мира'");
	ЭлектронноеВзаимодействие.ДобавитьВРеквизитОбработкуОшибки(ДеревоДанных,
		"СведенияОТоварах.НомерСтроки.СведенияОТаможеннойДекларации.НомерСтроки.СтранаПроисхожденияКод", ТекстОшибки);
	
	Если Не ТипДокумента = ТипыДокументов.СчетФактура Тогда
		
		ТолькоУслуги = Истина;
		СоставСодержания = Новый Массив;
		СоставСодержания.Добавить(НСтр("ru = 'Товары переданы.'"));
		ТолькоУслуги = Ложь;
		СодержаниеОперации = СтрСоединить(СоставСодержания, " ");
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "СодержаниеОперации", СодержаниеОперации);
		
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ТолькоУслуги", ТолькоУслуги);
		
	КонецЕсли;
	
КонецПроцедуры

// См. ОбменСКонтрагентамиПереопределяемый.ЗаполнитьДанныеУПД2019_ИнформацияПокупателя.
Процедура ЗаполнитьДанныеУПД2019_ИнформацияПокупателя(Основания, ДеревоДанных, Отказ) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПоступлениеТоваров.Дата КАК Дата,
	|	ПоступлениеТоваров.Организация.НаименованиеПолное КАК ОрганизацияНаименованиеПолное,
	|	ПоступлениеТоваров.Организация.ИНН КАК ОрганизацияИНН,
	|	ПоступлениеТоваров.Организация.КПП КАК ОрганизацияКПП,
	|	ПоступлениеТоваров.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.ПоступлениеТоваров КАК ПоступлениеТоваров
	|ГДЕ
	|	ПоступлениеТоваров.Ссылка В(&Основания)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СчетФактураПолученный.Дата КАК Дата,
	|	СчетФактураПолученный.Организация.НаименованиеПолное КАК ОрганизацияНаименованиеПолное,
	|	СчетФактураПолученный.Организация.ИНН КАК ОрганизацияИНН,
	|	СчетФактураПолученный.Организация.КПП КАК ОрганизацияКПП
	|ИЗ
	|	Документ.СчетФактураПолученный КАК СчетФактураПолученный
	|ГДЕ
	|	СчетФактураПолученный.Ссылка В(&Основания)";
	
	Запрос.УстановитьПараметр("Основания", Основания);
	
	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	
	ДатаПолученияТоваров = ТекущаяДатаСеанса();
	СодержаниеОперации   = "-";
	СоставительДокумента = "-";
	КодИтога = "1";
	Если НЕ РезультатыЗапроса[0].Пустой() Тогда
		
		Выборка = РезультатыЗапроса[0].Выбрать();
		Выборка.Следующий();
		
		ДатаПолученияТоваров = Выборка.Дата;
		
		СоставительДокумента = ?(ЗначениеЗаполнено(Выборка.ОрганизацияКПП),
			СтрШаблон(НСтр("ru = '%1, ИНН/КПП %2/%3'"),
				Выборка.ОрганизацияНаименованиеПолное, Выборка.ОрганизацияИНН, Выборка.ОрганизацияКПП),
			СтрШаблон(НСтр("ru = '%1, ИНН %2'"),
				Выборка.ОрганизацияНаименованиеПолное, Выборка.ОрганизацияИНН));
		
		СодержаниеОперации = НСтр("ru = 'Товары принял без претензий'");
		
	ИначеЕсли НЕ РезультатыЗапроса[1].Пустой() Тогда
		
		Выборка = РезультатыЗапроса[1].Выбрать();
		Выборка.Следующий();
		
		ДатаПолученияТоваров = Выборка.Дата;
		
		СоставительДокумента = ?(ЗначениеЗаполнено(Выборка.ОрганизацияКПП),
			СтрШаблон(НСтр("ru = '%1, ИНН/КПП %2/%3'"),
				Выборка.ОрганизацияНаименованиеПолное, Выборка.ОрганизацияИНН, Выборка.ОрганизацияКПП),
			СтрШаблон(НСтр("ru = '%1, ИНН %2'"),
				Выборка.ОрганизацияНаименованиеПолное, Выборка.ОрганизацияИНН));
		
	КонецЕсли;
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
		"СоставительДокументаНаименование", СоставительДокумента);
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "СведенияОПринятииТоваров.ДатаПолученияТоваров", ДатаПолученияТоваров);
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "СведенияОПринятииТоваров.СодержаниеОперации", СодержаниеОперации);
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "СведенияОПринятииТоваров.КодИтога", КодИтога);
	
КонецПроцедуры

#КонецОбласти

#Область РаботаСКонтрагентами

// См. ОбменСКонтрагентамиПереопределяемый.СоздатьКонтрагентаПоРеквизитам.
// Создание контрагента в информационной базе по реквизитам.
//
// Параметры:
//   РеквизитыКонтрагента - Структура - реквизиты необходимые для создания контрагента.
//    * ИНН - Строка - ИНН контрагента.
//    * КПП - Строка - КПП контрагента.
//    * Наименование - Строка - наименование контрагента.
//   Контрагент - СправочникСсылка - ссылка на созданного контрагента.
//   Отказ - Булево - признак ошибки.
//
Процедура СоздатьКонтрагентаПоРеквизитам(Знач РеквизитыКонтрагента, Контрагент, Отказ = Ложь) Экспорт
	
	РеквизитыКонтрагента.Вставить("ЭтоЭлектронныйДокумент", Истина);
	РеквизитыКонтрагента.Вставить("НаименованиеПолное", РеквизитыКонтрагента.Наименование);
	
	Попытка
		
		Объект = Справочники.Контрагенты.СоздатьЭлемент();
		Объект.Заполнить(РеквизитыКонтрагента);
		
		Если СтрДлина(РеквизитыКонтрагента.ИНН) = 10 Тогда
			Объект.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицо;
		ИначеЕсли СтрДлина(РеквизитыКонтрагента.ИНН) = 12 Тогда
			Объект.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ИндивидуальныйПредприниматель;
		КонецЕсли;
		
		Объект.Записать();
		Контрагент = Объект.Ссылка;
	Исключение
		ТекстСообщения = НСтр("ru = 'Ошибка при записи нового элемента справочника Контрагенты.'")
		+ Символы.ПС + НСтр("ru ='Подробности см. в журнале регистрации.'",
		ОбщегоНазначения.КодОсновногоЯзыка());
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,,, Отказ);
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Создание контрагента'", ОбщегоНазначения.КодОсновногоЯзыка()),
		УровеньЖурналаРегистрации.Ошибка, Метаданные.Справочники.Контрагенты,,
		ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
	
КонецПроцедуры

#КонецОбласти

#Область Диагностика

// См. ОбменСКонтрагентамиПереопределяемый.ПриОпределенииДокументовСПоддержкойДиагностикиОшибок.
Процедура ПриОпределенииДокументовСПоддержкойДиагностикиОшибок(СписокДокументов) Экспорт
	
	СписокДокументов.Добавить(Метаданные.Документы.ПеремещениеТоваров);
	СписокДокументов.Добавить(Метаданные.Документы.РеализацияТоваров);
	СписокДокументов.Добавить(Метаданные.Документы.СчетФактураВыданный);
	
КонецПроцедуры

#КонецОбласти

#Область ПрямойОбмен

// Определяет возможность использования прямого обмена в конфигурации.
//
// Параметры:
//  Использовать - Булево - признак использования прямого обмена в конфигурации.
//                          Значение по умолчанию - Ложь.
//
Процедура ИспользоватьПрямойОбмен(Использовать) Экспорт
	
	Использовать = Истина;
	
КонецПроцедуры

#КонецОбласти

// Определяет, включать ли функциональную опцию "Использовать внутренние документы" при обновлении.
//
// Параметры:
//   Включать - Булево - если Истина, функциональная опция будет включена.
//
// Пример:
//  Включать = Истина;
//
Процедура ВключатьФункциональнуюОпциюИспользоватьВнутренниеДокументыЭДО(Включать) Экспорт
	
	Включать = Ложь;
	
КонецПроцедуры

// Определяет, включать ли прием информационной базой уведомлений от сервиса ЭДО.
// В случае, если использование включено, необходимо обеспечить доступность HTTP-сервиса /hs/events/newdocs.
// В частности, при публикации прикладного решения в модели сервиса необходимо опубликовать HTTP-сервис "ЭДО" с basic-авторизацией.
// Логин и пароль пользователя указаны в методе ОбменСКонтрагентами.СоздатьСлужебногоПользователяОповещенийЭДО.
//
// Параметры:
//  Используется - Булево - признак использования уведомлений в прикладном решении
//
Процедура ПриПроверкеИспользованияУведомлений(Используется) Экспорт
	
	Используется = Истина;
	
КонецПроцедуры

// См. ОбменСКонтрагентамиПереопределяемый.ПриПроверкеВозможностиСозданияУчетногоДокумента.
// Выполняется при проверке возможности создания учетного документа по электронному документу.
//
// Параметры:
//  Параметры - Структура - параметры электронного документа, отражаемого в учете.
//   * ЭтоСводныйУПД - Булево - электронный документ имеет формат УПД и содержит несколько продавцов, покупателей и т.п.
//  Отказ - Булево - признак отказа от отражения в учете. Если установить Истина, то документ не отражается в учете (для изменения). По умолчанию Ложь.
//  Описание - Строка - описание причины отказа от отражения в учете.
//
Процедура ПриПроверкеВозможностиСозданияУчетногоДокумента(Знач Параметры, Отказ, Описание) Экспорт
	
	Если Параметры.ЭтоСводныйУПД Тогда
		
		Отказ = Истина;
		Описание = НСтр("ru = 'Отражение в учете сводных счетов-фактур не поддерживается.'");
		
	КонецЕсли;
	
КонецПроцедуры

#Область НастройкиФормированияДокумента

// См. ОбменСКонтрагентамиПереопределяемый.ПриОпределенииВариантовЗаполненияПолейЭлектронныхДокументов.
Процедура ПриОпределенииВариантовЗаполненияПолейЭлектронныхДокументов(ВариантыЗаполненияПолей) Экспорт
	
	ВариантыЗаполненияПолей.УПД_ТоварКод.Добавить("Артикул", НСтр("ru = 'Артикул'"));
	ВариантыЗаполненияПолей.ПередачаТоваров_ТоварКод.Добавить("Артикул", НСтр("ru = 'Артикул'"));
	
КонецПроцедуры

// См. ОбменСКонтрагентамиПереопределяемый.ПолучитьЗапросКонструктораДополнительныхПолейШапки.
// Получает запросы, описывающие документы-источники данных для формирования электронного документа указанного вида.
// Запросы используются для указания пользователем формулы заполнения значений доп. полей по данным источника.
// Запрос должен включать в себя отбор по параметру Ссылка.
//
// Параметры:
//  Параметры - Структура - параметры электронного документа, для которого производится настройка.
//     * ВидЭлектронногоДокумента - ПеречислениеСсылка.ВидыЭД - вид электронного документа. Могут передаваться следующие виды документов:
//                                  АктИсполнитель, ТОРГ12Продавец, СчетФактура, КорректировочныйСчетФактура,
//                                  СоглашениеОбИзмененииСтоимостиОтправитель, АктНаПередачуПрав.
//     * ИспользоватьУПД - Булево - признак использования универсального передаточного документа.
//     * ИспользоватьУКД - Булево - признак использования универсального корректировочного документа.
//  ТекстЗапроса             - Строка - текст запроса, который должен быть использован в конструкторе доп. полей шапки.
//
Процедура ПолучитьЗапросКонструктораДополнительныхПолейШапки(Параметры, ТекстЗапроса) Экспорт
	
	ВидыЭД = ОбменСКонтрагентами.ТипыДокументов();
	Если Параметры.ВидЭлектронногоДокумента = ВидыЭД.УПД Тогда
		
		ТекстЗапроса = ЗапросКонструктораДополнительныхПолейШапкиУПД();
		
	ИначеЕсли Параметры.ВидЭлектронногоДокумента = ВидыЭД.СчетФактура Тогда
		
		ТекстЗапроса = ЗапросКонструктораДополнительныхПолейШапкиСчетаФактуры();
		
	ИначеЕсли Параметры.ВидЭлектронногоДокумента = ВидыЭД.ТоварнаяНакладная Тогда
		
		ТекстЗапроса = ЗапросКонструктораДополнительныхПолейШапкиПервичногоДокумента();
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

Функция СоздатьТаблицуЗначенийДляСведенийОМаркировке()
	
	Таблица = Новый ТаблицаЗначений;
	Таблица.Колонки.Добавить("Ссылка");
	Таблица.Колонки.Добавить("Номенклатура");
	Таблица.Колонки.Добавить("Характеристика");
	Таблица.Колонки.Добавить("ВидУпаковки");
	Таблица.Колонки.Добавить("ВидПродукции");
	Таблица.Колонки.Добавить("Количество");
	Таблица.Колонки.Добавить("ЗначениеШтрихкода");
	Таблица.Колонки.Добавить("Обработан", Новый ОписаниеТипов("Булево"));
	Таблица.Колонки.Добавить("Мультитоварная", Новый ОписаниеТипов("Булево"));
	
	Возврат Таблица;
	
КонецФункции

// См. ОбменСКонтрагентамиПереопределяемый.ПриОпределенииИспользуемыхТиповЭлектронныхДокументов
// Вызывается при определении типов электронных документов, которые можно формировать или отражать в учете в конфигурации.
// Для добавления типа электронного документа в коллекцию необходимо использовать процедуру см. ОбменСКонтрагентами.ДобавитьИспользуемыйТипДокумента.
//
// Параметры:
//  ИспользуемыеТипы - Соответствие - типы актуальных электронных документов.
Процедура ПриОпределенииИспользуемыхТиповЭлектронныхДокументов(ИспользуемыеТипы) Экспорт
	
	ВидыЭД = ОбменСКонтрагентами.ТипыДокументов();
	
	// Для обмена по форматам ФНС.
	ОбменСКонтрагентами.ДобавитьИспользуемыйТипДокумента(ИспользуемыеТипы, ВидыЭД.ТоварнаяНакладная);
	ОбменСКонтрагентами.ДобавитьИспользуемыйТипДокумента(ИспользуемыеТипы, ВидыЭД.АктВыполненныхРабот, Ложь, Ложь);
	ОбменСКонтрагентами.ДобавитьИспользуемыйТипДокумента(ИспользуемыеТипы, ВидыЭД.СчетФактура);
	ОбменСКонтрагентами.ДобавитьИспользуемыйТипДокумента(ИспользуемыеТипы, ВидыЭД.УПД);
	ОбменСКонтрагентами.ДобавитьИспользуемыйТипДокумента(ИспользуемыеТипы, ВидыЭД.КорректировочныйСчетФактура, Истина, Ложь);
	ОбменСКонтрагентами.ДобавитьИспользуемыйТипДокумента(ИспользуемыеТипы, ВидыЭД.АктОРасхождениях, Ложь, Истина);
	
	// Для обмена по форматам CML 2.
	ОбменСКонтрагентами.ДобавитьИспользуемыйТипДокумента(ИспользуемыеТипы, ВидыЭД.КаталогТоваров);
	ОбменСКонтрагентами.ДобавитьИспользуемыйТипДокумента(ИспользуемыеТипы, ВидыЭД.ПрайсЛист, Истина, Ложь);
	ОбменСКонтрагентами.ДобавитьИспользуемыйТипДокумента(ИспользуемыеТипы, ВидыЭД.ЗаказТовара, Ложь, Истина);
	ОбменСКонтрагентами.ДобавитьИспользуемыйТипДокумента(ИспользуемыеТипы, ВидыЭД.ОтчетОПродажахКомиссионногоТовара, Ложь, Истина);
	ОбменСКонтрагентами.ДобавитьИспользуемыйТипДокумента(ИспользуемыеТипы, ВидыЭД.ОтчетОСписанииКомиссионногоТовара, Ложь, Истина);
	
КонецПроцедуры

// См. ОбменСКонтрагентамиПереопределяемый.ЗаполнитьДанныеПередачаТоваров_ИнформацияПродавца.
Процедура ЗаполнитьДанныеПередачаТоваров_ИнформацияПродавца(СсылкаНаОбъект, СтруктураЭД, ДеревоДанных, Отказ) Экспорт 
	
	СтруктураДанных = Документы[СсылкаНаОбъект.Метаданные().Имя].ПолучитьДанныеДляЭД(СсылкаНаОбъект);
	ВыборкаШапки = СтруктураДанных.ВыборкаШапки;
	ВыборкаШапки.Следующий();
	
	ПараметрыОбработкиОшибок = ЭлектронноеВзаимодействиеКлиентСервер.НовыеПараметрыОбработкиОшибки(
		СсылкаНаОбъект, "Объект.НомерЭД");
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "НомерТоварнойНакладной",
		ВыборкаШапки.Номер, ПараметрыОбработкиОшибок);
	
	ПараметрыОбработкиОшибок = ЭлектронноеВзаимодействиеКлиентСервер.НовыеПараметрыОбработкиОшибки(
		СсылкаНаОбъект, "Объект.Дата");
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ДатаТоварнойНакладной",
		ВыборкаШапки.Дата, ПараметрыОбработкиОшибок);
	
	// Выводим общие реквизиты шапки
	СведенияОПоставщике = Неопределено;
	Если ЗначениеЗаполнено(ВыборкаШапки.Организация) Тогда
		ЭлектронноеВзаимодействиеПереопределяемый.ПолучитьДанныеЮрФизЛица(ВыборкаШапки.Организация, СведенияОПоставщике);
		
		Если ПравоДоступа("Чтение", Метаданные.Справочники.БанковскиеСчета)
			И ЗначениеЗаполнено(ВыборкаШапки.БанковскийСчетОрганизации) Тогда
			ЗаполнитьРеквизитыБанковскогоСчета(СведенияОПоставщике, ВыборкаШапки.БанковскийСчетОрганизации, 
				"БанковскиеСчета");
		КонецЕсли;
		
		ЗаполнитьДанныеУчастника(ДеревоДанных, СведенияОПоставщике, "Поставщик");
	Иначе
		ПараметрыОбработкиОшибок = ЭлектронноеВзаимодействиеКлиентСервер.НовыеПараметрыОбработкиОшибки(ВыборкаШапки.Ссылка, 
			"Объект.Организация");
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
			"Поставщик", СведенияОПоставщике, ПараметрыОбработкиОшибок);
	КонецЕсли;
	
	СведенияОПокупателе = Неопределено;
	Если ЗначениеЗаполнено(ВыборкаШапки.Контрагент) Тогда
		ЭлектронноеВзаимодействиеПереопределяемый.ПолучитьДанныеЮрФизЛица(ВыборкаШапки.Контрагент, СведенияОПокупателе);
		ЗаполнитьДанныеУчастника(ДеревоДанных, СведенияОПокупателе, "Плательщик");
	Иначе
		ПараметрыОбработкиОшибок = ЭлектронноеВзаимодействиеКлиентСервер.НовыеПараметрыОбработкиОшибки(ВыборкаШапки.Ссылка, 
			"Объект.Контрагент");
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
			"Плательщик", СведенияОПокупателе, ПараметрыОбработкиОшибок);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ВыборкаШапки.Грузоотправитель) Тогда
		СведенияОГрузоотправителе = Неопределено; 
		ЭлектронноеВзаимодействиеПереопределяемый.ПолучитьДанныеЮрФизЛица(ВыборкаШапки.Грузоотправитель, 
			СведенияОГрузоотправителе);
		ЗаполнитьДанныеУчастника(ДеревоДанных, СведенияОГрузоотправителе, "Грузоотправитель", , "ФактическийАдрес");
	ИначеЕсли СведенияОПоставщике <> Неопределено Тогда
		ЗаполнитьДанныеУчастника(ДеревоДанных, СведенияОПоставщике, "Грузоотправитель", , "ФактическийАдрес");
	КонецЕсли;
	
	СведенияОГрузополучателе = Неопределено;
	Если ЗначениеЗаполнено(ВыборкаШапки.Грузополучатель) Тогда
		ЭлектронноеВзаимодействиеПереопределяемый.ПолучитьДанныеЮрФизЛица(ВыборкаШапки.Грузополучатель, СведенияОГрузополучателе);
		СведенияОГрузополучателе.Вставить("Грузополучатель", Истина);
	ИначеЕсли СведенияОПокупателе <> Неопределено Тогда
		СведенияОГрузополучателе = СведенияОПокупателе;
		СведенияОГрузополучателе.Вставить("Грузополучатель", Истина);
	КонецЕсли;
	
	Если СведенияОГрузополучателе <> Неопределено Тогда
		
		Если ЗначениеЗаполнено(ВыборкаШапки.АдресДоставкиЗначенияПолей) Тогда
			ВидАдреса = "ПроизвольныйАдрес";
			СведенияОГрузополучателе.Вставить("ПроизвольныйАдресЗначенияПолей", ВыборкаШапки.АдресДоставкиЗначенияПолей);
		Иначе
			ВидАдреса = "ФактическийАдрес";
		КонецЕсли;
		
		ЗаполнитьДанныеУчастника(ДеревоДанных, СведенияОГрузополучателе, "Грузополучатель",,ВидАдреса);
	КонецЕсли;
	
	СтруктураДопДанных = Новый Структура;
	
	Если ЗначениеЗаполнено(ВыборкаШапки.Перевозчик) Тогда
		ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ВыборкаШапки.Перевозчик, 
			"НаименованиеПолное, ИНН, КПП, ЮрФизЛицо");
		СведенияОПеревозчике = ЗначенияРеквизитов.НаименованиеПолное + ", " + ЗначенияРеквизитов.ИНН
			+ ?(ЗначенияРеквизитов.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицо, "/" + ЗначенияРеквизитов.КПП, "");
		СтруктураДопДанных.Вставить("СведенияОПеревозчике", СведенияОПеревозчике);
	КонецЕсли;
	
	// Составитель.
	Составитель = Неопределено;
	Если ЗначениеЗаполнено(ВыборкаШапки.Организация) Тогда
		
		ЭлектронноеВзаимодействиеПереопределяемый.ПолучитьДанныеЮрФизЛица(ВыборкаШапки.Организация, Составитель);

		// Составитель.
		СоставительДокументаНаименование = Составитель.ПолноеНаименование
			+ ?(ЗначениеЗаполнено(Составитель.КПП),
			СтрШаблон(НСтр("ru = ', ИНН/КПП %1/%2'"), Составитель.ИНН, Составитель.КПП),
			СтрШаблон(НСтр("ru = ', ИНН %1'"), Составитель.ИНН));
				
		ПараметрыОбработкиОшибок = ЭлектронноеВзаимодействиеКлиентСервер.НовыеПараметрыОбработкиОшибки(
			ВыборкаШапки.Ссылка, "Объект.Организация");
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДанных, "НаименованиеСоставителяДокумента", СоставительДокументаНаименование, ПараметрыОбработкиОшибок);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ВыборкаШапки.НомерТранспортнойНакладной)
		И ЗначениеЗаполнено(ВыборкаШапки.ДатаТранспортнойНакладной) Тогда
		
		ТранспортнаяНакладная = Новый ТаблицаЗначений;
		ТранспортнаяНакладная.Колонки.Добавить("ТранспортнаяНакладнаяНомер");
		ТранспортнаяНакладная.Колонки.Добавить("ТранспортнаяНакладнаяДата");
		
		НоваяСтрока = ТранспортнаяНакладная.Добавить();
		НоваяСтрока.ТранспортнаяНакладнаяНомер = ВыборкаШапки.НомерТранспортнойНакладной;
		НоваяСтрока.ТранспортнаяНакладнаяДата  = ВыборкаШапки.ДатаТранспортнойНакладной;
		
		// Дополним таблицу транспортных накладных параметрами обработки ошибок.
		ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(НоваяСтрока,
			"ТранспортнаяНакладнаяНомер", ВыборкаШапки.Ссылка, "Объект.НомерТранспортнойНакладной");
		ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(НоваяСтрока,
			"ТранспортнаяНакладнаяДата", ВыборкаШапки.Ссылка, "Объект.ДатаТранспортнойНакладной");
		
		ЭлектронноеВзаимодействие.ЗагрузитьТаблицуВДерево(ДеревоДанных, ТранспортнаяНакладная, "ТранспортнаяНакладная");
		
	КонецЕсли;
	
	// Обработка ошибки с указанием расширенного текста сообщения вместо параметров обработки ошибки.
	ТекстОшибки = НСтр("ru = 'Не удалось заполнить код валюты документа.'");
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ВалютаКод", ВыборкаШапки.ВалютаКод,
		ТекстОшибки);
		
	Если ТипЗнч(СсылкаНаОбъект) = Тип("ДокументСсылка.ВозвратТоваровПоставщику") Тогда
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ДокументыОснования",
			ВыборкаШапки.ДокументОснование);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ВыборкаШапки.ДатаОтгрузки) Тогда
		ДатаОтпуска = ВыборкаШапки.ДатаОтгрузки;
	Иначе
		ДатаОтпуска = ВыборкаШапки.Дата;
	КонецЕсли;
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "СведенияПоОтпускуГруза.ДатаОтпуска", 
		ДатаОтпуска);
	
	ТаблицаТоваров = Новый ТаблицаЗначений();
	ТаблицаТоваров.Колонки.Добавить("НомерСтроки");
	ТаблицаТоваров.Колонки.Добавить("Номенклатура");
	ТаблицаТоваров.Колонки.Добавить("НаименованиеНоменклатуры");
	ТаблицаТоваров.Колонки.Добавить("Характеристика");
	ТаблицаТоваров.Колонки.Добавить("НаименованиеХарактеристики");
	ТаблицаТоваров.Колонки.Добавить("Сорт");
	ТаблицаТоваров.Колонки.Добавить("Артикул");
	ТаблицаТоваров.Колонки.Добавить("КодТовара");
	ТаблицаТоваров.Колонки.Добавить("ЕдиницаИзмерения");
	ТаблицаТоваров.Колонки.Добавить("ЕдиницаИзмеренияНаименование");
	ТаблицаТоваров.Колонки.Добавить("БазоваяЕдиницаКод");
	ТаблицаТоваров.Колонки.Добавить("ВидУпаковки");
	ТаблицаТоваров.Колонки.Добавить("КоличествоВОдномМесте");
	ТаблицаТоваров.Колонки.Добавить("КоличествоМест");
	ТаблицаТоваров.Колонки.Добавить("МассаБрутто");
	ТаблицаТоваров.Колонки.Добавить("МассаНетто");
	ТаблицаТоваров.Колонки.Добавить("Цена");
	ТаблицаТоваров.Колонки.Добавить("СуммаБезНДС");
	ТаблицаТоваров.Колонки.Добавить("СтавкаНДС");
	ТаблицаТоваров.Колонки.Добавить("СуммаНДС");
	ТаблицаТоваров.Колонки.Добавить("СуммаСНДС");
	ТаблицаТоваров.Колонки.Добавить("ДокументОснование");
	ТаблицаТоваров.Колонки.Добавить("ДопДанныеПодписанные");
	ТаблицаТоваров.Колонки.Добавить("ДопДанныеНеПодписанные");
	ТаблицаТоваров.Колонки.Добавить("Сопоставление");
	
	НомерСтроки = 1;
	ВыборкаТоваров = СтруктураДанных.ВыборкаТоваров;
	Штрихкоды = СтруктураДанных.Штрихкоды;
	
	ЗаполнениеКодаТовара = СтруктураЭД.ВариантыЗаполненияПолей.ТоварКод;
	
	Пока ВыборкаТоваров.Следующий() Цикл
		
		НоваяСтрока = ТаблицаТоваров.Добавить();
		НоваяСтрока.НомерСтроки = НомерСтроки;
		НомерСтроки = НомерСтроки + 1;
		
		НоваяСтрока.Номенклатура                 = ВыборкаТоваров.Номенклатура;
		НоваяСтрока.НаименованиеНоменклатуры     = ВыборкаТоваров.НоменклатураНаименование;
		НоваяСтрока.Характеристика               = ВыборкаТоваров.Характеристика;
		НоваяСтрока.НаименованиеХарактеристики   = ВыборкаТоваров.ХарактеристикаНаименование;
		НоваяСтрока.Артикул                      = ВыборкаТоваров.НоменклатураАртикул;
		НоваяСтрока.КодТовара                    = ВыборкаТоваров.НоменклатураКод;
		НоваяСтрока.ЕдиницаИзмеренияНаименование = ВыборкаТоваров.ЕдиницаИзмеренияНаименование;
		НоваяСтрока.ЕдиницаИзмерения             = ВыборкаТоваров.ЕдиницаИзмерения;
		НоваяСтрока.БазоваяЕдиницаКод            = ВыборкаТоваров.ЕдиницаИзмеренияКод;
		НоваяСтрока.МассаНетто                   = ВыборкаТоваров.МассаНетто;
		НоваяСтрока.Цена                         = ?(ВыборкаТоваров.Количество = 0, 0,
			Окр(ВыборкаТоваров.СуммаБезНДС / ВыборкаТоваров.Количество, 2));
		
		НоваяСтрока.СуммаБезНДС = ВыборкаТоваров.СуммаБезНДС;
		НоваяСтрока.СтавкаНДС   = ВыборкаТоваров.СтавкаНДС;
		НоваяСтрока.СуммаНДС    = ВыборкаТоваров.СуммаНДС;
		НоваяСтрока.СуммаСНДС   = ВыборкаТоваров.СуммаСНДС;
		
		
		ТаблицаДопДанных = Новый ТаблицаЗначений();
		ТаблицаДопДанных.Колонки.Добавить("Идентификатор");
		ТаблицаДопДанных.Колонки.Добавить("Значение");
		
		Если ЗначениеЗаполнено(ВыборкаТоваров.СтавкаНДС) Тогда
			СтрокаДопДанных = ТаблицаДопДанных.Добавить();
			СтрокаДопДанных.Идентификатор = "СтавкаНДС";
			СтрокаДопДанных.Значение = ВыборкаТоваров.СтавкаНДС;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ВыборкаТоваров.НомерГТД) Тогда
			СтрокаДопДанных = ТаблицаДопДанных.Добавить();
			СтрокаДопДанных.Идентификатор = "НомерГТД";
			СтрокаДопДанных.Значение = ВыборкаТоваров.НомерГТД;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ВыборкаТоваров.СтранаПроисхожденияКод) Тогда
			СтрокаДопДанных = ТаблицаДопДанных.Добавить();
			СтрокаДопДанных.Идентификатор = "КодСтраныПроисхождения";
			СтрокаДопДанных.Значение = ВыборкаТоваров.СтранаПроисхожденияКод;
		КонецЕсли;
		
		НоваяСтрока.ДопДанныеПодписанные = ТаблицаДопДанных;
		
		НоваяСтрока.Сопоставление = СопоставлениеНоменклатурыДляЭлектронногоДокументаФНС(ВыборкаТоваров, Штрихкоды);
		
		Если ЗаполнениеКодаТовара = "Артикул" Тогда
			НоваяСтрока.КодТовара = ВыборкаТоваров.НоменклатураАртикул;
		КонецЕсли;
	
	КонецЦикла;
	
	// Обработка ошибки через механизм сообщений пользователю.
	ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(ТаблицаТоваров,
		"КодТовара", "Номенклатура", "Объект.Код");
	ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(ТаблицаТоваров,
		"НаименованиеНоменклатуры", "Номенклатура", "Объект.НаименованиеПолное");
	ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(ТаблицаТоваров,
		"МассаНетто", ВыборкаТоваров.Ссылка, "Объект.Товары.Количество",, "НомерСтроки");
	ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(ТаблицаТоваров,
		"Цена", ВыборкаТоваров.Ссылка, "Объект.Товары.Цена",, "НомерСтроки");
	ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(ТаблицаТоваров,
		"СуммаБезНДС", ВыборкаТоваров.Ссылка, "Объект.Товары.Сумма",, "НомерСтроки");
	ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(ТаблицаТоваров,
		"СуммаНДС", ВыборкаТоваров.Ссылка, "Объект.Товары.СуммаНДС",, "НомерСтроки");
	ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(ТаблицаТоваров,
		"СуммаСНДС", ВыборкаТоваров.Ссылка, "Объект.Товары.Сумма",, "НомерСтроки");
	ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(ТаблицаТоваров,
		"ЕдиницаИзмеренияНаименование", "ЕдиницаИзмерения", "Объект.Наименование");
	ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(ТаблицаТоваров,
		"БазоваяЕдиницаКод", "ЕдиницаИзмерения", "Объект.Код");
	
	ЭлектронноеВзаимодействие.ЗагрузитьТаблицуВДерево(ДеревоДанных, ТаблицаТоваров, "ТаблицаТоваров");
	
	// Итоговые показатели по документу.
	
	ТекстОшибки = НСтр("ru = 'Не удалось заполнить итоговые показатели. Возможные причины:
		|	- не заполнена табличная часть ""Товары""
		|	- не заполнены колонки ""Сумма"", ""НДС"", ""Количество""'");
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
								ДеревоДанных,
								"ОбщиеСведенияОТоварнойНакладной.КоличествоПорядковыхНомеровЗаписей",
								ТаблицаТоваров.Количество(), ТекстОшибки);
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
								ДеревоДанных,
								"ОбщиеСведенияОТоварнойНакладной.МассаГрузаНетто",
								ТаблицаТоваров.Итог("МассаНетто"), ТекстОшибки);
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
								ДеревоДанных,
								"ВсегоПоНакладной.МассаНетто",
								ТаблицаТоваров.Итог("МассаНетто"), ТекстОшибки);
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
								ДеревоДанных,
								"ВсегоПоНакладной.СуммаБезНДС",
								ТаблицаТоваров.Итог("СуммаБезНДС"), ТекстОшибки);
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
								ДеревоДанных,
								"ВсегоПоНакладной.СуммаНДС",
								ТаблицаТоваров.Итог("СуммаНДС"), ТекстОшибки);
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
								ДеревоДанных,
								"ВсегоПоНакладной.СуммаСНДС",
								ТаблицаТоваров.Итог("СуммаСНДС"), ТекстОшибки);
	
	Если ЗначениеЗаполнено(СтруктураДопДанных) Тогда
		ЭлектронноеВзаимодействие.ДобавитьДопДанныеВДерево(ДеревоДанных, СтруктураДопДанных, Истина);
	КонецЕсли;
	
КонецПроцедуры

// См. ОбменСКонтрагентамиПереопределяемый.ЗаполнитьДанныеАктОРасхождениях_ИнформацияПокупателя.
// Подготавливает данные для электронного документа вида "Акт о расхождениях".
//
// Параметры:
//  СсылкаНаОбъект - ДокументСсылка - ссылка на объект информационной базы, по которому необходимо 
//                                    создать электронный документ.
//  СтруктураЭД - Структура - структура данных для формирования электронного документа.
//  ДеревоДанных - ДеревоЗначений - дерево данных заполнения электронного документа.
//  Отказ - Булево - если нужно отказаться от создания электронного документа, необходимо установить значение в Истина.
//                   После этого дальнейшие действия по формированию документа производиться не будут, поэтому
//                   нужно сформировать сообщения пользователю при необходимости самостоятельно.
//
Процедура ЗаполнитьДанныеАктОРасхождениях_ИнформацияПокупателя(Знач СсылкаНаОбъект, Знач СтруктураЭД, ДеревоДанных, Отказ) Экспорт
	
	СтруктураДанных = Документы[СсылкаНаОбъект.Метаданные().Имя].ПолучитьДанныеДляЭД(СсылкаНаОбъект);
	
	ВыборкаТовары = СтруктураДанных.ВыборкаТовары;
	Штрихкоды = СтруктураДанных.Штрихкоды;
	Маркировка = СтруктураДанных.Маркировка;
	МаркировкаРасхождения = СтруктураДанных.МаркировкаРасхождения;
	
	ВыборкаШапка = СтруктураДанных.ВыборкаШапка;
	ВыборкаШапка.Следующий();
	
	ИмяФормы = "Документ.ПоступлениеТоваров.ФормаОбъекта";
	
	// Наименование документа
	НаименованиеДокумента = НСтр("ru = 'Акт об установленном расхождении по количеству и качеству при приемке товарно-материальных ценностей'");
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "НаименованиеДокумента", НаименованиеДокумента);
	
	// Обстоятельства составления. (После приемки)
	ОбстоятельстваСоставления = "2";
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
		ДеревоДанных, "ОбстоятельстваСоставленияДокумента", ОбстоятельстваСоставления);
	
	// Обстоятельства использования. (Расхождения)
	ОбстоятельстваИспользования = "3000";
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
		ДеревоДанных, "ОбстоятельстваИспользованияДокумента", ОбстоятельстваИспользования);
	
	// Номер документа.
	НавигационнаяСсылка = ПолучитьНавигационнуюСсылку(СсылкаНаОбъект, "НомерЭД");
	ПараметрыФормы = Новый Структура("Ключ", СсылкаНаОбъект);
	ПараметрыОбработкиОшибок = ЭлектронноеВзаимодействиеКлиентСервер.НовыеПараметрыОбработкиОшибки(
		СсылкаНаОбъект, "Объект.НомерВходящегоДокумента", НавигационнаяСсылка, ИмяФормы, ПараметрыФормы);
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
		ДеревоДанных, "НомерДокумента", ВыборкаШапка.НомерЭД, ПараметрыОбработкиОшибок);
	
	// Дата документа.
	НавигационнаяСсылка = ПолучитьНавигационнуюСсылку(СсылкаНаОбъект, "ДатаЭД");
	ПараметрыОбработкиОшибок = ЭлектронноеВзаимодействиеКлиентСервер.НовыеПараметрыОбработкиОшибки(
		СсылкаНаОбъект, "Объект.ДатаВходящегоДокумента", НавигационнаяСсылка, ИмяФормы, ПараметрыФормы);
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
		ДеревоДанных, "ДатаДокумента", ВыборкаШапка.ДатаЭД, ПараметрыОбработкиОшибок);
	
	// Покупатель / Составитель.
	Покупатель = Неопределено; 
	Если ЗначениеЗаполнено(ВыборкаШапка.Организация) Тогда
		
		ЭлектронноеВзаимодействиеПереопределяемый.ПолучитьДанныеЮрФизЛица(ВыборкаШапка.Организация, Покупатель);
		// Покупатель.
		ЗаполнитьДанныеУчастникаУПД(ДеревоДанных, Покупатель, "Покупатель");
		// Составитель.
		СоставительДокументаНаименование = Покупатель.ПолноеНаименование
			+ ?(ЗначениеЗаполнено(Покупатель.КПП),
			СтрШаблон(НСтр("ru = ', ИНН/КПП %1/%2'"), Покупатель.ИНН, Покупатель.КПП),
			СтрШаблон(НСтр("ru = ', ИНН %1'"), Покупатель.ИНН));
				
		ПараметрыОбработкиОшибок = ЭлектронноеВзаимодействиеКлиентСервер.НовыеПараметрыОбработкиОшибки(
			ВыборкаШапка.Ссылка, "Объект.Организация");
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДанных, "СоставительДокументаНаименование", СоставительДокументаНаименование, ПараметрыОбработкиОшибок);
	Иначе
		// Покупатель.
		ПараметрыОбработкиОшибок = ЭлектронноеВзаимодействиеКлиентСервер.НовыеПараметрыОбработкиОшибки(
			ВыборкаШапка.Ссылка, "Объект.Организация");
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДанных, "Покупатель", Покупатель, ПараметрыОбработкиОшибок);
	КонецЕсли;
	
	// Продавец.
	Продавец = Неопределено;
	Если ЗначениеЗаполнено(ВыборкаШапка.Контрагент) Тогда
		ЭлектронноеВзаимодействиеПереопределяемый.ПолучитьДанныеЮрФизЛица(ВыборкаШапка.Контрагент, Продавец);
		ЗаполнитьДанныеУчастникаУПД(ДеревоДанных, Продавец, "Продавец");
	Иначе
		ПараметрыОбработкиОшибок = ЭлектронноеВзаимодействиеКлиентСервер.НовыеПараметрыОбработкиОшибки(
			ВыборкаШапка.Ссылка, "Объект.Контрагент");
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДанных, "Продавец", Продавец, ПараметрыОбработкиОшибок);
	КонецЕсли;
	
	// Грузоотправитель.
	Грузоотправитель = Неопределено;
	Если ЗначениеЗаполнено(ВыборкаШапка.Грузоотправитель) Тогда
		ЭлектронноеВзаимодействиеПереопределяемый.ПолучитьДанныеЮрФизЛица(ВыборкаШапка.Грузоотправитель, Грузоотправитель);
		ЗаполнитьДанныеУчастникаУПД(ДеревоДанных, Грузоотправитель, "Грузоотправитель");
	КонецЕсли;
	
	// Грузополучатель.
	Грузополучатель = Неопределено;
	Если ЗначениеЗаполнено(ВыборкаШапка.Грузополучатель) Тогда
		ЭлектронноеВзаимодействиеПереопределяемый.ПолучитьДанныеЮрФизЛица(ВыборкаШапка.Грузополучатель, Грузополучатель);
		ЗаполнитьДанныеУчастникаУПД(ДеревоДанных, Грузополучатель, "Грузополучатель");
	КонецЕсли;
	
	// Краткое описание события.
	ОписаниеСобытия = НСтр("ru = 'При приемке указанных в документе ценностей (результатов работ) установлены расхождения с сопроводительными документами.'");
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
		ДеревоДанных, "КраткоеОписаниеСобытия", ОписаниеСобытия);
	
	// Результаты приемки.
	РезультатыПриемки = ЭлектронноеВзаимодействие.ДанныеЭлементаДереваЭлектронногоДокумента(
		ДеревоДанных, "РезультатыПриемки");
	ВыборкаТовары.Сбросить();
	
	ИспользуетсяМаркировка = Ложь;
	Если Маркировка.Количество() Или МаркировкаРасхождения.Количество() Тогда
		
		ИспользуетсяМаркировка = Истина;
		
		ПараметрыНормализацииПрочее = РазборКодаМаркировкиИССлужебныйКлиентСервер.ПараметрыНормализацииКодаМаркировки();
		ПараметрыНормализацииПрочее.ИмяСвойстваКодМаркировки = "Штрихкод";
		ПараметрыНормализацииПрочее.НачинаетсяСоСкобки       = Ложь;
		
		ТаблицаМаркировкиПоДокументу = СоздатьТаблицуЗначенийДляСведенийОМаркировке();
		ТаблицаМаркировкиБрак = СоздатьТаблицуЗначенийДляСведенийОМаркировке();
		ТаблицаМаркировкиНедостача = СоздатьТаблицуЗначенийДляСведенийОМаркировке();
		ТаблицаМаркировкиИзлишки = СоздатьТаблицуЗначенийДляСведенийОМаркировке();
		
		Для Каждого СтрокаМаркировки Из Маркировка Цикл
			СтруктураОтбора = Новый Структура("ТипРасхождения, ЗначениеШтрихкода", Перечисления.ТипыРасхожденийИСМП.Излишек, СтрокаМаркировки.Штрихкод.ЗначениеШтрихкода);
			НайденныеСтроки = МаркировкаРасхождения.Найтистроки(СтруктураОтбора);
			Если НайденныеСтроки.Количество() Тогда
				Продолжить;
			КонецЕсли;
			НоваяСтрока = ТаблицаМаркировкиПоДокументу.Добавить();
			НоваяСтрока.Количество = 1;
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаМаркировки);
		КонецЦикла;
		
		Для Каждого СтрокаРасхождения Из МаркировкаРасхождения Цикл
			ДанныеМаркировки = РазборКодаМаркировкиИССлужебный.РазобратьКодМаркировки(СтрокаРасхождения.ЗначениеШтрихкода);
			
			РезультатРазбора = ШтрихкодированиеОбщегоНазначенияИС.НоваяСтруктураОбработкиШтрихкода(
				СтрокаРасхождения.ЗначениеШтрихкода, ИнтеграцияИСРТКлиентСервер.ОсобенностьУчетаПоВидуПродукции(СтрокаРасхождения.Номенклатура.ОсобенностьУчета), Неопределено);
				
			Если ДанныеМаркировки = Неопределено Тогда
				ДанныеМаркировки = Новый Структура("ВидУпаковки, ВидПродукции", РезультатРазбора.ВидУпаковки, РезультатРазбора.ВидПродукции);
			КонецЕсли;
				
			НормализованныйКодМаркировки = ШтрихкодированиеИСМП.КодМаркировкиДляПередачиИСМП(
				РезультатРазбора, ПараметрыНормализацииПрочее);
				
			СтрокаРасхождения.ЗначениеШтрихкода = НормализованныйКодМаркировки;
			
			Если Не СтрокаРасхождения.ТипРасхождения = Перечисления.ТипыРасхожденийИСМП.Излишек Тогда
				НоваяСтрока = ТаблицаМаркировкиПоДокументу.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаРасхождения);
				ЗаполнитьЗначенияСвойств(НоваяСтрока, ДанныеМаркировки);
			КонецЕсли;
			
			Если СтрокаРасхождения.ТипРасхождения = Перечисления.ТипыРасхожденийИСМП.Брак Тогда
				НоваяСтрока = ТаблицаМаркировкиБрак.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаРасхождения);
				ЗаполнитьЗначенияСвойств(НоваяСтрока, ДанныеМаркировки);
			КонецЕсли;
			
			Если СтрокаРасхождения.ТипРасхождения = Перечисления.ТипыРасхожденийИСМП.Недостача Тогда
				НоваяСтрока = ТаблицаМаркировкиНедостача.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаРасхождения);
				ЗаполнитьЗначенияСвойств(НоваяСтрока, ДанныеМаркировки);
			КонецЕсли;
			
			Если СтрокаРасхождения.ТипРасхождения = Перечисления.ТипыРасхожденийИСМП.Излишек Тогда
				НоваяСтрока = ТаблицаМаркировкиИзлишки.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаРасхождения);
				ЗаполнитьЗначенияСвойств(НоваяСтрока, ДанныеМаркировки);
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Пока ВыборкаТовары.Следующий() Цикл
		
		НоваяСтрока = РезультатыПриемки.Добавить();
		НоваяСтрока.ЕдиницаИзмеренияНаименование = ВыборкаТовары.ЕдиницаИзмеренияНаименование;
		НоваяСтрока.ЕдиницаИзмеренияКод = ВыборкаТовары.ЕдиницаИзмеренияКод;
		
		НоваяСтрока.Товар = Новый Структура;
		НоваяСтрока.Товар.Вставить("Наименование", ВыборкаТовары.НоменклатураНаименование);
		НоваяСтрока.Товар.Вставить("Характеристика", ВыборкаТовары.ХарактеристикаНаименование);
		НоваяСтрока.Товар.Вставить("Артикул", ВыборкаТовары.НоменклатураАртикул);
		НоваяСтрока.Товар.Вставить("Код", ВыборкаТовары.НоменклатураКод);
		
		Если ЗначениеЗаполнено(ВыборкаТовары.КоличествоПоДокументу) Тогда
			НоваяСтрока.ПоДокументу = Новый Структура;
			НоваяСтрока.ПоДокументу.Вставить("Количество", ВыборкаТовары.КоличествоПоДокументу);
			НоваяСтрока.ПоДокументу.Вставить("Цена", ВыборкаТовары.ЦенаПоДокументу);
			НоваяСтрока.ПоДокументу.Вставить("СтавкаНДС", ВыборкаТовары.СтавкаНДСПоДокументу);
			НоваяСтрока.ПоДокументу.Вставить("СуммаНДС", ВыборкаТовары.СуммаНДСПоДокументу);
			НоваяСтрока.ПоДокументу.Вставить("СуммаСНДС", ВыборкаТовары.СуммаСНДСПоДокументу);
			
			Если ИспользуетсяМаркировка Тогда
				ЭлектронноеВзаимодействиеИСМП.ЗаполнитьСведенияОМаркировкеАктОРасхождениях_2019(НоваяСтрока.ПоДокументу, ВыборкаТовары, ТаблицаМаркировкиПоДокументу, "КоличествоПоДокументу");
			КонецЕсли;
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ВыборкаТовары.Количество) Тогда
			НоваяСтрока.ПоФакту = Новый Структура;
			НоваяСтрока.ПоФакту.Вставить("Количество", ВыборкаТовары.Количество);
			НоваяСтрока.ПоФакту.Вставить("Цена", ВыборкаТовары.Цена);
			НоваяСтрока.ПоФакту.Вставить("СтавкаНДС", ВыборкаТовары.СтавкаНДС);
			НоваяСтрока.ПоФакту.Вставить("СуммаНДС", ВыборкаТовары.СуммаНДС);
			НоваяСтрока.ПоФакту.Вставить("СуммаСНДС", ВыборкаТовары.СуммаСНДС);
			
			Если ИспользуетсяМаркировка Тогда
				ЭлектронноеВзаимодействиеИСМП.ЗаполнитьСведенияОМаркировкеАктОРасхождениях_2019(НоваяСтрока.ПоФакту, ВыборкаТовары, Маркировка, "Количество");
			КонецЕсли;
			
		КонецЕсли;
		
		НоваяСтрока.Брак = Новый Структура;
		НоваяСтрока.Излишки = Новый Структура;
		НоваяСтрока.Недостача = Новый Структура;
		
		ЗаполнитьРасхожденияБезУчетаМаркировки = Истина;
		Если ИспользуетсяМаркировка Тогда
			
			СтруктураОтбора = Новый Структура("Номенклатура, Характеристика", ВыборкаТовары.Номенклатура, ВыборкаТовары.Характеристика);
			
			НайденныеСтроки = ТаблицаМаркировкиБрак.НайтиСтроки(СтруктураОтбора);
			Если ИспользуетсяМаркировка И НайденныеСтроки.Количество() Тогда
				ЗаполнитьТаблицуРезультатаПриемкиАктаОРасхожденияхСМаркировкой(НоваяСтрока.Брак, ВыборкаТовары, ТаблицаМаркировкиБрак, НайденныеСтроки);
				ЗаполнитьРасхожденияБезУчетаМаркировки = Ложь;
			КонецЕсли;
			
			НайденныеСтроки = ТаблицаМаркировкиИзлишки.НайтиСтроки(СтруктураОтбора);
			Если ИспользуетсяМаркировка И НайденныеСтроки.Количество() Тогда
				ЗаполнитьТаблицуРезультатаПриемкиАктаОРасхожденияхСМаркировкой(НоваяСтрока.Излишки, ВыборкаТовары, ТаблицаМаркировкиИзлишки, НайденныеСтроки);
				ЗаполнитьРасхожденияБезУчетаМаркировки = Ложь;
			КонецЕсли;
			
			НайденныеСтроки = ТаблицаМаркировкиНедостача.НайтиСтроки(СтруктураОтбора);
			Если ИспользуетсяМаркировка И НайденныеСтроки.Количество() Тогда
				ЗаполнитьТаблицуРезультатаПриемкиАктаОРасхожденияхСМаркировкой(НоваяСтрока.Недостача, ВыборкаТовары, ТаблицаМаркировкиНедостача, НайденныеСтроки);
				ЗаполнитьРасхожденияБезУчетаМаркировки = Ложь;
			КонецЕсли;
			
		КонецЕсли;
		
		Если ЗаполнитьРасхожденияБезУчетаМаркировки Тогда
			ЗаполнитьТаблицуРезультатаПриемкиАктаОРасхожденияхБезМаркировки(ВыборкаТовары, НоваяСтрока);
		КонецЕсли;
		
		НоваяСтрока.Сопоставление = СопоставлениеНоменклатурыДляЭлектронногоДокументаФНС(ВыборкаТовары, Штрихкоды);
		
	КонецЦикла;
	
	ЭлектронноеВзаимодействие.ЗагрузитьТаблицуВДерево(ДеревоДанных, РезультатыПриемки, "РезультатыПриемки");
	
	МенеджерЗаписиЭД = РегистрыСведений.СостоянияПоОбъектамУчетаЭДО.СоздатьМенеджерЗаписи();
	МенеджерЗаписиЭД.СсылкаНаОбъект = СсылкаНаОбъект;
	МенеджерЗаписиЭД.Прочитать();
	Если Не ЗначениеЗаполнено(МенеджерЗаписиЭД.УдалитьЭлектронныйДокумент) Тогда
		МенеджерЗаписиЭД.Удалить();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ЗаполнитьДанныеУчастникаУПД(ДеревоДанных, СведенияОбУчастнике, ВидУчастника, ВидАдреса = "ЮридическийАдрес")
	
	// Подготовим параметры обработки ошибок
	КлючДанных = Неопределено;
	СведенияОбУчастнике.Свойство("Ссылка", КлючДанных);
	
	ПараметрыОбработкиОшибокНаименование = ЭлектронноеВзаимодействиеКлиентСервер.НовыеПараметрыОбработкиОшибки(
		КлючДанных, "Объект.НаименованиеПолное");
	ПараметрыОбработкиОшибокИНН = ЭлектронноеВзаимодействиеКлиентСервер.НовыеПараметрыОбработкиОшибки(
		КлючДанных, "Объект.ИНН");
	ПараметрыОбработкиОшибокКПП = ЭлектронноеВзаимодействиеКлиентСервер.НовыеПараметрыОбработкиОшибки(
		КлючДанных, "Объект.КПП");
		
	Если СведенияОбУчастнике.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицо Тогда
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДанных,
			ВидУчастника + ".ТипУчастника.ЮЛ.НаименованиеОрганизации",
			СведенияОбУчастнике.ПолноеНаименование, ПараметрыОбработкиОшибокНаименование);
		
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДанных,
			ВидУчастника + ".ТипУчастника.ЮЛ.ИНН",
			СведенияОбУчастнике.ИНН, ПараметрыОбработкиОшибокИНН);

		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДанных,
			ВидУчастника + ".ТипУчастника.ЮЛ.КПП",
			СведенияОбУчастнике.КПП, ПараметрыОбработкиОшибокКПП);
		
	ИначеЕсли СведенияОбУчастнике.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицоНеРезидент Тогда
		
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДанных,
			ВидУчастника + ".ТипУчастника.ИЛ.НаименованиеОрганизации",
			СведенияОбУчастнике.ПолноеНаименование, ПараметрыОбработкиОшибокНаименование);
		
	Иначе
		
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДанных,
			ВидУчастника + ".ТипУчастника.ИП.ИНН",
			СведенияОбУчастнике.ИНН, ПараметрыОбработкиОшибокИНН);
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДанных,
			ВидУчастника + ".ТипУчастника.ИП.Фамилия",
			СведенияОбУчастнике.Фамилия, ПараметрыОбработкиОшибокНаименование);
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДанных,
			ВидУчастника + ".ТипУчастника.ИП.Имя",
			СведенияОбУчастнике.Имя, ПараметрыОбработкиОшибокНаименование);
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДанных,
			ВидУчастника + ".ТипУчастника.ИП.Отчество",
			СведенияОбУчастнике.Отчество, ПараметрыОбработкиОшибокНаименование);
		
		Если ТипЗнч(СведенияОбУчастнике.Ссылка) = Тип("СправочникСсылка.Организации") Тогда
		
			Свидетельство = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Свидетельство №%1 от %2'"),
				СведенияОбУчастнике.СвидетельствоСерияНомер,
				Формат(СведенияОбУчастнике.СвидетельствоДатаВыдачи, "ДЛФ=D"));
			
			ПараметрыОбработкиОшибок = ЭлектронноеВзаимодействиеКлиентСервер.НовыеПараметрыОбработкиОшибки(
				КлючДанных, "Объект.СвидетельствоСерияНомер");
			ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
				ДеревоДанных,
				ВидУчастника + ".ТипУчастника.ИП.СвидетельствоОГосРегистрации",
				Свидетельство, ПараметрыОбработкиОшибок);
			
		КонецЕсли;
		
	КонецЕсли;
	
	// Передаем в дерево данные для заполнения адреса.
	
	ВидКонтактнойИнформации = Неопределено;
	
	ТипУчастникаОрганизация = ТипЗнч(КлючДанных) = Тип("СправочникСсылка.Организации");
	
	Если ВидАдреса = "ПроизвольныйАдрес"
		И ЗначениеЗаполнено(СведенияОбУчастнике.ПроизвольныйАдресЗначенияПолей) Тогда
		
		СведенияОбАдресе = РаботаСАдресами.СведенияОбАдресе(СведенияОбУчастнике.ПроизвольныйАдресЗначенияПолей);
		
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
			ВидУчастника + ".Адрес.АдресИнформация.КодСтраны", СведенияОбАдресе.КодСтраны);
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
			ВидУчастника + ".Адрес.АдресИнформация.АдресТекст", СведенияОбАдресе.Представление);
		
	ИначеЕсли ВидАдреса = "ПочтовыйАдрес"
		И ЗначениеЗаполнено(СведенияОбУчастнике[ВидАдреса]) Тогда
		
		ВидКонтактнойИнформации = ?(ТипУчастникаОрганизация, Справочники.ВидыКонтактнойИнформации.ПочтовыйАдресОрганизации,
			Справочники.ВидыКонтактнойИнформации.ПочтовыйАдресКонтрагента);
		
	ИначеЕсли ВидАдреса = "ФактическийАдрес" 
		И ЗначениеЗаполнено(СведенияОбУчастнике[ВидАдреса]) Тогда
		
		ВидКонтактнойИнформации = ?(ТипУчастникаОрганизация, Справочники.ВидыКонтактнойИнформации.ФактАдресОрганизации,
			Справочники.ВидыКонтактнойИнформации.ФактАдресКонтрагента);
		
	Иначе
		
		ВидКонтактнойИнформации = ?(ТипУчастникаОрганизация, Справочники.ВидыКонтактнойИнформации.ЮрАдресОрганизации,
			Справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагента);
		
	КонецЕсли;
	
	Если ВидКонтактнойИнформации <> Неопределено Тогда
		
		ПостфиксПоляАдрес = ?(ТипУчастникаОрганизация, "Организации", "Контрагента");
		
		ПараметрыОбработкиОшибок = ЭлектронноеВзаимодействиеКлиентСервер.НовыеПараметрыОбработкиОшибки(
			СведенияОбУчастнике.Ссылка, "КонтактнаяИнформацияПолеЮрАдрес" + ПостфиксПоляАдрес + ".");
		
		ЭлектронноеВзаимодействие.ДобавитьВРеквизитОбработкуОшибки(ДеревоДанных, ВидУчастника + ".Адрес.АвтоматическиЗаполняемый",
			ПараметрыОбработкиОшибок);
		
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДанных, ВидУчастника + ".Адрес.АвтоматическиЗаполняемый.ОбъектКонтактнойИнформации", КлючДанных);
		
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДанных, ВидУчастника + ".Адрес.АвтоматическиЗаполняемый.ВидКонтактнойИнформации", ВидКонтактнойИнформации);
		
	КонецЕсли;
	
	Телефон = "";
	Если СведенияОбУчастнике.Свойство("Телефоны", Телефон) И ЗначениеЗаполнено(Телефон) Тогда
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДанных,
			ВидУчастника + ".КонтактныеСведения.Телефон",
			Телефон, ПараметрыОбработкиОшибок);
	КонецЕсли;
	
	ЭлектроннаяПочта = "";
	Если СведенияОбУчастнике.Свойство("ЭлектроннаяПочта", ЭлектроннаяПочта) И ЗначениеЗаполнено(ЭлектроннаяПочта) Тогда
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДанных,
			ВидУчастника + ".КонтактныеСведения.ЭлектроннаяПочта",
			ЭлектроннаяПочта, ПараметрыОбработкиОшибок);
	КонецЕсли;
	
	НомерСчета = "";
	Если СведенияОбУчастнике.Свойство("НомерСчета", НомерСчета) И ЗначениеЗаполнено(НомерСчета) Тогда
		ПараметрыОбработкиОшибок = Неопределено;
		Если СведенияОбУчастнике.Свойство("БанковскийСчет") Тогда
			ПараметрыОбработкиОшибок = ЭлектронноеВзаимодействиеКлиентСервер.НовыеПараметрыОбработкиОшибки(
				СведенияОбУчастнике.БанковскийСчетСсылка, "Объект.НомерСчета");
		КонецЕсли;
		
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДанных,
			ВидУчастника + ".БанковскиеРеквизиты.НомерСчета",
			НомерСчета, ПараметрыОбработкиОшибок);
				
		Банк = ""; БИК = ""; КоррСчет = "";
		Если СведенияОбУчастнике.Свойство("Банк", Банк) И ЗначениеЗаполнено(Банк) Тогда
			ПараметрыОбработкиОшибок = Неопределено;
			Если СведенияОбУчастнике.Свойство("БанкСсылка") Тогда
				ПараметрыОбработкиОшибок = ЭлектронноеВзаимодействиеКлиентСервер.НовыеПараметрыОбработкиОшибки(
					СведенияОбУчастнике.БанкСсылка, "Объект.Наименование");
			КонецЕсли;
			
			ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
				ДеревоДанных,
				ВидУчастника + ".БанковскиеРеквизиты.НаименованиеБанка",
				Банк, ПараметрыОбработкиОшибок);
		КонецЕсли;
		Если СведенияОбУчастнике.Свойство("БИК", БИК) И ЗначениеЗаполнено(БИК) Тогда
			ПараметрыОбработкиОшибок = Неопределено;
			Если СведенияОбУчастнике.Свойство("БанкСсылка") Тогда
				ПараметрыОбработкиОшибок = ЭлектронноеВзаимодействиеКлиентСервер.НовыеПараметрыОбработкиОшибки(
					СведенияОбУчастнике.БанкСсылка, "Объект.Код");
			КонецЕсли;
				
			ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
				ДеревоДанных,
				ВидУчастника + ".БанковскиеРеквизиты.БИКБанка",
				БИК, ПараметрыОбработкиОшибок);
		КонецЕсли;
		Если СведенияОбУчастнике.Свойство("КоррСчет", КоррСчет) И ЗначениеЗаполнено(КоррСчет) Тогда
			ПараметрыОбработкиОшибок = Неопределено;
			Если СведенияОбУчастнике.Свойство("БанкСсылка") Тогда
				ПараметрыОбработкиОшибок = ЭлектронноеВзаимодействиеКлиентСервер.НовыеПараметрыОбработкиОшибки(
					СведенияОбУчастнике.БанкСсылка, "Объект.КоррСчет");
			КонецЕсли;
			
			ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
				ДеревоДанных,
				ВидУчастника + ".БанковскиеРеквизиты.КорреспондентскийСчетБанка",
				КоррСчет, ПараметрыОбработкиОшибок);
		КонецЕсли;
	КонецЕсли;
	
	КодПоОКПО = "";
	Если СведенияОбУчастнике.Свойство("КодПоОКПО", КодПоОКПО) И ЗначениеЗаполнено(КодПоОКПО) Тогда
		ПараметрыОбработкиОшибок = ЭлектронноеВзаимодействиеКлиентСервер.НовыеПараметрыОбработкиОшибки(КлючДанных,
			"Объект.КодПоОКПО");
					
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДанных, ВидУчастника + ".КодОКПО", КодПоОКПО, ПараметрыОбработкиОшибок);
	КонецЕсли;
	
КонецПроцедуры

Процедура ДобавитьВДеревоДанныеСчета(ДеревоДокумента, ДанныеСчета)
	
	ПараметрыОбработкиОшибок = ЭлектронноеВзаимодействиеКлиентСервер.НовыеПараметрыОбработкиОшибки(ДанныеСчета.БанковскийСчет, 
		"Объект.НомерСчета");
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "РасчетныйСчет.НомерСчета",
		ДанныеСчета.НомерСчета, ПараметрыОбработкиОшибок);
		
	ПараметрыОбработкиОшибок = ЭлектронноеВзаимодействиеКлиентСервер.НовыеПараметрыОбработкиОшибки(ДанныеСчета.Банк, 
		"Объект.Наименование");
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "РасчетныйСчет.Банк.Наименование",
		ДанныеСчета.БанкНаименование, ПараметрыОбработкиОшибок);
		
	ПараметрыОбработкиОшибок = ЭлектронноеВзаимодействиеКлиентСервер.НовыеПараметрыОбработкиОшибки(ДанныеСчета.Банк, 
		"Объект.Код");	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "РасчетныйСчет.Банк.БИК",
		ДанныеСчета.БанкБИК, ПараметрыОбработкиОшибок);
		
	ПараметрыОбработкиОшибок = ЭлектронноеВзаимодействиеКлиентСервер.НовыеПараметрыОбработкиОшибки(ДанныеСчета.Банк, 
		"Объект.КоррСчет");	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "РасчетныйСчет.Банк.СчетКорреспондентский",
		ДанныеСчета.БанкСчетКорр, ПараметрыОбработкиОшибок);
	
	Если ЗначениеЗаполнено(ДанныеСчета.БанкКоррНаименование) Тогда
		ПараметрыОбработкиОшибок = ЭлектронноеВзаимодействиеКлиентСервер.НовыеПараметрыОбработкиОшибки(ДанныеСчета.БанкДляРасчетов, 
			"Объект.Наименование");	
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "РасчетныйСчет.БанкКорреспондент.Наименование",
			ДанныеСчета.БанкКоррНаименование, ПараметрыОбработкиОшибок);
			
		ПараметрыОбработкиОшибок = ЭлектронноеВзаимодействиеКлиентСервер.НовыеПараметрыОбработкиОшибки(ДанныеСчета.БанкДляРасчетов, 
			"Объект.КоррСчет");	
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента,
			"РасчетныйСчет.БанкКорреспондент.СчетКорреспондентский", ДанныеСчета.БанкКоррСчетКорр, ПараметрыОбработкиОшибок);
		
		ПараметрыОбработкиОшибок = ЭлектронноеВзаимодействиеКлиентСервер.НовыеПараметрыОбработкиОшибки(ДанныеСчета.БанкДляРасчетов, 
			"Объект.Код");	
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "РасчетныйСчет.БанкКорреспондент.БИК",
			ДанныеСчета.БанкКоррБИК, ПараметрыОбработкиОшибок);
	КонецЕсли;
	
КонецПроцедуры

Функция ВидыЭДПоИмениОбъекта(ПолноеИмяОбъектаМетаданных) Экспорт
	
	ТекстСообщенияОбОшибке = НСтр("ru = 'Не удалось определить вид документа'");
	
	МетаданныеОбъекта = Метаданные.НайтиПоПолномуИмени(ПолноеИмяОбъектаМетаданных);
	
	Если МетаданныеОбъекта = Неопределено Тогда
		ВызватьИсключение ТекстСообщенияОбОшибке;
	КонецЕсли;
	
	ВидыЭД = ОбменСКонтрагентами.ТипыДокументов();
	Результат = Новый Массив;
	Если МетаданныеОбъекта = Метаданные.Документы.ПоступлениеТоваров Тогда
		
		Результат.Добавить(ВидыЭД.АктВыполненныхРабот);
		Результат.Добавить(ВидыЭД.АктНаПередачуПрав);
		Результат.Добавить(ВидыЭД.ТоварнаяНакладная);
		Результат.Добавить(ВидыЭД.СоглашениеОбИзмененииСтоимости);
		
	ИначеЕсли МетаданныеОбъекта = Метаданные.Документы.ЗаказПокупателя Тогда
		
		Результат.Добавить(ВидыЭД.ЗаказТовара);
		
	ИначеЕсли МетаданныеОбъекта = Метаданные.Документы.ЗаказПоставщику Тогда
		
		Результат.Добавить(ВидыЭД.ОтветНаЗаказ);
		
	ИначеЕсли МетаданныеОбъекта = Метаданные.Документы.ВозвратТоваровПоставщику Тогда
		
		Результат.Добавить(ВидыЭД.ТоварнаяНакладная);
		
	ИначеЕсли МетаданныеОбъекта = Метаданные.Документы.РеализацияТоваров Тогда
		
		Результат.Добавить(ВидыЭД.ТоварнаяНакладная);
		
	ИначеЕсли МетаданныеОбъекта = Метаданные.Документы.ПеремещениеТоваров Тогда
		
		Результат.Добавить(ВидыЭД.ТоварнаяНакладная);
		
	Иначе
		ВызватьИсключение ТекстСообщенияОбОшибке;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ПолучитьЗначениеРеквизитаДерева(СтрокаДерева, ИмяРеквизита, ВключатьПодчиненные = Ложь, ДеревоРазбора = Неопределено)
	
	Результат = Неопределено;
	
	Если СтрокаДерева.Строки.Количество() > 0 Тогда 
		НайденнаяСтрока = СтрокаДерева.Строки.Найти(ИмяРеквизита, "Реквизит", ВключатьПодчиненные);
	Иначе // Передали строку с реквизитом
		НайденнаяСтрока = СтрокаДерева;
	КонецЕсли;
	
	Если НайденнаяСтрока <> Неопределено Тогда
		Результат = НайденнаяСтрока.ЗначениеРеквизита;
		
		Если ИмяРеквизита = "СтавкаНДС" ИЛИ ИмяРеквизита = "НалСтВел" Тогда
			Результат = НайтиПеречисление("НДС", Результат);
		Иначе
			// Если реквизит ссылочного типа (передали реквизит ДеревоРазбора), тогда нашли всего лишь индекс строки
			Если ЗначениеЗаполнено(ДеревоРазбора) Тогда 
				НайденнаяСтрока = ДеревоРазбора.Строки.Найти(Результат, "ИндексСтроки", Истина);
				Если НайденнаяСтрока <> Неопределено Тогда
					Результат = НайденнаяСтрока.СсылкаНаОбъект;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция НайтиПеречисление(Наименование, ПредставлениеПеречисления)
	
	НайденноеЗначение = Неопределено;
	Если Наименование = "НДС" Тогда
		ИмяПеречисления = "СтавкиНДС";
		Если НЕ ТипЗнч(ПредставлениеПеречисления)=Тип("ПеречислениеСсылка.СтавкиНДС") Тогда // определяем по числу
			МодульОбменСКонтрагентамиПовтИсп = ОбщегоНазначения.ОбщийМодуль("ОбменСКонтрагентамиПовтИсп");
			Возврат МодульОбменСКонтрагентамиПовтИсп.СтавкаНДСИзСоответствия(ПредставлениеПеречисления); 
		КонецЕсли;
	ИначеЕсли Наименование = "ТипНоменклатуры" Тогда
		ИмяПеречисления = "ТипыНоменклатуры";
	ИначеЕсли Наименование = "ТипыНалогообложенияНДС" Тогда
		ИмяПеречисления = "ТипыНалогообложенияНДС";	
	ИначеЕсли Наименование = "СпособыРасчетаКомиссионногоВознаграждения" Тогда
		ИмяПеречисления = "СпособыРасчетаКомиссионногоВознаграждения";	
	ИначеЕсли Наименование = "ВариантыОплатыКлиентом" Тогда
		ИмяПеречисления = "ВариантыОплатыКлиентом";	
	ИначеЕсли Наименование = "ВариантыОплатыПоставщику" Тогда
		ИмяПеречисления = "ВариантыОплатыПоставщику";			
	ИначеЕсли Наименование = "ФормыОплаты" Тогда
		ИмяПеречисления = "ФормыОплаты";	
	ИначеЕсли Наименование = "СпособРасчета" Тогда
		ИмяПеречисления = "СпособыРасчетаКомиссионногоВознаграждения";	
		Если ПредставлениеПеречисления = "От суммы" Тогда // терм, локализации не подлежит(определение типов фабрик XDTO, см. CML402)
			ПредставлениеПеречисления = НСтр("ru = 'Процент от суммы продажи'");
		ИначеЕсли ПредставлениеПеречисления = "От разницы" Тогда // терм, локализации не подлежит(определение типов фабрик XDTO, см. CML402)
			ПредставлениеПеречисления = НСтр("ru = 'Процент от разности суммы продажи и суммы комитента'");
		КонецЕсли;	
	Иначе
		Возврат НайденноеЗначение;
	КонецЕсли;
	
	Для Каждого ЭлПеречисления Из Метаданные.Перечисления[ИмяПеречисления].ЗначенияПеречисления Цикл
		Если Врег(ЭлПеречисления.Синоним) = Врег(ПредставлениеПеречисления) Тогда
			НайденноеЗначение = Перечисления[ИмяПеречисления][ЭлПеречисления.Имя];
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат НайденноеЗначение;
	
КонецФункции

Процедура ЗагрузитьКаталогТоваров(СтрокаДляЗагрузки, ДеревоРазбора, СсылкаНаВладельца, Записывать)
	
	Если СсылкаНаВладельца = Неопределено Тогда
		Контрагент = Неопределено;
	Иначе
		Контрагент = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СсылкаНаВладельца, "Контрагент");
	КонецЕсли;
	Если ЗначениеЗаполнено(Контрагент) Тогда
		
		СтрокиТЧ = СтрокаДляЗагрузки.Строки.НайтиСтроки(Новый Структура("Реквизит", "СтрокаТЧ"));
		ТаблицаЗагрузки = Новый ТаблицаЗначений;
		ТаблицаЗагрузки.Колонки.Добавить("Идентификатор", ОбщегоНазначенияРТКлиентСервер.ОписаниеТиповСтрока(200));
		
		Для Каждого СтрокаТЧ Из СтрокиТЧ Цикл
			
			ИдентификаторТовара = ЭлектронноеВзаимодействие.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, 
				СтрокаТЧ, "НоменклатураПоставщика.Ид");
			Если ЗначениеЗаполнено(ИдентификаторТовара) Тогда
				
				НовСтрока = ТаблицаЗагрузки.Добавить();
				НовСтрока.Идентификатор = ИдентификаторТовара;
				
			КонецЕсли;
			
			
		КонецЦикла;
		
		Если ТаблицаЗагрузки.Количество() > 0 Тогда
			
			Запрос = Новый Запрос;
			Запрос.Текст = "ВЫБРАТЬ
			|	ТаблицаЗагрузки.Идентификатор КАК Идентификатор
			|ПОМЕСТИТЬ ТаблицаЗагрузки
			|ИЗ
			|	&ТаблицаЗагрузки КАК ТаблицаЗагрузки
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	&Поставщик КАК Поставщик,
			|	&ПустойМагазин КАК Магазин,
			|	НоменклатураПоставщиков.Номенклатура КАК Номенклатура,
			|	НоменклатураПоставщиков.Характеристика КАК Характеристика,
			|	НоменклатураПоставщиков.Упаковка КАК Упаковка,
			|	ТаблицаЗагрузки.Идентификатор КАК Идентификатор,
			|	НоменклатураПоставщиков.Цена КАК Цена,
			|	НоменклатураПоставщиков.ДатаПоследнегоПоступления КАК ДатаПоследнегоПоступления,
			|	НоменклатураПоставщиков.Артикул КАК Артикул
			|ИЗ
			|	ТаблицаЗагрузки КАК ТаблицаЗагрузки
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НоменклатураПоставщиков КАК НоменклатураПоставщиков
			|		ПО НоменклатураПоставщиков.Поставщик = &Поставщик
			|			И ТаблицаЗагрузки.Идентификатор = НоменклатураПоставщиков.Идентификатор";
			Запрос.УстановитьПараметр("ТаблицаЗагрузки", ТаблицаЗагрузки);
			Запрос.УстановитьПараметр("Поставщик", Контрагент);
			Запрос.УстановитьПараметр("ПустойМагазин", Справочники.Магазины.ПустаяСсылка());
			Выборка = Запрос.Выполнить().Выбрать();
			
			ДеревоКартинок = ПолучитьЗначениеРеквизитаДерева(СтрокаДляЗагрузки, "ДеревоКартинок");
			ЕстьКартинки = ДеревоКартинок <> Неопределено;
			Пока Выборка.Следующий() Цикл
				МенеджерЗаписи = РегистрыСведений.НоменклатураПоставщиков.СоздатьМенеджерЗаписи();
				ЗаполнитьЗначенияСвойств(МенеджерЗаписи, Выборка);
				МенеджерЗаписи.Записать(Истина);
				Если ЕстьКартинки Тогда
					СтрокаТовара = ДеревоКартинок.Строки.Найти(Выборка.Идентификатор, "ИдентификаторТовара");
				КонецЕсли;
			КонецЦикла;
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Функция ЗагрузитьПрайсЛист(СтрокаДляЗагрузки, ДеревоРазбора, СсылкаНаВладельца)
	
	СтруктураПоиска = Новый Структура;
	СтруктураПоиска.Вставить("ТипОбъекта", "Контрагенты");
	СтрокиКонтрагента = ДеревоРазбора.Строки.НайтиСтроки(СтруктураПоиска);
	Если СтрокиКонтрагента.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	Если СтрокиКонтрагента[0].Строки.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	Контрагент = СтрокиКонтрагента[0].Строки[0].СсылкаНаОбъект;
	Если НЕ ЗначениеЗаполнено(Контрагент) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ДанныеДляЗагрузки = Новый Структура;
	Товары = Документы.УстановкаЦенНоменклатуры.ПустаяСсылка().Товары.ВыгрузитьКолонки();
	
	СтрокиТЧ = СтрокаДляЗагрузки.Строки.НайтиСтроки(Новый Структура("Реквизит", "СтрокаТЧ"));
	ТаблицаЗагрузки = Новый ТаблицаЗначений;
	ТаблицаЗагрузки.Колонки.Добавить("Идентификатор", ОбщегоНазначенияРТКлиентСервер.ОписаниеТиповСтрока(200));
	ТаблицаЗагрузки.Колонки.Добавить("Цена", ОбщегоНазначенияРТКлиентСервер.ОписаниеТиповЧисла(15, 2));

	Для Каждого СтрокаТЧ Из СтрокиТЧ Цикл
		
		ИдентификаторТовара = ЭлектронноеВзаимодействие.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, 
			СтрокаТЧ, "Ид");
		Если ЗначениеЗаполнено(ИдентификаторТовара) Тогда
			Цена = ЭлектронноеВзаимодействие.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "Цена");
			
			НовСтрока = ТаблицаЗагрузки.Добавить();
			НовСтрока.Идентификатор = ИдентификаторТовара;
			НовСтрока.Цена = Цена;
			
		КонецЕсли;
		
		
	КонецЦикла;

	Если ТаблицаЗагрузки.Количество() > 0 Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	ТаблицаЗагрузки.Идентификатор КАК Идентификатор,
		|	ТаблицаЗагрузки.Цена КАК Цена
		|ПОМЕСТИТЬ ТаблицаЗагрузки
		|ИЗ
		|	&ТаблицаЗагрузки КАК ТаблицаЗагрузки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	&Поставщик КАК Поставщик,
		|	&ПустойМагазин КАК Магазин,
		|	НоменклатураПоставщиков.Номенклатура КАК Номенклатура,
		|	НоменклатураПоставщиков.Характеристика КАК Характеристика,
		|	НоменклатураПоставщиков.Упаковка КАК Упаковка,
		|	ТаблицаЗагрузки.Идентификатор КАК Идентификатор,
		|	ТаблицаЗагрузки.Цена КАК Цена,
		|	НоменклатураПоставщиков.ДатаПоследнегоПоступления КАК ДатаПоследнегоПоступления,
		|	НоменклатураПоставщиков.Артикул КАК Артикул
		|ИЗ
		|	ТаблицаЗагрузки КАК ТаблицаЗагрузки
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НоменклатураПоставщиков КАК НоменклатураПоставщиков
		|		ПО НоменклатураПоставщиков.Поставщик = &Поставщик
		|			И ТаблицаЗагрузки.Идентификатор = НоменклатураПоставщиков.Идентификатор";
		Запрос.УстановитьПараметр("ТаблицаЗагрузки", ТаблицаЗагрузки);
		Запрос.УстановитьПараметр("Поставщик", Контрагент);
		Запрос.УстановитьПараметр("ПустойМагазин", Справочники.Магазины.ПустаяСсылка());
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл
			МенеджерЗаписи = РегистрыСведений.НоменклатураПоставщиков.СоздатьМенеджерЗаписи();
			ЗаполнитьЗначенияСвойств(МенеджерЗаписи, Выборка);
			МенеджерЗаписи.Записать(Истина);
		КонецЦикла;
	КонецЕсли;
	
	Возврат Контрагент;
	
КонецФункции

Функция НесколькоОрганизацийЭДО()
	
	Результат = Ложь;
	
	ИспользоватьНесколькоОрганизаций = ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоОрганизацийРТ");
	
	Если ИспользоватьНесколькоОрганизаций Тогда
		ТекстЗапроса = "ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	УчетныеЗаписиЭДО.Организация КАК Организация
		|ИЗ
		|	РегистрСведений.УчетныеЗаписиЭДО КАК УчетныеЗаписиЭДО
		|ГДЕ
		|	УчетныеЗаписиЭДО.ПринятыУсловияИспользования";
		Запрос = Новый Запрос(ТекстЗапроса);
		Результат = Запрос.Выполнить().Выбрать().Количество() > 1;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Процедура ЗаполнитьКодЕдиницыИзмеренияПоКлассификатору(НоваяСтрока)
	
	НаименованиеЕИ = НоваяСтрока.ЕдиницаИзмерения;
	
	КлассификаторЕИ = Справочники.БазовыеЕдиницыИзмерения.ПолучитьМакет("КлассификаторЕдиницИзмерения");
	
	Область = КлассификаторЕИ.НайтиТекст(
		НаименованиеЕИ, , КлассификаторЕИ.Области.НаименованиеКраткое, Истина, Истина, Истина, Истина);
		
	Если ЗначениеЗаполнено(Область) Тогда
		СтрокаКода = Область.Верх;
		КолонкаКода = 2;
		
		ОбластьКода = КлассификаторЕИ.Область(СтрокаКода, КолонкаКода, СтрокаКода, КолонкаКода);
		Если ЗначениеЗаполнено(ОбластьКода.Текст) Тогда
			НоваяСтрока.ЕдиницаИзмеренияКод = ОбластьКода.Текст;
			
			Если НоваяСтрока.ЕдиницаИзмерения <> НоваяСтрока.ЕдиницаИзмеренияНаименование Тогда
				НоваяСтрока.ЕдиницаИзмеренияНаименование = НоваяСтрока.ЕдиницаИзмерения;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Заполнение документов

Функция СоздатьПерезаполнитьБанковскийСчетКонтрагента(СтрокаОбъекта, ДеревоРазбора)
	
	УстановитьПривилегированныйРежим(Истина);
	
	НачатьТранзакцию();
	
	Попытка
		
		Если ЗначениеЗаполнено(СтрокаОбъекта.СсылкаНаОбъект) Тогда
			
			БлокировкаДанных = Новый БлокировкаДанных;
			ЭлементБлокировкиДанных = БлокировкаДанных.Добавить("Справочник.БанковскиеСчета");
			ЭлементБлокировкиДанных.УстановитьЗначение("Ссылка", СтрокаОбъекта.СсылкаНаОбъект);
			ЭлементБлокировкиДанных.Режим = РежимБлокировкиДанных.Исключительный;
			БлокировкаДанных.Заблокировать();
			
			БанковскийСчет = СтрокаОбъекта.СсылкаНаОбъект.ПолучитьОбъект();
		Иначе
			БанковскийСчет = Справочники.БанковскиеСчета.СоздатьЭлемент();
		КонецЕсли;
		
		БанковскийСчет.НомерСчета = ПолучитьЗначениеРеквизитаДерева(СтрокаОбъекта, "НомерСчета");
		БанковскийСчет.Владелец = ПолучитьЗначениеРеквизитаДерева(СтрокаОбъекта, "Владелец");
		БанковскийСчет.Банк = ПолучитьЗначениеРеквизитаДерева(СтрокаОбъекта, "Банк", , ДеревоРазбора);
		БанковскийСчет.Наименование = СтрокаОбъекта.ОписаниеОбъекта;
		
		БанковскийСчет.ОбменДанными.Загрузка = Истина;
		БанковскийСчет.Записать();
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		
		ТекстОшибки = НСтр("ru = 'Не удалось создать банковский счет контрагента.'")
			+ Символы.ПС + НСтр("ru = 'Подробности см. в Журнале регистрации.'");
		ОбщегоНазначения.СообщитьПользователю(ТекстОшибки);
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Создание элемента справочника Банковские счета.'",
			ОбщегоНазначения.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка,
			БанковскийСчет.Метаданные(),,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
		ВызватьИсключение;
	КонецПопытки;
	
	СсылкаНаОбъект = БанковскийСчет.Ссылка;
	
	Возврат СсылкаНаОбъект;
	
КонецФункции

Функция ОрганизацияПоДаннымЭД(ДеревоДанных, ВидУчастника)
	
	Организация = Неопределено;
	Если ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника") = "ЮЛ" Тогда
		ИНН = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника.ЮЛ.ИНН");
		КПП = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника.ЮЛ.КПП");
		Запрос = Новый Запрос();
		Запрос.Текст = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
			|	Организации.Ссылка
			|ИЗ
			|	Справочник.Организации КАК Организации
			|ГДЕ
			|	Организации.ИНН = &ИНН
			|	И Организации.КПП = &КПП
			|	И НЕ Организации.ПометкаУдаления";
		Запрос.УстановитьПараметр("ИНН", ИНН);
		Запрос.УстановитьПараметр("КПП", КПП);
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			Организация = Выборка.Ссылка;
		КонецЕсли;
		
	ИначеЕсли ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника") = "ИП" Тогда
		ИНН = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника.ИП.ИНН");
		Запрос = Новый Запрос();
		Запрос.Текст = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
			|	Организации.Ссылка
			|ИЗ
			|	Справочник.Организации КАК Организации
			|ГДЕ
			|	Организации.ИНН = &ИНН
			|	И НЕ Организации.ПометкаУдаления";
		Запрос.УстановитьПараметр("ИНН", ИНН);
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			Организация = Выборка.Ссылка;
		КонецЕсли;
		
	ИначеЕсли ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника") = "ИЛ" Тогда
		НаименованиеПолное = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, 
			ВидУчастника + ".ТипУчастника.ИЛ.НаименованиеОрганизации");
		Если ЗначениеЗаполнено(НаименованиеПолное) Тогда
			Запрос = Новый Запрос();
			Запрос.Текст = 
				"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
				|	Организации.Ссылка КАК Ссылка
				|ИЗ
				|	Справочник.Организации КАК Организации
				|ГДЕ
				|	Организации.НаименованиеПолное = &НаименованиеПолное
				|	И НЕ Организации.ПометкаУдаления";
			Запрос.УстановитьПараметр("НаименованиеПолное", НаименованиеПолное);
			
			Выборка = Запрос.Выполнить().Выбрать();
			Если Выборка.Следующий() Тогда
				Организация = Выборка.Ссылка;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Организация;
	
КонецФункции

Функция КонтрагентПоДаннымЭД(ДеревоДанных, ВидУчастника)
	
	Контрагент = Неопределено;
	Если ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника") = "ЮЛ" Тогда
		ИНН = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника.ЮЛ.ИНН");
		КПП = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника.ЮЛ.КПП");
		Запрос = Новый Запрос();
		Запрос.Текст = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
			|	Контрагенты.Ссылка
			|ИЗ
			|	Справочник.Контрагенты КАК Контрагенты
			|ГДЕ
			|	Контрагенты.ИНН = &ИНН
			|	И Контрагенты.КПП = &КПП
			|	И НЕ Контрагенты.ПометкаУдаления";
		Запрос.УстановитьПараметр("ИНН", ИНН);
		Запрос.УстановитьПараметр("КПП", КПП);
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			Контрагент = Выборка.Ссылка;
		КонецЕсли;
		
	ИначеЕсли ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника") = "ИП" Тогда
		ИНН = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника.ИП.ИНН");
		Запрос = Новый Запрос();
		Запрос.Текст = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
			|	Контрагенты.Ссылка
			|ИЗ
			|	Справочник.Контрагенты КАК Контрагенты
			|ГДЕ
			|	Контрагенты.ИНН = &ИНН
			|	И НЕ Контрагенты.ПометкаУдаления";
		Запрос.УстановитьПараметр("ИНН", ИНН);
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			Контрагент = Выборка.Ссылка;
		КонецЕсли;
		
	ИначеЕсли ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника") = "ИЛ" Тогда
		НаименованиеПолное = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, 
			ВидУчастника + ".ТипУчастника.ИЛ.НаименованиеОрганизации");
		Если ЗначениеЗаполнено(НаименованиеПолное) Тогда
			Запрос = Новый Запрос();
			Запрос.Текст = 
				"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
				|	Контрагенты.Ссылка КАК Ссылка
				|ИЗ
				|	Справочник.Контрагенты КАК Контрагенты
				|ГДЕ
				|	Контрагенты.НаименованиеПолное = &НаименованиеПолное
				|	И НЕ Контрагенты.ПометкаУдаления";
			Запрос.УстановитьПараметр("НаименованиеПолное", НаименованиеПолное);
			
			Выборка = Запрос.Выполнить().Выбрать();
			Если Выборка.Следующий() Тогда
				Контрагент = Выборка.Ссылка;
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника") = "ФЛ" Тогда
		ИНН = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника.ФЛ.ИНН");
		
		Фамилия  = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника.ФЛ.Фамилия");
		Имя      = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника.ФЛ.Имя");
		Отчество = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника.ФЛ.Отчество");
		
		ЭлементыИмени = Новый Массив;
		Если ЗначениеЗаполнено(Фамилия) Тогда
			ЭлементыИмени.Добавить(Фамилия);
		КонецЕсли;
		Если ЗначениеЗаполнено(Имя) Тогда
			ЭлементыИмени.Добавить(Имя);
		КонецЕсли;
		Если ЗначениеЗаполнено(Отчество) Тогда
			ЭлементыИмени.Добавить(Отчество);
		КонецЕсли;
		ПолноеНаименование = СтрСоединить(ЭлементыИмени, " ");
		
		Если ЗначениеЗаполнено(ИНН) Или ЗначениеЗаполнено(НаименованиеПолное) Тогда 
			Запрос = Новый Запрос();
			Запрос.Текст = 
				"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
				|	Контрагенты.Ссылка КАК Ссылка
				|ИЗ
				|	Справочник.Контрагенты КАК Контрагенты
				|ГДЕ
				|	Контрагенты.ИНН = &ИНН";
			Если ЗначениеЗаполнено(ИНН) Тогда
				Запрос.УстановитьПараметр("ИНН", ИНН);
			Иначе
				Запрос.Текст = СтрЗаменить(Запрос.Текст, "Контрагенты.ИНН = &ИНН", "Контрагенты.НаименованиеПолное = &НаименованиеПолное");
				Запрос.УстановитьПараметр("НаименованиеПолное", ПолноеНаименование);
			КонецЕсли;
			
			Выборка = Запрос.Выполнить().Выбрать();
			Если Выборка.Следующий() Тогда
				Контрагент = Выборка.Ссылка;
			КонецЕсли;
		КонецЕсли;

	КонецЕсли;
	
	Возврат Контрагент;
	
КонецФункции

Функция БанковскийСчетКонтрагента(Владелец, БИКБанка, НомерСчета)
	
	БанковскийСчет = Справочники.БанковскиеСчета.ПустаяСсылка();
	
	Если НЕ ЗначениеЗаполнено(НомерСчета) Тогда
		Возврат БанковскийСчет;
	КонецЕсли;
	
	БанковскийСчет = Справочники.БанковскиеСчета.НайтиПоРеквизиту("НомерСчета", НомерСчета,, Владелец);
	Если ЗначениеЗаполнено(БанковскийСчет) Тогда
		Возврат БанковскийСчет;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(БИКБанка) Тогда
		Банк = ЭлектронноеВзаимодействиеРТ.НайтиСсылкуНаОбъектПоРеквизиту("КлассификаторБанков", "Код", БИКБанка);
		Если ЗначениеЗаполнено(Банк) Тогда
			НовыйБанковскийСчет = Справочники.БанковскиеСчета.СоздатьЭлемент();
			НовыйБанковскийСчет.Владелец              = Владелец;
			НовыйБанковскийСчет.Банк                  = Банк;
			НовыйБанковскийСчет.НомерСчета            = НомерСчета;
			НовыйБанковскийСчет.Наименование          = НаименованиеБанковскогоСчетаПоУмолчанию(НомерСчета, Строка(Банк));
			
			НовыйБанковскийСчет.ОбменДанными.Загрузка = Истина;
			Попытка
				НовыйБанковскийСчет.Записать();
				БанковскийСчет = НовыйБанковскийСчет.Ссылка;
			Исключение
				ТекстОшибки = СтрШаблон(НСтр("ru = 'Не удалось создать банковский счет контрагента.
					|Номер счета: %1, БИК: %2.'"), НомерСчета, БИКБанка)
					+ Символы.ПС + НСтр("ru = 'Подробности см. в Журнале регистрации.'");
				ОбщегоНазначения.СообщитьПользователю(ТекстОшибки);
				ЗаписьЖурналаРегистрации(НСтр("ru = 'Создание элемента справочника Банковские счета контрагентов.'",
					ОбщегоНазначения.КодОсновногоЯзыка()),
					УровеньЖурналаРегистрации.Ошибка,
					НовыйБанковскийСчет.Метаданные(),,
					ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
				ВызватьИсключение;
			КонецПопытки;
		КонецЕсли;
	КонецЕсли;
	
	Возврат БанковскийСчет;
	
КонецФункции

// Заполняет структуру значениями реквизитов банковского счета.
//
// Параметры:
//  Реквизиты		 - Структура - Структура для заполнения данными банковского счета.
//     * БанковскийСчетСсылка - СправочникСсылка.БанковскиеСчета - Ссылка на банковский счет.
//     * БанкСсылка           - СправочникСсылка.КлассификаторБанков - Ссылка на банк.
//     * НомерСчета           - Строка - Номер расчетного счета.
//     * Банк                 - Строка - Наименование банка.
//     * БИК                  - Строка - БИК банка.
//     * АдресБанка           - Строка - Адрес банка.
//     * КоррСчет             - Строка - Корреспондентский счет.
//  БанковскийСчет	 - СправочникСсылка.БанковскиеСчета - Ссылка на банковский счет.
//
Процедура ЗаполнитьРеквизитыБанковскогоСчета(Реквизиты, БанковскийСчет, ИмяСправочника)
	
	Если Не ЗначениеЗаполнено(БанковскийСчет) Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("БанковскийСчет", БанковскийСчет);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	БанковскиеСчета.Ссылка КАК БанковскийСчетСсылка,
	|	БанковскиеСчета.НомерСчета КАК НомерСчета,
	|	БанковскиеСчета.Банк КАК БанкСсылка,
	|	ВЫБОР
	|		КОГДА БанковскиеСчета.НаименованиеБанка = """"
	|			ТОГДА ЕСТЬNULL(БанковскиеСчета.Банк.Наименование, """")
	|		ИНАЧЕ БанковскиеСчета.НаименованиеБанка
	|	КОНЕЦ КАК Банк,
	|	ВЫБОР
	|		КОГДА БанковскиеСчета.БИКБанка = """"
	|			ТОГДА ЕСТЬNULL(БанковскиеСчета.Банк.Код, """")
	|		ИНАЧЕ БанковскиеСчета.БИКБанка
	|	КОНЕЦ КАК БИК,
	|	ВЫБОР
	|		КОГДА (ВЫРАЗИТЬ(БанковскиеСчета.АдресБанка КАК СТРОКА(500))) = """"
	|			ТОГДА ЕСТЬNULL(БанковскиеСчета.Банк.Город, """") + "", "" + ЕСТЬNULL(БанковскиеСчета.Банк.Адрес, """")
	|		ИНАЧЕ БанковскиеСчета.АдресБанка
	|	КОНЕЦ КАК АдресБанка,
	|	ВЫБОР
	|		КОГДА БанковскиеСчета.КоррСчетБанка = """"
	|			ТОГДА ЕСТЬNULL(БанковскиеСчета.Банк.КоррСчет, """")
	|		ИНАЧЕ БанковскиеСчета.КоррСчетБанка
	|	КОНЕЦ КАК КоррСчет
	|ИЗ
	|	Справочник."+ИмяСправочника+" КАК БанковскиеСчета
	|ГДЕ
	|	БанковскиеСчета.Ссылка = &БанковскийСчет";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Реквизиты.Вставить("БанковскийСчетСсылка", Выборка.БанковскийСчетСсылка);
		Реквизиты.Вставить("БанкСсылка",           Выборка.БанкСсылка);
		Реквизиты.Вставить("НомерСчета",           Выборка.НомерСчета);
		Реквизиты.Вставить("Банк",                 Выборка.Банк);
		Реквизиты.Вставить("БИК",                  Выборка.БИК);
		Реквизиты.Вставить("АдресБанка",           Выборка.АдресБанка);
		Реквизиты.Вставить("КоррСчет",             Выборка.КоррСчет);
	КонецЕсли;
	
КонецПроцедуры

// Формирует текст наименования банковского счета по умолчанию.
//
// Параметры:
//  НомерСчета - Строка - номер банковского счета;
//  ПредставлениеБанка - Строка - наименование банка;
//  ПредставлениеВалюты - Строка - наименование валюты;
//  Валютный - Булево - признак валютного счета.
//  Вариант - Число - Вариант формирования наименования;
// 
// Возвращаемое значение:
//  Строка - наименование по умолчанию.
//
Функция НаименованиеБанковскогоСчетаПоУмолчанию(Знач НомерСчета, ПредставлениеБанка)
	
	ЭлементыНаименования = Новый Массив;
	
	НомерСчета = СокрЛП(НомерСчета);
	
	Если Не ПустаяСтрока(НомерСчета) Тогда
		ЭлементыНаименования.Добавить(Прав(НомерСчета, 4));
	КонецЕсли;
	
	Если Не ПустаяСтрока(ПредставлениеБанка) Тогда
		ЭлементыНаименования.Добавить(ПредставлениеБанка);
	КонецЕсли;
	
	Наименование = СтрСоединить(ЭлементыНаименования, ", ");
	
	Возврат Лев(Наименование, 100);
	
КонецФункции

Функция ТаблицаСведенийОНоменклатуреПоставщика()
	
	СведенияОНоменклатуре = Новый ТаблицаЗначений;
	СведенияОНоменклатуре.Колонки.Добавить("НомерСтроки",
		Новый ОписаниеТипов("Число",Новый КвалификаторыЧисла(10, 0)));
	СведенияОНоменклатуре.Колонки.Добавить("Владелец",
		Новый ОписаниеТипов("СправочникСсылка.Контрагенты"));
	СведенияОНоменклатуре.Колонки.Добавить("Идентификатор",
		Новый ОписаниеТипов("Строка",,Новый КвалификаторыСтроки(110)));
	СведенияОНоменклатуре.Колонки.Добавить("Наименование",
		Новый ОписаниеТипов("Строка",,Новый КвалификаторыСтроки(110)));
	СведенияОНоменклатуре.Колонки.Добавить("ЕдиницаИзмеренияКод",
		Новый ОписаниеТипов("Строка",,Новый КвалификаторыСтроки(4)));
	СведенияОНоменклатуре.Колонки.Добавить("ЕдиницаИзмеренияНаименование",
		Новый ОписаниеТипов("Строка",,Новый КвалификаторыСтроки(25)));
		
	Возврат СведенияОНоменклатуре;
	
КонецФункции

Процедура ЗаписатьДокумент(ДокументОбъект, РежимЗаписиПроведение = Истина)
	
	ДокументОбъект.ДополнительныеСвойства.Вставить("ПроверитьЗаполнениеБезВыводаОшибок");
	
	Если РежимЗаписиПроведение
		И (ДокументОбъект.Проведен ИЛИ (ДокументОбъект.ЭтоНовый() И ДокументОбъект.ПроверитьЗаполнение()))Тогда
		ДокументОбъект.ОбменДанными.Загрузка = Ложь;
		ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
	Иначе
		ДокументОбъект.ОбменДанными.Загрузка = Истина;
		ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
	КонецЕсли;
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// Формирование данных для электронных документов.

//См. ОбменСКонтрагентамиПереопределяемый.ЗаполнитьДанныеПоАкт501ЗаказчикФНС
// Подготавливает данные титула заказчика для электронного документа типа Акт выполненных работ формата 5.01.
//
// Параметры:
//  СсылкаНаЭД - Ссылка - ссылка на ЭД, по которому необходимо сформировать электронный документ.
//  СтруктураЭД - Структура - структура данных для формирования электронного документа.
//  ДеревоДанных - ДеревоЗначений - дерево данных заполнения электронного документа.
//  Отказ - Булево - если нужно отказаться от создания электронного документа, необходимо установить значение в Истина.
//                   После этого дальнейшие действия по формированию документа производиться не будут, поэтому
//                   нужно сформировать сообщения пользователю при необходимости самостоятельно.
//
Процедура ЗаполнитьДанныеПоАкт501ЗаказчикФНС(СсылкаНаЭД, СтруктураЭД, ДеревоДанных, Отказ) Экспорт
	
	ДатаПриемкиРабот = ДатаПолученияТовараПриемкиРабот(СтруктураЭД);
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, 
		"СведенияПоВыполнениюУслуг.ДатаЗаказа", ДатаПриемкиРабот);
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// Запрос данных из базы

#Область НастройкиФормированияДокумента

Функция ЗапросКонструктораДополнительныхПолейШапкиУПД()
	
	ТекстЗапроса = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	СчетФактураВыданный.ДокументОснование.Ссылка КАК ДокументОснование,
		|	СчетФактураВыданный.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.СчетФактураВыданный КАК СчетФактураВыданный
		|ГДЕ
		|	СчетФактураВыданный.Ссылка = &Ссылка";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ЗапросКонструктораДополнительныхПолейШапкиСчетаФактуры()
	
	ТекстЗапроса = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	СчетФактураВыданный.ДокументОснование.Ссылка КАК ДокументОснование,
		|	СчетФактураВыданный.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.СчетФактураВыданный КАК СчетФактураВыданный
		|ГДЕ
		|	СчетФактураВыданный.Ссылка = &Ссылка";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ЗапросКонструктораДополнительныхПолейШапкиПервичногоДокумента()
	
	ТекстЗапроса = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	РеализацияТоваров.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.РеализацияТоваров КАК РеализацияТоваров
		|ГДЕ
		|	РеализацияТоваров.Ссылка = &Ссылка
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ВозвратТоваровПоставщику.Ссылка
		|ИЗ
		|	Документ.ВозвратТоваровПоставщику КАК ВозвратТоваровПоставщику
		|ГДЕ
		|	ВозвратТоваровПоставщику.Ссылка = &Ссылка";
	
	Возврат ТекстЗапроса;
	
КонецФункции

#КонецОбласти


////////////////////////////////////////////////////////////////////////////////
// Создание элементов справочников.

// См. ОбменСКонтрагентамиПереопределяемый.СоздатьОбъектВБД.
// Создает объект в ИБ по дереву параметров и помещает ссылку на него в "НовыйЭлемент".
//
// Параметры:
//  СтрокаОбъекта - Структура - параметры записываемого объекта.
//  ДеревоРазбора - ДеревоЗначений - результат разбора электронного документа.
//  НовыйЭлемент - СправочникСсылка - в этот параметр необходимо вернуть ссылку на созданный элемент справочника.
//
Процедура СоздатьОбъектВБД(СтрокаОбъекта, ДеревоРазбора, НовыйЭлемент) Экспорт
	
	Если СтрокаОбъекта.ОписаниеТипа = "СправочникСсылка.БанковскиеСчета" Тогда
		НовыйЭлемент = СоздатьПерезаполнитьБанковскийСчетКонтрагента(СтрокаОбъекта, ДеревоРазбора);
	КонецЕсли;
	
КонецПроцедуры


//См. ОбменСКонтрагентамиПереопределяемый.СсылкаНаОбъектПоИННКПП
// Поиска элемента справочника по реквизитам ИНН и КПП.
//
// Параметры:
//  ТипОбъекта - Строка - имя справочника в метаданных.
//  ИНН - Строка - ИНН.
//  КПП - Строка - КПП.
//  Организация - СправочникСсылка - ссылка на элемент справочника организации.
//  Ссылка - СправочникСсылка - Ссылка на найденный объект.
//
Процедура СсылкаНаОбъектПоИННКПП(ТипОбъекта, ИНН, КПП, Ссылка) Экспорт
	
	Ссылка = Неопределено;
	
	ИмяМетаданных = ЭлектронноеВзаимодействиеРТПовтИсп.ИмяПрикладногоСправочника(ТипОбъекта);
	
	Запрос = Новый Запрос;
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	Выборка.Ссылка
	|ИЗ
	|	Справочник." + ИмяМетаданных + " КАК Выборка
	|ГДЕ
	|	НЕ Выборка.ПометкаУдаления И
	|	Выборка.ИНН = &ИНН";
	
	Если ЗначениеЗаполнено(КПП) И КПП <> "0" Тогда
		ТекстЗапроса = ТекстЗапроса
			+ " И Выборка.КПП = &КПП";
		Запрос.УстановитьПараметр("КПП", КПП);
	КонецЕсли;
	
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("ИНН", ИНН);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Ссылка = Выборка.Ссылка;
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Просмотр электронных документов.

// См. ОбменСКонтрагентамиПереопределяемый.ФорматСумм
// Заполняет текстовое представление суммы.
//
// Параметры:
//  СуммаКПрописи - Число - сумма, по которой надо получить представление.
//  КодВалюты - Число - код используемой валюты.
//  ЧН - Строка - параметр нулевого значения числа.
//  ЧРГ - Строка - разделитель групп целой части числа.
//  Результат - Строка - текстовое представление суммы, которое будет заполнено. 
Процедура ФорматСумм(СуммаКПрописи, Результат, КодВалюты = Неопределено, ЧН = "", ЧРГ = "") Экспорт
	
	Если Не ЗначениеЗаполнено(СуммаКПрописи) Тогда
		Возврат;
	КонецЕсли;
	
	Валюта = "тг.";
	
	Сумма = ?(СуммаКПрописи < 0, -СуммаКПрописи, СуммаКПрописи);
	ФорматнаяСтрока = "ЧЦ=15;ЧДЦ=2"
		+ ?(НЕ ЗначениеЗаполнено(ЧН), "", ";" + "ЧН=" + ЧН)
		+ ?(НЕ ЗначениеЗаполнено(ЧРГ),"", ";" + "ЧРГ=" + ЧРГ);
	Результат = СокрЛ(Формат(Сумма, ФорматнаяСтрока));
	
	Если ЗначениеЗаполнено(Валюта) Тогда
		Результат = Результат + " " + СокрП(Валюта);
	КонецЕсли;
	
КонецПроцедуры

// См. ОбменСКонтрагентамиПереопределяемый.ПолучитьОтветственногоПоЭД
// Используется для простановки ответственного при создании электронного документа.
//
// Параметры:
//  Контрагент - СправочникСсылка - ссылка на контрагента, по которому надо получить ответственного.
//  Организация - СправочникСсылка.Организации - организация, которая отправляет документ.
//  ДоговорКонтрагента - СправочникСсылка.Договоры - Договор, по которому идет отправка документа.
//  ОтветственныйПоЭД - СправочникСсылка.Пользователи - ответственное лицо.
//
Процедура ПолучитьОтветственногоПоЭД(Контрагент, Организация, ДоговорКонтрагента, ОтветственныйПоЭД) Экспорт
	
	ОтветственныйПоЭД = Пользователи.ТекущийПользователь();
	
КонецПроцедуры

// См. ОбменСКонтрагентамиПереопределяемый.ЭтоФизЛицо
// Возврат признака физического лица.
//
// Параметры:
//  ДанныеКонтрагента - СправочникСсылка - ссылка на элемент справочника.
//  ПризнакФизЛица - Булево - Истина если физическое лицо.
//
Процедура ЭтоФизЛицо(ДанныеКонтрагента, ПризнакФизЛица) Экспорт
	
	СтруктураЮрФизЛицо = Новый Структура("ЮрФизЛицо");
	ЗаполнитьЗначенияСвойств(СтруктураЮрФизЛицо, ДанныеКонтрагента);
	
	Если СтруктураЮрФизЛицо.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ИндивидуальныйПредприниматель
		ИЛИ СтруктураЮрФизЛицо.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ФизЛицо 
		ИЛИ ТипЗнч(ДанныеКонтрагента) = Тип("СправочникСсылка.ФизическиеЛица") Тогда
		ПризнакФизЛица = Истина;
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Механизм прямого обмена между организациями.

// См. ОбменСКонтрагентамиПереопределяемый.ИспользоватьОбменЭДМеждуОрганизациями
// Переопределяет разрешение использовать механизм прямого обмена между организациями.
//
// Параметры:
//  Отказ - Булево - Истина, если использование обмена между организациями запрещено;
//    Ложь - в противном случае;
//    Значение по умолчанию - Ложь;
//
// Пример:
//	Если <Выражение> Тогда
//		Отказ = Истина;
//	КонецЕсли;
//
Процедура ИспользоватьОбменЭДМеждуОрганизациями(Отказ) Экспорт
	
	Отказ = Истина;
	
КонецПроцедуры

Функция ПредставлениеНоменклатурыДляЭД(СвойстваНоменклатуры)
	
	Если ЗначениеЗаполнено(СвойстваНоменклатуры.ХарактеристикаНаименование) Тогда
		ПредставлениеНоменклатуры = СтрШаблон(НСтр("ru = '%1 (%2)'"),
			СвойстваНоменклатуры.НоменклатураНаименование, СвойстваНоменклатуры.ХарактеристикаНаименование);
	Иначе
		ПредставлениеНоменклатуры = СвойстваНоменклатуры.НоменклатураНаименование;
	КонецЕсли;
	
	Возврат ПредставлениеНоменклатуры;
	
КонецФункции

Функция ПолучитьДанныеУчастникаУПД(Знач СведенияОбУчастнике)
	
	КлючДанных = Неопределено;
	СведенияОбУчастнике.Свойство("Ссылка", КлючДанных);
	
	Данные = Новый Структура("СведенияОбУчастнике", СведенияОбУчастнике);
	
	Данные.Вставить("ТипУчастника", Новый Структура);
	
	Если СведенияОбУчастнике.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицо Тогда
		
		Данные.ТипУчастника.Вставить("ЮЛ", Новый Структура);
		Данные.ТипУчастника.ЮЛ.Вставить("НаименованиеОрганизации", СведенияОбУчастнике.ПолноеНаименование);
		Данные.ТипУчастника.ЮЛ.Вставить("ИНН", СведенияОбУчастнике.ИНН);
		Данные.ТипУчастника.ЮЛ.Вставить("КПП", СведенияОбУчастнике.КПП);
		
	ИначеЕсли СведенияОбУчастнике.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицоНеРезидент Тогда
		
		Данные.ТипУчастника.Вставить("ИЛ", Новый Структура);
		Данные.ТипУчастника.ИЛ.Вставить("НаименованиеОрганизации", СведенияОбУчастнике.ПолноеНаименование);
		
	Иначе
		
		Данные.ТипУчастника.Вставить("ИП", Новый Структура);
		Данные.ТипУчастника.ИП.Вставить("ИНН", СведенияОбУчастнике.ИНН);
		Данные.ТипУчастника.ИП.Вставить("Фамилия", СведенияОбУчастнике.Фамилия);
		Данные.ТипУчастника.ИП.Вставить("Имя", СведенияОбУчастнике.Имя);
		Данные.ТипУчастника.ИП.Вставить("Отчество", СведенияОбУчастнике.Отчество);
		
		Если ТипЗнч(СведенияОбУчастнике.Ссылка) = Тип("СправочникСсылка.Организации") Тогда
			
			Свидетельство = СтрШаблон(НСтр("ru = 'Свидетельство №%1 от %2'"),
				СведенияОбУчастнике.СвидетельствоСерияНомер,
				Формат(СведенияОбУчастнике.СвидетельствоДатаВыдачи, "ДЛФ=D"));
				
			Данные.ТипУчастника.ИП.Вставить("СвидетельствоОГосРегистрации", Свидетельство);
			Данные.ТипУчастника.ИП.Вставить("Отчество", СведенияОбУчастнике.Отчество);
			
		КонецЕсли;
		
	КонецЕсли;
	
	ВидКонтактнойИнформации = Справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагента;
	Если ТипЗнч(КлючДанных) = Тип("СправочникСсылка.Организации") Тогда
		ВидКонтактнойИнформации = Справочники.ВидыКонтактнойИнформации.ЮрАдресОрганизации;
	КонецЕсли;
	
	Если ТипЗнч(СведенияОбУчастнике.Ссылка) = Тип("СправочникСсылка.Контрагенты") Тогда
		Если СведенияОбУчастнике.Свойство("Грузополучатель")
			И СведенияОбУчастнике.Свойство("ФактическийАдрес") 
			И ЗначениеЗаполнено(СведенияОбУчастнике.ФактическийАдрес) Тогда
			
			ВидКонтактнойИнформации = Справочники.ВидыКонтактнойИнформации.ФактАдресКонтрагента;
		КонецЕсли;
	ИначеЕсли ТипЗнч(СведенияОбУчастнике.Ссылка) = Тип("СправочникСсылка.Организации") Тогда
		Если СведенияОбУчастнике.Свойство("Грузоотправитель") Тогда
			Если СведенияОбУчастнике.Свойство("ПочтовыйАдрес") 
				И ЗначениеЗаполнено(СведенияОбУчастнике.ПочтовыйАдрес) Тогда
				ВидКонтактнойИнформации = Справочники.ВидыКонтактнойИнформации.ПочтовыйАдресОрганизации;
			ИначеЕсли ЗначениеЗаполнено(СведенияОбУчастнике.ФактическийАдрес) Тогда
				ВидКонтактнойИнформации = Справочники.ВидыКонтактнойИнформации.ФактАдресОрганизации;
			Иначе
				ВидКонтактнойИнформации = Справочники.ВидыКонтактнойИнформации.ЮрАдресОрганизации;
			КонецЕсли;
		КонецЕсли;
	Иначе
		ВидКонтактнойИнформации = Справочники.ВидыКонтактнойИнформации.ЮрАдресОрганизации;
	КонецЕсли;
	
	Данные.Вставить("Адрес", Новый Структура);
	Данные.Адрес.Вставить("АвтоматическиЗаполняемый", Новый Структура);
	Данные.Адрес.АвтоматическиЗаполняемый.Вставить("ОбъектКонтактнойИнформации", КлючДанных);
	Данные.Адрес.АвтоматическиЗаполняемый.Вставить("ВидКонтактнойИнформации", ВидКонтактнойИнформации);
	
	Данные.Вставить("КонтактныеСведения", Новый Структура);
	
	Телефон = "";
	Если СведенияОбУчастнике.Свойство("Телефоны", Телефон) И ЗначениеЗаполнено(Телефон) Тогда
		Данные.КонтактныеСведения.Вставить("Телефон", Телефон);
	КонецЕсли;
	
	ЭлектроннаяПочта = "";
	Если СведенияОбУчастнике.Свойство("ЭлектроннаяПочта", ЭлектроннаяПочта) И ЗначениеЗаполнено(ЭлектроннаяПочта) Тогда
		Данные.КонтактныеСведения.Вставить("ЭлектроннаяПочта", ЭлектроннаяПочта);
	КонецЕсли;
	
	Данные.Вставить("БанковскиеРеквизиты", Новый Структура);
	
	НомерСчета = "";
	Если СведенияОбУчастнике.Свойство("НомерСчета", НомерСчета) И ЗначениеЗаполнено(НомерСчета) Тогда
		
		Данные.БанковскиеРеквизиты.Вставить("НомерСчета", НомерСчета);
		
		Банк = ""; БИК = ""; КоррСчет = "";
		Если СведенияОбУчастнике.Свойство("Банк", Банк) И ЗначениеЗаполнено(Банк) Тогда
			
			Данные.БанковскиеРеквизиты.Вставить("НаименованиеБанка", Банк);
			
		КонецЕсли;
		Если СведенияОбУчастнике.Свойство("БИК", БИК) И ЗначениеЗаполнено(БИК) Тогда
			
			Данные.БанковскиеРеквизиты.Вставить("БИКБанка", БИК);
			
		КонецЕсли;
		Если СведенияОбУчастнике.Свойство("КоррСчет", КоррСчет) И ЗначениеЗаполнено(КоррСчет) Тогда
			
			Данные.БанковскиеРеквизиты.Вставить("КорреспондентскийСчетБанка", КоррСчет);
			
		КонецЕсли;
	КонецЕсли;
	
	КодПоОКПО = "";
	Если СведенияОбУчастнике.Свойство("КодПоОКПО", КодПоОКПО) И ЗначениеЗаполнено(КодПоОКПО) Тогда
		
		Данные.Вставить("КодОКПО", КодПоОКПО);
		
	КонецЕсли;
	
	Возврат Данные;
	
КонецФункции

Процедура ДобавитьОбработкуОшибокВТаблицуУчастниковУПД(ТаблицаУчастников, ПутьКУчастнику = "")
	
	ПутьКПолю = ?(ЗначениеЗаполнено(ПутьКУчастнику), ПутьКУчастнику + ".", "");
	
	Для каждого СтрокаТаблицы Из ТаблицаУчастников Цикл
		
		Сведения = СтрокаТаблицы.СведенияОбУчастнике;
		Если Не ЗначениеЗаполнено(Сведения) Тогда
			Продолжить;
		КонецЕсли;
		
		Участник = ?(ЗначениеЗаполнено(ПутьКУчастнику), СтрокаТаблицы[ПутьКУчастнику], СтрокаТаблицы);
		
		Если Участник.ТипУчастника.Свойство("ЮЛ") Тогда
			
			ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(СтрокаТаблицы,
				ПутьКПолю + "ТипУчастника.ЮЛ.НаименованиеОрганизации", Сведения.Ссылка, "Объект.НаименованиеПолное");
				
			ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(СтрокаТаблицы,
				ПутьКПолю + "ТипУчастника.ЮЛ.ИНН", Сведения.Ссылка, "Объект.ИНН");
				
			ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(СтрокаТаблицы,
				ПутьКПолю + "ТипУчастника.ЮЛ.ИНН", Сведения.Ссылка, "Объект.КПП");
				
		ИначеЕсли Участник.ТипУчастника.Свойство("ИЛ") Тогда
			
			ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(СтрокаТаблицы,
				ПутьКПолю + "ТипУчастника.ИЛ.НаименованиеОрганизации", Сведения.Ссылка, "Объект.НаименованиеПолное");
				
		ИначеЕсли Участник.ТипУчастника.Свойство("ИП") Тогда
			
			ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(СтрокаТаблицы,
				ПутьКПолю + "ТипУчастника.ИП.ИНН", Сведения.Ссылка, "Объект.ИНН");
				
			ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(СтрокаТаблицы,
				ПутьКПолю + "ТипУчастника.ИП.Фамилия", Сведения.Ссылка, "Объект.НаименованиеПолное");
				
			ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(СтрокаТаблицы,
				ПутьКПолю + "ТипУчастника.ИП.Имя", Сведения.Ссылка, "Объект.НаименованиеПолное");
				
			ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(СтрокаТаблицы,
				ПутьКПолю + "ТипУчастника.ИП.Отчество", Сведения.Ссылка, "Объект.НаименованиеПолное");
				
			Если ТипЗнч(Сведения.Ссылка) = Тип("СправочникСсылка.Организации") Тогда
				
				ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(СтрокаТаблицы,
					ПутьКПолю + "ТипУчастника.ИП.СвидетельствоОГосРегистрации", Сведения.Ссылка, "Объект.СвидетельствоСерияНомер");
				
			КонецЕсли;
			
		КонецЕсли;
		
		ПостфиксПоляАдрес = ?(ТипЗнч(Сведения.Ссылка) = Тип("СправочникСсылка.Контрагенты"), "Контрагента", "Организации");
		
		ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(СтрокаТаблицы,
			ПутьКПолю + "Адрес.АвтоматическиЗаполняемый", Сведения.Ссылка, "КонтактнаяИнформацияПолеЮрАдрес" + ПостфиксПоляАдрес);
			
		ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(СтрокаТаблицы,
			ПутьКПолю + "КонтактныеСведения.Телефон", Сведения.Ссылка);
			
		ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(СтрокаТаблицы,
			ПутьКПолю + "КонтактныеСведения.ЭлектроннаяПочта", Сведения.Ссылка);
			
		НомерСчета = "";
		Если Сведения.Свойство("НомерСчета", НомерСчета) И ЗначениеЗаполнено(НомерСчета) Тогда
			
			Если Сведения.Свойство("БанковскийСчетСсылка") Тогда
				ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(СтрокаТаблицы,
					ПутьКПолю + "БанковскиеРеквизиты.НомерСчета", Сведения.БанковскийСчетСсылка, "Объект.НомерСчета");
			КонецЕсли;
				
			Банк = ""; БИК = ""; КоррСчет = "";
			Если Сведения.Свойство("Банк", Банк) И ЗначениеЗаполнено(Банк) Тогда
				Если Сведения.Свойство("БанкСсылка") Тогда
					ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(СтрокаТаблицы,
						ПутьКПолю + "БанковскиеРеквизиты.НаименованиеБанка", Сведения.БанкСсылка, "Объект.Наименование");
				КонецЕсли;
			КонецЕсли;
			Если Сведения.Свойство("БИК", БИК) И ЗначениеЗаполнено(БИК) Тогда
				Если Сведения.Свойство("БанкСсылка") Тогда
					ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(СтрокаТаблицы,
						ПутьКПолю + "БанковскиеРеквизиты.БИКБанка", Сведения.БанкСсылка, "Объект.Код");
				КонецЕсли;
			КонецЕсли;
			Если Сведения.Свойство("КоррСчет", КоррСчет) И ЗначениеЗаполнено(КоррСчет) Тогда
				Если Сведения.Свойство("БанкСсылка") Тогда
					ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(СтрокаТаблицы,
						ПутьКПолю + "БанковскиеРеквизиты.КорреспондентскийСчетБанка", Сведения.БанкСсылка, "Объект.КоррСчет");
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
		КодПоОКПО = "";
		Если Сведения.Свойство("КодПоОКПО", КодПоОКПО) И ЗначениеЗаполнено(КодПоОКПО) Тогда
			ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(СтрокаТаблицы,
				ПутьКПолю + "КодОКПО", Сведения.Ссылка, "Объект.КодПоОКПО");
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ТаблицаТоваров()
	
	ТаблицаТоваров = Новый ТаблицаЗначений;
	
	ТаблицаТоваров.Колонки.Добавить("НомерСтроки");
	ТаблицаТоваров.Колонки.Добавить("Артикул");
	ТаблицаТоваров.Колонки.Добавить("Наименование");
	ТаблицаТоваров.Колонки.Добавить("Номенклатура");
	ТаблицаТоваров.Колонки.Добавить("Характеристика");
	ТаблицаТоваров.Колонки.Добавить("БазоваяЕдиницаСсылка");
	ТаблицаТоваров.Колонки.Добавить("БазоваяЕдиницаКод");
	ТаблицаТоваров.Колонки.Добавить("БазоваяЕдиницаНаименование");
	ТаблицаТоваров.Колонки.Добавить("БазоваяЕдиницаНаименованиеПолное");
	ТаблицаТоваров.Колонки.Добавить("БазоваяЕдиницаМеждународноеСокращение");
	ТаблицаТоваров.Колонки.Добавить("Количество");
	ТаблицаТоваров.Колонки.Добавить("ЕдиницаИзмерения");
	ТаблицаТоваров.Колонки.Добавить("ЕдиницаИзмеренияКодПоОКЕИ");
	ТаблицаТоваров.Колонки.Добавить("ЕдиницаИзмеренияКоэффициент");
	ТаблицаТоваров.Колонки.Добавить("НДСУчтеноВСумме");
	ТаблицаТоваров.Колонки.Добавить("Цена");
	ТаблицаТоваров.Колонки.Добавить("ЦенаПродажи");
	ТаблицаТоваров.Колонки.Добавить("СтавкаНДС");
	ТаблицаТоваров.Колонки.Добавить("СуммаНДС");
	ТаблицаТоваров.Колонки.Добавить("СуммаПродажи");
	ТаблицаТоваров.Колонки.Добавить("Сумма");
	ТаблицаТоваров.Колонки.Добавить("СуммаВознаграждения");
	ТаблицаТоваров.Колонки.Добавить("СуммаСНДС");
	ТаблицаТоваров.Колонки.Добавить("ДополнительныеРеквизиты");
	ТаблицаТоваров.Колонки.Добавить("ПокупательСсылка");
	ТаблицаТоваров.Колонки.Добавить("Сопоставление");
	ТаблицаТоваров.Колонки.Добавить("ИдентификаторНоменклатурыПоставщика");
	
	Возврат ТаблицаТоваров;
	
КонецФункции

Функция СтруктураАдресаФНС()
	
	СтруктураАдреса = Новый Структура;
	
	СтруктураАдреса.Вставить("Индекс");
	СтруктураАдреса.Вставить("КодРегион");
	СтруктураАдреса.Вставить("Район");
	СтруктураАдреса.Вставить("Город");
	СтруктураАдреса.Вставить("НаселПункт");
	СтруктураАдреса.Вставить("Улица");
	СтруктураАдреса.Вставить("Дом");
	СтруктураАдреса.Вставить("Корпус");
	СтруктураАдреса.Вставить("Кварт");
	СтруктураАдреса.Вставить("ОбязательныеПоля", "КодРегион");
	
	ТипыАдресов = Новый СписокЗначений;
	ТипыАдресов.Добавить(СтруктураАдреса, "Структурированный", Истина);
	ТипыАдресов.Добавить(Новый Структура("КодСтраны, АдресСтрокой"), "Произвольный", Ложь);
	ТипыАдресов.Добавить(Новый Структура("КодСтраны, АдресСтрокой"), "Иностранный", Ложь);
	
	Возврат ТипыАдресов;
	
КонецФункции

Функция ВыполнятьПроверкуСопоставленияНоменклатуры()
	
	Возврат Ложь;
	
КонецФункции

Функция ДатаПолученияТовараПриемкиРабот(СтруктураЭД)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	|	ЭлектронныйДокументВходящийДокументыОснования.ДокументОснование КАК ДокументОснование
	|ПОМЕСТИТЬ ВТ_Основание
	|ИЗ
	|	Документ.ЭлектронныйДокументВходящий.ДокументыОснования КАК ЭлектронныйДокументВходящийДокументыОснования
	|ГДЕ
	|	ЭлектронныйДокументВходящийДокументыОснования.Ссылка = &ВладелецЭД
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПоступлениеТоваров.Дата КАК Дата
	|ИЗ
	|	Документ.ПоступлениеТоваров КАК ПоступлениеТоваров
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Основание КАК ВТ_Основание
	|		ПО ПоступлениеТоваров.Ссылка = ВТ_Основание.ДокументОснование";
	Запрос.УстановитьПараметр("ВладелецЭД", СтруктураЭД.ВладелецЭД);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() И ЗначениеЗаполнено(Выборка.Дата) Тогда
		ДатаПолучения = Выборка.Дата;
	Иначе
		ДатаПолучения = ТекущаяДатаСеанса();
	КонецЕсли;
	
	Возврат ДатаПолучения;
	
КонецФункции

Функция ЭтоКорректировочныйДокумент(СсылкаНаОбъект)
	
	Результат = Ложь;
	
	Если ТипЗнч(СсылкаНаОбъект) = Тип("ДокументСсылка.СчетФактураПолученный") Тогда
		Если СсылкаНаОбъект.Пустая() Тогда
			Результат = Ложь;
		Иначе
			Результат = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СсылкаНаОбъект, "Корректировочный");
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Процедура ЗавершениеЗагрузкиИЗаписьДокумента(СсылкаНаВладельца, ДокументОбъект, Записывать)
	
	Если Записывать Тогда
		Попытка
			ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
		Исключение
			СтрокаОшибки = ОписаниеОшибки();
			ТекстСообщения = НСтр("ru = 'Не удалось записать документ %1 по причине:'");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, ДокументОбъект);
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения + Символы.ПС + СтрокаОшибки);
		КонецПопытки;
		СсылкаНаВладельца = ДокументОбъект.Ссылка;
	Иначе // если функция вызвана из формы "Обработки.ОбменСКонтрагентами.ФормаЗагрузкиПросмотраЭД"
		СсылкаНаВладельца = ДокументОбъект;
	КонецЕсли;
	
КонецПроцедуры

Функция СтруктураСопоставленияНоменклатуры()
	
	Сопоставление = Новый Структура;
	
	Сопоставление.Вставить("НоменклатураИБ");
	Сопоставление.Вставить("ХарактеристикаИБ");
	Сопоставление.Вставить("УпаковкаИБ");
	Сопоставление.Вставить("Наименование");
	Сопоставление.Вставить("Характеристика");
	Сопоставление.Вставить("ЕдиницаИзмерения");
	Сопоставление.Вставить("ЕдиницаИзмеренияКод");
	Сопоставление.Вставить("Артикул");
	Сопоставление.Вставить("СтавкаНДС");
	Сопоставление.Вставить("Штрихкод");
	Сопоставление.Вставить("ШтрихкодКомбинации");
	Сопоставление.Вставить("ШтрихкодыНоменклатуры");
	
	Возврат Сопоставление;
	
КонецФункции

// Подготавливает данные для сопоставления номенклатуры для передачи в электронном документе.
// Добавляет автоматически рассчитываемую информацию, а также добавляет специальный префикс,
// отличающий информацию для сопоставления от прочих доп. данных.
//
// Параметры:
//  Сопоставление - Структура - данные для сопоставления извлеченные из дерева ЭД и требующие передачи в ЭД.
//
// Возвращаемое значение:
//  Структура - данные для сопоставления, подготовленные для передачи в доп. данных ЭД.
//
Функция СопоставлениеНоменклатурыДляЭлектронногоДокументаCML(СтрокаТовара, Штрихкоды)
	
	Сопоставление = СтруктураСопоставленияНоменклатуры();
	
	Если ЗначениеЗаполнено(СтрокаТовара.ИдентификаторНоменклатурыПоставщика) Тогда
		Сопоставление.Вставить("Идентификатор", СтрокаТовара.ИдентификаторНоменклатурыПоставщика);
		Сопоставление.НоменклатураИБ = СтрокаТовара.Номенклатура;
		Сопоставление.ХарактеристикаИБ = СтрокаТовара.Характеристика;
		Сопоставление.УпаковкаИБ = СтрокаТовара.ЕдиницаИзмерения;
	Иначе 
		Сопоставление.НоменклатураИБ = СтрокаТовара.НоменклатураИБ;
		Сопоставление.ХарактеристикаИБ = СтрокаТовара.ХарактеристикаИБ;
		Сопоставление.УпаковкаИБ = СтрокаТовара.УпаковкаИБ;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Штрихкоды) Тогда
		ОтборКомбинации = Новый Структура("Номенклатура,Характеристика,ЕдиницаИзмерения");
		ЗаполнитьЗначенияСвойств(ОтборКомбинации, СтрокаТовара);
		НайденныеСтрокиКомбинации = Штрихкоды.НайтиСтроки(ОтборКомбинации);
		Для каждого СтрокаШтрихкода Из НайденныеСтрокиКомбинации Цикл
			Сопоставление.Штрихкод = СтрокаШтрихкода.Штрихкод;
			Сопоставление.ШтрихкодКомбинации = СтрокаШтрихкода.Штрихкод;
			Прервать;
		КонецЦикла;
		
		ОтборНоменклатуры = Новый Структура("Номенклатура");
		ЗаполнитьЗначенияСвойств(ОтборНоменклатуры, СтрокаТовара);
		НайденныеСтрокиНоменклатуры = Штрихкоды.НайтиСтроки(ОтборНоменклатуры);
		ШтрихкодыНоменклатуры = Новый Массив;
		Для каждого СтрокаШтрихкода Из НайденныеСтрокиНоменклатуры Цикл
			ШтрихкодыНоменклатуры.Добавить(СтрокаШтрихкода.Штрихкод);
		КонецЦикла;
		Сопоставление.ШтрихкодыНоменклатуры = ШтрихкодыНоменклатуры;
	КонецЕсли;
	
	Сопоставление.Наименование = СтрокаТовара.Наименование;
	Сопоставление.Характеристика = Строка(СтрокаТовара.Характеристика);
	Сопоставление.ЕдиницаИзмерения = Строка(СтрокаТовара.ЕдиницаИзмерения);
	Сопоставление.ЕдиницаИзмеренияКод = СтрокаТовара.ЕдиницаИзмеренияКод;
	Сопоставление.Артикул = СтрокаТовара.Артикул;
	Сопоставление.СтавкаНДС = СтрокаТовара.СтавкаНДС;
	
	Возврат Сопоставление;
	
КонецФункции

// Подготавливает данные для сопоставления номенклатуры для передачи в электронном документе.
// Добавляет автоматически рассчитываемую информацию, а также добавляет специальный префикс,
// отличающий информацию для сопоставления от прочих доп. данных.
//
// Параметры:
//  Сопоставление - Структура - данные для сопоставления извлеченные из дерева ЭД и требующие передачи в ЭД.
//
// Возвращаемое значение:
//  Структура - данные для сопоставления, подготовленные для передачи в доп. данных ЭД.
//
Функция СопоставлениеНоменклатурыДляЭлектронногоДокументаФНС(СтрокаТовара, Штрихкоды)
	
	Сопоставление = СтруктураСопоставленияНоменклатуры();
	
	Если ЗначениеЗаполнено(СтрокаТовара.ИдентификаторНоменклатурыПоставщика) Тогда
		Сопоставление.Вставить("Идентификатор", СтрокаТовара.ИдентификаторНоменклатурыПоставщика);
		Сопоставление.НоменклатураИБ = СтрокаТовара.Номенклатура;
		Сопоставление.ХарактеристикаИБ = СтрокаТовара.Характеристика;
		Сопоставление.УпаковкаИБ = СтрокаТовара.ЕдиницаИзмерения;
	Иначе 
		Сопоставление.НоменклатураИБ = СтрокаТовара.НоменклатураИБ;
		Сопоставление.ХарактеристикаИБ = СтрокаТовара.ХарактеристикаИБ;
		Сопоставление.УпаковкаИБ = СтрокаТовара.УпаковкаИБ;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Штрихкоды) Тогда
		ОтборКомбинации = Новый Структура("Номенклатура,Характеристика,ЕдиницаИзмерения");
		ЗаполнитьЗначенияСвойств(ОтборКомбинации, СтрокаТовара);
		НайденныеСтрокиКомбинации = Штрихкоды.НайтиСтроки(ОтборКомбинации);
		Для каждого СтрокаШтрихкода Из НайденныеСтрокиКомбинации Цикл
			Сопоставление.Штрихкод = СтрокаШтрихкода.Штрихкод;
			Сопоставление.ШтрихкодКомбинации = СтрокаШтрихкода.Штрихкод;
			Прервать;
		КонецЦикла;
		
		ОтборНоменклатуры = Новый Структура("Номенклатура");
		ЗаполнитьЗначенияСвойств(ОтборНоменклатуры, СтрокаТовара);
		НайденныеСтрокиНоменклатуры = Штрихкоды.НайтиСтроки(ОтборНоменклатуры);
		ШтрихкодыНоменклатуры = Новый Массив;
		Для каждого СтрокаШтрихкода Из НайденныеСтрокиНоменклатуры Цикл
			ШтрихкодыНоменклатуры.Добавить(СтрокаШтрихкода.Штрихкод);
		КонецЦикла;
		Сопоставление.ШтрихкодыНоменклатуры = ШтрихкодыНоменклатуры;
	КонецЕсли;
	
	Сопоставление.Наименование = СтрокаТовара.НоменклатураНаименование;
	Сопоставление.Характеристика = Строка(СтрокаТовара.ХарактеристикаНаименование);
	Сопоставление.ЕдиницаИзмерения = Строка(СтрокаТовара.ЕдиницаИзмеренияНаименование);
	Сопоставление.ЕдиницаИзмеренияКод = СтрокаТовара.ЕдиницаИзмеренияКод;
	Сопоставление.Артикул = СтрокаТовара.НоменклатураАртикул;
	Сопоставление.СтавкаНДС = СтрокаТовара.СтавкаНДС;
	
	Возврат Сопоставление;
	
КонецФункции

Функция ПолучитьАдресПоСкладу(Склад) Экспорт
	
	Результат = Новый Структура("Представление, Значение");
	
	АдресСклада = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(
		Склад.Магазин, Справочники.ВидыКонтактнойИнформации.ФактАдресМагазина, ТекущаяДатаСеанса(), Ложь);
	
	Если ТипЗнч(АдресСклада) = Тип("ТаблицаЗначений") И АдресСклада.Количество() > 0 Тогда
		ЗаполнитьЗначенияСвойств(Результат, АдресСклада[0]);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Процедура ЗаполнитьТаблицуРезультатаПриемкиАктаОРасхожденияхСМаркировкой(Приемник, ВыборкаТовары, ТаблицаМаркировки, НайденныеСтроки)
	
	ЦенаВключаетНДС = ВыборкаТовары.ЦенаВключаетНДС;
	Количество = 0;
	Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
		Количество = Количество + НайденнаяСтрока.Количество;
	КонецЦикла;
	Сумма = Количество * ВыборкаТовары.Цена;
	СуммаНДС = Окр(ОбработкаТабличнойЧастиТоварыКлиентСервер.СуммаНДС(Сумма, ВыборкаТовары.СтавкаНДС, ЦенаВключаетНДС), 2, РежимОкругления.Окр15как20);
	
	Приемник.Вставить("Количество", Количество);
	Приемник.Вставить("СуммаНДС", СуммаНДС);
	Приемник.Вставить("СуммаСНДС", ?(ЦенаВключаетНДС, Сумма, Сумма + СуммаНДС));
	
	ЭлектронноеВзаимодействиеИСМП.ЗаполнитьСведенияОМаркировкеАктОРасхождениях_2019(Приемник, ВыборкаТовары, ТаблицаМаркировки, "КоличествоИтого");
	
КонецПроцедуры

Процедура ЗаполнитьТаблицуРезультатаПриемкиАктаОРасхожденияхБезМаркировки(ВыборкаТовары, НоваяСтрока)
	
	Если ВыборкаТовары.Количество > ВыборкаТовары.КоличествоПоДокументу Тогда
		НоваяСтрока.Излишки.Вставить("Количество", ВыборкаТовары.Количество - ВыборкаТовары.КоличествоПоДокументу);
	ИначеЕсли ВыборкаТовары.Количество < ВыборкаТовары.КоличествоПоДокументу Тогда
		НоваяСтрока.Недостача.Вставить("Количество", ВыборкаТовары.КоличествоПоДокументу - ВыборкаТовары.Количество);
	КонецЕсли;
	
	Если ВыборкаТовары.СуммаНДС > ВыборкаТовары.СуммаНДСПоДокументу Тогда
		НоваяСтрока.Излишки.Вставить("СуммаНДС", ВыборкаТовары.СуммаНДС - ВыборкаТовары.СуммаНДСПоДокументу);
	ИначеЕсли ВыборкаТовары.СуммаНДС < ВыборкаТовары.СуммаНДСПоДокументу Тогда
		НоваяСтрока.Недостача.Вставить("СуммаНДС", ВыборкаТовары.СуммаНДСПоДокументу - ВыборкаТовары.СуммаНДС);
	КонецЕсли;
	
	Если ВыборкаТовары.СуммаСНДС > ВыборкаТовары.СуммаСНДСПоДокументу Тогда
		НоваяСтрока.Излишки.Вставить("СуммаСНДС", ВыборкаТовары.СуммаСНДС - ВыборкаТовары.СуммаСНДСПоДокументу);
	ИначеЕсли ВыборкаТовары.СуммаСНДС < ВыборкаТовары.СуммаСНДСПоДокументу Тогда
		НоваяСтрока.Недостача.Вставить("СуммаСНДС", ВыборкаТовары.СуммаСНДСПоДокументу - ВыборкаТовары.СуммаСНДС);
	КонецЕсли;
	
КонецПроцедуры

// Записывает штрихкоды номенклатуры при создании по данным контрагента.
//
// Параметры:
//  Номенклатура - СправочникСсылка - ссылка на элемент справочника номенклатура.
//  Штрихкоды - Строка - штрихкоды номенклатуры переданные контрагентом разделенные запятой.
//
Процедура ЗаписатьШтрикходыНоменклатуры(Номенклатура, Штрихкоды) Экспорт
	
	Если НЕ ЗначениеЗаполнено(Штрихкоды) Тогда
		Возврат;
	КонецЕсли;

	МассивШтрихкодов = СтрРазделить(Штрихкоды, ",", Ложь);
	Для каждого Штрихкод Из МассивШтрихкодов Цикл
		МенеджерЗаписи              = РегистрыСведений.Штрихкоды.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.Владелец     = Номенклатура;
		МенеджерЗаписи.Штрихкод     = Штрихкод;
		МенеджерЗаписи.ТипШтрихкода = ПодключаемоеОборудованиеРТ.ТипШтрихкода(Штрихкод);
		
		МенеджерЗаписи.Записать();
	КонецЦикла;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Механизм однократной сделки.

// См. ОбменСКонтрагентамиПереопределяемый.СписокТиповДокументовПоТипуЭлектронногоДокумента
// Выполняет заполнение списка документов по виду электронного документа.
//
// Параметры:
//  ВидЭД           - Перечисления   - вид электронного документа;
//  СписокВозврата  - СписокЗначений - список ссылок на документы информационной базы.
//
Процедура СписокТиповДокументовПоТипуЭлектронногоДокумента(ВидЭД, СписокВозврата) Экспорт
	
	ВидыЭД = ОбменСКонтрагентами.ТипыДокументов();
	Если ВидЭД = ВидыЭД.ТоварнаяНакладная Тогда
		
		СписокВозврата.Добавить(Документы.ПоступлениеТоваров.ПустаяСсылка(),
			Метаданные.Документы.ПоступлениеТоваров.Представление());
		
	ИначеЕсли ВидЭД = ВидыЭД.СчетФактура ИЛИ ВидЭД = ВидыЭД.КорректировочныйСчетФактура Тогда
		СписокВозврата.Добавить(Документы.СчетФактураПолученный.ПустаяСсылка(),
			Метаданные.Документы.СчетФактураПолученный.Представление());
		
	ИначеЕсли ВРег(ВидЭД) = ВРег("РеквизитыОрганизации") Тогда
		СписокВозврата.Добавить(Справочники.Контрагенты.ПустаяСсылка(),
			Метаданные.Справочники.Контрагенты.Представление());
		
	КонецЕсли;
	
КонецПроцедуры

// См. ОбменСКонтрагентамиПереопределяемый.СпособыОтраженияВУчетеТипаЭлектронногоДокумента
// Возвращает список имен документов доступных для создания при загрузке электронного документа.
//
// Параметры:
//  ВидЭД			 - Перечисление.ВидыЭД - вид электронного документа
//  СписокСпособовОбработки - Строка - список для добавления операций по отражению электронного документа.
//
Процедура СпособыОтраженияВУчетеТипаЭлектронногоДокумента(ВидЭД, СписокСпособовОбработки) Экспорт 
	
	ВидыЭД = ОбменСКонтрагентами.ТипыДокументов();
	Если ВидЭД = ВидыЭД.АктВыполненныхРабот Тогда
		
		СписокСпособовОбработки.Добавить("ПоступлениеТоваров", НСтр("ru = 'Поступление товаров'"), Истина);
		
	ИначеЕсли ВидЭД = ВидыЭД.ТоварнаяНакладная Тогда
		
		СписокСпособовОбработки.Добавить("ПоступлениеТоваров", НСтр("ru = 'Поступление товаров'"), Истина);
		Если НесколькоОрганизацийЭДО() Тогда
			СписокСпособовОбработки.Добавить("ПеремещениеТоваров", НСтр("ru = 'Перемещение товаров (между организациями)'"), Истина);
		КонецЕсли;
		
	ИначеЕсли ВидЭД = ВидыЭД.КаталогТоваров Тогда
		
		СписокСпособовОбработки.Добавить("НоменклатураПоставщиков", НСтр("ru = 'Номенклатура поставщиков'"), Истина);
		
	ИначеЕсли ВидЭД = ВидыЭД.ПрайсЛист Тогда
		
		СписокСпособовОбработки.Добавить("НоменклатураПоставщиков", НСтр("ru = 'Номенклатура поставщиков'"), Истина);
		
	ИначеЕсли ВидЭД = ВидыЭД.ОтчетОПродажахКомиссионногоТовара Тогда
		
		СписокСпособовОбработки.Добавить("ОтчетКомитентуОПродажах", НСтр("ru = 'Отчет комитенту о продажах'"), Истина);
		
	ИначеЕсли ВидЭД = ВидыЭД.ОтчетОСписанииКомиссионногоТовара Тогда
		
		СписокСпособовОбработки.Добавить("ОтчетКомитентуОСписании", НСтр("ru = 'Отчет комитенту о списании'"), Истина);
		
	ИначеЕсли ВидЭД = ВидыЭД.ПередачаТоваровМеждуОрганизациями Тогда	
		
		СписокСпособовОбработки.Добавить("ПередачаТоваровМеждуОрганизациями", 
			НСтр("ru = 'Передача товаров между организациями'"), Истина);
		
	ИначеЕсли ВидЭД = ВидыЭД.СчетФактура Тогда
		
		СписокСпособовОбработки.Добавить("СчетФактураПолученный", НСтр("ru = 'Счет фактура полученный'"), Истина);
		
	ИначеЕсли ВидЭД = ВидыЭД.КорректировочныйСчетФактура Тогда
		
		СписокСпособовОбработки.Добавить("СчетФактураПолученный", 
			НСтр("ru = 'Счет фактура полученный (корректировка)'"), Истина);
		
	КонецЕсли;
	
КонецПроцедуры

// См. ОбменСКонтрагентамиПереопределяемый.СоответствиеИсходящихТиповЭлектронныхДокументовДокументамИБ
// Заполняет соответствие исходящих видов электронных документов и представлений документов информационной базы,
// на основании которых они формируются.
//
// Параметры:
//  СоответствиеВидовЭДДокументамИБ - Соответствие - перечень видов электронных документов.
//    - Соответствие - с свойствами:
//    * Ключ             - Перечисление.ВидыЭД - вид электронного документа.
//    * Значение         - Строка - представление документа информационной базы (хоз. операции).
//
Процедура СоответствиеИсходящихТиповЭлектронныхДокументовДокументамИБ(СоответствиеВидовЭДДокументамИБ) Экспорт 
	
	ВидыЭД = ОбменСКонтрагентами.ТипыДокументов();
	СоответствиеВидовЭДДокументамИБ.Вставить(ВидыЭД.СчетФактура, НСтр("ru = 'Счет-фактура выданный'"));
	СоответствиеВидовЭДДокументамИБ.Вставить(ВидыЭД.КорректировочныйСчетФактура, 
		НСтр("ru = 'Счет-фактура выданный (корректировка)'"));
	СоответствиеВидовЭДДокументамИБ.Вставить(ВидыЭД.ЗаказТовара, НСтр("ru = 'Заказ поставщику'"));
	СоответствиеВидовЭДДокументамИБ.Вставить(ВидыЭД.ТоварнаяНакладная, 
		НСтр("ru = 'Реализация товаров'"));
	СоответствиеВидовЭДДокументамИБ.Вставить(ВидыЭД.ТоварнаяНакладная, 
		НСтр("ru = 'Реализация, Возврат товаров поставщику, Перемещение товаров'"));
	СоответствиеВидовЭДДокументамИБ.Вставить(ВидыЭД.ОтчетОПродажахКомиссионногоТовара, 
		НСтр("ru = 'Отчет комитенту о продажах'"));
	СоответствиеВидовЭДДокументамИБ.Вставить(ВидыЭД.ОтчетОСписанииКомиссионногоТовара, 
		НСтр("ru = 'Отчет комитенту о списании'"));
	СоответствиеВидовЭДДокументамИБ.Вставить(ВидыЭД.КаталогТоваров,
		НСтр("ru = 'Каталог товаров'"));
	СоответствиеВидовЭДДокументамИБ.Вставить(ВидыЭД.АктОРасхождениях,
		НСтр("ru = 'Поступление товаров'"));
	СоответствиеВидовЭДДокументамИБ.Вставить(ВидыЭД.КоммерческоеПредложение,
		НСтр("ru = 'Коммерческое предложение'"));
		
	СоответствиеВидовЭДДокументамИБ.Вставить(ВидыЭД.УПД,  НСтр("ru = 'Накладные, счет-фактуры'"));
	
КонецПроцедуры

#КонецОбласти


