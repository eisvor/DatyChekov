
#Область ПрограммныйИнтерфейс

#Область ЗаказыПокупателей

// Проверяет заполненность реквизитов, необходимых для отмены строк в таблице.
//
// Параметры:
//	Документ                    - ДокументОбъект, для которого выполняются проверки.
//	ТабличнаяЧасть              - ДанныеФормыКоллекция - табличная часть, в которой необходимо осуществить проверку.
//	ПредставлениеТабличнойЧасти - Строка - представление табличной части для информирования пользователя.
//
// Возвращаемое значение:
//	Булево
//	Ложь, если необходимые данные не заполнены.
//
Функция НеобходимоЗаполнениеПричиныОтменыВыделенныхСтрок(ТабличнаяЧасть, ПредставлениеТабличнойЧасти, ВыделенныеСтроки) Экспорт
	
	Если ТабличнаяЧасть.Количество() = 0 Тогда
		
		ТекстПредупреждения = НСтр("ru='В документе не заполнена таблица %ПредставлениеТабличнойЧасти%. Строки не могут быть отменены'");
		ТекстПредупреждения = СтрЗаменить(ТекстПредупреждения, "%ПредставлениеТабличнойЧасти%", ПредставлениеТабличнойЧасти);
		ПоказатьПредупреждение(,ТекстПредупреждения);
		Возврат Ложь;
		
	ИначеЕсли ВыделенныеСтроки.Количество() = 0 Тогда
		
		ПоказатьПредупреждение(,НСтр("ru='В таблице отсутствуют выделенные строки. Выделите строки для отмены'"));
		Возврат Ложь;
		
	КонецЕсли;
	
	Возврат Истина;

КонецФункции

// Устанавливает у выделенных в таблице строк признак Отменено и заполняет причину отмены.
//
// Параметры:
//	ТабличнаяЧасть - ДанныеФормыКоллекция - табличная часть, в которой необходимо осуществить проверку.
//	ВыделенныеСтроки - Массив - массив выделенных пользователем строк табличной части.
//	ПричинаОтмены - СправочникСсылка.ПричиныОтменыЗаказовКлиентов - причина, по которой отменяются строки.
//	СтруктураДействийСИзмененнымиСтроками - Структура - Структура действий с измененными строками.
//
Процедура ОтменитьВыделенныеСтроки(ТабличнаяЧасть, ВыделенныеСтроки, ПричинаОтмены, СтруктураДействийСИзмененнымиСтроками = Неопределено) Экспорт
	
	Для Каждого ТекСтрока Из ВыделенныеСтроки Цикл
		
		СтрокаТаблицы = ТабличнаяЧасть.НайтиПоИдентификатору(ТекСтрока);
		
		Если СтрокаТаблицы <> Неопределено Тогда
			
			Если Не СтрокаТаблицы.Отменено Тогда
				СтрокаТаблицы.Отменено = Истина;
			КонецЕсли;
			
			Если СтрокаТаблицы.ПричинаОтмены <> ПричинаОтмены Тогда
				СтрокаТаблицы.ПричинаОтмены = ПричинаОтмены;
			КонецЕсли;
			
			Если СтруктураДействийСИзмененнымиСтроками <> Неопределено Тогда
				ОбработкаТабличнойЧастиТоварыКлиент.ОбработатьСтрокуТЧКлиент(СтрокаТаблицы, СтруктураДействийСИзмененнымиСтроками, Неопределено);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Устанавливает у выделенных в таблице строк признак Отменено и заполняет причину отмены.
//
// Параметры:
//	ТабличнаяЧасть - ДанныеФормыКоллекция - табличная часть, в которой необходимо осуществить проверку.
//	ВыделенныеСтроки - Массив - массив выделенных пользователем строк табличной части.
//	ПричинаОтмены - СправочникСсылка.ПричиныОтменыЗаказовКлиентов - причина, по которой отменяются строки.
//	СтруктураДействийСИзмененнымиСтроками - Структура - Структура действий с измененными строками.
//
Процедура ОтменитьВыделенныеНеЗарезервированныеСтроки(ТабличнаяЧасть, ВыделенныеСтроки, ПричинаОтмены, СтруктураДействийСИзмененнымиСтроками = Неопределено) Экспорт
	
	Для Каждого ТекСтрока Из ВыделенныеСтроки Цикл
		
		СтрокаТаблицы = ТабличнаяЧасть.НайтиПоИдентификатору(ТекСтрока);
		
		Если СтрокаТаблицы <> Неопределено 
			И НЕ СтрокаТаблицы.Резервировать Тогда
			
			Если Не СтрокаТаблицы.Отменено Тогда
				СтрокаТаблицы.Отменено = Истина;
			КонецЕсли;
			
			Если СтрокаТаблицы.ПричинаОтмены <> ПричинаОтмены Тогда
				СтрокаТаблицы.ПричинаОтмены = ПричинаОтмены;
			КонецЕсли;
			
			Если СтруктураДействийСИзмененнымиСтроками <> Неопределено Тогда
				ОбработкаТабличнойЧастиТоварыКлиент.ОбработатьСтрокуТЧКлиент(СтрокаТаблицы, СтруктураДействийСИзмененнымиСтроками, Неопределено);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Показывает оповещение пользователя об отмене выделенных строк.
//
// Параметры:
//	ПричинаОтмены - СправочникСсылка.ПричиныОтменыЗаказовКлиентов - Причина отмены выделенных строк.
//
Процедура ОповеститьОбОтменеВыделенныхСтрок(ПричинаОтмены) Экспорт

		ПоказатьОповещениеПользователя(
			НСтр("ru = 'Выделенные строки отменены'"),
			,
			СтрЗаменить(НСтр("ru='Выделенные строки отменены по причине ""%ПричинаОтмены%""'"), "%ПричинаОтмены%", ПричинаОтмены),
			БиблиотекаКартинок.Информация32
		);
	
КонецПроцедуры

// Показывает оповещение пользователя об отмене выделенных строк.
//
// Параметры:
//	ПричинаОтмены - СправочникСсылка.ПричиныОтменыЗаказовКлиентов - Причина отмены выделенных строк.
//
Процедура ОповеститьОбОтменеВыделенныхНеЗарезервированныхСтрок(ПричинаОтмены) Экспорт

		ПоказатьОповещениеПользователя(
			НСтр("ru = 'Выделенные незарезервированные строки отменены'"),
			,
			СтрЗаменить(НСтр("ru='Выделенные незарезервированные строки отменены по причине ""%ПричинаОтмены%""'"), "%ПричинаОтмены%", ПричинаОтмены),
			БиблиотекаКартинок.Информация32
		);
	
КонецПроцедуры

// Показывает оповещение пользователя об отмене выделенных строк.
//
// Параметры:
//	ПричинаОтмены - СправочникСсылка.ПричиныОтменыЗаказовКлиентов - Причина отмены выделенных строк.
//
Процедура ОповеститьОбОтменеНепроданныхТоваров(ПричинаОтмены, КоличествоОтмененныхСтрок, ПроверятьОстатки) Экспорт

	Если КоличествоОтмененныхСтрок = 0 Тогда
			
		ПоказатьОповещениеПользователя(
			НСтр("ru = 'Строки не отменены'"),
			,
			НСтр("ru='По всем строкам оформлена продажа. Строки не могут быть отменены'"),
			БиблиотекаКартинок.Информация32
		);
			
	Иначе
			
		Если ПроверятьОстатки Тогда

			ПоказатьОповещениеПользователя(
				НСтр("ru = 'Строки отменены'"),
				,
				СтрЗаменить(НСтр("ru='Все не проданные товары отменены по причине ""%ПричинаОтмены%""'"), "%ПричинаОтмены%", ПричинаОтмены),
				БиблиотекаКартинок.Информация32
			);
		
		Иначе
			
			ПоказатьОповещениеПользователя(
				НСтр("ru = 'Строки отменены'"),
				,
				СтрЗаменить(НСтр("ru='Все строки отменены по причине ""%ПричинаОтмены%"".'"), "%ПричинаОтмены%", ПричинаОтмены),
				БиблиотекаКартинок.Информация32
			);
			
		КонецЕсли;
			
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область РМКЗакрытиеСмены

// Функция проверяет необходимость проверки непробитых чеков при закрытии смены.
// В случае необходимости проверки управление передается форме "ПроверкаНепробитыхЧеков" обработки
// "ЗакрытиеКассовойСмены".
//
Функция ПройденаПроверкаНепробитыхЧеков(КассаККМ, ОбработчикОповещения) Экспорт
	
	Если УправлениеПользователямиВызовСервера.ПолучитьБулевоЗначениеПраваПользователя(ПредопределенноеЗначение("ПланВидовХарактеристик.ПраваПользователей.ПроверятьНепробитыеЧекиПриЗакрытииСмены"), Ложь) Тогда
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("КассаККМ", КассаККМ);
		
		Режим = РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс;
		ОткрытьФорму("Обработка.ЗакрытиеКассовойСмены.Форма.ПроверкаНепробитыхЧеков", ПараметрыФормы,,,,, ОбработчикОповещения, Режим); 
		
		Возврат Ложь;
	Иначе
		Возврат Истина;
	КонецЕсли;
	
КонецФункции // ПройденаПроверка()

#КонецОбласти

#Область ГосИС

// Очищает табличную часть АкцизныеМарки по ключу связи,
// который содержится с строке табличной части.
//
// Параметры:
//  Объект - Объект.
//  СтрокаТабличнойЧасти - Строка табличной части.
//
Процедура ОчиститьМарки(Объект, СтрокаТабличнойЧасти) Экспорт 
	
	СтруктураПоиска = Новый Структура;
	СтруктураПоиска.Вставить("КлючСвязи", СтрокаТабличнойЧасти.КлючСвязи);
		
	Если СтрокаТабличнойЧасти.НеобходимостьВводаАкцизнойМарки Тогда
		МассивАкцизныхМарок = Объект.АкцизныеМарки.НайтиСтроки(СтруктураПоиска);
		
		Для Каждого СтрокаАкцизнаяМарка Из МассивАкцизныхМарок Цикл
			Объект.АкцизныеМарки.Удалить(СтрокаАкцизнаяМарка);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

// Заполнение данных в случае успешной передачи в ЕГАИС.
//
// Параметры:
//  Изменения - Массив.
//  ПараметрыВыполнения - Структура.
//  Источник - Строка.
//  Объект - ДанныеФормаКоллекция.
//
Процедура ПослеПередачиЧекаЕГАИС(Изменения, ПараметрыВыполнения, Источник = "", Объект = Неопределено) Экспорт
	
	ЕстьОшибки = (Изменения.Количество() <> 1);
	
	Ошибки = Новый Массив;
	Для Каждого ЭлементДанных Из Изменения Цикл
		Если ЭлементДанных.Свойство("ТекстОшибки") И ЗначениеЗаполнено(ЭлементДанных.ТекстОшибки) Тогда
			ЕстьОшибки = Истина;
			Ошибки.Добавить(ЭлементДанных.ТекстОшибки);
		КонецЕсли;
	КонецЦикла;
	Если Ошибки.Количество() > 0 Тогда
		Ошибки.Вставить(0, НСтр("В процессе передачи данных в ЕГАИС возникли ошибки:"));
	КонецЕсли;
	ОписаниеОшибки = СтрСоединить(Ошибки, Символы.ПС);
	
	ПараметрыВыполнения.ПродолжитьПечать = Не ЕстьОшибки;
	ПараметрыВыполнения.ОписаниеОшибки   = ОписаниеОшибки;
	
	Если НЕ ЕстьОшибки Тогда
		
		ЭлементДанных = Изменения[0];
		
		Если ЭлементДанных.Свойство("ИдентификаторЗапроса") И ЗначениеЗаполнено(ЭлементДанных.ИдентификаторЗапроса) Тогда
			ПараметрыВыполнения.Вставить("АдресЧека", ЭлементДанных.ИдентификаторЗапроса);
		КонецЕсли;
		Если ЭлементДанных.Свойство("Подпись") И ЗначениеЗаполнено(ЭлементДанных.Подпись) Тогда
			ПараметрыВыполнения.Вставить("ПодписьЧека", Изменения[0].Подпись);
		КонецЕсли;
		
		ИННОрганизации = "";
		КППОрганизации = "";
		НаименованиеОрганизации = "";
		
		Если ЭлементДанных.Свойство("ОрганизацияЕГАИС") И ЗначениеЗаполнено(ЭлементДанных.ОрганизацияЕГАИС) Тогда
			РеквизитыОрганизацииЕГАИС =
				ИнтеграцияЕГАИСРТВызовСервера.ЗначенияРеквизитовОбъекта(ЭлементДанных.ОрганизацияЕГАИС, "ИНН, КПП, Наименование");
			
			ИННОрганизации = РеквизитыОрганизацииЕГАИС.ИНН;
			КППОрганизации = РеквизитыОрганизацииЕГАИС.КПП;
			
			НаименованиеОрганизации = СокрЛП(РеквизитыОрганизацииЕГАИС.Наименование);
			Если ПустаяСтрока(НаименованиеОрганизации) Тогда
				НаименованиеОрганизации = ПараметрыВыполнения.ВходныеПараметры.ОрганизацияНазвание;
			КонецЕсли;
		КонецЕсли;
		
		ПараметрыВыполнения.Вставить("ИНН", ИННОрганизации);
		ПараметрыВыполнения.Вставить("КПП", КППОрганизации);
		ПараметрыВыполнения.Вставить("НаименованиеОрганизации", НаименованиеОрганизации);
		
		Если Источник = "ЧекККМ" Тогда 
			Объект.АдресЧекаЕГАИС = ПараметрыВыполнения.АдресЧека;
			Объект.ПодписьЧекаЕГАИС = ПараметрыВыполнения.ПодписьЧека;
		КонецЕсли;
	
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Интерфейс

// Обновляет цвет и текст для текущей скидки.
//
// Параметры:
//  ДисконтнаяКарта - СправочникСсылка.ИнформационныеКарты.
//  ВладелецДисконтнойКарты - СправочникСсылка.Контрагенты, СправочникСсылка.Пользователи, СправочникСсылка.ФизическиеЛица.
//  Элементы - ВсеЭлементыФормы.
//
Процедура ОбновитьТекстПроСкидку(ДисконтнаяКарта, ВладелецДисконтнойКарты, Элементы) Экспорт 
	
	ЦветТекстаЗаголовка = Новый Цвет();
	ВладелецСкидки = "";
	ЗаголовокСкидки = НСтр("ru = 'Скидка'");
	Если ЗначениеЗаполнено(ДисконтнаяКарта) Тогда
		ЗаголовокСкидки = НСтр("ru = 'Скидка: %1'");
		ЦветТекстаЗаголовка = WebЦвета.Зеленый;
		ВладелецСкидки = ДисконтнаяКарта;
		Если ЗначениеЗаполнено(ВладелецДисконтнойКарты) Тогда
			ВладелецСкидки = ВладелецДисконтнойКарты;
		КонецЕсли;
		ЗаголовокСкидки = СокрЛП(СтрШаблон(ЗаголовокСкидки, ВладелецСкидки));
	КонецЕсли;
	
	Элементы.СуммаСкидки.Заголовок = ЗаголовокСкидки;
	Элементы.СуммаСкидки.ЦветТекстаЗаголовка = ЦветТекстаЗаголовка;
	
КонецПроцедуры

Процедура ОбновитьДанныеSMSEmail(Телефон, АдресЭП, КонтрольЗаполненияДанных, ДанныеSMSИлиEmail, Элементы, ИмяЭлементаДанныеSMSEmail = "ДанныеSMSИлиEmail") Экспорт
	
	Перем ТелефонСтрокой;
	
	ДанныеSMSИлиEmail 	= "";
	ЗаголовокПоля		= НСтр("ru = 'Тел.'");
	
	Если ЗначениеЗаполнено(Телефон) Тогда
		
		ТелефонЧислом	  		= СтроковыеФункцииКлиентСервер.СтрокаВЧисло(Телефон);
		ТелефонПредставление    = "";
		
		Если ЗначениеЗаполнено(ТелефонЧислом) Тогда
			ПодключаемоеОборудованиеРТКлиент.ПреобразоватьТелефонКПользовательскомуВиду(ТелефонЧислом, ТелефонСтрокой, ТелефонПредставление);
		КонецЕсли;
		
		ДанныеSMSИлиEmail		= ТелефонПредставление;
		ЗаголовокПоля			= НСтр("ru = 'Тел.'");
		
	ИначеЕсли ЗначениеЗаполнено(АдресЭП) Тогда
		
		ДанныеSMSИлиEmail 		= АдресЭП;
		ЗаголовокПоля			= "Email";
		
	КонецЕсли;
	
	Если КонтрольЗаполненияДанных Тогда
		
		Если ЗначениеЗаполнено(ДанныеSMSИлиEmail) Тогда
			ЦветТекста 			= Новый Цвет()
		Иначе
			
			ЗаголовокПоля		= НСтр("ru = 'Тел.'");
			ДанныеSMSИлиEmail 	= НСтр("ru = 'не заполнен'");
			ЦветТекста 			= WebЦвета.Красный;
			
		КонецЕсли;
		
	Иначе
		ЦветТекста = Новый Цвет();
	КонецЕсли;
	
	Элементы[ИмяЭлементаДанныеSMSEmail].ЦветТекста 	= ЦветТекста;
	Элементы[ИмяЭлементаДанныеSMSEmail].Заголовок	= ЗаголовокПоля;
	Элементы[ИмяЭлементаДанныеSMSEmail].Видимость	= ЗначениеЗаполнено(ДанныеSMSИлиEmail);
	
КонецПроцедуры

// Устанавливает заголовок в РМК, учитывая текущую операцию и прочие параметры.
//
// Параметры:
//  СтруктураДанных - Структура.
//  Элементы - ВсеЭлементыФормы.
//  НадписьЗаголовок - Строка.
//
Процедура УстановитьЗаголовокВРМК(СтруктураДанных, Элементы, НадписьЗаголовок) Экспорт 
	
	ВидОперации                  = СтруктураДанных.ВидОперации;
	ОперацияСДенежнымиСредствами = СтруктураДанных.ОперацияСДенежнымиСредствами;
	ПродажаПоЗаказу              = СтруктураДанных.ПродажаПоЗаказу;
	ДокументРасчета              = СтруктураДанных.ДокументРасчета;
	ЭтоЗачетАванса               = СтруктураДанных.ЭтоЗачетАванса;
	НомерЗаказа                  = СтруктураДанных.НомерЗаказа;
	ЭтоОплатаРассрочки           = СтруктураДанных.ЭтоОплатаРассрочки;
	Продавец                     = СтруктураДанных.Продавец;
	РеверсКнопкиПродавец         = СтруктураДанных.РеверсКнопкиПродавец;
	ИмяКнопкиПродавец            = СтруктураДанных.ИмяКнопкиПродавец;
	ЦветПродажи                  = СтруктураДанных.ЦветПродажи;
	СуммаОстаткаДокументаРасчета = СтруктураДанных.СуммаОстаткаДокументаРасчета;
	
	СтрокаЗаголовок = "";
	
	Если ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийЧекККМ.Возврат") Тогда
		Если ОперацияСДенежнымиСредствами Тогда
			СтрокаЗаголовок = НСтр("ru = 'Возврат денежных средств без передачи товаров'");
		Иначе
			СтрокаЗаголовок = НСтр("ru = 'Возврат'") 
		КонецЕсли;
		Элементы.КартинкаЧО04Возврат.Заголовок = НСтр("ru = 'Продажа (F5)'");
		Элементы.КартинкаЧО04Возврат.ТекстНевыбраннойКартинки = НСтр("ru = 'Продажа (F5)'");
		Элементы.КартинкаЧО04Возврат.ЦветТекста = WebЦвета.Красный;
		Элементы.КартинкаЧО09ОперацияДС.Заголовок = НСтр("ru = 'Без передачи товаров(Shift + F10)'");
		Элементы.КартинкаЧО09ОперацияДС.ТекстНевыбраннойКартинки = НСтр("ru = 'Без передачи товаров(Shift + F10)'");
	Иначе
		Если ОперацияСДенежнымиСредствами Тогда
			СтрокаЗаголовок = НСтр("ru = 'Прием денежных средств без передачи товаров'");
		Иначе
			СтрокаЗаголовок = НСтр("ru = 'Продажа'");
		КонецЕсли;
		Элементы.КартинкаЧО04Возврат.Заголовок = НСтр("ru = 'Возврат (F5)'");
		Элементы.КартинкаЧО04Возврат.ТекстНевыбраннойКартинки = НСтр("ru = 'Возврат (F5)'");
		Элементы.КартинкаЧО04Возврат.ЦветТекста = ЦветПродажи;
		Элементы.КартинкаЧО09ОперацияДС.Заголовок = НСтр("ru = 'Без передачи товаров(Shift + F10)'");
		Элементы.КартинкаЧО09ОперацияДС.ТекстНевыбраннойКартинки = НСтр("ru = 'Без передачи товаров(Shift + F10)'");
	КонецЕсли;
	
	Если ОперацияСДенежнымиСредствами Тогда
		Элементы.КартинкаЧО09ОперацияДС.ЦветТекста = WebЦвета.Синий;
	Иначе
		Элементы.КартинкаЧО09ОперацияДС.ЦветТекста = ЦветПродажи;
	КонецЕсли;
	
	Если ПродажаПоЗаказу Тогда
		
		СтрокаЗаголовок = СтрокаЗаголовок + НСтр("ru = ' по заказу №'") + НомерЗаказа;
		
	ИначеЕсли ЗначениеЗаполнено(ДокументРасчета) И ЭтоЗачетАванса Тогда
		
		СтрокаЗаголовок = СтрокаЗаголовок + НСтр("ru = ' Зачет аванса '") +
			Формат(СуммаОстаткаДокументаРасчета, "ЧЦ=15; ЧДЦ=2; ЧРД=,; ЧРГ=' '; ЧГ=3,0");
		
	ИначеЕсли ЗначениеЗаполнено(ДокументРасчета) И ЭтоОплатаРассрочки Тогда
		
		СтрокаЗаголовок = СтрокаЗаголовок + НСтр("ru = ' Остаток рассрочки '") +
			Формат(СуммаОстаткаДокументаРасчета, "ЧЦ=15; ЧДЦ=2; ЧРД=,; ЧРГ=' '; ЧГ=3,0");
	КонецЕсли;
	
	Пользователь = глЗначениеПеременной("ПользовательИзмененныхПрав");
	
	Если Пользователь = Неопределено ИЛИ НЕ ЗначениеЗаполнено(Пользователь) Тогда
		Элементы.НадписьЗаголовок.ЦветТекста = WebЦвета.Зеленый;
	Иначе
		СтрокаЗаголовок = "" + Пользователь + " - " + СтрокаЗаголовок;
		Элементы.НадписьЗаголовок.ЦветТекста = WebЦвета.Красный;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Продавец) Тогда
		СтрокаЗаголовок = СтрокаЗаголовок + " - "+ Продавец
	КонецЕсли;
	
	НадписьЗаголовок = СтрокаЗаголовок;
	
	УстановитьРеверсныеИменаКнопокНижнейПанели(РеверсКнопкиПродавец, ИмяКнопкиПродавец, Элементы, Продавец);
	
КонецПроцедуры

// Устанавливает цвет кнопки исходя из текущей операции.
//
Процедура ЦветРеверснойКнопки(ИмяЭлемента, ПоложительныйРеверс, Элементы, ЦветПродажи) Экспорт 
	
	Если РозничныеПродажиКлиентСервер.ПроверитьНаличиеЭлементаФормы(Элементы, ИмяЭлемента) Тогда
		Если ПоложительныйРеверс Тогда
			Элементы[ИмяЭлемента].ЦветТекста = WebЦвета.Синий;
			Элементы[ИмяЭлемента].ЦветТекстаЗаголовка = WebЦвета.Синий;
		Иначе
			Элементы[ИмяЭлемента].ЦветТекста = ЦветПродажи;
			Элементы[ИмяЭлемента].ЦветТекстаЗаголовка = ЦветПродажи;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Обновляет табло в РМК, учитывая текущую операцию и прочие параметры.
//
// Параметры:
//  Объект - ДанныеФормыСтруктура.
//  Элементы - ВсеЭлементыФормы.
//  СтруктураДанных - Структура.
//  НадписьИнформацияОТоваре - Строка.
//  НадписьТекущаяСумма - Строка.
//
Процедура ОбновитьТаблоНоменклатуры(Объект, Элементы, СтруктураДанных, НадписьИнформацияОТоваре, НадписьТекущаяСумма, ДанныеSMSИлиEmail) Экспорт 
	
	ВыведеныЧеки            = СтруктураДанных.ВыведеныЧеки;
	ОставлятьФлагТаблоСдачи = СтруктураДанных.ОставлятьФлагТаблоСдачи;
	ВыведенаСдача           = СтруктураДанных.ВыведенаСдача;
	ДисконтнаяКарта         = СтруктураДанных.ДисконтнаяКарта;
	ВладелецДисконтнойКарты = СтруктураДанных.ВладелецДисконтнойКарты;
	Телефон           		= СтруктураДанных.Телефон;
	АдресЭП         		= СтруктураДанных.АдресЭП;
	НеПечататьБумажныйЧек 	= СтруктураДанных.НеПечататьБумажныйЧек;
	
	Если ВыведеныЧеки Тогда
		Возврат;
	КонецЕсли;
	
	ОбновитьТекстПроСкидку(ДисконтнаяКарта, ВладелецДисконтнойКарты, Элементы);
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	Если ТекущаяСтрока = Неопределено Тогда
		Если Объект.Товары.Количество() > 0 Тогда
			Элементы.Товары.ТекущаяСтрока = Объект.Товары[Объект.Товары.Количество() - 1].ПолучитьИдентификатор();
			ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
		КонецЕсли;
	КонецЕсли;
	
	Если ТекущаяСтрока = Неопределено Тогда
		НадписьИнформацияОТоваре = "";
		НадписьТекущаяСумма = "";
		
		Возврат;
	КонецЕсли;
	
	Если ОставлятьФлагТаблоСдачи Тогда
		Возврат;
	КонецЕсли;
	
	ОбновитьДанныеSMSEmail(Телефон, АдресЭП, НеПечататьБумажныйЧек, ДанныеSMSИлиEmail, Элементы);
	
	Элементы.СтраницыИнформации.ТекущаяСтраница = Элементы.СтраницаИнформации;
	
	ВыведенаСдача = Ложь;
	
	ИнформацияОТоваре = СокрЛП(ТекущаяСтрока.Номенклатура);
	Если ЗначениеЗаполнено(ТекущаяСтрока.ПредставлениеТабло) Тогда
		ИнформацияОТоваре = СокрЛП(ТекущаяСтрока.ПредставлениеТабло);
	КонецЕсли;
	
	Если ТекущаяСтрока.ИспользоватьСерийныеНомера Тогда
		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("КлючСвязиСерийныхНомеров", ТекущаяСтрока.КлючСвязиСерийныхНомеров);
		ИнформацияОСерийныхНомерах = НСтр("ru = '№№ %1'");
		СерийныеНомераСтрокой = "";
		СтрокиСерийныхНомеров = Объект.СерийныеНомера.НайтиСтроки(СтруктураПоиска);
		Для каждого СтрокаСерийныхНомеров Из СтрокиСерийныхНомеров Цикл
			СерийныеНомераСтрокой = СерийныеНомераСтрокой +", "+СтрокаСерийныхНомеров.СерийныйНомер;
		КонецЦикла;
		Если ЗначениеЗаполнено(СерийныеНомераСтрокой)  Тогда
			СерийныеНомераСтрокой = Сред(СерийныеНомераСтрокой, 3);
		Иначе
			СерийныеНомераСтрокой = НСтр("ru = '?????'");
		КонецЕсли;
		ИнформацияОСерийныхНомерах = СтрШаблон(ИнформацияОСерийныхНомерах, СерийныеНомераСтрокой);
		ИнформацияОТоваре = ИнформацияОТоваре + " - " + ИнформацияОСерийныхНомерах;
	КонецЕсли;
	
	ИнформацияОПродавце = НСтр("ru = '(продавец: %1)'");
	
	Если ЗначениеЗаполнено(ТекущаяСтрока.Продавец) Тогда
		ИнформацияОТоваре = ИнформацияОТоваре + " " + СтрШаблон(ИнформацияОПродавце, СокрЛП(ТекущаяСтрока.Продавец));
	КонецЕсли;
	
	НадписьИнформацияОТоваре = ИнформацияОТоваре;
	
	ИспользуемоеКоличество = ТекущаяСтрока.Количество;
	УпаковкаСтроки = СокрЛП(ТекущаяСтрока.ЕдиницаИзмерения);
	Если ЗначениеЗаполнено(ТекущаяСтрока.Упаковка) Тогда
		ИспользуемоеКоличество = ТекущаяСтрока.КоличествоУпаковок;
		УпаковкаСтроки = СокрЛП(ТекущаяСтрока.Упаковка);
	КонецЕсли;
	
	СуммаСтрокиТовара = ТекущаяСтрока.Цена * ИспользуемоеКоличество;
	
	НадписьТекущаяСумма = "";
	Если НЕ СуммаСтрокиТовара = 0 Тогда
		
		ПредставлениеТекущейСтроки = "%1 х %2 %3 = %4";
		
		ЦенаСтроки = РозничныеПродажиКлиентСервер.ФорматСумм(ТекущаяСтрока.Цена);
		КоличествоСтроки = Формат(ИспользуемоеКоличество, "ЧН=0");
		
		СкидкаСтроки = "";
		Скидка = СуммаСтрокиТовара - ТекущаяСтрока.Сумма;
		
		Если (Скидка > 0.01 ИЛИ Скидка < -0.01) Тогда
			
			ПредставлениеТекущейСтроки = "%1 х %2 %3 %5 = %4";
			
			СкидкаСтроки = "%1 %2 (%1 %3)";
			Если Скидка > 0 Тогда
				ЗнакСкидки = "-";
				ОбщийПроцентСкидкиСтрокой = Формат(Окр(100*Скидка/СуммаСтрокиТовара, 2, 1), "ЧДЦ=2") + "%";
				СуммаСкидкиСтрокой = РозничныеПродажиКлиентСервер.ФорматСумм(Скидка);
			Иначе
				ЗнакСкидки = "+";
				ОбщийПроцентСкидкиСтрокой = Формат(-1*Окр(100*Скидка/СуммаСтрокиТовара, 2, 1), "ЧДЦ=2") + "%";
				СуммаСкидкиСтрокой = РозничныеПродажиКлиентСервер.ФорматСумм(-1*Скидка);
			КонецЕсли;
			
			СкидкаСтроки = СтрШаблон(СкидкаСтроки, ЗнакСкидки, СуммаСкидкиСтрокой, ОбщийПроцентСкидкиСтрокой);
			
			НадписьТекущаяСумма = СтрШаблон(ПредставлениеТекущейСтроки,
				ЦенаСтроки, КоличествоСтроки, УпаковкаСтроки, РозничныеПродажиКлиентСервер.ФорматСумм(ТекущаяСтрока.Сумма), СкидкаСтроки);
		Иначе
			
			НадписьТекущаяСумма = СтрШаблон(ПредставлениеТекущейСтроки,
				ЦенаСтроки, КоличествоСтроки, УпаковкаСтроки, РозничныеПродажиКлиентСервер.ФорматСумм(ТекущаяСтрока.Сумма));
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Устанавливает название кнопок в соответствии с текущим значением продавца.
//
Процедура УстановитьРеверсныеИменаКнопокНижнейПанели(РеверсКнопкиПродавец, ИмяКнопкиПродавец, Элементы, Продавец) Экспорт 
	
	Если РеверсКнопкиПродавец И ЗначениеЗаполнено(ИмяКнопкиПродавец) Тогда
		ЗаголовокКнопки = Элементы[ИмяКнопкиПродавец].Заголовок;
		Если ЗначениеЗаполнено(Продавец) Тогда
			ЗаголовокКнопки = СтрЗаменить(ЗаголовокКнопки, НСтр("ru = 'Выбор продавца'"), НСтр("ru = 'Очистить продавца'"));
		Иначе
			ЗаголовокКнопки = СтрЗаменить(ЗаголовокКнопки, НСтр("ru = 'Очистить продавца'"), НСтр("ru = 'Выбор продавца'"));
		КонецЕсли;
		Элементы[ИмяКнопкиПродавец].Заголовок = ЗаголовокКнопки;
		Элементы[ИмяКнопкиПродавец].ТекстНевыбраннойКартинки = ЗаголовокКнопки;
	КонецЕсли;
	
КонецПроцедуры

// Изменяет заголовок кнопок верхней панели.
// Удаляет из заголовка подсказку горячей клавиши, т.к. в веб-клиенте эти кнопки зарезервированы.
//
// Параметры:
//  Элементы - ВсеЭлементыФормы.
//  ИспользоватьНастройкуРМК - Булево.
//  НастройкаРМК - СправочникСсылка.НастройкиРМК.
//
Процедура ИзменитьЗаголовокКнопокДляWeb(Элементы, ИспользоватьНастройкуРМК, НастройкаРМК) Экспорт
	
	Если ИспользоватьНастройкуРМК Тогда 
		КнопкиВерхнейПанели = Новый Массив;
		РозничныеПродажиВызовСервера.ПолучитьКнопкиВерхнейПанели(НастройкаРМК, КнопкиВерхнейПанели);
		Для Каждого ИмяКнопки Из КнопкиВерхнейПанели Цикл
			ТекущийЗаголовок = Элементы[ИмяКнопки].Заголовок;
			ЗаголовокКнопкиДляWeb = ПолучитьТекстЗаголовка(ТекущийЗаголовок);
			Элементы[ИмяКнопки].Заголовок = ЗаголовокКнопкиДляWeb;
			Элементы[ИмяКнопки].ТекстНевыбраннойКартинки = ЗаголовокКнопкиДляWeb;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Прочие_операции

// Проверяет необходимость использования серийных номеров для переданной номенклатуры.
//
// Параметры:
//  Номенклатура - СправочникСсылка.Номенклатура.
//  ВладелецФормы - Форма.
//
// Возвращаемое значение:
//  Булево - Ложь, если ввод серийных номенров не требуется.
//
Функция ПроверитьИспользованиеСерийныхНомеров(Номенклатура, ВладелецФормы) Экспорт 

	Результат = Истина;
	ЗначениеРеквизитов = ОбщегоНазначенияРТВызовСервера.ЗначенияРеквизитовОбъекта(
		Номенклатура, Новый Структура("ИспользоватьСерийныеНомера, ТипНоменклатуры, Представление"));

	ЗаголовокИнформации = НСтр("ru = 'Ошибка ввода номеров подарочных сертификатов'");
	
	Если НЕ ЗначениеРеквизитов.ТипНоменклатуры =
			ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.ПодарочныйСертификат") Тогда
		
		Результат = Ложь;
		
		СтрокаСообщения = НСтр("ru = 'Номенклатура %1 не является подарочным сертификатом!'");
		СтрокаСообщения = СтрШаблон(СтрокаСообщения, ЗначениеРеквизитов.Представление);
		
		ОбщегоНазначенияРТКлиент.ВывестиИнформациюДляРМКУправляемой(ЗаголовокИнформации, СтрокаСообщения,, ВладелецФормы);
		
	ИначеЕсли Не ЗначениеРеквизитов.ИспользоватьСерийныеНомера Тогда
		
		Результат = Ложь;
		
		СтрокаСообщения = НСтр("ru = 'Для номенклатуры %1 не используются номера подарочных сертификатов!'");
		СтрокаСообщения = СтрШаблон(СтрокаСообщения, ЗначениеРеквизитов.Представление);
		
		ОбщегоНазначенияРТКлиент.ВывестиИнформациюДляРМКУправляемой(ЗаголовокИнформации, СтрокаСообщения,, ВладелецФормы);
		
	КонецЕсли;

	Возврат Результат;
	
КонецФункции

// Формирует структуру, которая содержит массив КассККМ и Организаций.
//
// Параметры:
//   * ТаблицаБыстрыхТоваров - Таблица значений - таблица с колонками:
//     * Организация - СправочникСсылка.Организации.
//     * КассаККМ - СпрсвочникСсылка.КассыККМ.
//     * ТипОборудования - ПеречислениеСсылка.ТипыПодключаемогоОборудования.
//     * СтрокаОбработана - Булево.
//
// Возвращаемое значение:
//  Структура - Структура со свойствами:
//   * КассыККМ - Массив.
//   * Организации - Массив.
//
Функция КассыККМИОрганизацииРМК(ТаблицаКассККМОрганизаций) Экспорт 
	
	КассыККМ = Новый Массив();
	ОрганизацииККМ = Новый Массив();
	
	Для каждого Строка Из ТаблицаКассККМОрганизаций Цикл
		Если ЗначениеЗаполнено(Строка.КассаККМ) И КассыККМ.Найти(Строка.КассаККМ) = Неопределено Тогда
			КассыККМ.Добавить(Строка.КассаККМ);
		КонецЕсли;
		Если ЗначениеЗаполнено(Строка.Организация) И ОрганизацииККМ.Найти(Строка.Организация) = Неопределено Тогда
			ОрганизацииККМ.Добавить(Строка.Организация);
		КонецЕсли;
	КонецЦикла;
	
	КассыККМИОрганизации = Новый Структура();
	КассыККМИОрганизации.Вставить("КассыККМ", КассыККМ);
	КассыККМИОрганизации.Вставить("Организации", ОрганизацииККМ);
	
	Возврат КассыККМИОрганизации;
	
КонецФункции

// Получает сумму текущего документа без учёта скидок.
//
// Параметры:
//  Объект - ДанныеФормыСтруктура.
//
// Возвращаемое значение:
//  СуммаДокумента - Число.
//
Функция ПолучитьСуммуДокументаБезСкидки(Объект) Экспорт 
	
	СуммаДокумента = 0;
	
	Для каждого СтрокаТабличнойЧасти Из Объект.Товары Цикл
		
		Если НЕ СтрокаТабличнойЧасти.ПродажаПодарка Тогда
			ИспользуемоеКоличество = ?(ЗначениеЗаполнено(СтрокаТабличнойЧасти.Упаковка),
				СтрокаТабличнойЧасти.КоличествоУпаковок, СтрокаТабличнойЧасти.Количество);
			СуммаПоСтроке = Окр(СтрокаТабличнойЧасти.Цена * ИспользуемоеКоличество, 2);
			СуммаДокумента = СуммаДокумента + СуммаПоСтроке + ?(Объект.ЦенаВключаетНДС, 0, СтрокаТабличнойЧасти.СуммаНДС);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат СуммаДокумента;
	
КонецФункции

// Проверяет переданы ли данные об оплате в банк.
//
// Параметры:
//  Объект - ДанныеФормыСтруктура.
//
// Возвращаемое значение:
//  Булево - Истина, если данные успешно переданы.
//
Функция ПрисутствуютДанныеПереданныеВБанк(Объект) Экспорт 
	
	ПараметрыОтбора = Новый Структура("ДанныеПереданыВБанк", Истина);
	МассивСтрок = Объект.Оплата.НайтиСтроки(ПараметрыОтбора);
	
	Если МассивСтрок.Количество() > 0 Тогда 
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

// Обработка успешной оплаты по карте, в результате которой добавляется информация
// о деталях платежа в табличную часть Оплата.
//
// Параметры:
//  Объект - ДанныеФормыСтруктура.
//  ПараметрДействия - Структура.
//
Процедура ЗавершитьОбработкуВыбораПлатежнойКарты(Объект, ПараметрДействия) Экспорт 
	
	ВыбраннаяСтрока = Объект.Оплата.НайтиПоИдентификатору(ПараметрДействия.ИдентификаторВыбраннойСтроки);
	
	Если ВыбраннаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаОплаты = Объект.Оплата.Добавить();
	ЗаполнитьЗначенияСвойств(СтрокаОплаты, ВыбраннаяСтрока);
	
	СтрокаОплаты.ЗапретРедактирования = Истина;
	СтрокаОплаты.ТипОплаты = ПредопределенноеЗначение("Перечисление.ТипыОплатЧекаККМ.ПлатежнаяКарта");
	СтрокаОплаты.Организация = ВыбраннаяСтрока.Организация;
	СтрокаОплаты.ПредставлениеВидаОплаты = СтрокаОплаты.ВидОплаты;
	СтрокаОплаты.ПредставлениеСуммы = СтрокаОплаты.Сумма;
	СтрокаОплаты.ДанныеПереданыВБанк = Истина;
	
КонецПроцедуры

// Производит опрос владельца дисконтной карты.
//
// Параметры:
//  ИспользоватьНастройкуРМК - Булево.
//  ПроводитьОпросВладельцаКарты - Булево.
//  ДисконтнаяКарта - СправочникСсылка.ИнформационныеКарты.
//
Процедура ПровестиОпрос(ИспользоватьНастройкуРМК, ПроводитьОпросВладельцаКарты, ДисконтнаяКарта) Экспорт 
	
	ТекущаяДата = ОбщегоназНаченияКлиент.ДатаСеанса();
	
	Если ИспользоватьНастройкуРМК И ПроводитьОпросВладельцаКарты Тогда
		
		ИнформационныеКартыКлиент.ПровестиОпросВладельца(ДисконтнаяКарта, ТекущаяДата);
		
	ИначеЕсли ИнформационныеКартыВызовСервера.НеобходимостьОпросаВладельца(ДисконтнаяКарта, ТекущаяДата) Тогда
		
		ТекстСообщения = НСтр("ru = 'Необходимо выдать покупателю анкету владельца дисконтной карты'"); 
		ОбщегоНазначенияРТКлиент.ВывестиИнформациюДляРМКУправляемой(ТекстСообщения);
		
	КонецЕсли;
	
КонецПроцедуры

// Обновление информации, выводимой на дисплей покупателя.
//
// Параметры:
//  СтруктураДанных - Структура.
//  ОбъектВладелец - УправляемаяФорма.
//
Процедура ОбновлениеДисплеяПокупателя(СтруктураДанных, ОбъектВладелец) Экспорт 
	
	Команда                              = СтруктураДанных.Команда;
	ТолькоИтоги                          = СтруктураДанных.ТолькоИтоги;
	ТекущаяСтрока                        = СтруктураДанных.ТекущаяСтрока;
	Товары                               = СтруктураДанных.Товары;
	ДисплейПокупателяПараметры           = СтруктураДанных.ДисплейПокупателяПараметры;
	ИспользоватьПодключаемоеОборудование = СтруктураДанных.ИспользоватьПодключаемоеОборудование;
	НаборПравИНастроек                   = СтруктураДанных.НаборПравИНастроек;
	СуммаСкидки                          = СтруктураДанных.СуммаСкидки;
	СуммаВсего                           = СтруктураДанных.СуммаВсего;

	ФорматЧисла = "ЧРД=.;ЧЦ=12;ЧДЦ=2;ЧН=0.00;ЧГ=0";
	
	Если Не ИспользоватьПодключаемоеОборудование Тогда
		Возврат;
	КонецЕсли;
	
	Если ТекущаяСтрока = Неопределено Тогда
		Если Товары.Количество() > 0 Тогда
			ТекущаяСтрока = Товары[0];
		КонецЕсли;
	КонецЕсли;
	
	Если ТекущаяСтрока = Неопределено Тогда
		СуммаТовара = 0;
	Иначе
		СуммаТовара = ТекущаяСтрока.Цена * ТекущаяСтрока.Количество;
		ИнформацияОТоваре = СокрЛП(ТекущаяСтрока.Номенклатура);
		Если НЕ ТолькоИтоги Тогда
			ДисплейПокупателяПараметры.ТоварНаименование = ИнформацияОТоваре;
			ДисплейПокупателяПараметры.ТоварЦена = Формат(ТекущаяСтрока.Цена, ФорматЧисла);
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ ТекущаяСтрока = Неопределено Тогда
		
		ПредставлениеСкидки = "";
		
		ИспользуемоеКоличество = ?(ЗначениеЗаполнено(ТекущаяСтрока.Упаковка),
			ТекущаяСтрока.КоличествоУпаковок, ТекущаяСтрока.Количество);
			
		СуммаСтрокиТовара = ТекущаяСтрока.Цена * ИспользуемоеКоличество;
		
		Скидка = СуммаСтрокиТовара - ТекущаяСтрока.Сумма;
		
		Если НЕ (СуммаСтрокиТовара = 0) И(Скидка > 0.01 ИЛИ Скидка < -0.01) Тогда
			
			ПредставлениеСкидки = "%1 %2 (%1 %3)";
			Если Скидка > 0 Тогда
				ЗнакСкидки = "-";
				ОбщийПроцентСкидкиСтрокой = Формат(Окр(100*Скидка/СуммаСтрокиТовара, 2, 1), "ЧДЦ=2") + "%";
				СуммаСкидкиСтрокой = Формат(Скидка, ФорматЧисла);
			Иначе
				ЗнакСкидки = "+";
				ОбщийПроцентСкидкиСтрокой = Формат(-1*Окр(100*Скидка/СуммаСтрокиТовара, 2, 1), "ЧДЦ=2") + "%";
				СуммаСкидкиСтрокой = Формат(-1*Скидка, ФорматЧисла);
			КонецЕсли;
			
			ПредставлениеСкидки = СтрШаблон(ПредставлениеСкидки, ЗнакСкидки, СуммаСкидкиСтрокой, ОбщийПроцентСкидкиСтрокой);
		КонецЕсли;
		
		Если НЕ ТолькоИтоги Тогда
			ДисплейПокупателяПараметры.ТоварКоличество = ИспользуемоеКоличество;
			ДисплейПокупателяПараметры.ТоварСумма = Формат(ТекущаяСтрока.Сумма, ФорматЧисла);
			ДисплейПокупателяПараметры.ТоварСкидка = ПредставлениеСкидки;
		КонецЕсли;
	
	КонецЕсли;
	
	ДисплейПокупателяПараметры.СуммаВсего = Формат(СуммаВсего, ФорматЧисла);
	ДисплейПокупателяПараметры.СуммаСкидки = Формат(СуммаСкидки, ФорматЧисла);
	
	СтруктураДанных = РозничныеПродажиКлиентСервер.СтруктураДляВыводаИнформацииНаДисплейПокупателя();
	СтруктураДанных.Команда                              = Команда;
	СтруктураДанных.ДисплейПокупателяПараметры           = ДисплейПокупателяПараметры;
	СтруктураДанных.ИспользоватьПодключаемоеОборудование = ИспользоватьПодключаемоеОборудование;
	СтруктураДанных.НаборПравИНастроек                   = НаборПравИНастроек;
	СтруктураДанных.СуммаСкидки                          = СуммаСкидки;
	СтруктураДанных.СуммаВсего                           = СуммаВсего;
	
	ВывестиИнформациюНаДисплейПокупателя(СтруктураДанных, ОбъектВладелец);
	
КонецПроцедуры

// Вывод информации на дисплей покупателя.
//
// Параметры:
//  СтруктураДанных - Структура.
//  ОбъектВладелец - УправляемаяФорма.
//
Процедура ВывестиИнформациюНаДисплейПокупателя(СтруктураДанных, ОбъектВладелец) Экспорт 

	Команда                              = СтруктураДанных.Команда;
	ДисплейПокупателяПараметры           = СтруктураДанных.ДисплейПокупателяПараметры;
	ИспользоватьПодключаемоеОборудование = СтруктураДанных.ИспользоватьПодключаемоеОборудование;
	НаборПравИНастроек                   = СтруктураДанных.НаборПравИНастроек;
	СуммаСкидки                          = СтруктураДанных.СуммаСкидки;
	СуммаВсего                           = СтруктураДанных.СуммаВсего;
	
	Если Не ИспользоватьПодключаемоеОборудование Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(НаборПравИНастроек.ШаблонРаботыДисплеяПокупателя) Тогда
		ВыводитьИтоги = Ложь;  
		ТекстПриПростое = НСтр("ru = 'ДОБРО ПОЖАЛОВАТЬ!'");
		ТекстВНерабочемСостоянии = НСтр("ru = 'КАССА НЕ РАБОТАЕТ'");
	Иначе
		ВыводитьИтоги = НаборПравИНастроек.ВыводитьПромИтогНаДисплей;
		ТекстПриПростое = НаборПравИНастроек.ТекстПриПростое;
		ТекстВНерабочемСостоянии = НаборПравИНастроек.ТекстВНерабочемСостоянии;
	КонецЕсли;
	
	Строка1 = "";
	Строка2 = "";
	ВыровнятьВПраво = Ложь;

	Если Команда = "НачалоРаботы" Тогда
		
		Строка1 = ТекстПриПростое;

	ИначеЕсли Команда = "Оплата" Тогда
		Строка1 = НСтр("ru = 'ВНЕСЕНО:'") + " " + ДисплейПокупателяПараметры.Оплата;
		Строка2 = НСтр("ru = 'СДАЧА:'") + " " + ДисплейПокупателяПараметры.Сдача;
		
	ИначеЕсли Команда = "ОжиданиеОплаты" Тогда
		
		ДисплейПокупателяПараметры.СуммаВсего = Формат(СуммаВсего, "ЧДЦ=2;ЧГ=;ЧН=0.00");
		ДисплейПокупателяПараметры.СуммаСкидки = Формат(СуммаСкидки, "ЧДЦ=2;ЧГ=");
		
		Если ПустаяСтрока(ДисплейПокупателяПараметры.СуммаСкидки) Тогда
			Строка1 = НСтр("ru = 'ИТОГО:'") + " " + ДисплейПокупателяПараметры.СуммаВсего;
		Иначе
			Строка1 = НСтр("ru = 'ИТОГО:'") + " " + ДисплейПокупателяПараметры.СуммаВсего;
			Строка2 = НСтр("ru = 'СКИДКА:'") + " " + ДисплейПокупателяПараметры.СуммаСкидки;
		КонецЕсли;
		
	ИначеЕсли Команда = "ОтменаОплаты" Тогда
		Строка1 = НСтр("ru = 'ОТМЕНА ОПЛАТЫ'");
		
	ИначеЕсли Команда = "ДобавлениеТовара"
		ИЛИ Команда = "УдалениеТовара"
		ИЛИ Команда = "ИзмененияКоличества"
		ИЛИ Команда = "ИзмененияЦены" Тогда
		
		ИнформацияНаименование = ДисплейПокупателяПараметры.ТоварНаименование;
		
		Если ВыводитьИтоги Тогда
			
			Если Команда = "УдалениеТовара" Тогда
				Строка1 = НСтр("ru = 'СТОРНО:'") + " ";
			Иначе
				Строка1 = НСтр("ru = 'ЦЕНА:'") + " ";
			КонецЕсли;
			
			Если НЕ ДисплейПокупателяПараметры.ТоварКоличество = 1
				ИЛИ  Команда = "ИзмененияКоличества"
				ИЛИ Команда = "УдалениеТовара" Тогда
				
				Строка1 = Строка1 + Строка(ДисплейПокупателяПараметры.ТоварКоличество) + "x";
			КонецЕсли;
			
			Строка1 = Строка1 + Строка(ДисплейПокупателяПараметры.ТоварЦена);
			Строка2 = НСтр("ru = 'ИТОГО:'") + " " + ДисплейПокупателяПараметры.СуммаВсего;
			
		Иначе
			
			ВыровнятьВПраво = Истина;
			Строка1 = Строка(ДисплейПокупателяПараметры.ТоварНаименование);
			Строка2 = Строка(ДисплейПокупателяПараметры.ТоварЦена);
			
			Если Не ПустаяСтрока(Строка1) Тогда
				Если НЕ ДисплейПокупателяПараметры.ТоварКоличество = 1
					ИЛИ Команда = "ИзмененияКоличества"
					ИЛИ Команда = "УдалениеТовара" Тогда
					
					Строка2 = Строка(ДисплейПокупателяПараметры.ТоварКоличество) + "x" +
						Строка2 + "=" + Строка(ДисплейПокупателяПараметры.ТоварСумма);

				КонецЕсли;
				Если Команда = "УдалениеТовара" Тогда
					Строка2 = "-" + Строка2;
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
	ИначеЕсли Команда = "Аннулирование" Тогда
		Строка1 = НСтр("ru = 'ЧЕК АННУЛИРОВАН'");
		
	ИначеЕсли Команда = "ОтложитьЧек" Тогда
		Строка1 = НСтр("ru = 'ЧЕК ОТЛОЖЕН'");
	
	ИначеЕсли Команда = "ВозвратТовара" Тогда
		Строка1 = НСтр("ru = 'ВОЗВРАТ ТОВАРА'");
		
	ИначеЕсли Команда = "Сервис" Тогда
		Строка1 = ТекстВНерабочемСостоянии;
	
	КонецЕсли;
	
	Описание = Новый ОписаниеОповещения("ВывестиИнформациюНаДисплейПокупателяЗавершение", ОбъектВладелец);
	МенеджерОборудованияКлиент.НачатьВыводИнформацииНаДисплейПокупателя(Описание,,, Строка1 + Символы.ПС + Строка2);
	
КонецПроцедуры

// Вывод предупреждения в случае, если оплата по карте прошла,
// а чек не был напечатан по каким-либо причинам.
//
// Параметры:
//  ОбработчикОповещения - ОписаниеОповещения.
//  ТаблицаОплата - ТабличнаяЧасть.
//  Владелец - УправляемаяФорма.
//
Процедура ВывестиПредупреждениеОбОтменеОплаты(ОбработчикОповещения, ТаблицаОплата, Владелец) Экспорт
	
	Для Каждого СтрокаОплаты Из ТаблицаОплата Цикл
		
		Если СтрокаОплаты.ДанныеПереданыВБанк Тогда
			
			ПараметрДействия = Новый Структура;
			ПараметрДействия.Вставить("ОткрытаБлокирующаяФорма", Ложь);
			ПараметрДействия.Вставить("ОбработчикОповещенияПриЗавершении", ОбработчикОповещения);
			ПараметрДействия.Вставить("ИдентификаторВыбраннойСтроки", СтрокаОплаты.ПолучитьИдентификатор());
			ПараметрДействия.Вставить("ЗавершитьУдалениеСтроки");
			
			ДополнительныеПараметры = Новый Структура;
			ДополнительныеПараметры.Вставить("ПараметрДействия",
				ОбщегоНазначенияКлиентСервер.СкопироватьРекурсивно(ПараметрДействия));
			
			ОбработчикОповещенияОбОтменеОплаты = Новый ОписаниеОповещения(
				"ОповещениеОткрытьФормуВопросаОбОтменеОперацииУдалениеСтроки",
				Владелец, 
				ДополнительныеПараметры);
				
			ПараметрДействия.ОткрытаБлокирующаяФорма = Истина;
			ОбщегоНазначенияРТКлиент.ВывестиВопросДляРМКУправляемой(
				НСтр("ru = 'Данные об оплате отправлены в банк.'"),
				НСтр("ru = 'Необходимо выполнить сторно произведенных операций.'"),,
				ОбработчикОповещенияОбОтменеОплаты);
			
		КонецЕсли;
	
	КонецЦикла;
	
КонецПроцедуры

// Обработка выбора подарка и запись его в табличную часть "Подарки".
//
// Параметры:
//  СтрокаПодарки - строка табличной части.
//  СтруктураЗаполнения - Структура.
//  Объект - ДанныеФормаКоллекция.
//  КэшированныеЗначения - Структура.
//
Процедура ЗаполнитьСтрокуПодаркаПриВыборе(СтрокаПодарки, СтруктураЗаполнения, Объект, КэшированныеЗначения) Экспорт
	
	ЗаполнитьЗначенияСвойств(СтрокаПодарки, СтруктураЗаполнения);
	
	СтруктураПараметровДействий = Новый Структура();
	СтруктураПараметровДействий.Вставить("Магазин", Объект.Магазин);
	СтруктураПараметровДействий.Вставить("РабочееМесто", Объект.РабочееМесто);
	СтруктураПараметровДействий.Вставить("Организация", Объект.Организация);
	
	СтруктураДействий = Новый Структура();
	СтруктураДействий.Вставить("ЗаполнитьСкладПродажи", СтруктураПараметровДействий);
	
	СтруктураДействий.Вставить("ЗаполнитьЦенуПродажи",
		ОбработкаТабличнойЧастиТоварыКлиент.СтруктураЗаполненияЦеныПродажиВСтрокеТЧ(Объект, Истина, Ложь));
	
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийЧекККМ.Продажа") Тогда
		СтруктураДействий.Вставить("ПересчитатьСумму");
	Иначе
		СтруктураДействий.Вставить("ПересчитатьСуммуВозвратСУчетомОснования",
			Новый Структура("Основание", Объект.ЧекККМПродажа));
	КонецЕсли;
		
	ОбработкаТабличнойЧастиТоварыКлиент.ПриИзмененииРеквизитовВТЧКлиент(
		Объект.Подарки,
		СтрокаПодарки,
		СтруктураДействий,
		КэшированныеЗначения);
		
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ЗаполнитьСуммуВсегоВТаблице(Объект.Товары, Объект.ЦенаВключаетНДС);
	
	СтрокаПодарки.Получен = СтруктураЗаполнения.Получен;
	
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ЗаполнитьКлючСвязи(Объект.Подарки, СтрокаПодарки, "КлючСвязи");

	Если СтруктураЗаполнения.Свойство("АдресСерийВХранилище")
		И ЗначениеЗаполнено(СтруктураЗаполнения.АдресСерийВХранилище) Тогда
		
		ИдентификаторСтроки = СтрокаПодарки.ПолучитьИдентификатор();
		РозничныеПродажиВызовСервера.ДополнитьСерииПодаркаИзСписка(ИдентификаторСтроки, СтруктураЗаполнения, Объект);
		
		Если СтруктураЗаполнения.Свойство("СерииПодарка") Тогда
			Для Каждого СтрокаСерии Из СтруктураЗаполнения.СерииПодарка.СтрокиСерий Цикл
				НоваяСтрока = Объект.СерииПодарков.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаСерии);
				НоваяСтрока.КлючСвязи = СтруктураЗаполнения.СерииПодарка.СтрокаПодаркаКлючСвязи;
			КонецЦикла;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Заполнение таблицы чеков в соответствии с распределение продаж
// по организациям.
//
// Параметры:
//  ТабличноеПолеЧеков - ТаблицаЗначений.
//  Объект - ДанныеФормаКоллекция.
//  СтруктураДанных - Структура.
//  Отказ - Булево.
//  МассивОрганизацийКлиент - Массив.
//
Процедура ЗаполнитьТаблицуЧековИПроверитьСоответствиеОрганизаций(ТабличноеПолеЧеков, 
																	Объект, 
																	СтруктураДанных, 
																	Отказ, 
																	МассивОрганизацийКлиент) Экспорт
	
	ЗаголовокОшибки = НСтр("ru = 'Ошибки распределения по организациям в номенклатуре:'");
	МассивОшибокПоОрганизациям = Новый Массив;
	Результат = Истина;
	
	Для Каждого СтрокаТПЧеков Из ТабличноеПолеЧеков Цикл
		Если Объект.ОперацияСДенежнымиСредствами
			И Объект.Товары.Количество() = 0
			И НЕ ЗначениеЗаполнено(Объект.ДокументРасчета) Тогда
			
			Возврат;
			
		ИначеЕсли МассивОрганизацийКлиент.Найти(СтрокаТПЧеков.Организация) = Неопределено Тогда
			
			МассивНоменклатур = Новый Массив;
			СтрокиСОрганизацией = Объект.Товары.НайтиСтроки(Новый Структура("Организация", СтрокаТПЧеков.Организация));
			
			Для каждого СтрокаСОрганизацией Из СтрокиСОрганизацией Цикл
				Если МассивНоменклатур.Найти(СтрокаСОрганизацией.Номенклатура) = Неопределено Тогда
					МассивНоменклатур.Добавить(СтрокаСОрганизацией.Номенклатура);
				КонецЕсли;
			КонецЦикла;
			
			ОрганизацияОшибки = ?(ЗначениеЗаполнено(СтрокаТПЧеков.Организация),
				СтрокаТПЧеков.Организация, НСтр("ru = '<Организация не заполнена>'"));
			
			СтруктураОшибки = Новый Структура("Организация, МассивНоменклатур", СтрокаТПЧеков.Организация, МассивНоменклатур);
			МассивОшибокПоОрганизациям.Добавить(СтруктураОшибки);
			
			Результат = Ложь;
		КонецЕсли;
	КонецЦикла;
	
	Если Не Результат Тогда
		
		Для каждого СтруктураОшибки Из МассивОшибокПоОрганизациям Цикл
		
			МассивНоменклатур = СтруктураОшибки.МассивНоменклатур;
			ТекстСообщения = НСтр("ru = '%1 :'");
			СтрокаОшибки = СтрШаблон(ТекстСообщения, СтруктураОшибки.Организация);
			
			Для каждого НоменклатураОшибки Из МассивНоменклатур Цикл
				СтрокаОшибки = СтрокаОшибки + Символы.ПС + НоменклатураОшибки;
			КонецЦикла;
			
			СтрокаОшибки = СтрокаОшибки + Символы.ПС;
			
		КонецЦикла;
		
		ОбщегоНазначенияРТКлиент.ВывестиИнформациюДляРМКУправляемой(ЗаголовокОшибки, СтрокаОшибки);
		Отказ = Истина;
		
	ИначеЕсли ТабличноеПолеЧеков.Количество() = 0 Тогда
		
		ОбщегоНазначенияРТКлиент.ВывестиИнформациюДляРМКУправляемой(НСтр("ru = 'Не правильно заполнены склады реализации'"));
		Отказ = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

// Обработка изменения настройки "ОперацияСДенежнымиСредствами".
//
// Параметры:
//  Объект - ДанныеФормаКоллекция.
//
Процедура ВыполнитьИзменениеОперацииДС(Объект) Экспорт
	
	Объект.ОперацияСДенежнымиСредствами = НЕ Объект.ОперацияСДенежнымиСредствами;
	Если Объект.ОперацияСДенежнымиСредствами Тогда
		
		Объект.Серии.Очистить();
		Объект.АкцизныеМарки.Очистить();
		Объект.СерийныеНомера.Очистить();
		
	КонецЕсли;
	
КонецПроцедуры

// Функция определяет, что это возврат маркируемой продукции ИСМП без марки.
//
// Параметры:
//  Объект - ДанныеФормыСтруктура.
//  СписокНоменклатуры - Список значений.
//
// Возвращаемое значение:
//  Булево - Истина, если это возврат без указания марок.
//
Функция ЭтоВозвратПродукцииИСМПБезУказанияМарок(Объект, СписокНоменклатуры = Неопределено) Экспорт 
	
	ВозвратПродукцииИСМПБезУказанияМарки = Ложь;
	
	Если НЕ ИнтеграцияИСМПКлиентСерверПовтИсп.ВестиУчетМаркируемойПродукции() Тогда
		Возврат ВозвратПродукцииИСМПБезУказанияМарки;
	КонецЕсли;
	
	Если СписокНоменклатуры = Неопределено Тогда 
		СписокНоменклатуры = Новый СписокЗначений;
	КонецЕсли;
	
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийЧекККМ.Возврат") Тогда
		
		ДоступныеВидыПродукцииИС = Новый Массив;
		УчитываемыеВидыМаркируемойПродукции = ОбщегоНазначенияИСМПКлиентСерверПовтИсп.УчитываемыеВидыМаркируемойПродукции();
		Для Каждого УчитываемыйВидПродукции Из УчитываемыеВидыМаркируемойПродукции Цикл
			Если ИнтеграцияИСМПКлиентСерверПовтИсп.ОбязательнаяРегистрацияОборотаМаркируемойПродукции(УчитываемыйВидПродукции, Объект.Дата) Тогда
				ДоступныеВидыПродукцииИС.Добавить(УчитываемыйВидПродукции);
			КонецЕсли;
		КонецЦикла;
		
		Для Каждого СтрокаТовары Из Объект.Товары Цикл
			
			Если ДоступныеВидыПродукцииИС.Найти(СтрокаТовары.ВидПродукцииИС) = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			СтруктураПоискаМарки = Новый Структура;
			СтруктураПоискаМарки.Вставить("КлючСвязи", СтрокаТовары.КлючСвязи);
			
			МассивСтрокМарки = Объект.АкцизныеМарки.НайтиСтроки(СтруктураПоискаМарки);
			Если МассивСтрокМарки.Количество() = 0 Тогда 
				СписокНоменклатуры.Добавить(СтрокаТовары.Номенклатура);
				ВозвратПродукцииИСМПБезУказанияМарки = Истина;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат ВозвратПродукцииИСМПБезУказанияМарки;
	
КонецФункции

// Очищает табличную часть СерийныеНомера по ключу связи,
// который содержится с строке табличной части.
//
// Параметры:
//  Объект - Объект.
//  СтрокаТабличнойЧасти - Строка табличной части.
//
Процедура ОчиститьСерийныеНомера(Объект, СтрокаТабличнойЧасти) Экспорт 
	
	СтруктураПоиска = Новый Структура;
	СтруктураПоиска.Вставить("КлючСвязиСерийныхНомеров", СтрокаТабличнойЧасти.КлючСвязиСерийныхНомеров);
	
	МассивСерийныхНомеров = Объект.СерийныеНомера.НайтиСтроки(СтруктураПоиска);
	
	Для Каждого СтрокаСерийныхНомеров Из МассивСерийныхНомеров Цикл
		Объект.СерийныеНомера.Удалить(СтрокаСерийныхНомеров);
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

#Область ЗаполнениеПоЧекамККМ

&НаКлиенте
Процедура ЗаполнитьПоЧекамККМ(СписокЭлемент) Экспорт
	
	МассивДокументов = Новый Массив;
	
	ВыделенныеСтроки = СписокЭлемент.ВыделенныеСтроки;
	
	Для Каждого ВыделеннаяСтрока Из ВыделенныеСтроки Цикл
		Если ТипЗнч(ВыделеннаяСтрока) = Тип("СтрокаГруппировкиДинамическогоСписка") Тогда
			Продолжить;
		КонецЕсли;
		
		ТекущаяСтрока = СписокЭлемент.ДанныеСтроки(ВыделеннаяСтрока);
		Если ТекущаяСтрока <> Неопределено Тогда
			МассивДокументов.Добавить(ТекущаяСтрока.Ссылка);
		КонецЕсли;     
		
	КонецЦикла;
	
	Если МассивДокументов.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещенияОЗавершении = Новый ОписаниеОповещения("ЗаполнитьПоЧекамККМЗавершение", ЭтотОбъект, МассивДокументов);
	
	ПоказатьВопрос(ОписаниеОповещенияОЗавершении,
		НСтр("ru = 'Выбранные отчеты о розничных продажах будут перезаполнены по данным в чеках ККМ (в т.ч. архивных). Если документ проведён, то он будет перепроведен. Продолжить?'"),
		РежимДиалогаВопрос.ДаНет,
		,
		КодВозвратаДиалога.Нет
	);
	
КонецПроцедуры 

Процедура ЗаполнитьПоЧекамККМЗавершение(Результат, МассивДокументов) Экспорт
	
	Если Результат <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	РозничныеПродажиВызовСервера.ВыполнитьЗаполнениеПоЧекамККМ(МассивДокументов);
		
	Оповестить("ОбновитьФормыПослеПроведенияОРП");
	
	ПоказатьОповещениеПользователя(НСтр("ru = 'Заполнение документа выполнено'"));
	
КонецПроцедуры

#КонецОбласти

Процедура ПроверитьКодМаркировкиСредствамиККТ(МассивСсылокЧековДляПроверкиМарок, ФормаВладелец, ЗаголовокКнопкиИгнорировать = Неопределено, ОповещениеОЗавершении, ФормаПросмотра = Неопределено) Экспорт
	
	МассивДанныхДляПроверки = Новый Массив;
	
	Для Каждого Чек Из МассивСсылокЧековДляПроверкиМарок Цикл
		
		ПараметрыСканирования = ШтрихкодированиеОбщегоНазначенияИСКлиент.ПараметрыСканирования(ФормаВладелец);
		
		ИдентификаторУстройства = Неопределено;
		ТребуетсяПроверкаСредствамиККТ = Ложь;
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ФормаВладелец, "ТаблицаКассККМОрганизаций") Тогда
			КассыККМ = ФормаВладелец.ТаблицаКассККМОрганизаций.НайтиСтроки(
			Новый Структура("КассаККМ", Чек.КассаККМ));
			Если КассыККМ.Количество() > 0 Тогда
				ИдентификаторУстройства = КассыККМ[0].ИдентификаторУстройства;
				ТребуетсяПроверкаСредствамиККТ = КассыККМ[0].ПоддерживаетПроверкуКодовМаркировки;
			КонецЕсли;
		КонецЕсли;
		
		Если ИдентификаторУстройства = Неопределено Тогда
			ПараметрыКассыККМ = ЗначениеНастроекВызовСервера.ПараметрыКассыККМ(Чек.КассаККМ);
			ИдентификаторУстройства = ПараметрыКассыККМ.ИдентификаторУстройства;
			ТребуетсяПроверкаСредствамиККТ = ПараметрыКассыККМ.ПоддерживаетПроверкуКодовМаркировки;
		КонецЕсли;
		
		Если ПараметрыСканирования.ТребуетсяПроверкаСредствамиККТ Тогда
			ККТФФД12ИСМП = ИдентификаторУстройства;
		КонецЕсли;
		
		Если МенеджерОборудованияВызовСервера.ФискальноеУстройствоПоддерживаетПроверкуКодовМаркировки(ИдентификаторУстройства) Тогда
			ПараметрыСканирования.Вставить("ТребуетсяПроверкаСредствамиККТ", ТребуетсяПроверкаСредствамиККТ);
			ПараметрыСканирования.Вставить("ККТФФД12ИСМП", ИдентификаторУстройства);
		КонецЕсли;
		
		ДанныеДляПроверки = Новый Массив;
		
		Для Каждого ПозицияЧека Из Чек.ПозицииЧека Цикл
			
			РезультатРаспределенияШтрихкодов = Неопределено;
			Если ПозицияЧека.Свойство("РезультатРаспределенияШтрихкодов", РезультатРаспределенияШтрихкодов)
				И НЕ РезультатРаспределенияШтрихкодов = Неопределено Тогда
				
				ЭлементДанныхДляПроверки = ШтрихкодированиеИСМПКлиент.НовыйЭлементПроверкиСредствамиККТПоДаннымРаспределения(
					РезультатРаспределенияШтрихкодов);
				Если Не ЗначениеЗаполнено(ЭлементДанныхДляПроверки.ПредставлениеНоменклатуры) Тогда
					Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ПозицияЧека, "Наименование")
						И ЗначениеЗаполнено(ПозицияЧека.Наименование) Тогда
						ЭлементДанныхДляПроверки.ПредставлениеНоменклатуры = ПозицияЧека.Наименование;
					ИначеЕсли ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ПозицияЧека, "Номенклатура")
						И ЗначениеЗаполнено(ПозицияЧека.Номенклатура) Тогда
						ЭлементДанныхДляПроверки.ПредставлениеНоменклатуры = ПозицияЧека.Номенклатура;
					КонецЕсли;
				КонецЕсли;
				
				ДанныеДляПроверки.Добавить(ЭлементДанныхДляПроверки);
				
			КонецЕсли;
		КонецЦикла;
		
		ПараметрыПроверкиКМСредствамиККТ = ШтрихкодированиеОбщегоНазначенияИСМПКлиент.ПараметрыНачалаПроверкиКодовМаркировкиСредствамиККТ();
		ПараметрыПроверкиКМСредствамиККТ.ДанныеДляПроверки           = ДанныеДляПроверки;
		ПараметрыПроверкиКМСредствамиККТ.ПараметрыСканирования       = ПараметрыСканирования;
		ПараметрыПроверкиКМСредствамиККТ.ФормаОсновногоОбъекта       = ФормаВладелец;
		ПараметрыПроверкиКМСредствамиККТ.ФормаВспомогательная        = ФормаПросмотра;
		ПараметрыПроверкиКМСредствамиККТ.ЗаголовокКнопкиИгнорировать = ЗаголовокКнопкиИгнорировать;
		ПараметрыПроверкиКМСредствамиККТ.ПроверятьЗапросыГИСМТ       = ОбщегоНазначенияИСМПКлиентСерверПовтИсп.ПроверкаТоварныхГруппПриРозничнойПродажеГИСМТ();
		ПараметрыПроверкиКМСредствамиККТ.Вставить("Чек", Чек);
		
		ДокументСсылка = ФормаВладелец.Объект.Ссылка;
		Если ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.ПриходныйКассовыйОрдер")
			ИЛИ ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.РасходныйКассовыйОрдер")
			ИЛИ ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.РегистрацияБезналичнойОплаты")
			ИЛИ ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.ОплатаОтПокупателяПлатежнойКартой") Тогда
			
			ПараметрыПроверкиКМСредствамиККТ.ЭтоДокументОплаты = Истина;
		КонецЕсли;
		
		МассивДанныхДляПроверки.Добавить(ПараметрыПроверкиКМСредствамиККТ);
	КонецЦикла;
	
	ПараметрыОперации = Новый Структура;
	ПараметрыОперации.Вставить("МассивДанныхДляПроверки", МассивДанныхДляПроверки);
	ПараметрыОперации.Вставить("ОповещениеОЗавершении", ОповещениеОЗавершении);
	ПараметрыОперации.Вставить("КоличествоОбъектовПроверки", МассивДанныхДляПроверки.Количество());
	ПараметрыОперации.Вставить("НомерТекущегоОбъектаПроверки", 0);
	ПараметрыОперации.Вставить("ФормаВладелец", ФормаВладелец);
	
	ПроверитьКодМаркировкиСредствамиККТЗавершение(Неопределено, ПараметрыОперации);
	
КонецПроцедуры

Процедура ПроверитьКодМаркировкиСредствамиККТЗавершение(РезультатОперации, ПараметрыОперации) Экспорт
	
	Если РезультатОперации = Неопределено
		ИЛИ (РезультатОперации.Свойство("ВыполнитьФискализацию")
		И ШтрихкодированиеИСМПКлиент.РезультатПроверкиСредствамиККТТребуетФискализации(РезультатОперации)) Тогда
		
		// Перенесем результат проверки ГИС МТ в параметры фискализации.
		Если ТипЗнч(РезультатОперации) = Тип("Структура") И РезультатОперации.Свойство("ЭлементыПроверки") Тогда
			Для Каждого ЭлементПроверки Из РезультатОперации.ЭлементыПроверки Цикл
				
				Если Не (ЗначениеЗаполнено(ЭлементПроверки.РазрешительныйРежимИдентификаторЗапросаГИСМТ)
					И ОбщегоНазначенияИСМПКлиентСерверПовтИсп.ПродукцияПодлежитОбязательнойОнлайнПроверкеПередРозничнойПродажей(ЭлементПроверки.ВидПродукции)) Тогда
					Продолжить;
				КонецЕсли;
				
				ДанныеПроверки = ПараметрыОперации.МассивДанныхДляПроверки.Получить(ПараметрыОперации.НомерТекущегоОбъектаПроверки - 1);
				
				РезультатРаспределенияШтрихкодов = Неопределено;
				Для Каждого ПозицияЧека Из ДанныеПроверки.Чек.ПозицииЧека Цикл
					ПозицияЧека.Свойство("РезультатРаспределенияШтрихкодов", РезультатРаспределенияШтрихкодов);
					Если РезультатРаспределенияШтрихкодов = Неопределено Тогда
						Продолжить;
					КонецЕсли;
					Если РезультатРаспределенияШтрихкодов.ПолныйКодМаркировки = ЭлементПроверки.ПолныйКодМаркировки Тогда
						
						Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ПозицияЧека, "ЗапросПроверкиКода") Тогда
							ПозицияЧека.ЗапросПроверкиКода.ИдентификаторЗапроса
								= ЭлементПроверки.РазрешительныйРежимИдентификаторЗапросаГИСМТ;
							ПозицияЧека.ЗапросПроверкиКода.ВременнаяМетка
								= ЭлементПроверки.РазрешительныйРежимДатаЗапросаГИСМТ;
						Иначе
							ПозицияЧека.РезультатРаспределенияШтрихкодов.РазрешительныйРежимИдентификаторЗапросаГИСМТ
								= ЭлементПроверки.РазрешительныйРежимИдентификаторЗапросаГИСМТ;
							ПозицияЧека.РезультатРаспределенияШтрихкодов.РазрешительныйРежимДатаЗапросаГИСМТ
								= ЭлементПроверки.РазрешительныйРежимДатаЗапросаГИСМТ;
						КонецЕсли;
						
						Прервать;
					КонецЕсли;
					
				КонецЦикла;
				
				Если ПараметрыОперации.ФормаВладелец.ИмяФормы = "Обработка.РМКУправляемыйРежим.Форма.Форма" Тогда
					ПараметрыПоиска = Новый Структура("АкцизнаяМарка", ЭлементПроверки.ШтрихкодУпаковки);
					СтрокиМарок = ПараметрыОперации.ФормаВладелец.Объект.АкцизныеМарки.НайтиСтроки(ПараметрыПоиска);
					Для Каждого СтрокаМарки Из СтрокиМарок Цикл
						СтрокаМарки.РазрешительныйРежимИдентификаторЗапросаГИСМТ = ЭлементПроверки.РазрешительныйРежимИдентификаторЗапросаГИСМТ;
						СтрокаМарки.РазрешительныйРежимДатаЗапросаГИСМТ = ЭлементПроверки.РазрешительныйРежимДатаЗапросаГИСМТ;
					КонецЦикла;
				КонецЕсли;
				
			КонецЦикла;
		КонецЕсли;
		
		Если ПараметрыОперации.НомерТекущегоОбъектаПроверки < ПараметрыОперации.КоличествоОбъектовПроверки Тогда
			ДанныеПроверки = ПараметрыОперации.МассивДанныхДляПроверки.Получить(ПараметрыОперации.НомерТекущегоОбъектаПроверки);
			ПараметрыОперации.НомерТекущегоОбъектаПроверки = ПараметрыОперации.НомерТекущегоОбъектаПроверки + 1;
			ДанныеПроверки.ОповещениеОЗавершении = Новый ОписаниеОповещения("ПроверитьКодМаркировкиСредствамиККТЗавершение", ЭтотОбъект, ПараметрыОперации);
			ШтрихкодированиеОбщегоНазначенияИСМПКлиент.НачатьПроверкуКодовМаркировкиСредствамиККТ(ДанныеПроверки);
		Иначе
			ВыполнитьОбработкуОповещения(ПараметрыОперации.ОповещениеОЗавершении, Истина);
		КонецЕсли;
	Иначе
		
		ДанныеПроверки = ПараметрыОперации.МассивДанныхДляПроверки.Получить(ПараметрыОперации.НомерТекущегоОбъектаПроверки - 1);
		Если ДанныеПроверки.Чек.Свойство("СсылкаЧека") Тогда
			ЧекСсылка = ДанныеПроверки.Чек.СсылкаЧека;
		Иначе
			ЧекСсылка = ДанныеПроверки.Чек.ДокументОснование;
		КонецЕсли;
		ШтрихкодированиеИСМПВызовСервера.ОчиститьРезультатыПроверкиСредствамиККТ(ЧекСсылка);
		ВыполнитьОбработкуОповещения(ПараметрыОперации.ОповещениеОЗавершении, Ложь);
		
	КонецЕсли;
	
КонецПроцедуры
#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ПолучитьТекстЗаголовка(ИсходныйЗаголок)
	
#Если ВебКлиент Тогда 
	НовыйЗаголовок = "";
	НомерСимвола = СтрНайти(ИсходныйЗаголок, "(");
	Если НомерСимвола = 0 Тогда 
		Возврат ИсходныйЗаголок;
	КонецЕсли;
	НовыйЗаголовок = Лев(ИсходныйЗаголок, НомерСимвола - 2);
	
	Возврат НовыйЗаголовок;
#Иначе
	Возврат ИсходныйЗаголок;
#КонецЕсли
	
КонецФункции

// Формирует строку для вывода информации о номенклатуре в виде:
// "10х7 400.00 руб=74 000. руб", пытаясь уместить текст в установленный размер символов
// сначала убирает представление валюты, затем незначащие нули после запятой, 
// далее убирает неразрывные пробелы, и в конце заменяет цену и количество на первую цифру и многоточие,
// как только строка помещается в указанный размер процесс останавливается.
// 
// Параметры:
//   Количество - Строка, Число
//   Цена - Строка - сформированная строка функцией РозничныеПродажиКлиентСервер.ФорматСумм(), цена с валютой
//   Сумма - Строка - сформированная строка функцией РозничныеПродажиКлиентСервер.ФорматСумм(), сумма с валютой
//   РазмерСтроки - Число - максимальная длина строки в которую нужно уместить текст
//
// Возвращаемое значение:
//   Строка - сформированая строка для вывода на дисплей покупателя
Функция СтрокаНоменклатурыДляДисплеяПокупателя(Знач Количество, Знач Цена, Знач Сумма, РазмерСтроки = 0)
	
	Количество          = СтрЗаменить(Строка(Количество), Символы.НПП, "");
	Цена                = СтрЗаменить(Строка(Цена),       Символы.НПП, "");
	Сумма               = СтрЗаменить(Строка(Сумма),      Символы.НПП, "");
	Итерация            = 0;
	ПредставлениеВалюты = ОбщегоНазначенияРТКлиентСерверПовтИсп.Валюта();
	
	Пока Истина Цикл 
		
		Итерация      = Итерация + 1;
		ТекущаяСтрока = СтрШаблон("%1x%2=%3", Количество, Цена, Сумма);
		
		Если СтрДлина(ТекущаяСтрока) <= РазмерСтроки Или РазмерСтроки = 0 Тогда
			Прервать;
		// убирает представление валюты
		ИначеЕсли Итерация = 1 Тогда
			Цена = СокрЛП(СтрЗаменить(Цена, ПредставлениеВалюты, ""));
		ИначеЕсли Итерация = 2 Тогда
			Сумма = СокрЛП(СтрЗаменить(Сумма, ПредставлениеВалюты, ""));
		// убирает незначащие нули после запятой
		ИначеЕсли (Итерация = 3) И (Цена % 1 = 0)  Тогда
			Цена = Цел(Цена);
			Цена = СтрЗаменить(Строка(Цена), Символы.НПП, "");
		ИначеЕсли (Итерация = 4) И (Сумма % 1 = 0)  Тогда
			Сумма = Цел(Сумма);
			Сумма = СтрЗаменить(Строка(Сумма), Символы.НПП, "");
		// уменьшает длину, заменив первой цифрой и многоточием
		ИначеЕсли Итерация = 5 Тогда
			Цена = Лев(Цена, 1) + "...";
		ИначеЕсли Итерация = 6 Тогда
			Количество = Лев(Количество, 1) + "...";
		// все возможности уменьшения исчерпаны
		ИначеЕсли Итерация = 7 Тогда
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ТекущаяСтрока;
	
КонецФункции

#КонецОбласти
