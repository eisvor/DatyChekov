
#Область РазборШтрихкодаПриРозничнойРеализации

//Используется в розничном выбытии для проверки полученного ШК на принадлежность к кодам маркировки
//
Функция РазобратьШтриховойКодТовара(Знач Штрихкод, Знач ШтрихкодВBase64 = Ложь) Экспорт;
	
	Идентификаторы  = РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйКлиентСервер.ИдентификаторыGS1(); 
	// Определяем структуру результата. 
	ДанныеКодаТовара = ЗаполнитьИменаРеквизитовКодаТовара(Ложь);
	
	Если ШтрихкодВBase64 Тогда
		ДанныеКодаТовара.ШтрихкодBase64 = Штрихкод;
		ДвоичныеДанные = Base64Значение(Штрихкод);
		
		Если ДвоичныеДанные = Неопределено Тогда
			ШтриховойКодТовара = ШтрихкодВBase64;
		Иначе
			ШтриховойКодТовара = ПолучитьСтрокуИзДвоичныхДанных(ДвоичныеДанные);
		КонецЕсли;
		
	Иначе
		//Штрихкод - Нормализованный КМ - без спецсимволов и со скобками у идентифиаторов.
		ШтриховойКодТовара = Штрихкод;
		ДанныеКодаТовара.ШтрихкодBase64 = РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйКлиентСервер.ШтрихкодВBase64(ШтриховойКодТовара);
	КонецЕсли;
	
	ДлинаШтрихкода = СтрДлина(ШтриховойКодТовара);
	ДанныеКодаТовара.ТипИдентификатораТовара = ПредопределенноеЗначение("Перечисление.ТипыИдентификаторовШКТовараИСМПТК.КодТовараНеРаспознан");
	ДанныеКодаТовара.НаименованиеРеквизита 	 = "NotIdentified";
	
	Если ДлинаШтрихкода = 8 Тогда // ТипыИдентификаторовТовара.EAN8
		
		// Последовательности данных равна 8 символам и последовательность символов состоит из цифр.
		Если ОбщегоНазначенияИСМПТККлиентСервер.ТолькоЦифрыВСтроке(ШтриховойКодТовара) Тогда
			
			// Проверяется контрольная сумма по правилам формирования кода EAN-8.
			КонтрольныйСимволGTIN8 		= РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйКлиентСервер.РассчитатьКонтрольныйСимволGTIN8(ШтриховойКодТовара);
			Если КонтрольныйСимволGTIN8 = Прав(ШтриховойКодТовара, 1) Тогда
				
				ДанныеКодаТовара.ТипИдентификатораТовара = ПредопределенноеЗначение("Перечисление.ТипыИдентификаторовШКТовараИСМПТК.КодТовараВФорматеEAN8");
				РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйКлиентСервер.СформироватьEAN(ДанныеКодаТовара, ШтриховойКодТовара);
				ДанныеКодаТовара.Разобран = Истина;
				ДанныеКодаТовара.НаименованиеРеквизита = "EAN8";
				ДанныеКодаТовара.ПредставлениеШтрихкода = ШтриховойКодТовара;
				Возврат ДанныеКодаТовара;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
		
	Если ДлинаШтрихкода = 13 Тогда // ТипыИдентификаторовТовара.EAN13
		
		// Последовательности данных равна 13 символам и последовательность символов состоит из цифр.
		Если ОбщегоНазначенияИСМПТККлиентСервер.ТолькоЦифрыВСтроке(ШтриховойКодТовара) Тогда
			
			// Проверяется контрольная сумма по правилам формирования кода EAN-13.
			КонтрольныйСимволGTIN13 	 = РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйКлиентСервер.РассчитатьКонтрольныйСимволGTIN13(ШтриховойКодТовара);
			Если КонтрольныйСимволGTIN13 = Прав(ШтриховойКодТовара, 1) Тогда
				
				ДанныеКодаТовара.ТипИдентификатораТовара = ПредопределенноеЗначение("Перечисление.ТипыИдентификаторовШКТовараИСМПТК.КодТовараВФорматеEAN13");
				РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйКлиентСервер.СформироватьEAN(ДанныеКодаТовара, ШтриховойКодТовара);
				//СформироватьДвоичныеДанныеДляЧисла(ДанныеКодаТовара, ШтриховойКодТовара); 
				ДанныеКодаТовара.Разобран = Истина;
				ДанныеКодаТовара.НаименованиеРеквизита = "EAN13";
				ДанныеКодаТовара.ПредставлениеШтрихкода = ШтриховойКодТовара;
				Возврат ДанныеКодаТовара;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если ДлинаШтрихкода = 14 Тогда // ТипыИдентификаторовТовара.ITF14
		
		// Последовательности данных равна 14 символам и последовательность символов состоит из цифр.
		Если ОбщегоНазначенияИСМПТККлиентСервер.ТолькоЦифрыВСтроке(ШтриховойКодТовара) Тогда
			
			// Проверяется контрольная сумма по правилам формирования кода ITF-14
			КонтрольныйСимволGTIN14 	 = РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйКлиентСервер.РассчитатьКонтрольныйСимволGTIN14(ШтриховойКодТовара);
			Если КонтрольныйСимволGTIN14 = Прав(ШтриховойКодТовара, 1) Тогда
				
				ДанныеКодаТовара.ТипИдентификатораТовара = ПредопределенноеЗначение("Перечисление.ТипыИдентификаторовШКТовараИСМПТК.КодТовараВФорматеITF14");
				РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйКлиентСервер.СформироватьEAN(ДанныеКодаТовара, ШтриховойКодТовара);
				//СформироватьДвоичныеДанныеДляЧисла(ДанныеКодаТовара, ШтриховойКодТовара); 
				ДанныеКодаТовара.Разобран = Истина;
				ДанныеКодаТовара.НаименованиеРеквизита = "ITF14";
				ДанныеКодаТовара.ПредставлениеШтрихкода = ШтриховойКодТовара;
				Возврат ДанныеКодаТовара;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
		
	Если ДлинаШтрихкода = 29 Или  ДлинаШтрихкода = 25 Тогда // Код товара в формате Data Matrix маркировки табачной продукции.
		
		Если РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйКлиентСервер.ПроверкаСтроки(ШтриховойКодТовара, Истина, Истина, Истина, "«!”""%&’'()*+-.,/_:;=<>?»") Тогда
			
			GTIN = Лев(ШтриховойКодТовара, 14); 
			СерийныйНомер = Сред(ШтриховойКодТовара, 15, 7); // Код идентификации упаковки табачной продукции.
			МРЦ = Сред(ШтриховойКодТовара, 22, 4);
			
			ТолькоЦифрыВСтроке 		= ОбщегоНазначенияИСМПТККлиентСервер.ТолькоЦифрыВСтроке(GTIN);
			КонтрольныйСимволGTIN14 = РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйКлиентСервер.РассчитатьКонтрольныйСимволGTIN14(GTIN);
			
			Если ТолькоЦифрыВСтроке И КонтрольныйСимволGTIN14 = Прав(GTIN, 1) Тогда
				
				ДанныеКодаТовара.ТипИдентификатораТовара = ПредопределенноеЗначение("Перечисление.ТипыИдентификаторовШКТовараИСМПТК.КодТовараВФорматеDataMatrixGS1");
				ДанныеКодаТовара.СерийныйНомер = СерийныйНомер;
				
				РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйКлиентСервер.СформироватьEAN(ДанныеКодаТовара, GTIN);
				// Последующие 11 символов считанной последовательности формируются по правилам интерпретации ASCII в hex
				ЗначениеСтроки = СерийныйНомер + МРЦ;
				
				Пока СтрДлина(ЗначениеСтроки) < 13 Цикл
					ЗначениеСтроки = ЗначениеСтроки + Символ(32); // Дополняем знаками «20h» в конце (пробелами справа) до 13 байт 
				КонецЦикла;
												
				ДанныеКодаТовара.Разобран = Истина;
				ДанныеКодаТовара.НаименованиеРеквизита = "KMK";
				
				//После стандартного преобразования представление штрихкода может содержать служебный символ, с которым возникают проблемы при передаче данных клиент-сервер. 
				//Поэтому в качестве представления штрихкода будем использовать КИ - нормализованный штрихкод, т.к. КМ без криптохвоста и спецсимволов.
				ПредставлениеШК = РозничноеВыбытиеИСМПТККлиентСервер.ПодготовитьПредставлениеКодаМаркировкиДляРозницы(ДанныеКодаТовара.ШтрихкодBase64);
				Если ЗначениеЗаполнено(ПредставлениеШК) Тогда
					ДанныеКодаТовара.ПредставлениеШтрихкода = ПредставлениеШК;
					Возврат ДанныеКодаТовара;
				Иначе
					//Если представление пустое  -возможно, штрихкод не ошибочный, просто не включен учет нужной ТГ. Поэтому проверяем дополнительно
					Если ДанныеКодаТовара.ТипИдентификатораТовара = ПредопределенноеЗначение("Перечисление.ТипыИдентификаторовШКТовараИСМПТК.КодТовараВФорматеDataMatrixGS1")
						И ДанныеКодаТовара.Разобран
						И Не ЗначениеЗаполнено(ДанныеКодаТовара.ОписаниеОшибки) Тогда
						ДанныеКодаТовара.ОписаниеОшибки = НСтр("ru = 'Не удалось распознать код маркировки. Возможно, в программе не включен учет маркировки этой товарной группы или код сгенерирован с ошибками.'");
					Иначе
						ДанныеКодаТовара.ОписаниеОшибки = НСтр("ru = 'Не удалось разобрать формат штрихкода. Возможно, код сгенерирован с ошибками.'");
						ДанныеКодаТовара.Разобран = Ложь;
					КонецЕсли;
					Возврат ДанныеКодаТовара;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	КодыGS1 = РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйКлиентСерверПовтИсп.КодыGS1();
	
	Если СтрНачинаетсяС(ШтриховойКодТовара, "(") Тогда
		// Штрихкод по стандарту GS1 в HRI виде (человекочитаемый вид)
		РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйКлиентСервер.РазобратьСтрокуШтрихкодаGS1СоСкобками(ШтриховойКодТовара, ДанныеКодаТовара, КодыGS1);
	КонецЕсли;
	
	Если НЕ ДанныеКодаТовара.Разобран Тогда
		
		// Штрихкод по стандарту GS1 присутствует символ разделитель GS1 (Dec 29).
		ПозицияРазделителяGS1   = Найти(ШтриховойКодТовара, РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйКлиентСервер.РазделительGS1());
		ПозицияРазделителяЭкран = Найти(ШтриховойКодТовара, РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйКлиентСервер.ЭкранированныйСимволGS1());
		
		Если ПозицияРазделителяGS1 > 0 Или ПозицияРазделителяЭкран > 0 Тогда 
			
			КодыGS1 = РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйКлиентСерверПовтИсп.КодыGS1();
			
			Если ПозицияРазделителяЭкран > 0 Тогда
				ЧастиШтрихкода = ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.РазложитьСтрокуВМассивПодстрок(ШтриховойКодТовара, РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйКлиентСервер.ЭкранированныйСимволGS1(), Ложь);
			Иначе
				ЧастиШтрихкода = СтрРазделить(ШтриховойКодТовара, РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйКлиентСервер.РазделительGS1(), Ложь);
			КонецЕсли;
			
			Для Каждого ЧастьБезРазделителей Из ЧастиШтрихкода Цикл
				РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйКлиентСервер.РазобратьСтрокуШтрихкодаGS1Служебный(ЧастьБезРазделителей, ДанныеКодаТовара, КодыGS1);
			КонецЦикла;
			
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ ДанныеКодаТовара.Разобран Тогда
		// Штрихкод по стандарту GS1 без разделителя GS1 (Dec 29).
		РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйКлиентСервер.РазобратьСтрокуШтрихкодаGS1Служебный(ШтриховойКодТовара, ДанныеКодаТовара, КодыGS1);
		Если ДанныеКодаТовара.Разобран
			И ДанныеКодаТовара.ТипИдентификатораТовара = ПредопределенноеЗначение("Перечисление.ТипыИдентификаторовШКТовараИСМПТК.КодТовараНеРаспознан") Тогда 
			ДанныеКодаТовара.Разобран = Ложь;
			ДанныеКодаТовара.ОписаниеОшибки = НСтр("ru = 'Не удалось разобрать формат штрихкода. Возможно, код сгенерирован с ошибками или его продажа в розницу не поддерживается.'");
		КонецЕсли;		
	КонецЕсли;
	
	// Штрихкод по стандарту GS1
	Если ДанныеКодаТовара.Разобран Тогда
		
		ЗначениеЭлемента = ДанныеКодаТовара.ДанныеШтрихкода.Получить(Идентификаторы.GTIN);
		GTIN = ?(ЗначениеЭлемента <> Неопределено, ЗначениеЭлемента.Значение, Неопределено);
		
		Если GTIN <> Неопределено 
			И ОбщегоНазначенияИСМПТККлиентСервер.ТолькоЦифрыВСтроке(GTIN) 
			И РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйКлиентСервер.РассчитатьКонтрольныйСимволGTIN14(GTIN) = Прав(GTIN, 1) Тогда
			
			ЗначениеЭлемента = ДанныеКодаТовара.ДанныеШтрихкода.Получить(Идентификаторы.СерийныйНомер);
			
			Если ЗначениеЭлемента <> Неопределено Тогда
				
				ДанныеКодаТовара.ТипИдентификатораТовара = ПредопределенноеЗначение("Перечисление.ТипыИдентификаторовШКТовараИСМПТК.КодТовараВФорматеDataMatrixGS1");
				ДанныеКодаТовара.СерийныйНомер = ЗначениеЭлемента.Значение;
				
				СерийныйНомер = ДанныеКодаТовара.СерийныйНомер;
				ЗначениеЭлементаЦена = ДанныеКодаТовара.ДанныеШтрихкода.Получить(Идентификаторы.ЦенаЕдиницыТовара);
				
				Если ЗначениеЭлементаЦена <> Неопределено Тогда
					СерийныйНомер = СерийныйНомер + ЗначениеЭлементаЦена.Значение;
				КонецЕсли;
				
				РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйКлиентСервер.СформироватьEAN(ДанныеКодаТовара, GTIN);
								
				ДанныеКодаТовара.Разобран = Истина;
				ДанныеКодаТовара.НаименованиеРеквизита = "GS1.M";
				
				//После стандартного преобразования представление штрихкода может содержать служебный символ, с которым возникают проблемы при передаче данных клиент-сервер. 
				//Поэтому в качестве представления штрихкода будем использовать КИ - нормализованный штрихкод, т.к. КМ без криптохвоста и спецсимволов.
				ПредставлениеШК = РозничноеВыбытиеИСМПТККлиентСервер.ПодготовитьПредставлениеКодаМаркировкиДляРозницы(ДанныеКодаТовара.ШтрихкодBase64);
				Если ЗначениеЗаполнено(ПредставлениеШК) Тогда
					ДанныеКодаТовара.ПредставлениеШтрихкода = ПредставлениеШК; //Код идентификации
					Возврат ДанныеКодаТовара;
				Иначе
					//Если представление пустое  -возможно, штрихкод не ошибочный, просто не включен учет нужной ТГ. Поэтому проверяем дополнительно
					Если ДанныеКодаТовара.ТипИдентификатораТовара = ПредопределенноеЗначение("Перечисление.ТипыИдентификаторовШКТовараИСМПТК.КодТовараВФорматеDataMatrixGS1")
						И ДанныеКодаТовара.Разобран
						И Не ЗначениеЗаполнено(ДанныеКодаТовара.ОписаниеОшибки) Тогда
						ДанныеКодаТовара.ОписаниеОшибки = НСтр("ru = 'Не удалось распознать код маркировки. Возможно, в программе не включен учет маркировки этой товарной группы или код сгенерирован с ошибками.'");
					Иначе
						ДанныеКодаТовара.ОписаниеОшибки = НСтр("ru = 'Не удалось разобрать формат штрихкода. Возможно, код сгенерирован с ошибками.'");
						ДанныеКодаТовара.Разобран = Ложь;
					КонецЕсли;
					Возврат ДанныеКодаТовара;
				КонецЕсли;
		        
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	//  Штрихкод Datamatrix содержит идентификаторы применения (AI).
	Если Лев(ШтриховойКодТовара, 2) = Идентификаторы.GTIN Тогда // Если штрихкод начинается с группы '01' - GTIN .
		
		GTIN = Сред(ШтриховойКодТовара, 3, 14); // Получаем GTIN 
		// Проверяем GTIN на корректность, и далее идет группа '21' - SERIAL.
		
		Если ОбщегоНазначенияИСМПТККлиентСервер.ТолькоЦифрыВСтроке(GTIN) 
			И РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйКлиентСервер.РассчитатьКонтрольныйСимволGTIN14(GTIN) = Прав(GTIN, 1)
			И Сред(ШтриховойКодТовара, 17, 2) = Идентификаторы.СерийныйНомер Тогда
			
			ДанныеСтроки = Сред(ШтриховойКодТовара, 19);
			
			Если СтрДлина(ДанныеСтроки) > 13 Тогда //
				
				// Предполагаем что серийный номер состоит из 13 символов
				СерийныйНомер = Сред(ДанныеСтроки, 1, 13);
				СледующаяГруппа2 = Сред(ДанныеСтроки, 14, 2);
				СледующаяГруппа3 = Сред(ДанныеСтроки, 14, 3);
				СледующаяГруппа4 = Сред(ДанныеСтроки, 14, 4);
				
				Если СледующаяГруппа2 = Идентификаторы.КлючПроверки 
					Или СледующаяГруппа2 = Идентификаторы.КодПроверки 
					Или СледующаяГруппа2 = "17" 
					Или СледующаяГруппа4 = "7003" 
					Или СледующаяГруппа3 = Идентификаторы.КодТНВЭД Тогда
					
					ДанныеКодаТовара.ТипИдентификатораТовара = ПредопределенноеЗначение("Перечисление.ТипыИдентификаторовШКТовараИСМПТК.КодТовараВФорматеDataMatrixGS1");
					ДанныеКодаТовара.СерийныйНомер = СерийныйНомер; 
					
					РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйКлиентСервер.СформироватьEAN(ДанныеКодаТовара, GTIN);
										
					ДанныеКодаТовара.Разобран = Истина;
					ДанныеКодаТовара.НаименованиеРеквизита = "GS1.0";
					
					//После стандартного преобразования представление штрихкода может содержать служебный символ, с которым возникают проблемы при передаче данных клиент-сервер. 
					//Поэтому в качестве представления штрихкода будем использовать КИ - нормализованный штрихкод, т.к. КМ без криптохвоста и спецсимволов.
					ПредставлениеШК = РозничноеВыбытиеИСМПТККлиентСервер.ПодготовитьПредставлениеКодаМаркировкиДляРозницы(ДанныеКодаТовара.ШтрихкодBase64);
					Если ЗначениеЗаполнено(ПредставлениеШК) Тогда
						ДанныеКодаТовара.ПредставлениеШтрихкода = ПредставлениеШК;
						Возврат ДанныеКодаТовара;
					Иначе
						//Если представление пустое  -возможно, штрихкод не ошибочный, просто не включен учет нужной ТГ. Поэтому проверяем дополнительно
					Если ДанныеКодаТовара.ТипИдентификатораТовара = ПредопределенноеЗначение("Перечисление.ТипыИдентификаторовШКТовараИСМПТК.КодТовараВФорматеDataMatrixGS1")
						И ДанныеКодаТовара.Разобран
						И Не ЗначениеЗаполнено(ДанныеКодаТовара.ОписаниеОшибки) Тогда
						ДанныеКодаТовара.ОписаниеОшибки = НСтр("ru = 'Не удалось распознать код маркировки. Возможно, в программе не включен учет маркировки этой товарной группы или код сгенерирован с ошибками.'");
					Иначе
						ДанныеКодаТовара.ОписаниеОшибки = НСтр("ru = 'Не удалось разобрать формат штрихкода. Возможно, код сгенерирован с ошибками.'");
						ДанныеКодаТовара.Разобран = Ложь;
					КонецЕсли;
					Возврат ДанныеКодаТовара;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если ДанныеКодаТовара.Разобран Тогда
		Если Не ДанныеКодаТовара.ТипИдентификатораТовара = ПредопределенноеЗначение("Перечисление.ТипыИдентификаторовШКТовараИСМПТК.КодТовараНеРаспознан") Тогда
			РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйКлиентСервер.СформироватьДвоичныеДанныеДляСтроки(ДанныеКодаТовара, Лев(ШтриховойКодТовара, 30));
		Иначе
			ДанныеКодаТовара.Разобран = Ложь;
		КонецЕсли;
	КонецЕсли;
				
	Возврат ДанныеКодаТовара;
	
КонецФункции

//Структура данных для рабора кода при рочничной продаже
//
Функция ЗаполнитьИменаРеквизитовКодаТовара(КодРазобран = Ложь)
	
	// Определяем структуру результата. 
	ДанныеКодаТовара = Новый Структура();
	ДанныеКодаТовара.Вставить("Разобран", 				 КодРазобран);
	ДанныеКодаТовара.Вставить("ОписаниеОшибки");
	ДанныеКодаТовара.Вставить("ПредставлениеШтрихкода" , "");
	ДанныеКодаТовара.Вставить("ДанныеШтрихкода", 		 Новый Соответствие);
	ДанныеКодаТовара.Вставить("ТипИдентификатораТовара"); // Тип идентификатора товара, Перечисление.ТипыИдентификаторовШКТовараИСМПТК
	ДанныеКодаТовара.Вставить("GTIN");          		  // GTIN
	ДанныеКодаТовара.Вставить("СерийныйНомер"); 		  // Серийный номер с потребительской или групповой обработки.
	ДанныеКодаТовара.Вставить("EAN");           		  // Штрихкод товара преобразованный из GTIN
	ДанныеКодаТовара.Вставить("ШтрихкодBase64"); 		  // Штрихкод в BASE64
	ДанныеКодаТовара.Вставить("НаименованиеРеквизита");   // Наименование реквизита
	
	Возврат ДанныеКодаТовара;
	
КонецФункции

Функция ПолучитьОсобенностьУчетаНоменклатуры(Номенклатура) Экспорт
	
	Возврат РозничноеВыбытиеИСМПТКПереопределяемый.ПолучитьОсобенностьУчетаНоменклатуры(Номенклатура);
	
КонецФункции

#КонецОбласти

#Область РазборКодаМаркировки_РозничнаяТорговля

Функция ПолучитьКодыМаркировкиПриРозничнойПродаже(ИсходныеДанные) Экспорт
	
	Если ИсходныеДанные.Свойство("ФорматBase64") Тогда
		ШтрихкодBase64 = ИсходныеДанные.Штрихкод;
	Иначе
		ШтрихкодBase64 = РазборИОбработкаКодовМаркировкиИСМПТКСлужебный.СтрокуВBase64(ИсходныеДанные.Штрихкод);
	КонецЕсли;
	
	НастройкиРазбораКодаМаркировки = РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйПовтИсп.НастройкиРазбораКодаМаркировки();  
	ДанныеРазбора = РазборИОбработкаКодовМаркировкиИСМПТКСлужебный.РазобратьКодМаркировки(ИсходныеДанные, НастройкиРазбораКодаМаркировки.ДоступныеВидыПродукции, , НастройкиРазбораКодаМаркировки);
	
	Если ДанныеРазбора = Неопределено Тогда 
		Возврат НСтр("ru = 'Не удалось разобрать штрихкод. Возможно, код некорректен или в программе не включен учет маркировки этой товарной группы.'");
	КонецЕсли;
	
	GTIN = "";
	СообщениеТранспортныеКоды = НСтр("ru = 'Транспортные коды маркировки нельзя выбывать через Чеки.'");
	
	Если НастройкиРазбораКодаМаркировки.ДоступныеВидыПродукции.Количество() = 1 Тогда
		
		Если ДанныеРазбора.ТипШтрихкода = Перечисления.ТипыШтрихкодовИСМПТК.SSCC Тогда 
			Возврат СообщениеТранспортныеКоды;
		Иначе
			ВидПродукции = НастройкиРазбораКодаМаркировки.ДоступныеВидыПродукции[0];
			GTIN 		 = ДанныеРазбора.СоставКодаМаркировки.GTIN; 
		КонецЕсли;
			
	ИначеЕсли ДанныеРазбора.ВидыПродукции.Количество() = 1 Тогда
		
		Если ДанныеРазбора.ТипШтрихкода = Перечисления.ТипыШтрихкодовИСМПТК.SSCC Тогда 
			Возврат СообщениеТранспортныеКоды;
	    Иначе
			ВидПродукции = ДанныеРазбора.ВидыПродукции[0];
			GTIN = ДанныеРазбора.СоставКодаМаркировки.GTIN;
		КонецЕсли;
	Иначе
		Если ДанныеРазбора.ТипШтрихкода = Перечисления.ТипыШтрихкодовИСМПТК.SSCC Тогда 
			Возврат СообщениеТранспортныеКоды;
		Иначе
			GTIN = ДанныеРазбора.СоставКодаМаркировки.GTIN; //Для потребительского кода оба реквизита GTIN равны.

			ДанныеНоменклатуры = ОбщегоНазначенияИСМПТКПереопределяемый.ПолучитьДанныеНоменклатурыИзРегистраШтрихкодовПоШтрихкоду(, ДанныеРазбора.СоставКодаМаркировки.EAN);
			Если ТипЗнч(ДанныеНоменклатуры) = Тип("Структура") Тогда
				НайденнаяНоменклатура = ДанныеНоменклатуры.Номенклатура;
			Иначе
				НайденнаяНоменклатура = Неопределено;
			КонецЕсли;
			
			Если Не НайденнаяНоменклатура = Неопределено
				И Не НайденнаяНоменклатура.Пустая() Тогда
				ВидПродукции = ОбщегоНазначенияИСМПТКПереопределяемый.ПолучитьВидПродукцииПоНоменклатуре(НайденнаяНоменклатура);
			Иначе
				ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИСМПТК.ПустаяСсылка");
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	
	Если ДанныеРазбора.ВидУпаковки = Перечисления.ВидыУпаковокИСМПТК.Групповая
		Или ДанныеРазбора.ВидУпаковки = Перечисления.ВидыУпаковокИСМПТК.Потребительская Тогда 
		
		ГрупповаяУпаковка = ДанныеРазбора.ВидУпаковки = Перечисления.ВидыУпаковокИСМПТК.Групповая;
		
		КодыМаркировки = Новый Структура("КодМаркировки, КодИдентификации, GTIN, EAN, ВидУпаковки, ВидПродукции, Количество");
		КодыМаркировки.КодМаркировки 	= ШтрихкодBase64;
		КодыМаркировки.GTIN 			= GTIN;
		КодыМаркировки.EAN 				= ДанныеРазбора.СоставКодаМаркировки.EAN;
		КодыМаркировки.КодИдентификации = ДанныеРазбора.НормализованныйКодМаркировки;
		КодыМаркировки.ВидУпаковки		= ДанныеРазбора.ВидУпаковки;
		КодыМаркировки.ВидПродукции 	= ВидПродукции;
		КодыМаркировки.Количество		= 1;
		
	Иначе
		Возврат СообщениеТранспортныеКоды;
	КонецЕсли;
	
	Возврат КодыМаркировки;
	
КонецФункции

Функция ПроверитьТипШтрихкодаВФормеВводаКМ(Штрихкод) Экспорт
	
	Возврат РозничноеВыбытиеИСМПТКПереопределяемый.ПроверитьТипШтрихкодаВФормеВводаКМ(Штрихкод);
	
КонецФункции

Функция НормализованныйШтрихкод(ШтрихкодBase64) Экспорт
	
	Возврат РозничноеВыбытиеИСМПТК.НормализованныйШтрихкод(ШтрихкодBase64);
	
КонецФункции

//ВидПродукцииШК - значение перечисления ВидыПродукцииИСМПТК
//
Функция ПроверитьАктивностьОпцииУчетаПоТГноменклатуры(ВидПродукцииШК) Экспорт
	
	МассивДоступныхТГПоНастройкамУчета = ОбщегоНазначенияИСМПТК.УчитываемыеВидыМаркируемойПродукции();
	Возврат Не МассивДоступныхТГПоНастройкамУчета.Найти(ВидПродукцииШК) = Неопределено;
	
КонецФункции

Функция ПроверитьОпциюНеЗапрашиватьКМТабакаВРознице() Экспорт
	
	Если ПравоДоступа("Просмотр", Метаданные.Константы.НеЗапрашиватьКМТабачнойПродукцииВРозничномКонтуреИСМПТК) Тогда
		Возврат Константы.НеЗапрашиватьКМТабачнойПродукцииВРозничномКонтуреИСМПТК.Получить();
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

Функция ПроверитьОпциюНеЗапрашиватьКМФармыВРознице() Экспорт
	
	Если ПравоДоступа("Просмотр", Метаданные.Константы.НеЗапрашиватьКМЛекарственнойПродукцииВРозничномКонтуреИСЦЭДМ) Тогда
		Возврат Константы.НеЗапрашиватьКМЛекарственнойПродукцииВРозничномКонтуреИСЦЭДМ.Получить();
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

Функция ПроверитьШтрихкодПоФорматуКодовМаркировки(Штрихкод) Экспорт
	
	Возврат РозничноеВыбытиеИСМПТК.ЭтоШтрихкодТабачнойПродукции(Штрихкод)
		Или РозничноеВыбытиеИСМПТК.ЭтоШтрихкодОбувнойПродукции(Штрихкод)
		Или РозничноеВыбытиеИСМПТК.ЭтоШтрихкодЛекарственнойПродукции(Штрихкод);
		
КонецФункции

Функция ЕстьПравоЧтенияОбработкаРозничноеВыбытиеИСМПТК() Экспорт
	
	Возврат ПравоДоступа("Просмотр", Метаданные.Обработки.РозничноеВыбытиеМаркированнойПродукцииИСМПТК);
	
КонецФункции

Функция ПроверитьВключениеУчетаТГ(ВидПродукции) Экспорт
	
	Если ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИСМПТК.Табачная") Тогда
		Возврат Константы.ВестиУчетМаркируемогоТабакаИСМПТК.Получить();
	ИначеЕсли ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИСМПТК.Обувная") Тогда
		Возврат Константы.ВестиУчетМаркируемойОбувиИСМПТК.Получить();
	ИначеЕсли ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИСМПТК.ЛекарственныеПрепараты") Тогда
		Возврат Константы.ВестиУчетМаркируемыхЛекарствИСМПТК.Получить();
	ИначеЕсли ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИСМПТК.МолочнаяПродукция") Тогда
		Возврат Константы.ВестиУчетМаркируемойМолочкиИСМПТК.Получить()
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

Функция ПроверитьРазборШтрихкода(ИсходныйШтрихкод) Экспорт
	
	Штрихкод = РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйКлиентСервер.Base64ВШтрихкод(ИсходныйШтрихкод);
	Возврат РазборИОбработкаКодовМаркировкиИСМПТКСлужебный.РазобратьКодМаркировки(Штрихкод);
	
КонецФункции

#КонецОбласти
