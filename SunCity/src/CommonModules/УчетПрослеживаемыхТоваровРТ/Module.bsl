#Область ПрограммныйИнтерфейс

#Область НастройкаСистемы

// Возвращает признак использования учета прослеживаемых, импортных товаров на указанную дату.
//
// Параметры:
//	Дата - Дата - дата, на которую нужно получить значение возможности использования учета прослеживаемых, импортных
//					товаров.
//
// Возвращаемое значение:
//	Булево - Истина означает, что доступна возможность учета прослеживаемых, импортных товаров.
//
Функция ИспользоватьУчетПрослеживаемыхИмпортныхТоваров(Дата) Экспорт
	
	ИспользоватьУчетПрослеживаемыхИмпортныхТоваров = Ложь;
	ДатаПроверкиФО = ?(ЗначениеЗаполнено(Дата), Дата, ТекущаяДатаСеанса());
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьУчетПрослеживаемыхИмпортныхТоваров")
		И НачалоМесяца(ДатаПроверкиФО) >= ДатаНачалаУчетаПрослеживаемыхИмпортныхТоваров() Тогда
		
		ИспользоватьУчетПрослеживаемыхИмпортныхТоваров = Истина;
		
	КонецЕсли;
	
	Возврат ИспользоватьУчетПрослеживаемыхИмпортныхТоваров;
	
КонецФункции

// Возвращает значение даты начала использования учета прослеживаемых, импортных товаров.
//
// Возвращаемое значение:
//	Дата - дата начала использования учета прослеживаемых, импортных товаров.
//
Функция ДатаНачалаУчетаПрослеживаемыхИмпортныхТоваров() Экспорт
	
	ДатаНачалаУчета = Дата(2399, 1, 1);
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьУчетПрослеживаемыхИмпортныхТоваров") Тогда
		ДатаНачалаУчета = НачалоМесяца(Константы.ДатаНачалаУчетаПрослеживаемыхИмпортныхТоваров.Получить());
	КонецЕсли;

	Возврат ДатаНачалаУчета;
	
КонецФункции

#КонецОбласти

#Область ПодключениеКБСП

// См. ОбщийМодуль.СозданиеНаОснованииПереопределяемый.ПриОпределенииОбъектовСКомандамиСозданияНаОсновании()
//
Процедура ПриОпределенииОбъектовСКомандамиСозданияНаОсновании(Объекты) Экспорт
	
	Объекты.Добавить(Метаданные.Документы.ВводОстатковПрослеживаемыхИмпортныхТоваров);
	
КонецПроцедуры

// См. ОбщийМодуль.ВариантыОтчетовПереопределяемый.ОпределитьОбъектыСКомандамиОтчетов()
//
Процедура ОпределитьОбъектыСКомандамиОтчетов(Объекты) Экспорт
	
	Объекты.Добавить(Метаданные.Документы.ВводОстатковПрослеживаемыхИмпортныхТоваров);
	
КонецПроцедуры

// См. ОбщийМодуль.УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа()
//
Процедура ПриЗаполненииСписковСОграничениемДоступа(Списки) Экспорт
	
	Списки.Вставить(Метаданные.Документы.ВводОстатковПрослеживаемыхИмпортныхТоваров, Истина);
	
КонецПроцедуры

#КонецОбласти

// Дополняет параметры проверки одновременного содержания в таблице номенклатуры как подлежащей, так и не подлежащей
// прослеживаемости.
//
Процедура ДополнитьПараметрыПроверкиНаличияПрослеживаемыхИНепрослеживаемыхТоваров(ПараметрыПроверки) Экспорт
	
	ПараметрыПроверки.Вставить("ПутьКДаннымТаблицы",		"Объект");
	ПараметрыПроверки.Вставить("ИмяПоляДата",				"Дата");
	ПараметрыПроверки.Вставить("ИмяТЧ",						"Товары");
	ПараметрыПроверки.Вставить("ПредставлениеТЧ",			"");
	ПараметрыПроверки.Вставить("ИмяКолонкиНоменклатура",	"Номенклатура");
	ПараметрыПроверки.Вставить("ВыводитьНомераСтрок",		Истина);
	ПараметрыПроверки.Вставить("СписокСтрок",				Неопределено);
	ПараметрыПроверки.Вставить("ОтборПроверяемыхСтрок",		Новый Структура);
	ПараметрыПроверки.Вставить("ВыдаватьСообщения",			Истина);
	
КонецПроцедуры

// Проверяет одновременное содержание в табличной части объекта номенклатуры как подлежащей, так и не подлежащей
// прослеживаемости.
//
// Параметры:
//	Объект - ДокументОбъект, Структура - объект, в табличной части которого выполняется проверка.
//	Отказ - Булево - Истина, признак того, что в табличной части объекта содержатся как прослеживаемые, так и
//						непрослеживаемые позиции номенклатуры.
//	ПараметрыПроверки - Структура, Неопределено - параметры проверки.
//
Процедура ПроверитьНаличиеПрослеживаемыхИНепрослеживаемыхТоваров(Объект, Отказ, ПараметрыПроверки) Экспорт
	
	Если ПараметрыПроверки = Неопределено Тогда
		ПараметрыПроверки = Новый Структура;
		
		ДополнитьПараметрыПроверкиНаличияПрослеживаемыхИНепрослеживаемыхТоваров(ПараметрыПроверки);
	КонецЕсли;
	
	ДатаОбъекта = ТекущаяДатаСеанса();
	ИмяПоляДата = ПараметрыПроверки.ИмяПоляДата;
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Объект, ИмяПоляДата) Тогда
		ДатаОбъекта = Объект[ИмяПоляДата];
	КонецЕсли;
	
	Если Не ИспользоватьУчетПрослеживаемыхИмпортныхТоваров(ДатаОбъекта) Тогда
		Возврат;
	КонецЕсли;
	
	ИмяТЧ = ПараметрыПроверки.ИмяТЧ;
	ОтборСтрокДляПроверки = ПараметрыПроверки.СписокСтрок;
	
	Если ОтборСтрокДляПроверки = Неопределено
		И ПараметрыПроверки.ОтборПроверяемыхСтрок.Количество() > 0 Тогда
		
		ОтборСтрокДляПроверки = ПараметрыПроверки.ОтборПроверяемыхСтрок;
		
	КонецЕсли;
	
	ИмяКолонкиНоменклатура = ПараметрыПроверки.ИмяКолонкиНоменклатура;
	ВыгружаемыеКолонки = "НомерСтроки, " + ИмяКолонкиНоменклатура;
	
	ТаблицаТоваров = Объект[ИмяТЧ].Выгрузить(ОтборСтрокДляПроверки, ВыгружаемыеКолонки);
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ТаблицаТоваров.НомерСтроки	КАК НомерСтроки,
	|	ВЫРАЗИТЬ(&Номенклатура КАК Справочник.Номенклатура) КАК Номенклатура
	|ПОМЕСТИТЬ ТаблицаТоварыДляЗапроса
	|ИЗ
	|	&ТаблицаТоваров КАК ТаблицаТоваров
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаТоваров.НомерСтроки	КАК НомерСтроки,
	|	ТаблицаТоваров.Номенклатура	КАК Номенклатура,
	|	ЕСТЬNULL(ТаблицаНоменклатуры.КодТНВЭД.ПрослеживаемыйТовар, ЛОЖЬ)
	|		И ЕСТЬNULL(ТаблицаНоменклатуры.ВестиУчетПоГТД, ЛОЖЬ) КАК ПрослеживаемыйТовар
	|ПОМЕСТИТЬ ТаблицаТовары
	|ИЗ
	|	ТаблицаТоварыДляЗапроса КАК ТаблицаТоваров
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК ТаблицаНоменклатуры
	|		ПО ТаблицаТоваров.Номенклатура = ТаблицаНоменклатуры.Ссылка
	|			И ТаблицаНоменклатуры.ТипНоменклатуры В(ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар),
	|													ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СУММА(ВЫБОР
	|			КОГДА ТаблицаТовары.ПрослеживаемыйТовар
	|				ТОГДА 1
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК КоличествоПролеживаемых,
	|	СУММА(ВЫБОР
	|			КОГДА НЕ ТаблицаТовары.ПрослеживаемыйТовар
	|				ТОГДА 1
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК КоличествоНеПролеживаемых
	|ИЗ
	|	ТаблицаТовары КАК ТаблицаТовары
	|
	|ИМЕЮЩИЕ
	|	СУММА(ВЫБОР
	|			КОГДА ТаблицаТовары.ПрослеживаемыйТовар
	|				ТОГДА 1
	|			ИНАЧЕ 0
	|		КОНЕЦ) > 0
	|	И СУММА(ВЫБОР
	|			КОГДА НЕ ТаблицаТовары.ПрослеживаемыйТовар
	|				ТОГДА 1
	|			ИНАЧЕ 0
	|		КОНЕЦ) > 0";
	
	Запрос = Новый Запрос;
	Запрос.Текст = СтрЗаменить(ТекстЗапроса, "&Номенклатура", "ТаблицаТоваров." + ИмяКолонкиНоменклатура);
	
	Запрос.УстановитьПараметр("ТаблицаТоваров", ТаблицаТоваров);
	
	РезультатЗапроса	= Запрос.ВыполнитьПакетСПромежуточнымиДанными();
	РезультатПроверки	= РезультатЗапроса[2];
	
	Если РезультатПроверки.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	Отказ = Истина;
	
	Если Не ПараметрыПроверки.ВыдаватьСообщения Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(Объект) = Тип("ФормаКлиентскогоПриложения") Тогда
		МетаданныеОбъекта = Объект.Ссылка.Метаданные();
	Иначе
		МетаданныеОбъекта = Объект.Метаданные();
	КонецЕсли;
	
	ПредставлениеТЧ		= ?(Не ПараметрыПроверки.Свойство("ПредставлениеТЧ")
								Или Не ЗначениеЗаполнено(ПараметрыПроверки.ПредставлениеТЧ),
							МетаданныеОбъекта.ТабличныеЧасти[ИмяТЧ].Синоним,
							ПараметрыПроверки.ПредставлениеТЧ);
	КлючДанных			= Объект;
	ПутьКДаннымТаблицы	= ПараметрыПроверки.ПутьКДаннымТаблицы;
	
	ТекстСообщения = НСтр("ru='Документ не может содержать одновременно прослеживаемую по РНПТ и непрослеживаемую номенклатуру.
							|Номенклатура прослеживаемая по РНПТ:'");
	ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ТаблицаТовары%", ПредставлениеТЧ);
	
	ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, КлючДанных, "", ПутьКДаннымТаблицы);
	
	Товары = РезультатЗапроса[1].Выгрузить();
	
	ПараметрыОтбора			= Новый Структура("ПрослеживаемыйТовар", Истина);
	ПрослеживаемыеТовары	= Товары.НайтиСтроки(ПараметрыОтбора);
	
	ШаблонСообщения = НСтр("ru='""%Номенклатура%"" в списке ""%ТаблицаТовары%"".'");
	
	Если ПараметрыПроверки.ВыводитьНомераСтрок Тогда
		ШаблонСообщения = НСтр("ru='""%Номенклатура%"" в строке %НомерСтроки% списка ""%ТаблицаТовары%"".'");
	КонецЕсли;
	
	Для Каждого СтрокаТЧ Из ПрослеживаемыеТовары Цикл
		ТекстСообщения = СтрЗаменить(ШаблонСообщения,	"%Номенклатура%",	СтрокаТЧ.Номенклатура);
		ТекстСообщения = СтрЗаменить(ТекстСообщения,	"%НомерСтроки%",	СтрокаТЧ.НомерСтроки);
		ТекстСообщения = СтрЗаменить(ТекстСообщения,	"%ТаблицаТовары%",	ПредставлениеТЧ);
		
		Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(ИмяТЧ,
																СтрокаТЧ.НомерСтроки,
																ПараметрыПроверки.ИмяКолонкиНоменклатура);
		
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, КлючДанных, Поле, ПутьКДаннымТаблицы);
	КонецЦикла;
	
КонецПроцедуры

// Дополняет параметры проверки заполнения в таблице поля 'КоличествоПоРНПТ'.
//
Процедура ДополнитьПараметрыПроверкиЗаполненияКоличестваПоРНПТ(ПараметрыПроверки) Экспорт
	
	ПараметрыПроверки.Вставить("ПутьКДаннымТаблицы",		"Объект");
	ПараметрыПроверки.Вставить("ИмяПоляДата",				"Дата");
	ПараметрыПроверки.Вставить("ИмяТЧ",						"Товары");
	ПараметрыПроверки.Вставить("ПредставлениеТЧ",			"");
	ПараметрыПроверки.Вставить("ИмяКолонкиНоменклатура",	"Номенклатура");
	ПараметрыПроверки.Вставить("СписокСтрок",				Неопределено);
	ПараметрыПроверки.Вставить("ОтборПроверяемыхСтрок",		Новый Структура);
	
КонецПроцедуры

// Проверяет заполнение в таблице поля 'КоличествоПоРНПТ'.
//
// Параметры:
//	Объект - ДокументОбъект, Структура - объект, в табличной части которого выполняется проверка.
//	Отказ - Булево - Истина, признак того, что в табличной части объекта не заполнено проверяемое поле.
//	ПараметрыПроверки - Структура, Неопределено - параметры проверки.
//
Процедура ПроверитьЗаполнениеКоличестваПоРНПТ(Объект, Отказ, ПараметрыПроверки) Экспорт
	
	Если ПараметрыПроверки = Неопределено Тогда
		ПараметрыПроверки = Новый Структура;
		
		ДополнитьПараметрыПроверкиЗаполненияКоличестваПоРНПТ(ПараметрыПроверки);
	КонецЕсли;
	
	ДатаОбъекта = ТекущаяДатаСеанса();
	ИмяПоляДата = ПараметрыПроверки.ИмяПоляДата;
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Объект, ИмяПоляДата) Тогда
		ДатаОбъекта = Объект[ИмяПоляДата];
	КонецЕсли;
	
	Если Не ИспользоватьУчетПрослеживаемыхИмпортныхТоваров(ДатаОбъекта) Тогда
		Возврат;
	КонецЕсли;
	
	ИмяТЧ = ПараметрыПроверки.ИмяТЧ;
	ОтборСтрокДляПроверки = ПараметрыПроверки.СписокСтрок;
	
	Если ОтборСтрокДляПроверки = Неопределено
		И ПараметрыПроверки.ОтборПроверяемыхСтрок.Количество() > 0 Тогда
		
		ОтборСтрокДляПроверки = ПараметрыПроверки.ОтборПроверяемыхСтрок;
		
	КонецЕсли;
	
	ИмяКолонкиНоменклатура = ПараметрыПроверки.ИмяКолонкиНоменклатура;
	ВыгружаемыеКолонки = "НомерСтроки, КоличествоПоРНПТ, " + ИмяКолонкиНоменклатура;
	
	ТаблицаТоваров = Объект[ИмяТЧ].Выгрузить(ОтборСтрокДляПроверки, ВыгружаемыеКолонки);
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ТаблицаТоваров.НомерСтроки КАК НомерСтроки,
	|	ВЫРАЗИТЬ(&Номенклатура КАК Справочник.Номенклатура) КАК Номенклатура,
	|	ТаблицаТоваров.КоличествоПоРНПТ КАК КоличествоПоРНПТ
	|ПОМЕСТИТЬ ТаблицаТоварыДляЗапроса
	|ИЗ
	|	&ТаблицаТоваров КАК ТаблицаТоваров
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаТоваров.НомерСтроки КАК НомерСтроки,
	|	&ПроверитьКоличествоПоРНПТ
	|		И ТаблицаТоваров.КоличествоПоРНПТ = 0 КАК ПустоеКоличествоПоРНПТ,
	|	ИСТИНА КАК ПрослеживаемыйТовар
	|ИЗ
	|	ТаблицаТоварыДляЗапроса КАК ТаблицаТоваров
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК ТаблицаНоменклатуры
	|		ПО ТаблицаТоваров.Номенклатура = ТаблицаНоменклатуры.Ссылка
	|			И (ТаблицаНоменклатуры.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар))
	|ГДЕ
	|	&ПроверитьКоличествоПоРНПТ
	|	И ТаблицаТоваров.КоличествоПоРНПТ = 0
	|	И ЕСТЬNULL(ТаблицаНоменклатуры.КодТНВЭД.ПрослеживаемыйТовар, ЛОЖЬ)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТаблицаТоваров.НомерСтроки,
	|	&ПроверитьКоличествоПоРНПТ
	|		И ТаблицаТоваров.КоличествоПоРНПТ = 0,
	|	ЛОЖЬ
	|ИЗ
	|	ТаблицаТоварыДляЗапроса КАК ТаблицаТоваров
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК ТаблицаНоменклатуры
	|		ПО ТаблицаТоваров.Номенклатура = ТаблицаНоменклатуры.Ссылка
	|			И (ТаблицаНоменклатуры.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар))
	|ГДЕ
	|	&ПроверитьКоличествоПоРНПТ
	|	И НЕ ТаблицаТоваров.КоличествоПоРНПТ = 0
	|	И НЕ ЕСТЬNULL(ТаблицаНоменклатуры.КодТНВЭД.ПрослеживаемыйТовар, ЛОЖЬ)
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	Запрос = Новый Запрос;
	Запрос.Текст = СтрЗаменить(ТекстЗапроса, "&Номенклатура", "ТаблицаТоваров." + ИмяКолонкиНоменклатура);
	
	Запрос.УстановитьПараметр("ТаблицаТоваров", ТаблицаТоваров);
	Запрос.УстановитьПараметр("ПроверитьКоличествоПоРНПТ", Истина);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	
	ОшибкаЗаполненияКоличестваПоРНПТ = НСтр("ru='Не заполнена колонка ""Количество по РНПТ"" в строке %НомерСтроки% списка ""%ТаблицаТовары%"".'");
	ОшибкаЗаполненияКоличестваПоРНПТНепрослеживаемогоТовара = НСтр("ru='Заполнена колонка ""Количество по РНПТ"" в строке %НомерСтроки% списка ""%ТаблицаТовары%"" у непрослеживаемого товара.'");
	
	Если ТипЗнч(Объект) = Тип("ФормаКлиентскогоПриложения") Тогда
		МетаданныеОбъекта = Объект.Ссылка.Метаданные();
	Иначе
		МетаданныеОбъекта = Объект.Метаданные();
	КонецЕсли;
	
	ПредставлениеТЧ		= ?(Не ПараметрыПроверки.Свойство("ПредставлениеТЧ")
								Или Не ЗначениеЗаполнено(ПараметрыПроверки.ПредставлениеТЧ),
							МетаданныеОбъекта.ТабличныеЧасти[ИмяТЧ].Синоним,
							ПараметрыПроверки.ПредставлениеТЧ);
	КлючДанных			= Объект;
	ПутьКДаннымТаблицы	= ПараметрыПроверки.ПутьКДаннымТаблицы;
	
	Пока Выборка.Следующий() Цикл
		ТекстСообщения = СтрЗаменить(?(Выборка.ПрослеживаемыйТовар, ОшибкаЗаполненияКоличестваПоРНПТ, ОшибкаЗаполненияКоличестваПоРНПТНепрослеживаемогоТовара), "%НомерСтроки%", Выборка.НомерСтроки);
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ТаблицаТовары%", ПредставлениеТЧ);
		
		Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(ИмяТЧ, Выборка.НомерСтроки, "КоличествоПоРНПТ");
		
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, КлючДанных, Поле, ПутьКДаннымТаблицы, Отказ);
	КонецЦикла;
	
КонецПроцедуры

// Устанавливаем условное оформление количества по РНПТ
//
// Параметры:
//	Форма - ДанныеФормыСтруктура - содержит данные формы.
//	ИмяПоляВводаКоличествоПоРНПТ - Строка - Наименование элемента формы, содержащего количество по РНПТ,
//											если оно отличается от "ТоварыКоличествоПоРНПТ".
//	ПутьКПолюОтбора - Строка - Полный путь к реквизиту "ВедетсяУчетПоРНПТ",
//								если он отличается от "Объект.Товары.ВедетсяУчетПоРНПТ".
//
Процедура УстановитьУсловноеОформлениеКоличестваПоРНПТ(Форма,
														ИмяПоляВводаКоличествоПоРНПТ = "ТоварыКоличествоПоРНПТ",
														ПутьКПолюОтбора = "Объект.Товары.ВедетсяУчетПоРНПТ",
														ПутьКПолюДатаДокумента = "Объект.Дата") Экспорт
	
	ДатаНачалаПрослеживаемости = ДатаНачалаУчетаПрослеживаемыхИмпортныхТоваров();
	
	ЭлементыФормы		= Форма.Элементы;
	УсловноеОформление	= Форма.УсловноеОформление;
	
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ЭлементыФормы[ИмяПоляВводаКоличествоПоРНПТ].Имя);
	
	ГруппаОтбора1 = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора1.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
	
	ОтборЭлемента = ГруппаОтбора1.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ПутьКПолюОтбора);
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	ОтборЭлемента = ГруппаОтбора1.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ПутьКПолюДатаДокумента);
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Меньше;
	ОтборЭлемента.ПравоеЗначение = ДатаНачалаПрослеживаемости;
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<товар не прослеживается>'"));
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет);
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь)
	
КонецПроцедуры

// Устанавливает видимость колонки 'КоличествоПоРНПТ' в соответствующей таблице документа.
//
// Параметры:
//	Форма - ДанныеФормыСтруктура - данные формы.
//	ДатаДокумента - Дата - дата документа, необходимая для проверки возможности использования учета прослеживаемых,
//							импортных товаров.
//	ЭлементГруппаРНТП - Строка - имя соответствующего элемента формы.
//
Процедура УстановитьВидимостьКоличестваРНПТ(Форма,
											ДатаДокумента,
											ЭлементГруппаРНТП = "ТоварыГруппаКоличествоПоРНПТ") Экспорт
											
	ИспользоватьУчетПрослеживаемыхИмпортныхТоваров = ИспользоватьУчетПрослеживаемыхИмпортныхТоваров(ДатаДокумента);
	
	Форма.Элементы[ЭлементГруппаРНТП].Видимость = ИспользоватьУчетПрослеживаемыхИмпортныхТоваров;
	
КонецПроцедуры

// Заполняет КоличествоПоРНПТ в переданной табличной части.
//
// Параметры:
//	ПараметрыПересчета - Структура - см. УчетПрослеживаемыхТоваровКлиентСерверРТ.ПараметрыПолученияКоэффициентаРНПТ.
//	Товары - ДанныеФормыКоллекция - Таблица товаров документа со следующими обязательными полями:
//		* Номенклатура - СправочникСсылка.Номенклатура - товар.
//		* Характеристика - СправочникСсылка.ХарактеристикиНоменклатуры - характеристика товара.
//		* Склад - СправочникСсылка.Склады - склад, поле требуется если склад указан в табличной части.
//		* Количество - Число - количество товара.
//		* КоличествоПоРНПТ - Число - прослеживаемое количество товара.
//
Процедура ЗаполнитьКоличествоПоРНПТВТабличнойЧасти(ПараметрыПересчета, Товары) Экспорт
	
	Организация			= ПараметрыПересчета.Организация;
	ИсключаемыйДокумент	= ПараметрыПересчета.ИсключаемыйДокумент;
	
	Если ТипЗнч(Товары) = Тип("ТаблицаЗначений") Тогда
		ТоварыКЗапросуРНПТ = Товары.Скопировать();
	Иначе
		ТоварыКЗапросуРНПТ = Товары.Выгрузить();
	КонецЕсли;
	
	Если ПараметрыПересчета.МестоХраненияВТабличнойЧасти
		И ПараметрыПересчета.ИмяПоляМестоХранения <> "МестоХранения" Тогда
		
		ТоварыКЗапросуРНПТ.Колонки[ПараметрыПересчета.ИмяПоляМестоХранения].Имя = "МестоХранения";
		
	ИначеЕсли Не ПараметрыПересчета.МестоХраненияВТабличнойЧасти Тогда
		
		ТоварыКЗапросуРНПТ.Колонки.Добавить("МестоХранения", Новый ОписаниеТипов("СправочникСсылка.Склады, СправочникСсылка.ДоговорыКонтрагентов"));
		ТоварыКЗапросуРНПТ.ЗаполнитьЗначения(ПараметрыПересчета.МестоХранения, "МестоХранения");
		
	КонецЕсли;
	
	Если ИспользоватьУчетПрослеживаемыхИмпортныхТоваров(ПараметрыПересчета.Дата) Тогда
		
		Коэффициенты = РегистрыНакопления.ТоварыОрганизаций.ПолучитьКоэффициентыПрослеживаемыхТоваров(ИсключаемыйДокумент,
																										Организация,
																										ТоварыКЗапросуРНПТ);
		Коэффициенты.Колонки.МестоХранения.Имя = ПараметрыПересчета.ИмяПоляМестоХранения;
		
		СтруктураПоиска = Новый Структура("Номенклатура, Характеристика");
		
		Если ПараметрыПересчета.МестоХраненияВТабличнойЧасти Тогда
			СтруктураПоиска = Новый Структура("Номенклатура, Характеристика, " + ПараметрыПересчета.ИмяПоляМестоХранения);
		КонецЕсли;
		
		Для Каждого СтрокаКоэффициента Из Коэффициенты Цикл
			ЗаполнитьЗначенияСвойств(СтруктураПоиска, СтрокаКоэффициента);
			НайденныеСтроки = Товары.НайтиСтроки(СтруктураПоиска);
			Для Каждого ТекущаяСтрока Из НайденныеСтроки Цикл
				ТекущаяСтрока.КоличествоПоРНПТ = ТекущаяСтрока.Количество * СтрокаКоэффициента.Коэффициент;
			КонецЦикла;
		КонецЦикла;
		
	Иначе
		Для Каждого ТекущаяСтрока Из Товары Цикл
			ТекущаяСтрока.КоличествоПоРНПТ = 0;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

// Показывает пиктограмму и текст предупреждения о том, что в документе одновременно указаны обычные
// и прослеживаемые товары.
//
// Параметры:
//	Форма - ДанныеФормыСтруктура - содержит данные формы.
//	Товары - ДанныеФормыКоллекция - Таблица товаров документа со следующими обязательными полями:
//		* Номенклатура - СправочникСсылка.Номенклатура - товар.
//	ДатаДокумента - Дата - дата документа, для проверки использования его в прослеживаемости.
//	НадписьПересечениеПрослеживаемыхИОбычныхТоваров - Строка - соответствующий реквизит формы.
//	ЭлементГруппаКартинкаИНадписьПересечениеПрослеживаемыхИОбычныхТоваров - Строка - имя элемента формы.
//	ЭлементКартинкаПересечениеПрослеживаемыхИОбычныхТоваров - Строка - имя элемента формы.
//
Процедура ОбновитьКартинкуПересечениеПрослеживаемыхИОбычныхТоваров(Форма,
	Товары,
	ДатаДокумента,
	НадписьПересечениеПрослеживаемыхИОбычныхТоваров,
	ЭлементГруппаКартинкаИНадписьПересечениеПрослеживаемыхИОбычныхТоваров = "ГруппаКартинкаИНадписьПересечениеПрослеживаемыхИОбычныхТоваров",
	ЭлементКартинкаПересечениеПрослеживаемыхИОбычныхТоваров = "КартинкаПересечениеПрослеживаемыхИОбычныхТоваров") Экспорт
	
	ЕстьПересечение = Ложь;
	ИспользоватьУчетПрослеживаемыхИмпортныхТоваров = Ложь;
	
	ИспользоватьУчетПрослеживаемыхИмпортныхТоваров = ИспользоватьУчетПрослеживаемыхИмпортныхТоваров(ДатаДокумента);
	
	Если ИспользоватьУчетПрослеживаемыхИмпортныхТоваров Тогда
		СводнаяИнформацияОТоварахРНПТ = СводнаяИнформацияОТоварахРНПТ(Товары);
		
		ЕстьПересечение = СводнаяИнформацияОТоварахРНПТ.ЕстьТоварРНПТ
							И СводнаяИнформацияОТоварахРНПТ.ЕстьТоварНеРНПТ;
	КонецЕсли;
	
	Если ЕстьПересечение
		И ИспользоватьУчетПрослеживаемыхИмпортныхТоваров Тогда
		Форма.Элементы.ГруппаКартинкаИНадписьПересечениеПрослеживаемыхИОбычныхТоваров.Видимость = Истина;
		Форма.Элементы.КартинкаПересечениеПрослеживаемыхИОбычныхТоваров.Картинка = БиблиотекаКартинок.Предупреждение;
		НадписьПересечениеПрослеживаемыхИОбычныхТоваров = НСтр("ru='Документ не может содержать одновременно прослеживаемые по РНПТ и непрослеживаемые товары.'");
	Иначе
		Форма.Элементы.ГруппаКартинкаИНадписьПересечениеПрослеживаемыхИОбычныхТоваров.Видимость = Ложь;
		Форма.Элементы.КартинкаПересечениеПрослеживаемыхИОбычныхТоваров.Картинка = Новый Картинка;
		НадписьПересечениеПрослеживаемыхИОбычныхТоваров = "";
	КонецЕсли;
	
КонецПроцедуры

// Проверяет наличие прослеживаемого товара в табличной части, и то, что дата документа
// после начала прослеживаемости импортного товара.
//
// Параметры:
//	Товары - ДанныеФормыКоллекция - Таблица товаров документа со следующими обязательными полями:
//		* Номенклатура - СправочникСсылка.Номенклатура - товар.
//	ДатаДокумента - Дата - дата документа, для проверки использования его в прослеживаемости.
//	ИмяКолонкиНоменклатура - Строка - имя реквизита Номенклатура в табличной части.
//
Функция ЭтоПрослеживаемыйДокумент(Товары, ДатаДокумента, ИмяКолонкиНоменклатура = "Номенклатура") Экспорт
	
	Результат = Ложь;
	
	ИспользоватьУчетПрослеживаемыхИмпортныхТоваров = ИспользоватьУчетПрослеживаемыхИмпортныхТоваров(ДатаДокумента);
	
	Если ИспользоватьУчетПрослеживаемыхИмпортныхТоваров Тогда
		СводнаяИнформацияОТоварахРНПТ = СводнаяИнформацияОТоварахРНПТ(Товары, ИмяКолонкиНоменклатура);
		
		Результат = СводнаяИнформацияОТоварахРНПТ.ЕстьТоварРНПТ;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Показывает сообщение пользователю, в случае если включен учет прослеживаемых импортных товаров,
// и при этом в таблице товаров имеется прослеживаемая номенклатура, с выключенным учетом по номерам ГТД.
//
// Параметры:
//	Объект - ДокументОбъект, Структура - объект, в табличной части которого выполняется проверка.
//	Товары - ДанныеФормыКоллекция - таблица товаров документа со следующими обязательными полями:
//		* Номенклатура - СправочникСсылка.Номенклатура - товар.
//	ДатаДокумента - Дата - дата документа, для проверки использования его в прослеживаемости.
//	ИмяТабличнойЧасти - Строка - имя табличной части для подсветки в ней ячейки с ошибкой.
//	ИмяНоменклатурыТабличнойЧасти - Строка - имя реквизита табличной части для подсветки ошибки в нем.
//
Процедура ПроверитьКорректностьНастроекТоваровРНПТ(Объект,
													Товары,
													ДатаДокумента,
													ИмяТабличнойЧасти = "Товары",
													ИмяНоменклатурыТабличнойЧасти = "Номенклатура") Экспорт
	
	ИспользоватьУчетПрослеживаемыхИмпортныхТоваров = ИспользоватьУчетПрослеживаемыхИмпортныхТоваров(ДатаДокумента);
	
	Если ИспользоватьУчетПрослеживаемыхИмпортныхТоваров Тогда
		
		ТоварыДляЗапроса = Товары.Выгрузить(, ИмяНоменклатурыТабличнойЧасти + ", НомерСтроки");
		ТоварыДляЗапроса.Колонки[ИмяНоменклатурыТабличнойЧасти].Имя = "Номенклатура";
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТаблицаТоваров.НомерСтроки	КАК НомерСтроки,
		|	ТаблицаТоваров.Номенклатура	КАК Номенклатура
		|ПОМЕСТИТЬ ТаблицаТоварыДляЗапроса
		|ИЗ
		|	&ТаблицаТоваров КАК ТаблицаТоваров
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ТаблицаТоваров.НомерСтроки	КАК НомерСтроки,
		|	ТаблицаТоваров.Номенклатура	КАК Номенклатура
		|ИЗ
		|	(ВЫБРАТЬ
		|		ТаблицаТоваров.Номенклатура КАК Номенклатура,
		|		ТаблицаТоваров.НомерСтроки КАК НомерСтроки,
		|		ЕСТЬNULL(ТаблицаНоменклатуры.КодТНВЭД.ПрослеживаемыйТовар, ЛОЖЬ) КАК ПрослеживаемыйТовар,
		|		ЕСТЬNULL(ТаблицаНоменклатуры.ВестиУчетПоГТД, ЛОЖЬ) КАК ВестиУчетПоГТД
		|	ИЗ
		|		ТаблицаТоварыДляЗапроса КАК ТаблицаТоваров
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК ТаблицаНоменклатуры
		|			ПО ТаблицаТоваров.Номенклатура = ТаблицаНоменклатуры.Ссылка
		|				И ТаблицаНоменклатуры.ТипНоменклатуры В (ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар),
		|														ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара))
		|	
		|	) КАК ТаблицаТоваров
		|
		|ГДЕ
		|	ТаблицаТоваров.ПрослеживаемыйТовар
		|		И НЕ ТаблицаТоваров.ВестиУчетПоГТД
		|";
		
		Запрос.УстановитьПараметр("ТаблицаТоваров", ТоварыДляЗапроса);
		
		ШаблонТекстаОшибки = НСтр("ru='Для номенклатуры ""%1"" задан прослеживаемый код ТН ВЭД, но выключен учет по номерам ГТД.
									|Для учета товара как прослеживаемого, требуется взвести флаг учета по номерам ГТД.'");
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл
			ТекстОшибки = СтрШаблон(ШаблонТекстаОшибки, Выборка.Номенклатура);
			
			ПутьКПолюНоменклатура = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(ИмяТабличнойЧасти,
																					Выборка.НомерСтроки,
																					ИмяНоменклатурыТабличнойЧасти);
				
			ОбщегоНазначения.СообщитьПользователю(ТекстОшибки, Объект, ПутьКПолюНоменклатура);
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

// Устанавливает параметры запроса, необходимые для определения использования в системе учета прослеживаемых товаров.
//
// Параметры:
//	Запрос - Запрос - запрос, для которого осуществляется установка параметров.
//
Процедура УстановитьПараметрыИспользованияУчетаПрослеживаемыхТоваров(Запрос) Экспорт
	
	Если Запрос = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ИспользоватьУчет = Ложь;
	ИспользоватьУчет = ПолучитьФункциональнуюОпцию("ИспользоватьУчетПрослеживаемыхИмпортныхТоваров");
	Если Не Запрос.Параметры.Свойство("ИспользоватьУчетПрослеживаемыхИмпортныхТоваров") Тогда
		Запрос.УстановитьПараметр("ИспользоватьУчетПрослеживаемыхИмпортныхТоваров", ИспользоватьУчет);
	КонецЕсли;
	
	Если Не Запрос.Параметры.Свойство("ДатаНачалаУчетаПрослеживаемыхИмпортныхТоваров") Тогда
		ДатаНачалаУчета = Дата(2399, 1, 1);
		Если ИспользоватьУчет Тогда
			ДатаНачалаУчета = НачалоМесяца(Константы.ДатаНачалаУчетаПрослеживаемыхИмпортныхТоваров.Получить());
		КонецЕсли;
		Запрос.УстановитьПараметр("ДатаНачалаУчетаПрослеживаемыхИмпортныхТоваров", ДатаНачалаУчета);
	КонецЕсли;
	
КонецПроцедуры

// Возвращает структуру для получения суммы РНПТ в соответствии с измерениями регистра ТоварыОрганизации.
//
// Возвращаемое значение:
//	Структура - для получения суммы РНПТ в соответствии с измерениями регистра ТоварыОрганизации.
//
Функция ПолучитьСтруктуруПараметровРНПТ() Экспорт
	
	Результат = Новый Структура();
	Результат.Вставить("Номенклатура", Справочники.Номенклатура.ПустаяСсылка());
	Результат.Вставить("Характеристика", Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка());
	Результат.Вставить("Склад", Справочники.Склады.ПустаяСсылка());
	Результат.Вставить("Организация", Справочники.Организации.ПустаяСсылка());
	Результат.Вставить("Поставщик", Справочники.Контрагенты.ПустаяСсылка());
	Результат.Вставить("Договор", Справочники.ДоговорыКонтрагентов.ПустаяСсылка());
	Результат.Вставить("НомерГТД", Справочники.НомераГТД.ПустаяСсылка());
	Результат.Вставить("КоличествоРНПТ", 0);
	
	Возврат Результат;
	
КонецФункции

// Возвращает стоимость РНПТ из КоэффициентСтоимостиРНПТ в соответствии с переданными параметрами.
//
// Возвращаемое значение:
//	Число - Сумма РНПТ.
//
Функция ПолучитьСтоимостьРНПТ(СтруктураПараметров) Экспорт
	
	Результат = 0;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	&КоличествоРНПТ * ТоварыОрганизаций.КоэффициентСтоимостиРНПТ КАК СуммаРНПТ
	|ИЗ
	|	РегистрНакопления.ТоварыОрганизаций КАК ТоварыОрганизаций
	|ГДЕ
	|	ТоварыОрганизаций.Номенклатура = &Номенклатура
	|	И ТоварыОрганизаций.Характеристика = &Характеристика
	|	И ТоварыОрганизаций.Склад = &Склад
	|	И ТоварыОрганизаций.Организация = &Организация
	|	И ТоварыОрганизаций.Поставщик = &Поставщик
	|	И ТоварыОрганизаций.Договор = &Договор
	|	И ТоварыОрганизаций.НомерГТД = &НомерГТД
	|	И ТоварыОрганизаций.КоэффициентСтоимостиРНПТ > 0
	|
	|УПОРЯДОЧИТЬ ПО
	|	ТоварыОрганизаций.Период УБЫВ";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Номенклатура", СтруктураПараметров.Номенклатура);
	Запрос.УстановитьПараметр("Характеристика", СтруктураПараметров.Характеристика);
	Запрос.УстановитьПараметр("Склад", СтруктураПараметров.Склад);
	Запрос.УстановитьПараметр("Организация", СтруктураПараметров.Организация);
	Запрос.УстановитьПараметр("Поставщик", СтруктураПараметров.Поставщик);
	Запрос.УстановитьПараметр("Договор", СтруктураПараметров.Договор);
	Запрос.УстановитьПараметр("НомерГТД", СтруктураПараметров.НомерГТД);
	Запрос.УстановитьПараметр("КоличествоРНПТ", СтруктураПараметров.КоличествоРНПТ);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Результат = Выборка.СуммаРНПТ;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область СлужебныйИнтерфейс

Функция ПараметрыСводнаяИнформацияОТоварахРНПТ()
	
	Результат = Новый Структура();
	Результат.Вставить("ЕстьТоварРНПТ", Ложь);
	Результат.Вставить("ЕстьТоварНеРНПТ", Ложь);
	Результат.Вставить("ЕстьТоварРНПТСОтличающейсяЕдиницей", Ложь);
	
	Возврат Результат;
	
КонецФункции

Функция СводнаяИнформацияОТоварахРНПТ(Товары, ИмяКолонкиНоменклатура = "Номенклатура")
	
	ПараметрыСводнаяИнформацияОТоварахРНПТ = ПараметрыСводнаяИнформацияОТоварахРНПТ();
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВЫРАЗИТЬ (&Номенклатура КАК Справочник.Номенклатура) КАК Номенклатура
	|ПОМЕСТИТЬ ВТТовары
	|ИЗ
	|	&ВходящаяТаблица КАК ВходящаяТаблица
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ЕСТЬNULL(Товары.Номенклатура.КодТНВЭД.ПрослеживаемыйТовар, ЛОЖЬ) КАК ПрослеживаемыйТовар,
	|	(Товары.Номенклатура.ЕдиницаИзмерения <> Товары.Номенклатура.ЕдиницаИзмеренияТНВЭД) КАК ЕстьРазницаЕдиниц
	|ПОМЕСТИТЬ ВТНаличиеПрослеживемыхТоваров
	|ИЗ
	|	ВТТовары КАК Товары
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МАКСИМУМ(Товары.ЕстьПрослеживаемыеТовары) КАК ЕстьТоварРНПТ,
	|	МАКСИМУМ(Товары.ЕстьНеПрослеживаемыеТовары) КАК ЕстьТоварНеРНПТ,
	|	МАКСИМУМ(Товары.ЕстьРазницаЕдиниц) КАК ЕстьТоварРНПТСОтличающейсяЕдиницей
	|ПОМЕСТИТЬ ВТСводнаяИнформация
	|ИЗ
	|	(ВЫБРАТЬ
	|		ИСТИНА КАК ЕстьПрослеживаемыеТовары,
	|		ЛОЖЬ КАК ЕстьНеПрослеживаемыеТовары,
	|		Товары.ЕстьРазницаЕдиниц КАК ЕстьРазницаЕдиниц
	|	ИЗ
	|		ВТНаличиеПрослеживемыхТоваров КАК Товары
	|	ГДЕ
	|		Товары.ПрослеживаемыйТовар
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ЛОЖЬ КАК ЕстьПрослеживаемыеТовары,
	|		ИСТИНА КАК ЕстьНеПрослеживаемыеТовары,
	|		Товары.ЕстьРазницаЕдиниц КАК ЕстьРазницаЕдиниц
	|	ИЗ
	|		ВТНаличиеПрослеживемыхТоваров КАК Товары
	|	ГДЕ
	|		НЕ Товары.ПрослеживаемыйТовар
	|	
	|	) КАК Товары
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕСТЬNULL(Товары.ЕстьТоварРНПТ, ЛОЖЬ) КАК ЕстьТоварРНПТ,
	|	ЕСТЬNULL(Товары.ЕстьТоварНеРНПТ, ЛОЖЬ) КАК ЕстьТоварНеРНПТ,
	|	ЕСТЬNULL(Товары.ЕстьТоварРНПТСОтличающейсяЕдиницей, ЛОЖЬ) КАК ЕстьТоварРНПТСОтличающейсяЕдиницей
	|ИЗ
	|	ВТСводнаяИнформация КАК Товары";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&Номенклатура", "ВходящаяТаблица." + ИмяКолонкиНоменклатура);
	Запрос.УстановитьПараметр("ВходящаяТаблица", Товары);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(ПараметрыСводнаяИнформацияОТоварахРНПТ, Выборка);
	КонецЕсли;
	
	Возврат ПараметрыСводнаяИнформацияОТоварахРНПТ;
	
КонецФункции

#КонецОбласти