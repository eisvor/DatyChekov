
///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2022, ООО 1С-Софт
// Все права защищены. Эта программа и сопроводительные материалы предоставляются 
// в соответствии с условиями лицензии Attribution 4.0 International (CC BY 4.0)
// Текст лицензии доступен по ссылке:
// https://creativecommons.org/licenses/by/4.0/legalcode
///////////////////////////////////////////////////////////////////////////////////////////////////////

#Область СлужебныйПрограммныйИнтерфейс

// Открывает форму плиточного интерфейса подбора
//
// Параметры:
//  ПараметрыОткрытияИнтерфейсаПодбора - Структура:
//  	*СтруктураПлиточногоИнтерфейса - СправочникСсылка.ПалитраТоваровРМК.
//  	*ЗакрыватьПриВыбореТовара - Булево.
//  Владелец - форма или элемент управления другой формы.
//
Процедура ОткрытьПлиточныйИнтерфейсПодбора(ПараметрыОткрытияИнтерфейсаПодбора, Владелец) Экспорт
	
	ОткрытьФорму("Справочник.ПалитраТоваровРМК.Форма.ПлиточныйИнтерфейсВыбораТоваров",
		ПараметрыОткрытияИнтерфейсаПодбора,
		Владелец,
		Новый УникальныйИдентификатор,,,,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

// Настраивает доступность перехода в режим оплаты на форме РМК
//
// Параметры:
//  Форма - форма РМК.
//  ДоступенРежимОплаты - Булево - предварительно рассчитанное значение доступности режима оплаты.
//
Процедура НастроитьДоступностьРежимаОплаты(Форма, ДоступенРежимОплаты = Неопределено) Экспорт
	
	Объект = Форма.Объект;
	Элементы = Форма.Элементы;

	Если Форма.ПриемАванса Тогда
		
		ДоступенРежимОплаты = Истина;
		
	ИначеЕсли ДоступенРежимОплаты = Неопределено Тогда
		
		ДоступенРежимОплаты = (Объект.Товары.Количество() > 0) И (Элементы.ОбластьОперативногоУправленияЧеком
		= ИнтерфейсРМКСлужебныйКлиентСервер.ПолучитьТекущийСлойГруппы(Элементы.ГруппаСлоевСлужебнаяИнформацияЧека)); 
		
		ЭтоОперацияВозврат = ОбщегоНазначенияРМККлиент.ЭтоВидОперацииВозврат(Объект.ВидОперации);
		ЭтоВозвратТовара = ЭтоОперацияВозврат Или Форма.ЭтоВозвратБезОснования;
	
		ОсобенностиУчетаТоваровДопускающиеВозвратМаркированныхТоваровБезКМ = Новый Массив;
		ОбщегоНазначенияРМККлиентПереопределяемый.ЗаполнитьМассивОсобенностейДляВозвратаБезМарки(ОсобенностиУчетаТоваровДопускающиеВозвратМаркированныхТоваровБезКМ);
		
		КоличествоТоваров = Объект.Товары.Количество();
		ИндексТовара = 0;
		Пока ИндексТовара < КоличествоТоваров И ДоступенРежимОплаты Цикл
			Строка = Объект.Товары.Получить(ИндексТовара);
			
			ТоварДопускаетсяКВозвратуБезМарки =
				ОсобенностиУчетаТоваровДопускающиеВозвратМаркированныхТоваровБезКМ.Найти(
					Строка.ОсобенностьУчета) <> Неопределено;
					
			ЭтоВозвратМаркируемогоТовараБезПроверкиКонтрольнойМарки = ЭтоВозвратТовара
				И Строка.НеобходимостьВводаКодаМаркировки
				И НЕ ЗначениеЗаполнено(Строка.КодМаркировки)
				И ТоварДопускаетсяКВозвратуБезМарки;
			
			Если Строка.НеобходимостьВводаКодаМаркировки
				И Не Форма.ЭтоЧекКоррекции
				И Не (ЗначениеЗаполнено(Строка.КодМаркировки)
				Или ЭтоВозвратМаркируемогоТовараБезПроверкиКонтрольнойМарки)
				Или (Строка.ПроверятьЗаполнениеСерий И Не ЗначениеЗаполнено(Строка.СерияПредставление))
				Или (Строка.ПроверятьЗаполнениеПартий И Не ЗначениеЗаполнено(Строка.Партия))
				Или (Строка.ПроверятьЗаполнениеХарактеристики И Не ЗначениеЗаполнено(Строка.Характеристика))
				Или Строка.Количество = 0
				Или Строка.Цена = 0 Тогда
				
					ДоступенРежимОплаты = Ложь;
				
			КонецЕсли;
			ИндексТовара = ИндексТовара + 1;
		КонецЦикла;
		
	КонецЕсли;
	Элементы.ПерейтиКОплате.Доступность = ДоступенРежимОплаты;
	Элементы.ПерейтиВОплату.Доступность = ДоступенРежимОплаты;
	
КонецПроцедуры

// Устанавливает текст и цвет декорации персональных данных
//
// Параметры:
//  ДекорацияПерсональныеДанные - элемент формы декорация.
//  ТекстДекорации - Строка - устанавливаемый текст.
//
Процедура УстановитьТекстДекорацииОПерсональныхДанных(ДекорацияПерсональныеДанные, ТекстДекорации = "") Экспорт
	Перем ЦветТекста;
	
	Если ТекстДекорации = "" Тогда
		ЦветТекста = WebЦвета.Черный;
		ТекстДекорации = НСтр("ru = 'Подпишите заявление
		|о хранении персональных 
		|данных.'");
	Иначе
		ЦветТекста = WebЦвета.ТемноКрасный;
	КонецЕсли;
	ДекорацияПерсональныеДанные.Заголовок = ТекстДекорации;
	ДекорацияПерсональныеДанные.ЦветТекста = ЦветТекста;
	
КонецПроцедуры

Процедура ПодготовитьДанныеДляПлитки(Форма, ТоварыКВыбору = Неопределено) Экспорт

	Форма.ДанныеДляПлитки.Очистить();
	Если Форма.ДанныеКнопокПлиток.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если Форма.ТипПостроенияПлитки = Форма.ТипыПостроенияПлитки.ПоПалитре Тогда
		ПодготовитьДанныеДляПлиткиПоПалитре(Форма);
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, "РаспознаваниеБыло") Тогда
			Форма.РаспознаваниеБыло = Ложь;
			Форма.ТекущиеЭлектронныеВесы = Неопределено;
		КонецЕсли;
	ИначеЕсли Форма.ТипПостроенияПлитки = Форма.ТипыПостроенияПлитки.ВесовойТовар Тогда
		ПодготовитьДанныеВесовыхТоваровДляПлитки(Форма);
	ИначеЕсли Форма.ТипПостроенияПлитки = Форма.ТипыПостроенияПлитки.РаспознанныйВесовойТовар Тогда
		ПодготовитьДанныеРаспознанныхТоваровДляПлитки(Форма, ТоварыКВыбору);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьКнопкиИзбранныхПозиций(Форма) Экспорт
	
	ИзбранныеПозиции = Форма.ОпорныеДанные;
	ДанныеКнопок = Форма.ДанныеКнопок;
	Если ДанныеКнопок.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	Элементы = Форма.Элементы;
	ТекущаяСтраницаКнопок = Форма.ТекущаяСтраницаКнопок;
	МаксимальноеКоличествоИзбранныхНаСтранице = Форма.МаксимальноеКоличествоИзбранныхНаСтранице;
	
	ИсточникиПлитки = ИнтерфейсРМКСлужебныйКлиентСервер.ИсточникиДанныхДляПлитки();
	КоличествоПлитокНаСтранице = 12;
	КоличествоИндексов = КоличествоПлитокНаСтранице - 1;
	ПервыйИндексПлитки = Форма.ТекущаяСтраницаКнопок;
	НомерКатегорииПредыдущий = Неопределено;
	ДанныеПлитокДляЗаполнения = Новый Массив;
	ОтображатьОстаток = Ложь;
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, "ОтображатьОстаток") Тогда
		ОтображатьОстаток = Форма.ОтображатьОстаток;
	КонецЕсли;
	
	Для Индекс = 0 По КоличествоПлитокНаСтранице Цикл
		Если ПервыйИндексПлитки + Индекс >= ИзбранныеПозиции.Количество() Тогда
			Прервать;
		КонецЕсли;
		СтрокаПоИндексу = ИзбранныеПозиции[ПервыйИндексПлитки + Индекс];
		Если Не Индекс = 0 И Не СтрокаПоИндексу.НомерКатегорииРазмещенияЭлемента = НомерКатегорииПредыдущий Тогда
			Прервать;
		КонецЕсли;
		Если Не СтрокаПоИндексу.ИсточникПлитки = ИсточникиПлитки.Избранное Тогда
			Прервать;
		КонецЕсли;
		
		Если Индекс = 0 И СтрокаПоИндексу.ИндексПозицииВКатегории > 1 Тогда
			ЕстьПредыдущаяСтраница = Истина;
		КонецЕсли;
		
		Если Индекс > КоличествоИндексов Тогда
			ЕстьСледующаяСтраница = Истина;
		Иначе
			НомерКатегорииПредыдущий = СтрокаПоИндексу.НомерКатегорииРазмещенияЭлемента;
			ДанныеПлитокДляЗаполнения.Добавить(СтрокаПоИндексу);
		КонецЕсли;
	КонецЦикла;
	
	ИзбранныеПозицииНаУровне = ДанныеПлитокДляЗаполнения;
	КоличествоНаУровне = ИзбранныеПозицииНаУровне.Количество();
	КоличествоИндексов = 11;
	
	ИмяОсновнойГруппы = "Избранное_Элемент01_";
	ИмяЭлементаКартинка = "Избранное_Элемент02_";
	ИмяЭлементаГорячаяКлавиша = "Избранное_Элемент07_";
	ИмяЭлементаТекст = "Избранное_Элемент05_";
	ИмяЭлементаЦена = "Избранное_Элемент11_";
	ИмяЭлементаСнизуОтЦены = "Избранное_Элемент20_";
	ИмяЭлементаСлеваОтЦены = "Избранное_Элемент10_";
	
	ИмяЭлементаПравойГруппы = "Избранное_Элемент03_";
	ИмяЭлементаНижнейГруппы ="Избранное_Элемент09_";
	
	ИмяЭлементаПапкаСтраницы = "Избранное_Элемент20_";
	ИмяЭлементаПапкаВниз = "Избранное_Элемент21_";
	ИмяЭлементаПапкаВверх = "Избранное_Элемент22_";
	
	Для ИндексПП = 0 По КоличествоИндексов Цикл 
		
		ПозицияКнопки = ДанныеКнопок[ИндексПП];
		ПозицияКнопки.АдресИзображения = "";
		ПозицияКнопки.АдресИзображенияПапка = "";
		
		Элементы[ИмяОсновнойГруппы + ИндексПП].Доступность = Истина;
		Элементы[ИмяОсновнойГруппы + ИндексПП].ЦветФона = Новый Цвет();
		Элементы[ИмяЭлементаГорячаяКлавиша + ИндексПП].Видимость = Истина;
		
		Элементы[ИмяЭлементаПравойГруппы + ИндексПП].РастягиватьПоГоризонтали = Истина;
		Элементы[ИмяЭлементаПравойГруппы + ИндексПП].Ширина= 0;
		
		Элементы[ИмяЭлементаТекст + ИндексПП].Видимость = Истина;
		Элементы[ИмяЭлементаТекст + ИндексПП].ТекстНевыбраннойКартинки = "";
		Элементы[ИмяЭлементаЦена + ИндексПП].Ширина = 7;
		Элементы[ИмяЭлементаЦена + ИндексПП].ТекстНевыбраннойКартинки = ""; 
		Элементы[ИмяЭлементаСлеваОтЦены + ИндексПП].ТекстНевыбраннойКартинки = "";
		
		Элементы[ИмяЭлементаКартинка + ИндексПП].РастягиватьПоГоризонтали = Ложь;
		Элементы[ИмяЭлементаКартинка + ИндексПП].АвтоМаксимальнаяШирина = Ложь;
		Элементы[ИмяЭлементаКартинка + ИндексПП].МаксимальнаяШирина = 5;
		Элементы[ИмяЭлементаКартинка + ИндексПП].Ширина = 5;
		Элементы[ИмяЭлементаКартинка + ИндексПП].Видимость = Истина;
		
		Элементы[ИмяЭлементаСлеваОтЦены + ИндексПП].Видимость = Истина;
		Элементы[ИмяЭлементаНижнейГруппы + ИндексПП].Видимость = Истина;
		Элементы[ИмяЭлементаСнизуОтЦены + ИндексПП].Видимость = Ложь;
		
		ЭлементРяд = Элементы[ИмяОсновнойГруппы + ИндексПП].Родитель;
		Если ИндексПП + 1 <= МаксимальноеКоличествоИзбранныхНаСтранице Тогда
			ЭлементРяд.Видимость = Истина;
		КонецЕсли;
		
		Если ИндексПП + 1 > КоличествоНаУровне Тогда
			Элементы[ИмяОсновнойГруппы + ИндексПП].Доступность = Ложь;
			Элементы[ИмяЭлементаГорячаяКлавиша + ИндексПП].Видимость = Ложь;
			Продолжить;
		КонецЕсли;
		
		ИзбраннаяПозиция = ИзбранныеПозицииНаУровне[ИндексПП];
		
		Если ИзбраннаяПозиция.ЭтоТекущаяКатегория Тогда
			Элементы[ИмяЭлементаПапкаСтраницы + ИндексПП].ТекущаяСтраница = Элементы[ИмяЭлементаПапкаВверх + ИндексПП];
		Иначе
			Элементы[ИмяЭлементаПапкаСтраницы + ИндексПП].ТекущаяСтраница = Элементы[ИмяЭлементаПапкаВниз + ИндексПП];
		КонецЕсли;
		
		Элементы[ИмяОсновнойГруппы + ИндексПП].Доступность = ИзбраннаяПозиция.ДоступностьКоманды;
		
		Если ЗначениеЗаполнено(ИзбраннаяПозиция.АдресИзображения) Тогда
			ПозицияКнопки.АдресИзображения = ИзбраннаяПозиция.АдресИзображения;
		Иначе
			Элементы[ИмяЭлементаКартинка + ИндексПП].Видимость = Ложь;
		КонецЕсли;
		
		Элементы[ИмяОсновнойГруппы + ИндексПП].ЦветФона = ИзбраннаяПозиция.ЦветФона;
		Элементы[ИмяЭлементаТекст + ИндексПП].ЦветТекста = ИзбраннаяПозиция.ЦветШрифта;
		
		Если ИзбраннаяПозиция.ЭтоКатегория Тогда
			
			Элементы[ИмяОсновнойГруппы + ИндексПП].Доступность = Истина;
			Элементы[ИмяЭлементаНижнейГруппы + ИндексПП].Видимость = Ложь;
			Элементы[ИмяЭлементаСнизуОтЦены + ИндексПП].Видимость = Истина;
			Элементы[ИмяЭлементаЦена + ИндексПП].Ширина = 2;
			
		Иначе
			
			ЦенаТекстом = "";
			Если ЗначениеЗаполнено(ИзбраннаяПозиция.Цена) Тогда
				ЦенаТекст = Формат(ИзбраннаяПозиция.Цена, "ЧДЦ=2");
				ДлинаЦены = СтрДлина(ЦенаТекст);
				НужноДлину = ((9 - ДлинаЦены) * 2) + ДлинаЦены - ?(ДлинаЦены < 7, 1, 0);
				ЦенаТекстом = СтроковыеФункцииКлиентСервер.ДополнитьСтроку(ЦенаТекст, НужноДлину, " ");
			КонецЕсли;
			Элементы[ИмяЭлементаЦена + ИндексПП].ТекстНевыбраннойКартинки = ЦенаТекстом;
			
			ОстатокТекстом = "";
			Если ЗначениеЗаполнено(ИзбраннаяПозиция.Доступно) И ОтображатьОстаток
				И ЗначениеЗаполнено(ИзбраннаяПозиция.ИмяЭлемента) И Не ИзбраннаяПозиция.СкрыватьОстаток Тогда
				Если ИзбраннаяПозиция.Доступно > 999 Тогда
					ДоступноВФормате = "999+";
				Иначе
					ДоступноВФормате = Формат(ИзбраннаяПозиция.Доступно, "ЧДЦ=3");
				КонецЕсли;
				ОстатокТекстом = СтрШаблон(НСтр("ru = '%1 %2'"), ДоступноВФормате, ИзбраннаяПозиция.ПредставлениеЕдиницыИзмерения);
			КонецЕсли;
			Элементы[ИмяЭлементаСлеваОтЦены + ИндексПП].ТекстНевыбраннойКартинки = ОстатокТекстом;
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ИзбраннаяПозиция.ИмяЭлемента) Тогда
			Элементы[ИмяЭлементаТекст + ИндексПП].ТекстНевыбраннойКартинки = ИзбраннаяПозиция.ИмяЭлемента;
		Иначе
			
			Элементы[ИмяЭлементаКартинка + ИндексПП].РастягиватьПоГоризонтали = Истина;
			Элементы[ИмяЭлементаКартинка + ИндексПП].АвтоМаксимальнаяШирина = Истина;
			Элементы[ИмяЭлементаКартинка + ИндексПП].МаксимальнаяШирина = 0;
			Элементы[ИмяЭлементаКартинка + ИндексПП].Ширина = 0;
			Элементы[ИмяЭлементаПравойГруппы + ИндексПП].РастягиватьПоГоризонтали = Ложь;
			Элементы[ИмяЭлементаПравойГруппы + ИндексПП].Ширина = 7;
			Элементы[ИмяЭлементаСлеваОтЦены + ИндексПП].Видимость = Ложь;
			
			Если ИзбраннаяПозиция.ЭтоКатегория Тогда
				Элементы[ИмяЭлементаТекст + ИндексПП].Видимость = Ложь;
				Элементы[ИмяЭлементаПравойГруппы + ИндексПП].Ширина = 2;
			КонецЕсли;
			
		КонецЕсли;
		
		ПозицияКнопки.ЭтоКатегория = ИзбраннаяПозиция.ЭтоКатегория;
		ПозицияКнопки.ЭтоТекущаяКатегория = ИзбраннаяПозиция.ЭтоТекущаяКатегория;
		ПозицияКнопки.ИмеетсяВложенность = ИзбраннаяПозиция.ИмеетсяВложенность;
		ПозицияКнопки.ПервыйИндексПлитки = ИзбраннаяПозиция.ПервыйИндексПлитки;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьКнопкиПлиток(Форма) Экспорт
	
	ДанныеПлиток = Форма.ОпорныеДанные;
	ДанныеКнопокПлиток = Форма.ДанныеКнопокПлиток;
	ДанныеДляПлитки = Форма.ДанныеДляПлитки;
	
	Если ДанныеКнопокПлиток.Количество() = 0 Или ДанныеДляПлитки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ЦветФормы = Форма.ЦветаФормы.ФонФормы;
	Элементы = Форма.Элементы;
	ПредставлениеВалюты = "";
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, "ПредставлениеВалюты") Тогда
		ПредставлениеВалюты = Форма.ПредставлениеВалюты;
	КонецЕсли;
	КоличествоПлитокНаСтранице = Форма.КоличествоЭлементовВРяду * Форма.КоличествоРядовНаСтранице;
	КоличествоИндексов = КоличествоПлитокНаСтранице - 1;
	
	ЕстьСледующаяСтраница = Ложь;
	ЕстьПредыдущаяСтраница = Ложь;
	ПервыйИндексПлитки = Форма.ТекущийПервыйИндексПлитки;
	НомерКатегорииПредыдущий = Неопределено;
	ДанныеПлитокДляЗаполнения = Новый Массив;
	ОтображатьОстаток = Ложь;
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, "ОтображатьОстаток") Тогда
		ОтображатьОстаток = Форма.ОтображатьОстаток;
	КонецЕсли;
	Для Индекс = 0 По КоличествоПлитокНаСтранице Цикл
		СтрокаПоИндексу = ПолучитьЭлементМассиваПоИндексу(ДанныеДляПлитки, ПервыйИндексПлитки + Индекс);
		Если СтрокаПоИндексу = Неопределено Тогда
			Прервать;
		КонецЕсли;
		Если Не Индекс = 0 И Не СтрокаПоИндексу.НомерКатегорииРазмещенияЭлемента = НомерКатегорииПредыдущий Тогда
			Прервать;
		КонецЕсли;
		
		Если Индекс = 0 И СтрокаПоИндексу.ИндексПозицииВКатегории > 1 Тогда
			ЕстьПредыдущаяСтраница = Истина;
		КонецЕсли;
		
		Если Индекс > КоличествоИндексов Тогда
			ЕстьСледующаяСтраница = Истина;
		Иначе
			НомерКатегорииПредыдущий = СтрокаПоИндексу.НомерКатегорииРазмещенияЭлемента;
			ДанныеПлитокДляЗаполнения.Добавить(СтрокаПоИндексу);
		КонецЕсли;
	КонецЦикла;
	
	Элементы.ПерейтиДалее.Доступность = ЕстьСледующаяСтраница;
	Элементы.ПерейтиНазад.Доступность = ЕстьПредыдущаяСтраница;
	Элементы.ПерейтиНаНачальнуюСтраницу.Доступность = (ПервыйИндексПлитки > 0);
	
	КоличествоНаСтранице = ДанныеПлитокДляЗаполнения.Количество();
	ИмяЭлементаТекст1 = "Плитка_Элемент25_";
	ИмяЭлементаТекст2 = "Плитка_Элемент26_";
	ИмяЭлементаТекст3 = "Плитка_Элемент35_";
	ИмяЭлементаТекст4 = "Плитка_Элемент36_";
	
	ИмяЭлементаЦена = "Плитка_Элемент11_";
	ИмяЭлементаОстаток = "Плитка_Элемент12_";
	
	ИмяЭлементаВидСтраницы = "Плитка_Элемент60_";
	ИмяЭлементаВидЭлемент = "Плитка_Элемент61_";
	ИмяЭлементаВидПапка = "Плитка_Элемент62_";
	ИмяЭлементаВидПустой = "Плитка_Элемент63_";
	
	ИмяЭлементаПапкаСтраницы = "Плитка_Элемент40_";
	ИмяЭлементаПапкаВниз = "Плитка_Элемент41_";
	ИмяЭлементаПапкаВверх = "Плитка_Элемент42_"; 
	
	Для ИндексПП = 0 По КоличествоИндексов Цикл 
		
		ПозицияКнопки = ДанныеКнопокПлиток[ИндексПП];
		ПозицияКнопки.АдресИзображения = "";
		ПозицияКнопки.АдресИзображенияГруппы = "";
		ПозицияКнопки.ПервыйИндексПлитки = -1;
		ПозицияКнопки.ЭтоКатегория = Ложь;
		ПозицияКнопки.Номенклатура = Неопределено;
		ПозицияКнопки.Характеристика = Неопределено;
		ПозицияКнопки.ЭтоТекущаяКатегория = Ложь;
		ПозицияКнопки.ИмеетсяВложенность = Ложь;
		
		ПозицияКнопки.КоличествоТекст = "";
		ПозицияКнопки.ЦенаТекст = "";
		ПозицияКнопки.ИмяЭлемента = "";
		
		Если ИндексПП + 1 > КоличествоНаСтранице Тогда
			Элементы[ИмяЭлементаВидСтраницы + ИндексПП].ТекущаяСтраница = Элементы[ИмяЭлементаВидПустой + ИндексПП];
			Продолжить;
		КонецЕсли;
		
		СтрокаДанныхЭлементаПлитки = ДанныеПлитокДляЗаполнения[ИндексПП];
		ИзбраннаяПозиция = ДанныеПлиток[СтрокаДанныхЭлементаПлитки.ИндексИзОпорныхДанных];
		
		Если Не ИзбраннаяПозиция.ЭтоКатегория Тогда
			Элементы[ИмяЭлементаВидСтраницы + ИндексПП].ТекущаяСтраница = Элементы[ИмяЭлементаВидЭлемент + ИндексПП];
			ПозицияКнопки.АдресИзображения = ИзбраннаяПозиция.АдресИзображения;
		Иначе
			Элементы[ИмяЭлементаВидСтраницы + ИндексПП].ТекущаяСтраница = Элементы[ИмяЭлементаВидПапка + ИндексПП];
			ПозицияКнопки.АдресИзображенияГруппы = ИзбраннаяПозиция.АдресИзображения;
		КонецЕсли;
		
		Если ОтображатьОстаток Тогда
			Элементы[ИмяЭлементаОстаток + ИндексПП].ЦветТекста = ИзбраннаяПозиция.ЦветШрифта;
		КонецЕсли;
		
		Элементы[ИмяЭлементаТекст1 + ИндексПП].ЦветФона = ИзбраннаяПозиция.ЦветФона;
		Элементы[ИмяЭлементаТекст1 + ИндексПП].ЦветРамки = ИзбраннаяПозиция.ЦветФона;
		Элементы[ИмяЭлементаТекст1 + ИндексПП].ЦветТекста = ИзбраннаяПозиция.ЦветШрифта;
		Элементы[ИмяЭлементаТекст2 + ИндексПП].ЦветФона = ИзбраннаяПозиция.ЦветФона;
		Элементы[ИмяЭлементаТекст2 + ИндексПП].ЦветРамки = ИзбраннаяПозиция.ЦветФона;
		Элементы[ИмяЭлементаТекст2 + ИндексПП].ЦветТекста = ИзбраннаяПозиция.ЦветШрифта;
		Элементы[ИмяЭлементаТекст3 + ИндексПП].ЦветФона = ИзбраннаяПозиция.ЦветФона;
		Элементы[ИмяЭлементаТекст3 + ИндексПП].ЦветРамки = ИзбраннаяПозиция.ЦветФона;
		Элементы[ИмяЭлементаТекст3 + ИндексПП].ЦветТекста = ИзбраннаяПозиция.ЦветШрифта;
		Элементы[ИмяЭлементаТекст4 + ИндексПП].ЦветФона = ИзбраннаяПозиция.ЦветФона;
		Элементы[ИмяЭлементаТекст4 + ИндексПП].ЦветРамки = ИзбраннаяПозиция.ЦветФона;
		Элементы[ИмяЭлементаТекст4 + ИндексПП].ЦветТекста = ИзбраннаяПозиция.ЦветШрифта;
		
		Если ЗначениеЗаполнено(ИзбраннаяПозиция.Цена) И Не ИзбраннаяПозиция.ЭтоКатегория Тогда
			ЦенаВФормате = Формат(ИзбраннаяПозиция.Цена, "ЧДЦ=2");
			ЦенаТекст = СтрШаблон(НСтр("ru = '%1 %2'"), ЦенаВФормате, ПредставлениеВалюты);
			Если ЗначениеЗаполнено(ИзбраннаяПозиция.Упаковка) Тогда
				ПредставлениеУпаковки = ?(ЗначениеЗаполнено(ИзбраннаяПозиция.ПредставлениеУпаковки),
					ИзбраннаяПозиция.ПредставлениеУпаковки, Строка(ИзбраннаяПозиция.Упаковка));
				ЦенаТекст = СтрШаблон(НСтр("ru = '%1/%2'"), ЦенаТекст, ПредставлениеУпаковки);
			КонецЕсли;
			ПозицияКнопки.ЦенаТекст = ЦенаТекст;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ИзбраннаяПозиция.Доступно) И Не ИзбраннаяПозиция.ЭтоКатегория
			И ОтображатьОстаток И Не ИзбраннаяПозиция.СкрыватьОстаток Тогда
			Если ИзбраннаяПозиция.Доступно > 999 Тогда
				ДоступноВФормате = "999+";
			Иначе
				ДоступноВФормате = Формат(ИзбраннаяПозиция.Доступно, "ЧДЦ=2");
			КонецЕсли;
			ДоступноТекст = СтрШаблон(НСтр("ru = '%1 %2'"), ДоступноВФормате, ИзбраннаяПозиция.ПредставлениеЕдиницыИзмерения);
			ПозицияКнопки.КоличествоТекст = ДоступноТекст;
		КонецЕсли;
		
		ПозицияКнопки.ИмяЭлемента = ИзбраннаяПозиция.ИмяЭлемента;
		ПозицияКнопки.Номенклатура = ИзбраннаяПозиция.Номенклатура;
		ПозицияКнопки.Характеристика = ИзбраннаяПозиция.Характеристика;
		ПозицияКнопки.ЭтоКатегория = ИзбраннаяПозиция.ЭтоКатегория;
		ПозицияКнопки.ЭтоТекущаяКатегория = ИзбраннаяПозиция.ЭтоТекущаяКатегория;
		ПозицияКнопки.ИмеетсяВложенность = ИзбраннаяПозиция.ИмеетсяВложенность;
		
		ИмяЭлементаПапка = ?(ИзбраннаяПозиция.ЭтоТекущаяКатегория, ИмяЭлементаПапкаВверх, ИмяЭлементаПапкаВниз);
		Элементы[ИмяЭлементаПапкаСтраницы + ИндексПП].ТекущаяСтраница = Элементы[ИмяЭлементаПапка + ИндексПП];
		
		Если ИзбраннаяПозиция.ЭтоКатегория ИЛИ ИзбраннаяПозиция.ИмеетсяВложенность ИЛИ ИзбраннаяПозиция.ЭтоТекущаяКатегория Тогда
			ПозицияКнопки.ПервыйИндексПлитки = СтрокаДанныхЭлементаПлитки.ПервыйИндексПлитки;
		Иначе
			ПозицияКнопки.ПервыйИндексПлитки = СтрокаДанныхЭлементаПлитки.ПорядковыйНомер;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция НекорректноВведеныЦифрыДаты(МассивЦифрДаты) Экспорт

	РезультатФункции = Ложь;
	МассивОписанияОграничений = МассивОграниченийЦифрДаты();
	
	КопияМассиваСЦифрами = Новый Массив;
	КоличествоЭлементов = МассивЦифрДаты.Количество();
	ИндексЭлемента = 0;
	Пока ИндексЭлемента < КоличествоЭлементов Цикл
		КопируемоеЗначение = МассивЦифрДаты[ИндексЭлемента];
		Если КопируемоеЗначение = Неопределено Тогда
			КопируемоеЗначение = 0;
		КонецЕсли;
		КопияМассиваСЦифрами.Добавить(КопируемоеЗначение);
		ИндексЭлемента = ИндексЭлемента + 1;
	КонецЦикла;
	
	ИндексЭлементаОписания = 0;
	Пока ИндексЭлементаОписания < МассивОписанияОграничений.Количество() И Не РезультатФункции Цикл
		ОписаниеОграничения = МассивОписанияОграничений[ИндексЭлементаОписания];
		ПроверяемоеЗначение = КопияМассиваСЦифрами[ОписаниеОграничения.НомерПозиции];
		Если Не ПроверяемоеЗначение = Неопределено Тогда
			Если ЗначениеЗаполнено(ОписаниеОграничения.ТекстУсловия) Тогда
				ТекстВычисления = "КопияМассиваСЦифрами" + ОписаниеОграничения.ТекстУсловия;
				ЗначениеВычисления = Вычислить(ТекстВычисления);
				Если ЗначениеВычисления И ПроверяемоеЗначение > ОписаниеОграничения.МаксимальноеЗначение Тогда
					РезультатФункции = Истина;
				КонецЕсли;
			Иначе
				Если ПроверяемоеЗначение > ОписаниеОграничения.МаксимальноеЗначение Тогда
					РезультатФункции = Истина;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		ИндексЭлементаОписания = ИндексЭлементаОписания + 1;
	КонецЦикла;
	
	Возврат РезультатФункции;
	
КонецФункции

// Очищает поля ввода новой карты на форме РМК
//
// Параметры:
//  Форма - форма РМК.
//
Процедура ОчиститьПоляВводаНовойКарты(Форма) Экспорт
	
	СтрокаПустая = НСтр("ru = ''");
	Форма.НоваяКартаНомер = СтрокаПустая;
	Форма.НоваяКартаТелефон = СтрокаПустая;
	Форма.НоваяКартаПочта = СтрокаПустая;
	Форма.НоваяКартаФИО = СтрокаПустая;
	Форма.НоваяКартаДатаРождения = СтрокаПустая;
	
КонецПроцедуры

// Очищает поля ввода новой карты на форме РМК, если соответствующие данные не заполнены
//
// Параметры:
//  Форма - форма РМК.
//
Процедура ОчиститьПоляВводаНовойКартыПриНеобходимости(Форма) Экспорт
	
	СтрокаПустая = НСтр("ru = ''");
	Если Не ИнтерфейсРМКСлужебныйКлиентСервер.ДанныеДисконтнойКартыЗаполнены(Форма) Тогда
		Форма.НоваяКартаНомер = СтрокаПустая;
		Если Не ЗначениеЗаполнено(Форма.Объект.Контрагент) Тогда
			Форма.НоваяКартаТелефон = СтрокаПустая;
			Форма.НоваяКартаПочта = СтрокаПустая;
			Форма.НоваяКартаФИО = СтрокаПустая;
			Форма.НоваяКартаДатаРождения = СтрокаПустая;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьПараметрыСозданнойКартыНаСервереЛояльности(Форма, ДанныеОтвета) Экспорт

	СтрокаXMLТолькоЧастьДата = Лев(ДанныеОтвета.DateOfBirth, 10);
	СтрокаДатыДляПреобразования = СтрЗаменить(СтрокаXMLТолькоЧастьДата, "-", "");
	ДатаРожденияКлиента = Дата(СтрокаДатыДляПреобразования);
	ДатаРожденияСтрокой = ?(ЗначениеЗаполнено(ДатаРожденияКлиента),
							Формат(ДатаРожденияКлиента, "ДЛФ=D"), "");
	
	Форма.НайденнаяКартаНомер = ДанныеОтвета.CardID;
	Форма.НайденнаяКартаФИО = ДанныеОтвета.Client;
	Форма.НайденнаяКартаДатаРождения = ДатаРожденияСтрокой;
	Форма.НайденнаяКартаТелефон = ДанныеОтвета.PhoneNumber;
	Форма.НайденнаяКартаПочта = ДанныеОтвета.Email;
	
	Форма.НоваяКартаНомер = ДанныеОтвета.CardID;
	Форма.НоваяКартаФИО = ДанныеОтвета.Client;
	Форма.НоваяКартаПочта = ДанныеОтвета.Email;
	Форма.НоваяКартаДатаРождения = ДатаРожденияСтрокой;
	
	МаскаТелефона = ИнтерфейсРМКСлужебныйКлиентСервер.МаскаВводаТелефона();
	Форма.ОтправкаЧекаПочта = ДанныеОтвета.Email;
	Форма.ОтправкаЧекаТелефон
		= ИнтерфейсРМКСлужебныйКлиентСервер.ПривестиЗначениеКМаскеТелефона(ДанныеОтвета.PhoneNumber, МаскаТелефона);
	
	Форма.ПараметрыКартыЛояльности = ИнтерфейсРМКСлужебныйКлиентСервер.ПараметрыКартыЛояльности();
	Форма.ПараметрыКартыЛояльности.ИдентификаторКарты = ДанныеОтвета.CardRef;
	Форма.ПараметрыКартыЛояльности.КодКарты = ДанныеОтвета.CardID;
	Форма.ПараметрыКартыЛояльности.ФИО = ДанныеОтвета.Client;
	Форма.ПараметрыКартыЛояльности.НомерТелефонаВладельцаКарты = ДанныеОтвета.PhoneNumber;
	Форма.ПараметрыКартыЛояльности.АдресЭПВладельцаКарты = ДанныеОтвета.Email;
	Форма.ПараметрыКартыЛояльности.ДатаРождения = ДатаРожденияКлиента;
	
	ИнтерфейсРМКСлужебныйКлиентСервер.НастроитьДоступностьСозданияКарты(Форма, Ложь, Ложь);
	
КонецПроцедуры

Процедура ДополнитьФормуЛокальнойКартойКлиента(Форма, ДанныеКартыКлиента) Экспорт
	
	Если ЗначениеЗаполнено(ДанныеКартыКлиента.Карта) Тогда
		Форма.Объект.ДисконтнаяКарта = ДанныеКартыКлиента.Карта;
		Форма.НайденнаяКартаНомер = ДанныеКартыКлиента.НомерКарты;
		Форма.НоваяКартаНомер = ДанныеКартыКлиента.НомерКарты;
		Форма.НайденнаяКартаСуммаПродаж = ДанныеКартыКлиента.ПродажиОборот;
		Форма.НайденнаяКартаДатаРождения = ДанныеКартыКлиента.ДатаРождения;
		ИнтерфейсРМКСлужебныйКлиентСервер.НастроитьДоступностьСозданияКарты(Форма, Ложь, Ложь);
	КонецЕсли;
	
КонецПроцедуры

Процедура НастроитьСвойстваКнопкиПробитьИОтправить(Форма, РедактированиеПочты = Ложь,
		РедактированиеТелефона = Ложь) Экспорт

	Элементы = Форма.Элементы;
	ЗаполненаКонтактнаяИнформация
		= ЗаполненаКонтактнаяИнформацияДляОтправкиЧека(Форма, РедактированиеПочты, РедактированиеТелефона);
	ПродолжениеДоступно = (Форма.ХочуБумажныйЧек Или ЗаполненаКонтактнаяИнформация);
	СтраницаПробития = Элементы.ГруппаСтраницаКнопкаПробитьИОтправить;
	Если ЗаполненаКонтактнаяИнформация И Не Форма.ХочуБумажныйЧек Тогда
		СтраницаПробития = Элементы.ГруппаСтраницаКнопкаОтправитьЧек;
	ИначеЕсли Форма.ХочуБумажныйЧек И Не ЗаполненаКонтактнаяИнформация Тогда
		СтраницаПробития = Элементы.ГруппаСтраницаКнопкаПробитьЧек;
	КонецЕсли;
	Элементы.ГруппаСтраницыКнопкиОтправитьЧек.Доступность = ПродолжениеДоступно;
	Если Не Элементы.ГруппаСтраницыКнопкиОтправитьЧек.ТекущаяСтраница = СтраницаПробития Тогда
		Элементы.ГруппаСтраницыКнопкиОтправитьЧек.ТекущаяСтраница = СтраницаПробития;
	КонецЕсли;
	
КонецПроцедуры

Функция ЗаполненаКонтактнаяИнформацияДляОтправкиЧека(Форма, РедактированиеПочты = Ложь,
		РедактированиеТелефона = Ложь) Экспорт
	
	РезультатФункции = Ложь;
	
	Элементы = Форма.Элементы;
	СтрокаТелефона = ?(РедактированиеТелефона, Элементы.ОтправкаЧекаТелефон.ТекстРедактирования,
		Форма.ОтправкаЧекаТелефон);
	СтрокаПочты = ?(РедактированиеПочты, Элементы.ОтправкаЧекаПочта.ТекстРедактирования, Форма.ОтправкаЧекаПочта);
	
	НомерТелефонаДляОтправки = ОбщегоНазначенияРМККлиентСервер.ПодготовитьНомерТелефона(СтрокаТелефона);
	НомерТелефонаВведенКорректно = ЗначениеЗаполнено(НомерТелефонаДляОтправки);
	
	АдресЭлектроннойПочтыВведенКорректно = Ложь;
	Если Не Форма.РежимКассыСамообслуживания Тогда
		АдресЭлектроннойПочтыВведенКорректно =
			ОбщегоНазначенияКлиентСервер.АдресЭлектроннойПочтыСоответствуетТребованиям(СтрокаПочты);
	КонецЕсли;
		
	Если НомерТелефонаВведенКорректно Или АдресЭлектроннойПочтыВведенКорректно Тогда
		РезультатФункции = Истина;
	КонецЕсли;
	
	Возврат РезультатФункции;
	
КонецФункции

Процедура ИнициализироватьТипыПостроенияПлитки(Форма) Экспорт
	
	Форма.ТипыПостроенияПлитки = Новый Структура;
	Форма.ТипыПостроенияПлитки.Вставить("ПоПалитре", 0);
	Форма.ТипыПостроенияПлитки.Вставить("ВесовойТовар", 1);
	Форма.ТипыПостроенияПлитки.Вставить("РаспознанныйВесовойТовар", 2);
	
КонецПроцедуры

Функция ОбщаяЧастьИмениГруппВидовОплат() Экспорт
	
	Возврат "ГруппаВидОплаты";
	
КонецФункции

Процедура ОпределитьИспользуемыеВидыОплат(Форма) Экспорт
	
	Форма.ИспользуемыеВидыОплат = Новый Массив;
	НачалоИмениГруппы = ОбщаяЧастьИмениГруппВидовОплат();
	ДлинаОбщейЧасти = СтрДлина(НачалоИмениГруппы);
	Элементы = Форма.Элементы;
	ГруппаВидовОплат = Элементы.ГруппаВидовОплат;
	Для Каждого ГруппаВидаОплаты Из ГруппаВидовОплат.ПодчиненныеЭлементы Цикл
		
		Если ЭтоГруппаВидаОплаты(ГруппаВидаОплаты) И ГруппаВидаОплаты.Видимость Тогда
			ИмяВидаОплаты = Сред(ГруппаВидаОплаты.Имя, ДлинаОбщейЧасти + 1);
			Форма.ИспользуемыеВидыОплат.Добавить(ИмяВидаОплаты);
		КонецЕсли;
		
	КонецЦикла;
	РасширитьИнтервалМеждуВидамиОплатПриНеобходимости(Форма);
	
КонецПроцедуры

// Получает максимально возможную сумму оплаты бонусами чека, в котором еще не выбрана оплата бонусами
//
// Параметры:
//  Форма - форма РМК.
//
Функция ПолучитьМаксимальноВозможнуюСуммуОплатыБонусами(Форма) Экспорт
	
	МаксимальноВозможнаяСуммаБонусов = 0;
	Если Форма.СуммаОплаченоБонусами = 0 Тогда
		Форма.МаксимальнаяСуммаОплатыБаллами = Форма.ТаблицаСуммМаксимальнойОплатыбонусами.Итог("Сумма");
		Если ЗначениеЗаполнено(Форма.МаксимальнаяСуммаОплатыБаллами) Тогда
			МаксимальноВозможнаяСуммаБонусов
				= Мин(Форма.БонусыДоступноКОплате, Форма.МаксимальнаяСуммаОплатыБаллами, Форма.КоличествоБонусов);
		Иначе
			МаксимальноВозможнаяСуммаБонусов
				= Мин(Форма.БонусыДоступноКОплате, Форма.СуммаИтого * Форма.ПроцентОплатыБонусами / 100, Форма.КоличествоБонусов);
		КонецЕсли;
	КонецЕсли;
	Возврат МаксимальноВозможнаяСуммаБонусов;
	
КонецФункции

// Получает итоговую сумму чека, за вычетом введенных сумм по видам оплат
//
// Параметры:
//  Форма - форма РМК.
//
Функция ПолучитьОставшуюсяСуммуОплатыПоЧеку(Форма) Экспорт
	
	Возврат Форма.СуммаИтого - Форма.СуммаОплаченоНал - Форма.СуммаОплаченоБН - Форма.СуммаОплаченоБезнал
		- Форма.СуммаОплаченоВРассрочку - Форма.СуммаОплаченоЗачетАванса - Форма.СуммаОплаченоСертификатами;
	
КонецФункции
	
Процедура СкорректироватьДатуРожденияПриНеобходимости(Форма, ИмяРеквизитаДатыРождения) Экспорт
	
	ДлинаЧастиДатыМесяца = 2;
	ДлинаГода = 4;
	ДлинаГодаСокращенная = 2;
	НачальнаяПозицияЧастиМесяца = 4;
	НачальнаяПозицияЧастиГода = 7;
	СтоЛетВМесяцах = 1200;
	ЗначениеДатыСтрокой = Форма[ИмяРеквизитаДатыРождения];
	СтрокаДня = Лев(ЗначениеДатыСтрокой, ДлинаЧастиДатыМесяца);
	СтрокаМесяца = Сред(ЗначениеДатыСтрокой, НачальнаяПозицияЧастиМесяца, ДлинаЧастиДатыМесяца);
	СтрокаГода = Сред(ЗначениеДатыСтрокой, НачальнаяПозицияЧастиГода);
	ДеньИМесяцЗаполнены = Ложь;
	ТекущаяДатаКлиента = ОбщегоНазначенияКлиент.ДатаСеанса();
	Если СтрДлина(СокрЛП(СтрокаДня)) = ДлинаЧастиДатыМесяца
			И СтрДлина(СокрЛП(СтрокаМесяца)) = ДлинаЧастиДатыМесяца Тогда
		ДеньИМесяцЗаполнены = Истина;
	КонецЕсли;
	Если СтрДлина(СокрЛП(СтрокаГода)) = ДлинаГодаСокращенная И ДеньИМесяцЗаполнены Тогда
		ТекущийГодСтрокой = Формат(Год(ТекущаяДатаКлиента), "ЧГ=");
		ПерваяЧастьГода = Лев(ТекущийГодСтрокой, ДлинаГода - ДлинаГодаСокращенная);
		ОписаниеТипаДата = Новый ОписаниеТипов("Дата");
		ДатаКаноническаяСтрока = СтрШаблон("%1%2%3%4", ПерваяЧастьГода, СокрЛП(СтрокаГода), СтрокаМесяца, СтрокаДня);
		ПредварительнаяДата = ОписаниеТипаДата.ПривестиЗначение(ДатаКаноническаяСтрока);
		Если ЗначениеЗаполнено(ПредварительнаяДата) Тогда
			Если ПредварительнаяДата >= НачалоДня(ТекущаяДатаКлиента) Тогда
				ПредварительнаяДата = ДобавитьМесяц(ПредварительнаяДата, - СтоЛетВМесяцах);
			КонецЕсли;
			Форма[ИмяРеквизитаДатыРождения] = Формат(ПредварительнаяДата, "ДЛФ=D");
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Функция ВозможныеОперацииСотрудникаВКСО() Экспорт
	
	ВозможныеОперации = Новый Структура();
	ВозможныеОперации.Вставить("ПродолжитьРаботу", 0);
	ВозможныеОперации.Вставить("ЗавершитьРаботу", 1);
	ВозможныеОперации.Вставить("ПроверитьЧек", 2);
	ВозможныеОперации.Вставить("ОбучитьУстройстваРаспознавания", 3);
	
	Возврат ВозможныеОперации;
	
КонецФункции

Процедура НастроитьОтображениеОтбораВесовогоТовара(Форма, ВключитьОтбор) Экспорт
	
	Элементы = Форма.Элементы;
	ЦветаФормы = Форма.ЦветаФормы;
	Если Форма.РежимКассыСамообслуживания Тогда
		Элементы.ОтборВесовогоТовараКСО.ЦветФона = ?(ВключитьОтбор, ЦветаФормы.АктивнаяКнопка, ЦветаФормы.Авто);
		Элементы.ОтборВесовогоТовараКСО.ЦветТекста = ?(ВключитьОтбор, ЦветаФормы.Авто, ЦветаФормы.НеАктивизированныйПункт);
	Иначе
		Элементы.ОтборВесовогоТовара.ЦветФона = ?(ВключитьОтбор, ЦветаФормы.АктивнаяКнопка, ЦветаФормы.Авто);
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьОтображениеЗаголовкаФормы(Форма) Экспорт
	
	Если ТекущийРежимЗапуска() = РежимЗапускаКлиентскогоПриложения.УправляемоеПриложение Тогда
		Если КлиентскоеПриложение.ПолучитьРежимОсновногоОкна() = РежимОсновногоОкнаКлиентскогоПриложения.Обычный Тогда
			Форма.ОтображатьЗаголовок = Истина;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриОбработкеРасшифровки(ФормаОтчета, Расшифровка, СтандартнаяОбработка) Экспорт
	
	Если Расшифровка = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ФормаОтчета.НастройкиОтчета.ПолноеИмя = "Отчет.НезавершенныеДействияСЧекомРМК" Тогда
		ОбработкаРасшифровкиНезавершенныеДействияСЧекомРМК(ФормаОтчета.ОтчетДанныеРасшифровки, Расшифровка,
			СтандартнаяОбработка);
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаРасшифровкиНезавершенныеДействияСЧекомРМК(ДанныеРасшифровки,
		Расшифровка, СтандартнаяОбработка) Экспорт
	
	ПоляОтбора = ОбщегоНазначенияРМКВызовСервера.ПолучитьДанныеРасшифровкиНезавершенныхДействийСЧеком(Расшифровка,
		ДанныеРасшифровки);
		
	Если Не ПоляОтбора = Неопределено Тогда
		
		СобытиеОповещения = "УстановитьСтроку";
		ФормаСпискаРегистра = ОткрытьФорму("РегистрСведений.ЖурналДействийКассира.ФормаСписка", ПоляОтбора, ЭтотОбъект);
		Оповестить(СобытиеОповещения, ПоляОтбора, ФормаСпискаРегистра);
		
	КонецЕсли;
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

Процедура ПронумероватьИерархиюПалитрыТоваров(СтрокаРодитель, НомерСтроки = Неопределено) Экспорт
	
	ПодчененныеСтроки = СтрокаРодитель.ПолучитьЭлементы();
	Если ПодчененныеСтроки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ПорядковыйНомер = 0;
	Для Каждого СтрокаДерева Из ПодчененныеСтроки Цикл
		
		Если Не НомерСтроки = Неопределено Тогда
			НомерСтроки = НомерСтроки + 1;
			СтрокаДерева.НомерСтроки = НомерСтроки;
		КонецЕсли;
		
		ПорядковыйНомер = ПорядковыйНомер + 1;
		СтрокаДерева.ИндексПозиции = ПорядковыйНомер;
		ПронумероватьИерархиюПалитрыТоваров(СтрокаДерева, НомерСтроки);
		
	КонецЦикла;
	
КонецПроцедуры

#Область СхемаФормыРМК

Функция ПолучитьСодержимоеИменнойОбластиСхемыФормыРМК(ДанныеБлока) Экспорт
	
	РезультатФункции = "";
	ИмяОбластиСпискаТоваров = "ПанельТаблицыТоваров_";
	ИмяОбластиГлавнойКоманды = "ГруппаСлоевОсновнаяКоманднаяПанельУправленияЧеком_";
	ИмяОбластиПлиткиГоризонтально = "ГруппаЛевоОболочкаПорядка_Горизонтальная";
	ИмяОбластиПлиткиВертикально = "ГруппаПанельИнформацииВер_Вертикальная";
	
	Если СтрНайти(ДанныеБлока.ИмяОбласти, ИмяОбластиСпискаТоваров) = 1 Тогда
		РезультатФункции = СодержимоеОбластиСпискаТоваров(ДанныеБлока);
	ИначеЕсли СтрНайти(ДанныеБлока.ИмяОбласти, ИмяОбластиГлавнойКоманды) = 1 Тогда
		РезультатФункции = СодержимоеОбластиГлавнойКоманды(ДанныеБлока);
	ИначеЕсли ДанныеБлока.ИмяОбласти = ИмяОбластиПлиткиГоризонтально
			Или ДанныеБлока.ИмяОбласти = ИмяОбластиПлиткиВертикально Тогда
		РезультатФункции = СодержимоеОбластиПлитки();
	Иначе
		РезультатФункции = СодержимоеТиповойОбласти(ДанныеБлока);
	КонецЕсли;
	
	Возврат РезультатФункции;
	
КонецФункции

#КонецОбласти

Функция ОчиститьКэшКонтроляПродаж(КэшКонтроляПродаж, ТолькоДанныеКорзины = Ложь) Экспорт
	
	Если ТолькоДанныеКорзины Тогда
		ПостоянныеЭлементыКонтроляПродаж = ПолучитьПостоянныеЭлементыКонтроляПродаж(КэшКонтроляПродаж);
		ПостоянныеВидыКонтроля = ПолучитьПостоянныеВидыКонтроля(КэшКонтроляПродаж, ПостоянныеЭлементыКонтроляПродаж);
		КоличествоСтрокЭлементовКонтроля = КэшКонтроляПродаж.ЭлементыКонтроляПродаж.Количество();
		КоличествоСтрокВидов = КэшКонтроляПродаж.СтрокиВидовКонтроля.Количество();
		
		ИндексСтроки = 0;
		Пока ИндексСтроки < КоличествоСтрокЭлементовКонтроля Цикл
			ТекущийИндекс = КоличествоСтрокЭлементовКонтроля - ИндексСтроки - 1;
			СтрокаЭлементаКонтроля = КэшКонтроляПродаж.ЭлементыКонтроляПродаж.Получить(ТекущийИндекс);
			Если ПостоянныеЭлементыКонтроляПродаж.Найти(СтрокаЭлементаКонтроля.КонтрольПродаж) = Неопределено Тогда
				КэшКонтроляПродаж.ЭлементыКонтроляПродаж.Удалить(ТекущийИндекс);
			КонецЕсли;
			ИндексСтроки = ИндексСтроки + 1;
		КонецЦикла;
		
		ИндексСтроки = 0;
		Пока ИндексСтроки < КоличествоСтрокВидов Цикл
			ТекущийИндекс = КоличествоСтрокВидов - ИндексСтроки - 1;
			СтрокаВида = КэшКонтроляПродаж.СтрокиВидовКонтроля.Получить(ТекущийИндекс);
			Если ПостоянныеВидыКонтроля.Найти(СтрокаВида.ВидКонтроля) = Неопределено тогда
				КэшКонтроляПродаж.СтрокиВидовКонтроля.Удалить(ТекущийИндекс);
			КонецЕсли;
			ИндексСтроки = ИндексСтроки + 1;
		КонецЦикла;
	Иначе
		КэшКонтроляПродаж.ЭлементыКонтроляПродаж.Очистить();
		КэшКонтроляПродаж.СтрокиВидовКонтроля.Очистить();
		КэшКонтроляПродаж.НоменклатураПлиткиКонтроляПродаж.Очистить();
		КэшКонтроляПродаж.ОбщийКонтрольПродаж.Очистить();
	КонецЕсли;
	КэшКонтроляПродаж.НоменклатураКонтроляПродаж.Очистить();
	
КонецФункции

Функция ШаблонРезультатаКонтроляПродаж() Экспорт
	
	РезультатФункции = Новый Структура();
	РезультатФункции.Вставить("КонтролируемыеСтрокиТоваров", Новый Массив);
	РезультатФункции.Вставить("ОграниченияПродаж", Новый Массив);
	РезультатФункции.Вставить("ОповещениеПриУспехе", Неопределено);
	РезультатФункции.Вставить("ОповещениеПриОтказе", Неопределено);
	РезультатФункции.Вставить("ЭтапКонтроля", -1);
	РезультатФункции.Вставить("НуженПересчет", Ложь);
	РезультатФункции.Вставить("ДобавлениеПодбором", Ложь);
	РезультатФункции.Вставить("ДобавлениеИзПлитки", Ложь);
	РезультатФункции.Вставить("НужнаПроверкаДоступностиОплаты", Ложь);
	РезультатФункции.Вставить("БылоУдалениеСтрок", Ложь);
	РезультатФункции.Вставить("ТекстПредупрежденияЗапретаОплатыБонусами", "");
	РезультатФункции.Вставить("НеВыводитьЗапретБонусов", Ложь);
	
	Возврат РезультатФункции;
	
КонецФункции

Функция ЭтапыКонтроляПродаж() Экспорт
	
	РезультатФункции = Новый Структура();
	РезультатФункции.Вставить("ДобавлениеТовара", 0);
	РезультатФункции.Вставить("ОткрытиеЧека", 1);
	РезультатФункции.Вставить("ПробитиеЧека", 2);
	
	Возврат РезультатФункции;
	
КонецФункции

Процедура ВыполнитьПроверкиКонтроляПродаж(Форма, ЭтапКонтроля, ДополнительныеПараметры = Неопределено) Экспорт
	
	ЭтапыКонтроляПродаж = ЭтапыКонтроляПродаж();
	Если (ЭтапКонтроля = ЭтапыКонтроляПродаж.ДобавлениеТовара И Форма.СписокДобавленныхСтрокТоваров.Количество() = 0)
			Или Не Форма.ИспользоватьКонтрольПродаж Тогда
		Форма.СписокДобавленныхСтрокТоваров.Очистить();
		Возврат;
	КонецЕсли;
	
	РезультатКонтроля = Форма.РезультатКонтроляПродаж;
	КэшКонтроляПродаж = Форма.КэшКонтроляПродаж;
	ИспользуемыеТипыКонтроля = ПолучитьТипыКонтроляЭтапа(ЭтапКонтроля);
	
	ОчиститьРезультатКонтроляПродаж(РезультатКонтроля);
	РезультатКонтроля.ЭтапКонтроля = ЭтапКонтроля;
	Если ЭтапКонтроля = ЭтапыКонтроляПродаж.ДобавлениеТовара Тогда
		Для Каждого СтрокаДобавленногоТовара Из Форма.СписокДобавленныхСтрокТоваров Цикл
			СтрокаТовара = Форма.объект.Товары.НайтиПоИдентификатору(СтрокаДобавленногоТовара.Значение);
			РезультатКонтроля.КонтролируемыеСтрокиТоваров.Добавить(СтрокаТовара);
		КонецЦикла;
	КонецЕсли;
	ДатаПроверки = ОбщегоНазначенияКлиент.ДатаСеанса();
	
	ОтобранныеВидыКонтроля = ОтобратьВидыКонтроляПоТипам(КэшКонтроляПродаж, ИспользуемыеТипыКонтроля);
	ПараметрыПроверки = Новый Структура;
	ПараметрыПроверки.Вставить("ЭтапКонтроля", ЭтапКонтроля);
	ПараметрыПроверки.Вставить("МассивВидовКонтроля", ОтобранныеВидыКонтроля.МассивВидовКонтроля);
	ПараметрыПроверки.Вставить("СоответствиеСтрокВидовКонтроля", ОтобранныеВидыКонтроля.СоответствиеСтрокВидовКонтроля);
	ПараметрыПроверки.Вставить("ДатаПроверки", ДатаПроверки);
	ПараметрыПроверки.Вставить("ИспользуемыеТипыКонтроля", ИспользуемыеТипыКонтроля);
	
	КоличествоОбщихЭлементов = КэшКонтроляПродаж.ОбщийКонтрольПродаж.Количество();
	ИндексЭлементаКонтроля = 0;
	Пока ИндексЭлементаКонтроля < КоличествоОбщихЭлементов Цикл
		ЭлементОбщегоКонтроля = КэшКонтроляПродаж.ОбщийКонтрольПродаж.Получить(ИндексЭлементаКонтроля);
		СтрокаЭлементаКонтроляПродаж = ПолучитьСтрокуЭлементаКонтроляПродаж(КэшКонтроляПродаж, ЭлементОбщегоКонтроля);
		Если Не СтрокаЭлементаКонтроляПродаж = Неопределено Тогда
			
			КоличествоСтрокКонтроля = СтрокаЭлементаКонтроляПродаж.СтрокиКонтроля.Количество();
			ИндексСтрокиКонтроля = 0;
			Пока ИндексСтрокиКонтроля < КоличествоСтрокКонтроля Цикл
				СтрокаКонтроляПродаж = СтрокаЭлементаКонтроляПродаж.СтрокиКонтроля.Получить(ИндексСтрокиКонтроля);
				ВыполнитьПроверкиДляСтрокиКонтроляПродаж(Форма, СтрокаЭлементаКонтроляПродаж, СтрокаКонтроляПродаж,
					Неопределено, ПараметрыПроверки);
				ИндексСтрокиКонтроля = ИндексСтрокиКонтроля + 1;
			КонецЦикла;
			
		КонецЕсли;
		ИндексЭлементаКонтроля = ИндексЭлементаКонтроля + 1;
	КонецЦикла;
	
	КоллекцияТоваров = ?(ЭтапКонтроля = ЭтапыКонтроляПродаж.ДобавлениеТовара,
		РезультатКонтроля.КонтролируемыеСтрокиТоваров, Форма.Объект.Товары);
		
	КоличествоСтрокТоваров = КоллекцияТоваров.Количество();
	ИндексСтрокиТовара = 0;
	Пока ИндексСтрокиТовара < КоличествоСтрокТоваров Цикл
		СтрокаТовара = КоллекцияТоваров.Получить(ИндексСтрокиТовара);
		СтрокиЭлементовКонтроляПродаж = ПолучитьЭлементыКонтроляПродажПоНоменклатуре(КэшКонтроляПродаж, СтрокаТовара);
		КоличествоЭлементовКонтроляПродаж = СтрокиЭлементовКонтроляПродаж.Количество();
		ИндексЭлементаКонтроля = 0;
		Пока ИндексЭлементаКонтроля < КоличествоЭлементовКонтроляПродаж Цикл
			СтрокаЭлементаКонтроляПродаж = СтрокиЭлементовКонтроляПродаж.Получить(ИндексЭлементаКонтроля);
			
			КоличествоСтрокКонтроля = СтрокаЭлементаКонтроляПродаж.СтрокиКонтроля.Количество();
			ИндексСтрокиКонтроля = 0;
			Пока ИндексСтрокиКонтроля < КоличествоСтрокКонтроля Цикл
				СтрокаКонтроляПродаж = СтрокаЭлементаКонтроляПродаж.СтрокиКонтроля.Получить(ИндексСтрокиКонтроля);
				ВыполнитьПроверкиДляСтрокиКонтроляПродаж(Форма, СтрокаЭлементаКонтроляПродаж, СтрокаКонтроляПродаж,
					СтрокаТовара, ПараметрыПроверки);
				ИндексСтрокиКонтроля = ИндексСтрокиКонтроля + 1;
			КонецЦикла;
			
			ИндексЭлементаКонтроля = ИндексЭлементаКонтроля + 1;
		КонецЦикла;
		ИндексСтрокиТовара = ИндексСтрокиТовара + 1;
	КонецЦикла;

	УстановитьТекстПредупрежденияЗапретаОплатыБонусами(РезультатКонтроля, КэшКонтроляПродаж, ПараметрыПроверки);
	Если РезультатКонтроля.ТекстПредупрежденияЗапретаОплатыБонусами = "" Тогда
		РезультатКонтроля.ТекстПредупрежденияЗапретаОплатыБонусами
			= НСтр("ru = 'Бонусами и скидками запрещено оплачивать подарки'");
	КонецЕсли;
	
	Форма.СписокДобавленныхСтрокТоваров.Очистить();
	
КонецПроцедуры

Процедура ОчиститьРезультатКонтроляПродаж(РезультатКонтроляПродаж) Экспорт
	
	РезультатКонтроляПродаж.КонтролируемыеСтрокиТоваров.Очистить();
	РезультатКонтроляПродаж.ОграниченияПродаж.Очистить();
	РезультатКонтроляПродаж.ОповещениеПриУспехе = Неопределено;
	РезультатКонтроляПродаж.ОповещениеПриОтказе = Неопределено;
	РезультатКонтроляПродаж.ЭтапКонтроля = -1;
	РезультатКонтроляПродаж.НуженПересчет = Ложь;
	РезультатКонтроляПродаж.ДобавлениеПодбором = Ложь;
	РезультатКонтроляПродаж.ДобавлениеИзПлитки = Ложь;
	РезультатКонтроляПродаж.НужнаПроверкаДоступностиОплаты = Ложь;
	РезультатКонтроляПродаж.БылоУдалениеСтрок = Ложь;
	
КонецПроцедуры

Функция ПолучитьПараметрыИзТекстаШаблонаПредупреждения(ТекстШаблона) Экспорт
	
	РезультатФункции = Новый Массив;
	
	СимволНачалаПараметра = "[";
	СимволКонцаПараметра = "]";
	СтрокаШаблона = ТекстШаблона;
	ПозицияНачала = СтрНайти(СтрокаШаблона, СимволНачалаПараметра);
	Пока ПозицияНачала > 0 Цикл
		
		ПозицияОкончания = СтрНайти(СтрокаШаблона, СимволКонцаПараметра);
		Если ПозицияОкончания > 0 Тогда
			ИмяПараметра = Сред(СтрокаШаблона, ПозицияНачала + 1, ПозицияОкончания - ПозицияНачала - 1);
			Если СтрДлина(ИмяПараметра) > 0 И СтрНайти(ИмяПараметра, " ") = 0 Тогда
				РезультатФункции.Добавить(ИмяПараметра);
			КонецЕсли;
			СтрокаШаблона = Сред(СтрокаШаблона, ПозицияОкончания + 1);
			ПозицияНачала = СтрНайти(СтрокаШаблона, СимволНачалаПараметра);
		Иначе
			ПозицияНачала = 0;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат РезультатФункции;
	
КонецФункции

#Область ЗаполнениеХарактеристик

// Процедура заполнения плитки выбора данными из таблицы
// Параметры:
//  Форма - Форма рабочего места кассира.
Процедура ПостроитьПлиткуВыбораЗначений(Форма) Экспорт
	
	ЗначенияНаСтранице = Форма.ДанныеПлиткиПодбораЗначений;
	Если ЗначенияНаСтранице.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ОбщееКоличествоЭлементов = ЗначенияНаСтранице.Количество();
	Элементы = Форма.Элементы;
	
	//Скрываются лишние ряды, если элементов достаточно для одного ряда
	ИмяРяда = "ПодборЗначенийРядКнопок_2";
	ЭлементРяд = Элементы.Найти(ИмяРяда);
	Если ЭлементРяд <> Неопределено Тогда
		ЭлементРяд.Видимость = ОбщееКоличествоЭлементов > 6;
	КонецЕсли;
	
	ОтображатьОстаток = Ложь;
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, "ОтображатьОстаток") Тогда
		ОтображатьОстаток = Форма.ОтображатьОстаток;
	КонецЕсли;
	
	//В таблице заполнения определены страницы расположения элементов в плитке выбора
	КоличествоЗначений = ЗначенияНаСтранице.Количество() - 1;
	КоличествоИндексов = 11;
	
	СписокКоманд = Форма.ДанныеКомандВыбораЗначений;
	СписокКоманд.Очистить();
	
	ИмяОсновнойГруппы = "ПодборЗначений_Элемент01_";
	ИмяЭлементаТекст = "ПодборЗначений_Элемент02_";
	ИмяЭлементаЦена = "ПодборЗначений_Элемент03_";
	ИмяЭлементаОстаток = "ПодборЗначений_Элемент04_";
	
	Для ИндексПП = 0 По КоличествоИндексов Цикл
		
		//Заполнение основной группы базовыми цветами формы, если плитка заполнена ранее.
		ИмяОсновнойГруппыЭлемент = СтрШаблон("%1%2", ИмяОсновнойГруппы, ИндексПП);
		Элементы[ИмяОсновнойГруппыЭлемент].ЦветФона = Новый Цвет();
		Элементы[ИмяОсновнойГруппыЭлемент].Доступность = Ложь;
		
		//Заполнение основного элементы, очищается текст, если плитка была заполнена ранее.
		ИмяТекстаЭлемент = СтрШаблон("%1%2", ИмяЭлементаТекст, ИндексПП);
		Элементы[ИмяТекстаЭлемент].ТекстНевыбраннойКартинки = "";
		
		//Заполнение элемента цена, очищается текст, если плитка была заполнена ранее.
		ИмяЦенаЭлемент = СтрШаблон("%1%2", ИмяЭлементаЦена, ИндексПП);
		Элементы[ИмяЦенаЭлемент].Ширина = 7;
		Элементы[ИмяЦенаЭлемент].ТекстНевыбраннойКартинки = "";
		
		//Заполнение элементы остаток, очищается текст, если плитка была заполнена ранее.
		ИмяЦенаСлеваЭлемент = СтрШаблон("%1%2", ИмяЭлементаОстаток, ИндексПП);
		Элементы[ИмяЦенаСлеваЭлемент].ТекстНевыбраннойКартинки = "";
		
		//Если нет позиции в таблице, то заполнение невозможно.
		Если КоличествоЗначений < ИндексПП тогда
			Продолжить;
		КонецЕсли;
		
		//Заполнение элементов которые присутствуют в плитке
		ЗначениеПозиция = ЗначенияНаСтранице[ИндексПП];
		
		//Заполнение основной группы цветом, определенным в таблице.
		Элементы[ИмяОсновнойГруппыЭлемент].ЦветФона = ЗначениеПозиция.ЦветФона;
		Элементы[ИмяОсновнойГруппыЭлемент].Доступность = Истина;
		
		//Заполнение основного элементы
		// ТекстНевыбраннойКартинки - Имя Элемента из таблицы, например наименование характеристк.
		// ЦветТекста - Цвет текста, который определен в таблице.
		// Шрифт - Шрифт, который определен в таблице
		Элементы[ИмяТекстаЭлемент].ТекстНевыбраннойКартинки = ЗначениеПозиция.ИмяЭлемента;
		Элементы[ИмяТекстаЭлемент].ЦветТекста = ЗначениеПозиция.ЦветШрифта;
		Элементы[ИмяТекстаЭлемент].Шрифт = ЗначениеПозиция.Шрифт;
		
		//Заполнение элемента цена, если она определена в таблице
		ЦенаТекстом = "";
		Если ЗначениеЗаполнено(ЗначениеПозиция.Цена) Тогда
			ЦенаТекст = Формат(ЗначениеПозиция.Цена, "ЧДЦ=2");
			ДлинаЦены = СтрДлина(ЦенаТекст);
			НужноДлину = ((9 - ДлинаЦены) * 2) + ДлинаЦены - ?(ДлинаЦены < 7, 1, 0);
			ЦенаТекстом = СтроковыеФункцииКлиентСервер.ДополнитьСтроку(ЦенаТекст, НужноДлину, " ");
		КонецЕсли;
		Элементы[ИмяЦенаЭлемент].ТекстНевыбраннойКартинки = ЦенаТекстом;
		
		//Заполнение элементы остаток, если он определен в таблице и разрешен настройками РМК.
		ОстатокТекстом = "";
		Если ЗначениеЗаполнено(ЗначениеПозиция.Доступно) И ОтображатьОстаток Тогда
			Если ЗначениеПозиция.Доступно > 999 Тогда
				ДоступноВФормате = "999+";
			Иначе
				ДоступноВФормате = Формат(ЗначениеПозиция.Доступно, "ЧДЦ=3");
			КонецЕсли;
			ОстатокТекстом = ДоступноВФормате;
		КонецЕсли;
		Элементы[ИмяЦенаСлеваЭлемент].ТекстНевыбраннойКартинки = ОстатокТекстом;
		
		
		//Заполнение таблицы команд, чтобы при нажатии отрабатывало определенное действие
		// ИмяКоманды - Имя элемента нажатия.
		// Значение - значение выбора.
		// Цена - цена, выбранного значения.
		// ИмяДействия - Имя выполняемого действия при нажатии.
		НоваяСтрока = СписокКоманд.Добавить();
		НоваяСтрока.ИмяКоманды = ИмяОсновнойГруппыЭлемент;
		НоваяСтрока.Значение = ЗначениеПозиция.ЗначениеВыбора;
		НоваяСтрока.Цена = ЗначениеПозиция.Цена;
		НоваяСтрока.ИмяДействия = ЗначениеПозиция.ИмяДействия;
		
		НоваяСтрока = СписокКоманд.Добавить();
		НоваяСтрока.ИмяКоманды = ИмяТекстаЭлемент;
		НоваяСтрока.Значение = ЗначениеПозиция.ЗначениеВыбора;
		НоваяСтрока.Цена = ЗначениеПозиция.Цена;
		НоваяСтрока.ИмяДействия = ЗначениеПозиция.ИмяДействия;
		
		НоваяСтрока = СписокКоманд.Добавить();
		НоваяСтрока.ИмяКоманды = ИмяЦенаЭлемент;
		НоваяСтрока.Значение = ЗначениеПозиция.ЗначениеВыбора;
		НоваяСтрока.Цена = ЗначениеПозиция.Цена;
		НоваяСтрока.ИмяДействия = ЗначениеПозиция.ИмяДействия;
		
		НоваяСтрока = СписокКоманд.Добавить();
		НоваяСтрока.ИмяКоманды = ИмяЦенаСлеваЭлемент;
		НоваяСтрока.Значение = ЗначениеПозиция.ЗначениеВыбора;
		НоваяСтрока.Цена = ЗначениеПозиция.Цена;
		НоваяСтрока.ИмяДействия = ЗначениеПозиция.ИмяДействия;
		
	КонецЦикла;
	
КонецПроцедуры
#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ШаблонСтрокиОграниченияПродаж()
	
	РезультатФункции = Новый Структура();
	РезультатФункции.Вставить("ВидКонтроля", Неопределено);
	РезультатФункции.Вставить("ТипКонтроля", Неопределено);
	РезультатФункции.Вставить("ВозрастКонтроля", 0);
	РезультатФункции.Вставить("ТекстПредупреждения", "");
	РезультатФункции.Вставить("ПараметрыВидаКонтроля", Новый Массив);
	РезультатФункции.Вставить("СтрокиТоваров", Новый Массив);
	
	Возврат РезультатФункции;
	
КонецФункции

Функция ОтключенВыводПредупрежденийВидаКонтроля(СтрокаВидаКонтроля)
	
	Результатфункции = Ложь;
	ПараметрВыводаНайден = Ложь;
	КоличествоПараметров = СтрокаВидаКонтроля.ПараметрыКонтроля.Количество();
	ИндексПараметра = 0;
	Пока ИндексПараметра < КоличествоПараметров И Не ПараметрВыводаНайден Цикл
		СтрокаПараметра = СтрокаВидаКонтроля.ПараметрыКонтроля.Получить(ИндексПараметра);
		Если СтрокаПараметра.Параметр
				= ПредопределенноеЗначение("Перечисление.ПараметрыКонтроляПродаж.НеВыводитьСообщение") Тогда
			ПараметрВыводаНайден = Истина;
			ЗначениеВывода = СтрокаПараметра.Значение;
			ТипБулево = Новый ОписаниеТипов("Булево");
			ЗначениеБулево = ТипБулево.ПривестиЗначение(ЗначениеВывода);
			Результатфункции = ЗначениеБулево;
		КонецЕсли;
		
		ИндексПараметра = ИндексПараметра + 1;
	КонецЦикла;
	
	Возврат Результатфункции;
	
КонецФункции

Процедура УстановитьТекстПредупрежденияЗапретаОплатыБонусами(РезультатКонтроля,
		ДанныеКонтроляПродаж, ПараметрыПроверки)
		
	НеВыводитьЗапретБонусов = Ложь;
	КоличествоСтрокВидовКонтроля = ДанныеКонтроляПродаж.СтрокиВидовКонтроля.Количество();
	ВидКонтроляЗапретБонусов = ПредопределенноеЗначение("Справочник.ВидыКонтроля.ЗапретОплатыБонусами");
	ИндексСтрокиВида = 0;
	СтрокаДобавлена = Ложь;
	Пока ИндексСтрокиВида < КоличествоСтрокВидовКонтроля И Не СтрокаДобавлена Цикл
		СтрокаВидаКонтроля = ДанныеКонтроляПродаж.СтрокиВидовКонтроля.Получить(ИндексСтрокиВида);
		Если СтрокаВидаКонтроля.ВидКонтроля = ВидКонтроляЗапретБонусов Тогда
			Если ПараметрыПроверки.СоответствиеСтрокВидовКонтроля.Получить(СтрокаВидаКонтроля.ВидКонтроля) = Неопределено Тогда
				ПараметрыПроверки.СоответствиеСтрокВидовКонтроля.Вставить(СтрокаВидаКонтроля.ВидКонтроля, СтрокаВидаКонтроля);
			КонецЕсли;
			СтрокаДобавлена = Истина;
			НеВыводитьЗапретБонусов = ОтключенВыводПредупрежденийВидаКонтроля(СтрокаВидаКонтроля);
		КонецЕсли;
		ИндексСтрокиВида = ИндексСтрокиВида + 1;
	КонецЦикла;
	
	ТекстПредупрежденияЗапрета = "";
	Для Каждого ЭлементКонтроляПродаж Из ДанныеКонтроляПродаж.ЭлементыКонтроляПродаж Цикл
		ЗапретКонтроляОбработан = Ложь;
		КоличествоСтрокКонтроля = ЭлементКонтроляПродаж.СтрокиКонтроля.Количество();
		ИндексСтрокиКонтроля = 0;
		Пока ИндексСтрокиКонтроля < КоличествоСтрокКонтроля И Не ЗапретКонтроляОбработан Цикл
			СтрокаКонтроля = ЭлементКонтроляПродаж.СтрокиКонтроля.Получить(ИндексСтрокиКонтроля);
			Если СтрокаКонтроля.ВидКонтроля = ВидКонтроляЗапретБонусов
					И ОграничениеДействуетВМоментВремени(СтрокаКонтроля, ПараметрыПроверки.ДатаПроверки) Тогда
					
				ТекстПредупреждения
					= СформироватьТекстПредупреждения(ЭлементКонтроляПродаж, СтрокаКонтроля, Неопределено, ПараметрыПроверки);
				ДобавитьТекстПредупреждения(ТекстПредупрежденияЗапрета, ТекстПредупреждения);
					
				ЗапретКонтроляОбработан = Истина;
					
			КонецЕсли;
			ИндексСтрокиКонтроля = ИндексСтрокиКонтроля + 1;
		КонецЦикла;
	КонецЦикла;
	РезультатКонтроля.ТекстПредупрежденияЗапретаОплатыБонусами = ТекстПредупрежденияЗапрета;
	РезультатКонтроля.НеВыводитьЗапретБонусов = НеВыводитьЗапретБонусов;
	
КонецПроцедуры

Процедура ДобавитьТекстПредупреждения(ОбщийТекст, КусокТекста)
	
	Если ОбщийТекст = "" Тогда
		ОбщийТекст = КусокТекста;
	Иначе
		ОбщийТекст = СтрШаблон("%1%2%3", ОбщийТекст, Символы.ПС, КусокТекста);
	КонецЕсли;
	
КонецПроцедуры

Процедура ВыполнитьПроверкиДляСтрокиКонтроляПродаж(Форма, СтрокаЭлементаКонтроляПродаж, СтрокаКонтроляПродаж,
		СтрокаТовара, ПараметрыПроверки)
		
	Если (Не ПараметрыПроверки.МассивВидовКонтроля.Найти(СтрокаКонтроляПродаж.ВидКонтроля) = Неопределено)
			И ОграничениеДействуетВМоментВремени(СтрокаКонтроляПродаж, ПараметрыПроверки.ДатаПроверки)
			И КонтрольСоответствуетВидуОперацииИЭтапуКонтроля(СтрокаКонтроляПродаж, Форма, ПараметрыПроверки) Тогда
			
		СтрокаВидаКонтроля = ПараметрыПроверки.СоответствиеСтрокВидовКонтроля.Получить(СтрокаКонтроляПродаж.ВидКонтроля);
		Если СтрокаКонтроляПродаж.ВидКонтроля = ПредопределенноеЗначение("Справочник.ВидыКонтроля.ЗапретОплатыБонусами")
				Или СтрокаВидаКонтроля.ТипКонтроля = ПредопределенноеЗначение("Перечисление.ТипыКонтроля.ЗапретРучнойСкидки")
				Или СтрокаВидаКонтроля.ТипКонтроля = ПредопределенноеЗначение("Перечисление.ТипыКонтроля.КонтрольОстатков") Тогда
				
			ИмяКолонкиРесурса = ПолучитьИмяРесурсаПоВидуКонтроля(СтрокаВидаКонтроля);
			Если Не ИмяКолонкиРесурса = "" Тогда
				УстановитьФлагКонтроляПродажВДобавленныхТоварах(Форма, СтрокаТовара, ИмяКолонкиРесурса, ПараметрыПроверки);
			КонецЕсли;
			
		ИначеЕсли СтрокаВидаКонтроля.ТипКонтроля
				= ПредопределенноеЗначение("Перечисление.ТипыКонтроля.КонтрольСотрудникомНаКСО") Тогда
			
			ДобавитьОграниченияКонтроляТоваровНаКСО(Форма, СтрокаЭлементаКонтроляПродаж, СтрокаКонтроляПродаж, СтрокаТовара,
				ПараметрыПроверки);
				
		ИначеЕсли СтрокаВидаКонтроля.ТипКонтроля = ПредопределенноеЗначение("Перечисление.ТипыКонтроля.ЗапретПодбора") Тогда
			
			ДобавитьОграничениеКонтроляПоСтрокеТовара(Форма, СтрокаЭлементаКонтроляПродаж, СтрокаКонтроляПродаж,
				СтрокаТовара, ПараметрыПроверки);
			
		ИначеЕсли СтрокаВидаКонтроля.ТипКонтроля
				= ПредопределенноеЗначение("Перечисление.ТипыКонтроля.ПроверкаПокупателя") Тогда
				
			ДобавитьОграничениеКонтроляПокупателя(Форма, СтрокаЭлементаКонтроляПродаж, СтрокаКонтроляПродаж, СтрокаТовара,
				ПараметрыПроверки);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ДобавитьОграниченияКонтроляТоваровНаКСО(Форма, СтрокаЭлементаКонтроляПродаж, СтрокаКонтроляПродаж,
		СтрокаТовара, ПараметрыПроверки)
	
	РезультатКонтроля = Форма.РезультатКонтроляПродаж;
	Если СтрокаТовара = Неопределено Тогда
		Для Каждого СтрокаТовараКоллекции Из РезультатКонтроля.КонтролируемыеСтрокиТоваров Цикл
			ДобавитьОграничениеКонтроляПоСтрокеТовара(Форма, СтрокаЭлементаКонтроляПродаж, СтрокаКонтроляПродаж,
				СтрокаТовараКоллекции, ПараметрыПроверки);
		КонецЦикла;
	Иначе
		ДобавитьОграничениеКонтроляПоСтрокеТовара(Форма, СтрокаЭлементаКонтроляПродаж, СтрокаКонтроляПродаж,
			СтрокаТовара, ПараметрыПроверки);
	КонецЕсли;
	
КонецПроцедуры

Процедура ДобавитьОграничениеКонтроляПокупателя(Форма, СтрокаЭлементаКонтроляПродаж,
		СтрокаКонтроляПродаж, СтрокаТовара, ПараметрыПроверки)
		
	СтрокаВидаКонтроля = ПараметрыПроверки.СоответствиеСтрокВидовКонтроля.Получить(СтрокаКонтроляПродаж.ВидКонтроля);
	ЭтоПроверкаВозраста = Ложь;
	ЗначениеВозраста = ПолучитьЗначениеВозрастаВидаКонтроля(СтрокаВидаКонтроля, ЭтоПроверкаВозраста);
	ВидКонтроляУжеУчтен = Ложь;
	Если ЭтоПроверкаВозраста Тогда
		Если Форма.ПодтвержденныйВозрастПокупателя >= ЗначениеВозраста Тогда
			ВидКонтроляУжеУчтен = Истина;
		КонецЕсли;
	ИначеЕсли Не Форма.ПодтвержденныеВидыКонтроляВЧеке.НайтиПоЗначению(СтрокаВидаКонтроля.ВидКонтроля)
			= Неопределено Тогда
		ВидКонтроляУжеУчтен = Истина;
	КонецЕсли;
	Если Не ВидКонтроляУжеУчтен Тогда
		ДобавитьОграничениеКонтроляПоСтрокеТовара(Форма, СтрокаЭлементаКонтроляПродаж, СтрокаКонтроляПродаж, СтрокаТовара,
			ПараметрыПроверки);
	КонецЕсли;
		
КонецПроцедуры

Процедура ДобавитьОграничениеКонтроляПоСтрокеТовара(Форма, СтрокаЭлементаКонтроляПродаж,
		СтрокаКонтроляПродаж, СтрокаТовара, ПараметрыПроверки)
		
	НайденноеОграничение = Неопределено;
	РезультатКонтроля = Форма.РезультатКонтроляПродаж;
	СтрокаВидаКонтроля = ПараметрыПроверки.СоответствиеСтрокВидовКонтроля.Получить(СтрокаКонтроляПродаж.ВидКонтроля);
	ПозицияДобавления = ПолучитьПозициюДобавленияОграничения(Форма, РезультатКонтроля.ОграниченияПродаж,
		СтрокаВидаКонтроля, СтрокаТовара, ПараметрыПроверки, НайденноеОграничение);
	Если ПозицияДобавления >= 0 Тогда
		
		ТекстПредупреждения = СформироватьТекстПредупреждения(СтрокаЭлементаКонтроляПродаж, СтрокаКонтроляПродаж,
			СтрокаТовара, ПараметрыПроверки);
			
		ЭтоПроверкаВозраста = Ложь;
		ЗначениеВозраста = ПолучитьЗначениеВозрастаВидаКонтроля(СтрокаВидаКонтроля, ЭтоПроверкаВозраста);
			
		НоваяСтрокаОграничения = ШаблонСтрокиОграниченияПродаж();
		Если ЭтоПроверкаВозраста Тогда
			НоваяСтрокаОграничения.ВозрастКонтроля = ЗначениеВозраста;
		Иначе
			НоваяСтрокаОграничения.ВидКонтроля = СтрокаВидаКонтроля.ВидКонтроля;
		КонецЕсли;
		НоваяСтрокаОграничения.ТипКонтроля = СтрокаВидаКонтроля.ТипКонтроля;
		НоваяСтрокаОграничения.ТекстПредупреждения = ТекстПредупреждения;
		НоваяСтрокаОграничения.ПараметрыВидаКонтроля = СтрокаВидаКонтроля.ПараметрыКонтроля;
		ДобавитьСтрокиТоваровВОграничение(Форма, НоваяСтрокаОграничения, СтрокаТовара, ПараметрыПроверки);
		
		РезультатКонтроля.ОграниченияПродаж.Вставить(ПозицияДобавления, НоваяСтрокаОграничения);
		
	Иначе
		
		ДобавитьСтрокиТоваровВОграничение(Форма, НайденноеОграничение, СтрокаТовара, ПараметрыПроверки);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ДобавитьСтрокиТоваровВОграничение(Форма, СтрокаОграничения, СтрокаТовара, ПараметрыПроверки)
	
	ЭтапыКонтроляПродаж = ЭтапыКонтроляПродаж();
	КоллекцияТоваров = ?(ПараметрыПроверки.ЭтапКонтроля = ЭтапыКонтроляПродаж.ДобавлениеТовара,
		Форма.РезультатКонтроляПродаж.КонтролируемыеСтрокиТоваров, Форма.Объект.Товары);
		
	МассивНомеровНаборов = Новый Массив;
	
	Если СтрокаТовара = Неопределено Тогда
		Для Каждого СтрокаКоллекции Из КоллекцияТоваров Цикл
			Если СтрокаОграничения.СтрокиТоваров.Найти(СтрокаКоллекции.ПолучитьИдентификатор()) = Неопределено Тогда
				СтрокаОграничения.СтрокиТоваров.Добавить(СтрокаКоллекции.ПолучитьИдентификатор());
				Если СтрокаКоллекции.ЭтоНабор Тогда
					МассивНомеровНаборов.Добавить(СтрокаКоллекции.НомерНабора);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	ИначеЕсли СтрокаОграничения.СтрокиТоваров.Найти(СтрокаТовара.ПолучитьИдентификатор()) = Неопределено Тогда
		СтрокаОграничения.СтрокиТоваров.Добавить(СтрокаТовара.ПолучитьИдентификатор());
		Если СтрокаТовара.ЭтоНабор Тогда
			МассивНомеровНаборов.Добавить(СтрокаТовара.НомерНабора);
		КонецЕсли;
	КонецЕсли;
	СтрокиНаборов = ПолучитьСтрокиНабораИзКоллекции(КоллекцияТоваров, МассивНомеровНаборов);
	Для Каждого СтрокаНабора Из СтрокиНаборов Цикл
		Если СтрокаОграничения.СтрокиТоваров.Найти(СтрокаНабора.ПолучитьИдентификатор()) = Неопределено Тогда
			СтрокаОграничения.СтрокиТоваров.Добавить(СтрокаНабора.ПолучитьИдентификатор());
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция ПолучитьСтрокиНабораИзКоллекции(КоллекцияТоваров, МассивНомеровНаборов)
	
	МассивСтрокНаборов = Новый Массив;
	Для Каждого СтрокаКоллекции Из КоллекцияТоваров Цикл
		Если СтрокаКоллекции.ЭтоНабор И Не МассивНомеровНаборов.Найти(СтрокаКоллекции.НомерНабора) = Неопределено Тогда
			МассивСтрокНаборов.Добавить(СтрокаКоллекции);
		КонецЕсли;
	КонецЦикла;
	
	Возврат МассивСтрокНаборов;
	
КонецФункции

Функция СформироватьТекстПредупреждения(СтрокаЭлементаКонтроляПродаж, СтрокаКонтроляПродаж, СтрокаТовара,
		ПараметрыПроверки)
		
	СтрокаВидаКонтроля = ПараметрыПроверки.СоответствиеСтрокВидовКонтроля.Получить(СтрокаКонтроляПродаж.ВидКонтроля);
	ТекстПредупреждения = СокрЛП(СтрокаВидаКонтроля.ТекстШаблонаПредупреждения);
	ПараметрыИзШаблона = ПолучитьПараметрыИзТекстаШаблонаПредупреждения(ТекстПредупреждения);
	Для каждого ПараметрШаблона Из ПараметрыИзШаблона Цикл
		ТекстПараметра = СформироватьТекстПоПараметруШаблона(ПараметрШаблона, СтрокаЭлементаКонтроляПродаж,
			СтрокаКонтроляПродаж, СтрокаТовара, ПараметрыПроверки);
		ТекстПредупреждения = СтрЗаменить(ТекстПредупреждения, СтрШаблон("[%1]", ПараметрШаблона), ТекстПараметра);
	КонецЦикла;
	
	Возврат ТекстПредупреждения;
		
КонецФункции

Функция СформироватьТекстПоПараметруШаблона(ПараметрШаблона, СтрокаЭлементаКонтроляПродаж, СтрокаКонтроляПродаж,
		СтрокаТовара, ПараметрыПроверки)
	
	РезультатФункции = "";
	СтрокаВидаКонтроля = ПараметрыПроверки.СоответствиеСтрокВидовКонтроля.Получить(СтрокаКонтроляПродаж.ВидКонтроля);
	ИмяПараметраГруппаТоваров = "ГруппаТоваров";
	ИмяПараметраОписаниеПериода = "ОписаниеПериода";
	ИмяПараметраВозраст = "Возраст";
	ИмяПараметраДатаРождения = "ДатаРождения";
	ИмяПараметраПредставлениеТовара = "ПредставлениеТовара";
	СдвигГода = -12;
	
	Если ПараметрШаблона = ИмяПараметраГруппаТоваров Тогда
		РезультатФункции = СокрЛП(СтрокаЭлементаКонтроляПродаж.НаименованиеГруппыТоваров);
	ИначеЕсли ПараметрШаблона = ИмяПараметраОписаниеПериода Тогда
		ПустаяДата = Дата(1, 1, 1, 0, 0, 0);
		ДатаКонецДня = Дата(1, 1, 1, 23, 59, 59);
		Если ЗначениеЗаполнено(СтрокаКонтроляПродаж.ВремяНачала) Или (ЗначениеЗаполнено(СтрокаКонтроляПродаж.ВремяОкончания)
				И Не СтрокаКонтроляПродаж.ВремяОкончания = ДатаКонецДня) Тогда
			РезультатФункции = СтрШаблон(НСтр("ru = 'с %1 по %2'"),
				Формат(СтрокаКонтроляПродаж.ВремяНачала, "ДФ=HH.mm; ДП=00:00"),
				Формат(СтрокаКонтроляПродаж.ВремяОкончания, "ДФ=HH.mm; ДП=00:00"));
		КонецЕсли;
	ИначеЕсли ПараметрШаблона = ИмяПараметраВозраст Тогда
		ЗначениеВозраста = ПолучитьЗначениеВозрастаВидаКонтроля(СтрокаВидаКонтроля);
		Если ЗначениеВозраста > 0 Тогда
			РезультатФункции = Формат(ЗначениеВозраста, "ЧГ=");
		КонецЕсли;
	ИначеЕсли ПараметрШаблона = ИмяПараметраДатаРождения Тогда
		ЗначениеВозраста = ПолучитьЗначениеВозрастаВидаКонтроля(СтрокаВидаКонтроля);
		Если ЗначениеВозраста > 0 Тогда
			ДатаРождения = ДобавитьМесяц(ПараметрыПроверки.ДатаПроверки, СдвигГода * ЗначениеВозраста);
			РезультатФункции = Формат(ДатаРождения, "ДЛФ=D");
		КонецЕсли;
	ИначеЕсли ПараметрШаблона = ИмяПараметраПредставлениеТовара Тогда
		Если Не СтрокаТовара = Неопределено Тогда
			РезультатФункции = СокрЛП(СтрокаТовара.ПредставлениеНоменклатураХарактеристика);
		КонецЕсли;
	КонецЕсли;
	
	Возврат РезультатФункции;
	
КонецФункции

Функция ПолучитьЗначениеВозрастаВидаКонтроля(СтрокаВидаКонтроля, ЭтоВидКонтроляПроверкаВозраста = Неопределено)
	
	РезультатФункции = 0;
	
	КоличествоПараметров = СтрокаВидаКонтроля.ПараметрыКонтроля.Количество();
	ИндексПараметра = 0;
	ПараметрНайден = Ложь;
	ПараметрВозраст = ПредопределенноеЗначение("Перечисление.ПараметрыКонтроляПродаж.Возраст");
	ТипЧисло = Новый ОписаниеТипов("Число");
	Пока ИндексПараметра < КоличествоПараметров И Не ПараметрНайден Цикл
		СтрокаПараметра = СтрокаВидаКонтроля.ПараметрыКонтроля.Получить(ИндексПараметра);
		Если СтрокаПараметра.Параметр = ПараметрВозраст Тогда
			РезультатФункции = ТипЧисло.ПривестиЗначение(СтрокаПараметра.Значение);
			ПараметрНайден = Истина;
		КонецЕсли;
		
		ИндексПараметра = ИндексПараметра + 1;
	КонецЦикла;
	ЭтоВидКонтроляПроверкаВозраста = (ПараметрНайден
		И СтрокаВидаКонтроля.ТипКонтроля = ПредопределенноеЗначение("Перечисление.ТипыКонтроля.ПроверкаПокупателя"));
	
	Возврат РезультатФункции;
	
КонецФункции

Функция ПолучитьПозициюДобавленияОграничения(Форма, ОграниченияПродаж, СтрокаВидаКонтроля, СтрокаТовара,
		ПараметрыПроверки, НайденноеОграничение)
	
	ПозицияДобавления = 0;
	КоличествоОграничений = ОграниченияПродаж.Количество();
	ПорядокТекущегоТипа = ПараметрыПроверки.ИспользуемыеТипыКонтроля.Найти(СтрокаВидаКонтроля.ТипКонтроля);
	ИндексОграничения = 0;
	
	ЭтоПроверкаВозраста = Ложь;
	ЗначениеВозраста = ПолучитьЗначениеВозрастаВидаКонтроля(СтрокаВидаКонтроля, ЭтоПроверкаВозраста);
	ТипПроверкаПокупателя = ПредопределенноеЗначение("Перечисление.ТипыКонтроля.ПроверкаПокупателя");
	
	Пока ИндексОграничения < КоличествоОграничений Цикл
		СтрокаОграничения = ОграниченияПродаж.Получить(ИндексОграничения);
		Если ОграниченияКонтроляИдентичны(Форма, СтрокаОграничения, СтрокаВидаКонтроля, СтрокаТовара, ЗначениеВозраста) Тогда
			ИндексОграничения = КоличествоОграничений;
			ПозицияДобавления = -1;
			НайденноеОграничение = СтрокаОграничения;
		Иначе
			ПорядокПроверяемогоТипа = ПараметрыПроверки.ИспользуемыеТипыКонтроля.Найти(СтрокаОграничения.ТипКонтроля);
			Если ПорядокТекущегоТипа > ПорядокПроверяемогоТипа Тогда
				ИндексОграничения = ИндексОграничения + 1;
				ПозицияДобавления = ИндексОграничения;
			ИначеЕсли ПорядокТекущегоТипа = ПорядокПроверяемогоТипа Тогда
				Если СтрокаОграничения.ТипКонтроля = ТипПроверкаПокупателя Тогда
					Если ЭтоПроверкаВозраста И ЗначениеВозраста < СтрокаОграничения.ВозрастКонтроля Тогда
						// Проверка возраста после остальных проверок покупателя (возраст = 0) и младших проверок возраста
						ИндексОграничения = ИндексОграничения + 1;
						ПозицияДобавления = ИндексОграничения;
					ИначеЕсли СтрокаОграничения.ВозрастКонтроля > 0 И Не ЭтоПроверкаВозраста Тогда
						ИндексОграничения = КоличествоОграничений;
					ИначеЕсли ЭтоПроверкаВозраста И ЗначениеВозраста > СтрокаОграничения.ВозрастКонтроля
							И СтрокаОграничения.ВозрастКонтроля > 0 Тогда
						ИндексОграничения = КоличествоОграничений;
					Иначе
						ИндексОграничения = ИндексОграничения + 1;
						ПозицияДобавления = ИндексОграничения;
					КонецЕсли;
				Иначе
					ИндексОграничения = ИндексОграничения + 1;
					ПозицияДобавления = ИндексОграничения;
				КонецЕсли;
			Иначе
				ИндексОграничения = КоличествоОграничений;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	Возврат ПозицияДобавления;
	
КонецФункции

Функция ОграниченияКонтроляИдентичны(Форма, СтрокаОграничения, СтрокаВидаКонтроля, СтрокаТовара, ЗначениеВозраста)
	
	РезультатФункции = Ложь;
	
	ТипПроверкаПокупателя = ПредопределенноеЗначение("Перечисление.ТипыКонтроля.ПроверкаПокупателя");
	
	Если СтрокаВидаКонтроля.ТипКонтроля
			= ПредопределенноеЗначение("Перечисление.ТипыКонтроля.КонтрольСотрудникомНаКСО") Тогда
			
		Если СтрокаОграничения.СтрокиТоваров.Количество() > 0 Тогда
			
			ИдентификаторСтроки = СтрокаОграничения.СтрокиТоваров[0];
			СтрокаТовараОграничения = Форма.Объект.Товары.НайтиПоИдентификатору(ИдентификаторСтроки);
			РезультатФункции = (СтрокаОграничения.ТипКонтроля = СтрокаВидаКонтроля.ТипКонтроля
				И СтрокаТовараОграничения.Номенклатура = СтрокаТовара.Номенклатура
				И СтрокаТовараОграничения.Характеристика = СтрокаТовара.Характеристика);
			
		КонецЕсли;
			
	ИначеЕсли СтрокаВидаКонтроля.ТипКонтроля = ТипПроверкаПокупателя Тогда
			
		Если ЗначениеВозраста > 0 И СтрокаОграничения.ВозрастКонтроля > 0 Тогда
			РезультатФункции = (ЗначениеВозраста = СтрокаОграничения.ВозрастКонтроля
				И СтрокаОграничения.ТипКонтроля = ТипПроверкаПокупателя);
		Иначе
			РезультатФункции = (СтрокаОграничения.ВидКонтроля = СтрокаВидаКонтроля.ВидКонтроля);
		КонецЕсли;
		
	ИначеЕсли СтрокаВидаКонтроля.ТипКонтроля
			= ПредопределенноеЗначение("Перечисление.ТипыКонтроля.ЗапретПодбора") Тогда
			
		РезультатФункции = (СтрокаОграничения.ВидКонтроля = СтрокаВидаКонтроля.ВидКонтроля);
			
	КонецЕсли;
	
	Возврат РезультатФункции;
	
КонецФункции

Функция ПолучитьИмяРесурсаПоВидуКонтроля(СтрокаВидаКонтроля)
	
	РезультатФункции = "";
	
	Если СтрокаВидаКонтроля.ВидКонтроля = ПредопределенноеЗначение("Справочник.ВидыКонтроля.ЗапретОплатыБонусами") Тогда
		РезультатФункции = "ЗапретОплатыБонусамиСкидками";
	ИначеЕсли СтрокаВидаКонтроля.ТипКонтроля
			= ПредопределенноеЗначение("Перечисление.ТипыКонтроля.ЗапретРучнойСкидки") Тогда
		
		РезультатФункции = "ЗапретРучныхСкидок";
	ИначеЕсли СтрокаВидаКонтроля.ТипКонтроля
			= ПредопределенноеЗначение("Перечисление.ТипыКонтроля.КонтрольОстатков") Тогда
		
		РезультатФункции = "КонтролироватьОстатки";
	КонецЕсли;
	
	Возврат РезультатФункции;
	
КонецФункции

Процедура УстановитьФлагКонтроляПродажВДобавленныхТоварах(Форма, СтрокаТовара, ИмяКолонкиРесурса, ПараметрыПроверки)
	
	Если СтрокаТовара = Неопределено Тогда
		
		РезультатКонтроля = Форма.РезультатКонтроляПродаж;
		
		ЭтапыКонтроляПродаж = ЭтапыКонтроляПродаж();
		КоллекцияТоваров = ?(ПараметрыПроверки.ЭтапКонтроля = ЭтапыКонтроляПродаж.ОткрытиеЧека,
			Форма.Объект.Товары, РезультатКонтроля.КонтролируемыеСтрокиТоваров);
		
		Для Каждого СтрокаТовараКоллекции Из КоллекцияТоваров Цикл
			СтрокаТовараКоллекции[ИмяКолонкиРесурса] = Истина;
		КонецЦикла;
		
	Иначе
		СтрокаТовара[ИмяКолонкиРесурса] = Истина;
	КонецЕсли;
	
КонецПроцедуры

Функция ОграничениеДействуетВМоментВремени(СтрокаКонтроляПродаж, МоментВремени)
	
	РезультатФункции = Ложь;
	ПустаяДата = Дата(1, 1, 1, 0, 0, 0);
	Если МоментВремени >= СтрокаКонтроляПродаж.НачалоПериода И (МоментВремени <= СтрокаКонтроляПродаж.КонецПериода
			Или СтрокаКонтроляПродаж.КонецПериода = ПустаяДата) Тогда
	
		ВремяПроверки = ОбщегоНазначенияРМККлиентСервер.ВремяИзДатыВСекундах(МоментВремени);
		ТекущийДеньНедели = ОбщегоНазначенияРМККлиентСервер.ДеньНеделиПеречислением(МоментВремени);
		
		ВремяНачалаЗапрета = ОбщегоНазначенияРМККлиентСервер.ВремяИзДатыВСекундах(СтрокаКонтроляПродаж.ВремяНачала);
		ВремяОкончанияЗапрета = ОбщегоНазначенияРМККлиентСервер.ВремяИзДатыВСекундах(СтрокаКонтроляПродаж.ВремяОкончания);
		ДеньНеделиЗапрета = СтрокаКонтроляПродаж.ДеньНедели;
		
		ЭтоДеньЗапрета = (ДеньНеделиЗапрета = ТекущийДеньНедели Или НЕ ЗначениеЗаполнено(ДеньНеделиЗапрета));
		Если ЭтоДеньЗапрета И ВремяПроверки >= ВремяНачалаЗапрета
				И (ВремяПроверки <= ВремяОкончанияЗапрета Или ВремяОкончанияЗапрета = 0) Тогда
				
			РезультатФункции = Истина;
				
		КонецЕсли;
		
	КонецЕсли;
	Возврат РезультатФункции;
	
КонецФункции

Функция КонтрольСоответствуетВидуОперацииИЭтапуКонтроля(СтрокаКонтроляПродаж, Форма, ПараметрыПроверки)
	
	РезультатФункции = Истина;
	ЭтапыКонтроляПродаж = ЭтапыКонтроляПродаж();
	ЭтоВозврат = ОбщегоНазначенияРМККлиент.ЭтоВидОперацииВозврат(Форма.Объект.ВидОперации);
	ТипКонтроляЗапретПодбора = ПредопределенноеЗначение("Перечисление.ТипыКонтроля.ЗапретПодбора");
	ТипКонтроляПроверкаПокупателя = ПредопределенноеЗначение("Перечисление.ТипыКонтроля.ПроверкаПокупателя");
	ТипыКонтроляИсключения = Новый Массив;
	ТипыКонтроляИсключения.Добавить(ТипКонтроляЗапретПодбора);
	ТипыКонтроляИсключения.Добавить(ТипКонтроляПроверкаПокупателя);
	
	СтрокаВидаКонтроля = ПараметрыПроверки.СоответствиеСтрокВидовКонтроля.Получить(СтрокаКонтроляПродаж.ВидКонтроля);
	Если ЭтоВозврат Тогда
		ЭтоТипИсключенияПриДобавленииТовара = (ПараметрыПроверки.ЭтапКонтроля = ЭтапыКонтроляПродаж.ДобавлениеТовара
			И Не ТипыКонтроляИсключения.Найти(СтрокаВидаКонтроля.ТипКонтроля) = Неопределено);
		ЭтоПовторПроверкиЗапретаПриПробитии = (ПараметрыПроверки.ЭтапКонтроля = ЭтапыКонтроляПродаж.ПробитиеЧека
			И Форма.ИгнорироватьЗапретПодбора И СтрокаВидаКонтроля.ТипКонтроля = ТипКонтроляЗапретПодбора);
		ЭтоПроверкаПокупателяПриПробитии = (ПараметрыПроверки.ЭтапКонтроля = ЭтапыКонтроляПродаж.ПробитиеЧека
			И СтрокаВидаКонтроля.ТипКонтроля = ТипКонтроляПроверкаПокупателя);
		
		Если ЭтоТипИсключенияПриДобавленииТовара Или ЭтоПовторПроверкиЗапретаПриПробитии
				Или ЭтоПроверкаПокупателяПриПробитии Тогда
			РезультатФункции = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Возврат РезультатФункции;
	
КонецФункции

Функция ПолучитьЭлементыКонтроляПродажПоНоменклатуре(КэшКонтроляПродаж, СтрокаТовара)
	
	РезультатФункции = Новый Массив;
	
	Для Каждого СтрокаНоменклатурыКэшаПлитки Из КэшКонтроляПродаж.НоменклатураПлиткиКонтроляПродаж Цикл
		Если ТоварСоответствуетНоменклатуреХарактеристике(СтрокаНоменклатурыКэшаПлитки, СтрокаТовара) Тогда
			ДобавитьСтрокиКонтроляПродажВКоллекцию(КэшКонтроляПродаж, СтрокаНоменклатурыКэшаПлитки.МассивКонтролейПродаж,
				РезультатФункции);
		КонецЕсли;
	КонецЦикла;
	Для Каждого СтрокаНоменклатурыКэша Из КэшКонтроляПродаж.НоменклатураКонтроляПродаж Цикл
		Если ТоварСоответствуетНоменклатуреХарактеристике(СтрокаНоменклатурыКэша, СтрокаТовара) Тогда
			ДобавитьСтрокиКонтроляПродажВКоллекцию(КэшКонтроляПродаж, СтрокаНоменклатурыКэша.МассивКонтролейПродаж,
				РезультатФункции);
		КонецЕсли;
	КонецЦикла;
	
	Возврат РезультатФункции;
	
КонецФункции

Функция ТоварСоответствуетНоменклатуреХарактеристике(СтрокаНоменклатурыКэша, СтрокаТовара)
	
	Возврат (СтрокаНоменклатурыКэша.Номенклатура = СтрокаТовара.Номенклатура
		И (СтрокаНоменклатурыКэша.Характеристика = СтрокаТовара.Характеристика
			Или Не ЗначениеЗаполнено(СтрокаНоменклатурыКэша.Характеристика)));
	
КонецФункции

Процедура ДобавитьСтрокиКонтроляПродажВКоллекцию(КэшКонтроляПродаж, МассивКонтролейПродаж, СтрокиЭлементовКонтроля)
	
	Для Каждого ЭлементКонтроля Из МассивКонтролейПродаж Цикл
		СтрокаЭлементаКонтроляПродаж = ПолучитьСтрокуЭлементаКонтроляПродаж(КэшКонтроляПродаж, ЭлементКонтроля);
		Если Не СтрокаЭлементаКонтроляПродаж = Неопределено Тогда
			СтрокиЭлементовКонтроля.Добавить(СтрокаЭлементаКонтроляПродаж);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция ПолучитьСтрокуЭлементаКонтроляПродаж(КэшКонтроляПродаж, ЭлементКонтроля)
	
	ЭлементыКонтроляПродаж = КэшКонтроляПродаж.ЭлементыКонтроляПродаж;
	КоличествоЭлементов = ЭлементыКонтроляПродаж.Количество();
	РезультатФункции = Неопределено;
	ИндексЭлемента = 0;
	Пока ИндексЭлемента < КоличествоЭлементов И РезультатФункции = Неопределено Цикл
		СтрокаЭлемента = ЭлементыКонтроляПродаж.Получить(ИндексЭлемента);
		Если СтрокаЭлемента.КонтрольПродаж = ЭлементКонтроля Тогда
			РезультатФункции = СтрокаЭлемента;
		КонецЕсли;
		ИндексЭлемента = ИндексЭлемента + 1;
	КонецЦикла;
	Возврат РезультатФункции;
	
КонецФункции

Функция ОтобратьВидыКонтроляПоТипам(ДанныеКонтроляПродаж, ИспользуемыеТипыКонтроля)
	
	РезультатФункции = Новый Структура;
	МассивВидовКонтроля = Новый Массив;
	СоответствиеСтрокВидовКонтроля = Новый Соответствие;
	
	Для Каждого СтрокаВидаКонтроля Из ДанныеКонтроляПродаж.СтрокиВидовКонтроля Цикл
		Если Не ИспользуемыеТипыКонтроля.Найти(СтрокаВидаКонтроля.ТипКонтроля) = Неопределено Тогда
			МассивВидовКонтроля.Добавить(СтрокаВидаКонтроля.ВидКонтроля);
			СоответствиеСтрокВидовКонтроля.Вставить(СтрокаВидаКонтроля.ВидКонтроля, СтрокаВидаКонтроля);
		КонецЕсли;
	КонецЦикла;
	
	РезультатФункции.Вставить("МассивВидовКонтроля", МассивВидовКонтроля);
	РезультатФункции.Вставить("СоответствиеСтрокВидовКонтроля", СоответствиеСтрокВидовКонтроля);
	
	Возврат РезультатФункции;
	
КонецФункции

Функция ПолучитьТипыКонтроляЭтапа(ЭтапКонтроля)
	
	// Порядок добавления типов контролей не менять. Проверки выполняются в соотвествии с указанным тут порядком.
	РезультатФункции = Новый Массив;
	ЭтапыКонтроляПродаж = ЭтапыКонтроляПродаж();
	Если ЭтапКонтроля = ЭтапыКонтроляПродаж.ДобавлениеТовара Или ЭтапКонтроля = ЭтапыКонтроляПродаж.ОткрытиеЧека Тогда
		РезультатФункции.Добавить(ПредопределенноеЗначение("Перечисление.ТипыКонтроля.КонтрольОстатков"));
		РезультатФункции.Добавить(ПредопределенноеЗначение("Перечисление.ТипыКонтроля.ЗапретВидаОплаты"));
		РезультатФункции.Добавить(ПредопределенноеЗначение("Перечисление.ТипыКонтроля.ЗапретРучнойСкидки"));
	КонецЕсли;
	Если ЭтапКонтроля = ЭтапыКонтроляПродаж.ДобавлениеТовара Тогда
		РезультатФункции.Добавить(ПредопределенноеЗначение("Перечисление.ТипыКонтроля.КонтрольСотрудникомНаКСО"));
	КонецЕсли;
	Если Не ЭтапКонтроля = ЭтапыКонтроляПродаж.ОткрытиеЧека Тогда
		РезультатФункции.Добавить(ПредопределенноеЗначение("Перечисление.ТипыКонтроля.ЗапретПодбора"));
		РезультатФункции.Добавить(ПредопределенноеЗначение("Перечисление.ТипыКонтроля.ПроверкаПокупателя"));
	КонецЕсли;
	
	Возврат РезультатФункции;
	
КонецФункции

Функция ПолучитьПостоянныеЭлементыКонтроляПродаж(КэшКонтроляПродаж)
	
	ПостоянныеЭлементыКонтроляПродаж = Новый Массив;
	Для Каждого СтрокаНоменклатуры Из КэшКонтроляПродаж.НоменклатураПлиткиКонтроляПродаж Цикл
		Для Каждого КонтрольПродаж Из СтрокаНоменклатуры.МассивКонтролейПродаж Цикл
			Если ПостоянныеЭлементыКонтроляПродаж.Найти(КонтрольПродаж) = Неопределено Тогда
				ПостоянныеЭлементыКонтроляПродаж.Добавить(КонтрольПродаж);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	Для Каждого КонтрольПродаж Из КэшКонтроляПродаж.ОбщийКонтрольПродаж Цикл
		Если ПостоянныеЭлементыКонтроляПродаж.Найти(КонтрольПродаж) = Неопределено Тогда
			ПостоянныеЭлементыКонтроляПродаж.Добавить(КонтрольПродаж);
		КонецЕсли;
	КонецЦикла;
	Возврат ПостоянныеЭлементыКонтроляПродаж;
	
КонецФункции

Функция ПолучитьПостоянныеВидыКонтроля(КэшКонтроляПродаж, ПостоянныеЭлементыКонтроляПродаж)
	
	ПостоянныеВидыКонтроля = Новый Массив;
	Для Каждого КонтрольПродаж Из ПостоянныеЭлементыКонтроляПродаж Цикл
		СтрокаЭлементаКонтроля = ПолучитьСтрокуЭлементаКонтроляИзКэша(КэшКонтроляПродаж, КонтрольПродаж);
		Если Не СтрокаЭлементаКонтроля = Неопределено Тогда
			Для Каждого СтрокаКонтроля Из СтрокаЭлементаКонтроля.СтрокиКонтроля Цикл
				Если ПостоянныеВидыКонтроля.Найти(СтрокаКонтроля.ВидКонтроля) = Неопределено Тогда
					ПостоянныеВидыКонтроля.Добавить(СтрокаКонтроля.ВидКонтроля);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	Возврат ПостоянныеВидыКонтроля;
	
КонецФункции

Функция ПолучитьСтрокуЭлементаКонтроляИзКэша(КэшКонтроляПродаж, КонтрольПродаж)

	Результатфункции = Неопределено;
	
	КоличествоСтрок = КэшКонтроляПродаж.ЭлементыКонтроляПродаж.Количество();
	ИндексСтроки = 0;
	Пока ИндексСтроки < КоличествоСтрок И Результатфункции = Неопределено Цикл
		СтрокаЭлемента = КэшКонтроляПродаж.ЭлементыКонтроляПродаж.Получить(ИндексСтроки);
		Если СтрокаЭлемента.КонтрольПродаж = КонтрольПродаж Тогда
			Результатфункции = СтрокаЭлемента;
		КонецЕсли;
		ИндексСтроки = ИндексСтроки + 1;
	КонецЦикла;
	
	Возврат Результатфункции;
	
КонецФункции

Процедура РасширитьИнтервалМеждуВидамиОплатПриНеобходимости(Форма)
	
	Если Форма.РежимКассыСамообслуживания Тогда
		Элементы = Форма.Элементы;
		ПределДляРасширения = 4;
		КоличествоВключенныхГрупп = Форма.ИспользуемыеВидыОплат.Количество() + ?(Форма.ИспользоватьОплатуБонусами, 1, 0);
		Если КоличествоВключенныхГрупп <= ПределДляРасширения Тогда
			Элементы.ГруппаВидовОплат.ВертикальныйИнтервал = ИнтервалМеждуЭлементамиФормы.Двойной;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Функция ИмяГруппыВидаОплатБонусами()
	
	Возврат "ГруппаВидОплатыБонусы";
	
КонецФункции

Функция ЭтоГруппаВидаОплаты(ГруппаВидаОплаты)
	
	НачалоИмениГруппы = ОбщаяЧастьИмениГруппВидовОплат();
	Возврат (ТипЗнч(ГруппаВидаОплаты) = Тип("ГруппаФормы") И СтрНайти(ГруппаВидаОплаты.Имя, НачалоИмениГруппы) = 1
		И Не ГруппаВидаОплаты.Имя = ИмяГруппыВидаОплатБонусами());
	
КонецФункции

Функция ПолучитьЭлементМассиваПоИндексу(ИсходныйМассив, ИндексЭлемента)
	
	СтрокаЭлемента = Неопределено;
	
	Если ИсходныйМассив.Количество() > ИндексЭлемента Тогда
		СтрокаЭлемента = ИсходныйМассив[ИндексЭлемента];
	КонецЕсли;
	
	Возврат СтрокаЭлемента;
	
КонецФункции

Функция ШаблонЭлементаПлитки()
	
	ШаблонЭлемента = Новый Структура;
	ШаблонЭлемента.Вставить("ПорядковыйНомер", -1);
	ШаблонЭлемента.Вставить("ИндексИзОпорныхДанных", -1);
	ШаблонЭлемента.Вставить("НомерКатегории", -1);
	ШаблонЭлемента.Вставить("ИндексПозицииВКатегории", -1);
	ШаблонЭлемента.Вставить("НомерКатегорииРазмещенияЭлемента", -1);
	ШаблонЭлемента.Вставить("ПервыйИндексПлитки", 0);
	ШаблонЭлемента.Вставить("Наименование", "");
	ШаблонЭлемента.Вставить("ИмяДействия", "");
	
	Возврат ШаблонЭлемента;
	
КонецФункции

Функция ОжидаетсяЗаполнениеВесовогоТовара(Форма)
	
	Возврат (ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, "ЕстьВесовойТовар")
		И Не Форма.ЕстьВесовойТовар);
	
КонецФункции

Процедура ПодготовитьДанныеДляПлиткиПоПалитре(Форма)
	
	ОпорныеДанные = Форма.ОпорныеДанные;
	ИсточникиДанныхПлитки = ИнтерфейсРМКСлужебныйКлиентСервер.ИсточникиДанныхДляПлитки();
	ИсточникПалитра = ИсточникиДанныхПлитки.Палитра;
	ИсточникВесовойТовар = ИсточникиДанныхПлитки.ВесовойТовар;
	ПорядковыйНомер = 0;
	Для Каждого СтрокаОпорныхДанных Из ОпорныеДанные Цикл
		
		УчетВесовогоТовара = (СтрокаОпорныхДанных.ИсточникПлитки = ИсточникПалитра
			Или СтрокаОпорныхДанных.ИсточникПлитки = ИсточникВесовойТовар);
		Если УчетВесовогоТовара И СтрокаОпорныхДанных.Весовой И ОжидаетсяЗаполнениеВесовогоТовара(Форма) Тогда
			Форма.ЕстьВесовойТовар = Истина;
		КонецЕсли;
		
		Если СтрокаОпорныхДанных.ИсточникПлитки = ИсточникПалитра Тогда
			
			НовыйЭлемент = ШаблонЭлементаПлитки();
			ЗаполнитьЗначенияСвойств(НовыйЭлемент, СтрокаОпорныхДанных, , "ИмяДействия");
			НовыйЭлемент.ИндексИзОпорныхДанных = ОпорныеДанные.Индекс(СтрокаОпорныхДанных);
			НовыйЭлемент.ПорядковыйНомер = ПорядковыйНомер;
			Форма.ДанныеДляПлитки.Добавить(НовыйЭлемент);
			
			ПорядковыйНомер = ПорядковыйНомер + 1;
			
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ПодготовитьДанныеВесовыхТоваровДляПлитки(Форма, ДанныеСлужебныхЭлементов = Неопределено)
	
	ОпорныеДанные = Форма.ОпорныеДанные;
	ДанныеДляПлитки = Форма.ДанныеДляПлитки;

	КоличествоСлужебныхЭлементов = 0;
	ЕстьПеремещениеВСлужебнуюГруппу = Ложь;
	Если Не ДанныеСлужебныхЭлементов = Неопределено Тогда
		КоличествоСлужебныхЭлементов = ДанныеСлужебныхЭлементов.КоличествоСлужебныхЭлементов;
		ЕстьПеремещениеВСлужебнуюГруппу = ДанныеСлужебныхЭлементов.ЕстьПеремещениеВСлужебнуюГруппу;
	КонецЕсли;
	
	ПеренесенныеГруппы = Новый Массив;
	РасчетныеПараметры = Новый Структура();
	РасчетныеПараметры.Вставить("ПеренесенныеГруппы", ПеренесенныеГруппы);
	РасчетныеПараметры.Вставить("КоличествоСлужебныхЭлементов", КоличествоСлужебныхЭлементов);
	РасчетныеПараметры.Вставить("ЕстьПеремещениеВСлужебнуюГруппу", ЕстьПеремещениеВСлужебнуюГруппу);
	РасчетныеПараметры.Вставить("ИсходноеКоличество", ОпорныеДанные.Количество());
	
	ИндексОбхода = 0;
	Пока ИндексОбхода < РасчетныеПараметры.ИсходноеКоличество Цикл
		ИндексЭлемента = РасчетныеПараметры.ИсходноеКоличество - ИндексОбхода - 1;
		СтрокаОпорныхДанных = ОпорныеДанные.Получить(ИндексЭлемента);
		Если СтрокаОпорныхДанных.Весовой Тогда
			
			ПеренестиЭлементВДанныеДляПлитки(ДанныеДляПлитки, ОпорныеДанные, СтрокаОпорныхДанных, РасчетныеПараметры);
			ДобавитьГруппуПлиткиПриНеобходимости(ДанныеДляПлитки, СтрокаОпорныхДанных,
				ОпорныеДанные, ИндексЭлемента, РасчетныеПараметры);
			
		КонецЕсли;
		ИндексОбхода = ИндексОбхода + 1;
	КонецЦикла;
	КолонкиСравнения = СтрРазделить("НомерКатегорииРазмещенияЭлемента,ИндексПозицииВКатегории", ",");
	ОтсортироватьМассивСтруктурВДиапазоне(ДанныеДляПлитки, КолонкиСравнения, 0, ДанныеДляПлитки.Количество() - 1);
	
	ПервыеИндексыВКатегориях = Новый Соответствие;
	ХранилищеГрупп = Новый Соответствие;
	ПорядковыйНомер = 0;
	СчетчикПозицииВКатегории = 1;
	СмещениеКатегории = ?(ЕстьПеремещениеВСлужебнуюГруппу, 1, 0);
	ПредыдущийНомерКатегорииРазмещения = СмещениеКатегории;
	Для Каждого ОписаниеДляПлитки Из ДанныеДляПлитки Цикл
		Если ОписаниеДляПлитки.НомерКатегории > 0 Тогда
			НовыйНомерКатегории = РасчетныеПараметры.ПеренесенныеГруппы.Найти(ОписаниеДляПлитки.НомерКатегории);
			Если Не НовыйНомерКатегории = Неопределено Тогда
				ОписаниеДляПлитки.НомерКатегории = НовыйНомерКатегории + 1 + СмещениеКатегории;
			КонецЕсли;
			ХранилищеГрупп.Вставить(ОписаниеДляПлитки.НомерКатегории, ОписаниеДляПлитки);
		КонецЕсли;
		Если ОписаниеДляПлитки.НомерКатегорииРазмещенияЭлемента > 0 Тогда
			НовыйНомер = РасчетныеПараметры.ПеренесенныеГруппы.Найти(ОписаниеДляПлитки.НомерКатегорииРазмещенияЭлемента);
			Если Не НовыйНомер = Неопределено Тогда
				ОписаниеДляПлитки.НомерКатегорииРазмещенияЭлемента = НовыйНомер + 1 + СмещениеКатегории;
			КонецЕсли;
		ИначеЕсли СмещениеКатегории > 0 Тогда
			ОписаниеДляПлитки.НомерКатегорииРазмещенияЭлемента = СмещениеКатегории;
		КонецЕсли;
		Если ПредыдущийНомерКатегорииРазмещения <> ОписаниеДляПлитки.НомерКатегорииРазмещенияЭлемента Тогда
			СчетчикПозицииВКатегории = 1;
			ПервыеИндексыВКатегориях.Вставить(ОписаниеДляПлитки.НомерКатегорииРазмещенияЭлемента, ПорядковыйНомер);
			Если ОписаниеДляПлитки.НомерКатегорииРазмещенияЭлемента > 0 Тогда
				СтрокаРодителя = ХранилищеГрупп.Получить(ОписаниеДляПлитки.НомерКатегорииРазмещенияЭлемента);
				Если Не СтрокаРодителя = Неопределено Тогда
					СтрокаРодителя.ПервыйИндексПлитки = ПорядковыйНомер + КоличествоСлужебныхЭлементов + (2 * СмещениеКатегории);
					ЗначениеПервогоИндекса = ПервыеИндексыВКатегориях.Получить(СтрокаРодителя.НомерКатегорииРазмещенияЭлемента);
					Если ЗначениеПервогоИндекса = Неопределено Тогда
						ЗначениеПервогоИндекса = 0;
					КонецЕсли;
					Если СтрокаРодителя.НомерКатегорииРазмещенияЭлемента = 1 И ЕстьПеремещениеВСлужебнуюГруппу Тогда
						ОписаниеДляПлитки.ПервыйИндексПлитки = ЗначениеПервогоИндекса + КоличествоСлужебныхЭлементов + СмещениеКатегории;
					Иначе
						ОписаниеДляПлитки.ПервыйИндексПлитки
							= ЗначениеПервогоИндекса + КоличествоСлужебныхЭлементов + (2 * СмещениеКатегории);
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			ПредыдущийНомерКатегорииРазмещения = ОписаниеДляПлитки.НомерКатегорииРазмещенияЭлемента;
		КонецЕсли;
		
		ОписаниеДляПлитки.ИндексПозицииВКатегории = СчетчикПозицииВКатегории;
		Если ОписаниеДляПлитки.НомерКатегорииРазмещенияЭлемента = 1 И ЕстьПеремещениеВСлужебнуюГруппу Тогда
			ОписаниеДляПлитки.ИндексПозицииВКатегории = ОписаниеДляПлитки.ИндексПозицииВКатегории + 1;
		КонецЕсли;
		ОписаниеДляПлитки.ПорядковыйНомер = ПорядковыйНомер + КоличествоСлужебныхЭлементов + (2 * СмещениеКатегории);
		
		СчетчикПозицииВКатегории = СчетчикПозицииВКатегории + 1;
		ПорядковыйНомер = ПорядковыйНомер + 1;
	КонецЦикла;
	
КонецПроцедуры

Процедура ПодготовитьДанныеРаспознанныхТоваровДляПлитки(Форма, ТоварыКВыбору)
	
	ОпорныеДанные = Форма.ОпорныеДанные;
	ДанныеДляПлитки = Форма.ДанныеДляПлитки;
	ПорядковыйНомер = 0;
	ДанныеСлужебныхЭлементов = Новый Структура();
	
	СтрокиВерхнегоУровняИзОпорныхДанных = ПодготовитьСтрокиОпорныхДанныхПоРаспознаннымТоварам(ОпорныеДанные,
		ТоварыКВыбору);
	
	ИмяПапки = ИнтерфейсРМКСлужебныйКлиентСервер.ИмяГруппыДругихВесовыхТоваров();
	ИсточникиДанныхПлитки = ИнтерфейсРМКСлужебныйКлиентСервер.ИсточникиДанныхДляПлитки();
	СтрокаПапки = Неопределено;
	СтрокаОбратнойПапки = Неопределено;
	ОтборСтрокСлужебныхПапок = Новый Структура("ИмяЭлемента,ИсточникПлитки",
		ИмяПапки, ИсточникиДанныхПлитки.СлужебныеГруппы);
	СтрокиПапокОпорныхДанных = ОпорныеДанные.НайтиСтроки(ОтборСтрокСлужебныхПапок);
	Для Каждого СтрокаПапкиОпорныхДанных Из СтрокиПапокОпорныхДанных Цикл
		Если СтрокаПапкиОпорныхДанных.ЭтоТекущаяКатегория Тогда
			СтрокаОбратнойПапки = СтрокаПапкиОпорныхДанных;
		Иначе
			СтрокаПапки = СтрокаПапкиОпорныхДанных;
		КонецЕсли;
	КонецЦикла;
	
	ДанныеСлужебныхЭлементов.Вставить("КоличествоСлужебныхЭлементов",
		СтрокиВерхнегоУровняИзОпорныхДанных.Количество());
	ДанныеСлужебныхЭлементов.Вставить("ЕстьПеремещениеВСлужебнуюГруппу", Истина);
	ПодготовитьДанныеВесовыхТоваровДляПлитки(Форма, ДанныеСлужебныхЭлементов);
	
	Для Каждого СтрокаТовара Из СтрокиВерхнегоУровняИзОпорныхДанных Цикл
		
		НовыйЭлемент = ШаблонЭлементаПлитки();
		ЗаполнитьЗначенияСвойств(НовыйЭлемент, СтрокаТовара);
		НовыйЭлемент.ИндексИзОпорныхДанных = ОпорныеДанные.Индекс(СтрокаТовара);
		НовыйЭлемент.ПорядковыйНомер = ПорядковыйНомер;
		НовыйЭлемент.НомерКатегории = 0;
		НовыйЭлемент.ИндексПозицииВКатегории = ПорядковыйНомер + 1;
		НовыйЭлемент.НомерКатегорииРазмещенияЭлемента = 0;
		НовыйЭлемент.ПервыйИндексПлитки = 0;
		ДанныеДляПлитки.Вставить(ПорядковыйНомер, НовыйЭлемент);
		
		ПорядковыйНомер = ПорядковыйНомер + 1;
		
	КонецЦикла;
	ДобавитьСлужебныеГруппыВДанныеДляПлитки(Форма, СтрокаПапки, СтрокаОбратнойПапки, ПорядковыйНомер);
	
КонецПроцедуры

Процедура ДобавитьСлужебныеГруппыВДанныеДляПлитки(Форма,
		СтрокаПапки,
		СтрокаОбратнойПапки,
		ПорядковыйНомер)
		
	ОпорныеДанные = Форма.ОпорныеДанные;
	ДанныеДляПлитки = Форма.ДанныеДляПлитки;

	// Служебная папка
	НовыйЭлемент = ШаблонЭлементаПлитки();
	ЗаполнитьЗначенияСвойств(НовыйЭлемент, СтрокаПапки);
	НовыйЭлемент.ИндексИзОпорныхДанных = ОпорныеДанные.Индекс(СтрокаПапки);
	НовыйЭлемент.ПорядковыйНомер = ПорядковыйНомер;
	НовыйЭлемент.НомерКатегории = 1;
	НовыйЭлемент.ИндексПозицииВКатегории = ПорядковыйНомер + 1;
	НовыйЭлемент.НомерКатегорииРазмещенияЭлемента = 0;
	НовыйЭлемент.ПервыйИндексПлитки = ПорядковыйНомер + 1;
	ДанныеДляПлитки.Вставить(ПорядковыйНомер ,НовыйЭлемент);
	
	// Возврат из служебной папки
	НовыйЭлемент = ШаблонЭлементаПлитки();
	ЗаполнитьЗначенияСвойств(НовыйЭлемент, СтрокаОбратнойПапки);
	НовыйЭлемент.ИндексИзОпорныхДанных = ОпорныеДанные.Индекс(СтрокаОбратнойПапки);
	НовыйЭлемент.ПорядковыйНомер = ПорядковыйНомер + 1;
	НовыйЭлемент.НомерКатегории = 0;
	НовыйЭлемент.ИндексПозицииВКатегории = 1;
	НовыйЭлемент.НомерКатегорииРазмещенияЭлемента = 1;
	НовыйЭлемент.ПервыйИндексПлитки = 0;
	ДанныеДляПлитки.Вставить(ПорядковыйНомер + 1, НовыйЭлемент);
	
КонецПроцедуры

Функция ПодготовитьСтрокиОпорныхДанныхПоРаспознаннымТоварам(ОпорныеДанные, ТоварыКВыбору)
	
	РезультатФункции = Новый Массив;
	
	Для Каждого ДанныеТовара Из ТоварыКВыбору Цикл
		
		ОтборСтрокиОпорныхДанных = Новый Структура();
		ОтборСтрокиОпорныхДанных.Вставить("Номенклатура", ДанныеТовара.Номенклатура);
		ОтборСтрокиОпорныхДанных.Вставить("Характеристика", ДанныеТовара.Характеристика);
		ОтборСтрокиОпорныхДанных.Вставить("Весовой", Истина);
		СтрокиОпорныхДанных = ОпорныеДанные.НайтиСтроки(ОтборСтрокиОпорныхДанных);
		Если СтрокиОпорныхДанных.Количество() > 0 Тогда
			РезультатФункции.Добавить(СтрокиОпорныхДанных[0]);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат РезультатФункции;
	
КонецФункции

Процедура ДобавитьГруппуПлиткиПриНеобходимости(ДанныеДляПлитки, СтрокаОпорныхДанных,
		ОпорныеДанные, ИндексЭлемента, РасчетныеПараметры)

	НомерКатегорииРодителя = СтрокаОпорныхДанных.НомерКатегорииРазмещенияЭлемента;
	Если НомерКатегорииРодителя > 0
			И РасчетныеПараметры.ПеренесенныеГруппы.Найти(НомерКатегорииРодителя) = Неопределено Тогда
			
		ДанныеРодителя = ПолучитьДанныеРодителяЭлемента(ОпорныеДанные, НомерКатегорииРодителя, ИндексЭлемента);
		Если Не ДанныеРодителя.СтрокаРодителя = Неопределено Тогда
			
			СтрокаРодителя = ДанныеРодителя.СтрокаРодителя;
			ПеренестиЭлементВДанныеДляПлитки(ДанныеДляПлитки, ОпорныеДанные, СтрокаРодителя, РасчетныеПараметры);
			ПеренестиЭлементВДанныеДляПлитки(ДанныеДляПлитки, ОпорныеДанные, ДанныеРодителя.СтрокаВозврата, РасчетныеПараметры);
			ВставитьНомерВМассивВПорядкеВозрастания(РасчетныеПараметры.ПеренесенныеГруппы, НомерКатегорииРодителя);
			ДобавитьГруппуПлиткиПриНеобходимости(ДанныеДляПлитки, СтрокаРодителя,
				ОпорныеДанные, ДанныеРодителя.ИндексРодителя, РасчетныеПараметры);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПеренестиЭлементВДанныеДляПлитки(ДанныеДляПлитки, ОпорныеДанные, СтрокаОпорныхДанных, РасчетныеПараметры)
	
	НовыйЭлемент = ШаблонЭлементаПлитки();
	ЗаполнитьЗначенияСвойств(НовыйЭлемент, СтрокаОпорныхДанных, , "ИмяДействия,ПервыйИндексПлитки");
	НовыйЭлемент.ИндексИзОпорныхДанных = ОпорныеДанные.Индекс(СтрокаОпорныхДанных);
	Если НовыйЭлемент.НомерКатегорииРазмещенияЭлемента = 0 И Не РасчетныеПараметры.ЕстьПеремещениеВСлужебнуюГруппу Тогда
		НовыйЭлемент.ИндексПозицииВКатегории
			= СтрокаОпорныхДанных.ИндексПозицииВКатегории + РасчетныеПараметры.КоличествоСлужебныхЭлементов;
	КонецЕсли;
	Если ЗначениеЗаполнено(СтрокаОпорныхДанных.Номенклатура) Тогда
		НовыйЭлемент.НомерКатегории = 0;
	КонецЕсли;
	ДанныеДляПлитки.Вставить(0, НовыйЭлемент);
	
КонецПроцедуры

Функция ПолучитьДанныеРодителяЭлемента(ОпорныеДанные, НомерКатегории, ИндексПодчиненногоЭлемента)
	
	ИндексРодителя = -1;
	СтрокаРодителя = Неопределено;
	СтрокаВозврата = Неопределено;
	
	ИндексОбхода = ИндексПодчиненногоЭлемента - 1;
	Пока ИндексОбхода >= 0 И ИндексРодителя < 0 Цикл
		ПроверяемаяСтрока = ОпорныеДанные.Получить(ИндексОбхода);
		Если ПроверяемаяСтрока.НомерКатегории = НомерКатегории Тогда
			СтрокаРодителя = ПроверяемаяСтрока;
			ИндексРодителя = ИндексОбхода;
		ИначеЕсли ПроверяемаяСтрока.НомерКатегорииРазмещенияЭлемента = НомерКатегории И ПроверяемаяСтрока.НомерКатегории = 0
				И ПроверяемаяСтрока.ЭтоКатегория Тогда
			СтрокаВозврата = ПроверяемаяСтрока;
		КонецЕсли;
		ИндексОбхода = ИндексОбхода - 1;
	КонецЦикла;
	
	РезультатФункции = Новый Структура();
	РезультатФункции.Вставить("СтрокаРодителя", СтрокаРодителя);
	РезультатФункции.Вставить("СтрокаВозврата", СтрокаВозврата);
	РезультатФункции.Вставить("ИндексРодителя", ИндексРодителя);
	Возврат РезультатФункции;
	
КонецФункции

Процедура ВставитьНомерВМассивВПорядкеВозрастания(МассивНомеров, ВставляемыйНомер)
	
	ЭлементДобавлен = Ложь;
	ИндексЭлемента = 0;
	Пока ИндексЭлемента < МассивНомеров.Количество() И Не ЭлементДобавлен Цикл
		ТекущийНомер = МассивНомеров[ИндексЭлемента];
		Если ТекущийНомер > ВставляемыйНомер Тогда
			МассивНомеров.Вставить(ИндексЭлемента, ВставляемыйНомер);
			ЭлементДобавлен = Истина;
		КонецЕсли;
		ИндексЭлемента = ИндексЭлемента + 1;
	КонецЦикла;
	Если Не ЭлементДобавлен Тогда
		МассивНомеров.Добавить(ВставляемыйНомер);
	КонецЕсли;
	
КонецПроцедуры

Процедура ОтсортироватьМассивСтруктурВДиапазоне(СортируемыйМассив, КолонкиСравнения,
		Знач НачальныйИндекс, Знач КонечныйИндекс)

	СреднийИндекс = Цел((НачальныйИндекс + КонечныйИндекс) / 2);
	ИсходныйНачальныйИндекс = НачальныйИндекс;
	Если СреднийИндекс >= 0 И СортируемыйМассив.Количество() > 0 Тогда
		СреднийЭлемент = СортируемыйМассив[СреднийИндекс];
		Пока НачальныйИндекс <= КонечныйИндекс Цикл 
			
			Если НачальныйИндекс = СреднийИндекс Тогда
				НачальныйИндекс = НачальныйИндекс + 1;
			Иначе
				
				ПроверяемыйЭлемент = СортируемыйМассив[НачальныйИндекс];
				Если ПроверяемоеЗначениеБольше(СреднийЭлемент, ПроверяемыйЭлемент, КолонкиСравнения) Тогда
					Если НачальныйИндекс < СреднийИндекс Тогда
						СортируемыйМассив.Удалить(НачальныйИндекс);
						СортируемыйМассив.Вставить(КонечныйИндекс, ПроверяемыйЭлемент);
						СреднийИндекс = СреднийИндекс - 1;
					Иначе
						НачальныйИндекс = НачальныйИндекс + 1;
					КонецЕсли;
				Иначе
					Если НачальныйИндекс > СреднийИндекс Тогда 
					СортируемыйМассив.Удалить(НачальныйИндекс);
					СортируемыйМассив.Вставить(СреднийИндекс, ПроверяемыйЭлемент);
					СреднийИндекс = СреднийИндекс + 1;
					КонецЕсли;
					НачальныйИндекс = НачальныйИндекс + 1;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		Если СреднийИндекс > ИсходныйНачальныйИндекс + 1 Тогда
			ОтсортироватьМассивСтруктурВДиапазоне(СортируемыйМассив, КолонкиСравнения,
				ИсходныйНачальныйИндекс, СреднийИндекс - 1);
		КонецЕсли;
		Если СреднийИндекс + 1 < КонечныйИндекс Тогда
			ОтсортироватьМассивСтруктурВДиапазоне(СортируемыйМассив, КолонкиСравнения,
				СреднийИндекс + 1, КонечныйИндекс);
		КонецЕсли;
	КонецЕсли;
	
	
КонецПроцедуры

Функция ПроверяемоеЗначениеБольше(ИсходноеЗначение, ПроверяемоеЗначение, КолонкиСравнения)
	
	РезультатФункции = Ложь;
	ЭлементыРавны = Истина;
	КоличествоКолонок = КолонкиСравнения.Количество();
	ИндексСравнения = 0;
	Пока ЭлементыРавны И ИндексСравнения < КоличествоКолонок Цикл
		КолонкаСравнения = КолонкиСравнения[ИндексСравнения];
		Если ПроверяемоеЗначение[КолонкаСравнения] > ИсходноеЗначение[КолонкаСравнения] Тогда
			ЭлементыРавны = Ложь;
			РезультатФункции = Истина;
		ИначеЕсли ПроверяемоеЗначение[КолонкаСравнения] < ИсходноеЗначение[КолонкаСравнения] Тогда
			ЭлементыРавны = Ложь;
		КонецЕсли;
		ИндексСравнения = ИндексСравнения + 1;
	КонецЦикла;
	
	Возврат РезультатФункции;
	
КонецФункции

Функция МассивОграниченийЦифрДаты()
	
	МассивОграничений = Новый Массив;
	ДобавитьОграничениеЦифрДаты(МассивОграничений, 0, 3, "");
	ДобавитьОграничениеЦифрДаты(МассивОграничений, 1, 1, "[0] > 2");
	ДобавитьОграничениеЦифрДаты(МассивОграничений, 2, 1, "");
	ДобавитьОграничениеЦифрДаты(МассивОграничений, 3, 2, "[2] > 0");
	
	Возврат МассивОграничений;
	
КонецФункции

Процедура ДобавитьОграничениеЦифрДаты(МассивОграничений, НомерПозиции, МаксимальноеЗначение, ТекстУсловия)
	
	ОписаниеОграничения = Новый Структура;
	ОписаниеОграничения.Вставить("НомерПозиции", НомерПозиции);
	ОписаниеОграничения.Вставить("МаксимальноеЗначение", МаксимальноеЗначение);
	ОписаниеОграничения.Вставить("ТекстУсловия", ТекстУсловия);
	МассивОграничений.Добавить(ОписаниеОграничения);
	
КонецПроцедуры

Функция СодержимоеОбластиСпискаТоваров(ДанныеБлока)
	Возврат СтрШаблон("<div id = ""goodsList"">%1</div>", ДанныеБлока.ЗаголовокОбласти);
КонецФункции

Функция СодержимоеОбластиГлавнойКоманды(ДанныеБлока)
	Возврат СтрШаблон("<div class = ""ordinaryLabel""><b>%1</b></div>", ДанныеБлока.ЗаголовокОбласти);
КонецФункции

Функция СодержимоеТиповойОбласти(ДанныеБлока)
	Возврат СтрШаблон("<div class = ""ordinaryLabel"">%1</div>", ДанныеБлока.ЗаголовокОбласти);
КонецФункции

Функция СодержимоеОбластиПлитки()
	
	СтрокаПлитки = "<tr class = ""plateTr"">
		|	<td class = ""plateTd""></td>
		|	<td class = ""plateTd""></td>
		|	<td class = ""plateTd""></td>
		|	<td class = ""plateTd""></td>
		|</tr>";
	
	Возврат СтрШаблон("<table class = ""plateTable"">%1%2%3%4</table>",
		СтрокаПлитки, СтрокаПлитки, СтрокаПлитки, СтрокаПлитки);
	
КонецФункции

#КонецОбласти