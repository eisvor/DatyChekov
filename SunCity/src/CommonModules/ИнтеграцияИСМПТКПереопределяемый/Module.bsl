
#Область ПодключаемоеОборудование

// Настраивает подключаемое оборудование в форме,
// устанавливает флаг ИспользоватьПодключаемоеОборудование в форме.
//
// Параметры:
//  Форма - УправляемаяФорма - форма, в которой необходимо настроить подключаемое оборудование,
//  ПрефиксыЭлементовФормы - Строка - строка имен табличных частей, разделенных запятыми, в которых нужно настроить видимость команд.
//
Процедура НастроитьПодключаемоеОборудование(Форма, ПрефиксыЭлементовФормы = "Товары") Экспорт
	
	НастроитьПодключаемоеОборудованиеДополнительно(Форма, ПрефиксыЭлементовФормы);
	
	Если ЗначениеЗаполнено(ПрефиксыЭлементовФормы) Тогда
		МассивПрефиксыЭлементовФормы = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ПрефиксыЭлементовФормы, ",");
	Иначе
		МассивПрефиксыЭлементовФормы = Новый Массив;
		МассивПрефиксыЭлементовФормы.Добавить(ПрефиксыЭлементовФормы);
	КонецЕсли;

	Возврат;
	
КонецПроцедуры

// Настраивает подключаемое оборудование в форме,
// устанавливает флаг ИспользоватьПодключаемоеОборудование в форме
// Параметры:
//   Форма - Форма, в которой необходимо настроить подключаемое оборудование.
//
Процедура НастроитьПодключаемоеОборудованиеДополнительно(Форма, ПрефиксыЭлементовФормы = "Товары") Экспорт
	
	ТипыПодключенногоОборудования = МенеджерОборудованияСерверПовтИсп.ТипыПодключенногоОборудования();
	
	Форма.ИспользоватьПодключаемоеОборудование = ОбщегоНазначенияИСМПТКПереопределяемый.ИспользоватьПодключаемоеОборудование()
											И ТипыПодключенногоОборудования <> Неопределено
											И ТипыПодключенногоОборудования.Количество() > 0;
	
	ЕстьТСД  = ТипыПодключенногоОборудования <> Неопределено
		И ТипыПодключенногоОборудования.Найти(Перечисления.ТипыПодключаемогоОборудования.ТерминалСбораДанных) <> Неопределено;
		
	Если ЗначениеЗаполнено(ПрефиксыЭлементовФормы) Тогда
		МассивПрефиксыЭлементовФормы = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ПрефиксыЭлементовФормы, ",");
	Иначе
		МассивПрефиксыЭлементовФормы = Новый Массив;
		МассивПрефиксыЭлементовФормы.Добавить(ПрефиксыЭлементовФормы);
	КонецЕсли;
	
	Для Каждого Префикс Из МассивПрефиксыЭлементовФормы Цикл
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Форма.Элементы,
			Префикс + "ЗагрузитьДанныеИзТСД",
			"Видимость",
			Форма.ИспользоватьПодключаемоеОборудование И ЕстьТСД);
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Форма.Элементы,
			Префикс + "ВыгрузитьДанныеВТСД",
			"Видимость",
			Форма.ИспользоватьПодключаемоеОборудование И ЕстьТСД);
				
	КонецЦикла;
	
КонецПроцедуры

Функция ПодключитьВнешнююКомпонентуПечатиШтрихкода() Экспорт
	
	ПодключениеВыполнено = ПодключитьВнешнююКомпоненту("Обработка.ПечатьКодовМаркировкиИСМПТК.Макет.КомпонентаПечатиШтрихкодовИСМПТК", "КартинкаШтрихкодаИСМПТ", ТипВнешнейКомпоненты.Native);
		
	// Создадим объект внешней компоненты.
	Если ПодключениеВыполнено Тогда
		ВнешняяКомпонента = Новый("AddIn.КартинкаШтрихкодаИСМПТ.Barcode");
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
	// Если нет возможности рисовать.
	Если НЕ ВнешняяКомпонента.ГрафикаУстановлена Тогда
		// То картинку сформировать не сможем.
		Возврат Неопределено;
	Иначе
		// Установим основные параметры компоненты.
		// Если в системе установлен шрифт Tahoma.
		Если ВнешняяКомпонента.НайтиШрифт("Tahoma") Тогда
			// Выбираем его как шрифт для формирования картинки.
			ВнешняяКомпонента.Шрифт = "Tahoma";
		Иначе
			// Шрифт Tahoma в системе отсутствует.
			// Обойдем все доступные компоненте шрифты.
			Для Сч = 0 По ВнешняяКомпонента.КоличествоШрифтов -1 Цикл
				// Получим очередной шрифт, доступный компоненте.
				ТекущийШрифт = ВнешняяКомпонента.ШрифтПоИндексу(Сч);
				// Если шрифт доступен
				Если ТекущийШрифт <> Неопределено Тогда
					// Он и будет шрифтом для формирования штрихкода.
					ВнешняяКомпонента.Шрифт = ТекущийШрифт;
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		// Установим размер шрифта
		ВнешняяКомпонента.РазмерШрифта = 12;
		
		Возврат ВнешняяКомпонента;
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область ОбработкаТаблиц

// Пересчитывает количество товара (в единицах хранения) в текущей строке табличной части документа.
//
// Параметры:
//	ТекущаяСтрока - Структура - структура со свойствами строки документа.
//	СтруктураДействий - Структура - структура с действиями, которые нужно произвести.
//	КэшированныеЗначения - Структура - кэшированные значения.
//
Процедура ПересчитатьКоличествоЕдиницВСтрокеТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения) Экспорт 

	Перем УпаковкаНоменклатура;
		
КонецПроцедуры

Функция ПараметрыЗаполненияТабличнойЧасти() Экспорт

	ПараметрыЗаполнения = Новый Структура;
	ПараметрыЗаполнения.Вставить("ОбработатьУпаковки",                 Истина);
	ПараметрыЗаполнения.Вставить("ПересчитатьКоличествоЕдиниц",        Ложь);
	ПараметрыЗаполнения.Вставить("ПересчитатьКоличествоУпаковок",      Ложь);
	ПараметрыЗаполнения.Вставить("ПересчитатьСумму",                   Ложь);
	ПараметрыЗаполнения.Вставить("ПересчитатьЦенуПоСумме",             Ложь);
	ПараметрыЗаполнения.Вставить("ПроверитьСериюРассчитатьСтатус",     Ложь);
	ПараметрыЗаполнения.Вставить("ШтрихкодыВТЧ",                       Ложь);
	ПараметрыЗаполнения.Вставить("МаркируемаяПродукцияВТЧ",            Ложь);

	ПараметрыЗаполнения.Вставить("ЗаполнитьАртикул",                   Ложь);
	ПараметрыЗаполнения.Вставить("ЗаполнитьКод",                       Ложь);
	ПараметрыЗаполнения.Вставить("ЗаполнитьЕдиницуИзмерения",          Истина);
	ПараметрыЗаполнения.Вставить("ЗаполнитьТипНоменклатуры",           Истина);
	
	Возврат ПараметрыЗаполнения;
	
КонецФункции

// Заполняет колонку таблицы значений последовательными номерами
//
// Параметры:
//	Таблица - таблица значений, строки которой нужно пронумеровать
//	ИмяКолонкиНомераСтроки - колонка таблицы значений, в которой будут указаны номера строк.
//
Процедура ПронумероватьТаблицуЗначений(Таблица, ИмяКолонкиНомераСтроки) Экспорт

	Если Таблица.Колонки.Найти(ИмяКолонкиНомераСтроки) = Неопределено Тогда
		Таблица.Колонки.Добавить(ИмяКолонкиНомераСтроки, ПолучитьОписаниеТиповЧисла(15, 0));
	КонецЕсли;

	КоличествоСтрок = Таблица.Количество() - 1;
	Для НомерСтроки = 0 По КоличествоСтрок Цикл
		Таблица[НомерСтроки][ИмяКолонкиНомераСтроки] = НомерСтроки;
	КонецЦикла;

КонецПроцедуры

// Возвращает ссылку на новое поле в переданном наборе данных
//
// Параметры:
//  НаборДанных  - НаборДанныхЗапросСхемыКомпоновкиДанных, НаборДанныхОбъектСхемыКомпоновкиДанных - набор данных в
//      котором необходимо создать новое поле
//  Поле         - Строка - имя нового поля схемы компоновки данных
//  ПутьКДанным  - Строка - путь к данным нового поля схемы компоновки данных (необязательное по умолчанию равно "")
//  Заголовок    - Строка - заголовок нового поля схемы компоновки данных (необязательное по умолчанию равно "")
//  ТипЗначения  - ОписаниеТипов - тип данных нового поля схемы компоновки данных (необязательное по умолчанию Неопределено).
//
// Возвращаемое значение:
//  ПолеНабораДанныхСхемыКомпоновкиДанных - описание возвращаемого значения.
//
Функция НовоеПолеНабора(НаборДанных, Поле, ПутьКДанным = "", Заголовок = "", ТипЗначения = Неопределено) Экспорт
	
	Если ПустаяСтрока(ПутьКДанным) Тогда
		ПутьКДанным = Поле;
	КонецЕсли;
	
	Если ПустаяСтрока(Заголовок) Тогда
		Заголовок = Поле;
	КонецЕсли;
	
	НовоеПоле = НаборДанных.Поля.Добавить(Тип("ПолеНабораДанныхСхемыКомпоновкиДанных"));
	НовоеПоле.Поле 		  = Поле;
	НовоеПоле.ПутьКДанным = ПутьКДанным;
	НовоеПоле.Заголовок   = Заголовок;
	Если ТипЗначения <> Неопределено Тогда
		НовоеПоле.ТипЗначения = ТипЗначения;
	КонецЕсли;
	
	Возврат НовоеПоле;
	
КонецФункции

#КонецОбласти

#Область Штрихкодирование

//Возвращает структуру параметров обработки штрихкодов.
//
// Возвращаемое значение:
//  Структура - Параметры обработки штрихкодов.
//
Функция ПараметрыОбработкиШтрихкодов() Экспорт
	
	ПараметрыОбработки = Новый Структура;
	ПараметрыОбработки.Вставить("Штрихкоды",                                      Неопределено);
	ПараметрыОбработки.Вставить("СтруктураДействийСДобавленнымиСтроками",         Неопределено);
	ПараметрыОбработки.Вставить("СтруктураДействийСИзмененнымиСтроками",          Неопределено);
	ПараметрыОбработки.Вставить("СтруктураДействийСоСтрокамиИзУпаковочныхЛистов", Неопределено);
	ПараметрыОбработки.Вставить("ПараметрыУказанияСерий",                		  Неопределено);
	ПараметрыОбработки.Вставить("ДействияСНеизвестнымиШтрихкодами",       		  "ЗарегистрироватьПеренестиВДокумент");
	ПараметрыОбработки.Вставить("ИмяКолонкиКоличество",                 		  "КоличествоУпаковок");
	ПараметрыОбработки.Вставить("ИмяКолонкиУпаковка",                 		      "Упаковка");
	ПараметрыОбработки.Вставить("НеИспользоватьУпаковки",              			  Ложь);
	ПараметрыОбработки.Вставить("ИмяТЧ",                                		  "Товары");
	ПараметрыОбработки.Вставить("ИзменятьКоличество",                   		  Истина);
	ПараметрыОбработки.Вставить("БлокироватьДанныеФормы",             			  Истина);
	ПараметрыОбработки.Вставить("ТолькоТовары",                          		  Ложь);
	ПараметрыОбработки.Вставить("ТолькоТоварыИРабота",                  		  Ложь);
	ПараметрыОбработки.Вставить("ТолькоУслуги",                         		  Ложь);
	ПараметрыОбработки.Вставить("ТолькоТара",                            		  Ложь);
	ПараметрыОбработки.Вставить("ТолькоНеПодакцизныйТовар",              		  Ложь);
	ПараметрыОбработки.Вставить("НеизвестныеШтрихкоды",                 		  Новый Массив);
	ПараметрыОбработки.Вставить("ОтложенныеТовары",                     		  Новый Массив);
	ПараметрыОбработки.Вставить("ПараметрыПроверкиАссортимента",       			  Неопределено);
	ПараметрыОбработки.Вставить("РассчитыватьНаборы",                   		  Ложь);
	ПараметрыОбработки.Вставить("УчитыватьУпаковочныеЛисты",           			  Ложь);
	ПараметрыОбработки.Вставить("ОтработатьИзменениеУпаковочныхЛистов", 		  Ложь);
	ПараметрыОбработки.Вставить("ШтрихкодыВТЧ",                         		  Ложь);
	ПараметрыОбработки.Вставить("МаркируемаяПродукцияВТЧ",              		  Ложь);
	ПараметрыОбработки.Вставить("УвеличиватьКоличествоВСтрокахССериями", 		  Истина);
	ПараметрыОбработки.Вставить("ТекущийУпаковочныйЛист",               		  Неопределено);
	ПараметрыОбработки.Вставить("ЗаполнятьНазначения",                  		  Ложь);
	ПараметрыОбработки.Вставить("ЗагрузкаИзТСД",                        		  Ложь);
	
	//Возвращаемые параметры
	ПараметрыОбработки.Вставить("МассивСтрокССериями",          Новый Массив);
	ПараметрыОбработки.Вставить("МассивСтрокСАкцизнымиМарками", Новый Массив);
	ПараметрыОбработки.Вставить("ТекущаяСтрока",      			Неопределено);
	
	Возврат ПараметрыОбработки;
	
КонецФункции

#КонецОбласти

#Область ПодключениеКСерверу

Функция ПолучитьПрокси(Знач URLИлиПротокол) Экспорт
	
	Возврат ПолучениеФайловИзИнтернетаКлиентСервер.ПолучитьПрокси(URLИлиПротокол);
	
КонецФункции

Функция ПодобратьСсылкуНаУчастникаМаркировкиПоБИН(ИИНБИН) Экспорт
	
	Если ИИНБИН = Неопределено Тогда  //Если с сервера не пришло значение 
		Возврат Неопределено;
	КонецЕсли;
	
	//Ищем контрагента или орагнизацию с таким ИИН/БИН
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	Организации.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.Организации КАК Организации
	|ГДЕ
	|	Организации.ИНН = &ИННБИН
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Контрагенты.Ссылка
	|ИЗ
	|	Справочник.Контрагенты КАК Контрагенты
	|ГДЕ
	|	Контрагенты.ИНН = &ИННБИН";
	
	Запрос.УстановитьПараметр("ИННБИН", ИИНБИН);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Возврат Выборка.Ссылка;
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции

#КонецОбласти

#Область НастройкиВеденияУчета

//Для розничного контура.
//Отображение настроек дополнительного функционала розничного контура маркировки (чеки ККМ)
//
Функция ПроверитьОтражениеРозничногоКонтураНастройки() Экспорт
	
	Возврат Истина;
	
КонецФункции

Функция ПроверитьИспользованиеХарактеристик() Экспорт
	
	Возврат ОбщегоНазначенияИСМПТКПереопределяемый.ПроверитьИспользованиеХарактеристик();
	
КонецФункции

Функция ПроверитьИспользованиеУпаковок() Экспорт
	
	Возврат ПолучитьФункциональнуюОпцию("ИспользоватьУпаковкиНоменклатуры");
	
КонецФункции

Функция ПроверитьВедениеУчетаПоХарактеристикамУНоменклатуры(Номенклатура) Экспорт
	
	Возврат ОбщегоНазначенияИСМПТКПереопределяемый.ПроверитьВедениеУчетаПоХарактеристикамУНоменклатуры(Номенклатура);
	
КонецФункции

Функция ПроверитьВедениеУчетаПоУпаковкамУНоменклатуры(Номенклатура) Экспорт
	
	Возврат Номенклатура.ИспользоватьУпаковки;
	
КонецФункции

#КонецОбласти

#Область РаботаСНоменклатурой

// Заполняет представление строки номенклатуры.
//
// Параметры:
//   Представление  - Строка                                     - представление для заполнения,
//   Номенклатура   - ОпределяемыйТип.Номенклатура               - ссылка на номенклатуру,
//   Характеристика - ОпределяемыйТип.ХарактеристикаНоменклатуры - ссылка на характеристику номенклатуры,
//   Упаковка       - ОпределяемыйТип.Упаковка                   - ссылка на упаковку.
//   Серия          - ОпределяемыйТип.СерияНоменклатуры          - ссылка на серию номенклатуры.
//
Процедура ЗаполнитьПредставлениеНоменклатуры(Представление, Номенклатура, Характеристика, Упаковка, Серия) Экспорт
	
	Если ОбщегоНазначенияИСМПТК.ЕстьРеквизитОбъекта(Номенклатура, "БазоваяЕдиницаИзмерения") Тогда 
		//БК 3.0
		РеквизитыНоменклатуры = ОбщегоНазначенияИСМПТК.ЗначенияРеквизитовОбъекта(Номенклатура, "Наименование, НаименованиеПолное, БазоваяЕдиницаИзмерения", Истина);
	Иначе
		//ЕРП 2.4
		РеквизитыНоменклатуры = ОбщегоНазначенияИСМПТК.ЗначенияРеквизитовОбъекта(Номенклатура, "Наименование, НаименованиеПолное, ЕдиницаИзмерения", Истина);
	КонецЕсли;
	
	Представление = ?(ЗначениеЗаполнено(РеквизитыНоменклатуры.НаименованиеПолное), РеквизитыНоменклатуры.НаименованиеПолное, РеквизитыНоменклатуры.Наименование);
	
КонецПроцедуры

Функция ПолучитьПустуюСсылкуНоменклатура() Экспорт
	
	Возврат ОбщегоНазначенияИСМПТКПереопределяемый.ПолучитьПустуюСсылкуНоменклатура(); 
	
КонецФункции

Функция ПолучитьШаблонДляНоменклатурыЗаказа(Номенклатура) Экспорт
	
	Если Не ЗначениеЗаполнено(Номенклатура) 
		Или Не ТипЗнч(Номенклатура) = Тип("СправочникСсылка.Номенклатура") Тогда
		Возврат ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗИСМПТК.Обувь")
	КонецЕсли;
	
	Если Номенклатура.ОсобенностьУчета = ПредопределенноеЗначение("Перечисление.ОсобенностиУчетаНоменклатуры.ОбувнаяПродукция") Тогда
		Возврат ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗИСМПТК.Обувь");
		
	ИначеЕсли Номенклатура.ОсобенностьУчета = ПредопределенноеЗначение("Перечисление.ОсобенностиУчетаНоменклатуры.МолочнаяПродукцияПодконтрольнаяВЕТИС") Тогда
		Возврат ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗИСМПТК.МолочнаяПродукция");
		
	ИначеЕсли Номенклатура.ОсобенностьУчета = ПредопределенноеЗначение("Перечисление.ОсобенностиУчетаНоменклатуры.ЛекарственныеПрепараты") Тогда
		Возврат ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗИСМПТК.ЛекарственныеПрепараты");
		
	ИначеЕсли Номенклатура.ОсобенностьУчета = ПредопределенноеЗначение("Перечисление.ОсобенностиУчетаНоменклатуры.ЛегкаяПромышленность") Тогда
		Возврат ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗИСМПТК.ЛегкаяПромышленность");
		
	ИначеЕсли Номенклатура.ОсобенностьУчета = ПредопределенноеЗначение("Перечисление.ОсобенностиУчетаНоменклатуры.ТабачнаяПродукция") Тогда
		Возврат ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗИСМПТК.ТабачнаяПачка"); //Значение по умолчанию, потом выбрается пользователем
		
	КонецЕсли;
	
	Возврат ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗИСМПТК.Обувь"); 
	
КонецФункции

// Заполняет в табличной части служебные реквизиты, например: признак использования характеристик номенклатуры, артикул.
//
// Параметры:
//  Форма - УправляемаяФорма - Форма.
//  ТабличнаяЧасть - ДанныеФормыКоллекция - таблица для заполнения.
//
Процедура ЗаполнитьСлужебныеРеквизитыВКоллекции(Форма, ТабличнаяЧасть) Экспорт
	
	ПараметрыЗаполненияРеквизитов = Новый Структура;
	
	КолонкиРеквизитов = ТабличнаяЧасть.Выгрузить(Новый Массив).Колонки;
	
	Если КолонкиРеквизитов.Найти("Артикул")<> Неопределено Тогда
		ПараметрыЗаполненияРеквизитов.Вставить("ЗаполнитьПризнакАртикул",
			Новый Структура("Номенклатура", "Артикул"));
	КонецЕсли;
	
	Если КолонкиРеквизитов.Найти("Код")<> Неопределено Тогда
		ПараметрыЗаполненияРеквизитов.Вставить("ЗаполнитьПризнакКод",
			Новый Структура("Номенклатура", "Код"));
	КонецЕсли;
	
	Если КолонкиРеквизитов.Найти("ХарактеристикиИспользуются")<> Неопределено Тогда
		ПараметрыЗаполненияРеквизитов.Вставить("ЗаполнитьПризнакХарактеристикиИспользуются",
			Новый Структура("Номенклатура", "ХарактеристикиИспользуются"));
	КонецЕсли;
	
	Если КолонкиРеквизитов.Найти("ЕдиницаИзмерения")<> Неопределено Тогда
		ПараметрыЗаполненияРеквизитов.Вставить("ЗаполнитьПризнакЕдиницаИзмерения",
			Новый Структура("Номенклатура", "ЕдиницаИзмерения"));
	КонецЕсли;
	
	Если КолонкиРеквизитов.Найти("ТипНоменклатуры")<> Неопределено Тогда
		ПараметрыЗаполненияРеквизитов.Вставить("ЗаполнитьПризнакТипНоменклатуры",
			Новый Структура("Номенклатура", "ТипНоменклатуры"));
	КонецЕсли;
		
	Если КолонкиРеквизитов.Найти("НоваяХарактеристикаИспользуется")<> Неопределено Тогда
		ПараметрыЗаполненияРеквизитов.Вставить("ЗаполнитьПризнакХарактеристикиИспользуются",
			Новый Структура("НоваяНоменклатура", "НоваяХарактеристикаИспользуется"));
	КонецЕсли;
	
	Возврат;
	
КонецПроцедуры

Функция ПолучитьСведенияОНоменклатуре(Номенклатура) Экспорт
	
	Возврат ОбщегоНазначенияИСМПТКПереопределяемый.ПолучитьСведенияОНоменклатуре(Номенклатура);

КонецФункции

Функция ПолучитьДополнительныеСведенияОНоменклатуреДляИмпорта(Номенклатура, EAN, СообщенияОбОшибках = Неопределено) Экспорт
	
	ДополнительныеСведения = Новый Структура();
	Если СообщенияОбОшибках = Неопределено Тогда
		//Не во всех местах вызова функции нужно выводить пользователю сообщения, поэтому заменяеям на коллекцию-пустышку
		СообщенияОбОшибках = Новый Соответствие();
	КонецЕсли;
	
	ДанныеПоШтрихкоду = ОбщегоНазначенияИСМПТКПереопределяемый.ПолучитьДанныеНоменклатурыИзРегистраШтрихкодовПоШтрихкоду(, EAN, Номенклатура, СообщенияОбОшибках); 
	ТНВЭД = РаботаСДокументамиИСМПТКПереопределяемый.ПолучитьКодТНВЭДПоНоменклатуре(Номенклатура);
	
	Если Не ДанныеПоШтрихкоду = Неопределено Тогда 
		ДополнительныеСведения.Вставить("Характеристика", ДанныеПоШтрихкоду.Характеристика); 
	Иначе
		ДополнительныеСведения.Вставить("Характеристика", Неопределено); 
	КонецЕсли;
	ДополнительныеСведения.Вставить("ТНВЭД", ТНВЭД);
	
	Возврат ДополнительныеСведения;	
	
КонецФункции

Функция ПолучитьТипыДанныхНоменклатуры() Экспорт
	
	ТипыДанных = Новый Структура();
	ТипыДанных.Вставить("Номенклатура",   Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	ТипыДанных.Вставить("Характеристика", Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
	ТипыДанных.Вставить("Упаковка",	Новый ОписаниеТипов("СправочникСсылка.УпаковкиНоменклатуры"));
	
	Возврат ТипыДанных;
	
КонецФункции

Функция ПолучитьБазовуюЕдиницуИзмерения(Номенклатура) Экспорт
	
	Если Не ЗначениеЗаполнено(Номенклатура) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат ЗначениеРеквизитаОбъекта(Номенклатура, "ЕдиницаИзмерения");
		
КонецФункции

#Область УпаковкиИШаблоны

Функция ПолучитьШаблонКодаПоВидуПродукции(ВидПродукции) Экспорт
	
	Если ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИСМПТК.Обувная") Тогда
		Шаблон = ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗИСМПТК.Обувь");
		
	ИначеЕсли ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИСМПТК.МолочнаяПродукция") Тогда
		Шаблон = ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗИСМПТК.МолочнаяПродукция");
		
	ИначеЕсли ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИСМПТК.ЛекарственныеПрепараты") Тогда
		Шаблон = ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗИСМПТК.ЛекарственныеПрепараты");
		
	ИначеЕсли ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИСМПТК.Табачная") Тогда
		Шаблон = ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗИСМПТК.ТабачнаяПачка");
		
	ИначеЕсли ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИСМПТК.ЛегкаяПромышленность") Тогда
		Шаблон = ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗИСМПТК.ЛегкаяПромышленность");
		
	ИначеЕсли ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИСМПТК.БезалкогольныеНапитки") Тогда
		Шаблон = ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗИСМПТК.УпакованнаяВодаИНапитки");
		
	Иначе
		Шаблон = ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗИСМПТК.ПустаяСсылка");
	КонецЕсли;
	
	Возврат Шаблон;
	
КонецФункции

Функция ПолучитьВидПродукцииПоШаблонуКода(Шаблон) Экспорт
	
	Если Шаблон = ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗИСМПТК.Обувь") Тогда
		ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИСМПТК.Обувная");
		
	ИначеЕсли Шаблон = ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗИСМПТК.МолочнаяПродукция") Тогда
		ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИСМПТК.МолочнаяПродукция")
		
	ИначеЕсли Шаблон = ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗИСМПТК.ЛекарственныеПрепараты") Тогда
		ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИСМПТК.ЛекарственныеПрепараты");
		
	ИначеЕсли Шаблон = ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗИСМПТК.ТабачнаяПачка") Тогда
		ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИСМПТК.Табачная");
		
	ИначеЕсли Шаблон = ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗИСМПТК.ЛегкаяПромышленность") Тогда
		ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИСМПТК.ЛегкаяПромышленность");
		
	ИначеЕсли Шаблон = ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗИСМПТК.УпакованнаяВодаИНапитки") Тогда
		ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИСМПТК.БезалкогольныеНапитки");
	
	Иначе
		ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИСМПТК.ПустаяСсылка");
	КонецЕсли;
	
	Возврат ВидПродукции;
	
КонецФункции

Функция ПолучитьВидУпаковкиПоШаблонуКода(Шаблон) Экспорт
	
	Если Шаблон = ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗИСМПТК.Обувь") 
		Или Шаблон = ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗИСМПТК.МолочнаяПродукция")
		Или Шаблон = ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗИСМПТК.ЛекарственныеПрепараты") 
		Или Шаблон = ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗИСМПТК.ТабачнаяПачка") 
		Или Шаблон = ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗИСМПТК.ЛегкаяПромышленность")
		Или Шаблон = ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗИСМПТК.УпакованнаяВодаИНапитки") Тогда
		
		ВидУпаковки = ПредопределенноеЗначение("Перечисление.ВидыУпаковокИСМПТК.Потребительская");
		
	ИначеЕсли Шаблон = ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗИСМПТК.БлокТабачныхПачек") Тогда
		
		ВидУпаковки = ПредопределенноеЗначение("Перечисление.ВидыУпаковокИСМПТК.Групповая");
		
	Иначе
		
		ВидУпаковки = ПредопределенноеЗначение("Перечисление.ВидыУпаковокИСМПТК.ПустаяСсылка");
		
	КонецЕсли;
	
	Возврат ВидУпаковки;
	
КонецФункции

#КонецОбласти

#Область ФормаПодбораНоменклатурыИРегистрацииновыхШК

//Вызов из формы РозничноеВыбытиеМаркированнойПродукцииИСМПТК.ПоискНоменклатурыПоШтрихкоду, процедура ПриСозданииНаСервере()
Процедура ПоискНоменклатурыПоШтрихкодуПриСозданииНаСервере(Форма) Экспорт
	
	ОбщегоНазначенияИСМПТКПереопределяемый.ПоискНоменклатурыПоШтрихкодуПриСозданииНаСервере(Форма);
	
КонецПроцедуры

Процедура ПоискНоменклатурыПоШтрихкодуОбработкаПроверкиЗаполнения(Форма, Отказ, ПроверяемыеРеквизиты) Экспорт
	
	ОбщегоНазначенияИСМПТКПереопределяемый.ПоискНоменклатурыПоШтрихкодуОбработкаПроверкиЗаполнения(Форма, Отказ, ПроверяемыеРеквизиты);
	
КонецПроцедуры

Процедура ПолучитьНоменклатуруПоШтрихкодам(Штрихкоды, ДанныеПоШтрихкодам, СообщенияОбОшибках = Неопределено) Экспорт
	
	Если СообщенияОбОшибках = Неопределено Тогда
		//Не во всех местах вызова функции нужно выводить пользователю сообщения, поэтому заменяеям на коллекцию-пустышку
		СообщенияОбОшибках = Новый Соответствие();
	КонецЕсли;
	
	ДанныеПоШтрихкодам = ОбщегоНазначенияИСМПТКПереопределяемый.ПолучитьДанныеНоменклатурыИзРегистраШтрихкодовПоШтрихкоду(Истина, Штрихкоды,, СообщенияОбОшибках);
	
КонецПроцедуры

Процедура ЗарегистрироватьШтрихкоды(ШтрихкодыНоменклатуры) Экспорт
	
	ОбщегоНазначенияИСМПТКПереопределяемый.ЗарегистрироватьШтрихкоды(ШтрихкодыНоменклатуры);

КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область РаботаСОрганизациейКонтрагентом

Функция ПолучитьРеквизитИИНОрганизации() Экспорт
	
	Если ОбщегоНазначенияИСМПТК.ЕстьРеквизитОбъекта(Справочники.Организации.ПустаяСсылка(), "ИдентификационныйНомер") Тогда
		Возврат "ИдентификационныйНомер";
	Иначе
		Возврат "ИНН";
	КонецЕсли;
	
КонецФункции

Функция ПолучитьРеквизитыОрганизацииКонтрагента(Ссылка, Реквизит) Экспорт
	
	СтруктураДанных = Новый Структура;
	
	СтруктураДанных.Вставить(Реквизит + "Наименование", 		  "");
	СтруктураДанных.Вставить(Реквизит + "ИдентификационныйНомер", "");
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Таблица.Ссылка КАК Объект,
	|	ВЫБОР
	|		КОГДА (ВЫРАЗИТЬ(Таблица.НаименованиеПолное КАК СТРОКА(450))) <> """"
	|			ТОГДА ВЫРАЗИТЬ(Таблица.НаименованиеПолное КАК СТРОКА(450))
	|		ИНАЧЕ Таблица.Наименование
	|	КОНЕЦ КАК Наименование,
	|	Таблица.ИНН КАК Идентификатор
	|ИЗ
	|	Справочник.Организации КАК Таблица
	|ГДЕ
	|	Таблица.Ссылка = &Ссылка";

	ЭтоТорговоеРешение = ОбщегоНазначенияИСМПТКПереопределяемый.ПроверитьЭтоТорговоеРешение();
	Если ТипЗнч(Ссылка) = Тип("СправочникСсылка.Контрагенты") Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "Справочник.Организации", "Справочник.Контрагенты");
		Если Ссылка.ЮрФизЛицо = ПредопределенноеЗначение("Перечисление.ЮрФизЛицо.ФизЛицо") Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "Таблица.ИНН", "Таблица.ФизЛицо.ИНН");
		Иначе
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "Таблица.ИНН", "Таблица.ИНН");
		КонецЕсли;	
	КонецЕсли;
	
	РезультатЗапроса		= Запрос.Выполнить();
	ВыборкаДетальныеЗаписи	= РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий()Тогда
		СтруктураДанных.Вставить(Реквизит + "Наименование", 		  ВыборкаДетальныеЗаписи.Наименование);
		СтруктураДанных.Вставить(Реквизит + "ИдентификационныйНомер", ВыборкаДетальныеЗаписи.Идентификатор);
	КонецЕсли;
	
	Возврат СтруктураДанных;
	
КонецФункции

Функция КонтрагентНерезидент(Основание) Экспорт
	
	Если Основание.Контрагент.ЮрФизЛицо = ПредопределенноеЗначение("Перечисление.ЮрФизЛицо.ЮрЛицоНеРезидент") Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

Функция ПроверитьКонтрагентаДляСхемыВзаимногоПризнанияИСМПТ(Основание) Экспорт
	
	Возврат Основание.Контрагент.ЮрФизЛицо = ПредопределенноеЗначение("Перечисление.ЮрФизЛицо.ЮрЛицоНеРезидент")
		И Не Основание.Контрагент.СтранаРегистрации = Справочники.СтраныМира.Россия;	
	
КонецФункции

#КонецОбласти

#Область РолиИПрофили

Процедура ПриЗаполненииПоставляемыхПрофилейГруппДоступаБК(ОписанияПрофилей, ПараметрыОбновления) Экспорт
	
	РежимЗаполнения = Новый Структура();
	РежимЗаполнения.Вставить("ВключатьПроизводство", Ложь);  	 //Заказ, Нанесение, Пул кодов
	РежимЗаполнения.Вставить("ВключатьИнвентаризация", Ложь);	 //Ввод и вывод из оборота
	РежимЗаполнения.Вставить("ВключатьТорговляОпт", Ложь);	 //АПП и УОР
	РежимЗаполнения.Вставить("ВключатьТорговляРозница", Ложь); //Чеки ККМ
	РежимЗаполнения.Вставить("ВключатьИмпортЭкспорт", Ложь);	 //Ввоз ЕАЭС/Импорт
	РежимЗаполнения.Вставить("Продажа", Ложь);	//Дополняют ИмпортЭкспорт: Экспорт ЕАЭС
	РежимЗаполнения.Вставить("Закупка", Ложь);	//Дополняют ИмпортЭкспорт: Отгрузка и Приемка ЕАЭС
	
	Для Каждого Профиль Из ОписанияПрофилей Цикл
		
		// Профиль Бухгалтер
		Если Профиль.Идентификатор = "75fa0eca-98aa-11df-b54f-e0cb4ed5f655" Тогда
			
			НазначитьРолиОбщегоНазначения(Профиль);
			НазначитьРолиЧтенияОбъектов(Профиль);
			НазначитьРолиИзмененияОбъектов(Профиль);
			НазначитьРолиДополнительныйФункционал(Профиль);
			НазначитьРолиАгрегирования(Профиль);
						
		КонецЕсли;
		
		// Профиль ГлавныйБухгалтер
		Если Профиль.Идентификатор = "75fa0ecb-98aa-11df-b54f-e0cb4ed5f655" Тогда
			
			НазначитьРолиОбщегоНазначения(Профиль);
			НазначитьРолиЧтенияОбъектов(Профиль);
			НазначитьРолиИзмененияОбъектов(Профиль);
			НазначитьРолиАдминистратора(Профиль);
			НазначитьРолиБухУчета(Профиль);
			НазначитьРолиАгрегирования(Профиль);
			НазначитьРолиДополнительныйФункционал(Профиль);
						
		КонецЕсли;
		
		// Профиль ТолькоПросмотр
		Если Профиль.Идентификатор = "45ce5549-ade3-11e0-9746-00179a3853da" Тогда
			
			НазначитьРолиОбщегоНазначения(Профиль);
			НазначитьРолиЧтенияОбъектов(Профиль);
			
		КонецЕсли;
		
	КонецЦикла;
			
КонецПроцедуры

Процедура ПриЗаполненииПоставляемыхПрофилейГруппДоступаУТ(ОписанияПрофилей, ПараметрыОбновления) Экспорт
	
	РежимЗаполнения = Новый Структура();
	РежимЗаполнения.Вставить("ВключатьПроизводство",    Ложь);   //Заказ, Нанесение, Пул кодов
	РежимЗаполнения.Вставить("ВключатьИнвентаризация",  Ложь);	 //Ввод и вывод из оборота
	РежимЗаполнения.Вставить("ВключатьТорговляОпт",     Ложь);	 //АПП и УОР
	РежимЗаполнения.Вставить("ВключатьТорговляРозница", Ложь); 	 //Чеки ККМ
	РежимЗаполнения.Вставить("ВключатьИмпортЭкспорт", 	Ложь);	 //Ввоз ЕАЭС/Импорт
	РежимЗаполнения.Вставить("Продажа", Ложь);	//Дополняют ИмпортЭкспорт: Экспорт ЕАЭС
	РежимЗаполнения.Вставить("Закупка", Ложь);	//Дополняют ИмпортЭкспорт: Отгрузка и Приемка ЕАЭС
	
	//Изменени типовых профилей
	Для Каждого Профиль Из ОписанияПрофилей Цикл
		
#Область УправлениеДоступомУТ

		// Профиль Кладовщик
		Если Профиль.Идентификатор = "28f1fe22-299d-4135-ac9f-fe338ce51571" Тогда
						
			РежимЗаполнения.ВключатьПроизводство 	= Истина;
			РежимЗаполнения.ВключатьИнвентаризация  = Истина;
			РежимЗаполнения.ВключатьТорговляОпт 	= Истина;
			РежимЗаполнения.ВключатьИмпортЭкспорт 	= Истина;
			РежимЗаполнения.Продажа = Истина;
			РежимЗаполнения.Закупка = Истина;
			РежимЗаполнения.ВключатьТорговляРозница = Истина;
			
			НазначитьРолиЧтенияОбъектов(Профиль, РежимЗаполнения);
			НазначитьРолиДополнительныйФункционал(Профиль, РежимЗаполнения);
			НазначитьРолиАгрегирования(Профиль, РежимЗаполнения);
			
			РежимЗаполнения.ВключатьТорговляРозница = Ложь; 
			НазначитьРолиИзмененияОбъектов(Профиль, РежимЗаполнения); //есть ограничения по чекам
			
			НазначитьРолиОбщегоНазначения(Профиль, РежимЗаполнения); 
			НазначитьРолиБухУчета(Профиль); 
			
		КонецЕсли;
		
		// Профиль Бухгалтер
		Если Профиль.Идентификатор = "84acd69c-4114-4d0a-82b2-226033948e12" Тогда
			
			РежимЗаполнения.ВключатьПроизводство 	= Ложь;
			РежимЗаполнения.ВключатьИнвентаризация  = Ложь;
			РежимЗаполнения.ВключатьТорговляОпт 	= Ложь;
			РежимЗаполнения.ВключатьИмпортЭкспорт 	= Ложь;
				
			НазначитьРолиОбщегоНазначения(Профиль,  РежимЗаполнения);
			НазначитьРолиЧтенияОбъектов(Профиль,    РежимЗаполнения);		
			НазначитьРолиИзмененияОбъектов(Профиль, РежимЗаполнения);
			НазначитьРолиДополнительныйФункционал(Профиль, РежимЗаполнения);
			НазначитьРолиБухУчета(Профиль); 
			
		КонецЕсли;
				
		// Профиль Продавец-кассир
		Если Профиль.Идентификатор = "b93bb8a1-04fa-4c1a-ac3c-75fb05366782" Тогда
			                  
			РежимЗаполнения.ВключатьПроизводство 	= Ложь;
			РежимЗаполнения.ВключатьИнвентаризация  = Ложь;
			РежимЗаполнения.ВключатьТорговляОпт 	= Ложь;
			РежимЗаполнения.ВключатьИмпортЭкспорт 	= Ложь;
			РежимЗаполнения.ВключатьТорговляРозница = Истина;
						
			НазначитьРолиОбщегоНазначения(Профиль,  РежимЗаполнения); //Для проверки констант
			НазначитьРолиЧтенияОбъектов(Профиль, 	РежимЗаполнения);		
			НазначитьРолиИзмененияОбъектов(Профиль, РежимЗаполнения);
			
			РежимЗаполнения.ВключатьТорговляРозница = Ложь;
			НазначитьРолиДополнительныйФункционал(Профиль, РежимЗаполнения);
						
		КонецЕсли;
		
		// Профиль Кассир
		Если Профиль.Идентификатор = "1167e360-4f81-4114-968e-c4264a06baa0" Тогда
			                  
			РежимЗаполнения.ВключатьПроизводство 	= Ложь;
			РежимЗаполнения.ВключатьИнвентаризация  = Ложь;
			РежимЗаполнения.ВключатьТорговляОпт 	= Ложь;
			РежимЗаполнения.ВключатьИмпортЭкспорт 	= Ложь;
			РежимЗаполнения.ВключатьТорговляРозница = Истина;
			
			НазначитьРолиОбщегоНазначения(Профиль,  РежимЗаполнения);  //Для проверки констант
			НазначитьРолиЧтенияОбъектов(Профиль, 	РежимЗаполнения);		
			НазначитьРолиИзмененияОбъектов(Профиль, РежимЗаполнения);
			
			РежимЗаполнения.ВключатьТорговляРозница = Ложь;
			НазначитьРолиДополнительныйФункционал(Профиль, РежимЗаполнения);

		КонецЕсли;
		
		// Профиль Руководитель отдела продаж
		Если Профиль.Идентификатор = "ae883b07-11cf-4bea-9bce-46473350db16" Тогда
			                  
			РежимЗаполнения.ВключатьПроизводство 	= Истина;
			РежимЗаполнения.ВключатьИнвентаризация  = Истина;
			РежимЗаполнения.ВключатьТорговляОпт 	= Истина;
			РежимЗаполнения.ВключатьИмпортЭкспорт 	= Истина;
			РежимЗаполнения.Продажа = Истина; 
			РежимЗаполнения.Закупка = Ложь;
			РежимЗаполнения.ВключатьТорговляРозница = Истина;
			
			НазначитьРолиОбщегоНазначения(Профиль,  РежимЗаполнения); 
			НазначитьРолиЧтенияОбъектов(Профиль, 	РежимЗаполнения);		
			НазначитьРолиДополнительныйФункционал(Профиль, РежимЗаполнения);
			НазначитьРолиАгрегирования(Профиль, РежимЗаполнения);
			
			РежимЗаполнения.ВключатьТорговляРозница = Ложь;
			НазначитьРолиИзмененияОбъектов(Профиль, РежимЗаполнения);  //есть ограничения по чекам
						
		КонецЕсли;
		
		// Профиль Менеджер по продажам
		Если Профиль.Идентификатор = "44d4fd93-99ca-40e7-be0a-3b0321a39d3b" Тогда
			                  
			РежимЗаполнения.ВключатьПроизводство 	= Ложь;
			РежимЗаполнения.ВключатьИнвентаризация  = Истина; //для доступа к подсистеме
			РежимЗаполнения.ВключатьТорговляОпт 	= Истина;
			РежимЗаполнения.ВключатьИмпортЭкспорт 	= Истина;
			РежимЗаполнения.Продажа = Истина; 
			РежимЗаполнения.Закупка = Ложь;
			РежимЗаполнения.ВключатьТорговляРозница = Истина;
			
			НазначитьРолиОбщегоНазначения(Профиль, РежимЗаполнения); 
			НазначитьРолиАгрегирования(Профиль, РежимЗаполнения);
			
			РежимЗаполнения.ВключатьИнвентаризация  = Ложь; //исключаем увед. о вводе
			НазначитьРолиЧтенияОбъектов(Профиль,   РежимЗаполнения);		
						
			РежимЗаполнения.ВключатьТорговляРозница = Ложь; //исключаем создание чеков
			НазначитьРолиИзмененияОбъектов(Профиль, РежимЗаполнения);
			
			//Добавляем из Инвентаризации только Вывод
			Профиль.Роли.Добавить(Метаданные.Роли.ДобавлениеИзменениеУведомленийОВыводеИзОборотаИСМПТК.Имя);
			Профиль.Роли.Добавить(Метаданные.Роли.ЧтениеУведомленийОВыводеИзОборотаИСМПТК.Имя);
			
			Профиль.Роли.Добавить(Метаданные.Роли.ДобавлениеИзменениеУведомленийОВыводеИзОборотаИСЦЭДМ.Имя);
			Профиль.Роли.Добавить(Метаданные.Роли.ЧтениеУведомленийОВыводеИзОборотаИСЦЭДМ.Имя);
			
			НазначитьРолиДополнительныйФункционал(Профиль, РежимЗаполнения);
			НазначитьРолиБухУчета(Профиль); 
			
		КонецЕсли;
		
		// Профиль Менеджер по закупкам
		Если Профиль.Идентификатор = "12bb4321-60bb-4bbd-a1fc-4c84fb3c1133" Тогда
			                  
			РежимЗаполнения.ВключатьПроизводство 	= Истина;
			РежимЗаполнения.ВключатьИнвентаризация  = Истина; //для доступа к подсистеме
			РежимЗаполнения.ВключатьТорговляОпт 	= Истина;
			РежимЗаполнения.ВключатьИмпортЭкспорт 	= Истина;
			РежимЗаполнения.Продажа = Ложь; 
			РежимЗаполнения.Закупка = Истина;
			РежимЗаполнения.ВключатьТорговляРозница = Ложь;
			
			НазначитьРолиОбщегоНазначения(Профиль,  РежимЗаполнения); 
			
			РежимЗаполнения.ВключатьИнвентаризация  = Ложь;//исключаем увед. о выводе
			НазначитьРолиЧтенияОбъектов(Профиль,    РежимЗаполнения);		
			НазначитьРолиИзмененияОбъектов(Профиль, РежимЗаполнения);
			
			//Добавляем из Инвентаризации только Ввод в оборот
			Профиль.Роли.Добавить(Метаданные.Роли.ДобавлениеИзменениеУведомленийОВводеВОборотИСМПТК.Имя);
			Профиль.Роли.Добавить(Метаданные.Роли.ЧтениеУведомленийОВводеВОборотИСМПТК.Имя);
			
			Профиль.Роли.Добавить(Метаданные.Роли.ДобавлениеИзменениеУведомленийОВводеВОборотИСЦЭДМ.Имя);
			Профиль.Роли.Добавить(Метаданные.Роли.ЧтениеУведомленийОВводеВОборотИСЦЭДМ.Имя);
			
			НазначитьРолиДополнительныйФункционал(Профиль, РежимЗаполнения);
			НазначитьРолиАгрегирования(Профиль, РежимЗаполнения);
			НазначитьРолиБухУчета(Профиль); 
			
		КонецЕсли;
		
		// Профиль Менеджер по доставке
		Если Профиль.Идентификатор = "d3e34937-0a73-4468-8105-8f9ab0e311ac" Тогда
			                  
			РежимЗаполнения.ВключатьПроизводство 	= Истина; //для доступа к подсистеме
			РежимЗаполнения.ВключатьИнвентаризация  = Истина; //для доступа к подсистеме
			РежимЗаполнения.ВключатьТорговляОпт 	= Истина;
			РежимЗаполнения.ВключатьИмпортЭкспорт 	= Истина;
			РежимЗаполнения.Продажа = Истина; 
			РежимЗаполнения.Закупка = Истина;
			РежимЗаполнения.ВключатьТорговляРозница = Ложь;
			
			НазначитьРолиОбщегоНазначения(Профиль, РежимЗаполнения); 
			
			РежимЗаполнения.ВключатьИнвентаризация  = Ложь;//исключаем увед. о вводе
			НазначитьРолиЧтенияОбъектов(Профиль, РежимЗаполнения);
			РежимЗаполнения.ВключатьПроизводство = Ложь; //исключаем возможность создания
			НазначитьРолиИзмененияОбъектов(Профиль, РежимЗаполнения);
						
			//Добавляем из Инвентаризации только Вывод
			Профиль.Роли.Добавить(Метаданные.Роли.ДобавлениеИзменениеУведомленийОВыводеИзОборотаИСМПТК.Имя);
			Профиль.Роли.Добавить(Метаданные.Роли.ЧтениеУведомленийОВыводеИзОборотаИСМПТК.Имя);
			
			Профиль.Роли.Добавить(Метаданные.Роли.ДобавлениеИзменениеУведомленийОВыводеИзОборотаИСЦЭДМ.Имя);
			Профиль.Роли.Добавить(Метаданные.Роли.ЧтениеУведомленийОВыводеИзОборотаИСЦЭДМ.Имя);
			
			//Агрегация - только чтение
			Профиль.Роли.Добавить(Метаданные.Роли.ЧтениеАгрегацийИСМПТК.Имя);
			
			Профиль.Роли.Добавить(Метаданные.Роли.ИспользованиеМобильногоПриложенияИСМПТК.Имя);
			Профиль.Роли.Добавить(Метаданные.Роли.ИспользованиеОбработкиОбъединенияНесколькихФайловИСМПТК.Имя);
				
		КонецЕсли;
		
		// Профиль Менеджер по розничной торговле
		Если Профиль.Идентификатор = "4c72e308-ff96-40b3-b066-f2dfda73d323" Тогда
			                  
			РежимЗаполнения.ВключатьПроизводство 	= Ложь;
			РежимЗаполнения.ВключатьИнвентаризация  = Истина; 
			РежимЗаполнения.ВключатьТорговляОпт 	= Истина;
			РежимЗаполнения.ВключатьИмпортЭкспорт 	= Ложь;
			РежимЗаполнения.Продажа = Ложь; 
			РежимЗаполнения.Закупка = Ложь;
			РежимЗаполнения.ВключатьТорговляРозница = Истина;
			
			НазначитьРолиОбщегоНазначения(Профиль,  РежимЗаполнения); 
			НазначитьРолиЧтенияОбъектов(Профиль,    РежимЗаполнения);		
			НазначитьРолиИзмененияОбъектов(Профиль, РежимЗаполнения);
			
			//Добавляем из Инвентаризации только Ввод в оборот
			Профиль.Роли.Добавить(Метаданные.Роли.ДобавлениеИзменениеУведомленийОВводеВОборотИСМПТК.Имя);
			Профиль.Роли.Добавить(Метаданные.Роли.ЧтениеУведомленийОВводеВОборотИСМПТК.Имя);
			
			Профиль.Роли.Добавить(Метаданные.Роли.ДобавлениеИзменениеУведомленийОВводеВОборотИСЦЭДМ.Имя);
			Профиль.Роли.Добавить(Метаданные.Роли.ЧтениеУведомленийОВводеВОборотИСЦЭДМ.Имя);
			
			РежимЗаполнения.ВключатьТорговляРозница = Ложь;
			РежимЗаполнения.ВключатьИнвентаризация  = Ложь; 
			РежимЗаполнения.ВключатьТорговляОпт 	= Ложь;
			НазначитьРолиДополнительныйФункционал(Профиль, РежимЗаполнения);
			
		КонецЕсли;
		
#КонецОбласти

	КонецЦикла;	
	
	//добавление новых профилей
#Область Описание_профиля_МенеджерОптовойТорговлиИСМПТ

	//Профиль предназначен для работы пользователя сервиса 1С:Маркировка для Казахстана,
	//обеспечивает доступность документов товародвижения (закупка и продажа)
	//и использование дополнительных связанных возможностей.
	
	// Профиль "Менеджер оптовой торговли (ИС МПТ)".
	ОписаниеПрофиля = УправлениеДоступом.НовоеОписаниеПрофиляГруппДоступа();
	ОписаниеПрофиля.Имя           = "МенеджерОптовойТорговлиИСМПТ";
	ОписаниеПрофиля.Идентификатор = "2943a2d6-82b3-495d-82cd-9644337e537a";
	ОписаниеПрофиля.Наименование  = НСтр("ru = 'Менеджер оптовой торговли (ИС МПТ) (дополнительный)'", ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.КодОсновногоЯзыка());

	РежимЗаполнения.ВключатьПроизводство 	= Ложь;
	РежимЗаполнения.ВключатьИнвентаризация  = Ложь;
	РежимЗаполнения.ВключатьТорговляОпт 	= Истина;
	РежимЗаполнения.ВключатьИмпортЭкспорт 	= Истина;
	РежимЗаполнения.Продажа = Истина; 
	РежимЗаполнения.Закупка = Истина;
	РежимЗаполнения.ВключатьТорговляРозница = Ложь;
	
	НазначитьРолиОбщегоНазначения(ОписаниеПрофиля, 	РежимЗаполнения);
	НазначитьРолиЧтенияОбъектов(ОписаниеПрофиля, 	РежимЗаполнения);
	НазначитьРолиИзмененияОбъектов(ОписаниеПрофиля, РежимЗаполнения);
	НазначитьРолиДополнительныйФункционал(ОписаниеПрофиля, РежимЗаполнения);
	НазначитьРолиАгрегирования(ОписаниеПрофиля, РежимЗаполнения);
	
	// Описание поставляемого профиля.
	Текст = НСтр("ru = 'Под профилем осуществляется доступ в ИБ менеджера по продажам или закупкам маркируемой продукции, оформление Актов приема/передачи и Уведомлений о ввозе, Уведомлений о приемке и экспорте товаров, осуществляется обмен данными с ИС МПТ, запрос информации о кодах маркировки, синхронизация данных с мобильным приложением сервиса %1.'"); 
	Текст = ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(Текст, ЭлектронноеВзаимодействиеССервисамиМаркировка.НаименованиеСервиса());
	ОписаниеПрофиля.Описание = Текст;
	
	ОписанияПрофилей.Добавить(ОписаниеПрофиля);

#КонецОбласти

#Область Описание_профиля_МенеджерРозничнойТорговлиИСМПТ

	//Профиль предназначен для работы пользователя сервиса 1С:Маркировка для Казахстана,
	//обеспечивает доступность документов розничного контура работы с маркировкой.
		
	// Профиль "Менеджер оптовой торговли (ИС МПТ)".
	ОписаниеПрофиля = УправлениеДоступом.НовоеОписаниеПрофиляГруппДоступа();
	ОписаниеПрофиля.Имя           = "МенеджерРозничнойТорговлиИСМПТ";
	ОписаниеПрофиля.Идентификатор = "10f63258-3d46-4eb6-922b-458837339dcd";
	ОписаниеПрофиля.Наименование  = НСтр("ru = 'Менеджер розничной торговли (ИС МПТ) (дополнительный)'", ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.КодОсновногоЯзыка());
	
	РежимЗаполнения.ВключатьПроизводство 	= Ложь;
	РежимЗаполнения.ВключатьИнвентаризация  = Ложь;
	РежимЗаполнения.ВключатьТорговляОпт 	= Ложь;
	РежимЗаполнения.ВключатьИмпортЭкспорт 	= Ложь;
	РежимЗаполнения.Продажа = Ложь; 
	РежимЗаполнения.Закупка = Ложь;
	РежимЗаполнения.ВключатьТорговляРозница = Истина;
	
	НазначитьРолиОбщегоНазначения(ОписаниеПрофиля, 	РежимЗаполнения);
	НазначитьРолиЧтенияОбъектов(ОписаниеПрофиля, 	РежимЗаполнения);
	НазначитьРолиИзмененияОбъектов(ОписаниеПрофиля, РежимЗаполнения);
	НазначитьРолиДополнительныйФункционал(ОписаниеПрофиля, РежимЗаполнения);
	
	// Описание поставляемого профиля.
	Текст = НСтр("ru = 'Под профилем осуществляется доступ в ИБ менеджера по розничным продажам маркируемой продукции и использование некоторых дополнительных возможностей сервиса %1.'"); 
	Текст = ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(Текст, ЭлектронноеВзаимодействиеССервисамиМаркировка.НаименованиеСервиса());
	ОписаниеПрофиля.Описание = Текст;
	
	ОписанияПрофилей.Добавить(ОписаниеПрофиля);

#КонецОбласти

#Область Описание_профиля_КладовщикМаркировкиИСМПТ

	//Профиль предназначен для работы пользователя сервиса 1С:Маркировка для Казахстана,
	//обеспечивает доступность документов инвентаризации (ввод и вывод из оборота)
	//и использование дополнительных связанных возможностей.
	
	// Профиль "Кладовщик маркировки (ИС МПТ)".
	ОписаниеПрофиля = УправлениеДоступом.НовоеОписаниеПрофиляГруппДоступа();
	ОписаниеПрофиля.Имя           = "КладовщикМаркировкиИСМПТ";
	ОписаниеПрофиля.Идентификатор = "b2c25748-ed2f-4f02-a5b2-adc193227506";
	ОписаниеПрофиля.Наименование  = НСтр("ru = 'Кладовщик маркировки (ИС МПТ) (дополнительный)'", ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.КодОсновногоЯзыка());
	
	РежимЗаполнения.ВключатьПроизводство 	= Ложь;
	РежимЗаполнения.ВключатьИнвентаризация  = Истина;
	РежимЗаполнения.ВключатьТорговляОпт 	= Ложь;
	РежимЗаполнения.ВключатьИмпортЭкспорт 	= Ложь;
	РежимЗаполнения.Продажа = Ложь; 
	РежимЗаполнения.Закупка = Ложь;
	РежимЗаполнения.ВключатьТорговляРозница = Ложь;

	НазначитьРолиОбщегоНазначения(ОписаниеПрофиля, 	РежимЗаполнения);
	НазначитьРолиЧтенияОбъектов(ОписаниеПрофиля, 	РежимЗаполнения);
	НазначитьРолиИзмененияОбъектов(ОписаниеПрофиля, РежимЗаполнения);
	НазначитьРолиДополнительныйФункционал(ОписаниеПрофиля, РежимЗаполнения);
	НазначитьРолиАгрегирования(ОписаниеПрофиля, РежимЗаполнения);
	
	// Описание поставляемого профиля. 
	Текст = НСтр("ru = 'Под профилем осуществляется доступ в ИБ кладовщика по работе с маркируемой продукцией, оформление Уведомлений о вводе и выводе из оборота, формирование Агрегаций кодов маркировки, осуществляется обмен данными с ИС МПТ, проверка информации о кодах маркировки, синхронизация данных с мобильным приложением сервиса %1.'"); 
	Текст = ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(Текст, ЭлектронноеВзаимодействиеССервисамиМаркировка.НаименованиеСервиса());
	ОписаниеПрофиля.Описание = Текст;
		
	ОписанияПрофилей.Добавить(ОписаниеПрофиля);

#КонецОбласти

#Область Описание_профиля_МенеджерПроизводстваИСМПТ

	//Профиль предназначен для работы пользователя сервиса 1С:Маркировка для Казахстана,
	//обеспечивает доступность документов производственного контура (заказ кодов и их печать)
	//и использование дополнительных связанных возможностей.
	
	// Профиль "Менеджер производства (ИС МПТ)".
	ОписаниеПрофиля = УправлениеДоступом.НовоеОписаниеПрофиляГруппДоступа();
	ОписаниеПрофиля.Имя           = "МенеджерПроизводстваИСМПТ";
	ОписаниеПрофиля.Идентификатор = "db186caa-acae-4384-a5d3-da76cdd4d67f";
	ОписаниеПрофиля.Наименование  = НСтр("ru = 'Менеджер производства (ИС МПТ) (дополнительный)'", ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.КодОсновногоЯзыка());
	
	РежимЗаполнения.ВключатьПроизводство 	= Истина;
	РежимЗаполнения.ВключатьИнвентаризация  = Ложь;
	РежимЗаполнения.ВключатьТорговляОпт 	= Ложь;
	РежимЗаполнения.ВключатьИмпортЭкспорт 	= Ложь;
	РежимЗаполнения.Продажа = Ложь; 
	РежимЗаполнения.Закупка = Ложь;
	РежимЗаполнения.ВключатьТорговляРозница = Ложь;
	
	НазначитьРолиОбщегоНазначения(ОписаниеПрофиля, 	РежимЗаполнения);
	НазначитьРолиЧтенияОбъектов(ОписаниеПрофиля, 	РежимЗаполнения);
	НазначитьРолиИзмененияОбъектов(ОписаниеПрофиля, РежимЗаполнения);
	НазначитьРолиДополнительныйФункционал(ОписаниеПрофиля, РежимЗаполнения);
	НазначитьРолиАгрегирования(ОписаниеПрофиля, РежимЗаполнения);
	
	// Описание поставляемого профиля.
	ОписаниеПрофиля.Описание = НСтр("ru = 'Под профилем осуществляется доступ в ИБ менеджера по производству маркируемой продукции, оформление Заказов на эмиссию кодов, их печать и нанесение, формирование Агрегаций кодов маркировки, осуществляется обмен данными с СУЗ, проверка информации о кодах маркировки"".'");
	ОписанияПрофилей.Добавить(ОписаниеПрофиля);

#КонецОбласти

КонецПроцедуры

Процедура ПриЗаполненииПоставляемыхПрофилейГруппДоступаКА(ОписанияПрофилей, ПараметрыОбновления) Экспорт
	
	РежимЗаполнения = Новый Структура();
	РежимЗаполнения.Вставить("ВключатьПроизводство", Ложь);  	 //Заказ, Нанесение, Пул кодов
	РежимЗаполнения.Вставить("ВключатьИнвентаризация", Ложь);	 //Ввод и вывод из оборота
	РежимЗаполнения.Вставить("ВключатьТорговляОпт", Ложь);	 //АПП и УОР
	РежимЗаполнения.Вставить("ВключатьТорговляРозница", Ложь); //Чеки ККМ
	РежимЗаполнения.Вставить("ВключатьИмпортЭкспорт", Ложь);	 //Ввоз ЕАЭС/Импорт
	РежимЗаполнения.Вставить("Продажа", Ложь);	//Дополняют ИмпортЭкспорт: Экспорт ЕАЭС
	РежимЗаполнения.Вставить("Закупка", Ложь);	//Дополняют ИмпортЭкспорт: Отгрузка и Приемка ЕАЭС
	
	Для Каждого Профиль Из ОписанияПрофилей Цикл

#Область УправлениеДоступомКА

		// Профиль Экономист производства
		Если Профиль.Идентификатор = "86f1e49f-7c35-11e7-9719-708bcd551b9e" Тогда
			                  
			РежимЗаполнения.ВключатьПроизводство 	= Истина;
			РежимЗаполнения.ВключатьИнвентаризация  = Ложь;
			РежимЗаполнения.ВключатьТорговляОпт 	= Ложь;
			РежимЗаполнения.ВключатьИмпортЭкспорт 	= Ложь;
			РежимЗаполнения.Продажа = Ложь; 
			РежимЗаполнения.Закупка = Ложь;
			РежимЗаполнения.ВключатьТорговляРозница = Ложь;
			
			НазначитьРолиОбщегоНазначения(Профиль,  РежимЗаполнения); 
			НазначитьРолиЧтенияОбъектов(Профиль, 	РежимЗаполнения);
			
			РежимЗаполнения.ВключатьПроизводство 	= Ложь;
			НазначитьРолиИзмененияОбъектов(Профиль, РежимЗаполнения);
			НазначитьРолиДополнительныйФункционал(Профиль, РежимЗаполнения);
			
			НазначитьРолиБухУчета(Профиль); 
			
		КонецЕсли;
		
		// Профиль Локальный диспетчер производства
		Если Профиль.Идентификатор = "2c1871fb-5fef-408d-adf8-4edcb6ab6c5c" Тогда
			
			РежимЗаполнения.ВключатьПроизводство 	= Истина;
			РежимЗаполнения.ВключатьИнвентаризация  = Ложь;
			РежимЗаполнения.ВключатьТорговляОпт 	= Ложь;
			РежимЗаполнения.ВключатьИмпортЭкспорт 	= Ложь;
			РежимЗаполнения.Продажа = Ложь; 
			РежимЗаполнения.Закупка = Ложь;
			РежимЗаполнения.ВключатьТорговляРозница = Ложь;
			
			НазначитьРолиОбщегоНазначения(Профиль, 	РежимЗаполнения); 
			НазначитьРолиЧтенияОбъектов(Профиль,   	РежимЗаполнения);
			НазначитьРолиИзмененияОбъектов(Профиль, РежимЗаполнения);
			НазначитьРолиДополнительныйФункционал(Профиль, РежимЗаполнения);
			НазначитьРолиАгрегирования(Профиль, РежимЗаполнения);
			
		КонецЕсли;
		
#КонецОбласти

	КонецЦикла;	

///////////////////
	
КонецПроцедуры

Процедура ПриЗаполненииПоставляемыхПрофилейГруппДоступаУП(ОписанияПрофилей, ПараметрыОбновления) Экспорт
	
	РежимЗаполнения = Новый Структура();
	РежимЗаполнения.Вставить("ВключатьПроизводство", Ложь);  	 //Заказ, Нанесение, Пул кодов
	РежимЗаполнения.Вставить("ВключатьИнвентаризация", Ложь);	 //Ввод и вывод из оборота
	РежимЗаполнения.Вставить("ВключатьТорговляОпт", Ложь);	 //АПП и УОР
	РежимЗаполнения.Вставить("ВключатьТорговляРозница", Ложь); //Чеки ККМ
	РежимЗаполнения.Вставить("ВключатьИмпортЭкспорт", Ложь);	 //Ввоз ЕАЭС/Импорт
	РежимЗаполнения.Вставить("Продажа", Ложь);	//Дополняют ИмпортЭкспорт: Экспорт ЕАЭС
	РежимЗаполнения.Вставить("Закупка", Ложь);	//Дополняют ИмпортЭкспорт: Отгрузка и Приемка ЕАЭС
	
	Для Каждого Профиль Из ОписанияПрофилей Цикл

#Область УправлениеДоступомУП

		// Профиль Менеджер производства
		Если Профиль.Идентификатор = "a90d907c-a823-454b-8bc0-5e5f1807c835" Тогда
			
			РежимЗаполнения.ВключатьПроизводство 	= Истина;
			РежимЗаполнения.ВключатьИнвентаризация  = Ложь;
			РежимЗаполнения.ВключатьТорговляОпт 	= Ложь;
			РежимЗаполнения.ВключатьИмпортЭкспорт 	= Ложь;
			РежимЗаполнения.Продажа = Ложь; 
			РежимЗаполнения.Закупка = Ложь;
			РежимЗаполнения.ВключатьТорговляРозница = Ложь;
			
			НазначитьРолиОбщегоНазначения(Профиль,  РежимЗаполнения);
			НазначитьРолиЧтенияОбъектов(Профиль, 	РежимЗаполнения);
			
			РежимЗаполнения.ВключатьПроизводство 	= Ложь;
			НазначитьРолиИзмененияОбъектов(Профиль, РежимЗаполнения);
			НазначитьРолиДополнительныйФункционал(Профиль, РежимЗаполнения); 
			
		КонецЕсли;
		 		 
		// Профиль Главный диспетчер производства
		Если Профиль.Идентификатор = "90a9321f-a088-47f1-afd4-47b8f052ebc1" Тогда
			
			РежимЗаполнения.ВключатьПроизводство 	= Истина;
			РежимЗаполнения.ВключатьИнвентаризация  = Ложь;
			РежимЗаполнения.ВключатьТорговляОпт 	= Ложь;
			РежимЗаполнения.ВключатьИмпортЭкспорт 	= Ложь;
			РежимЗаполнения.Продажа = Ложь; 
			РежимЗаполнения.Закупка = Ложь;
			РежимЗаполнения.ВключатьТорговляРозница = Ложь;
			
			НазначитьРолиОбщегоНазначения(Профиль, 	РежимЗаполнения); 
			НазначитьРолиЧтенияОбъектов(Профиль,   	РежимЗаполнения);
			НазначитьРолиИзмененияОбъектов(Профиль, РежимЗаполнения);
			НазначитьРолиДополнительныйФункционал(Профиль, РежимЗаполнения);
			НазначитьРолиАгрегирования(Профиль, РежимЗаполнения);
			
		КонецЕсли;
		
#КонецОбласти

	КонецЦикла;	

	///////////////////
	
КонецПроцедуры

Процедура ПриЗаполненииПоставляемыхПрофилейГруппДоступаРозница(ОписанияПрофилей, ПараметрыОбновления) Экспорт
	
	РежимЗаполнения = Новый Структура();
	РежимЗаполнения.Вставить("ВключатьПроизводство", Ложь);  	 //Заказ, Нанесение, Пул кодов
	РежимЗаполнения.Вставить("ВключатьИнвентаризация", Ложь);	 //Ввод и вывод из оборота
	РежимЗаполнения.Вставить("ВключатьТорговляОпт", Ложь);	 //АПП и УОР
	РежимЗаполнения.Вставить("ВключатьТорговляРозница", Ложь); //Чеки ККМ
	РежимЗаполнения.Вставить("ВключатьИмпортЭкспорт", Ложь);	 //Ввоз ЕАЭС/Импорт
	РежимЗаполнения.Вставить("Продажа", Ложь);	//Дополняют ИмпортЭкспорт: Экспорт ЕАЭС
	РежимЗаполнения.Вставить("Закупка", Ложь);	//Дополняют ИмпортЭкспорт: Отгрузка и Приемка ЕАЭС
	
	Для Каждого Профиль Из ОписанияПрофилей Цикл

		// Профиль Кассир
		Если Профиль.Идентификатор = "e8621c62-d520-4c79-aa32-d831c6140a5f" Тогда
			
			РежимЗаполнения.ВключатьПроизводство 	= Ложь;
			РежимЗаполнения.ВключатьИнвентаризация  = Ложь;
			РежимЗаполнения.ВключатьТорговляОпт 	= Ложь;
			РежимЗаполнения.ВключатьИмпортЭкспорт 	= Ложь;
			РежимЗаполнения.ВключатьТорговляРозница = Истина;
			
			НазначитьРолиОбщегоНазначения(Профиль,  РежимЗаполнения);  //Для проверки констант
			НазначитьРолиЧтенияОбъектов(Профиль, 	РежимЗаполнения);		
			НазначитьРолиИзмененияОбъектов(Профиль, РежимЗаполнения);
			
			РежимЗаполнения.ВключатьТорговляРозница = Ложь;
			НазначитьРолиДополнительныйФункционал(Профиль, РежимЗаполнения); 
			
		КонецЕсли;
		
		//Кладовщик
		Если Профиль.Идентификатор = "44639859-e400-461d-a1f8-c469b03298e4" Тогда
			
			РежимЗаполнения.ВключатьПроизводство 	= Истина;
			РежимЗаполнения.ВключатьИнвентаризация  = Истина;
			РежимЗаполнения.ВключатьТорговляОпт 	= Истина;
			РежимЗаполнения.ВключатьИмпортЭкспорт 	= Истина;
			РежимЗаполнения.Продажа = Истина;
			РежимЗаполнения.Закупка = Истина;
			РежимЗаполнения.ВключатьТорговляРозница = Истина;
			
			НазначитьРолиЧтенияОбъектов(Профиль, РежимЗаполнения);
			НазначитьРолиДополнительныйФункционал(Профиль, РежимЗаполнения);
			НазначитьРолиАгрегирования(Профиль, РежимЗаполнения);
			
			РежимЗаполнения.ВключатьТорговляРозница = Ложь; 
			НазначитьРолиИзмененияОбъектов(Профиль, РежимЗаполнения); //есть ограничения по чекам
			
			НазначитьРолиОбщегоНазначения(Профиль, РежимЗаполнения); 
			НазначитьРолиБухУчета(Профиль); 
			
		КонецЕсли;
		
		//Продавец
		Если Профиль.Идентификатор = "91cfadaa-9c9e-4535-ae62-4fc5e5749182" Тогда
			
			РежимЗаполнения.ВключатьПроизводство 	= Ложь;
			РежимЗаполнения.ВключатьИнвентаризация  = Ложь;
			РежимЗаполнения.ВключатьТорговляОпт 	= Ложь;
			РежимЗаполнения.ВключатьИмпортЭкспорт 	= Ложь;
			РежимЗаполнения.ВключатьТорговляРозница = Истина;
			
			НазначитьРолиОбщегоНазначения(Профиль,  РежимЗаполнения); //Для проверки констант
			НазначитьРолиЧтенияОбъектов(Профиль, 	РежимЗаполнения);		
			НазначитьРолиИзмененияОбъектов(Профиль, РежимЗаполнения);
			
			РежимЗаполнения.ВключатьТорговляРозница = Ложь;
			НазначитьРолиДополнительныйФункционал(Профиль, РежимЗаполнения); 
			
		КонецЕсли;

		//Кассир операционной кассы
		Если Профиль.Идентификатор = "4885520e-0ed2-4357-aca8-23041ea4998e" Тогда
			
			РежимЗаполнения.ВключатьПроизводство 	= Ложь;
			РежимЗаполнения.ВключатьИнвентаризация  = Ложь;
			РежимЗаполнения.ВключатьТорговляОпт 	= Ложь;
			РежимЗаполнения.ВключатьИмпортЭкспорт 	= Ложь;
						
			НазначитьРолиОбщегоНазначения(Профиль,  РежимЗаполнения);
			НазначитьРолиЧтенияОбъектов(Профиль,    РежимЗаполнения);		
			НазначитьРолиИзмененияОбъектов(Профиль, РежимЗаполнения);
			НазначитьРолиДополнительныйФункционал(Профиль, РежимЗаполнения);
			НазначитьРолиБухУчета(Профиль); 
			
		КонецЕсли;
		
		//Управляющий
		Если Профиль.Идентификатор = "7d509b56-976f-4b67-9f0b-a93de75c2134" Тогда
			
			РежимЗаполнения.ВключатьПроизводство 	= Истина;
			РежимЗаполнения.ВключатьИнвентаризация  = Истина;
			РежимЗаполнения.ВключатьТорговляОпт 	= Истина;
			РежимЗаполнения.ВключатьИмпортЭкспорт 	= Истина;
			РежимЗаполнения.Продажа = Истина; 
			РежимЗаполнения.Закупка = Ложь;
			РежимЗаполнения.ВключатьТорговляРозница = Истина;
			
			НазначитьРолиОбщегоНазначения(Профиль,  РежимЗаполнения); 
			НазначитьРолиЧтенияОбъектов(Профиль, 	РежимЗаполнения);		
			НазначитьРолиДополнительныйФункционал(Профиль, РежимЗаполнения);
			НазначитьРолиАгрегирования(Профиль, РежимЗаполнения);
			
			РежимЗаполнения.ВключатьТорговляРозница = Ложь;
			НазначитьРолиИзмененияОбъектов(Профиль, РежимЗаполнения); 
			
		КонецЕсли;
		
		//Менеджер
		Если Профиль.Идентификатор = "069a4464-42a0-4c5e-93da-4fcd98c713a7" Тогда
			
			РежимЗаполнения.ВключатьПроизводство 	= Ложь;
			РежимЗаполнения.ВключатьИнвентаризация  = Истина; //для доступа к подсистеме
			РежимЗаполнения.ВключатьТорговляОпт 	= Истина;
			РежимЗаполнения.ВключатьИмпортЭкспорт 	= Истина;
			РежимЗаполнения.Продажа = Истина; 
			РежимЗаполнения.Закупка = Истина;
			РежимЗаполнения.ВключатьТорговляРозница = Истина;
			
			НазначитьРолиОбщегоНазначения(Профиль, РежимЗаполнения); 
			НазначитьРолиАгрегирования(Профиль, РежимЗаполнения);
			НазначитьРолиЧтенияОбъектов(Профиль,   РежимЗаполнения);		
						
			РежимЗаполнения.ВключатьТорговляРозница = Ложь; //исключаем создание чеков
			НазначитьРолиИзмененияОбъектов(Профиль, РежимЗаполнения);
			
			НазначитьРолиДополнительныйФункционал(Профиль, РежимЗаполнения);
			НазначитьРолиБухУчета(Профиль);
 
			
		КонецЕсли;
		
	КонецЦикла;	

		//добавление новых профилей
#Область Описание_профиля_МенеджерОптовойТорговлиИСМПТ

	//Профиль предназначен для работы пользователя сервиса 1С:Маркировка для Казахстана,
	//обеспечивает доступность документов товародвижения (закупка и продажа)
	//и использование дополнительных связанных возможностей.
	
	// Профиль "Менеджер оптовой торговли (ИС МПТ)".
	ОписаниеПрофиля = УправлениеДоступом.НовоеОписаниеПрофиляГруппДоступа();
	ОписаниеПрофиля.Имя           = "МенеджерОптовойТорговлиИСМПТ";
	ОписаниеПрофиля.Идентификатор = "e47572c1-320d-493b-b8cd-6fcce8a392aa";
	ОписаниеПрофиля.Наименование  = НСтр("ru = 'Менеджер оптовой торговли (ИС МПТ) (дополнительный)'", ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.КодОсновногоЯзыка());

	РежимЗаполнения.ВключатьПроизводство 	= Ложь;
	РежимЗаполнения.ВключатьИнвентаризация  = Ложь;
	РежимЗаполнения.ВключатьТорговляОпт 	= Истина;
	РежимЗаполнения.ВключатьИмпортЭкспорт 	= Истина;
	РежимЗаполнения.Продажа = Истина; 
	РежимЗаполнения.Закупка = Истина;
	РежимЗаполнения.ВключатьТорговляРозница = Ложь;
	
	НазначитьРолиОбщегоНазначения(ОписаниеПрофиля, 	РежимЗаполнения);
	НазначитьРолиЧтенияОбъектов(ОписаниеПрофиля, 	РежимЗаполнения);
	НазначитьРолиИзмененияОбъектов(ОписаниеПрофиля, РежимЗаполнения);
	НазначитьРолиДополнительныйФункционал(ОписаниеПрофиля, РежимЗаполнения);
	НазначитьРолиАгрегирования(ОписаниеПрофиля, РежимЗаполнения);
	
	// Описание поставляемого профиля.
	Текст = НСтр("ru = 'Под профилем осуществляется доступ в ИБ менеджера по продажам или закупкам маркируемой продукции, оформление Актов приема/передачи и Уведомлений о ввозе, Уведомлений о приемке и экспорте товаров, осуществляется обмен данными с ИС МПТ, запрос информации о кодах маркировки, синхронизация данных с мобильным приложением сервиса %1.'"); 
	Текст = ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(Текст, ЭлектронноеВзаимодействиеССервисамиМаркировка.НаименованиеСервиса());
	ОписаниеПрофиля.Описание = Текст;
	
	ОписанияПрофилей.Добавить(ОписаниеПрофиля);

#КонецОбласти

#Область Описание_профиля_МенеджерРозничнойТорговлиИСМПТ

	//Профиль предназначен для работы пользователя сервиса 1С:Маркировка для Казахстана,
	//обеспечивает доступность документов розничного контура работы с маркировкой.
		
	// Профиль "Менеджер оптовой торговли (ИС МПТ)".
	ОписаниеПрофиля = УправлениеДоступом.НовоеОписаниеПрофиляГруппДоступа();
	ОписаниеПрофиля.Имя           = "МенеджерРозничнойТорговлиИСМПТ";
	ОписаниеПрофиля.Идентификатор = "10f63258-3d46-4eb6-922b-458837339dcd";
	ОписаниеПрофиля.Наименование  = НСтр("ru = 'Менеджер розничной торговли (ИС МПТ) (дополнительный)'", ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.КодОсновногоЯзыка());
	
	РежимЗаполнения.ВключатьПроизводство 	= Ложь;
	РежимЗаполнения.ВключатьИнвентаризация  = Ложь;
	РежимЗаполнения.ВключатьТорговляОпт 	= Ложь;
	РежимЗаполнения.ВключатьИмпортЭкспорт 	= Ложь;
	РежимЗаполнения.Продажа = Ложь; 
	РежимЗаполнения.Закупка = Ложь;
	РежимЗаполнения.ВключатьТорговляРозница = Истина;
	
	НазначитьРолиОбщегоНазначения(ОписаниеПрофиля, 	РежимЗаполнения);
	НазначитьРолиЧтенияОбъектов(ОписаниеПрофиля, 	РежимЗаполнения);
	НазначитьРолиИзмененияОбъектов(ОписаниеПрофиля, РежимЗаполнения);
	НазначитьРолиДополнительныйФункционал(ОписаниеПрофиля, РежимЗаполнения);
	
	// Описание поставляемого профиля.
	Текст = НСтр("ru = 'Под профилем осуществляется доступ в ИБ менеджера по розничным продажам маркируемой продукции и использование некоторых дополнительных возможностей сервиса %1.'"); 
	Текст = ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(Текст, ЭлектронноеВзаимодействиеССервисамиМаркировка.НаименованиеСервиса());
	ОписаниеПрофиля.Описание = Текст;
	
	ОписанияПрофилей.Добавить(ОписаниеПрофиля);

#КонецОбласти

#Область Описание_профиля_КладовщикМаркировкиИСМПТ

	//Профиль предназначен для работы пользователя сервиса 1С:Маркировка для Казахстана,
	//обеспечивает доступность документов инвентаризации (ввод и вывод из оборота)
	//и использование дополнительных связанных возможностей.
	
	// Профиль "Кладовщик маркировки (ИС МПТ)".
	ОписаниеПрофиля = УправлениеДоступом.НовоеОписаниеПрофиляГруппДоступа();
	ОписаниеПрофиля.Имя           = "КладовщикМаркировкиИСМПТ";
	ОписаниеПрофиля.Идентификатор = "b2c25748-ed2f-4f02-a5b2-adc193227506";
	ОписаниеПрофиля.Наименование  = НСтр("ru = 'Кладовщик маркировки (ИС МПТ) (дополнительный)'", ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.КодОсновногоЯзыка());
	
	РежимЗаполнения.ВключатьПроизводство 	= Ложь;
	РежимЗаполнения.ВключатьИнвентаризация  = Истина;
	РежимЗаполнения.ВключатьТорговляОпт 	= Ложь;
	РежимЗаполнения.ВключатьИмпортЭкспорт 	= Ложь;
	РежимЗаполнения.Продажа = Ложь; 
	РежимЗаполнения.Закупка = Ложь;
	РежимЗаполнения.ВключатьТорговляРозница = Ложь;

	НазначитьРолиОбщегоНазначения(ОписаниеПрофиля, 	РежимЗаполнения);
	НазначитьРолиЧтенияОбъектов(ОписаниеПрофиля, 	РежимЗаполнения);
	НазначитьРолиИзмененияОбъектов(ОписаниеПрофиля, РежимЗаполнения);
	НазначитьРолиДополнительныйФункционал(ОписаниеПрофиля, РежимЗаполнения);
	НазначитьРолиАгрегирования(ОписаниеПрофиля, РежимЗаполнения);
	
	// Описание поставляемого профиля.
	Текст = НСтр("ru = 'Под профилем осуществляется доступ в ИБ кладовщика по работе с маркируемой продукцией, оформление Уведомлений о вводе и выводе из оборота, формирование Агрегаций кодов маркировки, осуществляется обмен данными с ИС МПТ, проверка информации о кодах маркировки, синхронизация данных с мобильным приложением сервиса %1.'"); 
	Текст = ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(Текст, ЭлектронноеВзаимодействиеССервисамиМаркировка.НаименованиеСервиса());
	ОписаниеПрофиля.Описание = Текст;
	
	ОписанияПрофилей.Добавить(ОписаниеПрофиля);

#КонецОбласти

#Область Описание_профиля_МенеджерПроизводстваИСМПТ

	//Профиль предназначен для работы пользователя сервиса 1С:Маркировка для Казахстана,
	//обеспечивает доступность документов производственного контура (заказ кодов и их печать)
	//и использование дополнительных связанных возможностей.
	
	// Профиль "Менеджер производства (ИС МПТ)".
	ОписаниеПрофиля = УправлениеДоступом.НовоеОписаниеПрофиляГруппДоступа();
	ОписаниеПрофиля.Имя           = "МенеджерПроизводстваИСМПТ";
	ОписаниеПрофиля.Идентификатор = "db186caa-acae-4384-a5d3-da76cdd4d67f";
	ОписаниеПрофиля.Наименование  = НСтр("ru = 'Менеджер производства (ИС МПТ) (дополнительный)'", ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.КодОсновногоЯзыка());
	
	РежимЗаполнения.ВключатьПроизводство 	= Истина;
	РежимЗаполнения.ВключатьИнвентаризация  = Ложь;
	РежимЗаполнения.ВключатьТорговляОпт 	= Ложь;
	РежимЗаполнения.ВключатьИмпортЭкспорт 	= Ложь;
	РежимЗаполнения.Продажа = Ложь; 
	РежимЗаполнения.Закупка = Ложь;
	РежимЗаполнения.ВключатьТорговляРозница = Ложь;
	
	НазначитьРолиОбщегоНазначения(ОписаниеПрофиля, 	РежимЗаполнения);
	НазначитьРолиЧтенияОбъектов(ОписаниеПрофиля, 	РежимЗаполнения);
	НазначитьРолиИзмененияОбъектов(ОписаниеПрофиля, РежимЗаполнения);
	НазначитьРолиДополнительныйФункционал(ОписаниеПрофиля, РежимЗаполнения);
	НазначитьРолиАгрегирования(ОписаниеПрофиля, РежимЗаполнения);
	
	// Описание поставляемого профиля.
	ОписаниеПрофиля.Описание = НСтр("ru = 'Под профилем осуществляется доступ в ИБ менеджера по производству маркируемой продукции, оформление Заказов на эмиссию кодов, их печать и нанесение, формирование Агрегаций кодов маркировки, осуществляется обмен данными с СУЗ, проверка информации о кодах маркировки"".'");
	ОписанияПрофилей.Добавить(ОписаниеПрофиля);

#КонецОбласти

///////////////////
	
КонецПроцедуры

//Определение доступности подсистем библиотеки и добавление базовых прав
//
Процедура НазначитьРолиОбщегоНазначения(Профиль, РежимЗаполнения = Неопределено)
	
	//Общие для всех
	//ИС МПТ
	Профиль.Роли.Добавить(Метаданные.Роли.ИспользованиеРабочееМестоМаркировкаИСМПТК.Имя);
	Профиль.Роли.Добавить(Метаданные.Роли.БазовыеПраваИСМПТК.Имя);
	Профиль.Роли.Добавить(Метаданные.Роли.БазовыеПраваСУЗИСМПТК.Имя);
	
	//ИС ЦЭДМ
	Профиль.Роли.Добавить(Метаданные.Роли.ИспользованиеРабочееМестоМаркировкаИСЦЭДМ.Имя);
	Профиль.Роли.Добавить(Метаданные.Роли.БазовыеПраваИСЦЭДМ.Имя);
				
КонецПроцедуры

Процедура НазначитьРолиЧтенияОбъектов(Профиль, РежимЗаполнения = Неопределено)

	Если РежимЗаполнения = Неопределено
		Или РежимЗаполнения.ВключатьТорговляРозница Тогда
		
		Профиль.Роли.Добавить(Метаданные.Роли.ЧтениеРозничноеВыбытиеМаркированнойПродукцииИСМПТК.Имя);
		
	КонецЕсли;
	
	Если РежимЗаполнения = Неопределено
		Или РежимЗаполнения.ВключатьТорговляОпт Тогда
		
		//ИС МПТ
		Профиль.Роли.Добавить(Метаданные.Роли.ЧтениеАППиУОРИСМПТК.Имя);
		//ИС ЦЭДМ
		Профиль.Роли.Добавить(Метаданные.Роли.ЧтениеАППИСЦЭДМ.Имя);
		Профиль.Роли.Добавить(Метаданные.Роли.ЧтениеАВПИСЦЭДМ.Имя);
		
	КонецЕсли;
	
	Если РежимЗаполнения = Неопределено
		Или (РежимЗаполнения.ВключатьИмпортЭкспорт 
		И РежимЗаполнения.Продажа) Тогда
		
		Профиль.Роли.Добавить(Метаданные.Роли.ЧтениеУведомленийОбЭкспортеЕАЭСИСМПТК.Имя);
		
	КонецЕсли;
		
	Если РежимЗаполнения = Неопределено
		Или (РежимЗаполнения.ВключатьИмпортЭкспорт 
		И РежимЗаполнения.Закупка) Тогда
		
		//ИС МПТ
		Профиль.Роли.Добавить(Метаданные.Роли.ЧтениеУведомленийОПриемкеЕАЭСИСМПТК.Имя);
		Профиль.Роли.Добавить(Метаданные.Роли.ЧтениеУведомленийОбОтгрузкеЕАЭСИСМПТК.Имя);
		Профиль.Роли.Добавить(Метаданные.Роли.ЧтениеУведомленийОВвозеИСМПТК.Имя);
		//ИС ЦЭД
		Профиль.Роли.Добавить(Метаданные.Роли.ЧтениеОтчетОПередачеИСЦЭДМ.Имя);
		Профиль.Роли.Добавить(Метаданные.Роли.ЧтениеУведомленийОВвозеИСЦЭДМ.Имя);
		
	КонецЕсли;
	
	Если РежимЗаполнения = Неопределено
		Или РежимЗаполнения.ВключатьИнвентаризация Тогда
		
		//ИС МПТ
		Профиль.Роли.Добавить(Метаданные.Роли.ЧтениеУведомленийОВводеВОборотИСМПТК.Имя);
		Профиль.Роли.Добавить(Метаданные.Роли.ЧтениеУведомленийОВыводеИзОборотаИСМПТК.Имя);
		//ИС ЦЭДМ
		Профиль.Роли.Добавить(Метаданные.Роли.ЧтениеУведомленийОВводеВОборотИСЦЭДМ.Имя);
		Профиль.Роли.Добавить(Метаданные.Роли.ЧтениеУведомленийОВыводеИзОборотаИСЦЭДМ.Имя);
	
	КонецЕсли;
	
	Если РежимЗаполнения = Неопределено
		Или РежимЗаполнения.ВключатьПроизводство Тогда
		
		//ИС МПТ СУЗ
		Профиль.Роли.Добавить(Метаданные.Роли.ЧтениеЗаказовНаЭмиссиюСУЗИСМПТК.Имя);
		Профиль.Роли.Добавить(Метаданные.Роли.ЧтениеОтчетовОНанесенииСУЗИСМПТК.Имя);
		Профиль.Роли.Добавить(Метаданные.Роли.ЧтениеПулКодовМаркировкиСУЗИСМПТК.Имя);
		
	КонецЕсли;
		
	//Общие
	Профиль.Роли.Добавить(Метаданные.Роли.ЧтениеШаблоновПечатиИСМПТК.Имя);
	Профиль.Роли.Добавить(Метаданные.Роли.ЧтениеСкладовИСЦЭДМ.Имя);
				
КонецПроцедуры

Процедура НазначитьРолиИзмененияОбъектов(Профиль, РежимЗаполнения = Неопределено)

	Если РежимЗаполнения = Неопределено
		Или РежимЗаполнения.ВключатьТорговляРозница Тогда
		
		Профиль.Роли.Добавить(Метаданные.Роли.ДобавлениеИзменениеРозничноеВыбытиеМаркированнойПродукцииИСМПТК.Имя);
		
	КонецЕсли;
	
	Если РежимЗаполнения = Неопределено
		Или РежимЗаполнения.ВключатьТорговляОпт Тогда
		
		//ИС МПТ
		Профиль.Роли.Добавить(Метаданные.Роли.ДобавлениеИзменениеАППиУОРИСМПТК.Имя);
		//ИС ЦЭДМ
		Профиль.Роли.Добавить(Метаданные.Роли.ДобавлениеИзменениеАППИСЦЭДМ.Имя);
		Профиль.Роли.Добавить(Метаданные.Роли.ДобавлениеИзменениеАВПИСЦЭДМ.Имя);
		
	КонецЕсли;
	
	Если РежимЗаполнения = Неопределено
		Или (РежимЗаполнения.ВключатьИмпортЭкспорт
		И РежимЗаполнения.Продажа) Тогда
		
		Профиль.Роли.Добавить(Метаданные.Роли.ДобавлениеИзменениеУведомленийОбЭкспортеЕАЭСИСМПТК.Имя);
		
	КонецЕсли;
	
	Если РежимЗаполнения = Неопределено
		Или (РежимЗаполнения.ВключатьИмпортЭкспорт
		И РежимЗаполнения.Закупка) Тогда	
		
		//ИС МПТ
		Профиль.Роли.Добавить(Метаданные.Роли.ДобавлениеИзменениеУведомленийОПриемкеЕАЭСИСМПТК.Имя);
		Профиль.Роли.Добавить(Метаданные.Роли.ДобавлениеИзменениеУведомленийОбОтгрузкеЕАЭСИСМПТК.Имя);
		Профиль.Роли.Добавить(Метаданные.Роли.ДобавлениеИзменениеУведомленийОВвозеИСМПТК.Имя);
		//ИС ЦЭДМ
		Профиль.Роли.Добавить(Метаданные.Роли.ДобавлениеИзменениеОтчетОПередачеИСЦЭДМ.Имя);
		Профиль.Роли.Добавить(Метаданные.Роли.ДобавлениеИзменениеУведомленийОВвозеИСЦЭДМ.Имя);
		
	КонецЕсли;
	
	Если РежимЗаполнения = Неопределено
		Или РежимЗаполнения.ВключатьИнвентаризация Тогда
		
		//ИС МПТ
		Профиль.Роли.Добавить(Метаданные.Роли.ДобавлениеИзменениеУведомленийОВводеВОборотИСМПТК.Имя);
		Профиль.Роли.Добавить(Метаданные.Роли.ДобавлениеИзменениеУведомленийОВыводеИзОборотаИСМПТК.Имя);
		//ИС ЦЭДМ
		Профиль.Роли.Добавить(Метаданные.Роли.ДобавлениеИзменениеУведомленийОВводеВОборотИСЦЭДМ.Имя);
		Профиль.Роли.Добавить(Метаданные.Роли.ДобавлениеИзменениеУведомленийОВыводеИзОборотаИСЦЭДМ.Имя);
		
	КонецЕсли;
		
	Если РежимЗаполнения = Неопределено
		Или РежимЗаполнения.ВключатьПроизводство Тогда
		
		//ИС МПТ СУЗ
		Профиль.Роли.Добавить(Метаданные.Роли.ДобавлениеИзменениеЗаказовНаЭмиссиюСУЗИСМПТК.Имя);
		Профиль.Роли.Добавить(Метаданные.Роли.ДобавлениеИзменениеОтчетовОНанесенииСУЗИСМПТК.Имя);
		Профиль.Роли.Добавить(Метаданные.Роли.ДобавлениеИзменениеПулКодовМаркировкиСУЗИСМПТК.Имя);
				
	КонецЕсли;
	
	//Общие
	Профиль.Роли.Добавить(Метаданные.Роли.ДобавлениеИзменениеШаблоновПечатиИСМПТК.Имя);
	Профиль.Роли.Добавить(Метаданные.Роли.ДобавлениеИзменениеСкладовИСЦЭДМ.Имя);
		
КонецПроцедуры

Процедура НазначитьРолиДополнительныйФункционал(Профиль, РежимЗаполнения = Неопределено)
		
	Если РежимЗаполнения = Неопределено
		Или РежимЗаполнения.ВключатьПроизводство Тогда
		
		Профиль.Роли.Добавить(Метаданные.Роли.ИспользованиеОбработкиПечатьКодовИзВнешнегоФайлаИСМПТК.Имя);
		Профиль.Роли.Добавить(Метаданные.Роли.ПравоПечатиЭтикетокКодовМаркировкиИСМПТК.Имя);
		
	КонецЕсли;
	
	Если РежимЗаполнения = Неопределено
		Или РежимЗаполнения.ВключатьТорговляРозница
		Или РежимЗаполнения.ВключатьТорговляОпт
		Или РежимЗаполнения.ВключатьИнвентаризация Тогда

	    Профиль.Роли.Добавить(Метаданные.Роли.ИспользованиеОбработкиПроверкаСостоянияИВладельцаКМИСМПТК.Имя);
				
	КонецЕсли;                                                              
			
	//Общие
	Профиль.Роли.Добавить(Метаданные.Роли.ИспользованиеМобильногоПриложенияИСМПТК.Имя);
	Профиль.Роли.Добавить(Метаданные.Роли.ИспользованиеОбработкиОбъединенияНесколькихФайловИСМПТК.Имя);
		
КонецПроцедуры

Процедура НазначитьРолиАдминистратора(Профиль)

	//ИС МПТ
	Профиль.Роли.Добавить(Метаданные.Роли.АдминистрированиеИСМПТК.Имя);
	//ИС ЦЭДМ
	Профиль.Роли.Добавить(Метаданные.Роли.АдминистрированиеИСЦЭДМ.Имя);
		
КонецПроцедуры

Процедура НазначитьРолиБухУчета(Профиль)

	Профиль.Роли.Добавить(Метаданные.Роли.ПравоУправленияЛичнымиСчетамиИСМПТК.Имя);	
	
КонецПроцедуры

//Агрегация находится на пересечении нескольких подсистем - инвентаризации и производства, 
//но также может затрагиваться и в товародвижении (точно не нужна только в розничном контуре),
//поэтому ее роли вынесены в отдельную функцию.
//
Процедура НазначитьРолиАгрегирования(Профиль, РежимЗаполнения = Неопределено)
	
	//ИС МПТ
	Профиль.Роли.Добавить(Метаданные.Роли.ДобавлениеИзменениеАгрегацийИСМПТК.Имя);
	Профиль.Роли.Добавить(Метаданные.Роли.ЧтениеАгрегацийИСМПТК.Имя);
	Профиль.Роли.Добавить(Метаданные.Роли.ИспользованиеОбработкиСозданиеНесколькихОтчетовОбАгрегацииИСМПТК.Имя);
	Профиль.Роли.Добавить(Метаданные.Роли.ПравоГенерацииКодовSSCCИСМПТК.Имя);
	//ИС ЦЭДМ
	Профиль.Роли.Добавить(Метаданные.Роли.ДобавлениеИзменениеАгрегацийИСЦЭДМ.Имя);
	Профиль.Роли.Добавить(Метаданные.Роли.ЧтениеАгрегацийИСЦЭДМ.Имя);	
	
	Если РежимЗаполнения = Неопределено
		Или РежимЗаполнения.ВключатьИнвентаризация
		Или РежимЗаполнения.ВключатьПроизводство Тогда
		
		//Проверка наличия остатков товаров по данным ранее сформированных упаковок
		Профиль.Роли.Добавить(Метаданные.Роли.ИспользованиеОбработкиРабочееМестоПроверкаАгрегацииИСМПТК.Имя);
		
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ОбновлениеИБ

Процедура ПриДобавленииОбработчиковОбновления(Обработчики) Экспорт
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.0.4.7";
	Обработчик.РежимВыполнения = "Монопольно";
	Обработчик.Процедура = "ИнтеграцияИСМПТКПереопределяемый.ОбновитьСуществующиеДокументыАгрегацияКМ";
	ТекстКомментария = НСтр("ru = 'Обновление структуры данных существующих документов ""%НаименованиеДокумента%"".'");
	ТекстКомментария = СтрЗаменить(ТекстКомментария, "%НаименованиеДокумента%", ОбщегоНазначенияИСМПТКВызовСервера.ИмяДокументаАгрегацияКодовМаркировкиСУЗИСМПТК());
	Обработчик.Комментарий = ТекстКомментария;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.0.5.1";
	Обработчик.РежимВыполнения = "Монопольно";
	Обработчик.Процедура = "ИнтеграцияИСМПТКПереопределяемый.ОбновитьСуществующиеДокументыВводаИВывода";
	ТекстКомментария = НСтр("ru = 'Обновление структуры данных существующих документов ""%НаименованиеДокумента%"".'");
	ТекстКомментария = СтрЗаменить(ТекстКомментария, "%НаименованиеДокумента%", 
					   ОбщегоНазначенияИСМПТКВызовСервера.ИмяДокументаУведомлениеОВводеВОборотИСМПТК() + ", " + ОбщегоНазначенияИСМПТКВызовСервера.ИмяДокументаУведомлениеОВыводеИзОборотаИСМПТК());
	Обработчик.Комментарий = ТекстКомментария;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.0.7.3";
	Обработчик.РежимВыполнения = "Монопольно";
	Обработчик.Процедура = "ИнтеграцияИСМПТКПереопределяемый.ОбновитьРССтатусыЗаказовИСМПТК";
	ТекстКомментария = НСтр("ru = 'Обновление структуры служебного регистра сведений ""%НаименованиеРегистра%"".'");
	ТекстКомментария = СтрЗаменить(ТекстКомментария, "%НаименованиеРегистра%", Метаданные.РегистрыСведений.СтатусыЗаказовИСМПТК.Представление());
	Обработчик.Комментарий = ТекстКомментария;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.0.8.2";
	Обработчик.РежимВыполнения = "Монопольно";
	Обработчик.Процедура = "ИнтеграцияИСМПТКПереопределяемый.ОбновитьСтатусыДокументовИСЦЭДМ";
	Обработчик.Комментарий = НСтр("ru = 'Обновление служебных статусов документов ИС ЦЭДМ.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.0.8.2";
	Обработчик.РежимВыполнения = "Монопольно";
	Обработчик.Процедура = "ИнтеграцияИСМПТКПереопределяемый.ЗаполнитьЭтапыОформленияДокументовИСЦЭДМ";
	Обработчик.Комментарий = НСтр("ru = 'Заполнение значений текущего этапа оформления у документов ИС ЦЭДМ.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.0.8.2";
	Обработчик.РежимВыполнения = "Монопольно";
	Обработчик.Процедура = "ИнтеграцияИСМПТКПереопределяемый.ДозаполнитьИтогиВАктахИСЦЭДМ";
	ТекстКомментария = НСтр("ru = 'Заполнение служебных значений в таблице ""Итоги"" в документах ""%НаименованиеДокументов%"".'");
	ТекстКомментария = СтрЗаменить(ТекстКомментария, "%НаименованиеДокументов%", Метаданные.Документы.АктПриемаПередачиИСЦЭДМ.ПредставлениеСписка);
	Обработчик.Комментарий = ТекстКомментария;

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.0.10.3";
	Обработчик.РежимВыполнения = "Монопольно";
	Обработчик.Процедура = "ИнтеграцияИСМПТКПереопределяемый.ЗаполнитьЭтапыОформленияАктыВнутреннегоПеремещенияИСЦЭДМ";
	ТекстКомментария = НСтр("ru = 'Заполнение значений текущего этапа оформления у документов ""%НаименованиеДокументов%"".'");
	ТекстКомментария = СтрЗаменить(ТекстКомментария, "%НаименованиеДокументов%", Метаданные.Документы.АктПриемаПередачиИСЦЭДМ.ПредставлениеСписка);
	Обработчик.Комментарий = ТекстКомментария;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.0.11.1";
	Обработчик.РежимВыполнения = "Монопольно";
	Обработчик.Процедура = "ИнтеграцияИСМПТКПереопределяемый.ЗаполнитьНаправлениеВДокументахОтгрузкиЕАЭС";
	ТекстКомментария = НСтр("ru = 'Заполнение служебного реквизита ""Направление"" в документах ""%НаименованиеДокумента%"".'");
	ТекстКомментария = СтрЗаменить(ТекстКомментария, "%НаименованиеДокумента%", ОбщегоНазначенияИСМПТКВызовСервера.ИмяДокументаУведомлениеОВвозеИзЕАЭСИСМПТК());
	Обработчик.Комментарий = ТекстКомментария;

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.0.14.1";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Процедура = "ИнтеграцияИСМПТКПереопределяемый.ЗаполнитьТоварнуюГруппуВАктахИСМПТ_ОбработатьДанныеДляПереходаНаНовуюВерсию_1_0_14_1";
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "ИнтеграцияИСМПТКПереопределяемый.ЗаполнитьТоварнуюГруппуВАктахИСМПТ_ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию_1_0_14_1";
	Обработчик.ОчередьОтложеннойОбработки = 10;
	Обработчик.ПроцедураПроверки  = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.ЧитаемыеОбъекты    = "Документ.АктПриемаПередачиИСМПТК";
	Обработчик.ИзменяемыеОбъекты  = "Документ.АктПриемаПередачиИСМПТК";
	Обработчик.БлокируемыеОбъекты = "Документ.АктПриемаПередачиИСМПТК";
	ТекстКомментария = НСтр("ru = 'Заполнение нового реквизита ""Товарная группа"" в документах ""%НаименованиеДокумента%"".'");
	ТекстКомментария = СтрЗаменить(ТекстКомментария, "%НаименованиеДокумента%", ОбщегоНазначенияИСМПТКВызовСервера.ИмяДокументаАктПриемаПередачиИСМПТК());
	Обработчик.Комментарий = ТекстКомментария;
	
КонецПроцедуры

#Область ОбработчикиОбновления

//В версии БМ 1.0.4.6 изменилась структура документа Агрегация КМ:
//ранее для документов, формируемых по групповой упаковке табака, т.е. когда код агрегата - это ДатаМатрикс со спецсимволом,
//в качестве кода агрегата ошибочно хранилась либо строка, если документ создавался вручную, 
//либо полный КМ, если он создавался обработкой пакетной загрузки агрегаций.
//В первом случае нарушался формат кода, во втором - при открытии документа возникала ошибка из-за передачи неподдерживаемого символа в клиент-серверном переходе.
//В версии 1.0.4.6 в ТЧ Упаковки реквизит ИдентификационныйКодЕдиницыАгрегации оставлен для полного КМ в кодировке Base64 - как во всех документах библиотеки,
//он отправляется по АПИ, предварительно переодировавшись в строку, также добавлен реквизит КодИдентификацииУпаковки,
//который выводится на форму и содержит КИ - укороченный код для визуального восприятия пользователем.
//В ТЧ Агрегированых кодов также внесены изменения:
//теперь там 2 реквизита - КодМаркировки и КодИдентификации, которые заполняются стандартно для библиотчных документов.
//
Процедура ОбновитьСуществующиеДокументыАгрегацияКМ() Экспорт
	
	#Область Комментарий
	//Принцип преобразования данных для старых документов
	//ТЧ Упаковки
	//1) Если ИдентификационныйКодЕдиницыАгрегации - SSCC
	//Такой код не содержит спецсимволов и не требует преобразования. Заполняем его в оба реквизита
	//2) Если ИдентификационныйКодЕдиницыАгрегации - Datamatrix, содержащий спецсимволы (у пользователей табачки, которые использовали обработку группового создания Агрегаций)
	//ИдентификационныйКодЕдиницыАгрегации заполняем значением ИдентификационныйКодЕдиницыАгрегации в Base64,
	//КодИдентификацииУпаковки заполняем значением КИ из структуры разбора ИдентификационныйКодЕдиницыАгрегации
	//3) Если ИдентификационныйКодЕдиницыАгрегации - строка без спецсимволов (либо КИ, либо нарушенный по структуре КМ - у пользователей табачки, которые создавали документы вручную)
	//ИдентификационныйКодЕдиницыАгрегации и КодИдентификацииУпаковки пытаемся заполнить значением КИ из структуры разбора ИдентификационныйКодЕдиницыАгрегации,
	//если не получилось разобрать - оба заполняем значением ИдентификационныйКодЕдиницыАгрегации
	//ТЧ АгрегированныеКМ
	//Т.к. значений полных КМ для вложенных позиций в базе нет, заполняем новое поле преобразованным в Base64 КодИдентификации
	//	
	//Таким образом, старые документы будут корректно отображаться при открытии, также должна сохраниться возможность их отправки на сервер.
	#КонецОбласти
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	АгрегацияКодовМаркировкиСУЗИСМПТКАгрегированныеКМ.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.АгрегацияКодовМаркировкиСУЗИСМПТК.АгрегированныеКМ КАК АгрегацияКодовМаркировкиСУЗИСМПТКАгрегированныеКМ";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		НачатьТранзакцию();
		Попытка
			
			ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
			Если ДокументОбъект = Неопределено Тогда
				ОтменитьТранзакцию();
				ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(Выборка.Ссылка);
				Продолжить;
			КонецЕсли;
			
			//Обработка ТЧ Упаковки
			Для Каждого СтрокаКодАгрегата Из ДокументОбъект.Упаковки Цикл
				
				//Пытаемся разобрать код маркировки
				Если Не РазборИОбработкаКодовМаркировкиИСМПТКСлужебный.ЭтоСтрокаФорматаBase64(СтрокаКодАгрегата.ИдентификационныйКодЕдиницыАгрегации) Тогда
					Штрихкод = РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйКлиентСервер.ШтрихкодВBase64(СтрокаКодАгрегата.ИдентификационныйКодЕдиницыАгрегации);
				Иначе
					Штрихкод = СтрокаКодАгрегата.ИдентификационныйКодЕдиницыАгрегации;
				КонецЕсли;
				ИсходныеДанные = Новый Структура("Штрихкод, ФорматBase64", Штрихкод, Истина);
				СтруктураКодовМаркировки = ИнтеграцияИСМПТКВызовСервера.ПолучитьКодыМаркировки(ИсходныеДанные);   
				
				//Если удалось разобрать код, вернется структура. Если нет - текст сообщения об ошибке.
				Если ТипЗнч(СтруктураКодовМаркировки) = Тип("Строка") Тогда
					//Считаем, что это SSCC и добавляем его без разбора
					СтрокаКодАгрегата.КодИдентификацииУпаковки 			   = СтрокаКодАгрегата.ИдентификационныйКодЕдиницыАгрегации; //КИ
					СтрокаКодАгрегата.ИдентификационныйКодЕдиницыАгрегации = Штрихкод;  //КМ в Base64
				Иначе
					СтрокаКодАгрегата.КодИдентификацииУпаковки			   = СтруктураКодовМаркировки.КодИдентификации;
					СтрокаКодАгрегата.ИдентификационныйКодЕдиницыАгрегации = СтруктураКодовМаркировки.КодМаркировки; 
				КонецЕсли;
				
			КонецЦикла;
			
			//Обработчка ТЧ Агрегаты
			Для Каждого СтрокаКодВложенный Из ДокументОбъект.АгрегированныеКМ Цикл
				
				Если Не РазборИОбработкаКодовМаркировкиИСМПТКСлужебный.ЭтоСтрокаФорматаBase64(СтрокаКодВложенный.КодИдентификации) Тогда
					СтрокаКодВложенный.КодМаркировки = РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйКлиентСервер.ШтрихкодВBase64(СтрокаКодВложенный.КодИдентификации);
				Иначе
				    СтрокаКодВложенный.КодМаркировки = СтрокаКодВложенный.КодИдентификации;
				КонецЕсли;
				
			КонецЦикла;
			
			ОбщегоНазначенияИСМПТКПереопределяемый.ЗаписатьДанные(ДокументОбъект);
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			
			ТекстСообщения = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияНеУдалосьОбработатьДокументПоПричине();
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Ссылка%",  Выборка.Ссылка);
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Причина%", ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
			ЗаписьЖурналаРегистрации(ОбщегоНазначенияИСМПТКПереопределяемый.СобытиеЖурналаРегистрации(), 
									 УровеньЖурналаРегистрации.Предупреждение, 
									 Метаданные.Документы.АгрегацияКодовМаркировкиСУЗИСМПТК, 
									 Выборка.Ссылка, ТекстСообщения);
			
			ВызватьИсключение;
			
		КонецПопытки;
	КонецЦикла;
		
КонецПроцедуры

//В версии БМ 1.0.5.1 изменилась структура документов Ввода и вывода из оборота:
//поля АПИ originalDocInfo, docName и docNumber (данные первичного документа) ранее заполнялись автоматически при отправке,
//теперь они добавлены в качестве реквизитов документов на вкладку Прочее. 
//Обработчик перезаполняет данные этих полей в существующих документах базы,
//т.к. реквизиты обязательны к заполнению при отправке. 
//
Процедура ОбновитьСуществующиеДокументыВводаИВывода() Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	УведомлениеОВводеВОборотИСМПТК.Ссылка КАК Ссылка,
	|	""Ввод"" КАК ТипУведомления
	|ИЗ
	|	Документ.УведомлениеОВводеВОборотИСМПТК КАК УведомлениеОВводеВОборотИСМПТК
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	УведомлениеОВыводеИзОборотаИСМПТК.Ссылка,
	|	""Вывод""
	|ИЗ
	|	Документ.УведомлениеОВыводеИзОборотаИСМПТК КАК УведомлениеОВыводеИзОборотаИСМПТК";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		НачатьТранзакцию();
		Попытка
			
			ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
			Если ДокументОбъект = Неопределено Тогда
				ОтменитьТранзакцию();
				ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(Выборка.Ссылка);
				Продолжить;
			КонецЕсли;
			
			ПредставлениеВвод  = Метаданные.Документы.УведомлениеОВводеВОборотИСМПТК.Представление();
			ПредставлениеВывод = Метаданные.Документы.УведомлениеОВыводеИзОборотаИСМПТК.Представление();
			ДокументОбъект.ДокументОснованиеНаименование = ?(Выборка.ТипУведомления = "Ввод", ПредставлениеВвод, ПредставлениеВывод);
			ДокументОбъект.ДокументОснованиеДата  = ДокументОбъект.Дата;
			ДокументОбъект.ДокументОснованиеНомер = ДокументОбъект.Номер;
			
			ОбщегоНазначенияИСМПТКПереопределяемый.ЗаписатьДанные(ДокументОбъект);
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			
			Если Выборка.ТипУведомления = "Ввод" Тогда
				ОбъектМетаданных = Метаданные.Документы.УведомлениеОВводеВОборотИСМПТК;
			Иначе
				ОбъектМетаданных = Метаданные.Документы.УведомлениеОВыводеИзОборотаИСМПТК;
			КонецЕсли;
			ТекстСообщения = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияНеУдалосьОбработатьДокументПоПричине();
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Ссылка%",  Выборка.Ссылка);
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Причина%", ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
			ЗаписьЖурналаРегистрации(ОбщегоНазначенияИСМПТКПереопределяемый.СобытиеЖурналаРегистрации(), 
									 УровеньЖурналаРегистрации.Предупреждение, 
									 ОбъектМетаданных, 
									 Выборка.Ссылка, ТекстСообщения);
			
			ВызватьИсключение;
			
		КонецПопытки;
	КонецЦикла;

КонецПроцедуры

//В версии БМ 1.0.7.3 изменилась структура РС СтатусыЗаказовИСМПТК:
//добавился новый реквизит Организация, т.к. регистр участвует в разделении данных ИБ 
//и должен разграничиваться типовым механизмом. 
//Обработчик перезаполняет записи регистра, осуществляя заполнение нового поля 
//по данным ЗаказаНаЭмиссию.
//
Процедура ОбновитьРССтатусыЗаказовИСМПТК() Экспорт

	МетаданныеОбъекта = Метаданные.РегистрыСведений.СтатусыЗаказовИСМПТК;
	
	Запрос = Новый Запрос();
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СтатусыЗаказовИСМПТК.GTIN КАК GTIN,
	|	СтатусыЗаказовИСМПТК.ЗаказНаЭмиссию КАК ЗаказНаЭмиссию,
	|	СтатусыЗаказовИСМПТК.Организация КАК Организация,
	|	СтатусыЗаказовИСМПТК.Статус КАК Статус,
	|	СтатусыЗаказовИСМПТК.Идентификатор КАК Идентификатор
	|ИЗ
	|	РегистрСведений.СтатусыЗаказовИСМПТК КАК СтатусыЗаказовИСМПТК";
	
	Выборка = Запрос.Выполнить().Выбрать();
	НаборЗаписей = РегистрыСведений.СтатусыЗаказовИСМПТК.СоздатьНаборЗаписей();
	
	Пока Выборка.Следующий() Цикл
		
		НаборЗаписей.Очистить();
		
		СтрокаНабора = НаборЗаписей.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаНабора, Выборка);
		СтрокаНабора.Организация = Выборка.ЗаказНаЭмиссию.Организация;
			
		НачатьТранзакцию();
		Попытка
						
			НаборЗаписей.Отбор.GTIN.Установить(Выборка.GTIN);
			НаборЗаписей.Отбор.ЗаказНаЭмиссию.Установить(Выборка.ЗаказНаЭмиссию);
			НаборЗаписей.Отбор.Статус.Установить(Выборка.Статус);
			НаборЗаписей.Отбор.Организация.Установить(Выборка.Организация);
			
			НаборЗаписей.ОбменДанными.Загрузка = Истина;
			НаборЗаписей.Записать();
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ТекстСообщения = НСтр("ru = 'Не удалось обработать запись в регистре ""%ИмяРегистра%"" по причине:'")
						   + Символы.ПС
						   + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ИмяРегистра%", Метаданные.РегистрыСведений.СтатусыЗаказовИСМПТК.Представление());
			ЗаписьЖурналаРегистрации(ОбщегоНазначенияИСМПТКПереопределяемый.СобытиеЖурналаРегистрации(),
									 УровеньЖурналаРегистрации.Предупреждение,
									 МетаданныеОбъекта,, ТекстСообщения);
			ОтменитьТранзакцию();
			Прервать;
			
		КонецПопытки;
		
	КонецЦикла;
	
КонецПроцедуры

//В версии БМ 1.0.8.2 был пересмотрен подход состав статусов документов ИС ЦЭДМ:
//многие статусы были удалены, т.к. не соответствуют новой версии АПИ системы ЦЭДМ.
//также пересмотрен поход к статусу неотправленного документа. Ранее некоторым документам, например, Актам, 
//при создании в базе назначался статус Черновик (серверный). Но это некорректно, т.к. фактически этот документ
//еще не отправлен в ИС МПТ, Обработчик заменяет статус таких документов на значение НеОпределен - внутренний статус без аналогов на сервере.
//
Процедура ОбновитьСтатусыДокументовИСЦЭДМ() Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	АктПриемаПередачиИСЦЭДМ.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.АктПриемаПередачиИСЦЭДМ КАК АктПриемаПередачиИСЦЭДМ
	|ГДЕ
	|	АктПриемаПередачиИСЦЭДМ.НомерИСЦЭДМ = """"
	|	И АктПриемаПередачиИСЦЭДМ.Статус = &Статус
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	УведомлениеОВыводеИзОборотаИСЦЭДМ.Ссылка
	|ИЗ
	|	Документ.УведомлениеОВыводеИзОборотаИСЦЭДМ КАК УведомлениеОВыводеИзОборотаИСЦЭДМ
	|ГДЕ
	|	УведомлениеОВыводеИзОборотаИСЦЭДМ.НомерИСЦЭДМ = """"
	|	И УведомлениеОВыводеИзОборотаИСЦЭДМ.Статус = &Статус
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	УведомлениеОВводеВОборотИСЦЭДМ.Ссылка
	|ИЗ
	|	Документ.УведомлениеОВводеВОборотИСЦЭДМ КАК УведомлениеОВводеВОборотИСЦЭДМ
	|ГДЕ
	|	УведомлениеОВводеВОборотИСЦЭДМ.НомерИСЦЭДМ = """"
	|	И УведомлениеОВводеВОборотИСЦЭДМ.Статус = &Статус";
	
	Запрос.УстановитьПараметр("Статус", ПредопределенноеЗначение("Перечисление.СтатусыДокументовИСЦЭДМ.Черновик"));
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		НачатьТранзакцию();
		Попытка
			
			ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
			Если ДокументОбъект = Неопределено Тогда
				ОтменитьТранзакцию();
				ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(Выборка.Ссылка);
				Продолжить;
			КонецЕсли;
			
			ДокументОбъект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыДокументовИСЦЭДМ.НеОпределен");
			ДокументОбъект.ОбменДанными.Загрузка = Истина;
			
			ОбщегоНазначенияИСМПТКПереопределяемый.ЗаписатьДанные(ДокументОбъект);
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			
			ТекстСообщения = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияНеУдалосьОбработатьДокументПоПричине();
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Ссылка%",  Выборка.Ссылка);
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Причина%", ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
			ЗаписьЖурналаРегистрации(ОбщегоНазначенияИСМПТКПереопределяемый.СобытиеЖурналаРегистрации(), 
									 УровеньЖурналаРегистрации.Предупреждение, 
									 Метаданные.ОбщиеМодули.ИнтеграцияИСМПТКПереопределяемый,
									 Выборка.Ссылка, ТекстСообщения);
			
			ВызватьИсключение;
			
		КонецПопытки;
	КонецЦикла;

КонецПроцедуры

//В версии БМ 1.0.8.2 у документов ЦЭДМ появился реквизит Этап оформления. 
//Данный обработчик выполняет заполнение первичного значения этого реквизита в существующих документах. 
//
Процедура ЗаполнитьЭтапыОформленияДокументовИСЦЭДМ() Экспорт
	
	//Обработка Уведомлений
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	УведомлениеОВыводеИзОборотаИСЦЭДМ.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.УведомлениеОВыводеИзОборотаИСЦЭДМ КАК УведомлениеОВыводеИзОборотаИСЦЭДМ
	|ГДЕ
	|	УведомлениеОВыводеИзОборотаИСЦЭДМ.ЭтапОформления = ЗНАЧЕНИЕ(Перечисление.ЭтапыОформленияДокументовИСЦЭДМ.ПустаяСсылка)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	УведомлениеОВводеВОборотИСЦЭДМ.Ссылка
	|ИЗ
	|	Документ.УведомлениеОВводеВОборотИСЦЭДМ КАК УведомлениеОВводеВОборотИСЦЭДМ
	|ГДЕ
	|	УведомлениеОВводеВОборотИСЦЭДМ.ЭтапОформления = ЗНАЧЕНИЕ(Перечисление.ЭтапыОформленияДокументовИСЦЭДМ.ПустаяСсылка)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	АктПриемаПередачиИСЦЭДМ.Ссылка
	|ИЗ
	|	Документ.АктПриемаПередачиИСЦЭДМ КАК АктПриемаПередачиИСЦЭДМ
	|ГДЕ
	|	АктПриемаПередачиИСЦЭДМ.ЭтапОформления = ЗНАЧЕНИЕ(Перечисление.ЭтапыОформленияДокументовИСЦЭДМ.ПустаяСсылка)";	
		
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		НачатьТранзакцию();
		Попытка
			
			ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
			Если ДокументОбъект = Неопределено Тогда
				ОтменитьТранзакцию();
				ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(Выборка.Ссылка);
				Продолжить;
			КонецЕсли;
						
			Если ДокументОбъект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыДокументовИСЦЭДМ.Сформирован")
				Или ДокументОбъект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыДокументовИСЦЭДМ.ОшибкаПриПроверке") 
				Или ДокументОбъект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыДокументовИСЦЭДМ.ОжидаетПодтверждение")
				Или ДокументОбъект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыДокументовИСЦЭДМ.Отозван")
				Или ДокументОбъект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыДокументовИСЦЭДМ.Принят")
				Или ДокументОбъект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыДокументовИСЦЭДМ.Аннулирован")
				Или ДокументОбъект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыДокументовИСЦЭДМ.Отклонен")
				Или ДокументОбъект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыДокументовИСЦЭДМ.Сформирован")
				Или ДокументОбъект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыДокументовИСЦЭДМ.ЗапрошеноУточнение") Тогда
				//документ уже был отправлен и зарегистрирован на сервере
				ДокументОбъект.ЭтапОформления = ПредопределенноеЗначение("Перечисление.ЭтапыОформленияДокументовИСЦЭДМ.Отправлен");
			Иначе
				ДокументОбъект.ЭтапОформления = ПредопределенноеЗначение("Перечисление.ЭтапыОформленияДокументовИСЦЭДМ.ВРаботе");
			КонецЕсли;
			
			ДокументОбъект.ОбменДанными.Загрузка = Истина;
			ОбщегоНазначенияИСМПТКПереопределяемый.ЗаписатьДанные(ДокументОбъект);
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			
			ТекстСообщения = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияНеУдалосьОбработатьДокументПоПричине();
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Ссылка%",  Выборка.Ссылка);
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Причина%", ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
			ЗаписьЖурналаРегистрации(ОбщегоНазначенияИСМПТКПереопределяемый.СобытиеЖурналаРегистрации(), 
									 УровеньЖурналаРегистрации.Предупреждение, 
									 Метаданные.ОбщиеМодули.ИнтеграцияИСМПТКПереопределяемый,
									 Выборка.Ссылка, ТекстСообщения);
			
			ВызватьИсключение;
			
		КонецПопытки;
	КонецЦикла;
	
КонецПроцедуры

//В версии БМ 1.0.8.2 у Актов ЦЭДМ в ТЧ Итоги появился реквизит EAN. 
//Данный обработчик выполняет заполнение этого реквизита. 
//
Процедура ДозаполнитьИтогиВАктахИСЦЭДМ() Экспорт
	
	//Обработка Уведомлений
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	АктПриемаПередачиИСЦЭДМ.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.АктПриемаПередачиИСЦЭДМ КАК АктПриемаПередачиИСЦЭДМ";	
		
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		НачатьТранзакцию();
		Попытка
			
			ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
			Если ДокументОбъект = Неопределено Тогда
				ОтменитьТранзакцию();
				ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(Выборка.Ссылка);
				Продолжить;
			КонецЕсли;
						
			Для Каждого СтрокаТЧ Из ДокументОбъект.Итоги Цикл
				СтрокаТЧ.EAN = РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйКлиентСервер.EANПоGTIN(СтрокаТЧ.GTIN);
			КонецЦикла;
			
			ДокументОбъект.ОбменДанными.Загрузка = Истина;
			ОбщегоНазначенияИСМПТКПереопределяемый.ЗаписатьДанные(ДокументОбъект);
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			
			ТекстСообщения = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияНеУдалосьОбработатьДокументПоПричине();
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Ссылка%",  Выборка.Ссылка);
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Причина%", ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
			ЗаписьЖурналаРегистрации(ОбщегоНазначенияИСМПТКПереопределяемый.СобытиеЖурналаРегистрации(), 
									 УровеньЖурналаРегистрации.Предупреждение, 
									 Метаданные.ОбщиеМодули.ИнтеграцияИСМПТКПереопределяемый,
									 Выборка.Ссылка, ТекстСообщения);
			
			ВызватьИсключение;
			
		КонецПопытки;
	КонецЦикла;
	
КонецПроцедуры

//В версии БМ 1.0.10.3 у документов МПТ появился реквизит Этап оформления. 
//Данный обработчик выполняет заполнение первичного значения этого реквизита в существующих документах. 
//
Процедура ЗаполнитьЭтапыОформленияДокументовИСМПТК() Экспорт
	
	//Обработка Уведомлений
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	УведомлениеОВыводеИзОборота.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.УведомлениеОВыводеИзОборотаИСМПТК КАК УведомлениеОВыводеИзОборота
	|ГДЕ
	|	УведомлениеОВыводеИзОборота.ЭтапОформления = ЗНАЧЕНИЕ(Перечисление.ЭтапыОформленияДокументовИСЦЭДМ.ПустаяСсылка)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	УведомлениеОВводеВОборот.Ссылка
	|ИЗ
	|	Документ.УведомлениеОВводеВОборотИСМПТК КАК УведомлениеОВводеВОборот
	|ГДЕ
	|	УведомлениеОВводеВОборот.ЭтапОформления = ЗНАЧЕНИЕ(Перечисление.ЭтапыОформленияДокументовИСЦЭДМ.ПустаяСсылка)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	АктПриемаПередачи.Ссылка
	|ИЗ
	|	Документ.АктПриемаПередачиИСМПТК КАК АктПриемаПередачи
	|ГДЕ
	|	АктПриемаПередачи.ЭтапОформления = ЗНАЧЕНИЕ(Перечисление.ЭтапыОформленияДокументовИСЦЭДМ.ПустаяСсылка)";	
		
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		НачатьТранзакцию();
		Попытка
			
			ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
			Если ДокументОбъект = Неопределено Тогда
				ОтменитьТранзакцию();
				ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(Выборка.Ссылка);
				Продолжить;
			КонецЕсли;
						
			Если ДокументОбъект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыДокументовИСМПТК.Аннулирован")
				Или ДокументОбъект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыДокументовИСМПТК.Отклонен")
				Или ДокументОбъект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыДокументовИСМПТК.Отправлен")
				Или ДокументОбъект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыДокументовИСМПТК.Проверяется")
				Или ДокументОбъект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыДокументовИСМПТК.ОжидаетПриемку")
				Или ДокументОбъект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыДокументовИСМПТК.НаСогласовании")
				Или ДокументОбъект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыДокументовИСМПТК.Отозван")
				Или ДокументОбъект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыДокументовИСМПТК.Оформлен")
				Или ДокументОбъект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыДокументовИСМПТК.Ошибка")
				Или ДокументОбъект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыДокументовИСМПТК.ОшибкаПриОбработке")
				Или ДокументОбъект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыДокументовИСМПТК.ОшибкаПриПроверке")
				Или ДокументОбъект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыДокументовИСМПТК.ПринятПодтвержден") Тогда
				
				//документ уже был отправлен и зарегистрирован на сервере
				ДокументОбъект.ЭтапОформления = ПредопределенноеЗначение("Перечисление.ЭтапыОформленияДокументовИСЦЭДМ.Отправлен");
			Иначе
				ДокументОбъект.ЭтапОформления = ПредопределенноеЗначение("Перечисление.ЭтапыОформленияДокументовИСЦЭДМ.ВРаботе");
			КонецЕсли;
			
			ДокументОбъект.ОбменДанными.Загрузка = Истина;
			ОбщегоНазначенияИСМПТКПереопределяемый.ЗаписатьДанные(ДокументОбъект);
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			
			ТекстСообщения = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияНеУдалосьОбработатьДокументПоПричине();
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Ссылка%",  Выборка.Ссылка);
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Причина%", ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
			ЗаписьЖурналаРегистрации(ОбщегоНазначенияИСМПТКПереопределяемый.СобытиеЖурналаРегистрации(), 
									 УровеньЖурналаРегистрации.Предупреждение, 
									 Метаданные.ОбщиеМодули.ИнтеграцияИСМПТКПереопределяемый,
									 Выборка.Ссылка, ТекстСообщения);
			
			ВызватьИсключение;
		КонецПопытки;
	КонецЦикла;

КонецПроцедуры

//В версии БМ 1.0.8.2 у документов ЦЭДМ появился реквизит Этап оформления. 
//Данный обработчик выполняет заполнение первичного значения этого реквизита в существующих документах Акты внутреннего перемещения. 
//
Процедура ЗаполнитьЭтапыОформленияАктыВнутреннегоПеремещенияИСЦЭДМ() Экспорт
	
	//Обработка Уведомлений
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	АктВнутреннегоПеремещенияИСЦЭДМ.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.АктВнутреннегоПеремещенияИСЦЭДМ КАК АктВнутреннегоПеремещенияИСЦЭДМ
	|ГДЕ
	|	АктВнутреннегоПеремещенияИСЦЭДМ.ЭтапОформления = ЗНАЧЕНИЕ(Перечисление.ЭтапыОформленияДокументовИСЦЭДМ.ПустаяСсылка)";	
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		НачатьТранзакцию();
		Попытка
			
			ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
			Если ДокументОбъект = Неопределено Тогда
				ОтменитьТранзакцию();
				ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(Выборка.Ссылка);
				Продолжить;
			КонецЕсли;
						
			Если ДокументОбъект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыДокументовИСЦЭДМ.ОжидаетПодтверждение")
				Или ДокументОбъект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыДокументовИСЦЭДМ.ОшибкаПриПроверке")
				Или ДокументОбъект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыДокументовИСЦЭДМ.Отозван")
				Или ДокументОбъект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыДокументовИСЦЭДМ.Принят")
				Или ДокументОбъект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыДокументовИСЦЭДМ.Аннулирован")
				Или ДокументОбъект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыДокументовИСЦЭДМ.Отклонен")
				Или ДокументОбъект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыДокументовИСЦЭДМ.ЗапрошеноУточнение")
				Или ДокументОбъект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыДокументовИСЦЭДМ.Сформирован") Тогда
				
				//документ уже был отправлен и зарегистрирован на сервере
				ДокументОбъект.ЭтапОформления = ПредопределенноеЗначение("Перечисление.ЭтапыОформленияДокументовИСЦЭДМ.Отправлен");
			Иначе
				ДокументОбъект.ЭтапОформления = ПредопределенноеЗначение("Перечисление.ЭтапыОформленияДокументовИСЦЭДМ.ВРаботе");
			КонецЕсли;
			
			ДокументОбъект.ОбменДанными.Загрузка = Истина;
			ОбщегоНазначенияИСМПТКПереопределяемый.ЗаписатьДанные(ДокументОбъект);
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			
			ТекстСообщения = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияНеУдалосьОбработатьДокументПоПричине();
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Ссылка%",  Выборка.Ссылка);
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Причина%", ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
			ЗаписьЖурналаРегистрации(ОбщегоНазначенияИСМПТКПереопределяемый.СобытиеЖурналаРегистрации(), 
									 УровеньЖурналаРегистрации.Предупреждение, 
									 Метаданные.ОбщиеМодули.ИнтеграцияИСМПТКПереопределяемый,
									 Выборка.Ссылка, ТекстСообщения);
			
			ВызватьИсключение;
		КонецПопытки;
	КонецЦикла;

КонецПроцедуры

//В версии БМ 1.0.11.1 был пересмотрен подход к хранению информации о взаимосвязаннх документах ИС МПТ:
//добавились новые реквизиты, хранящие идентификаторы связанных документов. От хранения ссылочных типов 
//в реквизитах связи отказались. Например, ранее был реквизит СвяязанныйАкт в УОР, который хранил 
//ссылку на документ. Теперь для определения Акта используется реквизит ИдентификаторАПППервичный.
//
Процедура ПерезаполнениеСвязейАПП_ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию_1_0_11_1(Параметры) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	АктПриемаПередачиИСМПТК.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ АктыДляОбновления
	|ИЗ
	|	Документ.АктПриемаПередачиИСМПТК КАК АктПриемаПередачиИСМПТК
	|ГДЕ
	|	АктПриемаПередачиИСМПТК.УдалитьСвязанныйАкт <> ЗНАЧЕНИЕ(Документ.АктПриемаПередачиИСМПТК.ПустаяСсылка)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	АктПриемаПередачиИСМПТК.Ссылка
	|ИЗ
	|	Документ.АктПриемаПередачиИСМПТК КАК АктПриемаПередачиИСМПТК
	|ГДЕ
	|	АктПриемаПередачиИСМПТК.УдалитьУведомлениеОРасхождении <> ЗНАЧЕНИЕ(Документ.УведомлениеОРасхожденииИСМПТК.ПустаяСсылка)
	|
	|СГРУППИРОВАТЬ ПО
	|	АктПриемаПередачиИСМПТК.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	АктыДляОбновления.Ссылка КАК Ссылка
	|ИЗ
	|	АктыДляОбновления КАК АктыДляОбновления";
	
	ОбновлениеИнформационнойБазы.ОтметитьКОбработке(Параметры, Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка"));
	
КонецПроцедуры

Процедура ПерезаполнениеСвязейАПП_ОбработатьДанныеДляПереходаНаНовуюВерсию_1_0_11_1(Параметры) Экспорт
	
	ПолноеИмяОбъекта  = "Документ.АктПриемаПередачиИСМПТК";
	МетаданныеОбъекта = Метаданные.НайтиПоПолномуИмени(ПолноеИмяОбъекта);
	
	Выборка = ОбновлениеИнформационнойБазы.ВыбратьСсылкиДляОбработки(Параметры.Очередь, ПолноеИмяОбъекта);
	
	Если Выборка.Количество() > 0 Тогда
		Пока Выборка.Следующий() Цикл
			НачатьТранзакцию();
			Попытка
				Блокировка = Новый БлокировкаДанных;
				ЭлементБлокировки = Блокировка.Добавить(ПолноеИмяОбъекта);
				ЭлементБлокировки.УстановитьЗначение("Ссылка", Выборка.Ссылка);
				ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
				Блокировка.Заблокировать();
				
				ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
				Если ДокументОбъект = Неопределено Тогда
					ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(Выборка.Ссылка);
					ЗафиксироватьТранзакцию();
					Продолжить;
				КонецЕсли;
				ОбъектИзменен = Ложь;
				
				Если ЗначениеЗаполнено(ДокументОбъект.УдалитьСвязанныйАкт) Тогда
					ДокументОбъект.ИдентификаторАПППервичный = ДокументОбъект.УдалитьСвязанныйАкт.Идентификатор;
					ДокументОбъект.УдалитьСвязанныйАкт = Неопределено;
				КонецЕсли;	
					
				Если ЗначениеЗаполнено(ДокументОбъект.УдалитьУведомлениеОРасхождении) Тогда
					ДокументОбъект.ИдентификаторУведОРасхождениях = ДокументОбъект.УдалитьУведомлениеОРасхождении.Идентификатор;
					ДокументОбъект.УдалитьУведомлениеОРасхождении = Неопределено;
				КонецЕсли;				
				
				Если ДокументОбъект.ТипАкта = ПредопределенноеЗначение("Перечисление.ВидыДокументаИСМПТК.Исходный") Тогда
					ПараметрыПоиска = Новый Структура("ИмяДокумента, ИмяПараметра, ВидДокумента",
											  		  "АктПриемаПередачиИСМПТК", "НомерИСМПТ", Перечисления.ВидыДокументаИСМПТК.Исправленный);
					СсылкаАППИсправленный = РаботаСДокументамиИСМПТК.НайтиДокументИСПоНомеру(ДокументОбъект.НомерИСМПТ, ПараметрыПоиска); 
					Если Не СсылкаАППИсправленный = Неопределено Тогда
						ДокументОбъект.ИдентификаторАППИсправленный = СсылкаАППИсправленный.Идентификатор;
					КонецЕсли;					
				КонецЕсли;
				
				ДокументОбъект.ОбменДанными.Загрузка = Истина;
				ОбщегоНазначенияИСМПТКПереопределяемый.ЗаписатьДанные(ДокументОбъект);
				ОбъектИзменен = Истина;
				
				Если ОбъектИзменен Тогда
					ДокументОбъект.ОбменДанными.Загрузка = Истина;
					ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ДокументОбъект, Истина);
				Иначе
					ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(Выборка.Ссылка);
				КонецЕсли;
				ЗафиксироватьТранзакцию();
				
			Исключение
				ОтменитьТранзакцию();
				ТекстСообщения = НСтр("ru = 'Не удалось обработать : %Ссылка% по причине: %Причина%'");
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Ссылка%",  Выборка.Ссылка);
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Причина%", ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
				
				ЗаписьЖурналаРегистрации(ОбщегоНазначенияИСМПТКПереопределяемый.СобытиеЖурналаРегистрации(),
										 УровеньЖурналаРегистрации.Предупреждение,
										 МетаданныеОбъекта,
										 Выборка.Ссылка,
										 ТекстСообщения);
				ВызватьИсключение;
			КонецПопытки;
		КонецЦикла;
	КонецЕсли;
	
	Параметры.ОбработкаЗавершена = Не ОбновлениеИнформационнойБазы.ЕстьДанныеДляОбработки(Параметры.Очередь, ПолноеИмяОбъекта);
	
КонецПроцедуры

//В версии БМ 1.0.11.1 был пересмотрен подход к хранению информации о взаимосвязаннх документах ИС МПТ:
//добавились новые реквизиты, хранящие идентификаторы связанных документов. От хранения ссылочных типов 
//в реквизитах связи отказались. Например, ранее был реквизит СвяязанныйАкт в УОР, который хранил 
//ссылку на документ. Теперь для определения Акта используется реквизит ИдентификаторАПППервичный.
//
Процедура ПерезаполнениеСвязейУОР_ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию_1_0_11_1(Параметры) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	УведомлениеОРасхожденииИСМПТК.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ УведомленияДляОбновления
	|ИЗ
	|	Документ.УведомлениеОРасхожденииИСМПТК КАК УведомлениеОРасхожденииИСМПТК
	|ГДЕ
	|	УведомлениеОРасхожденииИСМПТК.УдалитьАктКорректировка <> ЗНАЧЕНИЕ(Документ.АктПриемаПередачиИСМПТК.ПустаяСсылка)
	|
	|СГРУППИРОВАТЬ ПО
	|	УведомлениеОРасхожденииИСМПТК.Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	УведомлениеОРасхожденииИСМПТК.Ссылка
	|ИЗ
	|	Документ.УведомлениеОРасхожденииИСМПТК КАК УведомлениеОРасхожденииИСМПТК
	|ГДЕ
	|	УведомлениеОРасхожденииИСМПТК.УдалитьСвязанныйАкт <> ЗНАЧЕНИЕ(Документ.АктПриемаПередачиИСМПТК.ПустаяСсылка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	УведомленияДляОбновления.Ссылка
	|ИЗ
	|	УведомленияДляОбновления КАК УведомленияДляОбновления";
	
	ОбновлениеИнформационнойБазы.ОтметитьКОбработке(Параметры, Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка"));
	
КонецПроцедуры

Процедура ПерезаполнениеСвязейУОР_ОбработатьДанныеДляПереходаНаНовуюВерсию_1_0_11_1(Параметры) Экспорт
	
	ПолноеИмяОбъекта  = "Документ.УведомлениеОРасхожденииИСМПТК";
	МетаданныеОбъекта = Метаданные.НайтиПоПолномуИмени(ПолноеИмяОбъекта);
	
	Выборка = ОбновлениеИнформационнойБазы.ВыбратьСсылкиДляОбработки(Параметры.Очередь, ПолноеИмяОбъекта);
	
	Если Выборка.Количество() > 0 Тогда
		Пока Выборка.Следующий() Цикл
			НачатьТранзакцию();
			Попытка
				Блокировка = Новый БлокировкаДанных;
				ЭлементБлокировки = Блокировка.Добавить(ПолноеИмяОбъекта);
				ЭлементБлокировки.УстановитьЗначение("Ссылка", Выборка.Ссылка);
				ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
				Блокировка.Заблокировать();
				
				ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
				Если ДокументОбъект = Неопределено Тогда
					ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(Выборка.Ссылка);
					ЗафиксироватьТранзакцию();
					Продолжить;
				КонецЕсли;
				ОбъектИзменен = Ложь;
				
				Если ЗначениеЗаполнено(ДокументОбъект.УдалитьСвязанныйАкт) Тогда
					ДокументОбъект.ИдентификаторАПППервичный = ДокументОбъект.УдалитьСвязанныйАкт.Идентификатор;
					ДокументОбъект.УдалитьСвязанныйАкт = Неопределено;
				КонецЕсли;	
					
				Если ЗначениеЗаполнено(ДокументОбъект.УдалитьАктКорректировка) Тогда
					ДокументОбъект.ИдентификаторАППИсправленный = ДокументОбъект.УдалитьАктКорректировка.Идентификатор;
					ДокументОбъект.УдалитьАктКорректировка = Неопределено;
				КонецЕсли;				
											
				ДокументОбъект.ОбменДанными.Загрузка = Истина;
				ОбщегоНазначенияИСМПТКПереопределяемый.ЗаписатьДанные(ДокументОбъект);
				ОбъектИзменен = Истина;
				
				Если ОбъектИзменен Тогда
					ДокументОбъект.ОбменДанными.Загрузка = Истина;
					ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ДокументОбъект, Истина);
				Иначе
					ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(Выборка.Ссылка);
				КонецЕсли;
				ЗафиксироватьТранзакцию();
				
			Исключение
				ОтменитьТранзакцию();
				ТекстСообщения = НСтр("ru = 'Не удалось обработать : %Ссылка% по причине: %Причина%'");
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Ссылка%",  Выборка.Ссылка);
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Причина%", ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
				ЗаписьЖурналаРегистрации(ОбщегоНазначенияИСМПТКПереопределяемый.СобытиеЖурналаРегистрации(),
										 УровеньЖурналаРегистрации.Предупреждение,
										 МетаданныеОбъекта,
										 Выборка.Ссылка,
										 ТекстСообщения);
				ВызватьИсключение;
			КонецПопытки;
		КонецЦикла;
	КонецЕсли;
	
	Параметры.ОбработкаЗавершена = Не ОбновлениеИнформационнойБазы.ЕстьДанныеДляОбработки(Параметры.Очередь, ПолноеИмяОбъекта);
	
КонецПроцедуры

//В версии БМ 1.0.11.1 был пересмотрен подход к хранению информации о взаимосвязаннх документах ИС МПТ:
//добавились новые реквизиты, хранящие идентификаторы связанных документов. От хранения ссылочных типов 
//в реквизитах связи отказались. 
//
Процедура ПерезаполнениеСвязейВвозЕАЭС_ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию_1_0_11_1(Параметры) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	УведомлениеОВвозеИзЕАЭСИСМПТК.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ УведомленияДляОбновления
	|ИЗ
	|	Документ.УведомлениеОВвозеИзЕАЭСИСМПТК КАК УведомлениеОВвозеИзЕАЭСИСМПТК
	|ГДЕ
	|	УведомлениеОВвозеИзЕАЭСИСМПТК.УдалитьСвязанноеУведомление <> ЗНАЧЕНИЕ(Документ.УведомлениеОВвозеИзЕАЭСИСМПТК.ПустаяСсылка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	УведомленияДляОбновления.Ссылка
	|ИЗ
	|	УведомленияДляОбновления КАК УведомленияДляОбновления";
	
	ОбновлениеИнформационнойБазы.ОтметитьКОбработке(Параметры, Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка"));
	
КонецПроцедуры

Процедура ПерезаполнениеСвязейВвозЕАЭС_ОбработатьДанныеДляПереходаНаНовуюВерсию_1_0_11_1(Параметры) Экспорт
	
	ПолноеИмяОбъекта  = "Документ.УведомлениеОВвозеИзЕАЭСИСМПТК";
	МетаданныеОбъекта = Метаданные.НайтиПоПолномуИмени(ПолноеИмяОбъекта);
	
	Выборка = ОбновлениеИнформационнойБазы.ВыбратьСсылкиДляОбработки(Параметры.Очередь, ПолноеИмяОбъекта);
	
	Если Выборка.Количество() > 0 Тогда
		Пока Выборка.Следующий() Цикл
			НачатьТранзакцию();
			Попытка
				Блокировка = Новый БлокировкаДанных;
				ЭлементБлокировки = Блокировка.Добавить(ПолноеИмяОбъекта);
				ЭлементБлокировки.УстановитьЗначение("Ссылка", Выборка.Ссылка);
				ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
				Блокировка.Заблокировать();
				
				ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
				Если ДокументОбъект = Неопределено Тогда
					ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(Выборка.Ссылка);
					ЗафиксироватьТранзакцию();
					Продолжить;
				КонецЕсли;
				ОбъектИзменен = Ложь;
				
				Если ЗначениеЗаполнено(ДокументОбъект.УдалитьСвязанноеУведомление) Тогда
					ДокументОбъект.ИдентификаторВвозПервичный = ДокументОбъект.УдалитьСвязанноеУведомление.Идентификатор;
					ДокументОбъект.УдалитьСвязанноеУведомление = Неопределено;
				КонецЕсли;	
												
				ДокументОбъект.ОбменДанными.Загрузка = Истина;
				ОбщегоНазначенияИСМПТКПереопределяемый.ЗаписатьДанные(ДокументОбъект);
				ОбъектИзменен = Истина;
				
				Если ОбъектИзменен Тогда
					ДокументОбъект.ОбменДанными.Загрузка = Истина;
					ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ДокументОбъект, Истина);
				Иначе
					ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(Выборка.Ссылка);
				КонецЕсли;
				ЗафиксироватьТранзакцию();
				
			Исключение
				ОтменитьТранзакцию();
				ТекстСообщения = НСтр("ru = 'Не удалось обработать : %Ссылка% по причине: %Причина%'");
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Ссылка%",  Выборка.Ссылка);
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Причина%", ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
				ЗаписьЖурналаРегистрации(ОбщегоНазначенияИСМПТКПереопределяемый.СобытиеЖурналаРегистрации(),
										 УровеньЖурналаРегистрации.Предупреждение,
										 МетаданныеОбъекта,
										 Выборка.Ссылка,
										 ТекстСообщения);
				ВызватьИсключение;
			КонецПопытки;
		КонецЦикла;
	КонецЕсли;
	
	Параметры.ОбработкаЗавершена = Не ОбновлениеИнформационнойБазы.ЕстьДанныеДляОбработки(Параметры.Очередь, ПолноеИмяОбъекта);
	
КонецПроцедуры

//С версии БМ 1.0.11.1 у документов Уведомление об отгрузке (ЕАЭС)(ИС МПТ) 
//заполняется служебный реквизит Направление значением Входящий.
//
Процедура ЗаполнитьНаправлениеВДокументахОтгрузкиЕАЭС() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	УведомлениеОбОтгрузкеЕАЭСИСМПТК.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.УведомлениеОбОтгрузкеЕАЭСИСМПТК КАК УведомлениеОбОтгрузкеЕАЭСИСМПТК
	|ГДЕ
	|	УведомлениеОбОтгрузкеЕАЭСИСМПТК.Направление = ЗНАЧЕНИЕ(Перечисление.НаправленияДокументовИСМПТК.ПустаяСсылка)";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		НачатьТранзакцию();
		Попытка
			
			ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
			Если ДокументОбъект = Неопределено Тогда
				ОтменитьТранзакцию();
				ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(Выборка.Ссылка);
				Продолжить;
			КонецЕсли;
			
			ДокументОбъект.Направление = ПредопределенноеЗначение("Перечисление.НаправленияДокументовИСМПТК.Входящий");
			ДокументОбъект.ОбменДанными.Загрузка = Истина;
			ОбщегоНазначенияИСМПТКПереопределяемый.ЗаписатьДанные(ДокументОбъект);
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			
			ТекстСообщения = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияНеУдалосьОбработатьДокументПоПричине();
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Ссылка%",  Выборка.Ссылка);
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Причина%", ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
			ЗаписьЖурналаРегистрации(ОбщегоНазначенияИСМПТКПереопределяемый.СобытиеЖурналаРегистрации(), 
									 УровеньЖурналаРегистрации.Предупреждение, 
									 Метаданные.ОбщиеМодули.ИнтеграцияИСМПТКПереопределяемый,
									 Выборка.Ссылка, ТекстСообщения);
			
			ВызватьИсключение;
		КонецПопытки;
	КонецЦикла;

КонецПроцедуры

//С версии БМ 1.0.14.1 у документов Акты приема/передачи (ИС МПТ) 
//снова используется и заполняется реквизит Товарная группа.
//
Процедура ЗаполнитьТоварнуюГруппуВАктахИСМПТ_ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию_1_0_14_1(Параметры) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	АктПриемаПередачиИСМПТК.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.АктПриемаПередачиИСМПТК КАК АктПриемаПередачиИСМПТК
	|ГДЕ
	|	АктПриемаПередачиИСМПТК.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыДокументовИСМПТК.Черновик)
	|	И АктПриемаПередачиИСМПТК.Направление = ЗНАЧЕНИЕ(Перечисление.НаправленияДокументовИСМПТК.Исходящий)";
	
	ОбновлениеИнформационнойБазы.ОтметитьКОбработке(Параметры, Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка"));
	
КонецПроцедуры

Процедура ЗаполнитьТоварнуюГруппуВАктахИСМПТ_ОбработатьДанныеДляПереходаНаНовуюВерсию_1_0_14_1(Параметры) Экспорт
	
	ВключенУчетТабака = ОбщегоНазначенияИСМПТК.ПроверитьЗначениеКонстанты("ВестиУчетМаркируемогоТабакаИСМПТК");
	ВключенУчетОбуви  = ОбщегоНазначенияИСМПТК.ПроверитьЗначениеКонстанты("ВестиУчетМаркируемойОбувиИСМПТК");
	
	ПолноеИмяОбъекта  = "Документ.АктПриемаПередачиИСМПТК";
	МетаданныеОбъекта = Метаданные.НайтиПоПолномуИмени(ПолноеИмяОбъекта);
	
	Выборка = ОбновлениеИнформационнойБазы.ВыбратьСсылкиДляОбработки(Параметры.Очередь, ПолноеИмяОбъекта);
	
	Если Выборка.Количество() > 0 Тогда
		Пока Выборка.Следующий() Цикл
			НачатьТранзакцию();
			Попытка
						
				Блокировка = Новый БлокировкаДанных;
				ЭлементБлокировки = Блокировка.Добавить(ПолноеИмяОбъекта);
				ЭлементБлокировки.УстановитьЗначение("Ссылка", Выборка.Ссылка);
				ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
				Блокировка.Заблокировать();
				
				ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
				Если ДокументОбъект = Неопределено Тогда
					ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(Выборка.Ссылка);
					ЗафиксироватьТранзакцию();
					Продолжить;
				КонецЕсли;
				ОбъектИзменен = Ложь;
				
				ТЧАкта = ДокументОбъект.Марки.Выгрузить(, "ВидПродукции"); 
				ТЧАкта.Свернуть("ВидПродукции");
				КоличествоТГ = ТЧАкта.Количество();
				
				Если КоличествоТГ = 1 Тогда 
					Если ЗначениеЗаполнено(ТЧАкта[0].ВидПродукции) Тогда
						ТоварнаяГруппа = ТЧАкта[0].ВидПродукции;
					Иначе
						//Если в ТЧ Марки вид продукции по кодам не определен,
						//это может быть документ с упаковками без указанного состава вложенностей.
						//В этом случае сначала смотрим на опции учета в базе
						Если ВключенУчетОбуви И Не ВключенУчетТабака Тогда
							ТоварнаяГруппа = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИСМПТК.Обувная");
						ИначеЕсли ВключенУчетТабака И Не ВключенУчетОбуви Тогда
							ТоварнаяГруппа = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИСМПТК.Табачная");
						Иначе
							//Если включен учет сразу нескольких подходящих ТГ, 
							//попытаемся определить вид продукции по кодам маркировки в таблице.
							//В общем случае, если вид продукции не указан,  
							//Если есть групповые коды, это товарная группа Табак, т.к. у обуви нет таких КМ
							ЕстьГрупповыеКоды = ДокументОбъект.Марки.НайтиСтроки(Новый Структура("ВидУпаковки", 
												ПредопределенноеЗначение("Перечисление.ВидыУпаковокИСМПТК.Групповая"))).Количество() <> 0;
							Если ЕстьГрупповыеКоды Тогда
								ТоварнаяГруппа = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИСМПТК.Табачная");
							Иначе
								ТоварнаяГруппа = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИСМПТК.ПустаяСсылка");
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;
				Иначе 
					//В Исходящих документах-черновиках на момент обновления может быть указано 2 товарных группы, 
					//например, табак и обувь, или табак и упаковки без состава, т.е. пустая ТГ.	
					ЕстьТабак = ДокументОбъект.Марки.НайтиСтроки(Новый Структура("ВидПродукции", 
								ПредопределенноеЗначение("Перечисление.ВидыПродукцииИСМПТК.Табачная"))).Количество() <> 0;
					ЕстьОбувь = ДокументОбъект.Марки.НайтиСтроки(Новый Структура("ВидПродукции", 
								ПредопределенноеЗначение("Перечисление.ВидыПродукцииИСМПТК.Обувная"))).Количество() <> 0;
					
					Если ЕстьТабак И НЕ ЕстьОбувь Тогда
						ТоварнаяГруппа = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИСМПТК.Табачная");
					ИначеЕсли ЕстьОбувь И Не ЕстьТабак Тогда
						ТоварнаяГруппа = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИСМПТК.Обувная");
					Иначе
						ТоварнаяГруппа = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИСМПТК.ПустаяСсылка");	
					КонецЕсли;
				КонецЕсли;
								
				ДокументОбъект.ТоварнаяГруппа = ТоварнаяГруппа;
				
				ОбщегоНазначенияИСМПТКПереопределяемый.ЗаписатьДанные(ДокументОбъект);
				
				ЗафиксироватьТранзакцию();
				
			Исключение
				ОтменитьТранзакцию();
				ТекстСообщения = НСтр("ru = 'Не удалось обработать : %Ссылка% по причине: %Причина%'");
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Ссылка%",  Выборка.Ссылка);
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Причина%", ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
				
				ЗаписьЖурналаРегистрации(ОбщегоНазначенияИСМПТКПереопределяемый.СобытиеЖурналаРегистрации(),
										 УровеньЖурналаРегистрации.Предупреждение,
										 МетаданныеОбъекта,
										 Выборка.Ссылка,
										 ТекстСообщения);
				ВызватьИсключение;
			КонецПопытки;
		КонецЦикла;
	КонецЕсли;
	
	Параметры.ОбработкаЗавершена = Не ОбновлениеИнформационнойБазы.ЕстьДанныеДляОбработки(Параметры.Очередь, ПолноеИмяОбъекта);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ПолучитьОписаниеТиповЧисла(Разрядность, РазрядностьДробнойЧасти, Неотрицательный = Ложь) Экспорт
	
	Если Неотрицательный Тогда
		Знак = ДопустимыйЗнак.Неотрицательный;
	Иначе
		Знак = ДопустимыйЗнак.Любой;
	КонецЕсли;
	
	Возврат Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(Разрядность, РазрядностьДробнойЧасти, Знак));

КонецФункции

Процедура ПриОпределенииПутиКФайлуЛогирования(ПутьКФайлу) Экспорт
	
	Возврат;
	
КонецПроцедуры

// Возвращает значение реквизита, прочитанного из информационной базы по ссылке на объект.
// 
//  Если доступа к реквизиту нет, возникнет исключение прав доступа.
//  Если необходимо зачитать реквизит независимо от прав текущего пользователя,
//  то следует использовать предварительный переход в привилегированный режим.
//
// Функция не предназначена для получения значений реквизитов пустых ссылок.
// 
// Параметры:
//  Ссылка       - ссылка на объект, - элемент справочника, документ, ...
//  ИмяРеквизита - Строка, например, "Код".
// 
// Возвращаемое значение:
//  Произвольный    - зависит от типа значения прочитанного реквизита.
// 
Функция ЗначениеРеквизитаОбъекта(Ссылка, ИмяРеквизита) Экспорт
	
	Результат = ОбщегоНазначенияИСМПТК.ЗначенияРеквизитовОбъекта(Ссылка, ИмяРеквизита);
	
	Возврат Результат[СтрЗаменить(ИмяРеквизита, ".", "")];
	
КонецФункции

Функция НайтиНедопустимыеСимволыXMLПлатформа(Штрихкод) Экспорт
	
	Возврат ПозицияНедопустимогоСимвола(Штрихкод) > 0;

КонецФункции 

Функция ПозицияНедопустимогоСимвола(Штрихкод) Экспорт
	
	КодПроверки = "ПозицияНедопустимогоСимвола = НайтиНедопустимыеСимволыXML(Штрихкод)";
	ПозицияНедопустимогоСимвола = 0;
	
	СисИнфо = Новый СистемнаяИнформация;
	Если ОбщегоНазначенияКлиентСервер.СравнитьВерсии("8.3.21.0", СисИнфо.ВерсияПриложения) < 0 Тогда 
		КодПроверки = "ПозицияНедопустимогоСимвола = ОбработкаСтрокиXML.НайтиНедопустимыеСимволыXML(Штрихкод)";
	КонецЕсли;
	
	Выполнить(КодПроверки);
	
	Возврат ПозицияНедопустимогоСимвола;

КонецФункции

Функция ВыполнитьВФоне(ВыполняемыйМетод, ПараметрыМетода, ПараметрыВыполнения) Экспорт
	
	Возврат ДлительныеОперации.ВыполнитьВФоне(ВыполняемыйМетод, ПараметрыМетода, ПараметрыВыполнения);
	
КонецФункции

Функция ФоновоеЗаданиеЗапущено(Знач ИмяПроцедуры) Экспорт
	
	СтруктураВозврата = Новый Структура;
	СтруктураВозврата.Вставить("ЗаданиеАктивно", Ложь);
	
	МассивФоновыхЗаданий = ФоновыеЗадания.ПолучитьФоновыеЗадания(Новый Структура("ИмяМетода, Состояние", ИмяПроцедуры, СостояниеФоновогоЗадания.Активно));
		
	Если МассивФоновыхЗаданий.Количество() > 0 Тогда
		СтруктураВозврата.Вставить("ЗаданиеАктивно", Истина);
		СтруктураВозврата.Вставить("Расположение", МассивФоновыхЗаданий[0].Расположение);
		СтруктураВозврата.Вставить("Начало",  МассивФоновыхЗаданий[0].Начало);
	КонецЕсли;		
	
	Возврат СтруктураВозврата;

КонецФункции

Функция ПолучитьДанныеРегистраПрофильДоступаКЭДО(СписокОрганизаций) Экспорт
	
	Запрос = Новый Запрос;
	
	ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Организации.ИНН КАК БИНОрганизации,
	|	Организации.Ссылка КАК СтруктурнаяЕдиница,
	|	ЕСТЬNULL(ПрофильДоступаКЭДОИСЦЭДМ.Пользователь, """") КАК Пользователь,
	|	ЕСТЬNULL(ПрофильДоступаКЭДОИСЦЭДМ.ИмяАутентификацииИСЦЭДМ, """") КАК ИмяАутентификацииИСЦЭДМ,
	|	ЕСТЬNULL(ПрофильДоступаКЭДОИСЦЭДМ.ПарольАутентификацииИСЦЭДМ, """") КАК ПарольАутентификацииИСЦЭДМ
	|ИЗ
	|	Справочник.Организации КАК Организации
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПрофилиДоступаИСЦЭДМ КАК ПрофильДоступаКЭДОИСЦЭДМ
	|		ПО Организации.Ссылка = ПрофильДоступаКЭДОИСЦЭДМ.Организация
	|ГДЕ
	|	ПрофильДоступаКЭДОИСЦЭДМ.Пользователь = &Пользователь";
	
	Если ЗначениеЗаполнено(СписокОрганизаций) Тогда
		ТекстЗапроса = ТекстЗапроса + 
		"|
		|	И Организации.Ссылка В (&Ссылка)";
		Запрос.УстановитьПараметр("Ссылка", СписокОрганизаций );
	КонецЕсли;
	
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("Пользователь", ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.ТекущийПользователь());
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	МассивПрофилей = Новый Массив;
	Если Выборка.Следующий() Тогда
		
		СписокАвторизации = Новый Структура();
		СписокАвторизации.Вставить("СтруктурнаяЕдиница", 	 Выборка.СтруктурнаяЕдиница);	
		СписокАвторизации.Вставить("ИмяАутентификацииИСЦЭДМ", Выборка.ИмяАутентификацииИСЦЭДМ);	
		СписокАвторизации.Вставить("ПарольАутентификацииИСЦЭДМ", Выборка.ПарольАутентификацииИСЦЭДМ);	
		СписокАвторизации.Вставить("БИНОрганизации", Выборка.БИНОрганизации);
		СписокАвторизации.Вставить("Пользователь", 	 Выборка.Пользователь);
		
		МассивПрофилей.Добавить(СписокАвторизации);
	КонецЕсли;

	Возврат ?(МассивПрофилей.Количество() = 0, Неопределено, МассивПрофилей);
	
КонецФункции

Процедура ДополнитьСтруктуру(Приемник, Источник, Заменять = Неопределено) Экспорт
	
	ОбщегоНазначенияКлиентСервер.ДополнитьСтруктуру(Приемник, Источник, Заменять);
	
КонецПроцедуры

Функция ТикетАутентификацииНаПорталеПоддержки(ВладелецТикета) Экспорт

	Возврат ИнтернетПоддержкаПользователей.ТикетАутентификацииНаПорталеПоддержки(ВладелецТикета);
	
КонецФункции

Функция ДанныеАутентификацииПользователяИнтернетПоддержки() Экспорт

	Возврат ИнтернетПоддержкаПользователей.ДанныеАутентификацииПользователяИнтернетПоддержки();
	
КонецФункции

Функция ПолучитьРеквизитыОрганизацииЭлектронноеВзаимодействие(Организация) Экспорт
	
	Возврат ЭлектронноеВзаимодействиеССервисамиПереопределяемый.ПолучитьРеквизитыОрганизации(Организация);
	
КонецФункции

Процедура Пауза(Секунд) Экспорт
	
	ОбщегоНазначенияБТС.Пауза(Секунд);
	
КонецПроцедуры

#КонецОбласти
