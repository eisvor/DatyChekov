////////////////////////////////////////////////////////////////////////////////
// ОбщегоНазначенияРТ содержит процедуры и функции 
// общего назначения для работы с конфигурацией.
//  
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Возвращает текущий магазин, который далее используется в РМК.
//
// ВозвращаемоеЗначение:
//  СправочникСсылка.Магазин - текущий магазин РМК.
//
Функция ОпределитьТекущийМагазин() Экспорт
	
	Если НЕ ОбщегоНазначения.ДоступноИспользованиеРазделенныхДанных() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ТекущийМагазин = Справочники.Магазины.ПустаяСсылка();
	
	Если ЗначениеЗаполнено(Пользователи.ТекущийПользователь()) Тогда
		
		УстановитьБезопасныйРежим(Истина);
		Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Магазины.Ссылка КАК Магазин
		|ИЗ
		|	Справочник.Магазины КАК Магазины");
		РезультатЗапроса = Запрос.Выполнить();
		УстановитьБезопасныйРежим(Ложь);
		
		Если НЕ РезультатЗапроса.Пустой() Тогда
			Магазины = РезультатЗапроса.Выгрузить().ВыгрузитьКолонку("Магазин");
			
			МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
			ОбменДаннымиРТ.СоздатьВТДоступныеМагазины(МенеджерВременныхТаблиц, Ложь);
			
			Запрос = Новый Запрос;
			Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
			Запрос.Текст = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
			|	СправочникМагазины.Ссылка КАК Магазин,
			|	СправочникМагазины.Наименование КАК Наименование,
			|	ВЫБОР
			|		КОГДА Пользователи.Подразделение ЕСТЬ NULL
			|			ТОГДА 1
			|		ИНАЧЕ 0
			|	КОНЕЦ КАК Приоритет
			|ИЗ
			|	Справочник.Магазины КАК СправочникМагазины
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТДоступныеМагазины КАК ВТДоступныеМагазины
			|		ПО СправочникМагазины.Ссылка = ВТДоступныеМагазины.Магазин
			|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Пользователи КАК Пользователи
			|		ПО СправочникМагазины.Ссылка = Пользователи.Подразделение
			|			И (Пользователи.Ссылка = &ТекущийПользователь)
			|ГДЕ
			|	НЕ СправочникМагазины.СкладУправляющейСистемы
			|	И СправочникМагазины.Ссылка В(&Магазины)
			|
			|УПОРЯДОЧИТЬ ПО
			|	Приоритет,
			|	Наименование";
			
			Запрос.УстановитьПараметр("ТекущийПользователь", Пользователи.ТекущийПользователь());
			Запрос.УстановитьПараметр("Магазины", Магазины);
			Выборка = Запрос.Выполнить().Выбрать();
			Если Выборка.Следующий() Тогда
				ТекущийМагазин = Выборка.Магазин;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ТекущийМагазин;

КонецФункции

// Выполняет установку параметров сеанса. Вызывается из модуля сеанса.
//
// Параметры:
//  ИмяПараметра - Строка - строка с именем параметра сеанса.
//  УстановленныеПараметры - Массив - массив всех установленных параметров сеанса.
//
Процедура УстановитьПараметрыСеанса(ИмяПараметра, УстановленныеПараметры) Экспорт
	
	Если ИмяПараметра = "ОбщиеЗначения" Тогда
		ПараметрыСеанса.ОбщиеЗначения = Новый ХранилищеЗначения(Новый Структура);
		УстановленныеПараметры.Добавить(ИмяПараметра);
	ИначеЕсли ИмяПараметра = "ТекущийМагазин" Тогда
		ПараметрыСеанса.ТекущийМагазин = ОпределитьТекущийМагазин();
		УстановленныеПараметры.Добавить(ИмяПараметра);
	ИначеЕсли ИмяПараметра = "ФормаРабочегоМестаКассира" Тогда
		ПараметрыСеанса.ФормаРабочегоМестаКассира = "";
		УстановленныеПараметры.Добавить(ИмяПараметра);
	ИначеЕсли ИмяПараметра = "ИспользуемыеПланыОбмена" Тогда
		МодульОбменДанными = ОбщегоНазначения.ОбщийМодуль("ОбменДаннымиСервер");
		МассивПлановОбмена = МодульОбменДанными.ПолучитьИспользуемыеПланыОбмена();
		ПараметрыСеанса.ИспользуемыеПланыОбмена = Новый ФиксированныйМассив(МассивПлановОбмена);
		УстановленныеПараметры.Добавить(ИмяПараметра);
	КонецЕсли;
	
КонецПроцедуры

// Изменение текущего магазина после записи пользователя.
//
// Параметры:
//  Пользователь - СправочникСсылка.Пользователи - пользователь для изменения.
//
// Возвращаемое значение:
//  Булево - результат выполнения функции.
//
Функция ТекущийПользовательИзменен(Пользователь) Экспорт
	
	ТекущийМагазин = ОпределитьТекущийМагазин();
	ТекущийПользователь = Пользователи.ТекущийПользователь();
	Если ЗначениеЗаполнено(ТекущийПользователь) 
		И ТекущийПользователь = Пользователь Тогда
		ПараметрыСеанса.ТекущийМагазин = ТекущийМагазин;
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

// Устанавливает значения реквизита объекта.
//
// Параметры:
//  Объект - ДанныеФормыСтруктура - объект метаданных в котором необходимо задать значение реквизита.
//  НовоеЗначение - Значение - значение, которое необходимо задать.
//  ИмяРеквизита - Строка - наименование реквизита строкой.
//
Процедура УстановитьНовоеЗначениеРеквизита(Знач Объект, НовоеЗначение, ИмяРеквизита) Экспорт

	Если Объект[ИмяРеквизита] <> НовоеЗначение Тогда

		Объект[ИмяРеквизита] = НовоеЗначение;

	КонецЕсли;

КонецПроцедуры

// Возвращает структуру значений реквизитов объекта.
//
// Параметры:
//  Ссылка - Метаданные.Ссылка - ссылка на объект метаданных.
//  СтруктураПолей - Структура - структура реквизитов объекта метаданных.
//
// Возвращаемое значение:
//  Структура - структура значений реквизитов объекта.
//
Функция ЗначенияРеквизитовОбъекта(Ссылка, СтруктураПолей) Экспорт

	Результат = Новый Структура;
	Для Каждого КлючИЗначение Из СтруктураПолей Цикл
		Результат.Вставить(КлючИЗначение.Ключ);
	КонецЦикла;

	ТекстЗапроса = "";
	
	ОбъектМетаданных = Ссылка.Метаданные();

	Для Каждого Элемент Из СтруктураПолей Цикл
		
		ИмяПоля = Элемент.Значение;
		
		Если НЕ ЗначениеЗаполнено(ИмяПоля) Тогда
			ИмяПоля = СокрЛП(Элемент.Ключ);
		КонецЕсли;
		
		ТекстЗапроса  = ТекстЗапроса + ?(ПустаяСтрока(ТекстЗапроса), "", ",") + "
		|	" + ИмяПоля + " КАК " + СокрЛП(Элемент.Ключ);
	КонецЦикла;

	Запрос = Новый Запрос();

	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ" + ТекстЗапроса + "
	|ИЗ
	|	" + ОбъектМетаданных.ПолноеИмя() + " КАК ТаблицаОбъекта
	|ГДЕ
	|	Ссылка = &Ссылка";

	Запрос.УстановитьПараметр("Ссылка" , Ссылка);

	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Для Каждого КлючИЗначение Из СтруктураПолей Цикл
			Результат[КлючИЗначение.Ключ] = Выборка[КлючИЗначение.Ключ];
		КонецЦикла;
	КонецЕсли;
	
	Возврат Результат;

КонецФункции

// Определяет существует ли реквизит объекта.
//
// Параметры:
//  ИмяРеквизита - Строка - наименование реквизита.
//  МетаданныеОбъекта - Метаданные.Ссылка - ссылка на объект метаданных.
//
// Возвращаемое значение:
//  Булево - Истина, если реквизит присутствует, Ложь в обратном случае.
//
Функция ЕстьРеквизитОбъекта(ИмяРеквизита, МетаданныеОбъекта) Экспорт

	Если МетаданныеОбъекта.Реквизиты.Найти(ИмяРеквизита) = Неопределено Тогда
		Возврат Ложь;
	Иначе
		Возврат Истина;
	КонецЕсли; 

КонецФункции

// Определяет существует ли табличная часть объекта.
//
// Параметры:
//  ИмяТЧ - Строка - наименование табличной части.
//  МетаданныеОбъекта - Метаданные.Ссылка - ссылка на объект метаданных.
//
// Возвращаемое значение:
//  Булево - Истина, если табличная часть присутствует, Ложь в обратном случае.
//
Функция ЕстьТЧОбъекта(ИмяТЧ, МетаданныеОбъекта) Экспорт

	Если МетаданныеОбъекта.ТабличныеЧасти.Найти(ИмяТЧ) = Неопределено Тогда
		Возврат Ложь;
	Иначе
		Возврат Истина;
	КонецЕсли; 

КонецФункции 

// Формирует текст в формате, необходимом для выдачи сообщений по табличной части.
//
// Параметры:
//  ИмяТЧ - Строка - имя табличной части.
//  НомерСтроки - Число - номер строки табличной части.
//  ИмяРеквизита - Строка - имя реквизита.
//
// Возвращаемое значение:
//  Строка - текст сообщения для выдачи.
//
Функция ТекстДляВыдачиСообщенийПоСтрокеТЧ(ИмяТЧ, НомерСтроки, ИмяРеквизита) Экспорт

	Возврат ИмяТЧ + "[" + Формат(НомерСтроки - 1, "ЧН=0; ЧГ=0") + "]." + ИмяРеквизита;

КонецФункции // ТекстДляВыдачиСообщенийПоСтрокеТЧ()

// Заполняет структуру значениями перечисления.
//
// Параметры:
//  ИмяПеречисления - Строка - имя перечисления.
//  ВключатьПустуюСсылку - Булево - признак добавления в структуру значение пустой ссылки.
//
// Возвращаемое значение:
//  Структура - структура содержащая значения перечисления, в том числе пустое значение.
//
Функция СтруктураЗначенийПеречисления(ИмяПеречисления, ВключатьПустуюСсылку = ЛОЖЬ) Экспорт
	
	СтруктураВозврата   = Новый Структура;
	Для каждого ЭлементМетаданных Из Метаданные.Перечисления[ИмяПеречисления].ЗначенияПеречисления Цикл
		СтруктураВозврата.Вставить(ЭлементМетаданных.Имя,Перечисления[ИмяПеречисления][ЭлементМетаданных.Имя]);
	КонецЦикла;
	
	Если ВключатьПустуюСсылку Тогда
		СтруктураВозврата.Вставить("ПустаяСсылка",Перечисления[ИмяПеречисления].ПустаяСсылка());
	КонецЕсли;		
	
	Возврат СтруктураВозврата;
	
КонецФункции // СтруктураЗначенийПеречисления()

// Получает имя элемента перечисления по значению.
//
// Параметры:
//  Перечисления.Значение - значение перечисления.
//
// Возвращаемое значение:
//  Строка - имя элемента перечисления в метаданных.
//
Функция ИмяЭлементаПеречисленияПоЗначению(ЗначениеПеречисления) Экспорт
	
	ИмяЭлемента = Строка(ЗначениеПеречисления);
	Для каждого ЭлементПеречисления Из Метаданные.Перечисления[ЗначениеПеречисления.Метаданные().Имя].ЗначенияПеречисления Цикл
		Если ЭлементПеречисления.Синоним = Строка(ЗначениеПеречисления) Тогда
			ИмяЭлемента = ЭлементПеречисления.Имя;
			Прервать;
		КонецЕсли; 
	КонецЦикла;
	
	Возврат ИмяЭлемента;
	
КонецФункции // ПолучитьПериодичностьДляЗапросаПоЗначениюПеречисления()

// Возвращает структуру реквизитов документа.
//
// Параметры:
//  ИмяДокумента - Строка - наименование документа
//
// Возвращаемое значение:
//  Структура - структура реквизитов документа.
//
Функция СтруктураПоДокументу(ИмяДокумента) Экспорт
	
	СтруктураДокумента = Новый Структура("Дата, Номер, Проведен");
	
	СтруктураДокумента.Вставить("Ссылка", Документы[ИмяДокумента].ПустаяСсылка());
	
	СтруктураДокумента.Вставить("ИмяДокумента", ИмяДокумента);
	
	Для каждого Реквизит Из Метаданные.Документы[ИмяДокумента].Реквизиты Цикл
	
		СтруктураДокумента.Вставить(Реквизит.Имя);
	
	КонецЦикла;
	
	СтруктураТабличныхЧастей = Новый Структура;
	ИменаТабличныхЧастей = Новый Массив;
	
	Для каждого ТабличнаяЧасть Из Метаданные.Документы[ИмяДокумента].ТабличныеЧасти Цикл
	
		
		Таблица = Новый ТаблицаЗначений;
		
		Для каждого Реквизит Из ТабличнаяЧасть.Реквизиты Цикл
		
			Таблица.Колонки.Добавить(Реквизит.Имя);
		
		КонецЦикла;
		СтруктураТабличныхЧастей.Вставить(ТабличнаяЧасть.Имя, Таблица);
		ИменаТабличныхЧастей.Добавить(ТабличнаяЧасть.Имя);
		
	КонецЦикла;
	
	СтруктураДокумента.Вставить("ТабличныеЧасти", СтруктураТабличныхЧастей);
	
	СтруктураДокумента.Вставить("ИменаТабличныхЧастей", ИменаТабличныхЧастей);
	
	Возврат СтруктураДокумента;
	
КонецФункции

// Устанавливает видимость элементов формы по массиву имен.
//
// Параметры:
//  Элементы - ЭлементыФормы - элементы формы видимость которых изменяется.
//  МассивВсехРеквизитов - Массив - Массив имен реквизитов, для которых устанавливается видимость.
//  МассивВидимыхРеквизитов - Массив - Массив имен реквизитов, которые должны быть видны на форме.
//
Процедура УстановитьВидимостьЭлементовПоМассиву(Элементы, Знач МассивВсехРеквизитов, Знач МассивВидимыхРеквизитов) Экспорт
	
	Если ТипЗнч(МассивВидимыхРеквизитов) <> ТипЗнч(Новый Массив) Тогда
		МассивВидимыхРеквизитов = Новый Массив;
	КонецЕсли;
	
	Для Каждого ЭлементМассива Из МассивВсехРеквизитов Цикл
		
		Позиция = Найти(ЭлементМассива, ".");
		Если Позиция <> 0 Тогда
			ИмяРеквизита = СтрЗаменить(ЭлементМассива, ".", "");
		Иначе
			ИмяРеквизита = ЭлементМассива;
		КонецЕсли;
		
		// Если реквизита нет в массиве видимых реквизитов, снимаем видимость элемента формы.
		ВидимостьРеквизита = (МассивВидимыхРеквизитов.Найти(ЭлементМассива) <> Неопределено);
		Если Элементы.Найти(ИмяРеквизита) <> Неопределено
		 И Элементы[ИмяРеквизита].Видимость <> ВидимостьРеквизита Тогда
			Элементы[ИмяРеквизита].Видимость = ВидимостьРеквизита;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Получает значение реквизита объекта в привилегированном режиме.
//
// Параметры:
//  Объект - ЛюбаяСсылка - объект метаданных конфигураций.
//  ИмяРеквизита - Строка - имя реквизита для получения значения строкой.
// 
// Возвращаемое значение:
//  Произвольный - зависит от типа значения прочитанного реквизита.
//               - если в параметр Ссылка передана пустая ссылка, то возвращается Неопределено;
//               - если в параметр Ссылка передана ссылка несуществующего объекта (битая ссылка), 
//                 то возвращается Неопределено.
// 
Функция ЗначениеРеквизитаВПривилегированномРежиме(Объект, ИмяРеквизита) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	Результат = Неопределено;
	Если ЗначениеЗаполнено(ИмяРеквизита) Тогда
		Результат = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект, ИмяРеквизита);
	КонецЕсли;
	Возврат Результат;
	
КонецФункции

// Удаляет набор записей в регистре по переданным значениям структуры.
//
// Параметры:
//  СтруктураЗаписи - Структура - структура, по значениям которой необходимо удалить набор записей.
//  ИмяРегистра     - Строка - имя регистра сведений, в котором необходимо удалить набор записей.
// 
Процедура УдалитьНаборЗаписейВРегистреСведений(СтруктураЗаписи, ИмяРегистра, Загрузка = Ложь) Экспорт
	
	НаборЗаписей = СоздатьНаборЗаписейРегистраСведений(СтруктураЗаписи, ИмяРегистра);
	
	НаборЗаписей.ОбменДанными.Загрузка = Загрузка;
	
	// записываем набор записей
	НаборЗаписей.Записать();
	
КонецПроцедуры

// Возвращает параметры регистрации внешней обработки.
//
// Параметры:
//  Наименование - Строка - строка дерева значений для получения индекса.
//  Информация - Строка - строка дерева значений для получения индекса.
//  
// Возвращаемое значение:
//  Структура - структура параметров регистрации.
//
Функция ПараметрыРегистрацииВнешнейОбработки(Наименование, Информация) Экспорт
	
	ПараметрыРегистрации = Новый Структура;
	
	ПараметрыРегистрации.Вставить("Вид", Перечисления.ВидыДополнительныхОтчетовИОбработок.ДополнительнаяОбработка);
	ПараметрыРегистрации.Вставить("Версия", "1.0");
	ПараметрыРегистрации.Вставить("Назначение", Новый Массив);
	ПараметрыРегистрации.Вставить("Наименование", Наименование);
	ПараметрыРегистрации.Вставить("БезопасныйРежим", Истина);
	ПараметрыРегистрации.Вставить("Информация", Информация);
	ПараметрыРегистрации.Вставить("Команды", Новый ТаблицаЗначений);
	
	Возврат ПараметрыРегистрации;
	
КонецФункции

// Возвращает контрагента розничного покупателя
// ВозвращаемоеЗначение:
//  СправочникСсылка.Контрагенты - контрагент Розничный покупатель.
Функция РозничныйПокупатель() Экспорт
	
	Возврат ОбщегоНазначенияРТПовтИсп.РозничныйПокупатель();
	
КонецФункции

#Область ПроцедурыИФункцииПроверкиКорректностиЗаполненияРегламентированныхДанных

//
Функция ИННКППУжеИспользуетсяВИнформационнойБазе(ИНН, КПП, ИсключаяСсылку = Неопределено) Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	|	Контрагенты.Ссылка КАК Контрагент
	|ИЗ
	|	Справочник.Контрагенты КАК Контрагенты
	|ГДЕ
	|	Контрагенты.ИНН = &ИНН
	|	И Контрагенты.КПП = &КПП
	|	И Контрагенты.Ссылка <> &Ссылка";
	
	Запрос.УстановитьПараметр("ИНН",ИНН);
	Запрос.УстановитьПараметр("КПП",КПП);
	Запрос.УстановитьПараметр("Ссылка",ИсключаяСсылку);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Контрагент;
	КонецЕсли;
	
	Возврат Неопределено;

КонецФункции

// Заполняет общие реквизиты документов,
// вызывается в обработчиках событий "ПриСозданииНаСервере" в модулях форм всех документов.
//
// Параметры:
//  Объект                    - ДокументОбъект - объект редактируемого документа.
//  КартинкаСостоянияДокумент - Число - реквизит формы объекта.
//  СостояниеДокумента        - Строка - реквизит формы объекта.
//  ЗаполнитьВидОперации      - Булево - признак заполнения вида операции.
//
Процедура ЗаполнитьШапкуДокумента(Объект, КартинкаСостоянияДокумента, СостояниеДокумента, РазрешеноПроведение) Экспорт
		
	МетаданныеДокумента = Объект.Ссылка.Метаданные();
	РазрешеноПроведение = МетаданныеДокумента.Проведение = Метаданные.СвойстваОбъектов.Проведение.Разрешить;
	
	Если Объект.Ссылка.Пустая() Тогда
		
		СостояниеДокумента = НСтр("ru = 'Новый'");
		КартинкаСостоянияДокумента = 0;
		
	Иначе
		
		Если Объект.Проведен Тогда
			
			СостояниеДокумента = НСтр("ru = 'Проведен'");
			КартинкаСостоянияДокумента = 1;
			
		ИначеЕсли РазрешеноПроведение И НЕ Объект.ПометкаУдаления Тогда
			
			СостояниеДокумента = НСтр("ru = 'Не проведен'");
			КартинкаСостоянияДокумента = 0;
			
		ИначеЕсли РазрешеноПроведение И Объект.ПометкаУдаления Тогда
			
			СостояниеДокумента = НСтр("ru = 'Не проведен'");
			КартинкаСостоянияДокумента = 2;
			
		ИначеЕсли Объект.ПометкаУдаления Тогда
			СостояниеДокумента = НСтр("ru = 'Записан'");
			КартинкаСостоянияДокумента = 5;
		Иначе
			
			СостояниеДокумента = НСтр("ru = 'Записан'");
			КартинкаСостоянияДокумента = 3;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Проверяет проверку признака "Проведен" у документа основания.
//
// Параметры: 
//  ДокументОснование - ДокументСсылка - документ у которого проверяется признак проведенности.
//
Процедура ПроверитьВозможностьВводаНаОсновании(ДокументОснование) Экспорт
	
	Если Не ДокументОснование.Проведен Тогда
			
			ТекстОшибки = НСтр("ru='Документ %1 не проведен. Ввод на основании непроведенного документа невозможен.'");
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибки, ДокументОснование);
			
			ВызватьИсключение ТекстОшибки;
			
	КонецЕсли;
	
КонецПроцедуры

// Помещает во временное хранилище  табличную часть объекта.
//
// Параметры:
//  ОбъектТабличнойЧасти - ДокументОбъект, СправочникОбъект, ОбработкаОбъект и т.д. - объект для помещения во временное хранилище.
//  ИмяТабличнойЧасти - Строка - имя табличной части объекта.
//  УникальныйИдентификатор - УникальныйИдентификатор - уникальный идентификатор для помещения в хранилище.
//
// Возвращаемое значение:
//  Строка - адрес временного хранилища.
//
Функция ПоместитьВоВременноеХранилищеТабличнуюЧастьОбъекта(ОбъектТабличнойЧасти, ИмяТабличнойЧасти, УникальныйИдентификатор) Экспорт

	АдресВХранилище = ПоместитьВоВременноеХранилище(ОбъектТабличнойЧасти[ИмяТабличнойЧасти].Выгрузить(), УникальныйИдентификатор);
	
	Возврат АдресВХранилище;

КонецФункции // ПоместитьВоВременноеХранилищеТабличнуюЧастьДокумента()

// Переносит строку из запроса в Структуру.
//
// Параметры:
//  РезультатЗапроса - РезультатЗапроса - выборка запроса.
//  СтрокаВыборки - Структура - строка выборки запроса для переноса.
//  СтруктураЭлемента - Структура - структура элемента для переноса строка.
//
Процедура ПеренестиСтрокуВыборкиВСтруктуру(РезультатЗапроса, СтрокаВыборки, СтруктураЭлемента) Экспорт
	
	Если СтруктураЭлемента = Неопределено 
		ИЛИ РезультатЗапроса = Неопределено 
		ИЛИ СтрокаВыборки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураЭлемента.Очистить();
	Для Каждого Колонка Из РезультатЗапроса.Колонки Цикл
		СтруктураЭлемента.Вставить(Колонка.Имя, СтрокаВыборки[Колонка.Имя]);
	КонецЦикла;
	
КонецПроцедуры

// Структура по строке выборки.
//
// Парметры:
//  РезультатЗапроса - РезультатЗапроса - результат запроса.
//  СтрокаВыборки - Структура - структура строки выборки.
// 
// ВозвращаемыеПараметры:
//  Структура - структура по строке выборки.
//
Функция СтруктураПоСтрокеВыборки(РезультатЗапроса, СтрокаВыборки) Экспорт
	
	РезультирующаяСтруктура = Новый Структура;
	ПеренестиСтрокуВыборкиВСтруктуру(РезультатЗапроса, СтрокаВыборки, РезультирующаяСтруктура);
	Возврат РезультирующаяСтруктура; 
	
КонецФункции

// Переносит строку из запроса в параметры запроса.
//
// Параметры:
//  РезультатЗапроса - РезультатЗапроса - результат выполнения запроса.
//  СтрокаВыборки - Структура - структура строки выборки.
//  Запрос - Строка - текст запроса.
//
Процедура ПеренестиСтрокуВыборкиВПараметрыЗапроса(РезультатЗапроса, СтрокаВыборки, Запрос) Экспорт
	
	Если РезультатЗапроса = Неопределено 
		ИЛИ СтрокаВыборки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого Колонка Из РезультатЗапроса.Колонки Цикл
		Запрос.УстановитьПараметр(Колонка.Имя, СтрокаВыборки[Колонка.Имя])
	КонецЦикла;
	
КонецПроцедуры // ПеренестиСтрокуВыборкиВСтруктуру()

// Отбирает из переданной таблицы строки по заданным критериям.
//
// Параметры:
//  Источник - ТаблицаЗначений, РезультатЗапроса, ОбластьЯчеекТабличногоДокумента - таблица-источник.
//  СтруктураКритериев - Структура - названия отборов и значения, по которым нужно отобрать строки.
//  СтруктураСложныхКритериев - Структура - если свойство передано, то значение содержит вид сравнения.
//
// Возвращаемое значение:
//  РезультатЗапроса - таблица с нужными строками.
//
Функция ОтобратьСтрокиПоКритериям(Источник, СтруктураКритериев, СтруктураСложныхКритериев = Неопределено) Экспорт

	Перем ВидСравненияСложный;

	Если СтруктураСложныхКритериев = Неопределено Тогда
		СтруктураСложныхКритериев = Новый Структура;
	КонецЕсли;

	ПостроительЗапроса = Новый ПостроительЗапроса;
	ПостроительЗапроса.ИсточникДанных = Новый ОписаниеИсточникаДанных(Источник);

	Для Каждого Критерий Из СтруктураКритериев Цикл
		НовыйОтбор = ПостроительЗапроса.Отбор.Добавить(Критерий.Ключ);

		СтруктураСложныхКритериев.Свойство(Критерий.Ключ, ВидСравненияСложный);

		Если ВидСравненияСложный = Неопределено Тогда
			НовыйОтбор.Установить(Критерий.Значение);
		Иначе
			НовыйОтбор.Использование = Истина;
			НовыйОтбор.ВидСравнения = ВидСравненияСложный;
			НовыйОтбор.Значение = Критерий.Значение;
		КонецЕсли;
	КонецЦикла;

	Возврат ПостроительЗапроса.Результат;

КонецФункции // ОтобратьСтрокиПоКритериям()

// Возвращает строковое представление номенклатуры с характеристикой для отображения в сообщениях.
//
// Параметры:
//  НоменклатураПредставление - строковое представление номенклатуры или ссылка на элемент справочника "Номенклатура".
//  ХарактеристикаПредставление - строковое представление характеристики или ссылка на элемент справочника
//                                "Номенклатура".
//
Функция ПредставлениеНоменклатуры(НоменклатураПредставление, ХарактеристикаПредставление, СерияПредставление = "") Экспорт

	СтрПредставление = СокрЛП(НоменклатураПредставление);

	Если ЗначениеЗаполнено(ХарактеристикаПредставление) И НЕ ХарактеристикаПредставление = "<>" Тогда
		СтрПредставление = СтрПредставление + " / " + СокрЛП(ХарактеристикаПредставление);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СерияПредставление)Тогда
		СтрПредставление = СтрПредставление + " / " + СокрЛП(СерияПредставление);
	КонецЕсли;

	Возврат СтрПредставление;

КонецФункции

// Проверяет возможность использования для свойства строки неограниченный длины.
//
// Параметры:
//  ТипЗначенияСвойства - ТипЗначения - тип значения свойства.
//  МногострочноеПолеВвода - Число - количество строк.
//
// Возвращаемое значение:
//  Булево - используется неограниченная строка или нет.
//
Функция ИспользоватьНеограниченнуюСтроку(ТипЗначенияСвойства, МногострочноеПолеВвода) Экспорт
	
	Если ТипЗначенияСвойства.СодержитТип(Тип("Строка"))
	   И ТипЗначенияСвойства.Типы().Количество() = 1
	   И МногострочноеПолеВвода > 1 Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

// Проверяет, что включена ф.о "Использовать подключаемое оборудование" и настроено оборудование.
//
// Параметры:
//  ТипыПодключенногоОборудования - Массив - массив типов подключаемого оборудования.
//
// Возвращаемое значение:
//  Булево - признак использования подключаемого оборудования
//
Функция ИспользоватьПодключаемоеОборудование(ТипыПодключенногоОборудования = Неопределено) Экспорт
	
	ИспользоватьПодключаемоеОборудование = ЗначениеНастроекВызовСервера.ИспользоватьПодключаемоеОборудование();
	
	Если ТипыПодключенногоОборудования = Неопределено Тогда
		ТипыПодключенногоОборудования = МенеджерОборудованияВызовСервера.ТипыИспользуемогоОборудованияТекущегоРабочегоМеста();
	КонецЕсли;
	
	Возврат
		ИспользоватьПодключаемоеОборудование
		И ТипыПодключенногоОборудования <> Неопределено
		И ТипыПодключенногоОборудования.Количество() > 0;
		
КонецФункции            

// Возвращает разрешение на использование подключаемого оборудования Offline.
//
// Возвращаемое значение:
//  Булево - признак использования подключаемого оборудования офлайн.
//
Функция ИспользоватьПодключаемоеОборудованиеOffline() Экспорт
	
	Возврат ПолучитьФункциональнуюОпцию("ИспользоватьОбменСПодключаемымОборудованием");
	
КонецФункции

// Проверяет дубли строк в табличной части.
//
// Параметры:
//  Объект - ДокументОбъект - проверяемый документ.
//  ИмяТЧ - Строка - имя проверяемой табличной части.
//  КлючевыеРеквизиты - Массив - массив имен реквизитов, по которым определяется уникальность строки.
//  Отказ - Булево - отказ продолжения операции.
//
Процедура ПроверитьНаличиеДублейСтрокТЧ(Объект,ИмяТЧ,КлючевыеРеквизиты,Отказ, ПредставлениеТЧ = "") Экспорт
	
	МетаданныеОбъекта = Объект.Метаданные();
	Если ПустаяСтрока(ПредставлениеТЧ) Тогда
		ПредставлениеТЧ   = МетаданныеОбъекта.ТабличныеЧасти[ИмяТЧ].Синоним;
	КонецЕсли;
	
	ТекстПоляВыборки         = "";
	ТекстПоляСоединения      = "";
	ТекстПоляВыгрузки        = "";
	ТекстДляСообщенияОДублях = "";
	ТекстПоляОшибки          = "";
	Для Каждого СтрокаМассива Из КлючевыеРеквизиты Цикл
		
		Если НЕ ЗначениеЗаполнено(ТекстПоляОшибки) Тогда
			ТекстПоляОшибки = СтрокаМассива;
		КонецЕсли;
		
		ТекстПоляВыборки = ТекстПоляВыборки + "
	|	ТаблицаПроверки." + СтрокаМассива + ",";
		ТекстПоляСоединения = ТекстПоляСоединения + "
	|	И ТаблицаПроверки." + СтрокаМассива + " = ДублирующиесяСтроки."+ СтрокаМассива;
		ТекстПоляВыгрузки = ТекстПоляВыгрузки + СтрокаМассива + ",";
		
		ПредставлениеРеквизита = МетаданныеОбъекта.ТабличныеЧасти[ИмяТЧ].Реквизиты[СтрокаМассива].Синоним;
		
		ТекстДляСообщенияОДублях = ТекстДляСообщенияОДублях + """"  + ПредставлениеРеквизита  + """, "
	КонецЦикла;
	
	Если НЕ ЗначениеЗаполнено(ТекстПоляОшибки) Тогда
		ТекстПоляОшибки = "НомерСтроки";
	КонецЕсли;
	
	ТекстДляСообщенияОДублях = Лев(ТекстДляСообщенияОДублях, СтрДлина(ТекстДляСообщенияОДублях) - 2);
	
	СтроковыеФункцииКлиентСервер.УдалитьПоследнийСимволВСтроке(ТекстПоляВыборки,1);
	СтроковыеФункцииКлиентСервер.УдалитьПоследнийСимволВСтроке(ТекстПоляВыгрузки,1);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ 
	|	ТаблицаПроверки.НомерСтроки, " 
	+ ТекстПоляВыборки + "
	|ПОМЕСТИТЬ ТаблицаПроверки
	|ИЗ
	|	&ТаблицаПроверки КАК ТаблицаПроверки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МИНИМУМ(ТаблицаПроверки.НомерСтроки) КАК НомерСтроки,
	|	СУММА(1) КАК КоличествоДублей,"
	+ ТекстПоляВыборки + "
	|ПОМЕСТИТЬ ДублирующиесяСтроки
	|ИЗ
	|	ТаблицаПроверки КАК ТаблицаПроверки
	|
	|СГРУППИРОВАТЬ ПО " 
	+ ТекстПоляВыборки + "
	|
	|ИМЕЮЩИЕ
	|	СУММА(1) > 1
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаПроверки.НомерСтроки,
	|	ДублирующиесяСтроки.НомерСтроки КАК ПерваяСтрока
	|ИЗ
	|	ТаблицаПроверки КАК ТаблицаПроверки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ДублирующиесяСтроки КАК ДублирующиесяСтроки
	|		ПО ТаблицаПроверки.НомерСтроки <> ДублирующиесяСтроки.НомерСтроки " 
	+ ТекстПоляСоединения;
	
	Запрос.УстановитьПараметр("ТаблицаПроверки",Объект[ИмяТЧ].Выгрузить(,"НомерСтроки," + ТекстПоляВыгрузки));
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если КлючевыеРеквизиты.Количество() = 1 Тогда
		ШаблонСообщения = НСтр("ru = 'Данные в строке %НомерСтроки% списка ""%ПредставлениеТЧ%"" совпадают с данными в строке %ПерваяСтрока% по значению поля %НазванияПолей%.'");
	Иначе
		ШаблонСообщения = НСтр("ru = 'Данные в строке %НомерСтроки% списка ""%ПредставлениеТЧ%"" совпадают с данными в строке %ПерваяСтрока% по сочетанию значений полей %НазванияПолей%.'");
	КонецЕсли;	
	
	Пока Выборка.Следующий() Цикл
		
		ТекстСообщения =  СтрЗаменить(ШаблонСообщения, "%ПредставлениеТЧ%", ПредставлениеТЧ);
		ТекстСообщения =  СтрЗаменить(ТекстСообщения, "%НомерСтроки%", Выборка.НомерСтроки);
		ТекстСообщения =  СтрЗаменить(ТекстСообщения, "%ПерваяСтрока%", Выборка.ПерваяСтрока);
		ТекстСообщения =  СтрЗаменить(ТекстСообщения, "%НазванияПолей%", ТекстДляСообщенияОДублях);
		
		Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(ИмяТЧ, Выборка.НомерСтроки, ТекстПоляОшибки);
		
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,Поле,"Объект",Отказ);
		
	КонецЦикла;
КонецПроцедуры

// Добавляет в таблицу значений строки из другой таблицы значений и 
// в них значения колонок с совпадающими наименованиями.
//
// Параметры:
//  ТаблицаИсточник - ТаблицаЗначений -  таблица значений, откуда берутся значения.
//  ТаблицаПриемник - ТаблицаЗначений - таблица значений, куда добавляются строки.
//  ОчищатьПриемник - Булево - признак очистки таблицы приемника.
//
Процедура ЗагрузитьВТаблицуЗначений(ТаблицаИсточник, ТаблицаПриемник, ОчищатьПриемник = Ложь) Экспорт

	Если ОчищатьПриемник Тогда
		ТаблицаПриемник.Очистить();
	КонецЕсли;
	
	// Заполним значения в совпадающих колонках.
	Для Каждого СтрокаТаблицыИсточника Из ТаблицаИсточник Цикл

		СтрокаТаблицыПриемника = ТаблицаПриемник.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТаблицыПриемника, СтрокаТаблицыИсточника);

	КонецЦикла;

КонецПроцедуры

// Дополняет одну таблицу значений строками другой таблицы значений.
//
// Параметры:
//  Приемник - ТаблицаЗначений - таблица значений, в которую добавляются строки.
//  Источник - ТаблицаЗначений - таблица значений, из которой берутся добавляемые строки.
//
Процедура ДобавитьСтрокиВТаблицу(Приемник, Источник) Экспорт

	Для каждого СтрокаИсточника Из Источник Цикл
		ЗаполнитьЗначенияСвойств(Приемник.Добавить(), СтрокаИсточника);
	КонецЦикла;

КонецПроцедуры

// Заполняет колонку таблицы значений последовательными номерами.
//
// Параметры:
//  Таблица - ТаблицаЗначений - таблица значений, строки которой нужно пронумеровать.
//  ИмяКолонкиНомераСтроки - КолонкаТаблицыЗначений - колонка таблицы значений, в которой будут указаны номера строк.
//
Процедура ПронумероватьТаблицуЗначений(Таблица, ИмяКолонкиНомераСтроки) Экспорт
	
	//Добавлена проверка на существование колонки
	Если Таблица.Колонки.Найти(ИмяКолонкиНомераСтроки) = Неопределено Тогда
		Таблица.Колонки.Добавить(ИмяКолонкиНомераСтроки, ОбщегоНазначенияРТКлиентСервер.ОписаниеТиповЧисла(15, 0));
	КонецЕсли;

	КоличествоСтрок = Таблица.Количество() - 1;
	Для НомерСтроки = 0 По КоличествоСтрок Цикл
		Таблица[НомерСтроки][ИмяКолонкиНомераСтроки] = НомерСтроки;
	КонецЦикла;

КонецПроцедуры

// Возвращает строковое представление документа для отображения в сообщениях.
//
// Параметры:
//  Ссылка - ДокументСсылка - ссылка на документ.
//  Номер - Число - номер документа.
//  Дата - Дата - дата документа.
//
// Возвращаемое значение:
//  Строка - представление документа.
//
Функция ПредставлениеДокумента(Ссылка, Номер, Дата) Экспорт
	
	Возврат
		Ссылка.Метаданные().Синоним
		+ ?(ЗначениеЗаполнено(Номер), " " + Номер, "")
		+ ?(ЗначениеЗаполнено(Дата), " " + НСтр("ru='от'") + " " + Формат(Дата,"ДЛФ=D"), "");
	
КонецФункции

// Возвращает строку для вставки между текстами объединяемых запросов
// Параметры:
//	ТолькоУникальные - Булево - признак того, что необходимо выбирать только уникальные записи при объединении
//		значение по умолчанию - ЛОЖЬ.
// 
// Возвращаемое значение:
//  Строка - строка для вставки между текстами запросов.
//
Функция РазделительЗапросовВОбъединении(ТолькоУникальные = Ложь) Экспорт
	
	Если ТолькоУникальные Тогда
		Возврат "
		|
		|ОБЪЕДИНИТЬ
		|
		|";
	Иначе
		Возврат "
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|";
	КонецЕсли;
	
КонецФункции

// Возвращает пользователя с учетом измененных прав.
//
// Возвращаемое значение:
//  СправочникСсылка.Пользователи - пользователь с учетом измененных прав.
//
Функция ПользовательСУчетомИзмененныхПрав() Экспорт
	
	Пользователь = глЗначениеПеременной("ПользовательИзмененныхПрав");
	
	Если Пользователь = Неопределено 
		ИЛИ НЕ ЗначениеЗаполнено(Пользователь) Тогда
		Пользователь = Пользователи.ТекущийПользователь();
	КонецЕсли;
	
	Возврат Пользователь;
	
КонецФункции // ПользовательСУчетомИзмененныхПрав()

// Возвращает признак равенства организаций с учетом обособленных подразделений
// Параметры:
//  Организация1, Организация2 - СправочникСсылка.Организации - сравниваемые организации
// 
// Возвращаемое значение:
//  Булево 
//
Функция ОрганизацииОднородны(Организация1, Организация2) Экспорт
	
	Если НЕ ЗначениеЗаполнено(Организация1) 
		ИЛИ НЕ ЗначениеЗаполнено(Организация2) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если Организация1 = Организация2 Тогда
		Возврат Истина;
	КонецЕсли;
	
	ИНН1 = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Организация1, "ИНН");
	ИНН2 = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Организация2, "ИНН");
	
	Если НЕ ЗначениеЗаполнено(ИНН1) 
		ИЛИ НЕ ЗначениеЗаполнено(ИНН2) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если ИНН1 = ИНН2 Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции // ОрганизацииОднородны()

// Удаляет устаревшие параметры выбора 
//  Параметры:
//   ПараметрыВыбора - Фиксированные массив
Процедура УдалитьПараметрыВыбораРасширений(ПараметрыВыбора) Экспорт
	
	Если ПараметрыВыбора.Количество() > 0 Тогда
		МассивДляВнешнихОбработок = Новый Массив;
		
		СтрокаПоиска = НСтр("ru = '<Объект из отключенного расширения конфигурации>'");
		Для каждого ПараметрВыбора Из ПараметрыВыбора Цикл
			Если СтрНайти(ПараметрВыбора.Значение, СтрокаПоиска) = 0 Тогда
				МассивДляВнешнихОбработок.Добавить(ПараметрВыбора.Значение);
			КонецЕсли;
		КонецЦикла;
		
		ПараметрыВыбора = Новый ФиксированныйМассив(МассивДляВнешнихОбработок);
		
	КонецЕсли;
	
Конецпроцедуры

#КонецОбласти

#Область ПрочиеСлужебныеФункции

// Получает ссылки на объекты с файлами.
//
// Параметры:
//  ПолноеИмяОМ - Строка - полное имя объекта метаданных.
//
// Возвращаемое значение:
//  Массив - массив ссылок на объекты с файлами.
//
Функция СсылкиНаОбъектыСФайлами(ПолноеИмяОМ) Экспорт
	
	ТекстЗапроса = 
	"
	|ВЫБРАТЬ
	|	ОбъектСФайлами.Ссылка КАК Ссылка
	|ИЗ
	|	[ПолноеИмяОМ] КАК ОбъектСФайлами
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Файлы КАК Файлы
	|		ПО ОбъектСФайлами.Ссылка = Файлы.ВладелецФайла
	|ГДЕ
	|	Файлы.Ссылка <> ЗНАЧЕНИЕ(Справочник.Файлы.ПустаяСсылка)
	|СГРУППИРОВАТЬ ПО
	|	ОбъектСФайлами.Ссылка";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "[ПолноеИмяОМ]", ПолноеИмяОМ);
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
КонецФункции

// Получает картинку для вывода на странице с комментарием в зависимости
// от наличия текста в комментарии.
//
// Параметры:
//  Комментарий  - Строка - текст комментария.
//
// Возвращаемое значение:
//  Картинка - картинка, которая должна отображаться на странице с комментарием.
//
Функция КартинкаКомментария(Комментарий) Экспорт
	
	Если ЗначениеЗаполнено(Комментарий) Тогда
		Картинка = БиблиотекаКартинок.Комментарий;
	Иначе
		Картинка = Новый Картинка;
	КонецЕсли;
	
	Возврат Картинка;
	
КонецФункции

// Раскладывает переданный массив ссылок в соответствие по типам этих ссылок.
//
// Параметры:
//  МассивСсылок - Массив - массив ссылок на объекты информационной базы.
//
// Возвращаемое значение:
//  Соответствие:
//  	*Ключ - полное имя типа ссылки.
//  	*Значение - массив ссылок этого типа.
//
Функция СоответствиеМассивовПоТипамОбъектов(МассивСсылок) Экспорт
	
	СоответствиеТипов = Новый Соответствие;
	
	Для Каждого Объект Из МассивСсылок Цикл
		
		Если ТипЗнч(Объект) = Тип("Массив") Тогда
			Для каждого ЭлементМассива Из Объект Цикл
				ТипОбъекта = ЭлементМассива.Метаданные().ПолноеИмя();
				ТекущийТипОбъекта = СоответствиеТипов.Получить(ТипОбъекта);
				
				Если ТекущийТипОбъекта = Неопределено Тогда
					СоответствиеТипов.Вставить(ТипОбъекта, Новый Массив);
					ТекущийТипОбъекта = СоответствиеТипов.Получить(ТипОбъекта);
				КонецЕсли;
				ТекущийТипОбъекта.Добавить(ЭлементМассива);
			КонецЦикла;
		ИначеЕсли НЕ Объект = Неопределено Тогда
			ТипОбъекта = Объект.Метаданные().ПолноеИмя();
			ТекущийТипОбъекта = СоответствиеТипов.Получить(ТипОбъекта);
			
			Если ТекущийТипОбъекта = Неопределено Тогда
				СоответствиеТипов.Вставить(ТипОбъекта, Новый Массив);
				ТекущийТипОбъекта = СоответствиеТипов.Получить(ТипОбъекта);
			КонецЕсли;
			ТекущийТипОбъекта.Добавить(Объект);
			
		КонецЕсли;
	КонецЦикла;
	
	Возврат СоответствиеТипов;
	
КонецФункции

// Возвращает реквизит формы по имени, в случае отсутствия возвращает неопределено.
//
// Параметры:
//  Форма - Форма - форма, реквизит формы которой необходимо вернуть.
//  ИмяРеквизита - Строка - имя реквизита формы.
//
// Возвращаемое значение:
//  РеквизитФормы - возвращаемый реквизит формы.
//  
Функция РеквизитФормы(Форма, ИмяРеквизита) Экспорт
	
	Для каждого РеквизитФормы Из Форма.ПолучитьРеквизиты() Цикл
		
		Если РеквизитФормы.Имя = ИмяРеквизита Тогда
			Возврат РеквизитФормы
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции

// Уничтожает временные таблицы менеджера временных таблиц.
//
// Параметры:
//  МенеджерВременныхТаблиц - МенеджерВременныхТаблиц - менеджер временных таблиц, таблицы которого нужно уничтожить.
//  СписокТаблиц - Строка - имена временных таблиц для уничтожения, разделенные запятыми. Если параметр не установлен - все таблицы.
//  ИсключаяТаблицы - Строка - имена временных таблиц, которые нужно оставить, разделенные запятыми.
//
Процедура УничтожитьВременныеТаблицы(МенеджерВременныхТаблиц, СписокТаблиц = Неопределено, ИсключаяТаблицы = Неопределено) Экспорт
	
	Если ИсключаяТаблицы <> Неопределено Тогда
		МассивИсключаемыхТаблиц = СтрРазделить(ИсключаяТаблицы, ",");
	Иначе
		МассивИсключаемыхТаблиц = Новый Массив();
	КонецЕсли;
	
	Если СписокТаблиц <> Неопределено Тогда
		МассивТаблиц = СтрРазделить(СписокТаблиц, ",");
	Иначе
		МассивТаблиц = Новый Массив();
		Для Каждого Таблица Из МенеджерВременныхТаблиц.Таблицы Цикл
			Если МассивИсключаемыхТаблиц.Найти(Таблица.ПолноеИмя) = Неопределено Тогда
				МассивТаблиц.Добавить(Таблица.ПолноеИмя);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если МассивТаблиц.Количество() > 0 Тогда
		ТекстЗапроса = "";
		Для Каждого ИмяТаблицы Из МассивТаблиц Цикл
			ТекстЗапроса = ТекстЗапроса + "УНИЧТОЖИТЬ " + ИмяТаблицы + "; ";
		КонецЦикла;
		Запрос = Новый Запрос(ТекстЗапроса);
		Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
		Запрос.Выполнить();
	КонецЕсли;
	
КонецПроцедуры

// Выгружает таблицу значений из ДанныеФормыКоллекция и ТабличнаяЧасть
//
// Параметры:
//  ТаблицаИсточник - ДанныеФормыКоллекция, ТабличнаяЧасть - таблица источник выгрузки.
//  Строки - Массив, Структура - массив строк для выгрузки или структура отбора.
//  Колонки - Строка - перечисленные через запятую имена колонок для выгрузки.
//  КолонкиПоЗначению - Структура - структура колонок для добавление в результирующую таблицу:
//  								*Ключ - Имя новой колонки,
//  								*Значение - Значение для подстановки по все строки новой колонки.
//  НовыеИменаКолонок - Структура - структура с данными о переименовании колонок в результирующей таблице:
//  								*Ключ - Текущее имя колонки,
//  								*Значение - Новое имя колонки.
//
// Возвращаемое значение:
//  ТаблицаЗначений - Таблица результат выгрузки из таблицы источника с добавленными и переименованными колонками
//
Функция ТаблицаЗначений(ТаблицаИсточник, Строки, Колонки = "НомерСтроки",
			Знач КолонкиПоЗначению = Неопределено, Знач НовыеИменаКолонок = Неопределено) Экспорт
	
	// Определение значений по умолчанию
	Если КолонкиПоЗначению = Неопределено Тогда
		КолонкиПоЗначению = Новый Структура;
	КонецЕсли;
	Если НовыеИменаКолонок = Неопределено Тогда
		НовыеИменаКолонок = Новый Структура;
	КонецЕсли;
	
	// Определить список выгружаемых колонок
	СтруктураДругихИменКолонок = Новый Структура;
	Для Каждого НовоеИмя Из НовыеИменаКолонок Цикл
		СтруктураДругихИменКолонок.Вставить(НовоеИмя.Значение, НовоеИмя.Ключ);
	КонецЦикла;
	ИменаКолонок = "";
	ИмяКолонки = "";
	СтруктураКолонок = Новый Структура(Колонки);
	Для Каждого Колонка Из СтруктураКолонок Цикл
		Если Не СтруктураДругихИменКолонок.Свойство(Колонка.Ключ, ИмяКолонки) Тогда
			ИмяКолонки = Колонка.Ключ;
		КонецЕсли;
		Если Не КолонкиПоЗначению.Свойство(ИмяКолонки) Тогда
			ИменаКолонок = ИменаКолонок + ", " + ИмяКолонки;
		КонецЕсли;
	КонецЦикла;
	
	// Выгрузить из таблицы источника
	Если ТипЗнч(ТаблицаИсточник) = Тип("ТаблицаЗначений") Тогда
		ТаблицаРезультата = ТаблицаИсточник.Скопировать(Строки, Сред(ИменаКолонок, 3));
	Иначе
		ТаблицаРезультата = ТаблицаИсточник.Выгрузить(Строки, Сред(ИменаКолонок, 3));
	КонецЕсли;
	
	// Добавить новые колонки в таблицу результата
	Если КолонкиПоЗначению <> Неопределено Тогда
		Для Каждого Колонка Из КолонкиПоЗначению Цикл
			МассивТипов = Новый Массив;
			МассивТипов.Добавить(ТипЗнч(Колонка.Значение));
			ТаблицаРезультата.Колонки.Добавить(Колонка.Ключ, Новый ОписаниеТипов(МассивТипов));
			ТаблицаРезультата.ЗаполнитьЗначения(Колонка.Значение, Колонка.Ключ);
		КонецЦикла;
	КонецЕсли;
	
	// Переименовать колонки в таблице результата
	Если НовыеИменаКолонок <> Неопределено Тогда
		Для Каждого Колонка Из НовыеИменаКолонок Цикл
			ТаблицаРезультата.Колонки[Колонка.Ключ].Имя = Колонка.Значение;
		КонецЦикла;
	КонецЕсли;
	
	Возврат ТаблицаРезультата;
	
КонецФункции // ВыгрузитьТаблицуЗначений()

// Возвращает таблицу значений с данными дерева значений
//
// Параметры:
//  ДеревоДанных - ДеревоЗначений, ДанныеФормыДерево - дерево с данными
//  Уровень		 - Число - уровень дерева, на котором расположены искомые данные (нумерация с 0). Если не передано, то 
//						   будут возвращенные данные со всех последних уровней веток.
//
// Возвращаемое значение:
//  ТаблицаЗначений - содержит данные дерева.
//
Функция ДанныеДерева(ДеревоДанных, Уровень = Неопределено) Экспорт
	
	ТаблицаВозврата = Новый ТаблицаЗначений;
	Для Каждого Колонка Из ДеревоДанных.Колонки Цикл
		ТаблицаВозврата.Колонки.Добавить(Колонка.Имя, Колонка.ТипЗначения);
	КонецЦикла;
	
	Если ТипЗнч(ДеревоДанных) = Тип("ДеревоЗначений") Тогда
		СтрокиДерева = ДеревоДанных.Строки;
	ИначеЕсли ТипЗнч(ДеревоДанных) = Тип("ДанныеФормыДерево") Тогда
		СтрокиДерева = ДеревоДанных.ПолучитьЭлементы();
	Иначе
		ВызватьИсключение НСтр("ru = 'Передан некорректный тип аргумента'");
	КонецЕсли;
	
	ЗаполнитьТаблицуРекурсивно(ТаблицаВозврата, СтрокиДерева, Уровень, 0);
	
	Возврат ТаблицаВозврата;

КонецФункции

#КонецОбласти

#Область ФункцииСОбщимиПеременными

// Возвращает значение экспортных переменных модуля приложений из параметра сеанса.
// Необходимо для возможности создания объектов на сервере.
//
// Параметры:
//  ИмяПараметра - Строка - имя параметра строкой.
//  Кэш - Структура - кэшированные данные.
//  КэшИзменен - Булево - признак измененности кэша.
// 
// Возвращаемое значение:
//  Произвольный - значение переменной модуля.
//
Функция ПолучитьЗначениеПеременной(ИмяПараметра, Кэш = Неопределено, КэшИзменен = Ложь) Экспорт
	
	Если Кэш = Неопределено Тогда
		// Кэш не был проинициализирован.
		Кэш = Новый Структура;
	Иначе
		// Ищем значение в структуре
		НайденноеЗначение = Неопределено;
		Если Кэш.Свойство(ИмяПараметра, НайденноеЗначение) Тогда
			Возврат НайденноеЗначение;
		КонецЕсли;
	КонецЕсли;
	
	Если ВРег(ИмяПараметра) = ВРег("ЗначенияДополнительныхПравПользователя") Тогда
		НайденноеЗначение = Новый Соответствие;
	КонецЕсли;
	
	Кэш.Вставить(ИмяПараметра, НайденноеЗначение);
	КэшИзменен = Истина;
	
	Возврат НайденноеЗначение;
	
КонецФункции

// Устанавливает значение экспортных переменных модуля приложения.
//
// Параметры:
//  ИмяПараметра - Строка - имя параметра для установки.
//  Кэш - Структура - значение кэшированных переменных.
//  ЗначениеПараметра - Произвольный - новое значение для установки.
//  ОбновлятьВоВсехКэшах - Булево - признак обновления переменной во всех кэшах.
//
Процедура УстановитьЗначениеПеременной(ИмяПараметра, Кэш, ЗначениеПараметра, ОбновлятьВоВсехКэшах = Ложь) Экспорт
	
	Если Кэш = Неопределено Тогда
		Кэш = Новый Структура;
	КонецЕсли;
	
	Если Кэш.Свойство(ИмяПараметра) Тогда
		Кэш.Вставить(ИмяПараметра, ЗначениеПараметра);
	КонецЕсли;
	
	#Если Клиент ИЛИ ВнешнееСоединение Тогда
		Если ОбновлятьВоВсехКэшах Тогда
			КэшНаСервере = ПараметрыСеанса.ОбщиеЗначения.Получить();
			КэшНаСервере.Вставить(ИмяПараметра, ЗначениеПараметра);
			ПараметрыСеанса.ОбщиеЗначения = Новый ХранилищеЗначения(КэшНаСервере);
		КонецЕсли;
	#КонецЕсли
	
КонецПроцедуры

// Определяет доступен ли для пользователя упрощенный ввод контрагентов.
//
// Возвращаемое значение:
//  Булево - Истина, если упрощенный ввод доступен, и ложь в обратном случае.
//
Функция УпрощенныйВводДоступен() Экспорт
	
	УпрощенныйВводНедоступен = ПолучитьФункциональнуюОпцию("ИспользоватьОбменБизнесСеть")
		ИЛИ ПолучитьФункциональнуюОпцию("ИспользоватьОбменЭД")
		ИЛИ ПолучитьФункциональнуюОпцию("ИспользоватьСинхронизациюДанных");
	
	Возврат РольДоступна("ПолныеПрава") И НЕ УпрощенныйВводНедоступен;
КонецФункции

#КонецОбласти

#Область ВспомогательныеПроцедурыРаботыСОтчетами

// Выводит в верхнем колонтитуле табличного документа текущую дату сеанса.
//
// Параметры:
//  ДокументРезультат - ТабличныйДокумент - документ, в который добавляется колонтитул.
//
Процедура ВывестиДатуФормированияОтчета(ДокументРезультат) Экспорт
	
	ТекстКолонтитула = НСтр("ru = 'Дата формирования отчета: %ДатаФормирования%'");
	ТекстКолонтитула = СтрЗаменить(ТекстКолонтитула, "%ДатаФормирования%", ТекущаяДатаСеанса());
	
	ДокументРезультат.ВерхнийКолонтитул.Выводить = Истина;
	ДокументРезультат.ВерхнийКолонтитул.ТекстВЦентре = ТекстКолонтитула;
	
КонецПроцедуры

// Выводит в верхнем колонтитуле табличного документа представление параметра "Основание".
//
// Параметры:
//  ДокументРезультат - ТабличныйДокумент - документ, в который добавляется колонтитул.
//  Основание - Произвольный - выводимое значение.
//
Процедура ВывестиОснованиеОтчета(ДокументРезультат, Основание) Экспорт
	
	ТекстКолонтитула = НСтр("ru = 'Основание: %Основание%'");
	ТекстКолонтитула = СтрЗаменить(ТекстКолонтитула, "%Основание%", Основание);
	
	ДокументРезультат.ВерхнийКолонтитул.Выводить = Истина;
	ДокументРезультат.ВерхнийКолонтитул.ТекстВЦентре = ТекстКолонтитула;
	
КонецПроцедуры

#КонецОбласти

#Область СерииНоменклатуры

// Удаляет строки ТЧ "Серии", которым по полям связи нет соответствующих строк в ТЧ "Товары"
// или в этих строках статус указания серий равен 0 (не указывать).
//
// Параметры:
//  ДокументОбъект - ДокументОбъект - документ в котором нужно удалить неиспользуемые строки серий.
//  ПараметрыУказанияСерий - Структура - структура параметров указания серий, возвращаемая соответствующей процедурой модуля
//                                       менеджера документа.
//
Процедура УдалитьНеиспользуемыеСтрокиСерий(ДокументОбъект, ПараметрыУказанияСерий) Экспорт
	
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьСерииНоменклатуры") Тогда
		Возврат;
	КонецЕсли;
	
	ЕстьТоварВШапке = ПараметрыУказанияСерий.Свойство("Шапка");
	
	Если ЕстьТоварВШапке Тогда
		ПараметрыУказанияСерийПроверка = ПараметрыУказанияСерий.ТЧ;
	Иначе
		ПараметрыУказанияСерийПроверка = ПараметрыУказанияСерий;
	КонецЕсли;
	
	ИмяТЧТовары = "";
	ИмяТЧСерии  = "";
		
	Если Не ПараметрыУказанияСерийПроверка.Свойство("ИмяТЧТовары", ИмяТЧТовары) Тогда
		ИмяТЧТовары = "Товары";
	КонецЕсли;
	
	Если Не ПараметрыУказанияСерийПроверка.Свойство("ИмяТЧСерии", ИмяТЧСерии) Тогда
		ИмяТЧСерии = "Серии";
	КонецЕсли;
	
	ТекстПоляСвязиТовары = "";
	ТекстПоляСвязиСерии = "";
	ТекстПоляСвязиСоединениеТоварыСерии = "";
	ТекстПоляСвязиСоединениеТоварыВсеТовары = "";
	ТекстПоляСвязиВыгружаемыеКолонки = "";
	
	Для Каждого СтрокаМассива Из ПараметрыУказанияСерийПроверка.ПоляСвязи Цикл
		ТекстПоляСвязиТовары = ТекстПоляСвязиТовары + "
		|	ТаблицаТоваров." + СтрокаМассива + ",";
		ТекстПоляСвязиСерии = ТекстПоляСвязиСерии + "
		|	ТаблицаСерий." + СтрокаМассива + ",";
		ТекстПоляСвязиСоединениеТоварыСерии = ТекстПоляСвязиСоединениеТоварыСерии + "
		|		И ТаблицаТоваров."+СтрокаМассива+" = ТаблицаСерий."+СтрокаМассива;
		ТекстПоляСвязиВыгружаемыеКолонки = ТекстПоляСвязиВыгружаемыеКолонки + ", " + СтрокаМассива  ;
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ "
	+ ТекстПоляСвязиТовары + "
	|	ТаблицаТоваров.Номенклатура,
	|	ТаблицаТоваров.Характеристика,
	|	ТаблицаТоваров.СтатусУказанияСерий
	|ПОМЕСТИТЬ ТаблицаТоваров
	|ИЗ
	|	&ТаблицаТовары КАК ТаблицаТоваров
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ "
	+ ТекстПоляСвязиСерии + "
	|	ТаблицаСерий.НомерСтроки,
	|	ТаблицаСерий.Номенклатура,
	|	ТаблицаСерий.Характеристика
	|ПОМЕСТИТЬ ТаблицаСерий
	|ИЗ
	|	&ТаблицаСерий КАК ТаблицаСерий
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаСерий.НомерСтроки КАК НомерСтроки
	|ИЗ
	|	ТаблицаСерий КАК ТаблицаСерий
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаТоваров КАК ТаблицаТоваров
	|		ПО ТаблицаСерий.Номенклатура = ТаблицаТоваров.Номенклатура
	|			И ТаблицаСерий.Характеристика = ТаблицаТоваров.Характеристика"
				+ ТекстПоляСвязиСоединениеТоварыСерии + "
	|			И НЕ (ТаблицаТоваров.СтатусУказанияСерий = 0 ИЛИ ТаблицаТоваров.СтатусУказанияСерий = 11)
	|ГДЕ
	|	ТаблицаТоваров.Номенклатура ЕСТЬ NULL
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаСерий.НомерСтроки
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки УБЫВ";
	
	ТаблицаТовары = ДокументОбъект[ИмяТЧТовары].Выгрузить(,"Номенклатура,Характеристика,СтатусУказанияСерий"+ТекстПоляСвязиВыгружаемыеКолонки);
	
	Если ЕстьТоварВШапке Тогда
		НоваяСтрока = ТаблицаТовары.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока,ДокументОбъект);
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ТаблицаТовары",ТаблицаТовары);
	Запрос.УстановитьПараметр("ТаблицаСерий", ДокументОбъект[ИмяТЧСерии].Выгрузить(,"НомерСтроки,Номенклатура,Характеристика"+ТекстПоляСвязиВыгружаемыеКолонки));
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		ДокументОбъект[ИмяТЧСерии].Удалить(ДокументОбъект[ИмяТЧСерии][Выборка.НомерСтроки-1]);
			
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область НСИ

// Проверяет возможность совершения операции на предмет согласования функциональной опции
// "ИспользоватьНесколькоОрганизаций"  и количеством, непомеченных на удаление организаций.
//
// Параметры:
//  Отказ - Булево - признак отказа от выполнения операции.
//  ИспользоватьНесколькоОрганизаций - Булево - признак использования нескольких организаций.
//  Организация - СправочникСсылка.Организации - организация для проверки.
//
Процедура ПроверитьИспользованиеОрганизации(Отказ = Ложь, ИспользоватьНесколькоОрганизаций = Неопределено, Организация = Неопределено) Экспорт
	
	Если ЗначениеЗаполнено(Организация) Тогда
		Возврат;
	КонецЕсли;
	
	ИспользоватьНесколькоОрганизаций = ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоОрганизаций");
	
	Если НЕ ИспользоватьНесколькоОрганизаций Тогда
		Организация = Справочники.Организации.ОрганизацияПоУмолчанию();
		Если НЕ ЗначениеЗаполнено(Организация) Тогда
			Отказ = Истина;
			ТекстИсключения = НСтр("ru = 'Не определена организация по умолчанию.
			|Для продолжения работы необходимо создать организацию или
			|включить опцию ""Использовать несколько организаций"" (Администрирование - Организации и финансы).'");
			ВызватьИсключение(ТекстИсключения);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Добавляет на форму списка условное оформление поля Дата
//
// Параметры:
//  Форма - УправляемаяФорма - форма документа.
//  ИмяСписка - Строка - имя динамического списка.
//  ИмяПоляДата - Строка - условное оформление формы.
//
Процедура УстановитьУсловноеОформлениеПоляДата(Форма, ИмяСписка = "Список", ИмяПоляДата = "Дата") Экспорт
	
	УсловноеОформлениеКД = Форма.УсловноеОформление;
	УсловноеОформлениеКД.ИдентификаторПользовательскойНастройки = "ОсновноеОформление";
	
	// Представление даты сегодня "09:46"
	ЭлементУсловногоОформления = УсловноеОформлениеКД.Элементы.Добавить();
	ЭлементУсловногоОформления.Использование = Истина;
	
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ИмяПоляДата);
	
	ПредставлениеЭлемента = НСтр("ru = 'Представление даты сегодня: ""09:46""'");
	ЭлементУсловногоОформления.Представление = ПредставлениеЭлемента;
	
	ЭлементОтбораДанных = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбораДанных.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ИмяСписка + "." + "Дата");
	ЭлементОтбораДанных.ВидСравнения = ВидСравненияКомпоновкиДанных.БольшеИлиРавно;
	ЭлементОтбораДанных.ПравоеЗначение = Новый СтандартнаяДатаНачала(ВариантСтандартнойДатыНачала.НачалоЭтогоДня);
	ЭлементОтбораДанных.Использование = Истина;
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Формат", "ДФ=ЧЧ:мм");
	
	// Отображение даты отличной от сегодня "10.06.2012"
	ЭлементУсловногоОформления = УсловноеОформлениеКД.Элементы.Добавить();
	ЭлементУсловногоОформления.Использование = Истина;
	
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ИмяПоляДата);
	
	ПредставлениеЭлемента = НСтр("ru = 'Представление даты до начала этого дня: ""10.06.2012""'");
	ЭлементУсловногоОформления.Представление = ПредставлениеЭлемента;
	
	ЭлементОтбораДанных = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбораДанных.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ИмяСписка + "." + "Дата");
	ЭлементОтбораДанных.ВидСравнения = ВидСравненияКомпоновкиДанных.Меньше;
	ЭлементОтбораДанных.ПравоеЗначение = Новый СтандартнаяДатаНачала(ВариантСтандартнойДатыНачала.НачалоЭтогоДня);
	ЭлементОтбораДанных.Использование = Истина;
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Формат", "ДЛФ=D");
	
	// Отображение даты отличной от сегодня "10.06.2012"
	ЭлементУсловногоОформления = УсловноеОформлениеКД.Элементы.Добавить();
	ЭлементУсловногоОформления.Использование = Истина;
	
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ИмяПоляДата);
	
	ПредставлениеЭлемента = НСтр("ru = 'Представление даты после начала этого дня: ""10.06.2012""'");
	ЭлементУсловногоОформления.Представление = ПредставлениеЭлемента;
	
	ЭлементОтбораДанных = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбораДанных.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ИмяСписка + "." + "Дата");
	ЭлементОтбораДанных.ВидСравнения = ВидСравненияКомпоновкиДанных.БольшеИлиРавно;
	ЭлементОтбораДанных.ПравоеЗначение = Новый СтандартнаяДатаНачала(ВариантСтандартнойДатыНачала.НачалоСледующегоДня);
	ЭлементОтбораДанных.Использование = Истина;
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Формат", "ДЛФ=D");
	
КонецПроцедуры

#КонецОбласти

// Адрес магазина.
//
// Параметры:
//  Магазин - СправочникСсылка.Магазины - магазин для получения адреса.
//
Функция АдресМагазина(Магазин) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	МагазиныКонтактнаяИнформация.Представление КАК АдресМагазина
	|ИЗ
	|	Справочник.Магазины.КонтактнаяИнформация КАК МагазиныКонтактнаяИнформация
	|ГДЕ
	|	МагазиныКонтактнаяИнформация.Ссылка = &Магазин
	|	И МагазиныКонтактнаяИнформация.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ФактАдресМагазина)";
	
	Запрос.УстановитьПараметр("Магазин", Магазин);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	АдресМагазина = "";
	Если Выборка.Следующий() Тогда
		Если ЗначениеЗаполнено(Выборка.АдресМагазина) Тогда
			АдресМагазина = Выборка.АдресМагазина
		КонецЕсли;
	КонецЕсли;
	
	Возврат АдресМагазина;
	
КонецФункции

#Область БИП

// Обработчик подписки на событие "При записи" справочников ГруппыДоступа и ГруппыПользователей.
// Получает все профили групп доступа пользователей и записывает их строковые значения
// в РС ОтборыПоЛентамНовостейПользовательские, необходимо для показа новостей с отбором по Профилю.
//
// Параметры:
//  Источник - ЛюбаяСсылка - ссылка на объект метаданных.
//  Отказ - Булево - признак отказа от обновления операции.
//
Процедура ОбновитьОтборыПоЛентамНовостейПользовательские(Источник = Неопределено, Отказ = Ложь) Экспорт
	
	Если НЕ ПолучитьФункциональнуюОпцию("РазрешенаРаботаСНовостями") Тогда
		Возврат;
	КонецЕсли;
	
	ВсеПользователи = Неопределено;
	Попытка
		ВсеПользователи = Справочники.ГруппыПользователей.ВсеПользователи.Ссылка;
	Исключение
		ВсеПользователи = Неопределено;
	КонецПопытки;
	
	Если ВсеПользователи = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОтборПоКатегорииНовостей = ПланыВидовХарактеристик.КатегорииНовостей.НайтиПоКоду("UserProfile");

	Если НЕ ЗначениеЗаполнено(ОтборПоКатегорииНовостей) Тогда
		Возврат;
	КонецЕсли;

	Запрос = Новый Запрос;		
	ТекстЗапроса = "ВЫБРАТЬ
		|	СоставыГруппПользователей.Пользователь КАК Пользователь,
		|	СоставыГруппПользователей.ГруппаПользователей КАК ГруппаПользователей
		|ПОМЕСТИТЬ ВТ_ДанныеГруппПользователей
		|ИЗ
		|	РегистрСведений.СоставыГруппПользователей КАК СоставыГруппПользователей
		|ГДЕ
		|	СоставыГруппПользователей.Используется
		|	И СоставыГруппПользователей.ГруппаПользователей <> ЗНАЧЕНИЕ(Справочник.ГруппыПользователей.ВсеПользователи)
		|	И СоставыГруппПользователей.ГруппаПользователей В ИЕРАРХИИ(&ГруппаПользователей)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ВТ_ДанныеГруппПользователей.Пользователь КАК Пользователь,
		|	ПрофилиГруппДоступа.Наименование КАК Профиль
		|ИЗ
		|	ВТ_ДанныеГруппПользователей КАК ВТ_ДанныеГруппПользователей
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ГруппыДоступа.Пользователи КАК ГруппыДоступаПользователи
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ГруппыДоступа КАК ГруппыДоступа
		|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ПрофилиГруппДоступа КАК ПрофилиГруппДоступа
		|				ПО ГруппыДоступа.Профиль = ПрофилиГруппДоступа.Ссылка
		|			ПО ГруппыДоступаПользователи.Ссылка = ГруппыДоступа.Ссылка
		|		ПО (ГруппыДоступаПользователи.Пользователь = ВТ_ДанныеГруппПользователей.ГруппаПользователей)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ГруппыДоступаПользователи.Пользователь,
		|	ПрофилиГруппДоступа.Наименование
		|ИЗ
		|	ВТ_ДанныеГруппПользователей КАК ВТ_ДанныеГруппПользователей
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ГруппыДоступа.Пользователи КАК ГруппыДоступаПользователи
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ГруппыДоступа КАК ГруппыДоступа
		|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ПрофилиГруппДоступа КАК ПрофилиГруппДоступа
		|				ПО ГруппыДоступа.Профиль = ПрофилиГруппДоступа.Ссылка
		|			ПО ГруппыДоступаПользователи.Ссылка = ГруппыДоступа.Ссылка
		|		ПО (ГруппыДоступаПользователи.Пользователь = ВТ_ДанныеГруппПользователей.Пользователь)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СоставыГруппПользователей.Пользователь КАК Пользователь,
		|	СоставыГруппПользователей.ГруппаПользователей КАК ГруппаПользователей
		|ПОМЕСТИТЬ ВТ_ДанныеГруппДоступа
		|ИЗ
		|	Справочник.ГруппыДоступа.Пользователи КАК ГруппыДоступаПользователи
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СоставыГруппПользователей КАК СоставыГруппПользователей
		|		ПО (СоставыГруппПользователей.ГруппаПользователей = ГруппыДоступаПользователи.Пользователь)
		|ГДЕ
		|	ГруппыДоступаПользователи.Пользователь ССЫЛКА Справочник.ГруппыПользователей
		|	И СоставыГруппПользователей.Используется
		|	И ГруппыДоступаПользователи.Ссылка В ИЕРАРХИИ(&ГруппаДоступа)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ВТ_ДанныеГруппДоступа.Пользователь КАК Пользователь,
		|	ПрофилиГруппДоступа.Наименование КАК Профиль
		|ИЗ
		|	ВТ_ДанныеГруппДоступа КАК ВТ_ДанныеГруппДоступа
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ГруппыДоступа.Пользователи КАК ГруппыДоступаПользователи
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ГруппыДоступа КАК ГруппыДоступа
		|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ПрофилиГруппДоступа КАК ПрофилиГруппДоступа
		|				ПО ГруппыДоступа.Профиль = ПрофилиГруппДоступа.Ссылка
		|			ПО ГруппыДоступаПользователи.Ссылка = ГруппыДоступа.Ссылка
		|		ПО (ГруппыДоступаПользователи.Пользователь = ВТ_ДанныеГруппДоступа.ГруппаПользователей)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ГруппыДоступаПользователи.Пользователь,
		|	ПрофилиГруппДоступа.Наименование
		|ИЗ
		|	ВТ_ДанныеГруппДоступа КАК ВТ_ДанныеГруппДоступа
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ГруппыДоступа.Пользователи КАК ГруппыДоступаПользователи
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ГруппыДоступа КАК ГруппыДоступа
		|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ПрофилиГруппДоступа КАК ПрофилиГруппДоступа
		|				ПО ГруппыДоступа.Профиль = ПрофилиГруппДоступа.Ссылка
		|			ПО ГруппыДоступаПользователи.Ссылка = ГруппыДоступа.Ссылка
		|		ПО (ГруппыДоступаПользователи.Пользователь = ВТ_ДанныеГруппДоступа.Пользователь)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ГруппыДоступаПользователи.Пользователь,
		|	ПрофилиГруппДоступа.Наименование
		|ИЗ
		|	Справочник.ГруппыДоступа.Пользователи КАК ГруппыДоступаПользователи
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ГруппыДоступа КАК ГруппыДоступа
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ПрофилиГруппДоступа КАК ПрофилиГруппДоступа
		|			ПО ГруппыДоступа.Профиль = ПрофилиГруппДоступа.Ссылка
		|		ПО ГруппыДоступаПользователи.Ссылка = ГруппыДоступа.Ссылка
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			ГруппыДоступаПользователи.Пользователь КАК Пользователь
		|		ИЗ
		|			Справочник.ГруппыДоступа.Пользователи КАК ГруппыДоступаПользователи
		|		ГДЕ
		|			ГруппыДоступаПользователи.Ссылка В ИЕРАРХИИ(&ГруппаДоступа)
		|			И ГруппыДоступаПользователи.Пользователь ССЫЛКА Справочник.Пользователи) КАК ВложенныйЗапрос
		|		ПО (ВложенныйЗапрос.Пользователь = ГруппыДоступаПользователи.Пользователь)
		|";
	Если ТипЗнч(Источник) = Тип("СправочникОбъект.ГруппыДоступа") Тогда
		Запрос.УстановитьПараметр("ГруппаДоступа", Источник.Ссылка);
		Запрос.УстановитьПараметр("ГруппаПользователей", Справочники.ГруппыПользователей.ПустаяСсылка());
	ИначеЕсли ТипЗнч(Источник) = Тип("СправочникОбъект.ГруппыПользователей") Тогда
		Запрос.УстановитьПараметр("ГруппаПользователей", Источник.Ссылка);
		Запрос.УстановитьПараметр("ГруппаДоступа", Справочники.ГруппыДоступа.ПустаяСсылка());
	Иначе
		Запрос.УстановитьПараметр("ГруппаПользователей", Справочники.ГруппыПользователей.ПустаяСсылка());
		Запрос.УстановитьПараметр("ГруппаДоступа", Справочники.ГруппыДоступа.ПустаяСсылка());
	КонецЕсли;

	Запрос.Текст = ТекстЗапроса;
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	Если ТипЗнч(Источник) = Тип("СправочникОбъект.ГруппыПользователей") Тогда
		ВТ_ПользователиПрофили = РезультатЗапроса[1].Выгрузить();
	Иначе
		ВТ_ПользователиПрофили = РезультатЗапроса[3].Выгрузить();
	КонецЕсли;
	
	Запрос = Новый Запрос;		
	ТекстЗапроса = "ВЫБРАТЬ *
		|ПОМЕСТИТЬ ВТ_ПользователиПрофили
		|ИЗ
		|	&ВТ_ПользователиПрофили КАК ВТ_ПользователиПрофили
		|;
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Спр.Ссылка КАК ЛентаНовостей,
		|	ВТ_ПользователиПрофили.Пользователь КАК Пользователь,
		|	Спр.КатегорияНовостей КАК КатегорияНовостей,
		|	""РТ."" + ВТ_ПользователиПрофили.Профиль КАК ЗначениеКатегории
		|ИЗ
		|	Справочник.ЛентыНовостей.ДоступныеКатегорииНовостей КАК Спр,
		|	ВТ_ПользователиПрофили КАК ВТ_ПользователиПрофили
		|ГДЕ
		|	Спр.Ссылка <> ЗНАЧЕНИЕ(Справочник.ЛентыНовостей.ПустаяСсылка)
		|	И ВТ_ПользователиПрофили.Пользователь <> ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка)
		|%УсловиеЗапросаЛентыНовостей%
		|ИТОГИ ПО
		|	ЛентаНовостей,
		|	ЗначениеКатегории
		|";
	
	Если ТипЗнч(Источник) = Тип("СправочникСсылка.ЛентыНовостей") Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%УсловиеЗапросаЛентыНовостей%", "И Спр.Ссылка = &ЛентаНовостей");
		Запрос.УстановитьПараметр("ЛентаНовостей", Источник);
	Иначе
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%УсловиеЗапросаЛентыНовостей%", "И Спр.КатегорияНовостей = &КатегорияНовостей");
		Запрос.УстановитьПараметр("КатегорияНовостей", ОтборПоКатегорииНовостей);
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ВТ_ПользователиПрофили", ВТ_ПользователиПрофили);
	
	Запрос.Текст = ТекстЗапроса;
	РезультатЗапроса = Запрос.Выполнить();

	ВыборкаПоЛентам = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаПоЛентам.Следующий() Цикл
		ВыборкаПоПрофилям = ВыборкаПоЛентам.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаПоПрофилям.Следующий() Цикл
			ВыборкаДетали = ВыборкаПоПрофилям.Выбрать();
			ПараметрПользователи = Новый Массив;
			Пока ВыборкаДетали.Следующий() Цикл
				КатегорияНовостей 		= ВыборкаДетали.КатегорияНовостей;
				ЗначениеКатегории 		= ВыборкаДетали.ЗначениеКатегории;
				Если ТипЗнч(ВыборкаДетали.Пользователь) <> Тип("СправочникСсылка.Пользователи") Тогда
					Продолжить;
				КонецЕсли;
				ПараметрПользователи.Добавить(ВыборкаДетали.Пользователь);
			КонецЦикла;
			УстановитьПрограммныйПользовательскийОтборОбластиДанных(ВыборкаПоЛентам.ЛентаНовостей,
																				КатегорияНовостей,
																				ПараметрПользователи,
																				ЗначениеКатегории);
		КонецЦикла; 
	КонецЦикла;
	
	ОбработкаНовостей.ПриИзмененииЗначенийОтборовПользовательских();

КонецПроцедуры

// Процедура устанавливает программный пользовательский отбор в области данных.
// Программный отбор означает, что при пересчете ОбработкаНовостей.ОптимизироватьОтборыПоНовостям этот отбор
//  не будет удален даже в случае, если пользовательский отбор по этой категории запрещен.
//
// Параметры:
//  ЛентаНовостей        - СправочникСсылка.ЛентыНовостей - лента новостей, для которой необходимо установить
//                           программный пользовательский отбор;
//  КатегорияНовостей    - ПланВидовХарактеристикСсылка.КатегорииНовостей - категория новостей, для которой необходимо
//                           установить программный пользовательский отбор;
//  ПараметрПользователи - СправочникСсылка.Пользователи, Массив - пользователи, для которых необходимо установить значения отбора;
//  ЗначенияКатегории    - Характеристика.КатегорииНовостей, Массив - значения программного пользовательского отбора.
//
Процедура УстановитьПрограммныйПользовательскийОтборОбластиДанных(
			ЛентаНовостей,
			КатегорияНовостей,
			ПараметрПользователи,
			ЗначенияКатегории) Экспорт

	ТипМассив = Тип("Массив");

	// Так как данная процедура работает только в области данных,
	//  то выдать исключение при входе в модели сервиса без установленных разделителей.

	Если НЕ ОбщегоНазначения.ДоступноИспользованиеРазделенныхДанных() Тогда
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='ОбработкаНовостей.УстановитьПрограммныйПользовательскийОтборОбластиДанных
				|не может работать в модели сервиса в неразделенном сеансе.
				|Значения параметров:
				| - ЛентаНовостей: %1
				| - КатегорияНовостей: %2
				| - ПараметрПользователи: %3
				| - ЗначенияКатегории: %4'"),
			ЛентаНовостей,
			КатегорияНовостей,
			ПараметрПользователи,
			ЗначенияКатегории);
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;

	Если ТипЗнч(ПараметрПользователи) = ТипМассив Тогда
		МассивПользователей = ПараметрПользователи;
	Иначе // СправочникСсылка.Пользователи.
		МассивПользователей = Новый Массив;
		МассивПользователей.Добавить(ПараметрПользователи);
	КонецЕсли;

	Если ТипЗнч(ЗначенияКатегории) = ТипМассив Тогда
		МассивЗначенийКатегории = ЗначенияКатегории;
	Иначе // СправочникСсылка.Пользователи.
		МассивЗначенийКатегории = Новый Массив;
		МассивЗначенийКатегории.Добавить(ЗначенияКатегории);
	КонецЕсли;

	Для Каждого ТекущийПользователь Из МассивПользователей Цикл

		НаборЗаписей = РегистрыСведений.ОтборыПоЛентамНовостейПользовательские.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор["Пользователь"].Установить(ТекущийПользователь);
		НаборЗаписей.Отбор["ЛентаНовостей"].Установить(ЛентаНовостей);
		НаборЗаписей.Отбор["КатегорияНовостей"].Установить(КатегорияНовостей);
			Для Каждого ТекущееЗначениеКатегории Из МассивЗначенийКатегории Цикл
				Запись = НаборЗаписей.Добавить();
					Запись.Пользователь              = ТекущийПользователь;
					Запись.ЛентаНовостей             = ЛентаНовостей;
					Запись.КатегорияНовостей         = КатегорияНовостей;
					Запись.ЗначениеКатегорииНовостей = ТекущееЗначениеКатегории;
					Запись.УстановленоПрограммно     = Истина;
			КонецЦикла;
		НаборЗаписей.Записать(Истина);

	КонецЦикла;

КонецПроцедуры

#КонецОбласти

#Область ПанельАдминистрированияБСП

// Предназначена для внесения изменений в форму Обслуживание обработки
// ПанельАдминистрированияБСП без снятия формы с поддержки.
//
// Параметры:
//  Форма - УправляемаяФорма - для внесения изменений.
//
Процедура ОбслуживаниеПриСозданииНаСервере(Форма) Экспорт
	
	ГруппаСверткаИнформационнойБазы = ОбщегоНазначенияРТКлиентСервер.ГоризонтальнаяГруппа(Форма,
		"ГруппаСверткаИнформационнойБазы",
		,
		Форма.Элементы.ГруппаРегламентныеОперации);
	
	КомандаСверткаИнформационнойБазы = Форма.Элементы.Добавить("ОбработкаСверткаИнформационнойБазы",
		Тип("ДекорацияФормы"),
		ГруппаСверткаИнформационнойБазы);
	
	КомандаСверткаИнформационнойБазы.Заголовок = Новый ФорматированнаяСтрока(НСтр("ru = 'Свертка информационной базы'"),
		,,, "e1cib/command/Обработка.СверткаИнформационнойБазы.Команда.СверткаИнформационнойБазы");
		
	КомандаСверткаИнформационнойБазы.ОтображениеПодсказки = ОтображениеПодсказки.ОтображатьСнизу;
	КомандаСверткаИнформационнойБазы.РасширеннаяПодсказка.Заголовок =
		НСтр("ru = 'Сокращение объема данных за счет удаления неиспользуемых документов за прошлый период.'");
КонецПроцедуры

// Предназначена для внесения изменений в форму ПечатныеФормыОтчетыИОбработки обработки
// ПанельАдминистрированияБСП без снятия формы с поддержки.
//
// Параметры:
//  Форма - УправляемаяФорма - для внесения изменений.
//
Процедура ПечатныеФормыОтчетыИОбработкиПриСозданииНаСервере(Форма) Экспорт
	
	// Печать шаблонов.
	ГруппаШаблоныЦенниковИЭтикеток = ОбщегоНазначенияРТКлиентСервер.ГоризонтальнаяГруппа(Форма,
		"ГруппаГруппаШаблоныЦенниковИЭтикеток",
		,
		Форма.Элементы.ГруппаКолонки, Форма.Элементы.ГруппаВариантыРассылки);
	
	КомандаШаблоныЦенниковИЭтикеток = Форма.Элементы.Добавить("СправочникШаблоныЦенниковИЭтикеток",
		Тип("ДекорацияФормы"),
		ГруппаШаблоныЦенниковИЭтикеток);
	
	КомандаШаблоныЦенниковИЭтикеток.Заголовок = Новый ФорматированнаяСтрока(
		НСтр("ru = 'Шаблоны этикеток, ценников и чеков ККМ'"),,,,
		"e1cib/list/Справочник.ХранилищеШаблонов");
		
	КомандаШаблоныЦенниковИЭтикеток.ОтображениеПодсказки = ОтображениеПодсказки.ОтображатьСнизу;
	КомандаШаблоныЦенниковИЭтикеток.РасширеннаяПодсказка.Заголовок =
		НСтр("ru = 'Создание и редактирование шаблонов этикеток, ценников и чеков ККМ, печать которых возможна из программы.'");
	
	ГруппаНастройкиРозницы = ОбщегоНазначенияРТКлиентСервер.ГоризонтальнаяГруппа(Форма,
		"ГруппаНастройкиРозницы",
		,
		Форма.Элементы.ГруппаКолонки);
	
	// Дополнительная колонка печати.
	
	ЗначениеДополнительнойКолонки =
		Константы.ДополнительнаяКолонкаПечатныхФормДокументов.Получить();
	
	ГруппаДополнительнаяКолонкаПечатныхФормДокументов = ОбщегоНазначенияРТКлиентСервер.ГоризонтальнаяГруппа(Форма,
		"ГруппаДополнительнаяКолонкаПечатныхФормДокументов",
		,
		Форма.Элементы.ГруппаНастройкиРозницы);
		
	ГруппаДополнительнаяКолонкаПечатныхФормДокументов.Ширина = 43;
		
	ДополнительнаяКолонкаПечатныхФормДокументов = Форма.Элементы.Добавить("ДополнительнаяКолонкаПечатныхФормДокументов",
		Тип("ДекорацияФормы"),
		ГруппаДополнительнаяКолонкаПечатныхФормДокументов);
		
	ДополнительнаяКолонкаПечатныхФормДокументов.Заголовок = Новый ФорматированнаяСтрока(
		НСтр("ru = 'Дополнительная колонка печатных форм документов:'") + Символы.ПС,
		Новый ФорматированнаяСтрока(
			СокрЛП(ЗначениеДополнительнойКолонки),,,,
			"e1cib/command/Обработка.ПанельАдминистрированияРТ.Команда.НастройкиНоменклатурыДопКолонка"));
	
	ДополнительнаяКолонкаПечатныхФормДокументов.ОтображениеПодсказки = ОтображениеПодсказки.ОтображатьСнизу;
	ДополнительнаяКолонкаПечатныхФормДокументов.РасширеннаяПодсказка.Заголовок =
		НСтр("ru = 'Вывод кода или артикула номенклатуры при печати документов.'");
	
КонецПроцедуры

#КонецОбласти

// Возвращает ИНН контрагента.
//
// Параметры:
//  Контрагент - Ссылка на элемент справочника Контрагенты.
//  
// Возвращаемое значение:
//  Строка - ИНН контрагента.
//
Функция ПолучитьИННКонтрагента(Контрагент) Экспорт
	
	Результат = "";
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Контрагент", Контрагент);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА Контрагенты.ЮрФизЛицо = ЗНАЧЕНИЕ(Перечисление.ЮрФизЛицо.ФизЛицо)
	|			ТОГДА Контрагенты.ФизЛицо.ИНН
	|		ИНАЧЕ Контрагенты.ИНН
	|	КОНЕЦ КАК ИНН
	|ИЗ
	|	Справочник.Контрагенты КАК Контрагенты
	|ГДЕ
	|	Контрагенты.Ссылка = &Контрагент";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Результат = Выборка.ИНН;
	КонецЕсли;
	
	Возврат Результат;
КонецФункции

// Создает физ. лицо на основании Контрагента.
//
// Параметры:
//  Контрагент - Ссылка на элемент справочника Контрагенты.
//  
// Возвращаемое значение:
//  ФизЛицо - Ссылка на элемент справочника ФизическиеЛица.
//
Функция СоздатьФизЛицоНаОснованииКонтрагента(Контрагент, КопироватьГруппу = Ложь) Экспорт
	
	ГруппаФизЛиц = Справочники.ФизическиеЛица.ПустаяСсылка();
	Если КопироватьГруппу Тогда
		НаименованиеГруппы = Контрагент.Родитель.Наименование;
		ГруппаФизЛиц = Справочники.ФизическиеЛица.НайтиПоНаименованию(НаименованиеГруппы);
		Если Не ЗначениеЗаполнено(ГруппаФизЛиц) Или Не ГруппаФизЛиц.ЭтоГруппа Тогда
			ГруппаФизЛиц = Справочники.ФизическиеЛица.СоздатьГруппу();
			ГруппаФизЛиц.Наименование = НаименованиеГруппы;
			ГруппаФизЛиц.Записать();
		КонецЕсли;
	КонецЕсли;
	
	Наименование = ?(ЗначениеЗаполнено(Контрагент.НаименованиеПолное), Контрагент.НаименованиеПолное, Контрагент.Наименование);
	ОбъектФизЛицо = Справочники.ФизическиеЛица.СоздатьЭлемент();
	ОбъектФизЛицо.Родитель = ГруппаФизЛиц.Ссылка;
	ОбъектФизЛицо.Наименование = Наименование;
	ОбъектФизЛицо.ИНН = Контрагент.ИНН;
	
	Для Каждого КонтактнаяИнформация Из Контрагент.КонтактнаяИнформация Цикл
		НоваяСтрока = ОбъектФизЛицо.КонтактнаяИнформация.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, КонтактнаяИнформация);
		Если НоваяСтрока.Тип = ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.Адрес") Тогда
			Если НоваяСтрока.Вид = ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации.ФактАдресКонтрагента") Тогда
				НоваяСтрока.Вид = ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации.ФактАдресФизическогоЛица");
			Иначе
				НоваяСтрока.Вид = ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации.ПочтовыйАдресФизическогоЛица");
			КонецЕсли;
		ИначеЕсли НоваяСтрока.Тип = ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.Телефон") Или
				НоваяСтрока.Тип = ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.Факс") Тогда
			НоваяСтрока.Тип = ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.Телефон");
			НоваяСтрока.Вид = ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации.ТелефонФизическогоЛица");
		ИначеЕсли НоваяСтрока.Тип = ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты") Тогда
			НоваяСтрока.Вид = ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации.EmailФизическогоЛица");
		КонецЕсли;
	КонецЦикла;
	
	ОбъектФизЛицо.Записать();
	
	ФИО = ФизическиеЛицаКлиентСервер.ЧастиИмени(ОбъектФизЛицо.Наименование);
	МенеджерЗаписи = РегистрыСведений.ФИОФизЛиц.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.ФизЛицо 	= ОбъектФизЛицо.Ссылка;
	МенеджерЗаписи.Период 	= ТекущаяДатаСеанса();
	МенеджерЗаписи.Фамилия 	= ФИО.Фамилия;
	МенеджерЗаписи.Имя 		= ФИО.Имя;
	МенеджерЗаписи.Отчество = ФИО.Отчество;
	МенеджерЗаписи.Записать(Истина);
	
	Возврат ОбъектФизЛицо.Ссылка;
	
КонецФункции

#Область Передача_файла_в_другую_область

// Записывает результат обмена файлом.
//
// Параметры:
//  ОжидаемыйОтвет - Структура - Структура содержит:
//    ВыполненУспешно - Булево - флаг успешной передачи файла;
//    ВыполненСОшибкой - Булево - флаг передачи файла с ошибкой;
//    ТекстОшибки - Строка - текст ошибки.
//
Процедура ЗаписатьРезультатОбменаФайлом(ОжидаемыйОтвет) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Константы.РезультатОбменаФайлом.Установить(Новый ХранилищеЗначения(ОжидаемыйОтвет, Новый СжатиеДанных(9)));
	
КонецПроцедуры

// Очищает результат обмена файлом.
//
Процедура ОчиститьРезультатОбменаФайлом() Экспорт
	
	Константы.РезультатОбменаФайлом.Установить(Новый ХранилищеЗначения(Неопределено));
	
КонецПроцедуры

// Возвращает результат обмена файлом.
//
// Возвращаемое значение:
//  Структура, Неопределено - Структура содержит:
//    ВыполненУспешно - Булево - флаг успешной передачи файла;
//    ВыполненСОшибкой - Булево - флаг передачи файла с ошибкой;
//    ТекстОшибки - Строка - текст ошибки.
//
Функция РезультатОбменаФайлом() Экспорт
	
	Возврат Константы.РезультатОбменаФайлом.Получить().Получить();
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область ОтладочныеМетоды

// Показать произвольную выборку данных в отладчике
// Пример:
//	ОбщегоНазначенияУТ.ЗапросВыполнитьВыгрузить("выбрать * из Справочник.Валюты где Валюты.Код = &Код", Новый Структура("Код", "810"))
//
Функция ЗапросВыполнитьВыгрузить(ТекстЗапроса, ПараметрыЗапроса = Неопределено, МенеджерВременныхТаблиц = Неопределено) Экспорт
	
	Запрос = Новый Запрос(ТекстЗапроса);
	
	Если МенеджерВременныхТаблиц <> Неопределено Тогда
		Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПараметрыЗапроса) Тогда
		Для Каждого Параметр Из ПараметрыЗапроса Цикл
			Запрос.УстановитьПараметр(Параметр.Ключ, Параметр.Значение);
		КонецЦикла;
	КонецЕсли;
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

// Показать временную таблицу из менеджера временных таблиц.
// Используется для просмотра временных таблиц в отладчике.
// Пример вызова функции:
//	ОбщегоНазначенияУТ.ПоказатьВременнуюТаблицу(Запрос, "ТаблицаТоваров")
//
Функция ПоказатьВременнуюТаблицу(МенеджерВременныхТаблицИлиЗапрос, ИмяВременнойТаблицы) Экспорт
	
	ЗакрытьМенеджерВременныхТаблиц = Ложь;
	
	Если ТипЗнч(МенеджерВременныхТаблицИлиЗапрос) = Тип("Запрос") Тогда
		Если МенеджерВременныхТаблицИлиЗапрос.МенеджерВременныхТаблиц = Неопределено Тогда
			МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
			ЗакрытьМенеджерВременныхТаблиц = Истина;
			МенеджерВременныхТаблицИлиЗапрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц; 
		Иначе
			МенеджерВременныхТаблиц = МенеджерВременныхТаблицИлиЗапрос.МенеджерВременныхТаблиц;
		КонецЕсли;
		Попытка
			МенеджерВременныхТаблицИлиЗапрос.Выполнить();
		Исключение
			// Ничего не делаем.
		КонецПопытки;
	Иначе
		МенеджерВременныхТаблиц = МенеджерВременныхТаблицИлиЗапрос;
	КонецЕсли; 
	
	ДанныеТаблицы = ЗапросВыполнитьВыгрузить("ВЫБРАТЬ * ИЗ " + ИмяВременнойТаблицы,, МенеджерВременныхТаблиц);
	
	Если ЗакрытьМенеджерВременныхТаблиц Тогда
		МенеджерВременныхТаблиц.Закрыть();
		МенеджерВременныхТаблицИлиЗапрос.МенеджерВременныхТаблиц = Неопределено;
	КонецЕсли; 
	
	Возврат ДанныеТаблицы;
	
КонецФункции

Функция ПредставлениеОбъекта(ПараметрОбъект) Экспорт
	
	Если ПараметрОбъект = Неопределено Тогда
		Возврат "";
	КонецЕсли;
	МетаданныеОбъекта = ?(ТипЗнч(ПараметрОбъект) = Тип("Строка"), Метаданные.НайтиПоПолномуИмени(ПараметрОбъект), ПараметрОбъект);
	
	Представление = Новый Структура("ПредставлениеОбъекта");
	ЗаполнитьЗначенияСвойств(Представление, МетаданныеОбъекта);
	Если Не ПустаяСтрока(Представление.ПредставлениеОбъекта) Тогда
		Возврат Представление.ПредставлениеОбъекта;
	КонецЕсли;
	
	Возврат МетаданныеОбъекта.Представление();
КонецФункции

// Преобразует таблицу значений в табличный документ и сохраняет его в файл.
// Примеры вызова функции:
// 	ОбщегоНазначенияУТ.СохранитьТаблицуЗначенийВФайл(Таблица, "c:\temp\таблица.mxl")
// 	ОбщегоНазначенияУТ.СохранитьТаблицуЗначенийВФайл(ОбщегоНазначенияУТ.ПоказатьВременнуюТаблицу(МВТ, "Таблица"), "c:\temp\таблица.mxl")
//
// Параметры:
//	Таблица - ТаблицаЗначений - произвольная таблица значений
//	ПолноеИмяФайла - Строка - полное имя сохраняемого файла, с расширением
//
// Возвращаемое значение:
//	Строка - текст сообщения об ошибке или пустая строка, если запись выполнена успешно.
//
Функция СохранитьТаблицуЗначенийВФайл(Таблица, ПолноеИмяФайла) Экспорт
	
	ВыгрузкаТаблицы = Новый ТабличныйДокумент; // преобразованная в mxl таблица значений
	
	НомерСтроки  = 1;
	НомерКолонки = 0;
	
	// Сформируем шапку табличного документа - выведем имена колонок таблицы значений
	Для Каждого ТекКолонка Из Таблица.Колонки Цикл
		
		НомерКолонки = НомерКолонки + 1;
		
		Область = ВыгрузкаТаблицы.Область(НомерСтроки, НомерКолонки, НомерСтроки, НомерКолонки);
		Область.Текст 		 = ТекКолонка.Имя;
		Область.Шрифт 		 = Новый Шрифт(Область.Шрифт,,, Истина); 
		Область.ГраницаСнизу = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная, 1);
		
	КонецЦикла;
	
	// Выведем строки таблицы значений
	Для Каждого ТекСтр Из Таблица Цикл
		
		НомерСтроки = НомерСтроки + 1;
		НомерКолонки = 0;
		
		Для Каждого ТекКолонка Из Таблица.Колонки Цикл
			
			НомерКолонки = НомерКолонки + 1;
			
			Область = ВыгрузкаТаблицы.Область(НомерСтроки, НомерКолонки, НомерСтроки, НомерКолонки);
			Область.Текст = ТекСтр[ТекКолонка.Имя];
			
		КонецЦикла;
		
	КонецЦикла;
	
	ВыгрузкаТаблицы.ФиксацияСверху = 1;
	ВыгрузкаТаблицы.ФиксацияСлева  = 1;
	
	// Сохраним табличный документ в файл
	ТекстОшибки = "";
	Попытка
		ВыгрузкаТаблицы.Записать(ПолноеИмяФайла);
	Исключение
		ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
	КонецПопытки;
	
	Возврат ТекстОшибки;
	
КонецФункции

#КонецОбласти

#Область СозданияНачальногоИнтерфейса

Процедура УстановитьРабочийСтолПользователя(ТребуетсяОбновлениеИнтерфейса) Экспорт
	
	//НастройкиНачальнойСтраницы = ОбщегоНазначения.ХранилищеСистемныхНастроекЗагрузить("Общее/НастройкиНачальнойСтраницы", "");
	
	//Если НастройкиНачальнойСтраницы = Неопределено Тогда
		
	НастройкиНачальнойСтраницы = Новый НастройкиНачальнойСтраницы;
	СоставФорм = НастройкиНачальнойСтраницы.ПолучитьСоставФорм();
	СоставФорм.ЛеваяКолонка.Очистить();
	СоставФорм.ПраваяКолонка.Очистить();
	
	Если РольДоступна("ПросмотрМонитораДиректораМагазина") Тогда
		СоставФорм.ЛеваяКолонка.Добавить("Обработка.МониторДиректораМагазина.Форма.РабочийСтолДиректора");
	Иначе
		СоставФорм.ЛеваяКолонка.Добавить("ОбщаяФорма.ДополнительнаяИнформацияПользователю");
		СоставФорм.ЛеваяКолонка.Добавить("Справочник.Новости.Форма.ФормаПросмотраНовостейРабочийСтол");
		СоставФорм.ПраваяКолонка.Добавить("Обработка.ИнформационныйЦентр.Форма.ИнформационныйЦентр");
	КонецЕсли;
	
	НастройкиНачальнойСтраницы.УстановитьСоставФорм(СоставФорм);
	ОбщегоНазначения.ХранилищеСистемныхНастроекСохранить("Общее/НастройкиНачальнойСтраницы", "", НастройкиНачальнойСтраницы);
	
	ТребуетсяОбновлениеИнтерфейса = Истина;
		
	//КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьСтандартныйИнтерфейсПриложения() Экспорт
	
	СоставФорм = Новый СоставФормНачальнойСтраницы;
	СоставФорм.ЛеваяКолонка.Добавить("ОбщаяФорма.ДополнительнаяИнформацияПользователю");
	СоставФорм.ЛеваяКолонка.Добавить("Справочник.Новости.Форма.ФормаПросмотраНовостейРабочийСтол");
	Если РольДоступна("ПросмотрМонитораДиректораМагазина") Тогда
		СоставФорм.ЛеваяКолонка.Добавить("Обработка.МониторДиректораМагазина.Форма.РабочийСтолДиректора");
	КонецЕсли;

	СоставФорм.ПраваяКолонка.Добавить("Обработка.ИнформационныйЦентр.Форма.ИнформационныйЦентр");
	
	НачальнаяСтраница = Новый НастройкиНачальнойСтраницы;
	НачальнаяСтраница.УстановитьСоставФорм(СоставФорм);
	
	ХранилищеСистемныхНастроек.Сохранить("Общее/НастройкиНачальнойСтраницы", "", НачальнаяСтраница, ,);

КонецПроцедуры

Процедура УстановитьСоставФорм(СоставФормИзменен = Ложь) Экспорт
	
	НастройкиНачальнойСтраницы = Новый НастройкиНачальнойСтраницы;
	СоставФорм = НастройкиНачальнойСтраницы.ПолучитьСоставФорм();
	СоставФорм.ЛеваяКолонка.Очистить();
	СоставФорм.ПраваяКолонка.Очистить();
	
	// МобильноеПриложение
	Если РольДоступна("ПросмотрМонитораДиректораМагазина") Тогда
		СоставФорм.ЛеваяКолонка.Добавить("Справочник.ЗаписиКалендаряПодготовкиОтчетности.Форма.КалендарьНалоговИОтчетности");
	Иначе
		СоставФорм.ЛеваяКолонка.Добавить("ОбщаяФорма.ДополнительнаяИнформацияПользователю");
		СоставФорм.ЛеваяКолонка.Добавить("Справочник.Новости.Форма.ФормаПросмотраНовостейРабочийСтол");
		СоставФорм.ПраваяКолонка.Добавить("Обработка.ИнформационныйЦентр.Форма.ИнформационныйЦентр");
	КонецЕсли;
	
	НастройкиНачальнойСтраницы.УстановитьСоставФорм(СоставФорм);
	ОбщегоНазначения.ХранилищеСистемныхНастроекСохранить("Общее/НастройкиНачальнойСтраницы", "", НастройкиНачальнойСтраницы);
	
	СоставФормИзменен = Истина;

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Заполняет таблицу рекурсивно.
// 
// Параметры:
//  ТаблицаЗначений - ДанныеФормыКоллекция, ТабличнаяЧасть - таблица источник выгрузки.
//  СтрокиДерева - Массив, Структура - строки дерева для заполнения.
//  ИскомыйУровень - Число - искомый уровень дерева для заполнения.
//  ТекущийУровень - Число - текущий уровень дерева.
//
Процедура ЗаполнитьТаблицуРекурсивно(ТаблицаЗначений, СтрокиДерева, ИскомыйУровень, ТекущийУровень)
	
	Для Каждого Строка Из СтрокиДерева Цикл

		Если ТипЗнч(СтрокиДерева) = Тип("КоллекцияСтрокДереваЗначений") Тогда
			Подстроки = Строка.Строки;
		ИначеЕсли ТипЗнч(СтрокиДерева) = Тип("ДанныеФормыКоллекцияЭлементовДерева") Тогда
			Подстроки = Строка.ПолучитьЭлементы();
		КонецЕсли;
		
		Если ИскомыйУровень = ТекущийУровень 
			Или (ИскомыйУровень = Неопределено И Подстроки.Количество() = 0) Тогда
			НовСтрока = ТаблицаЗначений.Добавить();
			ЗаполнитьЗначенияСвойств(НовСтрока, Строка);
		Иначе
			ЗаполнитьТаблицуРекурсивно(ТаблицаЗначений, Подстроки, ИскомыйУровень, ТекущийУровень + 1);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Создает набор записей регистра сведений по переданным значениям структуры. Добавляет одну запись в набор.
//
// Параметры:
//  СтруктураЗаписи - Структура - структура по значениям которой необходимо создать набор записей и заполнить этот
//                                набор.
//  ИмяРегистра     - Строка - имя регистра сведений.
// 
Функция СоздатьНаборЗаписейРегистраСведений(СтруктураЗаписи, ИмяРегистра)
	
	МетаданныеРегистра = Метаданные.РегистрыСведений[ИмяРегистра];
	
	// Создаем набор записей регистра.
	НаборЗаписей = РегистрыСведений[ИмяРегистра].СоздатьНаборЗаписей();
	
	// Устанавливаем отбор по измерениям регистра.
	Для Каждого Измерение Из МетаданныеРегистра.Измерения Цикл
		
		// Если задано значение в структуре, то отбор устанавливаем.
		Если СтруктураЗаписи.Свойство(Измерение.Имя) Тогда
			
			НаборЗаписей.Отбор[Измерение.Имя].Установить(СтруктураЗаписи[Измерение.Имя]);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат НаборЗаписей;
	
КонецФункции

#КонецОбласти
