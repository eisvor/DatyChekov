
#Область СлужебныйПрограммныйИнтерфейс

// Выполняет попытку обновления ключа сессии на сервере
// (на сервере предприятия должны быть установлены сертификаты для подписания и пароль).
// 
// Параметры:
// 	ПараметрыЗапроса - (См. ИнтерфейсАвторизацииИСМПТККлиентСервер.ПараметрыЗапросаКлючаСессии) - Параметры запроса ключа сессии для организации для которой необходимо обновить ключ сессии.
// Возвращаемое значение:
// 	Булево - Истина, если обновление ключа сессии выполнено успешно.
Функция ОбновитьКлючСессииНаСервере(ПараметрыЗапроса) Экспорт
	
	СертификатыДляПодписанияНаСервере = СертификатыДляПодписанияНаСервере();
	Если СертификатыДляПодписанияНаСервере = Неопределено
		Или СертификатыДляПодписанияНаСервере.Сертификаты.Количество() = 0 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

// Запрашивает ключ сессии и установливает его в параметры сеанса.
// 
// Параметры:
// 	ПараметрыЗапроса - (См. ИнтерфейсАвторизацииИСМПТККлиентСервер.ПараметрыЗапросаКлючаСессии) - Параметры запроса ключа сессии для организации для которой необходимо обновить ключ сессии.
// 	ПараметрыАвторизации - (См. ИнтерфейсАвторизацииИСМПСлужебный.ПараметрыАвторизации).
// 	Подпись - Строка - Подпись.
// Возвращаемое значение:
// 	Булево - Ключ сессии успешно запрошен и установлен
Функция ЗапроситьУстановитьКлючСессииИСМПТ(ПараметрыЗапроса, ПараметрыАвторизации, Подпись) Экспорт
	
	ВозвращаемоеЗначение = Новый Структура;
	ВозвращаемоеЗначение.Вставить("КлючСессииУстановлен", Ложь);
	ВозвращаемоеЗначение.Вставить("ТекстОшибки",          "");
	
	СвойстваПодписи = Новый Структура("Подпись", Подпись);
	
	ПараметрыЗапросаПоОрганизации = Новый Структура;
	ПараметрыЗапросаПоОрганизации.Вставить("ПараметрыЗапроса",     ПараметрыЗапроса);
	ПараметрыЗапросаПоОрганизации.Вставить("ПараметрыАвторизации", ПараметрыАвторизации);
	ПараметрыЗапросаПоОрганизации.Вставить("СвойстваПодписи",      СвойстваПодписи);
	
	РезультатЗапросаКлючаСессии = ИнтерфейсИСМПТКВызовСервера.ЗапроситьКлючСессииИСМПТ(ПараметрыЗапросаПоОрганизации);
	
	Если РезультатЗапросаКлючаСессии.ПараметрыКлючаСессии <> Неопределено Тогда
		
		УстановитьКлючСессии(ПараметрыЗапросаПоОрганизации.ПараметрыЗапроса, РезультатЗапросаКлючаСессии.ПараметрыКлючаСессии);
		ВозвращаемоеЗначение.КлючСессииУстановлен = Истина;
		
		Возврат ВозвращаемоеЗначение;
		
	Иначе
		
		ВозвращаемоеЗначение.КлючСессииУстановлен = Ложь;
		ВозвращаемоеЗначение.ТекстОшибки          = РезультатЗапросаКлючаСессии.ТекстОшибки;
		
		Возврат ВозвращаемоеЗначение;
		
	КонецЕсли;
	
КонецФункции

Процедура УстановитьКлючСессии(ПараметрыЗапроса, ПараметрыКлючаСессии) Экспорт
	
	Попытка
		ДанныеКлючаСессии = ПараметрыСеанса[ПараметрыЗапроса.ИмяПараметраСеанса].Получить();
	Исключение
		ДанныеКлючаСессии = Неопределено;
	КонецПопытки;
	
	Если ДанныеКлючаСессии = Неопределено Тогда
		ДанныеКлючаСессии = Новый Соответствие;
	КонецЕсли;
	
	ДанныеКлючаСессии.Вставить(ПараметрыЗапроса.Организация, ПараметрыКлючаСессии);
	
	ПараметрыСеанса[ПараметрыЗапроса.ИмяПараметраСеанса] = Новый ХранилищеЗначения(ДанныеКлючаСессии);
	
КонецПроцедуры

// Возвращает структуру данных запроса авторизации
// 
// Параметры:
// Возвращаемое значение:
// 	Структура - Параметры авторизации:
// * Идентификатор - Строка - Идентификатор запроса
// * Данные        - Строка - Данные для подписания
Функция ПараметрыАвторизации() Экспорт
	
	ПараметрыАвторизации = Новый Структура;
	ПараметрыАвторизации.Вставить("Идентификатор");
	ПараметрыАвторизации.Вставить("Данные");
	
	Возврат ПараметрыАвторизации;
	
КонецФункции

// Возвращает структуру данных ключа сессии обмена с ИС.
// 
// Параметры:
// Возвращаемое значение:
// 	Структура - Параметры ключа сессии:
// * КлючСессии  - Строка - Ключ сессии.
// * ДействуетДо - Дата   - Дата и время окончания действия ключа сессии.
Функция ПараметрыКлючаСессии() Экспорт
	
	ПараметрыКлючаСессии = Новый Структура;
	ПараметрыКлючаСессии.Вставить("КлючСессии",  "");
	ПараметрыКлючаСессии.Вставить("ДействуетДо", '00010101');
	
	Возврат ПараметрыКлючаСессии;
	
КонецФункции

Функция ПроверитьНаличиеНастройкиПодключенияУПользователя(Организация) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ПрофилиДоступаИСЦЭДМ.Пользователь КАК Пользователь,
	|	ПрофилиДоступаИСЦЭДМ.Организация КАК Организация,
	|	ПрофилиДоступаИСЦЭДМ.ИмяАутентификацииИСЦЭДМ КАК ИмяАутентификацииИСЦЭДМ,
	|	ПрофилиДоступаИСЦЭДМ.ПарольАутентификацииИСЦЭДМ КАК ПарольАутентификацииИСЦЭДМ
	|ИЗ
	|	РегистрСведений.ПрофилиДоступаИСЦЭДМ КАК ПрофилиДоступаИСЦЭДМ
	|ГДЕ
	|	ПрофилиДоступаИСЦЭДМ.Организация = &Организация
	|	И ПрофилиДоступаИСЦЭДМ.Пользователь = &Пользователь";
	
	Запрос.УстановитьПараметр("Организация",  Организация);
	Запрос.УстановитьПараметр("Пользователь", ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.ТекущийПользователь());
	
	КоличествоРезультат = Запрос.Выполнить().Выгрузить().Количество();
	Возврат КоличествоРезультат <> 0;
	
КонецФункции

#Область ЭлектроннаяПодпись

// Получает сертификаты организаций, для предназначены для подписания на сервере.
// 
// Возвращаемое значение:
//  Структура - Структура со свойствами:
//   * Сертификаты - ТаблицаЗначений - содержит сертификат и пароль.
//   * МенеджерКриптографии - МенеджерКриптографии - менеджер криптографии.
//
Функция СертификатыДляПодписанияНаСервере() Экспорт
	
	Возврат Неопределено;
			
КонецФункции

#КонецОбласти

// Формирует и устанавливает текст заголовка формы документа
//
// Параметры:
//  СтрокаВидаОперации - строка вида операции документа, 
//  ДокументОбъект     - объект документа, 
//  ФормаДокумента     - форма документа.
//
Процедура УстановитьЗаголовокФормыДокумента(СтрокаВидаОперации = "", ДокументСсылка, ФормаДокумента) Экспорт

	ФормаДокумента.АвтоЗаголовок = Ложь; // заголовок будем писать сами
	
	Если ПустаяСтрока(СтрокаВидаОперации) Тогда
		Заголовок = ДокументСсылка.Метаданные().Синоним + ": ";
	Иначе
		Заголовок = ДокументСсылка.Метаданные().Синоним + ": " + СтрокаВидаОперации;
	КонецЕсли;
		
	Если ДокументСсылка.Пустая() Тогда  
		Шаблон = НСтр("ru='%1 (создание)'");
	Иначе
		Заголовок = ?(ПустаяСтрока(СтрокаВидаОперации), Заголовок, Заголовок + ". ");
		Шаблон = НСтр("ru='%1 %2 от %3'");
	КонецЕсли;
	
	ФормаДокумента.Заголовок = ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(Шаблон, Заголовок, ДокументСсылка.Номер, ДокументСсылка.Дата);
	
КонецПроцедуры

//Заполняет идентификатор документа для обновления с сервера
//
Процедура ЗаполнитьИдентификаторДокумента(СсылкаНаДокумент, ИдентификаторДокумента, НовыйСтатус = Неопределено) Экспорт
	
	Попытка
		ДокументОбъект = СсылкаНаДокумент.ПолучитьОбъект();
		ДокументОбъект.Идентификатор = ИдентификаторДокумента;
		Если НовыйСтатус <> Неопределено Тогда
			ДокументОбъект.Статус = НовыйСтатус;
		КонецЕсли;
		ДокументОбъект.Записать();
	Исключение
		   //ОписаниеОшибки()
	КонецПопытки; 
	
КонецПроцедуры

Процедура ВосстановитьСсылочныеРеквизитыДокументов(МассивСтарыхДокументов) Экспорт 
	
	Для Каждого ЭлементМассива Из МассивСтарыхДокументов Цикл
		ВосстановитьСсылкиВРеквизитеТабличнойЧасти(ЭлементМассива.ИсходныйОбъект, ЭлементМассива.ОбновленныйОбъект, "Марки", "КодМаркировки", "КодИдентификации");
	КонецЦикла;
	
КонецПроцедуры

Процедура ВосстановитьСсылкиВРеквизитеТабличнойЧасти(
	ИсходныйОбъект,
	ОбновленныйОбъект,
	ИмяТабличнойЧасти,
	ИмяРеквизитаДляВосстановления,
	ИмяРеквизитаДляПроверки)
	
	Если ОбновленныйОбъект[ИмяТабличнойЧасти].Количество() = ИсходныйОбъект[ИмяТабличнойЧасти].Количество() Тогда
		
		ВГраница = ИсходныйОбъект[ИмяТабличнойЧасти].Количество() - 1;
		
		Для Индекс = 0 По ВГраница Цикл
			
			ИсходнаяСтрока = ИсходныйОбъект[ИмяТабличнойЧасти][Индекс];
			ОбновленнаяСтрока = ОбновленныйОбъект[ИмяТабличнойЧасти][Индекс];
			
			Если ТипЗнч(ОбновленнаяСтрока[ИмяРеквизитаДляПроверки]) = Тип("Строка") Тогда
				ОбновленнаяРеквизитПроверки = СокрЛП(ОбновленнаяСтрока[ИмяРеквизитаДляПроверки]);
				ИсходнаяРеквизитПроверки    = СокрЛП(ИсходнаяСтрока[ИмяРеквизитаДляПроверки]);
			Иначе
				ОбновленнаяРеквизитПроверки = ОбновленнаяСтрока[ИмяРеквизитаДляПроверки];
				ИсходнаяРеквизитПроверки    = ИсходнаяСтрока[ИмяРеквизитаДляПроверки];
			КонецЕсли;
			
			Если ОбновленнаяРеквизитПроверки = ИсходнаяРеквизитПроверки Тогда
				
				ОбновленнаяСтрока[ИмяРеквизитаДляВосстановления] = ИсходнаяСтрока[ИмяРеквизитаДляВосстановления];
				
			Иначе
				
				ТекстСообщения = НСтр("ru = 'В документе ""[Док]"", в таблице ""[ИмяТабличнойЧасти]"", в строке [НомерСтроки], очищено поле ""[ИмяРеквизитаДляВосстановления]"", так как значение поля ""[ИмяРеквизитаДляПроверки]"" не соответствовало значению поля в полученном документе.'");
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "[Док]", Строка(ОбновленныйОбъект.Ссылка));
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "[ИмяТабличнойЧасти]", ИмяТабличнойЧасти);
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "[НомерСтроки]", Формат(Индекс + 1, "ЧГ="));
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "[ИмяРеквизитаДляВосстановления]", ИмяРеквизитаДляВосстановления);
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "[ИмяРеквизитаДляПроверки]", ИмяРеквизитаДляПроверки);
				
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = ТекстСообщения;
				Сообщение.УстановитьДанные(ОбновленныйОбъект.Ссылка);
				Сообщение.Сообщить();
				
			КонецЕсли;
			
		КонецЦикла;
		
	Иначе
		
		ТекстСообщения = НСтр("ru = 'В документе ""[Док]"" очищена колонка ""[ИмяРеквизитаДляВосстановления]"" в таблице ""[ИмяТабличнойЧасти]"", так как количество строк в этой таблице не соответствовало количеству строк в полученном документе.'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "[Док]", Строка(ОбновленныйОбъект.Ссылка));
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "[ИмяРеквизитаДляВосстановления]", ИмяРеквизитаДляВосстановления);
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "[ИмяТабличнойЧасти]", ИмяТабличнойЧасти);
		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = ТекстСообщения;
		Сообщение.УстановитьДанные(ОбновленныйОбъект.Ссылка);
		Сообщение.Сообщить();
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ИСМПТ

// Возвращает ключ сессии для обмена с ИС.
// 
// Параметры:
// 	ПараметрыЗапроса - (См. ИнтерфейсАвторизацииИСМПТККлиентСервер.ПараметрыЗапросаКлючаСессии) - Параметры запроса ключа сессии.
// 	СрокДейтвия      - Дата, Неопределено - Срок действия ключа сессии.
// Возвращаемое значение:
// 	Строка, Неопределено - Действующий ключ сессии для организации.
Функция ПроверитьОбновитьКлючСессииИСМПТ(ПараметрыЗапроса, Знач СрокДействия = Неопределено, ОбновлятьКлючСессииНаСервере = Истина) Экспорт
	
	КлючСессии = ИнтерфейсИСМПТКВызовСервера.ТекущийКлючСессииИСМПТ(ПараметрыЗапроса, СрокДействия);
	
	ТребуетсяОбновлениеКлючаСессии = (КлючСессии = Неопределено);
	
	Если ТребуетсяОбновлениеКлючаСессии
		И ОбновитьКлючСессииНаСервере(ПараметрыЗапроса) Тогда
		КлючСессии = ИнтерфейсИСМПТКВызовСервера.ТекущийКлючСессииИСМПТ(ПараметрыЗапроса);
	КонецЕсли;
	
	Возврат КлючСессии;
	
КонецФункции

#КонецОбласти

#Область ИСЦЭДМ

Функция ПолучитьТокенАвторизацииИСЦЭДМ(Организация) Экспорт
	
	ПрофильИСЦЭДМ = ИнтеграцияИСМПТКПовтИсп.ПолучитьДанныеПрофиляДоступаКЭДО(Организация, ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.ТекущийПользователь());
	
	Если ПрофильИСЦЭДМ = Неопределено ИЛИ Не ЗначениеЗаполнено(ПрофильИСЦЭДМ) Тогда 
		ОшибкаПодписи = НСтр("ru = 'Не найден профиль доступа. Для пользователя: %1, по Организации %2. Невозможно получить токен сеанса!'");
		ОшибкаПодписи = ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(ОшибкаПодписи, ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.ТекущийПользователь(), Организация);
		ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ОшибкаПодписи);	
		Возврат Неопределено;
	КонецЕсли;
	
	ПараметрыЗапросаКлючаСессии = ПараметрыЗапросаКлючаСессии_ИСЦЭДМ(ПрофильИСЦЭДМ);
	Токен = ПроверитьОбновитьКлючСессииИСЦЭДМ(ПараметрыЗапросаКлючаСессии, Неопределено, Ложь);
	
	Если Токен = Неопределено Тогда 
		ОшибкаПодписи = НСтр("ru = 'Не удалось получить токен авторизации со стороны сервера! Проверьте корректность указания логина и пароля.'");
		ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ОшибкаПодписи);	
		Возврат Неопределено;
	КонецЕсли;

	Возврат Токен;
	
КонецФункции 

// Инициализировать структуру параметров запроса для получения ключа сессии.
// 
// Параметры:
// ПрофильДоступаКЭДО - структура, в которой - СтруктурнаяЕдиница,
// ИмяАутентификацииИСЦЭДМ, ПарольАутентификацииИСЦЭДМ, БИНОрганизации, Пользователь.
Функция ПараметрыЗапросаКлючаСессии_ИСЦЭДМ(ПрофильДоступаКЭДО = Неопределено) Экспорт
	
	ПараметрыОтправкиHTTPЗапросов = ПараметрыОтправкиHTTPЗапросов_ИСЦЭДМ(Неопределено, Истина);
	
	ПараметрыЗапроса = ПараметрыЗапросаКлючаСессииИСЦЭДМ();
	ПараметрыЗапроса.ПрофильДоступаКЭДО = ПрофильДоступаКЭДО;
	
	ПараметрыЗапроса.ПредставлениеСервиса = ПараметрыОтправкиHTTPЗапросов.ПредставлениеСервиса;
	ПараметрыЗапроса.Сервер  = ПараметрыОтправкиHTTPЗапросов.Сервер;
	ПараметрыЗапроса.Порт    = ПараметрыОтправкиHTTPЗапросов.Порт;
	ПараметрыЗапроса.Таймаут = ПараметрыОтправкиHTTPЗапросов.Таймаут;
	ПараметрыЗапроса.ИспользоватьЗащищенноеСоединение = ПараметрыОтправкиHTTPЗапросов.ИспользоватьЗащищенноеСоединение;
	
	ПараметрыЗапроса.ИмяПараметраСеанса = "ДанныеКлючаСессииИСЦЭДМ";
	
	Возврат ПараметрыЗапроса;
	
КонецФункции

// Возвращает параметры для отправки HTTP запросов ИС ЦЭДМ.
// 
// Возвращаемое значение:
// 	Структура - Описание:
// * ИспользоватьЗащищенноеСоединение - Булево - Признак использования SSL.
// * Таймаут - Число - Таймаут соединения.
// * Порт - Число - Порт соединения.
// * Сервер - Строка - Адрес сервера.
// * ПредставлениеСервиса - Строка - Представления сервиса.
//
Функция ПараметрыОтправкиHTTPЗапросов_ИСЦЭДМ(ВидПродукции = Неопределено, Авторизация = Ложь) Экспорт
	
	ПараметрыОтправкиHTTPЗапросов = Новый Структура;
	ПараметрыОтправкиHTTPЗапросов.Вставить("ПредставлениеСервиса",             РаботаСТекстамиИСМПТККлиентСервер.НаименованиеИСЦЭДМ());
	ПараметрыОтправкиHTTPЗапросов.Вставить("Сервер",                           АдресСервера_ИСЦЭДМ(ВидПродукции, Авторизация));
	ПараметрыОтправкиHTTPЗапросов.Вставить("Порт",                             443);
	ПараметрыОтправкиHTTPЗапросов.Вставить("Таймаут",                          60);
	ПараметрыОтправкиHTTPЗапросов.Вставить("ИспользоватьЗащищенноеСоединение", Истина);
	
	Возврат ПараметрыОтправкиHTTPЗапросов;
	
КонецФункции 

Функция АдресСервера_ИСЦЭДМ(ВидПродукции = Неопределено, Авторизация = Ложь) Экспорт
	
	СтруктураАдресов = ИнтеграцияИСМПТК.ПолучитьАдресаСерверовИС();
	
	АдресИСЦЭДМКонстанта 	= СтруктураАдресов.АдресИСЦЭДМ;
	АдресИСЦЭДМ 			= ИнтеграцияИСМПТК.ОбработатьАдресИСМПТКонстанта(АдресИСЦЭДМКонстанта);
		
	Возврат АдресИСЦЭДМ;
	
КонецФункции

// Инициализировать структуру параметров запроса в ИС ЦЭДМ для получения ключа сессии.
// 
// Возвращаемое значение:
// 	Структура - Описание:
// * Организация          - ОпределяемыйТип.Организация - Организация от имени которой необходимо авторизоваться.
// * ПредставлениеСервиса - Строка                      - Представление сервиса, например: ИС ЦЭДМ.
// * Сервер               - Строка                      - Адрес сервера
// * Порт                 - Число                       - Например: 443.
// * АдресЗапросаКлючаСессии           - Строка - Например: api/v3/auth/cert/
// * АдресЗапросаПараметровАвторизации - Строка - Например: api/v3/auth/cert/key
//
Функция ПараметрыЗапросаКлючаСессииИСЦЭДМ() Экспорт
	
	ПараметрыЗапроса = Новый Структура;
	ПараметрыЗапроса.Вставить("ПредставлениеСервиса",    "");
	ПараметрыЗапроса.Вставить("ПрофильДоступаКЭДО",      Неопределено);
	
	ПараметрыЗапроса.Вставить("Сервер",                  "");
	ПараметрыЗапроса.Вставить("Порт",                    443);
	ПараметрыЗапроса.Вставить("Таймаут",                 60);
	ПараметрыЗапроса.Вставить("ИспользоватьЗащищенноеСоединение", Истина);
	
	ПараметрыЗапроса.Вставить("ИмяПараметраСеанса",      "");
	ПараметрыЗапроса.Вставить("АдресЗапросаКлючаСессии", "apiUot/api/v1/private/get-token");
	
	Возврат ПараметрыЗапроса;
	
КонецФункции

// Возвращает ключ сессии для обмена с ИС.
// 
// Параметры:
// 	ПараметрыЗапроса - (См. ИнтерфейсАвторизацииИСМПТККлиентСервер.ПараметрыЗапросаКлючаСессииИСЦЭДМ) - Параметры запроса ключа сессии.
// 	СрокДейтвия      - Дата, Неопределено - Срок действия ключа сессии.
// Возвращаемое значение:
// 	Строка, Неопределено - Действующий ключ сессии для организации.
Функция ПроверитьОбновитьКлючСессииИСЦЭДМ(ПараметрыЗапроса, Знач СрокДействия = Неопределено, ОбновлятьКлючСессииНаСервере = Истина) Экспорт
	
	КлючСессии = ТекущийКлючСессииИСЦЭДМ(ПараметрыЗапроса, СрокДействия);
	
	ТребуетсяОбновлениеКлючаСессии = (КлючСессии = Неопределено);
	
	Если ТребуетсяОбновлениеКлючаСессии
		И ЗапроситьУстановитьКлючСессииИСЦЭДМ(ПараметрыЗапроса) Тогда
		КлючСессии = ТекущийКлючСессииИСЦЭДМ(ПараметрыЗапроса);
	КонецЕсли;
	
	Возврат КлючСессии;
	
КонецФункции

// Возвращает текущий ключ сессии для обмена с ИСМП.
// 
// Параметры:
// 	ПараметрыЗапроса - (См. ИнтерфейсАвторизацииИСМПКлиентСервер.ПараметрыЗапросаКлючаСессии).
// 	СрокДейтвия - Дата, Неопределено - Срок действия ключа сессии.
// Возвращаемое значение:
// 	Строка, Неопределено - Действующий ключ сессии для организации.
Функция ТекущийКлючСессииИСЦЭДМ(ПараметрыЗапроса, Знач СрокДействия = Неопределено) Экспорт
	
	Попытка
		ДанныеКлючаСессии = ПараметрыСеанса[ПараметрыЗапроса.ИмяПараметраСеанса].Получить();
	Исключение
		ДанныеКлючаСессии = Неопределено;
	КонецПопытки;
	
	// Ключ сессии еще не установлен
	Если ДанныеКлючаСессии = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если СрокДействия = Неопределено Тогда
		
		Таймаут      = 60;
		СрокДействия = ТекущаяДатаСеанса() + Таймаут;
		
	КонецЕсли;
	
	Если ПараметрыЗапроса.ПрофильДоступаКЭДО <> Неопределено Тогда
		
		ДанныеКлючаСессии = ДанныеКлючаСессии.Получить(ПараметрыЗапроса.ПрофильДоступаКЭДО.ИмяАутентификацииИСЦЭДМ);
		
		Если ДанныеКлючаСессии = Неопределено Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		// Ключ сессии устарел
		Если ДанныеКлючаСессии.ДействуетДо <= СрокДействия Тогда
			Возврат Неопределено;
		КонецЕсли;
		
	Иначе
		
		Для Каждого КлючИЗначение Из ДанныеКлючаСессии Цикл
			
			Если КлючИЗначение.Значение.ДействуетДо > СрокДействия Тогда
				
				ДанныеКлючаСессии = КлючИЗначение.Значение;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если ДанныеКлючаСессии = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	КлючСессии = ДанныеКлючаСессии.КлючСессии;
	
	Возврат КлючСессии;
	
КонецФункции

// Выполнить запрос ключа сессии в ЭДО.
// 
// Параметры:
// 	ПараметрыЗапроса - Структура - Структура со свойствами:
//	* ПараметрыАвторизации
//
// Возвращаемое значение:
// 	Структура - Описание:
// * Результат   - (См. ИнтерфейсЭДО.ПараметрыКлючаСессии).
//               - Неопределено - При получении параметров ключа сессии произошла ошибка.
// * ТекстОшибки - Строка - Текст ошибки.
Функция ЗапроситьУстановитьКлючСессииИСЦЭДМ(ПараметрыЗапроса) Экспорт
	
	Хост 		  = ПараметрыЗапроса.Сервер;
	ПутьНаСервере = ПараметрыЗапроса.АдресЗапросаКлючаСессии;
	
	// Подключаемся на сервис
	Если ПараметрыЗапроса.ИспользоватьЗащищенноеСоединение = Истина Тогда
		HTTPСоединение = Новый HTTPСоединение(Хост, ПараметрыЗапроса.Порт ,,,, ПараметрыЗапроса.Таймаут, Новый ЗащищенноеСоединениеOpenSSL(,));
	Иначе
		HTTPСоединение = Новый HTTPСоединение(Хост, ПараметрыЗапроса.Порт ,,,, ПараметрыЗапроса.Таймаут);
	КонецЕсли;
	
	HTTPЗапрос = Новый HTTPЗапрос(ПутьНаСервере, ПолучитьЗаголовки());
	
	username = ПреобразоватьСпецСимволы(ПараметрыЗапроса.ПрофильДоступаКЭДО.ИмяАутентификацииИСЦЭДМ);
	password = ПреобразоватьСпецСимволы(ПараметрыЗапроса.ПрофильДоступаКЭДО.ПарольАутентификацииИСЦЭДМ);
	
	СтрокаПарам = КодироватьСтроку("username=" + username + "&password=" + password, СпособКодированияСтроки.URLВКодировкеURL);
	
	HTTPЗапрос.УстановитьТелоИзСтроки(СтрокаПарам);
	HTTPОтвет = HTTPСоединение.ОтправитьДляОбработки(HTTPЗапрос);  //POST
	
	Если HTTPОтвет.КодСостояния = 200 Тогда
		
		Ответ = HTTPОтвет.ПолучитьТелоКакСтроку();
		
		РазобранныеДанные = JSON21C(Ответ);
		
		ПараметрыКлючаСессии = Новый Структура;
		ПараметрыКлючаСессии.Вставить("КлючСессии",  ИзвлечьЗначениеКлюча(РазобранныеДанные, "access_token"));
		ПараметрыКлючаСессии.Вставить("КлючСессии_Обновление",	ИзвлечьЗначениеКлюча(РазобранныеДанные, "refresh_token"));
		ПараметрыКлючаСессии.Вставить("ДействуетДо", ТекущаяДатаСеанса() + ИзвлечьЗначениеКлюча(РазобранныеДанные, "expires_in"));
		
		Попытка
			ДанныеКлючаСессии = ПараметрыСеанса[ПараметрыЗапроса.ИмяПараметраСеанса].Получить();
		Исключение
			ДанныеКлючаСессии = Неопределено;
		КонецПопытки;
		
		Если ДанныеКлючаСессии = Неопределено Тогда
			ДанныеКлючаСессии  = Новый Соответствие;
		КонецЕсли;
		
		ДанныеКлючаСессии.Вставить(ПараметрыЗапроса.ПрофильДоступаКЭДО.ИмяАутентификацииИСЦЭДМ, ПараметрыКлючаСессии);
		ПараметрыСеанса[ПараметрыЗапроса.ИмяПараметраСеанса] = Новый ХранилищеЗначения(ДанныеКлючаСессии);
		Возврат Истина;
		
	Иначе
		
		Попытка
			ТекстОшибки = НСтр("ru = 'Запрос к серверу %ИмяМетода% не выполнен.'")
						+ Символы.ПС
						+ НСтр("ru = 'Код состояния ответа сервера: %КодСостояния%.'")
						+ Символы.ПС
						+ НСтр("ru = 'Сервер: %АдресСервера%.'")
						+ Символы.ПС
						+ НСтр("ru = 'Строка аутентификации: %Идентификатор%.'")
						+ Символы.ПС 
						+ HTTPОтвет.ПолучитьТелоКакСтроку();
						
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ИмяМетода%", 	  HTTPЗапрос.АдресРесурса);
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%КодСостояния%",  HTTPОтвет.КодСостояния);
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%АдресСервера%",  Хост);
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Идентификатор%", СтрокаПарам);
			
			ИмяСобытия  = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияОшибкаВФункцииСПараметром();
			ИмяСобытия  = СтрЗаменить(ИмяСобытия, "%ИмяФункции%", "ИнтерфейсИСМПТК.ЗапроситьУстановитьКлючСессииИСЦЭДМ");
			
			ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка,,,ТекстОшибки);
		Исключение
		КонецПопытки;
		
		Результат = Новый Структура;
		Результат.Вставить("КлючСессии",  Неопределено);
		Результат.Вставить("КлючСессии_Обновление", Неопределено);
		Результат.Вставить("ДействуетДо", Неопределено); 
		
		Возврат Ложь;
		
	КонецЕсли;
	
	Возврат Истина;

КонецФункции

Функция ПолучитьЗаголовки()

	Headers = Новый Соответствие;
	Headers.Вставить("Content-Type", "application/x-www-form-urlencoded");
	Возврат Headers;
	
КонецФункции

Функция ПреобразоватьСпецСимволы(СтрокаЗапроса)
	
	СоответствеСимволов = Новый Соответствие();
	СоответствеСимволов.Вставить("~", "%7E");
	СоответствеСимволов.Вставить("`", "%60");
	СоответствеСимволов.Вставить("""", "%22");
	СоответствеСимволов.Вставить("@", "%40");
	СоответствеСимволов.Вставить("?", "%3F");
	СоответствеСимволов.Вставить("#", "%23");
	СоответствеСимволов.Вставить("№", "%E2%84%96"); 
	СоответствеСимволов.Вставить("$", "%24");
	СоответствеСимволов.Вставить("%", "%25");
	СоответствеСимволов.Вставить("^", "%5E");
	СоответствеСимволов.Вставить("&", "%26"); 
	СоответствеСимволов.Вставить("+", "%2B");
	СоответствеСимволов.Вставить(":", "%3A");
	СоответствеСимволов.Вставить(",", "%2C"); 
	СоответствеСимволов.Вставить(",", "%2C");
	СоответствеСимволов.Вставить("{", "%7B"); 
	СоответствеСимволов.Вставить("}", "%7D");
	СоответствеСимволов.Вставить("[", "%5B");
	СоответствеСимволов.Вставить("]", "%5D");
	СоответствеСимволов.Вставить("<", "%3C");
	СоответствеСимволов.Вставить(">", "%3E");
	СоответствеСимволов.Вставить("/", "%2F");
	СоответствеСимволов.Вставить("\", "%5C");
	СоответствеСимволов.Вставить(";", "%3B");
	СоответствеСимволов.Вставить(";", "%3B");
	СоответствеСимволов.Вставить(" ", "%20");
	СоответствеСимволов.Вставить("=", "%3D");
	СоответствеСимволов.Вставить("	", "%09");
	
	ПересобраннаяСтрока = "";
	
	Для Сч = 1 По СтрДлина(СтрокаЗапроса) Цикл
		Если Не СоответствеСимволов[Сред(СтрокаЗапроса, Сч, 1)] = Неопределено Тогда
			ПересобраннаяСтрока = ПересобраннаяСтрока + СоответствеСимволов[Сред(СтрокаЗапроса, Сч, 1)];
		Иначе
			ПересобраннаяСтрока = ПересобраннаяСтрока + Сред(СтрокаЗапроса, Сч, 1);
		КонецЕсли;
	КонецЦикла;
	
	Возврат ПересобраннаяСтрока;
	
КонецФункции

Функция JSON21C(СтрокаJSON) Экспорт
	
	ЧтениеJSON = Новый ЧтениеJSON;
	ЧтениеJSON.УстановитьСтроку(СтрокаJSON);
	Структура = ПрочитатьJSON(ЧтениеJSON, Истина);	
	ЧтениеJSON.Закрыть();
	
	Возврат Структура;
	
КонецФункции

Функция ИзвлечьЗначениеКлюча(Данные, ИмяИскомогоКлюча)
	
	Для Каждого КлючЗнач Из Данные Цикл
		Если КлючЗнач.Ключ = ИмяИскомогоКлюча Тогда
			Возврат КлючЗнач.Значение;
		КонецЕсли;
	КонецЦикла;
	
КонецФункции

#КонецОбласти
