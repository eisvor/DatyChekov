#Область ПрограммныйИнтерфейс

Функция ВыбиратьКассыККМ() Экспорт
	
	Возврат Истина;
	
КонецФункции

Функция ПолучитьСерийныйНомер(Команда, Параметры, ВходныеПараметры) Экспорт
	
	СерийныйНомер = "";
	Если Команда = "PrintReceipt" Тогда
		СерийныйНомер = ВходныеПараметры[2][20];
	ИначеЕсли Команда = "OpenCheck" Тогда
		СерийныйНомер = ВходныеПараметры[20];
	ИначеЕсли Команда = "PrintZReport" ИЛИ Команда = "PrintXReport" Тогда
		Если ВходныеПараметры.Свойство("СерийныйНомер") И ЗначениеЗаполнено(ВходныеПараметры.СерийныйНомер) Тогда
			СерийныйНомер = ВходныеПараметры.СерийныйНомер;
		Иначе
			СерийныйНомер = ИнтеграцияWebKassaВызовСервераПереопределяемый.ПолучитьСерийныйНомерУстройства(Параметры.Идентификатор);
		КонецЕсли;
	ИначеЕсли Команда = "Encash" Тогда
		СерийныйНомер = ВходныеПараметры[5];
	КонецЕсли;
	Возврат СерийныйНомер;
	
КонецФункции

Функция ПолучитьСведенияОбОрганизации(ОбщиеПараметры) Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("Организация", ОбщиеПараметры.ОрганизацияНазвание);
	Результат.Вставить("ИИН", ОбщиеПараметры.ОрганизацияИНН);
	Результат.Вставить("СерияСвидетельстваПоНДС", ОбщиеПараметры.СерияСвидетельстваПоНДС);
	Результат.Вставить("НомерСвидетельстваПоНДС", ОбщиеПараметры.НомерСвидетельстваПоНДС);
	Результат.Вставить("Кассир", ОбщиеПараметры.Кассир);
	
	Возврат Результат;
	
КонецФункции

// Возвращает текущую дату, приведенную к часовому поясу сеанса.
Функция ДатаСеанса() Экспорт
	
	Возврат МенеджерОборудованияКлиентПереопределяемый.ДатаСеанса();
	
КонецФункции

// Значение реквизита, прочитанного из информационной базы по ссылке на объект.
//
Функция ЗначениеРеквизитаОбъекта(Ссылка, ИмяРеквизита) Экспорт
	
	Возврат ОбщегоНазначенияРТВызовСервера.ЗначениеРеквизитаОбъекта(Ссылка, ИмяРеквизита);
	
КонецФункции

// Подставляет параметры в строку.
//
Функция ПодставитьПараметрыВСтроку(ШаблонСообщения, Параметр1 = Неопределено, Параметр2 = Неопределено) Экспорт
	
	Возврат СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, Параметр1, Параметр2);
	
КонецФункции

//Выводит сообщение пользователю
//
Процедура СообщитьПользователю(ТекстСообщения, Знач КлючДанных = Неопределено, Знач Поле = "", Знач ПутьКДанным = "") Экспорт
	
	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,
		КлючДанных,
		Поле,
		ПутьКДанным);
	
КонецПроцедуры

//
//
Функция КодТипаРасчета(ТипРасчета) Экспорт
	
	КодТипа = МенеджерОборудованияКлиентСервер.КодРасчетаДенежнымиСредствами(ТипРасчета);
	Если КодТипа = 4 Тогда
		КодТипа = 1;
	КонецЕсли;
	Возврат КодТипа;
	
КонецФункции

//
//
Функция ПолучитьПараметрыПриложения(ИмяПараметра) Экспорт
	
	Возврат ПараметрыПриложения[ИмяПараметра];
	
КонецФункции

//
//
Процедура ДобавитьВПараметрыПриложения(ИмяПараметра, Значение) Экспорт
	
	ПараметрыПриложения.Вставить(ИмяПараметра, Значение);
	
КонецПроцедуры

// Выполняет печать текста на подключаемом оборудовании
//
Процедура НачатьПечатьТекста(ОповещениеЗавершения, УникальныйИдентификатор, ТекстЧека, ПринтерЧеков) Экспорт
	
	Если ПустаяСтрока(ТекстЧека) Тогда
		ОшибкаПустойТекст = нСтр("ru='При формировании текста чека произошла ошибка: Текст не может быть пустым.'", "ru");
		Результат = Новый Структура("Результат, ОписаниеОшибки", Ложь, ОшибкаПустойТекст);
		ВыполнитьОбработкуОповещения(ОповещениеЗавершения, Результат);
	Иначе
		МенеджерОборудованияКлиент.НачатьПечатьТекста(
			ОповещениеЗавершения,
			УникальныйИдентификатор,
			ТекстЧека,
			ПринтерЧеков);
	КонецЕсли;
	
КонецПроцедуры

Процедура НачатьВыполнениеДополнительнойКоманды(ОповещениеПриЗавершении, Команда, ВходныеПараметры, Идентификатор, Параметры) Экспорт
	
	МенеджерОборудованияКлиент.НачатьВыполнениеДополнительнойКоманды(ОповещениеПриЗавершении, Команда, ВходныеПараметры, Идентификатор, Параметры);
	
КонецПроцедуры


Процедура ПоказатьВопросОбУстановкеРасширения(ОповещениеЗавершения, ТекстСообщения, ПродолжитьБезУстановки) Экспорт
	
	ОбщегоНазначенияКлиент.ПоказатьВопросОбУстановкеРасширенияРаботыСФайлами(ОповещениеЗавершения, ТекстСообщения, ПродолжитьБезУстановки);
	
КонецПроцедуры

Функция СкопироватьМассив(МассивИсточник) Экспорт
	
	Возврат ОбщегоНазначенияКлиентСервер.СкопироватьМассив(МассивИсточник);
	
КонецФункции

Процедура РассчитатьСуммуТиповПлатежей(ТаблицаОплат, СуммаНаличными = 0, СуммаЭлектронными = 0, СуммаПостоплатой = 0, СуммаПредоплатой = 0, СуммаМобильный = 0) Экспорт
	
	Если ТаблицаОплат <> Неопределено Тогда
		Для ИндексОплаты = 0 По ТаблицаОплат.Количество() - 1 Цикл
			Если ТаблицаОплат[ИндексОплаты].ТипОплаты = ПредопределенноеЗначение("Перечисление.ТипыОплатыККТ.Электронно") Тогда
				СуммаЭлектронными = СуммаЭлектронными + ТаблицаОплат[ИндексОплаты].Сумма;
			ИначеЕсли ТаблицаОплат[ИндексОплаты].ТипОплаты = ПредопределенноеЗначение("Перечисление.ТипыОплатыККТ.МобильныйПлатеж") Тогда
				СуммаМобильный = СуммаМобильный + ТаблицаОплат[ИндексОплаты].Сумма;
			ИначеЕсли ТаблицаОплат[ИндексОплаты].ТипОплаты = ПредопределенноеЗначение("Перечисление.ТипыОплатыККТ.Предоплата") Тогда
				СуммаПредоплатой = СуммаПредоплатой + ТаблицаОплат[ИндексОплаты].Сумма;
			ИначеЕсли ТаблицаОплат[ИндексОплаты].ТипОплаты = ПредопределенноеЗначение("Перечисление.ТипыОплатыККТ.Постоплата") Тогда
				СуммаПостоплатой = СуммаПостоплатой + ТаблицаОплат[ИндексОплаты].Сумма;
			Иначе
				СуммаНаличными = СуммаНаличными + ТаблицаОплат[ИндексОплаты].Сумма;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

