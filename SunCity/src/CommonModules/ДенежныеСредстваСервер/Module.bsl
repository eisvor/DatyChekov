
#Область ПрограммныйИнтерфейс

#Область ПроцедурыФормированияДвиженияПоДенежнымСредствам

// Формирует движения по регистру "Денежные средства (наличные)".
//
// Параметры:
//  ДополнительныеСвойства - Структура - структура дополнительных свойств для формирования движений.
//  Движения - движения документа для отражения в регистре "Денежные средства (наличные)".
//  Отказ - Булево - признак отказа от проведения документа.
//
Процедура ОтразитьДенежныеСредстваНаличные(ДополнительныеСвойства, Движения, Отказ) Экспорт

	ТаблицаДенежныеСредства = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаДенежныеСредстваНаличные;
	
	Если Отказ ИЛИ ТаблицаДенежныеСредства.Количество() = 0 Тогда
	
		Возврат;
		
	КонецЕсли;
	
	ДвиженияДенежныеСредства = Движения.ДенежныеСредстваНаличные;
	ДвиженияДенежныеСредства.Записывать = Истина;
	ДвиженияДенежныеСредства.Загрузить(ТаблицаДенежныеСредства);
	
КонецПроцедуры

// Формирует движения по регистру "Денежные средства (безналичные)".
//
// Параметры:
//  ДополнительныеСвойства - Структура - структура дополнительных свойств для формирования движений.
//  Движения - движения документа для отражения в регистре "Денежные средства (безналичные)".
//  Отказ - Булево - признак отказа от проведения документа.
//
Процедура ОтразитьДенежныеСредстваБезналичные(ДополнительныеСвойства, Движения, Отказ) Экспорт

	Если НЕ ПолучитьФункциональнуюОпцию("ВестиУчетБезналичныхДенежныхСредств")
		ИЛИ ОбщегоНазначения.ЭтоПодчиненныйУзелРИБ() Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаДенежныеСредства = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаДенежныеСредстваБезналичные;
	
	Если Отказ ИЛИ ТаблицаДенежныеСредства.Количество() = 0 Тогда
	
		Возврат;
		
	КонецЕсли;
	
	ДвиженияДенежныеСредства = Движения.ДенежныеСредстваБезналичные;
	ДвиженияДенежныеСредства.Записывать = Истина;
	ДвиженияДенежныеСредства.Загрузить(ТаблицаДенежныеСредства);
	
КонецПроцедуры

// Формирует движения по регистру "Денежные средства к поступлению(наличные)".
//
// Параметры:
//  ДополнительныеСвойства - Структура - структура дополнительных свойств для формирования движений.
//  Движения - движения документа для отражения в регистре "Денежные средства к поступлению (наличные)".
//  Отказ - Булево - признак отказа от проведения документа.
//
Процедура ОтразитьДенежныеСредстваКПоступлениюНаличные(ДополнительныеСвойства, Движения, Отказ) Экспорт

	ТаблицаДенежныеСредства = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаДенежныеСредстваКПоступлениюНаличные;
	
	Если Отказ ИЛИ ТаблицаДенежныеСредства.Количество() = 0 Тогда
	
		Возврат;
		
	КонецЕсли;
	
	ДвиженияДенежныеСредства = Движения.ДенежныеСредстваКПоступлениюНаличные;
	ДвиженияДенежныеСредства.Записывать = Истина;
	ДвиженияДенежныеСредства.Загрузить(ТаблицаДенежныеСредства);
	
КонецПроцедуры

// Формирует движения по регистру "Выплаченная зарплата".
//
// Параметры:
//  ДополнительныеСвойства - Структура - структура дополнительных свойств для формирования движений.
//  Движения - движения документа для отражения в регистре "Выплаченная зарплата".
//  Отказ - Булево - признак отказа от проведения документа.
//
Процедура ОтразитьВыплаченнаяЗарплата(ДополнительныеСвойства, Движения, Отказ) Экспорт
	
	ТаблицаВыплаченнаяЗарплата = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаВыплаченнаяЗарплата;
	
	Если Отказ ИЛИ ТаблицаВыплаченнаяЗарплата.Количество() = 0 Тогда
	
		Возврат;
		
	КонецЕсли;
	
	ВыплаченнаяЗарплата = Движения.ВыплаченнаяЗарплата;
	ВыплаченнаяЗарплата.Записывать = Истина;
	ВыплаченнаяЗарплата.Загрузить(ТаблицаВыплаченнаяЗарплата);
	
КонецПроцедуры

// Формирует движения по регистру "Денежные средства в кассах ККМ".
//
// Параметры:
//  ДополнительныеСвойства - Структура - структура дополнительных свойств для формирования движений.
//  Движения - движения документа для отражения в регистре "Денежные средства в кассах ККМ".
//  Отказ - Булево - признак отказа от проведения документа.
//
Процедура ОтразитьДенежныеСредстваККМ(ДополнительныеСвойства, Движения, Отказ) Экспорт

	ТаблицаДенежныеСредства = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаДенежныеСредстваККМ;
	
	Если Отказ ИЛИ ТаблицаДенежныеСредства.Количество() = 0 Тогда
	
		Возврат;
		
	КонецЕсли;
	
	ДвиженияДенежныеСредства = Движения.ДенежныеСредстваККМ;
	ДвиженияДенежныеСредства.Записывать = Истина;
	ДвиженияДенежныеСредства.Загрузить(ТаблицаДенежныеСредства);
	
КонецПроцедуры

// Формирует движения по регистру "Расчеты с поставщиками".
//
// Параметры:
//  ДополнительныеСвойства - Структура - структура дополнительных свойств для формирования движений.
//  Движения - движения документа для отражения в регистре "Расчеты с поставщиками".
//  Отказ - Булево - признак отказа от проведения документа.
//
Процедура ОтразитьРасчетыСПоставщиками(ДополнительныеСвойства, Движения, Отказ) Экспорт

	Таблица = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаРасчетыСПоставщиками;
	
	Если Отказ ИЛИ Таблица.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	Движения.РасчетыСПоставщиками.Записывать = Истина;
	Движения.РасчетыСПоставщиками.Загрузить(Таблица);
	
КонецПроцедуры

// Формирует движения по регистру "Расчеты с клиентами".
//
// Параметры:
//  ДополнительныеСвойства - Структура - структура дополнительных свойств для формирования движений.
//  Движения - движения документа для отражения в регистре "Расчеты с клиентами".
//  Отказ - Булево - признак отказа от проведения документа.
//
Процедура ОтразитьРасчетыСКлиентами(ДополнительныеСвойства, Движения, Отказ) Экспорт

	Таблица = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаРасчетыСКлиентами;
	
	Если Отказ ИЛИ Таблица.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	Движения.РасчетыСКлиентами.Записывать = Истина;
	Движения.РасчетыСКлиентами.Загрузить(Таблица);
	
КонецПроцедуры

// Формирует движения по регистру "Денежные средства к выплате".
//
// Параметры:
//  ДополнительныеСвойства - Структура - структура дополнительных свойств для формирования движений.
//  Движения - движения документа для отражения в регистре "Денежные средства к выплате".
//  Отказ - Булево - признак отказа от проведения документа.
//
Процедура ОтразитьДенежныеСредстваКВыплате(ДополнительныеСвойства, Движения, Отказ) Экспорт
	
	Таблица= ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаДенежныеСредстваКВыплате;
	
	Если Отказ ИЛИ Таблица.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	Движения.ДенежныеСредстваКВыплате.Записывать = Истина;
	Движения.ДенежныеСредстваКВыплате.Загрузить(Таблица);
	
КонецПроцедуры

#КонецОбласти

// Определяет реквизиты выбранной кассы.
//
// Параметры:
//  Касса - СправочникСсылка.Кассы - Ссылка на кассу.
//
// Возвращаемое значение:
//  Структура - Организация и Валюта выбранной кассы.
//
Функция ПолучитьРеквизитыКассы(Касса) Экспорт
	
	Возврат Справочники.Кассы.РеквизитыКассы(Касса);
	
КонецФункции

// Проверяет кассу получателя, указанную в документе.
//
// Параметры:
//  ДокументОбъект -ДокументОбъект.РасходныйКассовыйОрдер - документ в котором проверяется касса.
//  Отказ - Булево - признак отказа от продолжения работы.
//
Процедура ПроверитьКассуПолучателя(ДокументОбъект, Отказ) Экспорт
	
	Массив = Новый Массив;
	Массив.Добавить(Перечисления.ХозяйственныеОперации.ВыдачаДенежныхСредствВДругуюКассу);
	Массив.Добавить(Перечисления.ХозяйственныеОперации.ВыдачаДенежныхСредствВДругуюОрганизацию);
	Массив.Добавить(Перечисления.ХозяйственныеОперации.ПоступлениеДенежныхСредствИзБанка);
	
	Если Массив.Найти(ДокументОбъект.ХозяйственнаяОперация) <> Неопределено
		И ЗначениеЗаполнено(ДокументОбъект.КассаПолучатель)
		И ЗначениеЗаполнено(ДокументОбъект.Организация) Тогда
		
		РеквизитыКассы = Справочники.Кассы.РеквизитыКассы(ДокументОбъект.КассаПолучатель);
		Если ДокументОбъект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВыдачаДенежныхСредствВДругуюКассу
			И ЗначениеЗаполнено(ДокументОбъект.Касса) Тогда
			
			Если ДокументОбъект.Касса = ДокументОбъект.КассаПолучатель Тогда
				Текст = НСтр("ru = 'Касса получатель равна кассе документа'");
				ОбщегоНазначения.СообщитьПользователю(
					Текст,
					ДокументОбъект,
					"КассаПолучатель",
					,
					Отказ);
			
			ИначеЕсли ДокументОбъект.Организация <> РеквизитыКассы.Организация Тогда
				Текст = НСтр("ru = 'Организация кассы получателя не соответствует организации документа'");
				ОбщегоНазначения.СообщитьПользователю(
					Текст,
					ДокументОбъект,
					"КассаПолучатель",
					,
					Отказ);
				
			КонецЕсли;
		ИначеЕсли ДокументОбъект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВыдачаДенежныхСредствВДругуюОрганизацию Тогда
			Если ДокументОбъект.Организация = РеквизитыКассы.Организация Тогда
				Текст = НСтр("ru = 'Организация кассы получателя соответствует организации документа'");
				ОбщегоНазначения.СообщитьПользователю(
					Текст,
					ДокументОбъект,
					"КассаПолучатель",
					,
					Отказ);
				
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Проверяет кассу ККМ, указанную в документе.
//
// Параметры:
//  ДокументОбъект - ДокументОбъект.ПриходныйКассовыйОрдер,
//                   ДокументОбъект.РасходныйКассовыйОрдер - документ в котором проверяется касса ККМ.
//  ПроверятьМагазин - Булево - признак необходимости проверки магазинов.
//  Отказ - Булево - признак отказа от продолжения работы.
//
Процедура ПроверитьКассуККМ(ДокументОбъект, ПроверятьМагазин, Отказ) Экспорт
	
	Массив = Новый Массив;
	Массив.Добавить(Перечисления.ХозяйственныеОперации.ВыдачаДенежныхСредствВКассуККМ);
	Массив.Добавить(Перечисления.ХозяйственныеОперации.ПоступлениеДенежныхСредствИзКассыККМ);
	Массив.Добавить(Перечисления.ХозяйственныеОперации.ВозвратОплатыКлиенту);
	Массив.Добавить(Перечисления.ХозяйственныеОперации.ПоступлениеОплатыОтКлиента);
	
	Если Массив.Найти(ДокументОбъект.ХозяйственнаяОперация) <> Неопределено
		И ЗначениеЗаполнено(ДокументОбъект.КассаККМ)
		И ЗначениеЗаполнено(ДокументОбъект.Организация) Тогда
		
		РеквизитыКассыККМ = Справочники.КассыККМ.РеквизитыКассыККМ(ДокументОбъект.КассаККМ);
		Если ДокументОбъект.Организация <> РеквизитыКассыККМ.Организация Тогда
			Текст = НСтр("ru = 'Организация кассы ККМ не соответствует организации документа'");
			ОбщегоНазначения.СообщитьПользователю(
				Текст,
				ДокументОбъект,
				"КассаККМ",
				,
				Отказ);
			
		КонецЕсли;
		
		Если ПроверятьМагазин 
			И ДокументОбъект.Касса.Магазин <> РеквизитыКассыККМ.Магазин Тогда
			Текст = НСтр("ru = 'Магазин кассы ККМ не соответствует магазину кассы'");
			ОбщегоНазначения.СообщитьПользователю(
				Текст,
				ДокументОбъект,
				"КассаККМ",
				,
				Отказ);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Формирует движения по регистру "Расчеты по эквайрингу".
//
// Параметры:
//  ДополнительныеСвойства - Структура - структура дополнительных свойств для формирования движений.
//  Движения - движения документа для отражения в регистре "Расчеты по эквайрингу".
//  Отказ - Булево - признак отказа от проведения документа.
//
Процедура ОтразитьПродажиПоПлатежнымКартам(ДополнительныеСвойства, Движения, Отказ) Экспорт

	ТаблицаРасчетыПоЭквайрингу = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаРасчетыПоЭквайрингу;
	
	Если Отказ ИЛИ ТаблицаРасчетыПоЭквайрингу.Количество() = 0 Тогда
	
		Возврат;
		
	КонецЕсли;
	
	ДвиженияДенежныеСредства = Движения.ПродажиПоПлатежнымКартам;
	ДвиженияДенежныеСредства.Записывать = Истина;
	ДвиженияДенежныеСредства.Загрузить(ТаблицаРасчетыПоЭквайрингу);
	
КонецПроцедуры

// Формирует движения по регистру "Денежные средства (наличные)".
//
// Параметры:
//  ДополнительныеСвойства - Структура - структура дополнительных свойств для формирования движений.
//  Движения - движения документа для отражения в регистре "Денежные средства (наличные)".
//  Отказ - Булево - признак отказа от проведения документа.
//
Процедура ОтразитьДенежныеСредстваВКассахККМ(ДополнительныеСвойства, Движения, Отказ) Экспорт

	ТаблицаДенежныеСредства = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаДенежныеСредстваВКассахККМ;
	
	Если Отказ ИЛИ ТаблицаДенежныеСредства.Количество() = 0 Тогда
	
		Возврат;
		
	КонецЕсли;
	
	ДвиженияДенежныеСредства = Движения.ДенежныеСредстваККМ;
	ДвиженияДенежныеСредства.Записывать = Истина;
	ДвиженияДенежныеСредства.Загрузить(ТаблицаДенежныеСредства);
	
КонецПроцедуры

// Устанавливает параметры выбора для кассы.
//
// Параметры:
//	Объект - ДанныеФормыСтруктура - Текущий объект.
//	ЭлементКасса - ПолеФормы - Поле для ввода кассы.
//	ОрганизацияИзНастроекПользователя - Булево - Значение Истина, если организация в документе установлена из настроек
//	                                             пользователя, в этом случае связь параметра выбора для реквизита Касса
//	                                             не нужно устанавливать.
//                                               Пользователь должен иметь возможность выбора кассы от любой
//                                               организации.
//
Процедура УстановитьПараметрыВыбораКассы(Объект, ЭлементКасса, ОрганизацияИзНастроекПользователя = Ложь) Экспорт
	
	Если ЗначениеЗаполнено(Объект.Организация)
		И (ОрганизацияИзНастроекПользователя = Ложь ИЛИ ЗначениеЗаполнено(Объект.ДокументОснование)) Тогда
		
		МассивПараметров = Новый Массив;
		МассивПараметров.Добавить(Новый СвязьПараметраВыбора("Отбор.Владелец", "Объект.Организация"));
		ЭлементКасса.СвязиПараметровВыбора = Новый ФиксированныйМассив(МассивПараметров);
		
	КонецЕсли;
	
КонецПроцедуры

// Заполняет кассу, банковский счет или эквайринговый терминал в зависимости от формы оплаты документа.
//
// Параметры:
//  ФормаОплаты - ПеречислениеСсылка.ФормыОплаты - фактическая форма оплаты заявки.
//  ДанныеЗаполнения - Структура - данные для заполнения документа.
//  ЭтоВозврат - Булево - признак возврата товара.
//
Процедура ЗаполнитьРеквизитыДокументаПоФормеОплаты(ДанныеЗаполнения, ФормаОплаты = Неопределено, ЭтоВозврат = Ложь) Экспорт
	
	Если ФормаОплаты = Перечисления.ФормыОплаты.Наличная Тогда
		Касса = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("ТекущаяКасса", "");
		Если Не ЗначениеЗаполнено(Касса) Тогда
			Касса = ЗначениеНастроекПовтИсп.КассаОрганизацииПоУмолчанию(
				ДанныеЗаполнения.Организация,
				ФормаОплаты,
				ДанныеЗаполнения.Касса,
				ДанныеЗаполнения.Магазин,
				Пользователи.ТекущийПользователь());
				
			Если ЗначениеЗаполнено(Касса) И Касса.Владелец <> ДанныеЗаполнения.Организация Тогда
				Касса = Справочники.Кассы.ПустаяСсылка();
			КонецЕсли;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Касса) Тогда
			ДанныеЗаполнения.Вставить("Касса", Касса);
		КонецЕсли;
		
	ИначеЕсли ФормаОплаты = Перечисления.ФормыОплаты.Безналичная Тогда
		БанковскийСчет = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("ТекущийБанковскийСчет", "");
		
		Если Не ЗначениеЗаполнено(БанковскийСчет) Тогда
			БанковскийСчет = ЗначениеНастроекПовтИсп.БанковскийСчетОрганизацииПоУмолчанию(
				ДанныеЗаполнения.Организация,
				ФормаОплаты,
				ДанныеЗаполнения.БанковскийСчет);
				
		КонецЕсли;
		
		Если ЗначениеЗаполнено(БанковскийСчет) Тогда
			ДанныеЗаполнения.Вставить("БанковскийСчет", БанковскийСчет);
		КонецЕсли;
		
	ИначеЕсли ФормаОплаты = Неопределено Тогда
		ЭквайринговыйТерминал = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("ТекущийЭквайринговыйТерминал", "");
		Если Не ЗначениеЗаполнено(ЭквайринговыйТерминал) Тогда
			ЭквайринговыйТерминал = Справочники.ЭквайринговыеТерминалы.ЭквайринговыйТерминалПоУмолчанию(
				Неопределено, // Касса
				ДанныеЗаполнения.Организация,
				ДанныеЗаполнения.Магазин);
				
		КонецЕсли;
		ДанныеЗаполнения.Вставить("ВидОплаты", Справочники.ВидыОплатЧекаККМ.ПустаяСсылка());
		ДанныеЗаполнения.Вставить("ПроцентКомиссии", 0.00);
		
		Если ЗначениеЗаполнено(ЭквайринговыйТерминал) Тогда
			Реквизиты = Справочники.ЭквайринговыеТерминалы.РеквизитыЭквайринговогоТерминала(ЭквайринговыйТерминал);
			ДанныеЗаполнения.Вставить("ЭквайринговыйТерминал", ЭквайринговыйТерминал);
			ДанныеЗаполнения.Вставить("Касса", Реквизиты.Касса);
			ДанныеЗаполнения.Вставить("Эквайрер", Реквизиты.Эквайрер);
			
			СтруктураПоУмолчанию = Справочники.ЭквайринговыеТерминалы.ВидОплатыПоУмолчанию(ЭквайринговыйТерминал);
			Если ЗначениеЗаполнено(СтруктураПоУмолчанию.ВидОплаты) Тогда
				ДанныеЗаполнения.Вставить("ВидОплаты", СтруктураПоУмолчанию.ВидОплаты);
				ДанныеЗаполнения.Вставить("ПроцентКомиссии", ЭквайрингВызовСервера.ПолучитьПроцентКомиссииДляПлатежнойКарты(ДанныеЗаполнения.ЭквайринговыйТерминал, СтруктураПоУмолчанию.ВидОплаты, ЭтоВозврат));
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Устанавливает параметры выбора для эквайрингового терминала.
//
// Параметры:
//	Объект - ДанныеФормыСтруктура - Текущий объект.
//	ЭлементЭквайринговыйТерминал - ПолеФормы - Поле для ввода эквайрингового терминала.
//
Процедура УстановитьПараметрыВыбораЭквайринговогоТерминала(Объект, ЭлементЭквайринговыйТерминал) Экспорт
	Перем УстановитьОграничениеСвязиПараметровВыбора;
	
	УстановитьОграничениеСвязиПараметровВыбора = Ложь;
	Если НЕ ЗначениеЗаполнено(Объект.ЭквайринговыйТерминал) Тогда
		УстановитьОграничениеСвязиПараметровВыбора = Истина;
	КонецЕсли;
	
	МассивПараметров = Новый Массив;
	МассивПараметров.Добавить(Новый СвязьПараметраВыбора("Отбор.Магазин", "Объект.Магазин"));
	Если УстановитьОграничениеСвязиПараметровВыбора И ЗначениеЗаполнено(Объект.Организация) Тогда
		МассивПараметров.Добавить(Новый СвязьПараметраВыбора("Отбор.Организация", "Объект.Организация"));
	КонецЕсли;
	ЭлементЭквайринговыйТерминал.СвязиПараметровВыбора = Новый ФиксированныйМассив(МассивПараметров);
	
КонецПроцедуры

// Формирует текст строки "В том числе НДС" платежа.
//
// Параметры:
// 
//	СуммаДокумента - Число - Общая сумма документа.
//	МассивДокументов - Массив - Массив документов для определения суммы НДС.
//	ДобавлятьТекстВТомЧисле - Булево - Добавлять строку "В т.ч." в текст платежа.
//	Дата - Дата - Дата, ля расчета ставки НДС.
//
// Возвращаемое значение:
//	Строка - Текст суммы НДС платежа.
//
Функция ТекстСуммаНДСПлатежа(Объект) Экспорт
	
	Если ЗначениеЗаполнено(Объект.СистемаНалогообложения)
		И НЕ Объект.СистемаНалогообложения = Перечисления.ТипыСистемНалогообложенияККТ.ОСН Тогда
		Возврат НСтр("ru = 'Без налога (НДС)'");
	КонецЕсли;
	
	ДатаСведений = ?(ЗначениеЗаполнено(Объект.Дата), Объект.Дата, ТекущаяДатаСеанса());
	
	// Распределим суммы платежа по расчетным документам.
	СуммаКРаспределению = Объект.СуммаДокумента;
	ДанныеРасчетов = Объект.РасшифровкаПлатежа.Выгрузить().СкопироватьКолонки("ДокументРасчетовСКонтрагентом, Сумма");
	Для Каждого СтрокаРасшифровки Из Объект.РасшифровкаПлатежа Цикл
		Если ЗначениеЗаполнено(СтрокаРасшифровки.ДокументРасчетовСКонтрагентом) Тогда
			СтрокаРасчетов = ДанныеРасчетов.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаРасчетов, СтрокаРасшифровки);
			СуммаКРаспределению = СуммаКРаспределению - СтрокаРасчетов.Сумма;
		КонецЕсли;
	КонецЦикла;
	
	Если СуммаКРаспределению > 0 Тогда
		БазовыйДокументРасчетов = Неопределено;
		Если ЗначениеЗаполнено(Объект.ДокументОснование) Тогда
			БазовыйДокументРасчетов = Объект.ДокументОснование;
		ИначеЕсли ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Объект, "ЗаказПокупателя")
			И ЗначениеЗаполнено(Объект.ЗаказПокупателя) Тогда
			БазовыйДокументРасчетов = Объект.ЗаказПокупателя;
		КонецЕсли;
		
		СтрокаРасчетов = ДанныеРасчетов.Добавить();
		СтрокаРасчетов.Сумма = СуммаКРаспределению;
		СтрокаРасчетов.ДокументРасчетовСКонтрагентом = БазовыйДокументРасчетов;
	КонецЕсли;
	
	
	// Распределим суммы платежа пропорционально суммам и ставкам НДС документов расчетов.
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ИсходнаяТаблица.ДокументРасчетовСКонтрагентом КАК Документ
	|ПОМЕСТИТЬ ТаблицаДокументов
	|ИЗ
	|	&ДанныеРасчетов КАК ИсходнаяТаблица
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Документ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Товары.СтавкаНДС КАК СтавкаНДС,
	|	СУММА(Товары.Сумма) КАК Сумма,
	|	Товары.Ссылка КАК Ссылка
	|ИЗ
	|	(ВЫБРАТЬ
	|		Товары.СтавкаНДС КАК СтавкаНДС,
	|		Товары.Сумма + ВЫБОР
	|			КОГДА Товары.Ссылка.ЦенаВключаетНДС
	|				ТОГДА 0
	|			ИНАЧЕ Товары.СуммаНДС
	|		КОНЕЦ КАК Сумма,
	|		Товары.Ссылка КАК Ссылка
	|	ИЗ
	|		Документ.ЗаказПоставщику.Товары КАК Товары
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаДокументов КАК ТаблицаДокументов
	|			ПО Товары.Ссылка = ТаблицаДокументов.Документ
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		Товары.СтавкаНДС,
	|		Товары.Сумма + ВЫБОР
	|			КОГДА Товары.Ссылка.ЦенаВключаетНДС
	|				ТОГДА 0
	|			ИНАЧЕ Товары.СуммаНДС
	|		КОНЕЦ,
	|		Товары.Ссылка
	|	ИЗ
	|		Документ.ВозвратТоваровПоставщику.Товары КАК Товары
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаДокументов КАК ТаблицаДокументов
	|			ПО Товары.Ссылка = ТаблицаДокументов.Документ
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		Товары.СтавкаНДС,
	|		Товары.Сумма + ВЫБОР
	|			КОГДА Товары.Ссылка.ЦенаВключаетНДС
	|				ТОГДА 0
	|			ИНАЧЕ Товары.СуммаНДС
	|		КОНЕЦ,
	|		Товары.Ссылка
	|	ИЗ
	|		Документ.РеализацияТоваров.Товары КАК Товары
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаДокументов КАК ТаблицаДокументов
	|			ПО Товары.Ссылка = ТаблицаДокументов.Документ
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		Товары.СтавкаНДС,
	|		Товары.Сумма + ВЫБОР
	|			КОГДА Товары.Ссылка.ЦенаВключаетНДС
	|				ТОГДА 0
	|			ИНАЧЕ Товары.СуммаНДС
	|		КОНЕЦ,
	|		Товары.Ссылка
	|	ИЗ
	|		Документ.ПоступлениеТоваров.Товары КАК Товары
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаДокументов КАК ТаблицаДокументов
	|			ПО Товары.Ссылка = ТаблицаДокументов.Документ
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		Товары.СтавкаНДС,
	|		Товары.Сумма + ВЫБОР
	|			КОГДА Товары.Ссылка.ЦенаВключаетНДС
	|				ТОГДА 0
	|			ИНАЧЕ Товары.СуммаНДС
	|		КОНЕЦ,
	|		Товары.Ссылка
	|	ИЗ
	|		Документ.ЗаказПокупателя.Товары КАК Товары
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаДокументов КАК ТаблицаДокументов
	|			ПО Товары.Ссылка = ТаблицаДокументов.Документ) КАК Товары
	|
	|СГРУППИРОВАТЬ ПО
	|	Товары.СтавкаНДС,
	|	Товары.Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	СтавкаНДС
	|ИТОГИ
	|	СУММА(Сумма)
	|ПО
	|	Ссылка");
	
	Запрос.УстановитьПараметр("ДанныеРасчетов", ДанныеРасчетов);
	
	ТаблицаНДС = Новый ТаблицаЗначений;
	ТаблицаНДС.Колонки.Добавить("СтавкаНДС");
	ТаблицаНДС.Колонки.Добавить("Сумма");
	
	ВыборкаДокументы = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаДокументы.Следующий() Цикл
		СтрокаРасчетов = ДанныеРасчетов.Найти(ВыборкаДокументы.Ссылка);
		
		СтавкиНДС = Новый Массив;
		КоэффициентыРаспределения = Новый Массив;
		
		ВыборкаСтавки = ВыборкаДокументы.Выбрать();
		Пока ВыборкаСтавки.Следующий() Цикл
			СтавкиНДС.Добавить(ВыборкаСтавки.СтавкаНДС);
			КоэффициентыРаспределения.Добавить(ВыборкаСтавки.Сумма);
		КонецЦикла;
		
		ДанныеРаспределения = ОбщегоНазначения.РаспределитьСуммуПропорциональноКоэффициентам(СтрокаРасчетов.Сумма, КоэффициентыРаспределения);
		Если НЕ ДанныеРаспределения = Неопределено Тогда
			Счетчик = 0;
			Для Каждого ЭлементРаспределения Из ДанныеРаспределения Цикл
				СтрокаНДС = ТаблицаНДС.Добавить();
				СтрокаНДС.Сумма = ЭлементРаспределения;
				СтрокаНДС.СтавкаНДС = СтавкиНДС[Счетчик];
				
				Счетчик = Счетчик + 1;
			КонецЦикла;
		КонецЕсли;
		
	КонецЦикла;
	
	ТаблицаНДС.Свернуть("СтавкаНДС", "Сумма");
	ТаблицаНДС.Сортировать("СтавкаНДС");
	
	// Сформируем представление сумм НДС.
	ТекстНазначениеПлатежаНДС = "";
	Для Каждого СтрокаНДС Из ТаблицаНДС Цикл
		СтавкаНДСЧислом = ОбработкаТабличнойЧастиТоварыСерверПовтИсп.СтавкаНДСЧислом(СтрокаНДС.СтавкаНДС) * 100;
		Если ЗначениеЗаполнено(СтавкаНДСЧислом) Тогда
			СуммаНДС = СтрокаНДС.Сумма * СтавкаНДСЧислом / (100 + СтавкаНДСЧислом);
			
			ТекстНазначениеПлатежаНДС = ТекстНазначениеПлатежаНДС
				+ ?(ПустаяСтрока(ТекстНазначениеПлатежаНДС), "", ", ")
				+ НСтр("ru = 'НДС'") + "(" + СтрокаНДС.СтавкаНДС + ") "
				+ Формат(СуммаНДС, "ЧЦ=15; ЧДЦ=2; ЧРД=-; ЧН=0-00; ЧГ=");
		КонецЕсли;
	КонецЦикла;
	
	Если НЕ ЗначениеЗаполнено(ТекстНазначениеПлатежаНДС) Тогда
		ТекстНазначениеПлатежаНДС = НСтр("ru = 'Без налога (НДС)'");
	КонецЕсли;
	
	Возврат ТекстНазначениеПлатежаНДС;
	
КонецФункции

// Возвращает признак расчетов с контрагентами.
//
// Параметры:
//  ХозяйственнаяОперация - ПеречисленияСсылка.ХозяйственныеОперации - хозяйственная операция расчета с контрагентами.
// Возвращаемое значение:
//  ПеречислениеСсылка.ХозяйственныеОперации - признак расчета с контрагентами.
//
Функция ЕстьРасчетыСКонтрагентами(ХозяйственнаяОперация = Неопределено) Экспорт
	
	Если ХозяйственнаяОперация = Неопределено Тогда 
		Возврат Ложь;
	Иначе
		Возврат ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ОплатаПоставщику
		Или ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратОплатыКлиенту
		Или ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПоступлениеОплатыОтКлиента
		Или ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратДенежныхСредствОтПоставщика
		Или ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВознаграждениеОтКомитента
	КонецЕсли;
	
КонецФункции

// Получает менеджер временных таблиц с кор. счетами оплаты.
//
// Параметры:
//  СсылкаДокумента  - ДокументСсылка - Пустая ссылка типа документа для печати которого необходимо получить кор.
//                                        счета.
//  МассивОбъектов  - Массив - Массив ссылок на документы печати.
//
// Возвращаемое значение:
//   МенеджерВременныхТаблиц - Менеджер таблиц с кор. счетами.
// 
Функция ПолучитьМенеджерТаблицыКорСчетов(СсылкаДокумента, МассивОбъектов) Экспорт
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц();
	Запрос = Новый Запрос();
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	Документ.Ссылка КАК Ссылка,
	|	ВЫБОР	КОГДА Документ.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВыплатаЗаработнойПлатыРаботнику)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВыплатаЗаработнойПлатыПоВедомостям)
	|			КОГДА Документ.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПоступлениеДенежныхСредствИзДругойКассы)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВыдачаДенежныхСредствВДругуюКассу)
	|			ИНАЧЕ Документ.ХозяйственнаяОперация
	|	КОНЕЦ           КАК ХозяйственнаяОперация
	|ПОМЕСТИТЬ ДокументаКорСчета
	|ИЗ
	|	Документ.[ДокументКорСчетов] КАК Документ
	|ГДЕ
	|	Документ.Ссылка В (&МассивОбъектов)
	|;
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДокументаКорСчета.Ссылка КАК Ссылка,
	|	ЕСТЬNULL(ЕСТЬNULL(СтатьиДвиженияДенежныхСредств.КорреспондирующийСчет, СтатьиДвиженияДенежныхСредствПредопределенный.КорреспондирующийСчет), """") КАК КорреспондирующийСчет
	|ПОМЕСТИТЬ КорСчета
	|ИЗ
	|	ДокументаКорСчета КАК ДокументаКорСчета
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	Документ.[ДокументКорСчетов].РасшифровкаПлатежа КАК ДокументРасшифровкаПлатежа
	|ПО
	|	ДокументРасшифровкаПлатежа.Ссылка = ДокументаКорСчета.Ссылка
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	Справочник.СтатьиДвиженияДенежныхСредств КАК СтатьиДвиженияДенежныхСредств
	|ПО
	|	СтатьиДвиженияДенежныхСредств.Ссылка = ДокументРасшифровкаПлатежа.СтатьяДвиженияДенежныхСредств
	|	И СтатьиДвиженияДенежныхСредств.Предопределенный = ЛОЖЬ
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	Справочник.СтатьиДвиженияДенежныхСредств КАК СтатьиДвиженияДенежныхСредствПредопределенный
	|ПО
	|	СтатьиДвиженияДенежныхСредствПредопределенный.ХозяйственнаяОперация = ДокументаКорСчета.ХозяйственнаяОперация
	|	И СтатьиДвиженияДенежныхСредствПредопределенный.Предопределенный = ИСТИНА
	|ГДЕ
	|	ДокументРасшифровкаПлатежа.Ссылка В (&МассивОбъектов)
	|	ИЛИ ДокументаКорСчета.Ссылка В (&МассивОбъектов)
	|";
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "[ДокументКорСчетов]", СсылкаДокумента.Метаданные().Имя);
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	Запрос.Выполнить();
	Возврат МенеджерВременныхТаблиц;
	
КонецФункции

// Заполняет систему налогообложения в документе
//
// Параметры:
//  Документ - ДанныеФормыСтруктура, ДокументОбъект - объект, в котором необходимо заполнить Систему налогообложения.
//
Процедура ЗаполнитьСистемуНалогообложения(Документ) Экспорт
	
	СистемаНалогообложения = Неопределено;
	
	Если Документ.РасшифровкаПлатежа.Количество() > 0 Тогда
		
		ДокументРасчетовСКонтрагентом = Документ.РасшифровкаПлатежа[0].ДокументРасчетовСКонтрагентом;
		
		Если ЗначениеЗаполнено(ДокументРасчетовСКонтрагентом) Тогда
			
			Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ДокументРасчетовСКонтрагентом, "СистемаНалогообложения") Тогда
				
				СистемаНалогообложения = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументРасчетовСКонтрагентом, "СистемаНалогообложения");
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(СистемаНалогообложения) Тогда
				
				Если ТипЗнч(Документ.Ссылка) = Тип("ДокументСсылка.ПриходныйКассовыйОрдер") Тогда
					
					Если ТипЗнч(ДокументРасчетовСКонтрагентом) = Тип("ДокументСсылка.РеализацияТоваров")
						ИЛИ ТипЗнч(ДокументРасчетовСКонтрагентом) = Тип("ДокументСсылка.ВозвратТоваровПоставщику") Тогда
						
						РеквизитыДокументаРасчетов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДокументРасчетовСКонтрагентом, "Склад, Магазин");
						СистемаНалогообложения = ПодключаемоеОборудованиеРТ.ПолучитьСистемуНалогообложения(
							Документ.Дата, Документ.Организация, РеквизитыДокументаРасчетов.Магазин, РеквизитыДокументаРасчетов.Склад);
						
					ИначеЕсли ТипЗнч(ДокументРасчетовСКонтрагентом) = Тип("ДокументСсылка.ЧекККМ") Тогда
						
						СтруктураРеквизитов = Новый Структура();
						СтруктураРеквизитов.Вставить("Склад", 	"Магазин.СкладПродажи");
						СтруктураРеквизитов.Вставить("Магазин", "Магазин");
						
						РеквизитыДокументаРасчетов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДокументРасчетовСКонтрагентом, СтруктураРеквизитов);
						
						СистемаНалогообложения = ПодключаемоеОборудованиеРТ.ПолучитьСистемуНалогообложения(
							Документ.Дата, Документ.Организация, РеквизитыДокументаРасчетов.Магазин, РеквизитыДокументаРасчетов.Склад);
						
					КонецЕсли;
					
				ИначеЕсли ТипЗнч(Документ.Ссылка) = Тип("ДокументСсылка.РасходныйКассовыйОрдер") Тогда
					
					Если ТипЗнч(ДокументРасчетовСКонтрагентом) = Тип("ДокументСсылка.ПоступлениеТоваров")
						ИЛИ ТипЗнч(ДокументРасчетовСКонтрагентом) = Тип("ДокументСсылка.ВозвратТоваровОтПокупателя") Тогда
						
						РеквизитыДокументаРасчетов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДокументРасчетовСКонтрагентом, "Склад, Магазин");
						СистемаНалогообложения = ПодключаемоеОборудованиеРТ.ПолучитьСистемуНалогообложения(
							Документ.Дата, Документ.Организация, РеквизитыДокументаРасчетов.Магазин, РеквизитыДокументаРасчетов.Склад);
						
					КонецЕсли;
					
				ИначеЕсли ТипЗнч(Документ.Ссылка) = Тип("ДокументСсылка.РегистрацияБезналичнойОплаты") Тогда
					
					РеквизитыДокументаРасчетов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДокументРасчетовСКонтрагентом, "Склад, Магазин");
						
					СистемаНалогообложения = ПодключаемоеОборудованиеРТ.ПолучитьСистемуНалогообложения(
						Документ.Дата, Документ.Организация, РеквизитыДокументаРасчетов.Магазин, РеквизитыДокументаРасчетов.Склад);
						
				ИначеЕсли ТипЗнч(Документ.Ссылка) = Тип("ДокументСсылка.ОплатаОтПокупателяПлатежнойКартой") Тогда
					
					Если ТипЗнч(ДокументРасчетовСКонтрагентом) = Тип("ДокументСсылка.РеализацияТоваров")
						ИЛИ ТипЗнч(ДокументРасчетовСКонтрагентом) = Тип("ДокументСсылка.ВозвратТоваровОтПокупателя") Тогда
						
						РеквизитыДокументаРасчетов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДокументРасчетовСКонтрагентом, "Склад, Магазин");
						
						СистемаНалогообложения = ПодключаемоеОборудованиеРТ.ПолучитьСистемуНалогообложения(
							Документ.Дата, Документ.Организация, РеквизитыДокументаРасчетов.Магазин, РеквизитыДокументаРасчетов.Склад);
					
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(СистемаНалогообложения) Тогда
		
		Магазин = Неопределено;
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Документ, "Магазин") Тогда
			Магазин = Документ.Магазин;
		ИначеЕсли ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Документ, "КассаККМ") Тогда
			Магазин = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Документ.КассаККМ, "Магазин");
		КонецЕсли;
		
		Склад = Неопределено;
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Документ, "Склад") Тогда
			Склад = Документ.Склад;
		ИначеЕсли ЗначениеЗаполнено(Магазин) Тогда
			Склад = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Магазин, "СкладПродажи");
		КонецЕсли;
		
		СистемаНалогообложения = ПодключаемоеОборудованиеРТ.ПолучитьСистемуНалогообложения(
			Документ.Дата, Документ.Организация, Магазин, Склад);
		
	КонецЕсли;
	
	Документ.СистемаНалогообложения = СистемаНалогообложения;
	
КонецПроцедуры

// Заполняет систему налогообложения в расшифровке платежа.
//
// Параметры:
//  ЭлементФормы - ДанныеФормыКоллекция, ДанныеФормыЭлементКоллекции - Табличная часть расшифровки платежа, Строка табличной части.
//
Процедура ЗаполнитьСистемуНалогообложенияЭлементаФормы(ЭлементФормы) Экспорт
	
	ДокументыРасчетов = Новый Массив;
	ЭтоКоллекции = ТипЗнч(ЭлементФормы) = Тип("ДанныеФормыКоллекция");
	
	Если ЭтоКоллекции Тогда
		Для каждого СтрокаРасшифровки Из ЭлементФормы Цикл
			Если ЗначениеЗаполнено(СтрокаРасшифровки.ДокументРасчетовСКонтрагентом) Тогда
				ДокументыРасчетов.Добавить(СтрокаРасшифровки.ДокументРасчетовСКонтрагентом);
			КонецЕсли;
		КонецЦикла;
	ИначеЕсли ЗначениеЗаполнено(ЭлементФормы.ДокументРасчетовСКонтрагентом) Тогда
		ДокументыРасчетов.Добавить(ЭлементФормы.ДокументРасчетовСКонтрагентом);
	КонецЕсли;
	
	Если ДокументыРасчетов.Количество() = 0 Тогда
		СНОДокументов = Новый Соответствие;
	Иначе
		СНОДокументов = РегистрыСведений.ПрименениеСистемНалогообложения.СистемаНалогообложенияДокументов(
			ДокументыРасчетов);
	КонецЕсли;
	
	Если ЭтоКоллекции Тогда
		Для каждого СтрокаРасшифровки Из ЭлементФормы Цикл
			СтрокаРасшифровки.СистемаНалогообложения = СНОДокументов.Получить(
				СтрокаРасшифровки.ДокументРасчетовСКонтрагентом);
		КонецЦикла;
	Иначе
		ЭлементФормы.СистемаНалогообложения = СНОДокументов.Получить(ЭлементФормы.ДокументРасчетовСКонтрагентом);
	КонецЕсли;
	
КонецПроцедуры

// Производит заполнение признака способа расчета в Расшифровке платежа.
//
// Параметры:
//  Объект - ДокументОбъект.РасходныйКассовыйОрдер, ДанныеФормыСтруктуры - объект для заполнения признака;
//  СтрокаРасшифровки - СтрокаТабличнойЧасти, ДанныеФормыЭлементКоллекции - строка расшифровки платежа для заполнения.
//
Процедура ЗаполнитьПризнакСпособаРасчета(Объект, СтрокаРасшифровки = Неопределено) Экспорт
	
	МенеджерДокумента = ОбщегоНазначения.МенеджерОбъектаПоСсылке(Объект.Ссылка);
	
	Если СтрокаРасшифровки = Неопределено Тогда
		Для каждого СтрокаРасшифровки Из Объект.РасшифровкаПлатежа Цикл
			МенеджерДокумента.ЗаполнитьПризнакСпособаРасчетаСтрокиРасшифровки(Объект, СтрокаРасшифровки);
		КонецЦикла;
	Иначе
		МенеджерДокумента.ЗаполнитьПризнакСпособаРасчетаСтрокиРасшифровки(Объект, СтрокаРасшифровки);
	КонецЕсли;
	
КонецПроцедуры

// Возвращает Кассу ККМ найденную по переданным параметрам
//
// Параметры:
//  Организация	 - Справочник.Организации - организация по которой ищется касса ккм.
//  Магазин		 - Справочник.Магазины - магазин по которому ищется касса ккм.
//  РабочееМесто - Справочник.РабочееМесто - рабочее место по которому ищется касса ккм.
// 
// Возвращаемое значение:
//  КассаККМ - найденная КассаККМ по переданным параметрам
//
Функция КассаККМ(Организация, Магазин, РабочееМесто) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	КассыККМ.Ссылка КАК КассыККМ
		|ИЗ
		|	Справочник.КассыККМ КАК КассыККМ
		|ГДЕ
		|	КассыККМ.Владелец = &Организация
		|	И КассыККМ.Магазин = &Магазин
		|	И КассыККМ.РабочееМесто = &РабочееМесто
		|	И НЕ КассыККМ.ПометкаУдаления";
	
	Запрос.УстановитьПараметр("Организация", 	Организация);
	Запрос.УстановитьПараметр("Магазин", 		Магазин);
	Запрос.УстановитьПараметр("РабочееМесто", 	РабочееМесто);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Выборка.КассыККМ;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

// Возвращает коллекцию строковых представлений расчетных документов, указанных в расшифровке платежа.
//
// Возвращаемое значение: Массив строк;
//
// Параметры:
//  Объект - ДокументОбъект, ДанныеФормыКоллекция;
//
Функция ПредставлениеРасчетныхДокументов(Объект) Экспорт
	
	КоллекцияПредставлений = Новый Массив;
	
	ДокументыРасчетов = Новый Массив;
	Для Каждого СтрокаРасшифровки из Объект.РасшифровкаПлатежа Цикл
		Если ЗначениеЗаполнено(СтрокаРасшифровки.ДокументРасчетовСКонтрагентом) Тогда
			ДокументыРасчетов.Добавить(СтрокаРасшифровки.ДокументРасчетовСКонтрагентом);
		КонецЕсли;
	КонецЦикла;
	
	СоответствиеДокументовПоТипам = ОбщегоНазначенияРТ.СоответствиеМассивовПоТипамОбъектов(ДокументыРасчетов);
	
	
	Для каждого ТипДокумента Из СоответствиеДокументовПоТипам Цикл
		
		ДанныеДокументов = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(ТипДокумента.Значение, 
				"Представление, Номер, Дата");
		
		Для Каждого ДокументРасчетов Из ТипДокумента.Значение Цикл
			ДанныеДокумента = ДанныеДокументов.Получить(ДокументРасчетов);
			
			ПредставлениеДокумента = ФормированиеПечатныхФормСервер.СформироватьЗаголовокДокумента(ДанныеДокумента);
			КоллекцияПредставлений.Добавить(ПредставлениеДокумента);
			
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат КоллекцияПредставлений;
	
КонецФункции

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

Функция ПрисутствуютРасчетыЗаНоменклатурныеПозиции(ПлатежныеДокументы, ВыводитьПредупреждение = Истина) Экспорт
	
	ПрисутствуютРасчетыЗаНоменклатурныеПозиции = Ложь;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ПлатежныеДокументы", ПлатежныеДокументы);
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПриходныйКассовыйОрдерРасшифровкаПлатежа.ДокументРасчетовСКонтрагентом КАК ДокументТовародвижения,
	|	ПриходныйКассовыйОрдерРасшифровкаПлатежа.Ссылка КАК ДокументРасчетовСКонтрагентом
	|ИЗ
	|	Документ.ПриходныйКассовыйОрдер.РасшифровкаПлатежа КАК ПриходныйКассовыйОрдерРасшифровкаПлатежа
	|ГДЕ
	|	ПриходныйКассовыйОрдерРасшифровкаПлатежа.Ссылка В(&ПлатежныеДокументы)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	РасходныйКассовыйОрдерРасшифровкаПлатежа.ДокументРасчетовСКонтрагентом,
	|	РасходныйКассовыйОрдерРасшифровкаПлатежа.Ссылка
	|ИЗ
	|	Документ.РасходныйКассовыйОрдер.РасшифровкаПлатежа КАК РасходныйКассовыйОрдерРасшифровкаПлатежа
	|ГДЕ
	|	РасходныйКассовыйОрдерРасшифровкаПлатежа.Ссылка В(&ПлатежныеДокументы)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	РегистрацияБезналичнойОплатыРасшифровкаПлатежа.ДокументРасчетовСКонтрагентом,
	|	РегистрацияБезналичнойОплатыРасшифровкаПлатежа.Ссылка
	|ИЗ
	|	Документ.РегистрацияБезналичнойОплаты.РасшифровкаПлатежа КАК РегистрацияБезналичнойОплатыРасшифровкаПлатежа
	|ГДЕ
	|	РегистрацияБезналичнойОплатыРасшифровкаПлатежа.Ссылка В(&ПлатежныеДокументы)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ОплатаОтПокупателяПлатежнойКартойРасшифровкаПлатежа.ДокументРасчетовСКонтрагентом,
	|	ОплатаОтПокупателяПлатежнойКартойРасшифровкаПлатежа.Ссылка
	|ИЗ
	|	Документ.ОплатаОтПокупателяПлатежнойКартой.РасшифровкаПлатежа КАК ОплатаОтПокупателяПлатежнойКартойРасшифровкаПлатежа
	|ГДЕ
	|	ОплатаОтПокупателяПлатежнойКартойРасшифровкаПлатежа.Ссылка В(&ПлатежныеДокументы)";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	ТекстПредупреждения = НСтр("ru = 'В расшифровке платежа указаны документы расчетов, являющиеся платежными документами, но содержащие ссылки на документы товародвижения.
		|Для корректного формирования фискальных данных рекомендуется указывать в качестве расчетных документы движения денежных средств, отражающие получение / возврат аванса,
		|либо непосредственно указывать документ товародвижения (Возврат товаров покупателю, Реализацию товаров и услуг).'");
	
	ШаблонДокументы = НСтр("ru = 'Документ расчетов: %1. Документ товародвижения: %2'");
	
	Пока Выборка.Следующий() Цикл
		Если ЗначениеЗаполнено(Выборка.ДокументТовародвижения)
			И ОбщегоНазначенияРТ.ЕстьТЧОбъекта("Товары", Выборка.ДокументТовародвижения.Метаданные()) Тогда
			ПрисутствуютРасчетыЗаНоменклатурныеПозиции = Истина;
			ТекстПредупреждения = ТекстПредупреждения + Символы.ПС
				+ СтрШаблон(ШаблонДокументы, Выборка.ДокументРасчетовСКонтрагентом, Выборка.ДокументТовародвижения);
		КонецЕсли;
	КонецЦикла;
	
	Если ПрисутствуютРасчетыЗаНоменклатурныеПозиции И ВыводитьПредупреждение Тогда
		ОбщегоНазначения.СообщитьПользователю(ТекстПредупреждения);
	КонецЕсли;
	
	Возврат ПрисутствуютРасчетыЗаНоменклатурныеПозиции;
	
КонецФункции

Функция ПрисутствуютРасчетыЗаВозвратБезМарки(ДокументыВозврата, Период) Экспорт
	
	ЕстьОшибки = Ложь;
	
	ТекстПредупреждения = НСтр("ru = 'Документ расчетов %1 содержит недостаточные сведения в части маркировки.'");
	
	Для Каждого ДокументВозврата Из ДокументыВозврата Цикл
		Отказ = Ложь;
		ИнтеграцияИСРТ.ПроверитьЗаполнениеАкцизныхМарок(ДокументВозврата, Отказ, Период);
		
		Если Отказ Тогда
			ЕстьОшибки = Истина;
			ОбщегоНазначения.СообщитьПользователю(СтрШаблон(ТекстПредупреждения, ДокументВозврата));
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ЕстьОшибки;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Функция формирует запрос по табличной части "Расшифровка платежа".
//
// Параметры:
//	ДокументОбъект - Документ
//
// Возвращаемое значение:
//	Запрос - запрос по табличной части.
//
Функция ЗапросПоТабличнойЧастиРасшифровкаПлатежа(ДокументОбъект)
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	НомерСтроки КАК НомерСтроки,
	|	ДокументРасчетовСКонтрагентом КАК ДокументРасчетовСКонтрагентом
	|ПОМЕСТИТЬ ТаблицаДокумента
	|ИЗ
	|	&ТаблицаДокумента КАК ТаблицаДокумента
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|	
	|ВЫБРАТЬ
	|	ТаблицаДокумента.НомерСтроки                               КАК НомерСтроки,
	|	ТаблицаДокумента.ДокументРасчетовСКонтрагентом.Организация КАК Организация,
	|	ТаблицаДокумента.ДокументРасчетовСКонтрагентом.Магазин     КАК Магазин,
	|	ТаблицаДокумента.ДокументРасчетовСКонтрагентом.Контрагент  КАК Контрагент
	|ИЗ
	|	ТаблицаДокумента КАК ТаблицаДокумента
	|		
	|УПОРЯДОЧИТЬ ПО
	|	ТаблицаДокумента.НомерСтроки
	|;
	|");
	
	ТаблицаДокумента = ДокументОбъект.РасшифровкаПлатежа.Выгрузить();
	Запрос.УстановитьПараметр("ТаблицаДокумента", ТаблицаДокумента);
	
	Возврат Запрос;
	
КонецФункции

// Процедура проверяет заполнение табличной части "Расшифровка платежа".
//
// Параметры:
//	ДокументОбъект - Документ
//	СуммаДокумента - Число - Общая сумма документа.
//	ХозяйственнаяОперация - ПеречислениеСсылка.ХозяйственныеОперации - Хозяйственная операция документа.
//	Отказ - Булево - Признак отказа от продолжения работы.
//
Процедура ПроверитьЗаполнениеРасшифровкиПлатежа(
	ДокументОбъект,
	СуммаДокумента,
	ХозяйственнаяОперация,
	Отказ) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);

	МассивНепроверяемыхОпераций = Новый Массив;
	МассивНепроверяемыхОпераций.Добавить(Перечисления.ХозяйственныеОперации.ВыдачаДенежныхСредствВДругуюКассу);
	МассивНепроверяемыхОпераций.Добавить(Перечисления.ХозяйственныеОперации.СдачаДенежныхСредствВБанк);
	МассивНепроверяемыхОпераций.Добавить(Перечисления.ХозяйственныеОперации.ПоступлениеДенежныхСредствИзДругойКассы);
	МассивНепроверяемыхОпераций.Добавить(Перечисления.ХозяйственныеОперации.ВыдачаДенежныхСредствВДругуюОрганизацию);
	МассивНепроверяемыхОпераций.Добавить(Перечисления.ХозяйственныеОперации.ВыдачаДенежныхСредствВКассуККМ);
	МассивНепроверяемыхОпераций.Добавить(Перечисления.ХозяйственныеОперации.ВыдачаДенежныхСредствИзКассыККМ);
	МассивНепроверяемыхОпераций.Добавить(Перечисления.ХозяйственныеОперации.ПоступлениеДенежныхСредствИзБанка);
	МассивНепроверяемыхОпераций.Добавить(Перечисления.ХозяйственныеОперации.ПоступлениеДенежныхСредствИзДругойОрганизации);
	МассивНепроверяемыхОпераций.Добавить(Перечисления.ХозяйственныеОперации.ПоступлениеДенежныхСредствИзКассыККМ);
	МассивНепроверяемыхОпераций.Добавить(Перечисления.ХозяйственныеОперации.ПрочиеДоходы);
	МассивНепроверяемыхОпераций.Добавить(Перечисления.ХозяйственныеОперации.ПрочиеРасходы);
	
	Если МассивНепроверяемыхОпераций.Найти(ХозяйственнаяОперация) <> Неопределено Тогда
		Возврат;
	КонецЕсли;

	
	МассивОперацийПроверкиОрганизацииДокументаРасчета = Новый Массив;
	МассивОперацийПроверкиОрганизацииДокументаРасчета.Добавить(Перечисления.ХозяйственныеОперации.ОплатаПоставщику);
	МассивОперацийПроверкиОрганизацииДокументаРасчета.Добавить(Перечисления.ХозяйственныеОперации.ВозвратОплатыКлиенту);
	МассивОперацийПроверкиОрганизацииДокументаРасчета.Добавить(Перечисления.ХозяйственныеОперации.ПоступлениеОплатыОтКлиента);
	МассивОперацийПроверкиОрганизацииДокументаРасчета.Добавить(Перечисления.ХозяйственныеОперации.ВозвратДенежныхСредствОтПоставщика);
	
	// Проверим соответствие сумм документа и табличной части.
	Если ДокументОбъект.РасшифровкаПлатежа.Количество() > 0
		И СуммаДокумента <> ДокументОбъект.РасшифровкаПлатежа.Итог("Сумма") Тогда
	
		Текст = НСтр("ru = 'Сумма по строкам в табличной части должна равняться сумме документа'");
		ОбщегоНазначения.СообщитьПользователю(
			Текст,
			ДокументОбъект,
			"РасшифровкаПлатежа[0].Сумма",
			,
			Отказ);
		
	КонецЕсли;
	
	// Проверим соответствие организации в шапке документа и в табличной части.
	Если МассивОперацийПроверкиОрганизацииДокументаРасчета.Найти(ХозяйственнаяОперация) <> Неопределено Тогда
		
		Запрос = ЗапросПоТабличнойЧастиРасшифровкаПлатежа(ДокументОбъект);
		
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			Текст = "";
			Если ЗначениеЗаполнено(Выборка.Организация)
				И Выборка.Организация <> ДокументОбъект.Организация Тогда
				
				Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Организация в строке %1 списка ""Расшифровка платежа"" не соответствует организации документа %2'"),
					Выборка.НомерСтроки,
					ДокументОбъект.Организация);
					
			КонецЕсли;
			
			Если ЗначениеЗаполнено(Выборка.Контрагент)
				И Выборка.Контрагент <> ДокументОбъект.Контрагент Тогда
				
				Текст = Текст + Символы.ПС + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Контрагент в строке %1 списка ""Расшифровка платежа"" не соответствует контрагенту документа %2'"),
					Выборка.НомерСтроки,
					ДокументОбъект.Контрагент);
					
			КонецЕсли;
			
			Если НЕ ПустаяСтрока(Текст) Тогда
				ОбщегоНазначения.СообщитьПользователю(
					Текст,
					ДокументОбъект,
					"РасшифровкаПлатежа[" + (Выборка.НомерСтроки - 1) + "].ДокументРасчетовСКонтрагентом",
					,
					Отказ);
				
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

#КонецОбласти