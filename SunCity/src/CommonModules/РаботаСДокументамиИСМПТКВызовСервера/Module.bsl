
#Область СлужебныеПроцедурыИФункции

Функция ПроверитьНепроведенныеПервичныеДокументы(МассивПервичныхДокументов) Экспорт
	
	Возврат РаботаСДокументамиИСМПТК.ПроверитьНепроведенныеПервичныеДокументы(МассивПервичныхДокументов);
	
КонецФункции

Функция ВыполнитьДобавлениеКМИзФайлаВФоне(СтруктураПараметров, ПараметрыСканирования, ТокенАвторизации = Неопределено, НеПроверятьКорректностьКМ = Ложь) Экспорт
	
	ПараметрыМетода = Новый Структура();
	ПараметрыМетода.Вставить("МассивОшибок", 	  СтруктураПараметров.МассивОшибок);
	ПараметрыМетода.Вставить("СведенияОВыбранныхДокументах", СтруктураПараметров.СведенияОВыбранныхДокументах);
	ПараметрыМетода.Вставить("ПараметрыСканирования", ПараметрыСканирования);
	ПараметрыМетода.Вставить("ТокенАвторизации", 	  ТокенАвторизации);
	ПараметрыМетода.Вставить("НеПроверятьКорректностьКМ", НеПроверятьКорректностьКМ);
	
	ПараметрыВыполнения = ОбщегоНазначенияИСМПТКПереопределяемый.ПараметрыВыполненияВФоне(СтруктураПараметров.УникальныйИдентификатор); 
	ПараметрыВыполнения.ОжидатьЗавершение = 0;
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НСтр("ru = 'Загрузка кодов маркировки из файла'");
	ПараметрыВыполнения.ЗапуститьВФоне    = Истина;
				
	ВыполняемыйМетод = "РаботаСДокументамиИСМПТК.ВыполнитьДобавлениеКМИзФайлаВФоне";
	
	Возврат ИнтеграцияИСМПТКПереопределяемый.ВыполнитьВФоне(ВыполняемыйМетод, ПараметрыМетода, ПараметрыВыполнения); 
	
КонецФункции

Функция ВыполнитьДобавлениеКМИзТСДВФоне(СтруктураПараметров, ПараметрыСканирования, ТокенАвторизации = Неопределено) Экспорт
	
	ПараметрыМетода = Новый Структура();
	ПараметрыМетода.Вставить("МассивКМ", 			  СтруктураПараметров.МассивКодовМаркировки);
	ПараметрыМетода.Вставить("ПараметрыСканирования", ПараметрыСканирования);
	ПараметрыМетода.Вставить("ТокенАвторизации", 	  ТокенАвторизации);
	
	ПараметрыВыполнения = ОбщегоНазначенияИСМПТКВызовСервераПереопределяемый.ПараметрыВыполненияВФоне(СтруктураПараметров.УникальныйИдентификатор); 
	ПараметрыВыполнения.ОжидатьЗавершение = 0;
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НСтр("ru = 'Загрузка кодов маркировки из ТСД'");
	ПараметрыВыполнения.ЗапуститьВФоне    = Истина;
				
	ВыполняемыйМетод = "РаботаСДокументамиИСМПТК.ВыполнитьДобавлениеКМИзТСДВФоне";
	
	Возврат ОбщегоНазначенияИСМПТКВызовСервераПереопределяемый.ВыполнитьВФоне(ВыполняемыйМетод, ПараметрыМетода, ПараметрыВыполнения); 
	
КонецФункции

#КонецОбласти

#Область ДокументыИСМПТ_БМ

Функция МассивИСМПТСДокументомОснованияИБез(МассивИСМПТ) Экспорт
	
	Возврат РаботаСДокументамиИСМПТК.МассивИСМПТСДокументомОснованияИБез(МассивИСМПТ);	
	
КонецФункции

Функция НовоеСоответствиеДляОбновленияАктуальныхОснований(Знач МассивИСМПТ) Экспорт
	
	// Соответствие документов ИСМПТ и актуальных оснований, по которым можно выполнить перезаполнение
	СоответствиеДляОбновленияАктуальныхОснований = Новый Соответствие;
	
	// Массив документов ИСМПТ, у которых нет актуальных оснований.
	ОтсутствуетАктуальноеОснование = Новый Массив;
	
	// Массив ИСМПТ, которые имеют актуальные основания в недопустимом состоянии. 
	НедопустимоеСостояние = Новый Массив;
	
	// Найти актуальные основания для документов ИСМПТ.
	СоответствиеАктуальныхОснований = НайтиАктуальныеОснованияПоДокументамИСМПТ(МассивИСМПТ);
	
	// Заполнить коллекции СоответствиеАктуальныхОснований, ОтсутствуетАктуальноеОснование, НедопустимоеСостояниеОснования.
	Для Каждого ЭлементСоответствия Из СоответствиеАктуальныхОснований Цикл
		
		СсылкаДокументИСМПТ = ЭлементСоответствия.Ключ;
		ДанныеОснования = ЭлементСоответствия.Значение;
		
		Если ДанныеОснования = Неопределено 
			Или Не ЗначениеЗаполнено(ДанныеОснования) Тогда
			ОтсутствуетАктуальноеОснование.Добавить(СсылкаДокументИСМПТ);
		
		ИначеЕсли Не СсылкаДокументИСМПТ.Состояние = ПредопределенноеЗначение("Перечисление.СостоянияДокументовИСМПТК.Сформирован")    
			И Не СсылкаДокументИСМПТ.Состояние = ПредопределенноеЗначение("Перечисление.СостоянияДокументовИСМПТК.ОтклоненСервером") Тогда
			НедопустимоеСостояние.Добавить(СсылкаДокументИСМПТ);
		Иначе
			СоответствиеДляОбновленияАктуальныхОснований.Вставить(СсылкаДокументИСМПТ, ДанныеОснования);
		КонецЕсли;
		
	КонецЦикла;
	
	// Сформировать и показать текст сообщения, если нельзя обновить все документы.
	Если СоответствиеДляОбновленияАктуальныхОснований.Количество() <> МассивИСМПТ.Количество() Тогда
		
		ТекстСообщения = "";
		
		// Сформировать текст по документам, у которых нет актуальных оснований.
		Если ОтсутствуетАктуальноеОснование.Количество() <> 0 Тогда
			
			ТекстСообщения = ТекстСообщения + НСтр("ru = 'Невозможно перезаполнить документы %СписокИСМПТ% так как эти документы не отражены в учете.'");
				
			СписокИСМПТ = "";
			Для Каждого СсылкаИСМПТ Из ОтсутствуетАктуальноеОснование Цикл
				СписокИСМПТ = СписокИСМПТ + "- " + СсылкаИСМПТ + Символы.ПС;	
			КонецЦикла;
			
			ПодстрокаЗамены = Символы.ПС + СокрЛП(СписокИСМПТ) + Символы.ПС;
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%СписокИСМПТ%", ПодстрокаЗамены);
				
		КонецЕсли;
		
		ТекстСообщения = СокрЛП(ТекстСообщения) + Символы.ПС + Символы.ПС;
		
		// Сформировать текст по документам, у которых есть актуальные основания с недопустимым состоянием.
		Если НедопустимоеСостояние.Количество() <> 0 Тогда
			
			ТекстСообщения = ТекстСообщения + НСтр("ru = 'Невозможно перезаполнить документы %СписокИСМПТ% так как они находятся в состояниях, недопустимых для обновления.'")
						   + Символы.ПС 
						   + НСтр("ru = 'Возможно обновление документов только в состоянии ""%Сформирован%"", ""%ОтклоненСервером%"".'");
				
			СписокИСМПТ = "";
			Для Каждого СсылкаИСМПТ Из НедопустимоеСостояние Цикл
				СписокИСМПТ = СписокИСМПТ + "- " + СсылкаИСМПТ + Символы.ПС;	
			КонецЦикла;
			
			ПодстрокаЗамены = Символы.ПС + СокрЛП(СписокИСМПТ) + Символы.ПС;
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%СписокИСМПТ%", 	   ПодстрокаЗамены);
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Сформирован%", 	   Перечисления.СостоянияДокументовИСМПТК.Сформирован);
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОтклоненСервером%", Перечисления.СостоянияДокументовИСМПТК.ОтклоненСервером);
			
		КонецЕсли;
		
		ТекстСообщения = СокрЛП(ТекстСообщения) + Символы.ПС + Символы.ПС;
		
		// Сформировать текст по документам, которые можно перезаполнить.
		Если СоответствиеДляОбновленияАктуальныхОснований.Количество() <> 0 Тогда
			
			ТекстСообщения = ТекстСообщения + НСтр("ru = 'Перезаполнение по данным документа-основания возможно только для документа %СписокИСМПТ%.'");
				
			СписокИСМПТ = "";
			Для Каждого ЭлементСоответствия Из СоответствиеДляОбновленияАктуальныхОснований Цикл
				СписокИСМПТ = СписокИСМПТ + "- " + ЭлементСоответствия.Ключ + Символы.ПС;	
			КонецЦикла;
			
			ПодстрокаЗамены = Символы.ПС + СокрЛП(СписокИСМПТ) + Символы.ПС;
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%СписокИСМПТ%", ПодстрокаЗамены);
			
		КонецЕсли;
		
		Сообщить(СокрЛП(ТекстСообщения));
		
	КонецЕсли;
	
	Возврат СоответствиеДляОбновленияАктуальныхОснований;
	
КонецФункции

Функция НайтиАктуальныеОснованияПоДокументамИСМПТ(Знач МассивИС) Экспорт
	
	Возврат РаботаСДокументамиИСМПТК.НайтиАктуальныеОснованияПоДокументамИСМПТ(МассивИС);
	
КонецФункции

Функция СоздатьСписокПервичныхДокументов(ПараметрыСоздания) Экспорт
	
	Возврат РаботаСДокументамиИСМПТК.СоздатьСписокПервичныхДокументов(ПараметрыСоздания);
	
КонецФункции

Процедура ПроверитьИсходящиеДокументыИСМПТ(Знач МассивИсходящихДокументов) Экспорт
	
	РаботаСДокументамиИСМПТК.ПроверитьИсходящиеДокументыИСМПТОбработка(МассивИсходящихДокументов);
	
КонецПроцедуры

Функция ПроверитьСтатусУведомления(УОР) Экспорт
	
	Возврат ИнтеграцияИСМПТК.ПроверитьСтатусУведомления(УОР);
	
КонецФункции

Функция ПолучитьСписокЗависшихЗаказовСУЗ(Организация = "") Экспорт
	
	Возврат ИнтеграцияИСМПТК.ПолучитьСписокЗависшихЗаказовСУЗ(Организация);
	
КонецФункции

Функция ПроверитьВидВвозаИзОснованияПТУ(ПТУ) Экспорт
	
	Возврат РаботаСДокументамиИСМПТКПереопределяемый.ПроверитьВидВвозаИзОснованияПТУ(ПТУ);
	
КонецФункции

Функция ПолучитьДопСведенияДокументаОснованияВводВыводИзОборота(ДокументОснование) Экспорт
	
	Реквизиты = Новый Структура();
	Реквизиты.Вставить("ДокументОснованиеНаименование", Строка(ТипЗнч(ДокументОснование)));
	Реквизиты.Вставить("ДокументОснованиеДата",  		ДокументОснование.Дата);
	Реквизиты.Вставить("ДокументОснованиеНомер", 		ДокументОснование.Номер);
	
	Возврат Реквизиты;
	
КонецФункции

#Область РазбитьДокументНаЧасти

Функция РазбитьДокументыЗаказКМ(ПараметрыСоздания) Экспорт
	
	Возврат РаботаСДокументамиИСМПТК.РазбитьЗаказКМ(ПараметрыСоздания);
	
КонецФункции

Функция РазбитьДокументыИСМПТ(ПараметрыСоздания, ИмяДокумента) Экспорт
	
	Возврат РаботаСДокументамиИСМПТК.РазбитьДокументИСМПТ(ПараметрыСоздания, ИмяДокумента);
	
КонецФункции

Функция ВыполнитьПроверкуДанныхЗаказаПередРазбитием(ДокументЗаказ) Экспорт
	
	ПустаяСсылкаНоменклатура = ОбщегоНазначенияИСМПТКПереопределяемый.ПолучитьПустуюСсылкуНоменклатура();
	НайденныеСтрокиСПустойНоменклатурой = ДокументЗаказ.Товары.НайтиСтроки(Новый Структура("Номенклатура", ПустаяСсылкаНоменклатура));
	
	Возврат НайденныеСтрокиСПустойНоменклатурой.Количество() = 0;	
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область РаботаСДокументамиВСистеме

Функция НовоеСоответствиеДляОбновленияАктуальныхОснованийИСЦЭДМ(Знач МассивИС) Экспорт
	
	// Соответствие документов ИСМПТ и актуальных оснований, по которым можно выполнить перезаполнение
	СоответствиеДляОбновленияАктуальныхОснований = Новый Соответствие;
	
	// Массив документов ИСМПТ, у которых нет актуальных оснований.
	ОтсутствуетАктуальноеОснование = Новый Массив;
	
	// Массив ИСМПТ, которые имеют актуальные основания в недопустимом состоянии. 
	НедопустимоеСостояние = Новый Массив;
	
	// Найти актуальные основания для документов ИСМПТ.
	СоответствиеАктуальныхОснований = НайтиАктуальныеОснованияПоДокументамИСМПТ(МассивИС);
	
	// Заполнить коллекции СоответствиеАктуальныхОснований, ОтсутствуетАктуальноеОснование, НедопустимоеСостояниеОснования.
	Для Каждого ЭлементСоответствия Из СоответствиеАктуальныхОснований Цикл
		
		СсылкаДокументИСЦЭДМ = ЭлементСоответствия.Ключ;
		ДанныеОснования 	 = ЭлементСоответствия.Значение;
		
		Если ДанныеОснования = Неопределено 
			Или Не ЗначениеЗаполнено(ДанныеОснования) Тогда
			ОтсутствуетАктуальноеОснование.Добавить(СсылкаДокументИСЦЭДМ);
		
		ИначеЕсли Не СсылкаДокументИСЦЭДМ.Статус = ПредопределенноеЗначение("Перечисление.СтатусыДокументовИСЦЭДМ.НеОпределен") Тогда
			//Можно перезаполнять только документ, еще не отправленный на сервер ИС ЦЭДМ
			
			НедопустимоеСостояние.Добавить(СсылкаДокументИСЦЭДМ);
		Иначе
			СоответствиеДляОбновленияАктуальныхОснований.Вставить(СсылкаДокументИСЦЭДМ, ДанныеОснования);
		КонецЕсли;
		
	КонецЦикла;
	
	// Сформировать и показать текст сообщения, если нельзя обновить все документы.
	Если СоответствиеДляОбновленияАктуальныхОснований.Количество() <> МассивИС.Количество() Тогда
		
		ТекстСообщения = "";
		
		// Сформировать текст по документам, у которых нет актуальных оснований.
		Если ОтсутствуетАктуальноеОснование.Количество() <> 0 Тогда
			
			ТекстСообщения = ТекстСообщения + НСтр("ru = 'Невозможно перезаполнить документы %СписокИС% так как эти документы не отражены в учете.'");
				
			СписокИС = "";
			Для Каждого СсылкаИС Из ОтсутствуетАктуальноеОснование Цикл
				СписокИС = СписокИС + "- " + СсылкаИС + Символы.ПС;	
			КонецЦикла;
			
			ПодстрокаЗамены = Символы.ПС + СокрЛП(СписокИС) + Символы.ПС;
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%СписокИС%", ПодстрокаЗамены);
				
		КонецЕсли;
		
		ТекстСообщения = СокрЛП(ТекстСообщения) + Символы.ПС + Символы.ПС;
		
		// Сформировать текст по документам, у которых есть актуальные основания с недопустимым состоянием.
		Если НедопустимоеСостояние.Количество() <> 0 Тогда
			
			ТекстСообщения = ТекстСообщения + НСтр("ru = 'Невозможно перезаполнить документы: %СписокИС% так как они находятся в статусах, недопустимых для обновления.'")
						   + Символы.ПС
						   + НСтр("ru = 'Возможно перезаполнение документов только в статусе ""%Сформирован%"".'");
				
			СписокИС = "";
			Для Каждого СсылкаИС Из НедопустимоеСостояние Цикл
				СписокИС = СписокИС + "- " + СсылкаИС + Символы.ПС;	
			КонецЦикла;
			
			ПодстрокаЗамены = Символы.ПС + СокрЛП(СписокИС) + Символы.ПС; 
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%СписокИС%", 	  ПодстрокаЗамены);
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Сформирован%", Перечисления.СтатусыДокументовИСЦЭДМ.НеОпределен);
			
		КонецЕсли;
		
		ТекстСообщения = СокрЛП(ТекстСообщения) + Символы.ПС + Символы.ПС;
		
		// Сформировать текст по документам, которые можно перезаполнить.
		Если СоответствиеДляОбновленияАктуальныхОснований.Количество() <> 0 Тогда
			
			ТекстСообщения = ТекстСообщения + НСтр("ru = 'Перезаполнение по данным документа-основания возможно только для документа %СписокИС%.'");
				
			СписокИС = "";
			Для Каждого ЭлементСоответствия Из СоответствиеДляОбновленияАктуальныхОснований Цикл
				СписокИС = СписокИС + "- " + ЭлементСоответствия.Ключ + Символы.ПС;	
			КонецЦикла;
			
			ПодстрокаЗамены = Символы.ПС + СокрЛП(СписокИС);
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%СписокИС%", ПодстрокаЗамены);
			
		КонецЕсли;
		
		Сообщить(СокрЛП(ТекстСообщения));
		
	КонецЕсли;
	
	Возврат СоответствиеДляОбновленияАктуальныхОснований;
	
КонецФункции

Функция СоздатьСписокПервичныхДокументовИСЦЭДМ(ПараметрыСоздания) Экспорт
	
	Возврат РаботаСДокументамиИСМПТК.СоздатьСписокПервичныхДокументовИСЦЭДМ(ПараметрыСоздания);
	
КонецФункции

Процедура ПерезаполнитьАктуальныеДокументыПоОснованиюИСЦЭДМ(Знач СоответствиеДляОбновленияАктуальныхОснований, ИсключаемыеРеквизиты = Неопределено, ИсключаемыеТабличныеЧасти = Неопределено) Экспорт
	
	НачатьТранзакцию();
	
	Попытка
		
		Для Каждого ЭлементСоответствия Из СоответствиеДляОбновленияАктуальныхОснований Цикл
			
			СсылкаДокументИСЦЭДМ = ЭлементСоответствия.Ключ.ПолучитьОбъект();
			Основание = ЭлементСоответствия.Значение;
			ОбщегоНазначенияИСМПТК.ОчиститьОбъект(СсылкаДокументИСЦЭДМ, ИсключаемыеРеквизиты, ИсключаемыеТабличныеЧасти);
			РаботаСДокументамиИСМПТК.ПерезаполнитьДокументПоОснованиюИСЦЭДМ(Основание, СсылкаДокументИСЦЭДМ);
			Если ТипЗнч(СсылкаДокументИСЦЭДМ.Ссылка) = Тип("ДокументСсылка.УведомлениеОВвозеИзЕАЭСИСЦЭДМ") Тогда
				ПерезаполнятьИИНБИНПоставщика = Ложь;
				НалоговыйНомер = Неопределено;
				ОбщегоНазначенияИСМПТКПереопределяемый.ПолучитьДанныеКонтрагентаИзЕАЭС(ПерезаполнятьИИНБИНПоставщика, НалоговыйНомер, СсылкаДокументИСЦЭДМ.Поставщик);
				Если ПерезаполнятьИИНБИНПоставщика Тогда
					СсылкаДокументИСЦЭДМ.ПоставщикИдентификационныйНомер = НалоговыйНомер;
				КонецЕсли;
			КонецЕсли;
			СсылкаДокументИСЦЭДМ.Записать();
					
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию(); 
		ТекстСообщения = НСтр("ru = 'При попытке перезаполнения документа ИС ЦЭДМ данными документа-основания произошла ошибка:'")
					   + Символы.ПС + "%1." + Символы.ПС
					   + РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияПодробностиВЖурналеРегистрации();
		ТекстСообщения = ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(ТекстСообщения, ОписаниеОшибки());
		ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
					
		ТекстОшибки = НСтр("ru = 'При попытке перезаполнения документа ИС ЦЭДМ данными документа-основания произошла ошибка:'")
					+ Символы.ПС
					+ ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()) + ".";
		ИмяСобытия  = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияОшибкаВФункцииСПараметром();
		ИмяСобытия  = СтрЗаменить(ИмяСобытия, "%ИмяФункции%", "РаботаСДокументамиИСМПТКВызовСервера.ПерезаполнитьАктуальныеДокументыПоОснованиюИСЦЭДМ");
		ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка,,,ТекстОшибки);
			
	ВызватьИсключение ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		
	КонецПопытки;
	
КонецПроцедуры

Процедура ПроверкаРегистрацииКонтрагентаВИСЦЭДМ(Организация, БИНКонтрагента) Экспорт
	
	РаботаСДокументамиИСМПТК.ПроверкаРегистрацииКонтрагентаВИСЦЭДМ(Организация, БИНКонтрагента);

КонецПроцедуры

Функция ПолучитьСписокСкладовКонтрагентаЦЭДМ(Организация, БИНКонтрагента) Экспорт
	
	Возврат РаботаСДокументамиИСМПТК.ПолучитьСписокСкладовКонтрагентаЦЭДМ(Организация, БИНКонтрагента); 
	
КонецФункции

#КонецОбласти
