#Область ОписаниеПеременных

&НаКлиенте
Перем ПредыдущиеЗначения; // Используется для отслеживания изменения ключевых реквизитов.

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)

	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.ДатыЗапретаИзменения
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменения
	
	ОбщегоНазначенияРТКлиентСервер.ОбновитьСостояниеДокумента(Объект, Элементы.КартинкаСостоянияДокумента.Подсказка,
		КартинкаСостоянияДокумента, РазрешеноПроведение);
	
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Пропускаем инициализацию, чтобы гарантировать получение формы при передаче параметра "АвтоТест".
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	ОбщегоНазначенияРТ.ЗаполнитьШапкуДокумента(Объект, КартинкаСостоянияДокумента,
		Элементы.КартинкаСостоянияДокумента.Подсказка, РазрешеноПроведение);
	
	// Инициализация реквизитов формы.
	ИспользоватьПодключаемоеОборудование      = ЗначениеНастроекВызовСервера.ИспользоватьПодключаемоеОборудование();
	ВестиУчетБезналичныхДенежныхСредств       = ПолучитьФункциональнуюОпцию("ВестиУчетБезналичныхДенежныхСредств");
	ДатаНачалаУчетаБезналичныхДенежныхСредств = Константы.ДатаНачалаУчетаБезналичныхДенежныхСредств.Получить();
	
	РабочееМесто          = ПараметрыСеанса.РабочееМестоКлиента;
	ЭтоФискальнаяОперация = Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПоступлениеОплатыОтКлиента
		ИЛИ Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратОплатыКлиенту;
	
	ЧекВОчереди = ЧекНаходитсяВОчереди();
	
	ЗаполнитьСписокТелефоновКонтрагента();
	
	Если Объект.РасшифровкаПлатежа.Количество() = 1 Тогда
		СтатьяДвиженияДенежныхСредств = Объект.РасшифровкаПлатежа[0].СтатьяДвиженияДенежныхСредств;
	Иначе
		СтатьяДвиженияДенежныхСредств = ЗначениеНастроекПовтИсп.СтатьяДвиженияДенежныхСредств(Объект.ХозяйственнаяОперация);
	КонецЕсли;
	
	ДобавитьСтрокуВРасшифровкуПриНеобходимости();
	
	// Обновим Кассу ККМ при необходимости.
	Если ЭтоФискальнаяОперация И ЗначениеЗаполнено(Объект.Ссылка) И НЕ ЗначениеЗаполнено(Объект.КассаККМ) Тогда
		КассаККМНаСервере(Объект.Организация, Объект.Магазин, РабочееМесто);
	КонецЕсли;
	
	УстановитьСНОРасшифровкиНаСервере();
	
	// Установим визуальное представление.
	УправлениеЭлементамиФормы();
	УправлениеЭлементамиРасшифровкиПлатежа(ЭтотОбъект);

	ЗаполнитьСистемуНалогообложения();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	ПредыдущиеЗначения = Новый Структура(
		"Магазин,
		|Организация,
		|Контрагент");
	ЗаполнитьЗначенияСвойств(ПредыдущиеЗначения, Объект);
	
	Если ЗначениеЗаполнено(Объект.КассаККМ) И НомерДокументаКассыККМ[Объект.КассаККМ] = Неопределено Тогда
		ОбщегоНазначенияРТКлиент.ЗаполнитьНомерДокументаКассыККМ(Объект.КассаККМ);
	КонецЕсли;
	
	ПроверитьСНО();
	
	ПредставитьТелефонИEmailКлиент();
	
	УправлениеЭлементамиЗаказПокупателя();
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	// &ЗамерПроизводительности
	Замер = ОценкаПроизводительностиРТКлиент.НачатьЗамер(Ложь, 
	                                            "Документ.РегистрацияБезналичнойОплаты.ФормаДокумента.Запись",
                                                          Ложь);
	
	ПараметрыЗаписи.Вставить("Замер", Замер);
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)

	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом

	УстановитьДоступностьЭлементовИФормы();

КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	ОбщегоНазначенияРТКлиентСервер.ОбновитьСостояниеДокумента(Объект, Элементы.КартинкаСостоянияДокумента.Подсказка, КартинкаСостоянияДокумента, РазрешеноПроведение);
	
	Если ТипЗнч(Объект.ДокументОснование) = Тип("ДокументСсылка.ЗаказПокупателя") Тогда
		Оповестить("ЗаказПокупателя_Состояния", Объект.ДокументОснование);
	КонецЕсли;
	
	// &ЗамерПроизводительности
	ОценкаПроизводительностиРТКлиент.ЗакончитьЗамер(ПараметрыЗаписи.Замер);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	
	ДатаПриИзмененииНаСервере();
	ПроверитьСНО();
	
КонецПроцедуры

&НаСервере
Процедура ДатаПриИзмененииНаСервере()
	
	ЗаполнитьСистемуНалогообложения();
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентПриИзменении(Элемент)
	
	ПриИзмененииКлючевыхРеквизитов("Контрагент", Объект.Контрагент);
	
	КонтрагентПриИзмененииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура КонтрагентПриИзмененииНаСервере()
	
	ДенежныеСредстваСервер.ЗаполнитьПризнакСпособаРасчета(Объект);
	ЗаполнитьСписокТелефоновКонтрагента();
	
КонецПроцедуры

&НаКлиенте
Процедура МагазинПриИзменении(Элемент)
	
	ПриИзмененииКлючевыхРеквизитов("Магазин", Объект.Магазин);
	МагазинПриИзмененииНаСервере();
	КассаККМПриИзменении();
	
КонецПроцедуры

&НаСервере
Процедура МагазинПриИзмененииНаСервере()
	
	КассаККМНаСервере(Объект.Организация, Объект.Магазин, РабочееМесто);
	
	ЗаполнитьСистемуНалогообложения();
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	ПриИзмененииКлючевыхРеквизитов("Организация", Объект.Организация);
	ОрганизацияПриИзмененииНаСервере();
	КассаККМПриИзменении();
	
КонецПроцедуры

&НаСервере
Процедура ОрганизацияПриИзмененииНаСервере()
	
	КассаККМНаСервере(Объект.Организация, Объект.Магазин, РабочееМесто);
	
	ЗаполнитьСистемуНалогообложения();
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаСтатьяДвиженияДенежныхСредствПриИзменении(Элемент)
	Если ЗначениеЗаполнено(Объект.РасшифровкаПлатежа[0].СтатьяДвиженияДенежныхСредств) Тогда
		СтатьяДвиженияДенежныхСредств = Объект.РасшифровкаПлатежа[0].СтатьяДвиженияДенежныхСредств;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СуммаДокументаПриИзменении(Элемент)
	
	ФинансыКлиент.ПересчетСуммыВСтрокеРасшифровкиПлатежа(Объект, Объект.СуммаДокумента);
	
	СуммаУстановленаВручную = Объект.СуммаДокумента <> 0;
	
	СуммаДокументаПриИзмененииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура СуммаДокументаПриИзмененииНаСервере()
	ДенежныеСредстваСервер.ЗаполнитьПризнакСпособаРасчета(Объект);
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияНесоответствиеСНОНажатие(Элемент)
	
	ПроверитьСНО( ,Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправлятьЧекПриИзменении(Элемент)
	ОтправлятьЧекПриИзмененииКлиент();
КонецПроцедуры

&НаКлиенте
Процедура ТелефонСтрокойПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(ТелефонСтрокой) Тогда
		ТелефонСтрокой = СтрЗаменить(ТелефонСтрокой, " ", 0);
		Объект.Телефон = ПодключаемоеОборудованиеРТКлиент.ПреобразоватьТелефонИзСтрокиМаски(ТелефонСтрокой);
		Объект.АдресЭП = "";
	Иначе
		Объект.Телефон = "";
		ТелефонСтрокой = "";
		Объект.АдресЭП = "";
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура АдресЭППриИзменении(Элемент)
	
	Если НЕ ШтрихкодированиеРТКлиентСервер.ЕмаилКорректен(Объект.АдресЭП) Тогда
	
		ТекстСообщения = НСтр("ru = 'Введён некорректный E-mail'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения,,"Объект.АдресЭП");
	
	КонецЕсли;
	
	ТелефонСтрокой = "";
	Объект.Телефон = "";
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыРасшифровкаПлатежа

&НаКлиенте
Процедура РасшифровкаПлатежаДокументРасчетовСКонтрагентомПриИзменении(Элемент)
	
	СтрокаТаблицы = Объект.РасшифровкаПлатежа[0];
	
	РасшифровкаПлатежаДокументРасчетовСКонтрагентомПриИзмененииСервер(СтрокаТаблицы.ПолучитьИдентификатор());
	
КонецПроцедуры

&НаСервере
Процедура РасшифровкаПлатежаДокументРасчетовСКонтрагентомПриИзмененииСервер(ИдентификаторСтроки)
	
	ТекущаяСтрока = Объект.РасшифровкаПлатежа.НайтиПоИдентификатору(ИдентификаторСтроки);
	ДокументРасчетовСКонтрагентом = ТекущаяСтрока.ДокументРасчетовСКонтрагентом;
	
	Если ЗначениеЗаполнено(ДокументРасчетовСКонтрагентом) Тогда
		
		ДенежныеСредстваСервер.ЗаполнитьСистемуНалогообложенияЭлементаФормы(ТекущаяСтрока);
		
		Если НЕ СуммаУстановленаВручную Тогда
			ТекущаяСтрока.Сумма = ДенежныеСредстваВызовСервера.ПолучитьСуммуДокумента(ДокументРасчетовСКонтрагентом);
			Объект.СуммаДокумента = ТекущаяСтрока.Сумма;
		КонецЕсли;
	Иначе
		ТекущаяСтрока.СистемаНалогообложения = Перечисления.ТипыСистемНалогообложенияККТ.ПустаяСсылка();
	КонецЕсли;
	
	ЗаполнитьСистемуНалогообложения();
	ДенежныеСредстваСервер.ЗаполнитьПризнакСпособаРасчета(Объект);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура РазбитьПлатеж(Команда)
	
	ОткрытьФормуРасшифровкиПлатежа();
	
КонецПроцедуры

&НаКлиенте
Процедура НадписьСуммаДокументаНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОткрытьФормуРасшифровкиПлатежа();
	
КонецПроцедуры

&НаКлиенте
Процедура НапечататьЧек(Команда)
	
	Если Объект.ПробитЧек Тогда
		ТекстСообщения = НСтр("ru = 'Чек уже пробит на фискальном регистраторе.'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	Если ОтправлятьЧек = "НаЕмаил" 
		И НЕ ШтрихкодированиеРТКлиентСервер.ЕмаилКорректен(Объект.АдресЭП) Тогда
		
		ТекстСообщения = НСтр("ru = 'Введён некорректный E-mail'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения,,"Объект.АдресЭП");
		Возврат;
		
	КонецЕсли;
	
	ОповещениеЗавершенияПроверки = Новый ОписаниеОповещения("ПроверитьВозможностьПечатиЧекаЗавершение", ЭтотОбъект);
	ФинансыКлиент.ПроверитьВозможностьПечатиЧека(ОповещениеЗавершенияПроверки, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьЗаказПокупателя(Команда)
	ПоказатьЗначение(, Объект.ДокументОснование);
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьЗаказПокупателя(Команда)
	
	Если НЕ ПроверитьЗаполнениеКлючевыхРеквизитов() Тогда
		Возврат;
	КонецЕсли;
	
	Если Объект.РасшифровкаПлатежа.Количество() > 1 ИЛИ Объект.СуммаДокумента > 0 Тогда
		ТекстВопроса = НСтр("ru='Список ""Расшифровка платежа"" будет перезаполнен остатками по заказу. Продолжить?'");
		
		ОбработчикОповещения = Новый ОписаниеОповещения("ПоказатьВопросВыбратьЗаказПокупателяЗавершение", ЭтотОбъект);
		ПоказатьВопрос(ОбработчикОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	Иначе
		ОткрытьФормуВыбораЗаказаПокупателя();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьЗаказПокупателя(Команда)
	
	Объект.ДокументОснование = Неопределено;
	УправлениеЭлементамиЗаказПокупателя();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область УправлениеФормой

&НаСервере
Процедура УправлениеЭлементамиФормы()
	
	Если ВестиУчетБезналичныхДенежныхСредств И Объект.Дата >= ДатаНачалаУчетаБезналичныхДенежныхСредств Тогда
		Элементы.ГруппаДанныеОперацииПоБанку.Показать();
	КонецЕсли;
	
	УправлениеПользователями.УстановитьТолькоПросмотрДляРеквизитовТабличнойЧасти(Элементы.Дата.ТолькоПросмотр, 
		ПланыВидовХарактеристик.ПраваПользователей.ИзменятьДату);
	
	УстановитьСвойстваЭлементовФормыПоХозяйственнойОперации();
	УстановитьДоступностьЭлементовИФормы();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьДоступностьЭлементовИФормы()
	
	ТолькоПросмотр = ТолькоПросмотр ИЛИ Объект.ПробитЧек;
	
	УправлениеЭлементамиФискализации();
	
КонецПроцедуры

&НаСервере
Процедура УправлениеЭлементамиФискализации()
	
	Если ЗначениеЗаполнено(Объект.КассаККМ) Тогда
		ПодключаемоеОборудование = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.КассаККМ, "ПодключаемоеОборудование");
		ВозможностьЭлектронногоПлатежа = ПодключаемоеОборудованиеРТ.ВозможностьЭлектронногоПлатежа(ПодключаемоеОборудование);
	Иначе
		ВозможностьЭлектронногоПлатежа = Ложь;
	КонецЕсли;
	
	Элементы.ГруппаЧекККМ.Видимость       = ЭтоФискальнаяОперация;
	Элементы.ГруппаОтправкаЧека.Видимость = ВозможностьЭлектронногоПлатежа;
	Элементы.ОтправлятьЧек.ТолькоПросмотр = ТолькоПросмотр;
	
	Элементы.НапечататьЧек.Доступность = Не Объект.ПробитЧек И Не ЧекВОчереди;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы, "ОбщаяКомандаФискальныеОперации", "Видимость", Объект.ПробитЧек);
		
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы, "ОчередьЧеков", "Видимость", Не Объект.ПробитЧек И ЧекВОчереди);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеЭлементамиРасшифровкиПлатежа(Форма)
	
	Объект   = Форма.Объект;
	Элементы = Форма.Элементы;
	
	ОднострочныйРежим = Объект.РасшифровкаПлатежа.Количество() <= 1;
	
	Если НЕ ОднострочныйРежим Тогда
		ПараметрыПредметаИсчисления = НСтр("ru = 'строка, строки, строк'");
		Форма.НадписьСуммаДокумента = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = '%1 %2 (%3)'"),
			Формат(Объект.СуммаДокумента, "ЧЦ=15; ЧДЦ=2; ЧН="),
			ОбщегоНазначенияРТКлиентСервер.Валюта(),
			СтроковыеФункцииКлиентСервер.ЧислоЦифрамиПредметИсчисленияПрописью(Объект.РасшифровкаПлатежа.Количество(), ПараметрыПредметаИсчисления));
	КонецЕсли;
	
	Элементы.ГруппаОдинПлатеж.Видимость        = ОднострочныйРежим;
	Элементы.ГруппаНесколькоПлатежей.Видимость = НЕ ОднострочныйРежим;
	
	Элементы.РасшифровкаПлатежаПризнакСпособаРасчета.Видимость = ОднострочныйРежим И Форма.ЭтоФискальнаяОперация;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьСвойстваЭлементовФормыПоХозяйственнойОперации()
	
	Если Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПрочиеРасходы
		ИЛИ Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПрочиеДоходы Тогда
		Элементы.Контрагент.АвтоОтметкаНезаполненного = Ложь;
		Элементы.Магазин.АвтоОтметкаНезаполненного    = Ложь;
	КонецЕсли;
	
	Элементы.РасшифровкаПлатежаПризнакСпособаРасчета.ТолькоПросмотр = НЕ Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратОплатыКлиенту;
	
	Элементы.ДокументОснование.Видимость = Элементы.ДокументОснование.Видимость И ЗначениеЗаполнено(Объект.ДокументОснование);
	
	УстановитьОграничениеТипаПоХозяйственнойОперации();
	УстановитьПараметрыВыбораКонтрагента();
	УстановитьВидимостьЭлементамПоХозяйственнойОперации();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьОграничениеТипаПоХозяйственнойОперации()
	
	// Ограничим тип документа расчетов в зависимости от хоз. операции.
	ДоступныеТипы = ДенежныеСредстваКлиентСервер.ДоступныеТипыДокументовРасчета(Объект.ХозяйственнаяОперация, ТипЗнч(Объект.Ссылка));
	Если ДоступныеТипы.Количество() > 0 Тогда
		Элементы.РасшифровкаПлатежаДокументРасчетовСКонтрагентом.ВыбиратьТип = ДоступныеТипы.Количество() > 1;
		Элементы.РасшифровкаПлатежаДокументРасчетовСКонтрагентом.ОграничениеТипа = Новый ОписаниеТипов(ДоступныеТипы);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьПараметрыВыбораКонтрагента()
	
	ПараметрВыбораКонтрагента = Неопределено;
	
	Если Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ОплатаПоставщику 
			ИЛИ Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратДенежныхСредствОтПоставщика Тогда
		ПараметрВыбораКонтрагента = Новый ПараметрВыбора("Отбор.Поставщик", Истина);
	ИначеЕсли Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПоступлениеОплатыОтКлиента
			ИЛИ Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратОплатыКлиенту Тогда
		ПараметрВыбораКонтрагента = Новый ПараметрВыбора("Отбор.Покупатель", Истина);
	КонецЕсли;
	
	Если ПараметрВыбораКонтрагента <> Неопределено Тогда 
		МассивПараметров = Новый Массив();
		МассивПараметров.Добавить(ПараметрВыбораКонтрагента);
		ПараметрыВыбораМассив = Новый ФиксированныйМассив(МассивПараметров);
		Элементы.Контрагент.ПараметрыВыбора = ПараметрыВыбораМассив;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьЭлементамПоХозяйственнойОперации()

	Перем МассивВсехРеквизитов;
	Перем МассивРеквизитовОперации;
	
	Документы.РегистрацияБезналичнойОплаты.ЗаполнитьИменаРеквизитовПоХозяйственнойОперации(
		Объект.ХозяйственнаяОперация,
		МассивВсехРеквизитов,
		МассивРеквизитовОперации);

	ОбщегоНазначенияРТ.УстановитьВидимостьЭлементовПоМассиву(
		Элементы,
		МассивВсехРеквизитов,
		МассивРеквизитовОперации);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиОповещений

&НаКлиенте
Процедура ПробитьЧекЗавершение(РезультатВыполнения, ПараметрыОперации) Экспорт
	
	ЭтаФорма.Доступность = Истина;
	
	Если РезультатВыполнения = КодВозвратаДиалога.Отмена ИЛИ РезультатВыполнения = Неопределено Тогда
		// Отмена в форме печати чека
	ИначеЕсли РезультатВыполнения.Свойство("Результат") И РезультатВыполнения.Результат Тогда
		
		// Установить полученное значение номера чека реквизиту документа.
		Если ЗначениеЗаполнено(РезультатВыполнения.ВыходныеПараметры[1]) Тогда
			Объект.НомерЧекаККМ = РезультатВыполнения.ВыходныеПараметры[1];
		Иначе
			Объект.НомерЧекаККМ = НомерДокументаКассыККМ[Объект.КассаККМ];
		КонецЕсли; 
		Объект.ПробитЧек    = Истина;
		Модифицированность  = Ложь;
		
		РезультатЗаписи = Записать(Новый Структура("РежимЗаписи", РежимЗаписиДокумента.Проведение));
		Если РезультатЗаписи = Истина Тогда
			НомерДокументаКассыККМ[Объект.КассаККМ] = Объект.НомерЧекаККМ +	1;
			ПорядковыйНомерПродажи = ПорядковыйНомерПродажи + 1;
		КонецЕсли;
		
	Иначе
		ТекстСообщения = НСтр("ru = 'При печати чека произошла ошибка.
									|Чек не напечатан на фискальном устройстве.
									|Дополнительное описание: %ДополнительноеОписание%'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ДополнительноеОписание%", РезультатВыполнения.ОписаниеОшибки);
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
    
    // &ЗамерПроизводительности 
    ОценкаПроизводительностиРТКлиент.ЗакончитьЗамер(ПараметрыОперации.Замер);

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункцииБСП

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат) Экспорт
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти

#Область РаботаСЧекомККМ

&НаКлиенте
Процедура ПроверитьВозможностьПечатиЧекаЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат Тогда
		НапечататьЧекКлиент();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НапечататьЧекКлиент()
	
	Перем Отказ, ПараметрыКассыККМ; 
		
	ПодготовитьИПроверитьПечатьЧека(Отказ, ПараметрыКассыККМ);
	
	Если Отказ Тогда
		Возврат
	КонецЕсли;
	
	Если НЕ ИспользоватьПодключаемоеОборудование ИЛИ ПараметрыКассыККМ.ИспользоватьБезПодключенияОборудования Тогда
		
		Если НомерДокументаКассыККМ[Объект.КассаККМ] <> Неопределено Тогда
			Объект.НомерЧекаККМ  = НомерДокументаКассыККМ[Объект.КассаККМ];
		Иначе
			Объект.НомерЧекаККМ  = ПорядковыйНомерПродажи;
		КонецЕсли; 
		Объект.ПробитЧек     = Истина;
		Модифицированность = Ложь;
		
		РезультатЗаписи = Записать(Новый Структура("РежимЗаписи", РежимЗаписиДокумента.Запись));
		
		Если РезультатЗаписи = Истина Тогда
			НомерДокументаКассыККМ[Объект.КассаККМ] = Объект.НомерЧекаККМ + 1;
			ПорядковыйНомерПродажи = ПорядковыйНомерПродажи + 1;
		КонецЕсли;
		
	Иначе
		НомерЧека = НомерДокументаКассыККМ[Объект.КассаККМ] + 1;
		ПробитьЧек(ПараметрыКассыККМ, НомерЧека);
	КонецЕсли;
	
	Элементы.НаименованиеВалютыУчета.Заголовок = ОбщегоНазначенияРТКлиентСервер.Валюта();
	
	Если ТипЗнч(Объект.ДокументОснование) = Тип("ДокументСсылка.ЗаказПокупателя") Тогда
		ОбменССайтомРТВызовСервера.ЗаписатьСостояниеОплатыЗаказаПокупателя(Объект.ДокументОснование, Объект.Ссылка);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПробитьЧек(ПараметрыКассыККМ, НомерЧека)

	// &ЗамерПроизводительности 
    Замер = ОценкаПроизводительностиРТКлиент.НачатьЗамер(Ложь, 
                                                    "Документ.РегистрацияБезналичнойОплаты.Форма.ФормаДокумента.Команда.ПробитьЧек",
                                                               Ложь);

	ЭтаФорма.Доступность = Ложь;
	
	// Готовим данные
	ОбщиеПараметры  = ВходящиеДанныеДляФРСервер(ПараметрыКассыККМ.РаспределениеВыручкиПоСекциям, НомерЧека);
    
    ДополнительныеПараметры = Новый Структура;
    ДополнительныеПараметры.Вставить("Замер", Замер);
    
    Оповещение = Новый ОписаниеОповещения("ПробитьЧекЗавершение", ЭтотОбъект, ДополнительныеПараметры);
    
	ПодключенноеОборудование = Новый Структура("Терминал, ФискальныеУстройства");
	ПодключенноеОборудование.ФискальныеУстройства = Новый Массив; 
	ПодключенноеОборудование.ФискальныеУстройства.Добавить(ПараметрыКассыККМ.ИдентификаторУстройства);
	
	ПараметрыОперации = Новый Структура;
	ПараметрыОперации.Вставить("ДокументСсылка", Объект.Ссылка);
	ПараметрыОперации.Вставить("Организация", Объект.Организация);
	ПараметрыОперации.Вставить("Партнер", Объект.Контрагент);
	ПараметрыОперации.Вставить("ПодключенноеОборудование", ПодключенноеОборудование);
	ПараметрыОперации.Вставить("ТорговыйОбъект", Неопределено);
	
	ОткрытьФорму(
		"Обработка.ПечатьЧека.Форма",
		ПараметрыОперации,
		ЭтотОбъект,,,,
		Оповещение);
	
КонецПроцедуры

&НаСервере
Процедура ПодготовитьИПроверитьПечатьЧека(Отказ, ПараметрыКассыККМ)
	
	Отказ = Ложь;
	
	Если ЗначениеЗаполнено(Объект.КассаККМ)  Тогда
		ПараметрыКассыККМ = ЗначениеНастроекВызовСервера.ПараметрыКассыККМ(Объект.КассаККМ);
		ПараметрыКассыККМ.Вставить("УстройствоПодключено", Ложь);
		ПараметрыКассыККМ.ИспользоватьБезПодключенияОборудования = ПараметрыКассыККМ.ИспользоватьБезПодключенияОборудования
																	ИЛИ НЕ ИспользоватьПодключаемоеОборудование;
		
		СтруктураСостояниеКассовойСмены = РозничныеПродажиСервер.ПолучитьСостояниеКассовойСмены(Объект.КассаККМ);
		
		КассоваяСмена = СтруктураСостояниеКассовойСмены.КассоваяСмена;
		ТекстОшибки = НСтр("ru='Кассовая смена не открыта.'");
		Если НЕ РозничныеПродажиСервер.СменаОткрыта(КассоваяСмена, Объект.Дата, ТекстОшибки) Тогда
			ОбщегоНазначения.СообщитьПользователю(ТекстОшибки, , "Объект.КассаККМ", , Отказ);
		КонецЕсли;
	Иначе
		ТекстОшибки = НСтр("ru='Не выбрана касса ККМ.'");
		ОбщегоНазначения.СообщитьПользователю(ТекстОшибки, , "Объект.КассаККМ", , Отказ);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ВходящиеДанныеДляФРСервер(РаспределениеВыручкиПоСекциям, НомерЧека)
	
	Возврат Документы.РегистрацияБезналичнойОплаты.ПодготовитьДанныеДляПробитияЧека(Объект.Ссылка, РаспределениеВыручкиПоСекциям, НомерЧека);
	
КонецФункции

&НаСервере
Процедура ЗаполнитьСписокТелефоновКонтрагента()
	
	Элементы.ТелефонСтрокой.КнопкаВыпадающегоСписка = Ложь;
	Элементы.ТелефонСтрокой.СписокВыбора.Очистить();
	
	Если НЕ ЗначениеЗаполнено(Объект.Контрагент) Тогда
		Возврат;
	КонецЕсли;
	
	СписокТелефонов = ПодключаемоеОборудованиеРТ.ТелефоныОбъектаДляЧека(Объект.Контрагент);
	
	Если СписокТелефонов.Количество() > 0 Тогда
		
		Элементы.ТелефонСтрокой.КнопкаВыпадающегоСписка = Истина;
		Элементы.ТелефонСтрокой.ОтображениеКнопкиВыбора = ОтображениеКнопкиВыбора.ОтображатьВВыпадающемСписке;
		
		Для каждого НомерТелефона Из СписокТелефонов Цикл
			Элементы.ТелефонСтрокой.СписокВыбора.Добавить(НомерТелефона.Значение, НомерТелефона.Представление);
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПредставитьТелефонИEmailКлиент()
	
	Если ЗначениеЗаполнено(Объект.Телефон) Тогда
		Если ЗначениеЗаполнено(Объект.Телефон) Тогда
			СохраненныйТелефон = Число(Объект.Телефон);
		Иначе
			СохраненныйТелефон = 0;
		КонецЕсли;
		Телефон = 0;
		ПодключаемоеОборудованиеРТКлиент.ПреобразоватьТелефонКПользовательскомуВиду(СохраненныйТелефон, Телефон, ТелефонСтрокой);
		ДанныеSMSИлиEmail = ТелефонСтрокой;
		ОтправлятьЧек = "НаТелефон";
	ИначеЕсли ЗначениеЗаполнено(Объект.АдресЭП) Тогда
		ДанныеSMSИлиEmail = Объект.АдресЭП;
		ОтправлятьЧек = "НаЕмаил";
	Иначе
		ОтправлятьЧек = "НеОтправлять";
	КонецЕсли;
	
	ОтправлятьЧекПриИзмененииКлиент();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправлятьЧекПриИзмененииКлиент()
	
	Элементы.АдресЭП.Видимость 			= ОтправлятьЧек = "НаЕмаил";
	Элементы.ТелефонСтрокой.Видимость 	= ОтправлятьЧек = "НаТелефон";
	
КонецПроцедуры

&НаКлиенте
Процедура ОчередьЧеков(Команда)
	
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("ДокументОснование", Объект.Ссылка);
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("Отбор", СтруктураОтбора);
	ОткрытьФорму("РегистрСведений.ОчередьЧековККТ.ФормаСписка", СтруктураПараметров, ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Функция ЧекНаходитсяВОчереди()
	
	УстановитьПривилегированныйРежим(Истина);
	
	Результат = Ложь;
	Если Параметры.Ключ.Пустая() Тогда
		Возврат Результат;
	КонецЕсли;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ОчередьЧековККТ.ДокументОснование КАК ДокументОснование
	|ИЗ
	|	РегистрСведений.ОчередьЧековККТ КАК ОчередьЧековККТ
	|ГДЕ
	|	ОчередьЧековККТ.ДокументОснование = &Ссылка";
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
	Результат = Не Запрос.Выполнить().Пустой();
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область ЗаказПокупателя

&НаКлиенте
Процедура ПоказатьВопросВыбратьЗаказПокупателяЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		ОткрытьФормуВыбораЗаказаПокупателя();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуВыбораЗаказаПокупателя()
	
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("Организация", Объект.Организация);
	ПараметрыОтбора.Вставить("Контрагент",  Объект.Контрагент);
	ПараметрыОтбора.Вставить("Магазин",     Объект.Магазин);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Отбор", ПараметрыОтбора);
	
	ОткрытьФорму("Документ.ЗаказПокупателя.ФормаВыбора",
		ПараметрыФормы,
		ЭтотОбъект,,,,
		Новый ОписаниеОповещения("ВыборЗаказаПокупателяЗавершение", ЭтотОбъект),
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыборЗаказаПокупателяЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Объект.ДокументОснование = Результат;
	УправлениеЭлементамиЗаказПокупателя();
	ЗаполнитьПоЗаказуПокупателя();
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьВопросЗаполнитьПоЗаказуЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		ЗаполнитьПоЗаказуПокупателя();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоЗаказуПокупателя()
	
	ЗаполнитьПоЗаказуПокупателяНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоЗаказуПокупателяНаСервере()
	
	ДанныеЗаполненияПрочие = Новый Структура;
	Если ЗначениеЗаполнено(СтатьяДвиженияДенежныхСредств) Тогда
		ДанныеЗаполненияПрочие.Вставить("СтатьяДвиженияДенежныхСредств", СтатьяДвиженияДенежныхСредств);
	КонецЕсли;
	
	ФинансыСервер.ЗаполнениеРасшифровкиПлатежаПоЗаказуПокупателя(Объект, Объект.ДокументОснование, ДанныеЗаполненияПрочие);
	
	УстановитьСНОРасшифровкиНаСервере();
	ЗаполнитьСистемуНалогообложения();
	ДенежныеСредстваСервер.ЗаполнитьПризнакСпособаРасчета(Объект);
	
	УправлениеЭлементамиРасшифровкиПлатежа(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура УправлениеЭлементамиЗаказПокупателя()
	
	Если НЕ Объект.ХозяйственнаяОперация = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ПоступлениеОплатыОтКлиента") Тогда
		Возврат;
	КонецЕсли;
	
	ПродажаПоЗаказу = ЗначениеЗаполнено(Объект.ДокументОснование) И ТипЗнч(Объект.ДокументОснование) = Тип("ДокументСсылка.ЗаказПокупателя");
	
	Элементы.ОткрытьЗаказПокупателя.Заголовок = Строка(Объект.ДокументОснование);
	
	// Установим параметры выбора документа расчетов.
	ПараметрыВыбораДокументРасчетов = Новый Массив;
	Если ПродажаПоЗаказу Тогда
		ПараметрыВыбораДокументРасчетов.Добавить(Новый ПараметрВыбора("Отбор.ЗаказПокупателя", Объект.ДокументОснование));
	КонецЕсли;
	Элементы.РасшифровкаПлатежаДокументРасчетовСКонтрагентом.ПараметрыВыбора = Новый ФиксированныйМассив(ПараметрыВыбораДокументРасчетов);
	
	// Установим видимость.
	Элементы.ВыбратьЗаказПокупателя.Видимость  = НЕ ПродажаПоЗаказу;
	Элементы.ОткрытьЗаказПокупателя.Видимость  = ПродажаПоЗаказу;
	Элементы.ОчиститьЗаказПокупателя.Видимость = ПродажаПоЗаказу;
	
КонецПроцедуры

#КонецОбласти

&НаСервере
Функция ПоместитьВХранилищеРасшифровкуПлатежа()

	РасшифровкаПлатежа = Объект.РасшифровкаПлатежа.Выгрузить();
	
	Адрес = ПоместитьВоВременноеХранилище(РасшифровкаПлатежа, УникальныйИдентификатор);
	
	Возврат Адрес;

КонецФункции

&НаКлиенте
Процедура КассаККМПриИзменении()
	
	Если ЗначениеЗаполнено(Объект.КассаККМ) И НомерДокументаКассыККМ[Объект.КассаККМ] = Неопределено Тогда
		ОбщегоНазначенияРТКлиент.ЗаполнитьНомерДокументаКассыККМ(Объект.КассаККМ);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСистемуНалогообложения()
	
	Если ЭтоФискальнаяОперация Тогда
		
		ДенежныеСредстваСервер.ЗаполнитьСистемуНалогообложения(Объект);
		
	Иначе
		
		Объект.СистемаНалогообложения = Перечисления.ТипыСистемНалогообложенияККТ.ПустаяСсылка();
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьСНОРасшифровкиНаСервере()
	
	Если Объект.РасшифровкаПлатежа.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДенежныеСредстваСервер.ЗаполнитьСистемуНалогообложенияЭлементаФормы(Объект.РасшифровкаПлатежа);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьСНО(ТекущаяСтрока = Неопределено, ВыводитьСообщения = Ложь)
	
	ЕстьНесоответствие = Ложь;
	
	Если ЭтоФискальнаяОперация Тогда
		
		ШаблонСообщений = НСтр("ru='В строке №%1 в документе расчетов с контрагентом система налогообложения отличается от системы налогообложения документа.'");
		
		Для каждого СтрокаРасшифровки Из Объект.РасшифровкаПлатежа Цикл
			
			Если ЗначениеЗаполнено(СтрокаРасшифровки.СистемаНалогообложения)
				И Объект.СистемаНалогообложения <> СтрокаРасшифровки.СистемаНалогообложения Тогда
				
				ЕстьНесоответствие = Истина;
				
				Если ВыводитьСообщения
					И (ТекущаяСтрока = Неопределено ИЛИ ТекущаяСтрока = СтрокаРасшифровки) Тогда
					
					ОбщегоНазначенияКлиент.СообщитьПользователю(
						СтрШаблон(ШаблонСообщений, СтрокаРасшифровки.НомерСтроки),
						,
						СтрШаблон("Объект.РасшифровкаПлатежа[%1].СистемаНалогообложения", СтрокаРасшифровки.НомерСтроки-1));
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Элементы.ДекорацияНесоответствиеСНО.Видимость = ЕстьНесоответствие;
	
КонецПроцедуры

&НаСервере
Процедура КассаККМНаСервере(Организация, Магазин, РабочееМесто)
	
	Объект.КассаККМ = ДенежныеСредстваСервер.КассаККМ(Организация, Магазин, РабочееМесто);
	УправлениеЭлементамиФискализации();
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьСтрокуВРасшифровкуПриНеобходимости()
	
	Если Объект.РасшифровкаПлатежа.Количество() > 0 Тогда
		Возврат;
	КонецЕсли;
		
	НоваяСтрока = Объект.РасшифровкаПлатежа.Добавить();
	НоваяСтрока.СтатьяДвиженияДенежныхСредств = СтатьяДвиженияДенежныхСредств;
	
	ДенежныеСредстваСервер.ЗаполнитьПризнакСпособаРасчета(Объект, НоваяСтрока);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуРасшифровкиПлатежа()
	
	// Проверим, чтобы ключевые поля документы были заполнены, чтобы в дополнительной форме отборы работали корректно.
	Если НЕ ПроверитьЗаполнениеКлючевыхРеквизитов() Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура("Ссылка, Дата, ХозяйственнаяОперация, Магазин, Организация, Контрагент,
		| СистемаНалогообложения, КассаККМ, ЗаказПокупателя");
	ЗаполнитьЗначенияСвойств(ПараметрыФормы, Объект);
	
	ПараметрыФормы.Вставить("СтатьяДвиженияДенежныхСредств", СтатьяДвиженияДенежныхСредств);
	ПараметрыФормы.Вставить("ЭтоФискальнаяОперация",         ЭтоФискальнаяОперация);
	ПараметрыФормы.Вставить("ФормаОплаты",                   ПредопределенноеЗначение("Перечисление.ФормыОплаты.Безналичная"));
	Если ЗначениеЗаполнено(Объект.ДокументОснование)
		И ТипЗнч(Объект.ДокументОснование) = Тип("ДокументСсылка.ЗаказПокупателя") Тогда
		ПараметрыФормы.Вставить("ЗаказПокупателя",               Объект.ДокументОснование);
	КонецЕсли;
	
	АдресХранилищаРасшифровкаПлатежа = ПоместитьВХранилищеРасшифровкуПлатежа();
	ПараметрыФормы.Вставить("АдресХранилищаРасшифровкаПлатежа", АдресХранилищаРасшифровкаПлатежа);
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ПараметрыФормы", ПараметрыФормы);
	СтруктураПараметров.Вставить("ТолькоПросмотр", ТолькоПросмотр);
	
	Оповещение = Новый ОписаниеОповещения("ОткрытьФормуРасшифровкиЗавершение", ЭтотОбъект);
	
	ОткрытьФорму("ОбщаяФорма.РасшифровкаПлатежа", СтруктураПараметров, ЭтотОбъект,,,,Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуРасшифровкиЗавершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Если РезультатЗакрытия = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, РезультатЗакрытия);
	ЗаполнитьЗначенияСвойств(Объект,     РезультатЗакрытия, "СистемаНалогообложения");
	
	ПолучитьРасшифровкаПлатежаИзВременногоХранилищаНаСервере(РезультатЗакрытия.АдресХранилищаРасшифровкаПлатежа);
	
	Объект.СуммаДокумента = ОбработкаТабличнойЧастиТоварыКлиентСервер.СуммаДокумента(Объект.РасшифровкаПлатежа, Истина);
	
	ПроверитьСНО();
	
	Если Объект.РасшифровкаПлатежа.Количество() > 1 Тогда
		СуммаУстановленаВручную = Ложь;
	КонецЕсли;
	
	УправлениеЭлементамиРасшифровкиПлатежа(ЭтотОбъект);
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьРасшифровкаПлатежаИзВременногоХранилищаНаСервере(АдресХранилищаРасшифровкаПлатежа)
	
	РасшифровкаПлатежа = ПолучитьИзВременногоХранилища(АдресХранилищаРасшифровкаПлатежа);
	Объект.РасшифровкаПлатежа.Загрузить(РасшифровкаПлатежа);
	
	ДобавитьСтрокуВРасшифровкуПриНеобходимости();
	
КонецПроцедуры

&НаКлиенте
Функция ПроверитьЗаполнениеКлючевыхРеквизитов()
	
	Отказ = Ложь;
	
	Если НЕ ЗначениеЗаполнено(Объект.Дата) Тогда
		ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения("Поле", "Заполнение", НСтр("ru = 'Дата'"));
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, "Дата", "Объект", Отказ);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.Организация) Тогда
		ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения("Поле", "Заполнение", НСтр("ru = 'Организация'"));
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, "Организация", "Объект", Отказ);
	КонецЕсли;
	
	Если НЕ (Объект.ХозяйственнаяОперация = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ПрочиеРасходы")
		ИЛИ Объект. ХозяйственнаяОперация = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ПрочиеДоходы")) Тогда
		
		Если НЕ ЗначениеЗаполнено(Объект.Магазин) Тогда
			ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения("Поле", "Заполнение", НСтр("ru = 'Магазин'"));
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, "Магазин", "Объект", Отказ);
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Объект.Контрагент) Тогда
			ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения("Поле", "Заполнение", НСтр("ru = 'Контрагент'"));
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, "Контрагент", "Объект", Отказ);
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат НЕ Отказ;
	
КонецФункции

&НаКлиенте
Процедура ПриИзмененииКлючевыхРеквизитов(Источник, Значение)
	
	Если ПредыдущиеЗначения[Источник] = Значение Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.ДокументОснование) И ТипЗнч(Объект.ДокументОснование) = Тип("ДокументСсылка.ЗаказПокупателя") Тогда
		Объект.ДокументОснование = Неопределено;
		УправлениеЭлементамиЗаказПокупателя();
	КонецЕсли;
	
	ПредыдущиеЗначения.Вставить(Источник, Значение);
	
КонецПроцедуры

#КонецОбласти
