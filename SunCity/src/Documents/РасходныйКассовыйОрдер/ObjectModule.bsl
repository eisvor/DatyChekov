#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОписаниеПеременных

// Тип Булево, значение Истина, если хозяйственная операция отражает расчеты с
// контрагентом.
Перем ЕстьРасчетыСКонтрагентами Экспорт;

#КонецОбласти

#Область ОбработчикиСобытий

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	ТипОснования = ТипЗнч(ДанныеЗаполнения);
	Если ТипОснования = Тип("ДокументСсылка.ВозвратТоваровОтПокупателя")
		Или ТипОснования = Тип("ДокументСсылка.ЧекККМ") Тогда 
		ТипКонтрагента = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеЗаполнения.Контрагент, "ЮрФизЛицо");
		//Если ТипКонтрагента = Перечисления.ЮрФизЛицо.ФизЛицо Тогда
		//	ТекстОшибки = НСтр("ru='Документ ""Расходный кассовый ордер"" с типом операции ""Возврат оплаты покупателю"" 
		//		|не предназначен для работы с физическими лицами.'");
		//	ВызватьИсключение ТекстОшибки;
		//КонецЕсли;
	КонецЕсли;
	
	Если ТипОснования <> Тип("Неопределено") И Документы.ТипВсеСсылки().СодержитТип(ТипОснования) Тогда
		
		ОбщегоНазначенияРТ.ПроверитьВозможностьВводаНаОсновании(ДанныеЗаполнения);
		
		Если ТипОснования = Тип("ДокументСсылка.ВозвратТоваровОтПокупателя") Тогда
			ЗаполнитьПоВозвратуТоваровОтПокупателя(ДанныеЗаполнения, ДанныеЗаполнения);
			
		ИначеЕсли ТипОснования = Тип("ДокументСсылка.ПоступлениеТоваров") Тогда
			
			ЗаполнитьПоЗаказПоставщику(ДанныеЗаполнения, ДанныеЗаполнения);
			
		ИначеЕсли ТипОснования = Тип("ДокументСсылка.ПриходныйКассовыйОрдер") Тогда
			
			ЗаполнитьПоПриходномуКассовомуОрдеру(ДанныеЗаполнения, ДанныеЗаполнения);
			
		ИначеЕсли ТипОснования = Тип("ДокументСсылка.ЧекККМ") Тогда
			
			ЗаполнитьПоЧекуКММ(ДанныеЗаполнения, ДанныеЗаполнения);
			
		ИначеЕсли ТипОснования = Тип("ДокументСсылка.ЗаказПоставщику") Тогда
			
			ЗаполнитьПоЗаказПоставщику(ДанныеЗаполнения, ДанныеЗаполнения);
			
		ИначеЕсли ТипОснования = Тип("ДокументСсылка.ЗаявкаНаРасходованиеДенежныхСредств") Тогда
			
			ЗаполнитьПоЗаявкеНаРасходование(ДанныеЗаполнения, ДанныеЗаполнения);
			
		ИначеЕсли ТипОснования = Тип("ДокументСсылка.ЗарплатаКВыплатеОрганизаций") Тогда
			
			ЗаполнитьПоВедомостиНаЗарплату(ДанныеЗаполнения, ДанныеЗаполнения);
			
		ИначеЕсли ТипОснования = Тип("ДокументСсылка.ОтчетКомитентуОПродажах") Тогда
			
			ЗаполнитьПоОтчетуКомитентуОПродажах(ДанныеЗаполнения, ДанныеЗаполнения);
			
		ИначеЕсли ТипОснования = Тип("ДокументСсылка.ЧекКоррекции") Тогда
			
			ЗаполнитьПоЧекуКоррекции(ДанныеЗаполнения, ДанныеЗаполнения);
			
		КонецЕсли;
	ИначеЕсли ТипОснования = Тип("Структура") Тогда
		
		Если ДанныеЗаполнения.Свойство("ЗаполнениеВозвратТоваровОтРозничногоПокупателя") Тогда
			СтрокаПлатежа = РасшифровкаПлатежа.Добавить();
			СтрокаПлатежа.ДокументРасчетовСКонтрагентом = ДанныеЗаполнения.ДокументРасчетовСКонтрагентом;
			СтрокаПлатежа.СтатьяДвиженияДенежныхСредств = ДанныеЗаполнения.СтатьяДвиженияДенежныхСредств;
			СтрокаПлатежа.Сумма = ДанныеЗаполнения.СуммаДокумента;
			РаспределитьОплатуАгентскихПлатежей();
			
		ИначеЕсли ДанныеЗаполнения.Свойство("ВыплатаЗарплаты") Тогда
			ОбщегоНазначенияРТ.ПроверитьВозможностьВводаНаОсновании(ДанныеЗаполнения.Основание);
			ЗаполнитьПоВедомостиНаЗарплату(ДанныеЗаполнения.Основание, ДанныеЗаполнения, ДанныеЗаполнения);
		КонецЕсли;
	КонецЕсли;
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("Структура") Тогда
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, ДанныеЗаполнения);
	КонецЕсли;
	
	ПроверитьВозможностьВводаНаОснованииБезЗаявки(ЭтотОбъект.ХозяйственнаяОперация);
	
	ИнициализироватьДокумент(ДанныеЗаполнения);
	ОбщегоНазначенияРТ.ПроверитьИспользованиеОрганизации(,,Организация);
	ДенежныеСредстваСервер.ЗаполнитьПризнакСпособаРасчета(ЭтотОбъект);
	
	Документы.РасходныйКассовыйОрдер.ЗаполнитьРеквитыПечатнойФормы(ЭтотОбъект);
	
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, Режим)
	
	ПроведениеСервер.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства, Режим);
	
	// Инициализация данных документа.
	Документы.РасходныйКассовыйОрдер.ИнициализироватьДанныеДокумента(Ссылка, ДополнительныеСвойства);
	
	// Подготовка наборов записей
	ПроведениеСервер.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);
	
	// Движения по денежным средствам.
	ДенежныеСредстваСервер.ОтразитьДенежныеСредстваНаличные(ДополнительныеСвойства, Движения, Отказ);
	ДенежныеСредстваСервер.ОтразитьДенежныеСредстваКПоступлениюНаличные(ДополнительныеСвойства, Движения, Отказ);
	ДенежныеСредстваСервер.ОтразитьВыплаченнаяЗарплата(ДополнительныеСвойства, Движения, Отказ);
	ДенежныеСредстваСервер.ОтразитьРасчетыСПоставщиками(ДополнительныеСвойства, Движения, Отказ);
	ДенежныеСредстваСервер.ОтразитьДенежныеСредстваКВыплате(ДополнительныеСвойства, Движения, Отказ);
	ДенежныеСредстваСервер.ОтразитьДенежныеСредстваККМ(ДополнительныеСвойства, Движения, Отказ);
	ДенежныеСредстваСервер.ОтразитьРасчетыСКлиентами(ДополнительныеСвойства, Движения, Отказ);
	
	СформироватьСписокРегистровДляКонтроля();
	
	// Запись наборов записей
	ПроведениеСервер.ЗаписатьНаборыЗаписей(ЭтотОбъект);
	ПроведениеСервер.ВыполнитьКонтрольРезультатовПроведения(ЭтотОбъект, Отказ);
	ПроведениеСервер.ОчиститьДополнительныеСвойстваДляПроведения(ДополнительныеСвойства);
	
	ЗакупкиСервер.ОбновитьСостояниеОплаты(ЭтотОбъект);
	
	Если ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ПриходныйКассовыйОрдер") Тогда
		
		Если НЕ Отказ Тогда
			ЗаказПокупателя = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументОснование,"ЗаказПокупателя");
			ОбменССайтомРТ.ЗаписатьСостояниеОплатыЗаказаПокупателя(ЗаказПокупателя, Ссылка);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// В обработчике события ОбработкаПроверкиЗаполнения документа выполняются следующие действия:
// - Устанавливает проверку заполнения реквизитов формы и табличной части "Расшифровка платежа".
// - Проверка соответствия организации документа и организации кассы ККМ.
// - При инкассации денег в банк, проверяется на соответствие организация документа и организация банковского счета.
// - При передаче денег между кассами, в зависимости от хозяйственной операции, проверяется соответствие организаций
// касс и организации документа.
// - При выплате зарплаты, проверяется ведомость на выплату.
Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	Перем МассивВсехРеквизитов;
	Перем МассивРеквизитовОперации;
	
	Документы.РасходныйКассовыйОрдер.ЗаполнитьИменаРеквизитовПоХозяйственнойОперации(
		ХозяйственнаяОперация,
		МассивВсехРеквизитов,
		МассивРеквизитовОперации);
	
	МассивНепроверяемыхРеквизитов = Новый Массив;
	
	Если НЕ ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВыдачаДенежныхСредствВКассуККМ Тогда
		МассивНепроверяемыхРеквизитов.Добавить("КассаККМ");
	КонецЕсли;
	Если ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПрочиеРасходы Тогда
		МассивНепроверяемыхРеквизитов.Добавить("Контрагент");
	ИначеЕсли ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВыплатаЗаработнойПлатыРаботнику Тогда
		МассивРеквизитовОперации.Добавить("Контрагент");
	КонецЕсли;
	
	ОбщегоНазначенияРТКлиентСервер.ЗаполнитьМассивНепроверяемыхРеквизитов(
		МассивВсехРеквизитов,
		МассивРеквизитовОперации,
		МассивНепроверяемыхРеквизитов);
	
	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты,МассивНепроверяемыхРеквизитов);
	
	ДенежныеСредстваСервер.ПроверитьЗаполнениеРасшифровкиПлатежа(
		ЭтотОбъект,
		СуммаДокумента,
		ХозяйственнаяОперация,
		Отказ);
		
	ПродажиСервер.ПроверитьСистемуНалогообложения(ЭтотОбъект, Отказ);
		
	ПроверитьБанковскийСчет(Отказ);
	ДенежныеСредстваСервер.ПроверитьКассуПолучателя(ЭтотОбъект, Отказ);
	ПроверитьЗаполнениеДокументаПриВыдачеЗарплаты(Отказ);
	
КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)
	
	// Инициализация дополнительных свойств для проведения документа.
	ПроведениеСервер.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства);
	
	// Подготовка наборов записей
	ПроведениеСервер.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);
	
	// Запись наборов записей
	ПроведениеСервер.ЗаписатьНаборыЗаписей(ЭтотОбъект);
	
	ПроведениеСервер.ОчиститьДополнительныеСвойстваДляПроведения(ДополнительныеСвойства);
	
	ЗакупкиСервер.ОбновитьСостояниеОплаты(ЭтотОбъект);
	
	Если ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ПриходныйКассовыйОрдер") Тогда
		
		Если НЕ Отказ Тогда
			ЗаказПокупателя = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументОснование,"ЗаказПокупателя");
			ОбменССайтомРТ.ЗаписатьСостояниеОплатыЗаказаПокупателя(ЗаказПокупателя, Ссылка, Ссылка);
		КонецЕсли;
		
	КонецЕсли;
КонецПроцедуры

// В обработчике события ПередЗаписью документа выполняется:
// - Удаление строк в табличной части расшифровка платежа для операций отражающих выдачу денег в другие кассы и
// инкассации.
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения Тогда
		Если СменаЗакрыта 
			ИЛИ ПробитЧек Тогда
			Если СменаЗакрыта Тогда
				Текст = НСтр("ru = 'Кассовая смена закрыта. Операции над этим документом запрещены.'");
				РеквизитДокумента = "ОтчетОРозничныхПродажах"
			Иначе
				Текст = НСтр("ru = 'Пробит чек по документу. Операции над этим документом запрещены.'");
				РеквизитДокумента = "НомерЧекаККМ"
			КонецЕсли;
			
			ОбщегоНазначения.СообщитьПользователю(
				Текст,
				ЭтотОбъект,
				РеквизитДокумента,
				,
				Отказ);
		КонецЕсли;
	КонецЕсли;
	
	ПроведениеСервер.УстановитьРежимПроведения(Проведен, РежимЗаписи, РежимПроведения);
	
	ДополнительныеСвойства.Вставить("ЭтоНовый",    ЭтоНовый());
	ДополнительныеСвойства.Вставить("РежимЗаписи", РежимЗаписи);
	
	Если ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВыдачаДенежныхСредствВДругуюКассу
		ИЛИ ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВыдачаДенежныхСредствВКассуККМ
		ИЛИ ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВыдачаДенежныхСредствВДругуюОрганизацию Тогда
		Если РасшифровкаПлатежа.Количество() > 0 Тогда
			РасшифровкаПлатежа.Очистить();
		КонецЕсли;
	ИначеЕсли НЕ ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратОплатыКлиенту Тогда
		Для Каждого Строка Из РасшифровкаПлатежа Цикл
			Строка.ДоговорКонтрагента = ДоговорКонтрагента;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)
	
	Если ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПрочиеРасходы
		И ТипЗнч(КОнтрагент) = Тип("СправочникСсылка.ФизическиеЛица") Тогда
		Контрагент = Неопределено;
	КонецЕсли;
	
	ИнициализироватьДокумент();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Заполняет документ формируемый из рабочего места кассира.
//
Процедура ЗаполнитьПоВедомостиНаЗарплату(Знач ДокументОснованиеВедомостьНаВыплатуЗарплаты, ДанныеЗаполнения, Знач ДанныеЗаполненияСтруктура = Неопределено)
	
	Если ДанныеЗаполненияСтруктура = Неопределено Тогда
		
		ДанныеЗаполнения = Новый Структура();
		ДанныеЗаполнения.Вставить("ДокументОснование", ДокументОснованиеВедомостьНаВыплатуЗарплаты);
		ДанныеЗаполнения.Вставить("ПлатежнаяВедомость", ДокументОснованиеВедомостьНаВыплатуЗарплаты);
		ДанныеЗаполнения.Вставить("ХозяйственнаяОперация", Перечисления.ХозяйственныеОперации.ВыплатаЗаработнойПлатыПоВедомостям);
		ДанныеЗаполнения.Вставить("Организация", ДокументОснованиеВедомостьНаВыплатуЗарплаты.Организация);
		СтатьяДвиженияДенежныхСредств = ЗначениеНастроекПовтИсп.СтатьяДвиженияДенежныхСредств(ДанныеЗаполнения.ХозяйственнаяОперация);
		ДанныеЗаполнения.Вставить("СуммаДокумента", СуммаДокументаПоВедомости(ДокументОснованиеВедомостьНаВыплатуЗарплаты));
		ДанныеЗаполнения.Вставить("Касса");
		Если ЗначениеЗаполнено(ДокументОснованиеВедомостьНаВыплатуЗарплаты)  Тогда
			ДанныеЗаполнения.Вставить("Магазин", ДокументОснованиеВедомостьНаВыплатуЗарплаты.Магазин);
		Иначе
			ДанныеЗаполнения.Вставить("Магазин");
		КонецЕсли;
		ДенежныеСредстваСервер.ЗаполнитьРеквизитыДокументаПоФормеОплаты(ДанныеЗаполнения, Перечисления.ФормыОплаты.Наличная);
	Иначе
		ДанныеЗаполнения = Новый Структура();
		ДанныеЗаполнения.Вставить("ДокументОснование", ДокументОснованиеВедомостьНаВыплатуЗарплаты);
		ДанныеЗаполнения.Вставить("ПлатежнаяВедомость", ДокументОснованиеВедомостьНаВыплатуЗарплаты);
		ДанныеЗаполнения.Вставить("ХозяйственнаяОперация", ДанныеЗаполненияСтруктура.ХозяйственнаяОперация);
		ДанныеЗаполнения.Вставить("Организация", ДокументОснованиеВедомостьНаВыплатуЗарплаты.Организация);
		Если ДанныеЗаполненияСтруктура.Свойство("Касса") Тогда
			ДанныеЗаполнения.Вставить("Касса", ДанныеЗаполненияСтруктура.Касса);
		Иначе
			ДанныеЗаполнения.Вставить("Касса");
			Если ЗначениеЗаполнено(ДокументОснованиеВедомостьНаВыплатуЗарплаты)  Тогда
				ДанныеЗаполнения.Вставить("Магазин", ДокументОснованиеВедомостьНаВыплатуЗарплаты.Магазин);
			Иначе
				ДанныеЗаполнения.Вставить("Магазин");
			КонецЕсли;
			ДенежныеСредстваСервер.ЗаполнитьРеквизитыДокументаПоФормеОплаты(ДанныеЗаполнения, Перечисления.ФормыОплаты.Наличная);
		КонецЕсли; 
		
		СтатьяДвиженияДенежныхСредств = ЗначениеНастроекПовтИсп.СтатьяДвиженияДенежныхСредств(ДанныеЗаполненияСтруктура.ХозяйственнаяОперация);
		Если ДанныеЗаполненияСтруктура.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВыплатаЗаработнойПлатыРаботнику Тогда
			Если ДанныеЗаполненияСтруктура.Свойство("Контрагент") И ДанныеЗаполненияСтруктура.Свойство("СуммаДокумента") Тогда
				ДанныеЗаполнения.Вставить("Контрагент", ДанныеЗаполненияСтруктура.Контрагент);
				ДанныеЗаполнения.Вставить("СуммаДокумента", ДанныеЗаполненияСтруктура.СуммаДокумента);
				Дата = ТекущаяДатаСеанса();
			Иначе
				ВыборкаРаботниковВедомости = Документы.РасходныйКассовыйОрдер.РаботникиНаПолучениеЗарплаты(ДокументОснованиеВедомостьНаВыплатуЗарплаты);
				Если ВыборкаРаботниковВедомости.Количество() = 1.00 Тогда
					ВыборкаРаботниковВедомости.Следующий();
					ДанныеЗаполнения.Вставить("Контрагент", ВыборкаРаботниковВедомости.Работник);
					ДанныеЗаполнения.Вставить("СуммаДокумента", ВыборкаРаботниковВедомости.Сумма);
				КонецЕсли;
			КонецЕсли;
		Иначе
			Запрос = Новый Запрос();
			Запрос.Текст = "
			|ВЫБРАТЬ
			|	ВЫБОР	КОГДА
			|			МАКСИМУМ(
			|						ВЫБОР	КОГДА ЗарплатаКВыплатеОрганизацийЗарплата.ОтметкаОВыплатеЗарплаты = ЗНАЧЕНИЕ(Перечисление.ВариантыОтметокОВыплатеЗарплаты.НеВыплачено)
			|								ТОГДА ИСТИНА
			|								ИНАЧЕ ЛОЖЬ
			|						КОНЕЦ
			|					) = ИСТИНА
			|			ТОГДА &Текст1
			|			КОГДА
			|			СУММА(
			|					ВЫБОР	КОГДА ЗарплатаКВыплатеОрганизацийЗарплата.ОтметкаОВыплатеЗарплаты = ЗНАЧЕНИЕ(Перечисление.ВариантыОтметокОВыплатеЗарплаты.Выплачено)
			|							ТОГДА ЗарплатаКВыплатеОрганизацийЗарплата.Сумма
			|							ИНАЧЕ 0.00
			|					КОНЕЦ
			|				) = СУММА(ЕСТЬNULL(ВыплаченнаяЗарплата.Сумма, 0.00))
			|			ТОГДА &Текст2
			|			ИНАЧЕ &ПустаяСтрока // Ошибок нет
			|	КОНЕЦ КАК СтрокаОшибок,
			|	ВЫБОР
			|			КОГДА
			|			МАКСИМУМ(
			|						ВЫБОР	КОГДА ЗарплатаКВыплатеОрганизацийЗарплата.ОтметкаОВыплатеЗарплаты = ЗНАЧЕНИЕ(Перечисление.ВариантыОтметокОВыплатеЗарплаты.НеВыплачено)
			|								ТОГДА ИСТИНА
			|								ИНАЧЕ ЛОЖЬ
			|						КОНЕЦ
			|					) = ИСТИНА
			|			ТОГДА ИСТИНА
			|			КОГДА
			|			СУММА(
			|					ВЫБОР	КОГДА ЗарплатаКВыплатеОрганизацийЗарплата.ОтметкаОВыплатеЗарплаты = ЗНАЧЕНИЕ(Перечисление.ВариантыОтметокОВыплатеЗарплаты.Выплачено)
			|							ТОГДА ЗарплатаКВыплатеОрганизацийЗарплата.Сумма
			|							ИНАЧЕ 0.00
			|					КОНЕЦ
			|				) = СУММА(ЕСТЬNULL(ВыплаченнаяЗарплата.Сумма, 0.00))
			|			ТОГДА ИСТИНА
			|			ИНАЧЕ ЛОЖЬ
			|	КОНЕЦ КАК Отказ
			|ИЗ
			|	Документ.ЗарплатаКВыплатеОрганизаций.Зарплата КАК ЗарплатаКВыплатеОрганизацийЗарплата
			|ВНУТРЕННЕЕ СОЕДИНЕНИЕ
			|	Документ.ЗарплатаКВыплатеОрганизаций КАК ЗарплатаКВыплатеОрганизаций
			|ПО
			|	ЗарплатаКВыплатеОрганизаций.Ссылка = ЗарплатаКВыплатеОрганизацийЗарплата.Ссылка
			|ЛЕВОЕ СОЕДИНЕНИЕ
			|	РегистрСведений.ВыплаченнаяЗарплата КАК ВыплаченнаяЗарплата
			|ПО
			|	ВыплаченнаяЗарплата.ПлатежнаяВедомость = &Ссылка
			|	И ВыплаченнаяЗарплата.Работник = ЗарплатаКВыплатеОрганизацийЗарплата.Физлицо
			|	И ВыплаченнаяЗарплата.Магазин = ЗарплатаКВыплатеОрганизаций.Магазин
			|	И ЗарплатаКВыплатеОрганизацийЗарплата.ОтметкаОВыплатеЗарплаты = ЗНАЧЕНИЕ(Перечисление.ВариантыОтметокОВыплатеЗарплаты.Выплачено)
			|ГДЕ
			|	ЗарплатаКВыплатеОрганизаций.Ссылка = &Ссылка
			|СГРУППИРОВАТЬ ПО
			|	ЗарплатаКВыплатеОрганизацийЗарплата.Ссылка
			|";
			
			// Текстовые параметры
			Запрос.УстановитьПараметр("Текст1", НСтр("ru = 'Ведомость на выплату зарплаты содержит строки с невыплаченной зарплатой.'"));
			Запрос.УстановитьПараметр("Текст2", НСтр("ru = 'По текущей ведомости нет сумм к выплате.'"));
			Запрос.УстановитьПараметр("Текст3", НСтр("ru = ''"));
			Запрос.УстановитьПараметр("Текст4", НСтр("ru = ''"));
			Запрос.УстановитьПараметр("Текст5", НСтр("ru = ''"));
			Запрос.УстановитьПараметр("ПустаяСтрока", НСтр("ru = '""'"));
			
			
			Запрос.УстановитьПараметр("Ссылка", ДокументОснованиеВедомостьНаВыплатуЗарплаты);
			Выборка = Запрос.Выполнить().Выбрать();
			Если Выборка.Следующий() Тогда
				Если Выборка.Отказ = Истина Тогда
					ВызватьИсключение Выборка.СтрокаОшибок;
				КонецЕсли;
			КонецЕсли;
			СуммаДокумента = СуммаДокументаПоВедомости(ДокументОснованиеВедомостьНаВыплатуЗарплаты);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Заполняет документ введенный на основании документа "Заказ поставщику".
// Параметры:
//           ДокументОснование - ДокументСсылка - Ссылка на документ основания.
//           ДанныеЗаполнения - ДокументСсылка - в процедуре параметр переопределяется в тип структура в которую
//                                               добавляются данные заполнения.
Процедура ЗаполнитьПоЗаказПоставщику(Знач ДокументОснование, ДанныеЗаполнения)
	
	ПроверитьВозможностьВводаНаОснованииБезЗаявки(Перечисления.ХозяйственныеОперации.ОплатаПоставщику);
	
	ДанныеЗаполнения = Новый Структура();
	ДанныеЗаполнения.Вставить("ДокументОснование", ДокументОснование);
	ДанныеЗаполнения.Вставить("Контрагент", ДокументОснование.Контрагент);
	ДанныеЗаполнения.Вставить("ХозяйственнаяОперация", Перечисления.ХозяйственныеОперации.ОплатаПоставщику);
	ДанныеЗаполнения.Вставить("Организация", ДокументОснование.Организация);
	ДанныеЗаполнения.Вставить("Магазин", ДокументОснование.Магазин);
	СтатьяДвиженияДенежныхСредств = ЗначениеНастроекПовтИсп.СтатьяДвиженияДенежныхСредств(ДанныеЗаполнения.ХозяйственнаяОперация);
	
	Если Не ЗначениеЗаполнено(Касса) Тогда
		ДанныеЗаполнения.Вставить("Касса");
		ДенежныеСредстваСервер.ЗаполнитьРеквизитыДокументаПоФормеОплаты(ДанныеЗаполнения, Перечисления.ФормыОплаты.Наличная);
	КонецЕсли;
	
	СуммаНеОплаченногоЭтапа = ЗакупкиСервер.ПолучитьСуммуНеОплаченногоЭтапа(ДокументОснование, Перечисления.ФормыОплаты.Наличная);
	
	Если СуммаНеОплаченногоЭтапа = 0 Тогда
		ТекстОшибки = НСтр("ru = 'Нет задолженности по запланированным оплатам на дату: %Дата% (наличная форма оплаты) по документу ""%ДокументОснование%"".
									|Перепланируйте этапы оплат или введите сумму вручную.'");
		ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Дата%", Формат(ТекущаяДатаСеанса(),"ДЛФ=D"));
		ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ДокументОснование%", ДокументОснование);
		ОбщегоНазначения.СообщитьПользователю(ТекстОшибки, ЭтотОбъект, "РасшифровкаПлатежа");
	КонецЕсли;
	
	СтрокаПлатеж = РасшифровкаПлатежа.Добавить();
	СтрокаПлатеж.ДокументРасчетовСКонтрагентом = ДокументОснование;
	СтрокаПлатеж.Сумма = СуммаНеОплаченногоЭтапа;
	СтрокаПлатеж.СтатьяДвиженияДенежныхСредств = СтатьяДвиженияДенежныхСредств;
	СуммаДокумента = СуммаНеОплаченногоЭтапа;
	
	ДанныеЗаполнения.Вставить("СуммаДокумента", СуммаДокумента);
	
КонецПроцедуры

// Заполняет документ введенный на основании документов "Поступление товаров", "Возврат товаров от покупателя".
// Параметры:
//           ДокументОснование - ДокументСсылка - Ссылка на документ основания.
//           ДанныеЗаполнения - ДокументСсылка - в процедуре параметр переопределяется в тип структура в которую
//                                               добавляются данные заполнения.
Процедура ЗаполнитьПоВозвратуТоваровОтПокупателя(Знач ДокументОснование, ДанныеЗаполнения)
	Запрос = Новый Запрос();
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВозвратТоваровОтПокупателя.Ссылка КАК ДокументОснование,
	|	ВозвратТоваровОтПокупателя.Дата КАК ДатаДокумента,
	|	ВозвратТоваровОтПокупателя.Контрагент КАК Контрагент,
	|	ВозвратТоваровОтПокупателя.Организация КАК Организация,
	|	ВозвратТоваровОтПокупателя.Магазин КАК Магазин,
	|	ВозвратТоваровОтПокупателя.ЦенаВключаетНДС КАК ЦенаВключаетНДС,
	|	ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратОплатыКлиенту) КАК ХозяйственнаяОперация,
	|	ВЫБОР
	|		КОГДА ВозвратТоваровОтПокупателя.ЦенаВключаетНДС
	|			ТОГДА ВложенныйЗапрос.Сумма
	|		ИНАЧЕ ВложенныйЗапрос.Сумма + ВложенныйЗапрос.СуммаНДС
	|	КОНЕЦ КАК СуммаДокумента,
	|	ВозвратТоваровОтПокупателя.ПоДокументу КАК ПоДокументу
	|ИЗ
	|	Документ.ВозвратТоваровОтПокупателя КАК ВозвратТоваровОтПокупателя,
	|	(ВЫБРАТЬ
	|		СУММА(ВозвратТоваровОтПокупателяТовары.Сумма) КАК Сумма,
	|		СУММА(ВозвратТоваровОтПокупателяТовары.СуммаНДС) КАК СуммаНДС
	|	ИЗ
	|		Документ.ВозвратТоваровОтПокупателя.Товары КАК ВозвратТоваровОтПокупателяТовары
	|	ГДЕ
	|		ВозвратТоваровОтПокупателяТовары.Ссылка = &Ссылка) КАК ВложенныйЗапрос
	|ГДЕ
	|	ВозвратТоваровОтПокупателя.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", ДокументОснование);
	
	РезультатЗапроса = Запрос.Выполнить();
	ДанныеЗаполнения = Новый Структура();
	
	Для Каждого РеквизитЗаполнения Из РезультатЗапроса.Колонки Цикл
		ДанныеЗаполнения.Вставить(РеквизитЗаполнения.Имя);
	КонецЦикла;
	ВыборкаДанныхЗаполнения = РезультатЗапроса.Выбрать();
	ВыборкаДанныхЗаполнения.Следующий();
	ЗаполнитьЗначенияСвойств(ДанныеЗаполнения, ВыборкаДанныхЗаполнения);
	
	Если Не ЗначениеЗаполнено(Касса) Тогда
		ДанныеЗаполнения.Вставить("Касса");
		ДенежныеСредстваСервер.ЗаполнитьРеквизитыДокументаПоФормеОплаты(ДанныеЗаполнения, Перечисления.ФормыОплаты.Наличная);
	КонецЕсли;
	
	СтатьяДвиженияДенежныхСредств = ЗначениеНастроекПовтИсп.СтатьяДвиженияДенежныхСредств(ДанныеЗаполнения.ХозяйственнаяОперация);
	
	СтрокаПлатеж = РасшифровкаПлатежа.Добавить();
	СтрокаПлатеж.СтатьяДвиженияДенежныхСредств = СтатьяДвиженияДенежныхСредств;
	СтрокаПлатеж.ДокументРасчетовСКонтрагентом = ДокументОснование;
	СтрокаПлатеж.Сумма                         = ВыборкаДанныхЗаполнения.СуммаДокумента;
	
	РаспределитьОплатуАгентскихПлатежей();
	
КонецПроцедуры

// Заполняет документ введенный на основании документа "Приходный кассовый ордер".
// Параметры:
//           ДокументОснование - ДокументСсылка - Ссылка на документ основания.
//           ДанныеЗаполнения - ДокументСсылка - в процедуре параметр переопределяется в тип структура в которую
//                                               добавляются данные заполнения.
Процедура ЗаполнитьПоПриходномуКассовомуОрдеру(Знач ДокументОснованиеПриходныйКассовыйОрдер, ДанныеЗаполнения)
	
	Если ДокументОснованиеПриходныйКассовыйОрдер.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПоступлениеОплатыОтКлиента
		ИЛИ ДокументОснованиеПриходныйКассовыйОрдер.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПоступлениеДенежныхСредствИзКассыККМ Тогда
		
		ДанныеЗаполнения = Новый Структура;
		ДанныеЗаполнения.Вставить("Касса",              ДокументОснованиеПриходныйКассовыйОрдер.Касса);
		ДанныеЗаполнения.Вставить("Организация",        ДокументОснованиеПриходныйКассовыйОрдер.Организация);
		ДанныеЗаполнения.Вставить("ДоговорКонтрагента", ДокументОснованиеПриходныйКассовыйОрдер.ДоговорКонтрагента);
		Если ДокументОснованиеПриходныйКассовыйОрдер.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПоступлениеОплатыОтКлиента Тогда
			ДанныеЗаполнения.Вставить("Касса"                , ДокументОснованиеПриходныйКассовыйОрдер.Касса);
			ДанныеЗаполнения.Вставить("ХозяйственнаяОперация", Перечисления.ХозяйственныеОперации.ВозвратОплатыКлиенту);
			ДанныеЗаполнения.Вставить("ДокументОснование"    , ДокументОснованиеПриходныйКассовыйОрдер);
			ДанныеЗаполнения.Вставить("Контрагент"           , ДокументОснованиеПриходныйКассовыйОрдер.Контрагент);
			ДанныеЗаполнения.Вставить("СуммаДокумента"       , ДокументОснованиеПриходныйКассовыйОрдер.РасшифровкаПлатежа.Итог("Сумма"));
			
			СтатьяДвиженияДенежныхСредств = ЗначениеНастроекПовтИсп.СтатьяДвиженияДенежныхСредств(ДанныеЗаполнения.ХозяйственнаяОперация);
			
			СтрокаПлатеж = РасшифровкаПлатежа.Добавить();
			СтрокаПлатеж.Сумма                         = ДокументОснованиеПриходныйКассовыйОрдер.РасшифровкаПлатежа.Итог("Сумма");
			СтрокаПлатеж.ДокументРасчетовСКонтрагентом = ДокументОснованиеПриходныйКассовыйОрдер;
			СтрокаПлатеж.СтатьяДвиженияДенежныхСредств = СтатьяДвиженияДенежныхСредств;
			
		Иначе
			ДанныеЗаполнения.Вставить("ХозяйственнаяОперация", Перечисления.ХозяйственныеОперации.ВыдачаДенежныхСредствВКассуККМ);
			ДанныеЗаполнения.Вставить("КассаККМ"             , ДокументОснованиеПриходныйКассовыйОрдер.КассаККМ);
			ДанныеЗаполнения.Вставить("СуммаДокумента"       , ДокументОснованиеПриходныйКассовыйОрдер.СуммаДокумента);
		КонецЕсли;
		
	Иначе
		// Документ не вводится на основании ПКО с другими хоз. операциями.
		Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не требуется вводить расходный кассовый ордер на основании документа %1'"),
			ДокументОснованиеПриходныйКассовыйОрдер);
		ВызватьИсключение Текст;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьПоЧекуКММ(Знач ДокументОснованиеЧекККМ, ДанныеЗаполнения)
	
	Если ДокументОснованиеЧекККМ.ОперацияСДенежнымиСредствами 
		И НЕ ЗначениеЗаполнено(ДокументОснованиеЧекККМ.ДокументРасчета) 
		И НЕ ДокументОснованиеЧекККМ.СтатусЧекаККМ = Перечисления.СтатусыЧековККМ.Архивный Тогда
		ДанныеЗаполнения = Новый Структура();
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	Кассы.Ссылка КАК Ссылка,
		|	Кассы.КассаККМ КАК КассаККМ,
		|	Кассы.ПометкаУдаления КАК ПометкаУдаления
		|ИЗ
		|	Справочник.Кассы КАК Кассы
		|ГДЕ
		|	Кассы.КассаККМ = &КассаККМ
		|
		|УПОРЯДОЧИТЬ ПО
		|	ПометкаУдаления";
		
		Запрос.УстановитьПараметр("КассаККМ", ДокументОснованиеЧекККМ.КассаККМ);
		
		Результат = Запрос.Выполнить();
		Выборка = Результат.Выбрать();
		
		Если Выборка.Следующий() Тогда
			
			ДанныеЗаполнения.Вставить("Касса"                , Выборка.Ссылка);
			
		КонецЕсли;
		
		ДанныеЗаполнения.Вставить("ХозяйственнаяОперация", Перечисления.ХозяйственныеОперации.ВозвратОплатыКлиенту);
		ДанныеЗаполнения.Вставить("ДокументОснование"    , ДокументОснованиеЧекККМ);
		ДанныеЗаполнения.Вставить("Контрагент"           , ДокументОснованиеЧекККМ.Контрагент);
		ДанныеЗаполнения.Вставить("Организация"          , ДокументОснованиеЧекККМ.Организация);
		
		СтатьяДвиженияДенежныхСредств = ЗначениеНастроекПовтИсп.СтатьяДвиженияДенежныхСредств(ДанныеЗаполнения.ХозяйственнаяОперация);
		
		СуммаНаличных = 0;
		Для каждого СтрокаОплата Из ДокументОснованиеЧекККМ.Оплата Цикл
			Если СтрокаОплата.ВидОплаты = Справочники.ВидыОплатЧекаККМ.Наличные Тогда
				СуммаНаличных = СуммаНаличных + СтрокаОплата.Сумма;
			КонецЕсли;
		КонецЦикла;
		
		Если СуммаНаличных = 0 Тогда
			Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'В чеке ККМ %1 нет оплаты наличными'"),
				ДокументОснованиеЧекККМ);
			ВызватьИсключение Текст;
		Иначе
			СтрокаПлатеж = РасшифровкаПлатежа.Добавить();
			СтрокаПлатеж.Сумма                         = СуммаНаличных;
			СтрокаПлатеж.ДокументРасчетовСКонтрагентом = ДокументОснованиеЧекККМ;
			СтрокаПлатеж.СтатьяДвиженияДенежныхСредств = СтатьяДвиженияДенежныхСредств;
			ДанныеЗаполнения.Вставить("СуммаДокумента" , СуммаНаличных);
		КонецЕсли;
	Иначе
		// Документ не вводится на основании ПКО с другими хоз. операциями.
		Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Расходный кассовый ордер можно вводить только на основании неархивированного чека приема аванса'"),
			ДокументОснованиеЧекККМ);
		ВызватьИсключение Текст;
	КонецЕсли;
	
КонецПроцедуры

// Заполняет документ введенный на основании документа "Отчет комитенту о продажах".
// Параметры:
//           ДокументОснование - ДокументСсылка - Ссылка на документ основания.
//           ДанныеЗаполнения - ДокументСсылка - в процедуре параметр переопределяется в тип структура в которую
//                                               добавляются данные заполнения.
Процедура ЗаполнитьПоОтчетуКомитентуОПродажах(Знач ДокументОснование, ДанныеЗаполнения)
	
	ПроверитьВозможностьВводаНаОснованииБезЗаявки(Перечисления.ХозяйственныеОперации.ОплатаПоставщику);
	
	ДанныеЗаполнения = Новый Структура();
	ДанныеЗаполнения.Вставить("ДокументОснование",     ДокументОснование);
	ДанныеЗаполнения.Вставить("Контрагент",            ДокументОснование.Контрагент);
	ДанныеЗаполнения.Вставить("ХозяйственнаяОперация", Перечисления.ХозяйственныеОперации.ОплатаПоставщику);
	ДанныеЗаполнения.Вставить("Организация",           ДокументОснование.Организация);
	ДанныеЗаполнения.Вставить("Магазин",               ДокументОснование.Магазин);
	
	СтатьяДвиженияДенежныхСредств = ЗначениеНастроекПовтИсп.СтатьяДвиженияДенежныхСредств(ДанныеЗаполнения.ХозяйственнаяОперация);
	
	Если Не ЗначениеЗаполнено(Касса) Тогда
		ДанныеЗаполнения.Вставить("Касса");
		ДенежныеСредстваСервер.ЗаполнитьРеквизитыДокументаПоФормеОплаты(ДанныеЗаполнения, Перечисления.ФормыОплаты.Наличная);
	КонецЕсли;
	
	СуммаНеОплаченногоЭтапа = ЗакупкиСервер.ПолучитьСуммуНеОплаченногоЭтапа(ДокументОснование, Перечисления.ФормыОплаты.Наличная);
	
	Если СуммаНеОплаченногоЭтапа = 0 Тогда
		ТекстОшибки = НСтр("ru = 'Нет задолженности по запланированным оплатам на дату: %Дата% (наличная форма оплаты) по документу ""%ДокументОснование%"".
		|Перепланируйте этапы оплат или введите сумму вручную.'");
		ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Дата%", Формат(ТекущаяДатаСеанса(),"ДЛФ=D"));
		ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ДокументОснование%", ДокументОснование);
		ОбщегоНазначения.СообщитьПользователю(ТекстОшибки, ЭтотОбъект, "РасшифровкаПлатежа");
	КонецЕсли;
	
	СтрокаПлатеж = РасшифровкаПлатежа.Добавить();
	СтрокаПлатеж.ДокументРасчетовСКонтрагентом = ДокументОснование;
	СтрокаПлатеж.Сумма                         = СуммаНеОплаченногоЭтапа-ДокументОснование.СуммаВознаграждения;
	СтрокаПлатеж.СтатьяДвиженияДенежныхСредств = СтатьяДвиженияДенежныхСредств;
	СуммаДокумента                             = СуммаНеОплаченногоЭтапа-ДокументОснование.СуммаВознаграждения; 
	
	ДанныеЗаполнения.Вставить("СуммаДокумента", СуммаДокумента);
	
КонецПроцедуры

Процедура ЗаполнитьПоЧекуКоррекции(Знач ДокументОснование, ДанныеЗаполнения)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЧекКоррекции.Организация КАК Организация,
	|	ЧекКоррекции.СистемаНалогообложения КАК СистемаНалогообложения,
	|	ЧекКоррекции.ДокументОснование КАК ДокументОснование,
	|	СУММА(ЧекКоррекцииОплаты.Сумма) КАК Сумма
	|ИЗ
	|	Документ.ЧекКоррекции КАК ЧекКоррекции
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЧекКоррекции.Оплата КАК ЧекКоррекцииОплаты
	|		ПО (ЧекКоррекцииОплаты.Ссылка = ЧекКоррекции.Ссылка)
	|ГДЕ
	|	ЧекКоррекции.Ссылка = &Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	ЧекКоррекции.Организация,
	|	ЧекКоррекции.СистемаНалогообложения,
	|	ЧекКоррекции.ДокументОснование";
	
	Запрос.УстановитьПараметр("Ссылка", ДокументОснование);
	
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	
	Выборка.Следующий();
	
	ДанныеЗаполнения = Новый Структура();
	ДанныеЗаполнения.Вставить("Касса", Справочники.Кассы.КассаПоУмолчанию(Выборка.Организация));
	ДанныеЗаполнения.Вставить("Организация", Выборка.Организация);
	ДанныеЗаполнения.Вставить("ДокументОснование", Выборка.ДокументОснование);
	ДанныеЗаполнения.Вставить("ХозяйственнаяОперация", Перечисления.ХозяйственныеОперации.КорректировкаВыручки);
	ДанныеЗаполнения.Вставить("СуммаДокумента", Выборка.Сумма);
	ДанныеЗаполнения.Вставить("СистемаНалогообложения", Выборка.СистемаНалогообложения);
	
КонецПроцедуры

Процедура ИнициализироватьДокумент(ДанныеЗаполнения = Неопределено)
	
	// Определим Магазин.
	Магазин = Неопределено;
	Если ТипЗнч(ДанныеЗаполнения) = Тип("Структура") Тогда
		ДанныеЗаполнения.Свойство("Магазин", Магазин);
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(Магазин) Тогда
		Документы.РасходныйКассовыйОрдер.ЗаполнитьМагазин(ЭтотОбъект, Магазин);
	КонецЕсли;
	
	// Заполним реквизиты, не подлежащие копированию.
	ПробитЧек               = Ложь;
	СменаЗакрыта            = Ложь;
	НомерЧекаККМ            = 0;
	ОтчетОРозничныхПродажах = Документы.ОтчетОРозничныхПродажах.ПустаяСсылка();
	Ответственный           = Пользователи.ТекущийПользователь();
	
	// Заполним реквизиты значениями по умолчанию (при необходимости).
	Магазин     = ЗначениеНастроекПовтИсп.МагазинПоУмолчанию(Магазин);
	Организация = ЗначениеНастроекПовтИсп.ОрганизацияПоУмолчанию(Организация, Ответственный);
	Касса       = ЗначениеНастроекПовтИсп.КассаОрганизацииПоУмолчанию(Организация, , Касса, Магазин, Ответственный);
	Если ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.СдачаДенежныхСредствВБанк Тогда
		БанковскийСчет = ЗначениеНастроекПовтИсп.БанковскийСчетОрганизацииПоУмолчанию(
			Организация,
			Перечисления.ФормыОплаты.Безналичная,
			БанковскийСчет);
	ИначеЕсли ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВыдачаДенежныхСредствВКассуККМ Тогда
		КассаККМ = ЗначениеНастроекПовтИсп.КассаККМПоУмолчанию(Организация, Магазин, КассаККМ, Ответственный);
	КонецЕсли;
	
	ДенежныеСредстваСервер.ЗаполнитьСистемуНалогообложения(ЭтотОбъект);
	
КонецПроцедуры

Процедура ЗаполнитьПоЗаявкеНаРасходование(Знач ДокументОснование, ДанныеЗаполнения)

	Если ДокументОснование.Статус <> Перечисления.СтатусыЗаявокНаРасходованиеДенежныхСредств.Утверждена Тогда
		
		Текст = НСтр("ru = 'Расходный кассовый ордер возможно вводить на основании заявки со статусом ""Утверждена""'");
		ВызватьИсключение Текст;
		
	КонецЕсли;
	
	Если НЕ (ДокументОснование.ФормаОплатыЗаявки = Перечисления.ФормыОплаты.Наличная ИЛИ ДокументОснование.ФормаОплатыЗаявки = Перечисления.ФормыОплаты.ПустаяСсылка()) Тогда
		
		Текст = НСтр("ru = 'Расходный кассовый ордер возможно вводить на основании заявки с формой оплаты ""Наличные"" или ""Любая""'");
		ВызватьИсключение Текст;
		
	КонецЕсли;

	
	ДанныеЗаполнения = Новый Структура();
	ДанныеЗаполнения.Вставить("ДокументОснование", ДокументОснование);
	ДанныеЗаполнения.Вставить("Контрагент", ДокументОснование.Контрагент);
	ДанныеЗаполнения.Вставить("ХозяйственнаяОперация", ДокументОснование.ХозяйственнаяОперация);
	ДанныеЗаполнения.Вставить("Организация", ДокументОснование.Организация);
	ДанныеЗаполнения.Вставить("Магазин", ДокументОснование.Магазин);
	ДанныеЗаполнения.Вставить("Касса", ДокументОснование.Касса);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЗаявкаНаРасходованиеДенежныхСредствРасшифровкаПлатежа.НомерСтроки,
		|	ЗаявкаНаРасходованиеДенежныхСредствРасшифровкаПлатежа.ДокументРасчетовСКонтрагентом,
		|	ЗаявкаНаРасходованиеДенежныхСредствРасшифровкаПлатежа.СтатьяДвиженияДенежныхСредств
		|ПОМЕСТИТЬ ТЧДок
		|ИЗ
		|	Документ.ЗаявкаНаРасходованиеДенежныхСредств.РасшифровкаПлатежа КАК ЗаявкаНаРасходованиеДенежныхСредствРасшифровкаПлатежа
		|ГДЕ
		|	ЗаявкаНаРасходованиеДенежныхСредствРасшифровкаПлатежа.Ссылка = &РаспоряжениеНаРасходованиеДенежныхСредств
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДенежныеСредстваКВыплатеОстатки.ДокументРасчета КАК ДокументРасчетовСКонтрагентом,
		|	ДенежныеСредстваКВыплатеОстатки.СтатьяДвиженияДенежныхСредств КАК СтатьяДвиженияДенежныхСредств,
		|	-ДенежныеСредстваКВыплатеОстатки.СуммаОстаток КАК Сумма
		|ИЗ
		|	РегистрНакопления.ДенежныеСредстваКВыплате.Остатки(, РаспоряжениеНаРасходованиеДенежныхСредств = &РаспоряжениеНаРасходованиеДенежныхСредств) КАК ДенежныеСредстваКВыплатеОстатки
		|		ЛЕВОЕ СОЕДИНЕНИЕ ТЧДок КАК ТЧДок
		|		ПО ДенежныеСредстваКВыплатеОстатки.ДокументРасчета = ТЧДок.ДокументРасчетовСКонтрагентом
		|			И ДенежныеСредстваКВыплатеОстатки.СтатьяДвиженияДенежныхСредств = ТЧДок.СтатьяДвиженияДенежныхСредств
		|ГДЕ
		|	ДенежныеСредстваКВыплатеОстатки.СуммаОстаток < 0
		|
		|УПОРЯДОЧИТЬ ПО
		|	ТЧДок.НомерСтроки";
	
	Запрос.УстановитьПараметр("РаспоряжениеНаРасходованиеДенежныхСредств", ДокументОснование);
	
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		Текст = НСтр("ru = 'Заявка на расходование ДС полностью оплачена.
							|Ввод документов оплаты не требуется.'");
		ВызватьИсключение Текст;
	Иначе
		РасшифровкаПлатежа.Загрузить(Результат.Выгрузить());
	КонецЕсли;
	
	ДанныеЗаполнения.Вставить("СуммаДокумента", РасшифровкаПлатежа.Итог("Сумма"));
	
КонецПроцедуры

Процедура СформироватьСписокРегистровДляКонтроля()
	
	Массив = Новый Массив;
	
	Если ДополнительныеСвойства.РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		Массив.Добавить(Движения.ДенежныеСредстваКВыплате);
		Массив.Добавить(Движения.ДенежныеСредстваККМ);
		Массив.Добавить(Движения.ДенежныеСредстваНаличные);
	КонецЕсли;
	
	ДополнительныеСвойства.ДляПроведения.Вставить("РегистрыДляКонтроля", Массив);
	
КонецПроцедуры

// Получает из ведомости сумму выплаченной заработной платы на которую не сформирован расходный кассовый ордер.
// 
// Параметры:
//   ПлатежнаяВедомость - Тип ДокументСсылка.ЗарплатаКВыплатеОрганизаций - Ведомость на которую формируется расходный
//                        кассовый ордер.
// Возвращаемое значение:
//   Тип Число - Сумма не выплаченной расходным кассовым ордером зарплаты по ведомости.
//
Функция СуммаДокументаПоВедомости(ПлатежнаяВедомость)
	Запрос = Новый Запрос();
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	СУММА(ЗарплатаКВыплатеОрганизацийЗарплата.Сумма) КАК Сумма
	|ИЗ
	|	Документ.ЗарплатаКВыплатеОрганизаций.Зарплата КАК ЗарплатаКВыплатеОрганизацийЗарплата
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	РегистрСведений.ВыплаченнаяЗарплата КАК ВыплаченнаяЗарплата
	|ПО
	|	ВыплаченнаяЗарплата.ПлатежнаяВедомость = &Ссылка
	|	И ЗарплатаКВыплатеОрганизацийЗарплата.ФизЛицо = ВыплаченнаяЗарплата.Работник
	|ГДЕ
	|	ЗарплатаКВыплатеОрганизацийЗарплата.Ссылка = &Ссылка
	|	И ЗарплатаКВыплатеОрганизацийЗарплата.ОтметкаОВыплатеЗарплаты = ЗНАЧЕНИЕ(Перечисление.ВариантыОтметокОВыплатеЗарплаты.Выплачено)
	|	И ВыплаченнаяЗарплата.Работник ЕСТЬ NULL
	|";
	Запрос.УстановитьПараметр("Ссылка", ПлатежнаяВедомость);
	ВыборкаСумма = Запрос.Выполнить().Выбрать();
	Если ВыборкаСумма.Следующий() Тогда
		Возврат ВыборкаСумма.Сумма;
	Иначе
		Возврат 0.00;
	КонецЕсли;
	
КонецФункции

// Процедура проверяет организацию банковского счета на соответствие организации выбранной в документе.
//
Процедура ПроверитьБанковскийСчет(Отказ)
	
	Если ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.СдачаДенежныхСредствВБанк
	   И ЗначениеЗаполнено(Касса)
	   И ЗначениеЗаполнено(БанковскийСчет) Тогда
		
		РеквизитыСчета = Справочники.БанковскиеСчета.ПолучитьРеквизитыБанковскогоСчета(БанковскийСчет);
		Если Организация <> РеквизитыСчета.Организация Тогда
			Текст = НСтр("ru = 'Организация счета получателя не соответствует организации документа'");
			ОбщегоНазначения.СообщитьПользователю(
				Текст,
				ЭтотОбъект,
				"БанковскийСчет",
				,
				Отказ);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьЗаполнениеДокументаПриВыдачеЗарплаты(Отказ)
	
	Если ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВыплатаЗаработнойПлатыРаботнику Тогда
		Если НЕ ЗначениеЗаполнено(Контрагент) ИЛИ НЕ ЗначениеЗаполнено(ПлатежнаяВедомость) Тогда
			Возврат;
		КонецЕсли;
	ИначеЕсли ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВыплатаЗаработнойПлатыПоВедомостям Тогда
		Если НЕ ЗначениеЗаполнено(ПлатежнаяВедомость) Тогда
			Возврат;
		КонецЕсли;
	Иначе
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос();
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	&Ссылка                КАК Ссылка,
	|	&ПлатежнаяВедомость    КАК ПлатежнаяВедомость,
	|	&Физлицо               КАК Физлицо,
	|	&СуммаДокумента        КАК СуммаДокумента,
	|	&ХозяйственнаяОперация КАК ХозяйственнаяОперация,
	|	&Касса                 КАК Касса
	|ПОМЕСТИТЬ РасходныйКассовыйОрдер
	|ИНДЕКСИРОВАТЬ ПО
	|	ПлатежнаяВедомость,
	|	Физлицо
	|;
	|ВЫБРАТЬ
	|	ВЫБОР	КОГДА ВыплаченнаяЗарплата.Работник ЕСТЬ НЕ NULL
	|			ТОГДА &Текст1
	|			КОГДА ЗарплатаКВыплатеОрганизацийЗарплата.ОтметкаОВыплатеЗарплаты = ЗНАЧЕНИЕ(Перечисление.ВариантыОтметокОВыплатеЗарплаты.Депонировано)
	|			ТОГДА &Текст2
	|			КОГДА ЗарплатаКВыплатеОрганизацийЗарплата.Физлицо ЕСТЬ NULL
	|			ТОГДА &Текст3
	|			КОГДА ЗарплатаКВыплатеОрганизацийЗарплата.ОтметкаОВыплатеЗарплаты = ЗНАЧЕНИЕ(Перечисление.ВариантыОтметокОВыплатеЗарплаты.НеВыплачено)
	|			ТОГДА &Текст4
	|			КОГДА ЗарплатаКВыплатеОрганизацийЗарплата.Сумма <> РасходныйКассовыйОрдер.СуммаДокумента
	|			ТОГДА &Текст5
	|			КОГДА Кассы.Магазин <> ЗарплатаКВыплатеОрганизаций.Магазин
	|			ТОГДА &Текст6
	|			ИНАЧЕ &ПустаяСтрока // Ошибок нет
	|	КОНЕЦ КАК СтрокаОшибок,
	|	ВЫБОР	КОГДА ВыплаченнаяЗарплата.Работник ЕСТЬ НЕ NULL
	|			ТОГДА ИСТИНА
	|			КОГДА ЗарплатаКВыплатеОрганизацийЗарплата.ОтметкаОВыплатеЗарплаты = ЗНАЧЕНИЕ(Перечисление.ВариантыОтметокОВыплатеЗарплаты.Депонировано)
	|			ТОГДА ИСТИНА
	|			КОГДА ЗарплатаКВыплатеОрганизацийЗарплата.Физлицо ЕСТЬ NULL
	|			ТОГДА ИСТИНА
	|			КОГДА ЗарплатаКВыплатеОрганизацийЗарплата.ОтметкаОВыплатеЗарплаты = ЗНАЧЕНИЕ(Перечисление.ВариантыОтметокОВыплатеЗарплаты.НеВыплачено)
	|			ТОГДА ИСТИНА
	|			КОГДА ЗарплатаКВыплатеОрганизацийЗарплата.Сумма <> РасходныйКассовыйОрдер.СуммаДокумента
	|			ТОГДА ИСТИНА
	|			КОГДА Кассы.Магазин <> ЗарплатаКВыплатеОрганизаций.Магазин
	|			ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК Отказ,
	|	ВЫБОР	КОГДА ВыплаченнаяЗарплата.Работник ЕСТЬ НЕ NULL
	|			ТОГДА &ТекстКонтрагент
	|			КОГДА ЗарплатаКВыплатеОрганизацийЗарплата.ОтметкаОВыплатеЗарплаты = ЗНАЧЕНИЕ(Перечисление.ВариантыОтметокОВыплатеЗарплаты.Депонировано)
	|			ТОГДА &ТекстКонтрагент
	|			КОГДА ЗарплатаКВыплатеОрганизацийЗарплата.Физлицо ЕСТЬ NULL
	|			ТОГДА &ТекстКонтрагент
	|			КОГДА ЗарплатаКВыплатеОрганизацийЗарплата.ОтметкаОВыплатеЗарплаты = ЗНАЧЕНИЕ(Перечисление.ВариантыОтметокОВыплатеЗарплаты.НеВыплачено)
	|			ТОГДА &ТекстКонтрагент
	|			КОГДА ЗарплатаКВыплатеОрганизацийЗарплата.Сумма <> РасходныйКассовыйОрдер.СуммаДокумента
	|			ТОГДА &ТекстКонтрагент
	|			КОГДА Кассы.Магазин <> ЗарплатаКВыплатеОрганизаций.Магазин
	|			ТОГДА &ТекстПлатежнаяВедомость
	|			ИНАЧЕ &ПустаяСтрока // Ошибок нет
	|	КОНЕЦ НаименованиеПоляОшибки
	|ИЗ
	|	РасходныйКассовыйОрдер КАК РасходныйКассовыйОрдер
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	Документ.ЗарплатаКВыплатеОрганизаций.Зарплата КАК ЗарплатаКВыплатеОрганизацийЗарплата
	|ПО
	|	ЗарплатаКВыплатеОрганизацийЗарплата.Ссылка = РасходныйКассовыйОрдер.ПлатежнаяВедомость
	|	И ЗарплатаКВыплатеОрганизацийЗарплата.Физлицо = РасходныйКассовыйОрдер.Физлицо
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	Документ.ЗарплатаКВыплатеОрганизаций КАК ЗарплатаКВыплатеОрганизаций
	|ПО
	|	ЗарплатаКВыплатеОрганизаций.Ссылка = РасходныйКассовыйОрдер.ПлатежнаяВедомость
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	РегистрСведений.ВыплаченнаяЗарплата КАК ВыплаченнаяЗарплата
	|ПО
	|	ВыплаченнаяЗарплата.ПлатежнаяВедомость = РасходныйКассовыйОрдер.ПлатежнаяВедомость
	|	И ВыплаченнаяЗарплата.Работник = РасходныйКассовыйОрдер.Физлицо
	|	И ВыплаченнаяЗарплата.Регистратор <> &Ссылка
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	Справочник.Кассы КАК Кассы
	|ПО
	|	Кассы.Ссылка = РасходныйКассовыйОрдер.Касса
	|ГДЕ
	|	РасходныйКассовыйОрдер.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВыплатаЗаработнойПлатыРаботнику)
	|ОБЪЕДИНИТЬ ВСЕ
	|ВЫБРАТЬ
	|	ВЫБОР
	|			КОГДА МАКСИМУМ(ЕСТЬNULL(ЗарплатаКВыплатеОрганизацийЗарплатаНеВыплачено.ОтметкаОВыплатеЗарплаты, ЗНАЧЕНИЕ(Перечисление.ВариантыОтметокОВыплатеЗарплаты.ПустаяСсылка))) = ЗНАЧЕНИЕ(Перечисление.ВариантыОтметокОВыплатеЗарплаты.НеВыплачено)
	|			ТОГДА &Текст7
	|			КОГДА СУММА(ЕСТЬNULL(ЗарплатаКВыплатеОрганизацийЗарплата.Сумма, 0.00)) = СУММА(ЕСТЬNULL(ВыплаченнаяЗарплата.Сумма, 0.00))
	|			ТОГДА &Текст8
	|			КОГДА СУММА(ЕСТЬNULL(ЗарплатаКВыплатеОрганизацийЗарплата.Сумма, 0.00)) - СУММА(ЕСТЬNULL(ВыплаченнаяЗарплата.Сумма, 0.00)) <> МАКСИМУМ(РасходныйКассовыйОрдер.СуммаДокумента)
	|			ТОГДА &Текст9
	|			КОГДА МАКСИМУМ(Кассы.Магазин) <> МАКСИМУМ(ЗарплатаКВыплатеОрганизаций.Магазин)
	|			ТОГДА &Текст10
	|			ИНАЧЕ &ПустаяСтрока // Ошибок нет
	|	КОНЕЦ КАК СтрокаОшибок,
	|	ВЫБОР
	|			КОГДА МАКСИМУМ(ЕСТЬNULL(ЗарплатаКВыплатеОрганизацийЗарплатаНеВыплачено.ОтметкаОВыплатеЗарплаты, ЗНАЧЕНИЕ(Перечисление.ВариантыОтметокОВыплатеЗарплаты.ПустаяСсылка))) = ЗНАЧЕНИЕ(Перечисление.ВариантыОтметокОВыплатеЗарплаты.НеВыплачено)
	|			ТОГДА ИСТИНА
	|			КОГДА СУММА(ЕСТЬNULL(ЗарплатаКВыплатеОрганизацийЗарплата.Сумма, 0.00)) = СУММА(ЕСТЬNULL(ВыплаченнаяЗарплата.Сумма, 0.00))
	|			ТОГДА ИСТИНА
	|			КОГДА СУММА(ЕСТЬNULL(ЗарплатаКВыплатеОрганизацийЗарплата.Сумма, 0.00)) - СУММА(ЕСТЬNULL(ВыплаченнаяЗарплата.Сумма, 0.00)) <> МАКСИМУМ(РасходныйКассовыйОрдер.СуммаДокумента)
	|			ТОГДА ИСТИНА
	|			КОГДА МАКСИМУМ(Кассы.Магазин) <> МАКСИМУМ(ЗарплатаКВыплатеОрганизаций.Магазин)
	|			ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК Отказ,
	|	ВЫБОР
	|			КОГДА МАКСИМУМ(ЕСТЬNULL(ЗарплатаКВыплатеОрганизацийЗарплатаНеВыплачено.ОтметкаОВыплатеЗарплаты, ЗНАЧЕНИЕ(Перечисление.ВариантыОтметокОВыплатеЗарплаты.ПустаяСсылка))) = ЗНАЧЕНИЕ(Перечисление.ВариантыОтметокОВыплатеЗарплаты.НеВыплачено)
	|			ТОГДА &ТекстПлатежнаяВедомость
	|			КОГДА СУММА(ЕСТЬNULL(ЗарплатаКВыплатеОрганизацийЗарплата.Сумма, 0.00)) = СУММА(ЕСТЬNULL(ВыплаченнаяЗарплата.Сумма, 0.00))
	|			ТОГДА &ТекстКонтрагент
	|			КОГДА СУММА(ЕСТЬNULL(ЗарплатаКВыплатеОрганизацийЗарплата.Сумма, 0.00)) - СУММА(ЕСТЬNULL(ВыплаченнаяЗарплата.Сумма, 0.00)) <> МАКСИМУМ(РасходныйКассовыйОрдер.СуммаДокумента)
	|			ТОГДА &ТекстКонтрагент
	|			КОГДА МАКСИМУМ(Кассы.Магазин) <> МАКСИМУМ(ЗарплатаКВыплатеОрганизаций.Магазин)
	|			ТОГДА &ТекстПлатежнаяВедомость
	|			ИНАЧЕ &ПустаяСтрока // Ошибок нет
	|	КОНЕЦ КАК НаименованиеПоляОшибки
	|ИЗ
	|	РасходныйКассовыйОрдер КАК РасходныйКассовыйОрдер
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	Документ.ЗарплатаКВыплатеОрганизаций.Зарплата КАК ЗарплатаКВыплатеОрганизацийЗарплата
	|ПО
	|	ЗарплатаКВыплатеОрганизацийЗарплата.Ссылка = РасходныйКассовыйОрдер.ПлатежнаяВедомость
	|	И ЗарплатаКВыплатеОрганизацийЗарплата.ОтметкаОВыплатеЗарплаты = ЗНАЧЕНИЕ(Перечисление.ВариантыОтметокОВыплатеЗарплаты.Выплачено)
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	Документ.ЗарплатаКВыплатеОрганизаций КАК ЗарплатаКВыплатеОрганизаций
	|ПО
	|	ЗарплатаКВыплатеОрганизаций.Ссылка = РасходныйКассовыйОрдер.ПлатежнаяВедомость
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	Документ.ЗарплатаКВыплатеОрганизаций.Зарплата КАК ЗарплатаКВыплатеОрганизацийЗарплатаНеВыплачено
	|ПО
	|	ЗарплатаКВыплатеОрганизацийЗарплатаНеВыплачено.Ссылка = РасходныйКассовыйОрдер.ПлатежнаяВедомость
	|	И ЗарплатаКВыплатеОрганизацийЗарплатаНеВыплачено.ОтметкаОВыплатеЗарплаты = ЗНАЧЕНИЕ(Перечисление.ВариантыОтметокОВыплатеЗарплаты.НеВыплачено)
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	РегистрСведений.ВыплаченнаяЗарплата КАК ВыплаченнаяЗарплата
	|ПО
	|	ВыплаченнаяЗарплата.ПлатежнаяВедомость = РасходныйКассовыйОрдер.ПлатежнаяВедомость
	|	И ВыплаченнаяЗарплата.Работник = ЗарплатаКВыплатеОрганизацийЗарплата.Физлицо
	|	И ВыплаченнаяЗарплата.Регистратор <> &Ссылка
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	Справочник.Кассы КАК Кассы
	|ПО
	|	Кассы.Ссылка = РасходныйКассовыйОрдер.Касса
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	Документ.РасходныйКассовыйОрдер КАК РасходныйКассовыйОрдерРегистратор
	|ПО
	|	РасходныйКассовыйОрдерРегистратор.Ссылка = ВыплаченнаяЗарплата.Регистратор
	|ГДЕ
	|	РасходныйКассовыйОрдер.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВыплатаЗаработнойПлатыПоВедомостям)
	|СГРУППИРОВАТЬ ПО
	|	РасходныйКассовыйОрдер.Ссылка
	|
	|";
	
	// Текстовые параметры
	Запрос.УстановитьПараметр("Текст1", НСтр("ru = 'По этому работнику указанной платежной ведомости уже есть расходный кассовый ордер.'"));
	Запрос.УстановитьПараметр("Текст2", НСтр("ru = 'По этому работнику указанной платежной ведомости сумма депонирована.'"));
	Запрос.УстановитьПараметр("Текст3", НСтр("ru = 'Работник отсутствует в ведомости.'"));
	Запрос.УстановитьПараметр("Текст4", НСтр("ru = 'Работнику не выплачена заработная плата.'"));
	Запрос.УстановитьПараметр("Текст5", НСтр("ru = 'Сумма документа не соответствует выплаченной зарплаты в ведомости.'"));
	Запрос.УстановитьПараметр("Текст6", НСтр("ru = 'Магазин кассы не должен отличается от магазина указанного в платежной ведомости.'"));
	Запрос.УстановитьПараметр("Текст7", НСтр("ru = 'Ведомость на выплату зарплаты содержит строки с невыплаченной зарплатой'"));
	Запрос.УстановитьПараметр("Текст8", НСтр("ru = 'По текущей ведомости нет сумм к выплате.'"));
	Запрос.УстановитьПараметр("Текст9", НСтр("ru = 'Сумма документа не соответствует выплаченной зарплате в ведомости.'"));
	Запрос.УстановитьПараметр("Текст10", НСтр("ru = 'Магазин кассы не должен отличается от магазина указанного в платежной ведомости.'"));
	Запрос.УстановитьПараметр("ПустаяСтрока", НСтр("ru = '""'"));
	Запрос.УстановитьПараметр("ТекстКонтрагент", НСтр("ru = 'Контрагент'"));
	Запрос.УстановитьПараметр("ТекстПлатежнаяВедомость", НСтр("ru = 'ПлатежнаяВедомость'"));
	
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.УстановитьПараметр("ПлатежнаяВедомость", ПлатежнаяВедомость);
	Запрос.УстановитьПараметр("Физлицо", Контрагент);
	Запрос.УстановитьПараметр("СуммаДокумента", СуммаДокумента);
	Запрос.УстановитьПараметр("ХозяйственнаяОперация", ХозяйственнаяОперация);
	Запрос.УстановитьПараметр("Касса", Касса);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Если Выборка.Отказ Тогда
			ОбщегоНазначения.СообщитьПользователю(
				Выборка.СтрокаОшибок,
				ЭтотОбъект,
				Выборка.НаименованиеПоляОшибки,
				,
				Отказ);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

Процедура ПроверитьВозможностьВводаНаОснованииБезЗаявки(Операция)
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьЗаявкиНаРасходованиеДС")
		И НЕ УправлениеПользователями.ПолучитьБулевоЗначениеПраваПользователя(ПланыВидовХарактеристик.ПраваПользователей.РазрешитьОформлениеРКОРБОБезЗаявки, Ложь) Тогда
		
		ХозОперация = ?(ЗначениеЗаполнено(Операция), Операция, Перечисления.ХозяйственныеОперации.ОплатаПоставщику);
		
		Если НЕ (ХозОперация = Перечисления.ХозяйственныеОперации.ОплатаПоставщику ИЛИ ХозОперация = Перечисления.ХозяйственныеОперации.ПрочиеРасходы) Тогда
			Возврат;
		КонецЕсли;
		
		ТекстОшибки = НСтр("ru='Расходный кассовый ордер с операцией ""%1"" необходимо вводить на основании
								|заявки на расходование денежных средств.'");
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибки, ХозОперация);
		
		ВызватьИсключение ТекстОшибки;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура РаспределитьОплатуАгентскихПлатежей()
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	РасшифровкаПлатежа.СтатьяДвиженияДенежныхСредств КАК СтатьяДвиженияДенежныхСредств,
	|	РасшифровкаПлатежа.ДокументРасчетовСКонтрагентом КАК ДокументРасчетовСКонтрагентом,
	|	РасшифровкаПлатежа.Сумма КАК Сумма
	|ПОМЕСТИТЬ РасшифровкаПлатежаНачальная
	|ИЗ
	|	&РасшифровкаПлатежа КАК РасшифровкаПлатежа
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РасшифровкаПлатежа.СтатьяДвиженияДенежныхСредств КАК СтатьяДвиженияДенежныхСредств,
	|	РасшифровкаПлатежа.ДокументРасчетовСКонтрагентом КАК ДокументРасчетовСКонтрагентом,
	|	СУММА(РасшифровкаПлатежа.Сумма) КАК Сумма
	|ПОМЕСТИТЬ РасшифровкаПлатежа
	|ИЗ
	|	РасшифровкаПлатежаНачальная КАК РасшифровкаПлатежа
	|
	|СГРУППИРОВАТЬ ПО
	|	РасшифровкаПлатежа.СтатьяДвиженияДенежныхСредств,
	|	РасшифровкаПлатежа.ДокументРасчетовСКонтрагентом
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.Ссылка КАК ДокументРасчетов,
	|	Товары.Номенклатура.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	СУММА(Товары.Сумма) КАК Сумма
	|ПОМЕСТИТЬ Договоры
	|ИЗ
	|	Документ.ВозвратТоваровОтПокупателя.Товары КАК Товары
	|ГДЕ
	|	Товары.Ссылка В
	|			(ВЫБРАТЬ
	|				РасшифровкаПлатежа.ДокументРасчетовСКонтрагентом
	|			ИЗ
	|				РасшифровкаПлатежа КАК РасшифровкаПлатежа)
	|
	|СГРУППИРОВАТЬ ПО
	|	Товары.Ссылка,
	|	Товары.Номенклатура.ДоговорКонтрагента
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Товары.Ссылка,
	|	Товары.Номенклатура.ДоговорКонтрагента,
	|	СУММА(Товары.Сумма)
	|ИЗ
	|	Документ.РеализацияТоваров.Товары КАК Товары
	|ГДЕ
	|	Товары.Ссылка В
	|			(ВЫБРАТЬ
	|				РасшифровкаПлатежа.ДокументРасчетовСКонтрагентом
	|			ИЗ
	|				РасшифровкаПлатежа КАК РасшифровкаПлатежа)
	|
	|СГРУППИРОВАТЬ ПО
	|	Товары.Ссылка,
	|	Товары.Номенклатура.ДоговорКонтрагента
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РасшифровкаПлатежа.СтатьяДвиженияДенежныхСредств,
	|	РасшифровкаПлатежа.ДокументРасчетовСКонтрагентом КАК ДокументРасчетовСКонтрагентом,
	|	РасшифровкаПлатежа.Сумма КАК СуммаПоДокументу,
	|	Договоры.ДокументРасчетов,
	|	Договоры.ДоговорКонтрагента,
	|	Договоры.Сумма КАК Сумма
	|ИЗ
	|	РасшифровкаПлатежа КАК РасшифровкаПлатежа
	|		ЛЕВОЕ СОЕДИНЕНИЕ Договоры КАК Договоры
	|		ПО (Договоры.ДокументРасчетов = РасшифровкаПлатежа.ДокументРасчетовСКонтрагентом)
	|ИТОГИ ПО
	|	ДокументРасчетовСКонтрагентом";
	Запрос.УстановитьПараметр("РасшифровкаПлатежа", РасшифровкаПлатежа.Выгрузить());
	Выборка = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	РасшифровкаПлатежа.Очистить();
	Пока Выборка.Следующий() Цикл
		ВыборкаДокументы = Выборка.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаДокументы.Следующий() Цикл
			НоваяСтрока = РасшифровкаПлатежа.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаДокументы,, "Сумма");
			Если НЕ ЗначениеЗаполнено(НоваяСтрока.Сумма) Тогда
				НоваяСтрока.Сумма = ВыборкаДокументы.СуммаПоДокументу;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
КонецПроцедуры

#КонецОбласти

#КонецЕсли
