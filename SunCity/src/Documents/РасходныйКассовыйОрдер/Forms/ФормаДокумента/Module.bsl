#Область ОписаниеПеременных

// Используется механизмом обработки изменения реквизитов ТЧ.
&НаКлиенте
Перем КэшированныеЗначения;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)

	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.ДатыЗапретаИзменения
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменения
	
	ОбщегоНазначенияРТКлиентСервер.ОбновитьСостояниеДокумента(Объект, Элементы.КартинкаСостоянияДокумента.Подсказка,
		КартинкаСостоянияДокумента, РазрешеноПроведение);
	
	
	ВходитВКассовуюКнигу = ФинансыСервер.ОпределитьВхождениеВКассовуюКнигу(Объект.Ссылка);
	
	УстановитьДоступностьЭлементовПоСтатусуСервер();
	
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Пропускаем инициализацию, чтобы гарантировать получение формы при передаче параметра "АвтоТест".
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	ОбщегоНазначенияРТ.ЗаполнитьШапкуДокумента(Объект, КартинкаСостоянияДокумента,
		Элементы.КартинкаСостоянияДокумента.Подсказка, РазрешеноПроведение);
	
	// Инициализация реквизитов формы.
	ИспользоватьПодключаемоеОборудование = ЗначениеНастроекВызовСервера.ИспользоватьПодключаемоеОборудование();
	
	ЭтоФискальнаяОперация = Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратОплатыКлиенту
		ИЛИ Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПрочиеРасходы;
	
	СтатьяДвиженияДенежныхСредств = ЗначениеНастроекПовтИсп.СтатьяДвиженияДенежныхСредств(Объект.ХозяйственнаяОперация);
	
	Документы.РасходныйКассовыйОрдер.ЗаполнитьМагазин(Объект, Магазин);
	
	ЗаполнитьСписокТелефоновКонтрагента();
	
	ДобавитьСтрокуВРасшифровкуПриНеобходимости();
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ОпределитьРучноеИзменениеРеквизитовПечатнойФормы();
	Иначе
		Если ЗначениеЗаполнено(Объект.Касса) Тогда
			КассаПриИзмененииСервер();
		КонецЕсли;
	КонецЕсли;
	
	ОбновитьТекущийОстаток();
	
	УстановитьСНОРасшифровкиНаСервере();
	
	// Установим визуальное представление.
	УправлениеЭлементамиФормы();
	УправлениеЭлементамиРасшифровкиПлатежа(ЭтотОбъект);
	
	//ИИН/БИН в чеках
	Если Объект.Ссылка.Пустая() И Не ЗначениеЗаполнено(Объект.ИИН) Тогда
		ЗаполнитьИИНКонтрагентаНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	Если ЗначениеЗаполнено(ФИОФизЛицаИП) Тогда
		Объект.Выдать = ОбщегоНазначенияРТКлиентСерверПовтИсп.ПолучитьСклонениеФИО(ФИОФизЛицаИП, 3)
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.КассаККМ) И НомерДокументаКассыККМ[Объект.КассаККМ] = Неопределено Тогда
		ОбщегоНазначенияРТКлиент.ЗаполнитьНомерДокументаКассыККМ(Объект.КассаККМ);
	КонецЕсли;
	
	ПредставитьТелефонИEmailКлиент();
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	// &ЗамерПроизводительности
    Замер = ОценкаПроизводительностиРТКлиент.НачатьЗамер(Ложь, 
	                                            "Документ.РасходныйКассовыйОрдер.ФормаДокумента.Запись",
                                                           Ложь);
	
	ПараметрыЗаписи.Вставить("Замер", Замер);
	

	Если Модифицированность И Объект.ХозяйственнаяОперация <> ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.СдачаДенежныхСредствВБанк") Тогда
		ФинансыКлиент.ПересчетСуммыДокументаПоРасшифровкеПлатежа(Объект, ЭтаФорма, Отказ, ПараметрыЗаписи);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	Если ТекущийОбъект.Ответственный.Пустая() Тогда
		ТекущийОбъект.Ответственный = Пользователи.ТекущийПользователь()
	КонецЕсли;
	
	Если Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.СдачаДенежныхСредствВБанк Тогда
		Если Объект.СуммаДокумента = ТаблицаОписьСдаваемыхНаличныхДенег.Итог("Сумма") Тогда
			Если ТаблицаОписьСдаваемыхНаличныхДенег.Количество() > 0 Тогда
				ТекущийОбъект.ОписьСдаваемыхНаличныхДенег.Загрузить(ТаблицаОписьСдаваемыхНаличныхДенег.Выгрузить());
			КонецЕсли;
		Иначе
			Текст = НСтр("ru = 'Сумма описи документа должна равняться сумме документа.'");
			ОбщегоНазначения.СообщитьПользователю(Текст,,,, Отказ);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)

	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	УстановитьДоступностьЭлементовПоСтатусуСервер();
	
	УстановитьСНОРасшифровкиНаСервере();
	
	УстановитьДоступностьЭлементовИФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	ОбщегоНазначенияРТКлиентСервер.ОбновитьСостояниеДокумента(Объект, Элементы.КартинкаСостоянияДокумента.Подсказка, КартинкаСостоянияДокумента, РазрешеноПроведение);
	
	Если Объект.ХозяйственнаяОперация = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ВыплатаЗаработнойПлатыПоВедомостям")
		ИЛИ Объект.ХозяйственнаяОперация = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ВыплатаЗаработнойПлатыРаботнику") Тогда
		
		Оповестить("ВыполненаВыплатаРКО");
		
	КонецЕсли;
	
	ЗаказПокупателя = ЗаказПокупателя();
	Если ЗначениеЗаполнено(ЗаказПокупателя) Тогда
		Оповестить("ЗаказПокупателя_Состояния", ЗаказПокупателя);
	КонецЕсли;
	
	// &ЗамерПроизводительности
	ОценкаПроизводительностиРТКлиент.ЗакончитьЗамер(ПараметрыЗаписи.Замер);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	
	ДатаПриИзмененииНаСервере();
	ПроверитьСНО();
	
КонецПроцедуры

&НаКлиенте
Процедура КоличествоБанкнотПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ТаблицаОписьСдаваемыхНаличныхДенег.ТекущиеДанные;
	ТекущиеДанные.Сумма = ТекущиеДанные.Номинал * ТекущиеДанные.КоличествоБанкнот / ТекущиеДанные.Коэффициент;
	СуммаБанкнот = ТаблицаОписьСдаваемыхНаличныхДенег.Итог("Сумма");
	Если НЕ СуммаУстановленаВручную Тогда
		Объект.СуммаДокумента = СуммаБанкнот;
	КонецЕсли;
	СуммаПодвалаНоминалыБанкнот = Формат(СуммаБанкнот, "ЧЦ=15; ЧДЦ=2");
	
КонецПроцедуры

&НаКлиенте
Процедура КассаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	// &ЗамерПроизводительности
	ОценкаПроизводительностиРТКлиент.НачатьЗамер(
		     Истина, "Справочник.Кассы.Форма.ФормаВыбора.Открытие");

КонецПроцедуры

&НаКлиенте
Процедура КассаПриИзменении(Элемент)
	
	КассаПриИзмененииСервер();
	
	Если ЗначениеЗаполнено(Объект.КассаККМ) И НомерДокументаКассыККМ[Объект.КассаККМ] = Неопределено Тогда
		ОбщегоНазначенияРТКлиент.ЗаполнитьНомерДокументаКассыККМ(Объект.КассаККМ);
	КонецЕсли;
	
	Элементы.ПлатежнаяВедомость.ТолькоПросмотр = НЕ ЗначениеЗаполнено(Объект.Касса);
	Элементы.Работник.ТолькоПросмотр = НЕ ЗначениеЗаполнено(Объект.ПлатежнаяВедомость);
	
	Если Объект.ХозяйственнаяОперация = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ВнутренняяПередачаДенежныхСредств") Тогда
		НастроитьОтображениеОрганизацииПриВнутреннейПередачиДС();
	КонецЕсли;
	
	ПроверитьСНО();
	
КонецПроцедуры

&НаСервере
Процедура КассаПриИзмененииСервер()

	Если ЗначениеЗаполнено(Объект.Касса) Тогда
		
		ДанныеКассы = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект.Касса, "Владелец, Магазин, ПробиватьЧекиПоКассеККМ, КассаККМ");
		
		Если НЕ Магазин = ДанныеКассы.Магазин Тогда
			Магазин = ДанныеКассы.Магазин;
			Объект.ПлатежнаяВедомость = Неопределено;
		КонецЕсли;
		Если НЕ Объект.Организация = ДанныеКассы.Владелец Тогда
			Объект.Организация = ДанныеКассы.Владелец;
		КонецЕсли;
		
		Объект.ПробиватьЧекиПоКассеККМ = ДанныеКассы.ПробиватьЧекиПоКассеККМ;
		Объект.КассаККМ                = ДанныеКассы.КассаККМ;
		
		Если Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.СдачаДенежныхСредствВБанк Тогда
			Если ЗначениеЗаполнено(Объект.БанковскийСчет)
				И НЕ ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.БанковскийСчет, "Владелец") = Объект.Организация
				ИЛИ НЕ ЗначениеЗаполнено(Объект.БанковскийСчет) Тогда
				Объект.БанковскийСчет = ЗначениеНастроекПовтИсп.БанковскийСчетОрганизацииПоУмолчанию(
					Объект.Организация,
					Перечисления.ФормыОплаты.Безналичная);
			КонецЕсли;
		ИначеЕсли Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВыдачаДенежныхСредствВКассуККМ Тогда
			РеквизитыКассыККМ = Справочники.КассыККМ.РеквизитыКассыККМ(Объект.КассаККМ);
			Если РеквизитыКассыККМ.Организация <> Объект.Организация Тогда
				Объект.КассаККМ = ЗначениеНастроекПовтИсп.КассаККМПоУмолчанию(Объект.Организация, Магазин);
			КонецЕсли;
		ИначеЕсли Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВыдачаДенежныхСредствВДругуюКассу
			И ЗначениеЗаполнено(Объект.КассаПолучатель) Тогда
			РеквизитыКассаПолучатель = Справочники.Кассы.РеквизитыКассы(Объект.КассаПолучатель);
			Если РеквизитыКассаПолучатель.Организация <> Объект.Организация Тогда
				Объект.КассаПолучатель = Справочники.Кассы.ПустаяСсылка();
			КонецЕсли;
		КонецЕсли;
		
	Иначе
		Магазин                = Неопределено;
		Объект.Организация     = Неопределено;
		Объект.БанковскийСчет  = Неопределено;
		Объект.КассаККМ        = Неопределено;
		Объект.КассаПолучатель = Неопределено;
		
		Объект.ПробиватьЧекиПоКассеККМ = Ложь;
		
	КонецЕсли;
	
	МагазинПриИзмененииСервер();
	УстановитьДоступностьБанковскогоСчета();
	УстановитьВозможныеЗначенияКассыПолучателя();
	
	ЗаполнитьСистемуНалогообложения();
	
	ОбновитьТекущийОстаток();
	
	ДенежныеСредстваСервер.ЗаполнитьПризнакСпособаРасчета(Объект);
	
	УправлениеЭлементамиФискализации();
	
КонецПроцедуры

&НаКлиенте
Процедура КассаККМНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Магазин) Тогда
		ПараметрМагазин = Новый ПараметрВыбора("Отбор.Магазин", Магазин);
		НовыйМассив = Новый Массив();
		НовыйМассив.Добавить(ПараметрМагазин);
		НовыеПараметры = Новый ФиксированныйМассив(НовыйМассив);
		Элемент.ПараметрыВыбора = НовыеПараметры;
		
	Иначе
		Элемент.ПараметрыВыбора = Новый ФиксированныйМассив(Новый Массив());
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияНесоответствиеСНОНажатие(Элемент)
	
	ПроверитьСНО( ,Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура СуммаДокументаПриИзменении(Элемент)
	
	ФинансыКлиент.ПересчетСуммыВСтрокеРасшифровкиПлатежа(Объект, Объект.СуммаДокумента);
	
	СуммаУстановленаВручную = Объект.СуммаДокумента <> 0;
	
	СуммаДокументаПриИзмененииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура СуммаДокументаПриИзмененииНаСервере()
	ДенежныеСредстваСервер.ЗаполнитьПризнакСпособаРасчета(Объект);
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентПриИзменении(Элемент)
	
	КонтрагентПриИзмененииКлиент();
	
КонецПроцедуры

&НаКлиенте
Процедура ПлатежнаяВедомостьПриИзменении(Элемент)
	
	Элементы.Работник.ТолькоПросмотр = НЕ ЗначениеЗаполнено(Объект.ПлатежнаяВедомость);
	Если НЕ ЗначениеЗаполнено(Объект.ПлатежнаяВедомость) Тогда 
		Объект.Контрагент = Неопределено;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.ПлатежнаяВедомость)
		ИЛИ Объект.ХозяйственнаяОперация <> ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ВыплатаЗаработнойПлатыПоВедомостям") Тогда
		Объект.ДокументОснование = Объект.ПлатежнаяВедомость;
		Возврат;
	КонецЕсли;
	
	ЗаполнитьДокументНаОснованииПлатежнойВедомости();
	
КонецПроцедуры

&НаКлиенте
Процедура РаботникПриИзменении(Элемент)
	МассивРаботникиВедомости = РаботникиВедомости.НайтиСтроки(Новый Структура("Работник", Объект.Контрагент));
	Если МассивРаботникиВедомости.Количество() > 0.00 Тогда
		Объект.СуммаДокумента = МассивРаботникиВедомости[0].Сумма;
	КонецЕсли;
	

КонецПроцедуры

&НаКлиенте
Процедура РаботникНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	
	Если НЕ ЗначениеЗаполнено(Объект.ПлатежнаяВедомость) Тогда
		Элементы.Работник.СписокВыбора.Очистить();
		Возврат;
	КонецЕсли;
	
	ЗаполнитьСписокВыбораРаботникПоВедомостиНаЗарплату();
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияОтчетОРозничныхПродажахНажатие(Элемент)
	
	Если ЗначениеЗаполнено(Объект.ОтчетОРозничныхПродажах) Тогда
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Ключ", Объект.ОтчетОРозничныхПродажах);
		ПараметрыФормы.Вставить("ТекущийЭлемент", "ПрочаяВыручка");
		
		ПараметрыТекущейСтроки = Новый Структура;
		ПараметрыТекущейСтроки.Вставить("Контрагент", Объект.Контрагент);
		ПараметрыТекущейСтроки.Вставить("ХозяйственнаяОперация", Объект.ХозяйственнаяОперация);
		ПараметрыТекущейСтроки.Вставить("ВидОплаты", ПредопределенноеЗначение("Справочник.ВидыОплатЧекаККМ.Наличные"));
		
		ПараметрыФормы.Вставить("ТекущаяСтрока", ПараметрыТекущейСтроки);
		ПараметрыФормы.Вставить("ТекущийРеквизитОбъекта", "ПрочаяВыручка");
		
		ОткрытьФорму("Документ.ОтчетОРозничныхПродажах.ФормаОбъекта", ПараметрыФормы);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДоговорПлатежногоАгентаПриИзменении(Элемент)
	ДоговорПлатежногоАгентаПриИзмененииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ПлатежнаяВедомостьНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
    
    // &ЗамерПроизводительности
    ОценкаПроизводительностиРТКлиент.НачатьЗамер(
             Истина, "Документ.ЗарплатаКВыплатеОрганизаций.Форма.ФормаВыбора.Открытие");

КонецПроцедуры

&НаКлиенте
Процедура ОтправлятьЧекПриИзменении(Элемент)
	ОтправлятьЧекПриИзмененииКлиент();
КонецПроцедуры

&НаКлиенте
Процедура ТелефонСтрокойПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(ТелефонСтрокой) Тогда
		ТелефонСтрокой = СтрЗаменить(ТелефонСтрокой, " ", 0);
		Объект.Телефон = ПодключаемоеОборудованиеРТКлиент.ПреобразоватьТелефонИзСтрокиМаски(ТелефонСтрокой);
		Объект.АдресЭП = "";
	Иначе
		Объект.Телефон = "";
		ТелефонСтрокой = "";
		Объект.АдресЭП = "";
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура АдресЭППриИзменении(Элемент)
	
	Если НЕ ШтрихкодированиеРТКлиентСервер.ЕмаилКорректен(Объект.АдресЭП) Тогда
	
		ТекстСообщения = НСтр("ru = 'Введён некорректный E-mail'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения,,"Объект.АдресЭП");
	
	КонецЕсли;
	
	ТелефонСтрокой = "";
	Объект.Телефон = "";
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентПриИзмененииКлиент()
	
	КонтрагентПриИзмененииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура КонтрагентПриИзмененииНаСервере()
	
	Если НЕ ОснованиеУстановленоВручную Тогда
		Документы.РасходныйКассовыйОрдер.ЗаполнитьРеквитыПечатнойФормы(Объект, Новый Структура("Основание"));
	КонецЕсли;
	
	ЗаполнитьСписокТелефоновКонтрагента();
	ДенежныеСредстваСервер.ЗаполнитьПризнакСпособаРасчета(Объект);
	
	УправлениеЭлементамиФискализации();
	
	ЗаполнитьИИНКонтрагентаНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ДоговорПлатежногоАгентаПриИзмененииНаСервере()
	Объект.БанковскийСчет = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ДоговорКонтрагента, "БанковскийСчет");
	ОбновитьТекущийОстаток();
КонецПроцедуры

&НаКлиенте
Процедура ОснованиеПриИзменении(Элемент)
	ОснованиеУстановленоВручную = Истина;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыРасшифровкаПлатежа

&НаКлиенте
Процедура РасшифровкаПлатежаДокументРасчетовСКонтрагентомПриИзменении(Элемент)
	
	СтрокаТаблицы = Объект.РасшифровкаПлатежа[0];
	РасшифровкаПлатежаДокументРасчетовСКонтрагентомПриИзмененииСервер(СтрокаТаблицы.ПолучитьИдентификатор());
	
	ПроверитьСНО(СтрокаТаблицы, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаСтатьяДвиженияДенежныхСредствПриИзменении(Элемент)
	
	СтрокаТаблицы = Объект.РасшифровкаПлатежа[0];
	СтатьяДвиженияДенежныхСредств = СтрокаТаблицы.СтатьяДвиженияДенежныхСредств;
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если Объект.ХозяйственнаяОперация = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.СдачаДенежныхСредствВБанк") Тогда
		
		СуммаТабличнойЧастиРасшифровкаПлатежа = ОбработкаТабличнойЧастиТоварыКлиентСервер.СуммаДокумента(Объект.РасшифровкаПлатежа, Истина);
		Элемент.ТекущиеДанные.ДоговорКонтрагента = Объект.ДоговорКонтрагента;
	КонецЕсли;
	
	СуммаБанкнот = Объект.РасшифровкаПлатежа.Итог("Сумма");
	СуммаПодвалаРасшифровкаПлатежа = Формат(СуммаБанкнот, "ЧЦ=15; ЧДЦ=2");
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыТаблицаОписьСдаваемыхНаличныхДенег

&НаКлиенте
Процедура ТаблицаОписьСдаваемыхНаличныхДенегПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Отказ = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаОписьСдаваемыхНаличныхДенегПередУдалением(Элемент, Отказ)
	
	Отказ = Истина;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

// Процедура выполняет печать чека на фискальном регистраторе.
//
&НаКлиенте
Процедура НапечататьЧек(Команда)
	
	Если Объект.ПробитЧек Тогда
		ТекстСообщения = НСтр("ru = 'Чек уже пробит на фискальном регистраторе.'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	ОповещениеЗавершенияПроверки = Новый ОписаниеОповещения("ПроверитьВозможностьПечатиЧекаЗавершение", ЭтотОбъект);
	ФинансыКлиент.ПроверитьВозможностьПечатиЧека(ОповещениеЗавершенияПроверки, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура Изменить(Команда)
	
	УстановитьДоступностьЭлементовПоСтатусуСервер(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСуммуПоОстатку(Команда)
	
	Объект.СуммаДокумента = ТекущийОстатокВКассе;
	
КонецПроцедуры

&НаКлиенте
Процедура РазбитьПлатеж(Команда)
	
	ОткрытьФормуРасшифровкиПлатежа();
	
КонецПроцедуры

&НаКлиенте
Процедура НадписьСуммаДокументаНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОткрытьФормуРасшифровкиПлатежа();
	
КонецПроцедуры

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат) Экспорт
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьРеквитыПечатнойФормы(Команда)
	ЗаполнитьРеквитыПечатнойФормыСервер();
КонецПроцедуры

&НаКлиенте
Процедура ПодобратьФизЛицо(Команда)
	Оповещение = Новый ОписаниеОповещения("ВыборФизЛицаЗавершение", ЭтотОбъект);
	ФормаВыбора = ОткрытьФорму("Справочник.ФизическиеЛица.ФормаВыбора", , ЭтотОбъект,,,, Оповещение);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ЗаполнитьИИНКонтрагентаНаСервере()
	
	//ИИН/БИН в чеках
	Если ЗначениеЗаполнено(Объект.Контрагент) Тогда
		Если ТипЗнч(Объект.Контрагент) = Тип("СправочникСсылка.ФизическиеЛица") Тогда
			Объект.ИИН = Объект.Контрагент.ИНН;
		Иначе
			Если Объект.Контрагент.ЮрФизЛицо = ПредопределенноеЗначение("Перечисление.ЮрФизЛицо.ФизЛицо") Тогда
				Объект.ИИН = Объект.Контрагент.ФизЛицо.ИНН;
			Иначе
				Объект.ИИН = Объект.Контрагент.ИНН;
			КонецЕсли;
		КонецЕсли;
	Иначе
		Объект.ИИН = "";
	КонецЕсли;
	
КонецПроцедуры

#Область УправлениеФормой

// В процедуре выполняется установка свойств элементов формы.
//
&НаСервере
Процедура УправлениеЭлементамиФормы()
	
	Если ЗначениеЗаполнено(Объект.ОтчетОРозничныхПродажах) Тогда
		
		ТекстДекорации = НСтр("ru = '%1'");
		РеквизитыОтчета = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект.ОтчетОРозничныхПродажах, "Номер, Дата");
		
		ТекстДекорации = СтрЗаменить(ТекстДекорации, "%1", 
			ФормированиеПечатныхФормСервер.СформироватьЗаголовокДокумента(РеквизитыОтчета, НСтр("ru = 'Отчет о розничных продажах'"), "ДФ=dd.MM.yy"));
		
		Элементы.ДекорацияОтчетОРозничныхПродажах.Заголовок = ТекстДекорации;
		
	Иначе
		Элементы.ДекорацияОтчетОРозничныхПродажах.Видимость = Ложь;
	КонецЕсли;
	
	ОперацииВыдачиДС = Новый Массив;
	ОперацииВыдачиДС.Добавить(Перечисления.ХозяйственныеОперации.ВыдачаДенежныхСредствВДругуюКассу);
	ОперацииВыдачиДС.Добавить(Перечисления.ХозяйственныеОперации.ВыдачаДенежныхСредствВКассуККМ);
	ОперацииВыдачиДС.Добавить(Перечисления.ХозяйственныеОперации.ВыдачаДенежныхСредствВДругуюОрганизацию);
	ОперацииВыдачиДС.Добавить(Перечисления.ХозяйственныеОперации.ВнутренняяПередачаДенежныхСредств);
	
	Элементы.ГруппаОтправитель.ОтображатьЗаголовок = НЕ ОперацииВыдачиДС.Найти(Объект.ХозяйственнаяОперация) = Неопределено;
	
	УправлениеПользователями.УстановитьТолькоПросмотрДляРеквизитовТабличнойЧасти(Элементы.Дата.ТолькоПросмотр, 
		ПланыВидовХарактеристик.ПраваПользователей.ИзменятьДату);
		
	Элементы.Контрагент.АвтоОтметкаНезаполненного = НЕ Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПрочиеРасходы;
	
	УстановитьСвязьПараметровВыбораБанковскийСчетОрганизации();
	УстановитьСвязьПараметровВыбораКассаПолучатель();
	ЗаполнитьСписокВыбораРаботникПоВедомостиНаЗарплату();
	
	Если ЗначениеЗаполнено(Объект.ДокументОснование) И ТипЗнч(Объект.ДокументОснование) = Тип("ДокументСсылка.ЗаявкаНаРасходованиеДенежныхСредств") Тогда
		Элементы.ДокументОснование.Видимость = Истина;
	Иначе
		Элементы.ДокументОснование.Видимость = Ложь;
	КонецЕсли;
	
	УстановитьДоступностьБанковскогоСчета();
	
	НастроитьОтображениеОрганизацииПриВнутреннейПередачиДС();
	
	УстановитьСвойстваЭлементовФормыПоХозяйственнойОперации();
	УстановитьДоступностьЭлементовИФормы();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьДоступностьЭлементовИФормы()
	
	ХозОперация = Объект.ХозяйственнаяОперация;
	
	ЭтотОбъект.ТолькоПросмотр = ЭтотОбъект.ТолькоПросмотр 
								ИЛИ Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.КонвертацияВалюты 
								ИЛИ Объект.ПробитЧек
								ИЛИ Объект.СменаЗакрыта;
	
	Элементы.ПлатежнаяВедомость.ТолькоПросмотр = НЕ ЗначениеЗаполнено(Объект.Касса);
	Элементы.Работник.ТолькоПросмотр = НЕ ЗначениеЗаполнено(Объект.ПлатежнаяВедомость);
	
	Элементы.ДекорацияВнесенВКассовуюКнигу.Видимость = ВходитВКассовуюКнигу;
	
	Элементы.ЗаполнитьРеквитыПечатнойФормы.Доступность = НЕ ЭтотОбъект.ТолькоПросмотр;
	
	УправлениеЭлементамиФискализации();
	
КонецПроцедуры

&НаСервере
Процедура УправлениеЭлементамиФискализации()
	
	Если ЗначениеЗаполнено(Объект.КассаККМ) Тогда
		ПодключаемоеОборудование = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.КассаККМ, "ПодключаемоеОборудование");
		ВозможностьЭлектронногоПлатежа = ПодключаемоеОборудованиеРТ.ВозможностьЭлектронногоПлатежа(ПодключаемоеОборудование);
	Иначе
		ВозможностьЭлектронногоПлатежа = Ложь;
	КонецЕсли;
		
	Элементы.ГруппаЧекККМ.Видимость       = ЭтоФискальнаяОперация И Объект.ПробиватьЧекиПоКассеККМ;
	Элементы.ГруппаОтправкаЧека.Видимость = ВозможностьЭлектронногоПлатежа;
	Элементы.ОтправлятьЧек.ТолькоПросмотр = ТолькоПросмотр;
	
	Элементы.РасшифровкаПлатежаПризнакСпособаРасчета.Видимость = Элементы.РасшифровкаПлатежаПризнакСпособаРасчета.Видимость И ЭтоФискальнаяОперация;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы, "ОбщаяКомандаФискальныеОперации", "Видимость", Объект.ПробитЧек);
	
	ДоступностьПечатиЧека = НЕ ТолькоПросмотр И Объект.ПробиватьЧекиПоКассеККМ
		И (НЕ ЗначениеЗаполнено(Объект.Контрагент) ИЛИ ТипЗнч(Объект.Контрагент) = Тип("СправочникСсылка.Контрагенты"));
	ОбщегоНазначенияРТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,
		"НапечататьЧек",
		"Доступность", 
		ДоступностьПечатиЧека);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеЭлементамиРасшифровкиПлатежа(Форма)
	
	Объект   = Форма.Объект;
	Элементы = Форма.Элементы;
	
	ОднострочныйРежим = Объект.РасшифровкаПлатежа.Количество() <= 1;
	
	Если НЕ ОднострочныйРежим Тогда
		ПараметрыПредметаИсчисления = НСтр("ru = 'строка, строки, строк'");
		Форма.НадписьСуммаДокумента = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = '%1 %2 (%3)'"),
			Формат(Объект.СуммаДокумента, "ЧЦ=15; ЧДЦ=2; ЧН="),
			ОбщегоНазначенияРТКлиентСервер.Валюта(),
			СтроковыеФункцииКлиентСервер.ЧислоЦифрамиПредметИсчисленияПрописью(Объект.РасшифровкаПлатежа.Количество(), ПараметрыПредметаИсчисления));
	КонецЕсли;
	
	Элементы.ГруппаОдинПлатеж.Видимость        = ОднострочныйРежим;
	Элементы.ГруппаНесколькоПлатежей.Видимость = НЕ ОднострочныйРежим;
	
	Элементы.РасшифровкаПлатежаПризнакСпособаРасчета.Видимость = ОднострочныйРежим И Форма.ЭтоФискальнаяОперация;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьДоступностьБанковскогоСчета()
	
	Если Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.СдачаДенежныхСредствВБанк Тогда
		Элементы.БанковскийСчет.ТолькоПросмотр = НЕ ЗначениеЗаполнено(Объект.Организация);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура НастроитьОтображениеОрганизацииПриВнутреннейПередачиДС()
	
	Если НЕ Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВнутренняяПередачаДенежныхСредств Тогда
		Возврат;
	КонецЕсли;
	
	Элементы.Организация.ОтображениеПодсказки = ОтображениеПодсказки.ОтображатьСнизу;
	Элементы.ОрганизацияПолучатель.ОтображениеПодсказки  = ОтображениеПодсказки.ОтображатьСнизу;
	
	Если ЗначениеЗаполнено(Объект.Организация) Тогда
		
		Если Объект.Организация.ОбособленноеПодразделение Тогда
			Элементы.Организация.Подсказка = НСтр("ru = 'Обособленное подразделение'");
		Иначе
			Элементы.Организация.Подсказка = НСтр("ru = 'Головная организация'");
		КонецЕсли;
		
	Иначе
		Элементы.Организация.Подсказка = " ";
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.КассаПолучатель) Тогда
		
		Если Объект.КассаПолучатель.Владелец.ОбособленноеПодразделение Тогда
			Элементы.ОрганизацияПолучатель.Подсказка = НСтр("ru = 'Обособленное подразделение'");
		Иначе
			Элементы.ОрганизацияПолучатель.Подсказка = НСтр("ru = 'Головная организация'");
		КонецЕсли;
		
	Иначе
		Элементы.ОрганизацияПолучатель.Подсказка = " ";
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьЭлементамПоХозяйственнойОперации()

	Перем МассивВсехРеквизитов;
	Перем МассивРеквизитовОперации;
	
	Документы.РасходныйКассовыйОрдер.ЗаполнитьИменаРеквизитовПоХозяйственнойОперации(
		Объект.ХозяйственнаяОперация,
		МассивВсехРеквизитов,
		МассивРеквизитовОперации);
	
	ОбщегоНазначенияРТ.УстановитьВидимостьЭлементовПоМассиву(
		Элементы,
		МассивВсехРеквизитов,
		МассивРеквизитовОперации);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьСвойстваЭлементовФормыПоХозяйственнойОперации()
	
	УстановитьВидимостьЭлементамПоХозяйственнойОперации();
	УстановитьОграничениеТипаПоХозяйственнойОперации();
	УстановитьПараметрыВыбораКонтрагента();
	
	ЗаполнитьТаблицуОписьСдаваемыхНаличныхДенег();
	
	Если Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВыдачаДенежныхСредствВДругуюКассу
		И ЗначениеЗаполнено(Объект.Касса)
		И Объект.Касса.КассаУправляющейСистемы Тогда
		Элементы.Касса.Доступность = Ложь;
	КонецЕсли;
	
	Если Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВнутренняяПередачаДенежныхСредств Тогда
		
		Элементы.КассаПолучатель.РежимВыбораИзСписка = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьОграничениеТипаПоХозяйственнойОперации()
	
	Если Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВыплатаЗаработнойПлатыРаботнику Тогда
		Элементы.Работник.ОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица");
		Элементы.Контрагент.ОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица");
	ИначеЕсли Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПрочиеРасходы Тогда
		Если НЕ (ЗначениеЗаполнено(Объект.Контрагент) И ТипЗнч(Объект.Контрагент) = Тип("СправочникСсылка.ФизическиеЛица")) Тогда
			//Элементы.Контрагент.ОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка.Контрагенты");
		КонецЕсли;
	Иначе
		Элементы.Работник.ОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка.Контрагенты");
		Элементы.Контрагент.ОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка.Контрагенты");
	КонецЕсли;
	
	Элементы.Работник.ВыбиратьТип = Ложь;
	Если НЕ Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПрочиеРасходы Тогда
		Элементы.Контрагент.ВыбиратьТип = Ложь;
	Иначе
		Элементы.Контрагент.ВыбиратьТип = Истина;
	КонецЕсли;
	
	// Ограничим тип документа расчетов в зависимости от хоз. операции.
	ДоступныеТипы = ДенежныеСредстваКлиентСервер.ДоступныеТипыДокументовРасчета(Объект.ХозяйственнаяОперация, ТипЗнч(Объект.Ссылка));
	Если ДоступныеТипы.Количество() > 0 Тогда
		Элементы.РасшифровкаПлатежаДокументРасчетовСКонтрагентом.ВыбиратьТип = ДоступныеТипы.Количество() > 1;
		Элементы.РасшифровкаПлатежаДокументРасчетовСКонтрагентом.ОграничениеТипа = Новый ОписаниеТипов(ДоступныеТипы);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьПараметрыВыбораКонтрагента()
	
	МассивПараметров = Новый Массив();
	ПараметрВыбораТипаКонтрагента    = Неопределено;
	ПараметрВыбораСтатусаКонтрагента = Неопределено;
	
	Если Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ОплатаПоставщику Тогда
		ПараметрВыбораТипаКонтрагента = Новый ПараметрВыбора("Отбор.Поставщик", Истина);
	ИначеЕсли Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратОплатыКлиенту Тогда
		ПараметрВыбораТипаКонтрагента = Новый ПараметрВыбора("Отбор.Покупатель", Истина);
		
		МассивПравовыхСтатусов = Новый Массив;
		МассивПравовыхСтатусов.Добавить(Перечисления.ЮрФизЛицо.ИндивидуальныйПредприниматель);
		МассивПравовыхСтатусов.Добавить(Перечисления.ЮрФизЛицо.ЮрЛицо);
		МассивПравовыхСтатусов.Добавить(Перечисления.ЮрФизЛицо.ЮрЛицоНеРезидент);
		МассивПравовыхСтатусов.Добавить(Перечисления.ЮрФизЛицо.ФизЛицо);
		ПараметрВыбораСтатусаКонтрагента = Новый ПараметрВыбора("Отбор.ЮрФизЛицо", МассивПравовыхСтатусов);
	КонецЕсли;
	
	Если ПараметрВыбораТипаКонтрагента <> Неопределено Тогда 
		МассивПараметров.Добавить(ПараметрВыбораТипаКонтрагента);
	КонецЕсли;
	
	Если ПараметрВыбораСтатусаКонтрагента <> Неопределено Тогда 
		МассивПараметров.Добавить(ПараметрВыбораСтатусаКонтрагента);
	КонецЕсли;
	
	Если МассивПараметров.Количество() > 0 Тогда 
		ПараметрыВыбораМассив = Новый ФиксированныйМассив(МассивПараметров);
		Элементы.Контрагент.ПараметрыВыбора = ПараметрыВыбораМассив;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьСвязьПараметровВыбораКассаПолучатель()
	
	
	Если Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВыдачаДенежныхСредствВДругуюКассу
		ИЛИ Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВыдачаДенежныхСредствВКассуККМ Тогда
		
		МассивПараметров = Новый Массив;
		МассивПараметров.Добавить(Новый СвязьПараметраВыбора("Отбор.Владелец", "Объект.Организация", РежимИзмененияСвязанногоЗначения.НеИзменять));
		Элементы.КассаПолучатель.СвязиПараметровВыбора = Новый ФиксированныйМассив(МассивПараметров);
		
	ИначеЕсли Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВыдачаДенежныхСредствВДругуюОрганизацию Тогда
		
		Возврат;
		
	ИначеЕсли Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВнутренняяПередачаДенежныхСредств Тогда
		
		УстановитьВозможныеЗначенияКассыПолучателя(Ложь);
		
	Иначе
		МассивПараметров = Новый Массив;
		МассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.КассаУправляющейСистемы", Ложь));
		Элементы.КассаПолучатель.ПараметрыВыбора = Новый ФиксированныйМассив(МассивПараметров);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьСвязьПараметровВыбораБанковскийСчетОрганизации()
	
	Если Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.СдачаДенежныхСредствВБанк Тогда
		
		МассивПараметров = Новый Массив;
		МассивПараметров.Добавить(Новый СвязьПараметраВыбора("Отбор.Владелец", "Объект.Организация", РежимИзмененияСвязанногоЗначения.НеИзменять));
		Элементы.БанковскийСчет.СвязиПараметровВыбора = Новый ФиксированныйМассив(МассивПараметров);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьДоступностьЭлементовПоСтатусуСервер(РазрешитьРедактирование = Ложь)
	
	Если НЕ ВходитВКассовуюКнигу Тогда
		Элементы.ФормаИзменить.Видимость = Ложь;
		Возврат;
	Иначе
		Элементы.ФормаИзменить.Видимость = Истина;
	КонецЕсли;
	
	ТолькоПросмотрЭлементов = ВходитВКассовуюКнигу И Объект.Проведен;
	
	Элементы.ФормаИзменить.Доступность = ТолькоПросмотрЭлементов;
	
	Если РазрешитьРедактирование Тогда
		ТолькоПросмотрЭлементов = Ложь;
	КонецЕсли;
	
	МассивЭлементов = Новый Массив;
	
	// Элементы управления шапки
		
	МассивЭлементов.Добавить("Дата");
	МассивЭлементов.Добавить("Контрагент");
	МассивЭлементов.Добавить("БанковскийСчет");
	МассивЭлементов.Добавить("Работник");
	МассивЭлементов.Добавить("ПлатежнаяВедомость");
	МассивЭлементов.Добавить("НомерСумки");
	МассивЭлементов.Добавить("Касса");
	МассивЭлементов.Добавить("КассаПолучатель");
	МассивЭлементов.Добавить("КассаККМ");
	МассивЭлементов.Добавить("СуммаДокумента");
	
	МассивЭлементов.Добавить("РасшифровкаПлатежа");
	
	ОбщегоНазначенияРТКлиентСервер.УстановитьСвойствоЭлементовФормы(Элементы, МассивЭлементов, "ТолькоПросмотр", ТолькоПросмотрЭлементов);
	
	МассивЭлементов = Новый Массив;
	
	МассивЭлементов.Добавить("РасшифровкаПлатежаПодобратьНеоплаченные");
		
	ОбщегоНазначенияРТКлиентСервер.УстановитьСвойствоЭлементовФормы(Элементы, МассивЭлементов, "Доступность", Не ТолькоПросмотрЭлементов);
	ОбщегоНазначенияРТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ФормаИзменить", "Доступность", ТолькоПросмотрЭлементов);
	
КонецПроцедуры

#КонецОбласти

// Процедура получает список работников (физических лиц) из документа "Ведомость на выплату зарплаты".
//
&НаСервере
Процедура ЗаполнитьСписокВыбораРаботникПоВедомостиНаЗарплату()
	
	Элементы.Работник.СписокВыбора.Очистить();
	
	Если НЕ ЗначениеЗаполнено(Объект.ПлатежнаяВедомость) Тогда
		Возврат;
	КонецЕсли;
	
	ВыборкаРаботниковВедомости = Документы.РасходныйКассовыйОрдер.РаботникиНаПолучениеЗарплаты(Объект.ПлатежнаяВедомость);
	
	Пока ВыборкаРаботниковВедомости.Следующий() Цикл
		СтрокаРаботника = РаботникиВедомости.Добавить();
		СтрокаРаботника.Работник = ВыборкаРаботниковВедомости.Работник;
		СтрокаРаботника.Сумма = ВыборкаРаботниковВедомости.Сумма;
		Элементы.Работник.СписокВыбора.Добавить(ВыборкаРаботниковВедомости.Работник, ВыборкаРаботниковВедомости.РаботникПредставление + " - " + ВыборкаРаботниковВедомости.Сумма + " тг.");
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДокументНаОснованииПлатежнойВедомости()
	
	ДокументОбъект = РеквизитФормыВЗначение("Объект");
	ДокументОбъект.Заполнить(Объект.ПлатежнаяВедомость);
	ЗначениеВРеквизитФормы(ДокументОбъект, "Объект");
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВозможныеЗначенияКассыПолучателя(ИзменятьКассуПолучателя = Истина)
	
	Если НЕ Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВнутренняяПередачаДенежныхСредств Тогда
		Возврат;
	КонецЕсли;
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Кассы.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.Кассы КАК Кассы
		|ГДЕ
		|	Кассы.Владелец В (&Владелец)";
		
	Запрос.УстановитьПараметр("КассаОтправитель", Объект.Касса);
	
	Запрос.УстановитьПараметр("Владелец", Неопределено);

	МассивВзаимосвязанныхОрганизаций = Справочники.Организации.МассивВзаимосвязанныхОрганизаций(Объект.Организация);
	Запрос.УстановитьПараметр("Владелец", МассивВзаимосвязанныхОрганизаций);
	Запрос.УстановитьПараметр("ОтбиратьПоВладельцу", Истина);
	
	МассивКассПолучателей = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	Элементы.КассаПолучатель.СписокВыбора.ЗагрузитьЗначения(МассивКассПолучателей);
	
	Если ИзменятьКассуПолучателя Тогда
		Если МассивКассПолучателей.Количество() = 1 Тогда
			
			Объект.КассаПолучатель = МассивКассПолучателей[0];
			КассаПолучательПриИзмененииСервер();
			
		ИначеЕсли ЗначениеЗаполнено(Объект.КассаПолучатель)
			И МассивКассПолучателей.Найти(Объект.КассаПолучатель) = Неопределено Тогда
			
			Объект.КассаПолучатель = Справочники.Кассы.ПустаяСсылка();
			КассаПолучательПриИзмененииСервер();
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ДатаПриИзмененииНаСервере()
	
	ЗаполнитьСистемуНалогообложения();
	
КонецПроцедуры

&НаСервере
Процедура КассаПолучательПриИзмененииСервер()
	
	НастроитьОтображениеОрганизацииПриВнутреннейПередачиДС();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТаблицуОписьСдаваемыхНаличныхДенег()
	
	Если НЕ Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.СдачаДенежныхСредствВБанк Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаОписьСдаваемыхНаличныхДенег.Очистить();
	
	Если Объект.ОписьСдаваемыхНаличныхДенег.Количество() = 0 Тогда
		
		// Таблица ТаблицаОписьСдаваемыхНаличныхДенег заполняется один раз при создании на сервере или при чтении на сервере.
		// В случае, если форма перечитывается на сервере неоднократно, таблицу ТаблицаОписьСдаваемыхНаличныхДенег не нужно
		// перезаполнять.
		// Таблица ТаблицаОписьСдаваемыхНаличныхДенег заполняется константными строками(значениями) из макета
		// НоминалыБанкнот.
		
		МакетНоминалыБанкнот = Документы.РасходныйКассовыйОрдер.ПолучитьМакет("ПФ_MXL_ПрепроводительнаяВедомостьНакладнаяКСумке");
		ОбластьНоминалыБанкнот = МакетНоминалыБанкнот.ПолучитьОбласть("НоминалыБанкнотСтроки|ВертикальнаяСекция");
		ОбластьКоличествоБанкнот = МакетНоминалыБанкнот.ПолучитьОбласть("НоминалыБанкнотСтроки|КоличествоБанкнот");
		ОбластьСуммаБанкнотБанкнот = МакетНоминалыБанкнот.ПолучитьОбласть("НоминалыБанкнотСтроки|СуммаБанкнот");
		
		Для Высота = 1 По ОбластьНоминалыБанкнот.ВысотаТаблицы Цикл
			СтрокаОписьБанкнот = ТаблицаОписьСдаваемыхНаличныхДенег.Добавить();
			
			// Данный программный блок получает строку с параметром, например "коп_1_100" или "руб_1000_1".
			// Данная строка структурирована символом "_", этот символ заменяется на символ "ПС",
			// в результате получаем строку состоящую из трех строк:
			// Первая строка "коп" - наименование банкноты.
			// Вторая строка "1"   - достоинство банкноты.
			// Третья строка "100" - коэффициент пересчета к рублю
			// или.
			// Первая строка "руб"  - наименование банкноты.
			// Вторая строка "1000" - достоинство банкноты.
			// Третья строка "1"    - коэффициент пересчета к рублю.
			
			СтрокаСФорматированнымПараметром = ОбластьКоличествоБанкнот.ПолучитьОбласть(высота, 1, высота, 1).ТекущаяОбласть.Параметр;
			СтрокаСФорматированнымПараметромМногоСтрочная = СтрЗаменить(СтрокаСФорматированнымПараметром, "_", Символы.ПС);
			СтрокаОписьБанкнот.НаименованиеБанкноты = СтрПолучитьСтроку(СтрокаСФорматированнымПараметромМногоСтрочная, 1) + ".";
			Если СтрокаОписьБанкнот.НаименованиеБанкноты = "руб1." Тогда
				СтрокаОписьБанкнот.НаименованиеБанкноты = "тг.банкноты"
			ИначеЕсли СтрокаОписьБанкнот.НаименованиеБанкноты = "руб2." Тогда
				СтрокаОписьБанкнот.НаименованиеБанкноты = "тг.монеты"
			КонецЕсли;
			СтрокаОписьБанкнот.Номинал = Число(СтрПолучитьСтроку(СтрокаСФорматированнымПараметромМногоСтрочная, 2));
			СтрокаОписьБанкнот.Коэффициент = Число(СтрПолучитьСтроку(СтрокаСФорматированнымПараметромМногоСтрочная, 3));
			СтрокаОписьБанкнот.ПараметрКоличествоБанкнот = СтрокаСФорматированнымПараметром;
			СтрокаОписьБанкнот.ПараметрСуммаБанкнот = ОбластьСуммаБанкнотБанкнот.ПолучитьОбласть(высота, 1, высота, 1).ТекущаяОбласть.Параметр;
		КонецЦикла;
		
	Иначе
		ТаблицаОписьСдаваемыхНаличныхДенег.Загрузить(Объект.ОписьСдаваемыхНаличныхДенег.Выгрузить());
	КонецЕсли;
	
	ТаблицаОписьСдаваемыхНаличныхДенег.Сортировать("Коэффициент Возр, Номинал Убыв");
	Элементы.Сумма.ОтображатьВПодвале = Истина;
	
КонецПроцедуры

&НаСервере
Функция ВходящиеДанныеДляФРСервер(РаспределениеВыручкиПоСекциям, НомерЧека)
	
	Возврат Документы.РасходныйКассовыйОрдер.ПодготовитьДанныеДляПробитияЧека(Объект.Ссылка, РаспределениеВыручкиПоСекциям, НомерЧека);
	
КонецФункции 

&НаСервере
Процедура РасшифровкаПлатежаДокументРасчетовСКонтрагентомПриИзмененииСервер(ИдентификаторСтроки)
	
	ТекущаяСтрока = Объект.РасшифровкаПлатежа.НайтиПоИдентификатору(ИдентификаторСтроки);
	ДокументРасчетовСКонтрагентом = ТекущаяСтрока.ДокументРасчетовСКонтрагентом;
	
	ДенежныеСредстваСервер.ЗаполнитьСистемуНалогообложенияЭлементаФормы(ТекущаяСтрока);
	
	Если ЗначениеЗаполнено(ДокументРасчетовСКонтрагентом) И НЕ СуммаУстановленаВручную Тогда
		ТекущаяСтрока.Сумма = ДенежныеСредстваВызовСервера.ПолучитьСуммуДокумента(ДокументРасчетовСКонтрагентом);
		Объект.СуммаДокумента = ТекущаяСтрока.Сумма;
	КонецЕсли;
	
	Если НЕ ОснованиеУстановленоВручную Тогда
		Документы.РасходныйКассовыйОрдер.ЗаполнитьРеквитыПечатнойФормы(Объект, Новый Структура("Основание"));
	КонецЕсли;
	
	ЗаполнитьСистемуНалогообложения();
	
КонецПроцедуры

&НаКлиенте
Процедура КассаПолучательПриИзменении(Элемент)
    
    // &ЗамерПроизводительности
	ОценкаПроизводительностиРТКлиент.НачатьЗамер(
		     Истина, "Справочник.Кассы.Форма.ФормаВыбора.Открытие");

	КассаПолучательПриИзмененииСервер();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьСНОРасшифровкиНаСервере()
	
	Если Объект.РасшифровкаПлатежа.Количество() = 0
		ИЛИ НЕ ЭтоФискальнаяОперация И Объект.ПробиватьЧекиПоКассеККМ Тогда
		Возврат;
	КонецЕсли;
	
	ДенежныеСредстваСервер.ЗаполнитьСистемуНалогообложенияЭлементаФормы(Объект.РасшифровкаПлатежа);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьСНО(ТекущаяСтрока = Неопределено, ВыводитьСообщения = Ложь)
	
	ЕстьНеСоответствие = Ложь;
	
	Если ЭтоФискальнаяОперация И Объект.ПробиватьЧекиПоКассеККМ Тогда
		
		ШаблонСообщений = НСтр("ru='В строке №%1 в документе расчетов с контрагентом система налогообложения отличается от системы налогообложения документа.'");
		
		Для каждого СтрокаРасшифровки Из Объект.РасшифровкаПлатежа Цикл
			
			Если ЗначениеЗаполнено(СтрокаРасшифровки.СистемаНалогообложения)
				И Объект.СистемаНалогообложения <> СтрокаРасшифровки.СистемаНалогообложения Тогда
				
				ЕстьНеСоответствие = Истина;
				
				Если ВыводитьСообщения
					И (ТекущаяСтрока = Неопределено ИЛИ ТекущаяСтрока = СтрокаРасшифровки) Тогда
					
					ОбщегоНазначенияКлиент.СообщитьПользователю(
						СтрШаблон(ШаблонСообщений, СтрокаРасшифровки.НомерСтроки),
						,
						СтрШаблон("Объект.РасшифровкаПлатежа[%1].СистемаНалогообложения", СтрокаРасшифровки.НомерСтроки-1));
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
		
	Если ЕстьНеСоответствие Тогда
		
		Элементы.ДекорацияНесоответствиеСНО.Видимость = Истина;
		
	Иначе
		
		Элементы.ДекорацияНесоответствиеСНО.Видимость = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСистемуНалогообложения()
	
	Если ЭтоФискальнаяОперация И Объект.ПробиватьЧекиПоКассеККМ Тогда
		ДенежныеСредстваСервер.ЗаполнитьСистемуНалогообложения(Объект);
	Иначе
		Объект.СистемаНалогообложения = Перечисления.ТипыСистемНалогообложенияККТ.ПустаяСсылка();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокТелефоновКонтрагента()
	
	Элементы.ТелефонСтрокой.КнопкаВыпадающегоСписка = Ложь;
	Элементы.ТелефонСтрокой.СписокВыбора.Очистить();
	
	Если НЕ ЗначениеЗаполнено(Объект.Контрагент) Тогда
		Возврат;
	КонецЕсли;
	
	СписокТелефонов = ПодключаемоеОборудованиеРТ.ТелефоныОбъектаДляЧека(Объект.Контрагент);
	
	Если СписокТелефонов.Количество() > 0 Тогда
		
		Элементы.ТелефонСтрокой.КнопкаВыпадающегоСписка = Истина;
		Элементы.ТелефонСтрокой.ОтображениеКнопкиВыбора = ОтображениеКнопкиВыбора.ОтображатьВВыпадающемСписке;
		
		Для каждого НомерТелефона Из СписокТелефонов Цикл
			Элементы.ТелефонСтрокой.СписокВыбора.Добавить(НомерТелефона.Значение, НомерТелефона.Представление);
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПредставитьТелефонИEmailКлиент()
	
	Если ЗначениеЗаполнено(Объект.Телефон) Тогда
		Если ЗначениеЗаполнено(Объект.Телефон) Тогда
			СохраненныйТелефон = Число(Объект.Телефон);
		Иначе
			СохраненныйТелефон = 0;
		КонецЕсли;
		Телефон = 0;
		ПодключаемоеОборудованиеРТКлиент.ПреобразоватьТелефонКПользовательскомуВиду(СохраненныйТелефон, Телефон, ТелефонСтрокой);
		ДанныеSMSИлиEmail = ТелефонСтрокой;
		ОтправлятьЧек = "НаТелефон";
	ИначеЕсли ЗначениеЗаполнено(Объект.АдресЭП) Тогда
		ДанныеSMSИлиEmail = Объект.АдресЭП;
		ОтправлятьЧек = "НаЕмаил";
	Иначе
		ОтправлятьЧек = "НеОтправлять";
	КонецЕсли;
	
	ОтправлятьЧекПриИзмененииКлиент();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправлятьЧекПриИзмененииКлиент()
	
	Элементы.АдресЭП.Видимость        = ОтправлятьЧек = "НаЕмаил";
	Элементы.ТелефонСтрокой.Видимость = ОтправлятьЧек = "НаТелефон";
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуРасшифровкиПлатежа()
	
	// Проверим, чтобы ключевые поля документы были заполнены, чтобы в дополнительной форме отборы работали корректно.
	Если НЕ ПроверитьЗаполнениеКлючевыхРеквизитов() Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура("Ссылка, Дата, ХозяйственнаяОперация, Организация, Контрагент,
		| СистемаНалогообложения, КассаККМ, ЗаказПокупателя");
	ЗаполнитьЗначенияСвойств(ПараметрыФормы, Объект);
	
	ПараметрыФормы.Вставить("Магазин",                       Магазин);
	ПараметрыФормы.Вставить("СтатьяДвиженияДенежныхСредств", СтатьяДвиженияДенежныхСредств);
	ПараметрыФормы.Вставить("ЭтоФискальнаяОперация",         Объект.ПробиватьЧекиПоКассеККМ И ЭтоФискальнаяОперация);
	ПараметрыФормы.Вставить("ФормаОплаты",                   ПредопределенноеЗначение("Перечисление.ФормыОплаты.Наличная"));
	
	АдресХранилищаРасшифровкаПлатежа = ПоместитьВХранилищеРасшифровкуПлатежа();
	ПараметрыФормы.Вставить("АдресХранилищаРасшифровкаПлатежа", АдресХранилищаРасшифровкаПлатежа);
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ПараметрыФормы", ПараметрыФормы);
	СтруктураПараметров.Вставить("ТолькоПросмотр", ТолькоПросмотр);
	
	Оповещение = Новый ОписаниеОповещения("ОткрытьФормуРасшифровкиЗавершение", ЭтотОбъект);
	
	ОткрытьФорму("ОбщаяФорма.РасшифровкаПлатежа", СтруктураПараметров, ЭтотОбъект,,,,Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуРасшифровкиЗавершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Если РезультатЗакрытия = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, РезультатЗакрытия);
	ЗаполнитьЗначенияСвойств(Объект,     РезультатЗакрытия, "СистемаНалогообложения");
	
	ПолучитьРасшифровкаПлатежаИзВременногоХранилищаНаСервере(РезультатЗакрытия.АдресХранилищаРасшифровкаПлатежа);
	
	Объект.СуммаДокумента = ОбработкаТабличнойЧастиТоварыКлиентСервер.СуммаДокумента(Объект.РасшифровкаПлатежа, Истина);
	
	ПроверитьСНО();
	
	Если Объект.РасшифровкаПлатежа.Количество() > 1 Тогда
		СуммаУстановленаВручную = Ложь;
	КонецЕсли;
	
	УправлениеЭлементамиРасшифровкиПлатежа(ЭтотОбъект);
	
	Если НЕ ОснованиеУстановленоВручную Тогда
		ОткрытьФормуРасшифровкиЗавершениеНаСервере();
	КонецЕсли;
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаСервере
Функция ПоместитьВХранилищеРасшифровкуПлатежа()

	РасшифровкаПлатежа = Объект.РасшифровкаПлатежа.Выгрузить();
	
	Адрес = ПоместитьВоВременноеХранилище(РасшифровкаПлатежа, УникальныйИдентификатор);
	
	Возврат Адрес;

КонецФункции

&НаСервере
Процедура ПолучитьРасшифровкаПлатежаИзВременногоХранилищаНаСервере(АдресХранилищаРасшифровкаПлатежа)
	
	РасшифровкаПлатежа = ПолучитьИзВременногоХранилища(АдресХранилищаРасшифровкаПлатежа);
	Объект.РасшифровкаПлатежа.Загрузить(РасшифровкаПлатежа);
	
	ДобавитьСтрокуВРасшифровкуПриНеобходимости();
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьСтрокуВРасшифровкуПриНеобходимости()
	
	Если Объект.РасшифровкаПлатежа.Количество() > 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ОплатаПоставщику
		ИЛИ Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратОплатыКлиенту
		ИЛИ Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПрочиеРасходы Тогда
		
		НоваяСтрока = Объект.РасшифровкаПлатежа.Добавить();
		НоваяСтрока.СтатьяДвиженияДенежныхСредств = СтатьяДвиженияДенежныхСредств;
		
		ДенежныеСредстваСервер.ЗаполнитьПризнакСпособаРасчета(Объект, НоваяСтрока);
		
	ИначеЕсли Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.СдачаДенежныхСредствВБанк Тогда
		
		НоваяСтрока = Объект.РасшифровкаПлатежа.Добавить();
		НоваяСтрока.ОперацияКассовойОтчетности = ПредопределенноеЗначение("Справочник.ОперацииКассовойОтчетности.ПоступлениеОтПродажиТоваров");
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ПроверитьЗаполнениеКлючевыхРеквизитов()
	
	Отказ = Ложь;
	
	Если НЕ ЗначениеЗаполнено(Объект.Дата) Тогда
		ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения("Поле", "Заполнение", НСтр("ru = 'Дата'"));
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, "Дата", "Объект", Отказ);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.Организация) Тогда
		ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения("Поле", "Заполнение", НСтр("ru = 'Организация'"));
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, "Организация", "Объект", Отказ);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.Касса) Тогда
		ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения("Поле", "Заполнение", НСтр("ru = 'Касса'"));
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, "Касса", "Объект", Отказ);
	КонецЕсли;
	
	Если Объект.ХозяйственнаяОперация <> ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ПрочиеРасходы")
		И НЕ ЗначениеЗаполнено(Объект.Контрагент) Тогда
		ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения("Поле", "Заполнение", НСтр("ru = 'Контрагент'"));
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, "Контрагент", "Объект", Отказ);
	КонецЕсли;
	
	Возврат НЕ Отказ;
	
КонецФункции

&НаСервере
Функция ЗаказПокупателя()
	
	Если ТипЗнч(Объект.ДокументОснование) = Тип("ДокументСсылка.ПриходныйКассовыйОрдер") Тогда
		ЗаказПокупателя = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ДокументОснование,"ЗаказПокупателя");
		Возврат ЗаказПокупателя;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции // ЗаказПокупателя()

&НаСервере
Процедура МагазинПриИзмененииСервер()
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("РасшифровкаПлатежа", Объект.РасшифровкаПлатежа.Выгрузить(,"ДокументРасчетовСКонтрагентом"));
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	РасшифровкаПлатежа.ДокументРасчетовСКонтрагентом
		|ПОМЕСТИТЬ ДокРасчетов
		|ИЗ
		|	&РасшифровкаПлатежа КАК РасшифровкаПлатежа
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ДокРасчетов.ДокументРасчетовСКонтрагентом.Магазин КАК Магазин
		|ИЗ
		|	ДокРасчетов КАК ДокРасчетов
		|ГДЕ НЕ ДокРасчетов.ДокументРасчетовСКонтрагентом.Магазин ЕСТЬ NULL";

	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	Выборка = Результат.Выбрать();
	Выборка.Следующий();
	
	Если Магазин = Выборка.Магазин Тогда
		Возврат;
	КонецЕсли;
	
	ОбъектФормы = РеквизитФормыВЗначение("Объект");
	РасшифровкаПлатежа = ОбъектФормы.РасшифровкаПлатежа;
	
	РасшифровкаПлатежа.ЗагрузитьКолонку(Новый Массив(РасшифровкаПлатежа.Количество()), "ДокументРасчетовСКонтрагентом");
	Объект.РасшифровкаПлатежа.Загрузить(РасшифровкаПлатежа.Выгрузить());
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВозможностьПечатиЧекаЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат Тогда
		НапечататьЧекКлиент();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НапечататьЧекКлиент()
	
	Перем Отказ, ИдентификаторУстройства, ИспользоватьКассуБезПодключенияОборудования, РаспределениеВыручкиПоСекциям;
	
	ПодготовитьИПроверитьПечатьЧека(Отказ, ИдентификаторУстройства, ИспользоватьКассуБезПодключенияОборудования, РаспределениеВыручкиПоСекциям);
	
	Если Отказ Тогда
		Возврат
	КонецЕсли;
	
	Если НЕ ИспользоватьПодключаемоеОборудование ИЛИ ИспользоватьКассуБезПодключенияОборудования Тогда
		
		Если НомерДокументаКассыККМ[Объект.КассаККМ] <> Неопределено Тогда
			Объект.НомерЧекаККМ  = НомерДокументаКассыККМ[Объект.КассаККМ];
		Иначе
			Объект.НомерЧекаККМ  = ПорядковыйНомерПродажи;
		КонецЕсли;
		Объект.ПробитЧек   = Истина;
		
		Модифицированность = Истина;
		
		РезультатЗаписи = Записать(Новый Структура("РежимЗаписи", РежимЗаписиДокумента.Проведение));
		
		Если РезультатЗаписи = Истина Тогда
			НомерДокументаКассыККМ[Объект.КассаККМ] = Объект.НомерЧекаККМ + 1;
			ПорядковыйНомерПродажи = ПорядковыйНомерПродажи + 1;
		КонецЕсли;
		
		Возврат;
		
	КонецЕсли;
	
	Если ИдентификаторУстройства <> Неопределено Тогда
		
		ЭтаФорма.Доступность = Ложь;
		
		Контекст = Новый Структура("ИдентификаторУстройства, РаспределениеВыручкиПоСекциям", ИдентификаторУстройства, РаспределениеВыручкиПоСекциям);
		
		ПараметрыОперации = Новый Структура;
		ПараметрыОперации.Вставить("ТипИнкассации", 1);
		ПараметрыОперации.Вставить("Сумма"        , Объект.СуммаДокумента);
		ПараметрыОперации.Вставить("РаспределениеВыручкиПоСекциям", РаспределениеВыручкиПоСекциям);
		
		ПараметрыКассы = ДополнительныеПараметрыККМ(Объект.Организация, ТекущаяДата(), Объект.КассаККМ);
		ПараметрыОперации.Вставить("РеквизитыКассыККМ", ПараметрыКассы);
		
		Оповещение = Новый ОписаниеОповещения("НапечататьЧекКлиентИнкассацияЗавершение", ЭтотОбъект, Контекст);
		//МенеджерОборудованияКлиент.НачатьИнкассациюНаФискальномУстройстве(Оповещение, УникальныйИдентификатор, ПараметрыОперации, ИдентификаторУстройства); 
		ВыходныеПараметры = Новый Массив;
		ВыходныеПараметры.Добавить(0);
		ВыходныеПараметры.Добавить(0);
		ВыходныеПараметры.Добавить(0);
		ВыходныеПараметры.Добавить(0);
		
		РезультатВыполнения = Новый Структура;
		РезультатВыполнения.Вставить("Результат", Истина);
		РезультатВыполнения.Вставить("ОписаниеОшибки", "Ошибок нет.");
		РезультатВыполнения.Вставить("ВыходныеПараметры", ВыходныеПараметры);
		РезультатВыполнения.Вставить("ПараметрыОперацииИнкассации", ПараметрыОперации);
		
		ВыполнитьОбработкуОповещения(Оповещение, РезультатВыполнения);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НапечататьЧекКлиентИнкассацияЗавершение(РезультатВыполнения, ПараметрыОперации) Экспорт
	
	Если РезультатВыполнения.Результат Тогда
		
		// &ЗамерПроизводительности 
		Замер = ОценкаПроизводительностиРТКлиент.НачатьЗамер(Ложь, 
											"Документ.РасходныйКассовыйОрдер.Форма.ФормаДокумента.Команда.ПробитьЧек",
																Ложь);
		
		ПараметрыОперации.Вставить("Замер", Замер);
		
		//для РК переносим в обработку
		Если Ложь Тогда //ОтключенныйФункционал
			
		// Установить полученное значение номера чека реквизиту документа.
		Если ЗначениеЗаполнено(РезультатВыполнения.ВыходныеПараметры[1]) Тогда
			Объект.НомерЧекаККМ = РезультатВыполнения.ВыходныеПараметры[1];
		Иначе
			Объект.НомерЧекаККМ = НомерДокументаКассыККМ[Объект.КассаККМ];
		КонецЕсли;
		
		РезультатЗаписи = Записать(Новый Структура("РежимЗаписи", РежимЗаписиДокумента.Проведение));
		
		Если РезультатЗаписи = Истина Тогда
			НомерДокументаКассыККМ[Объект.КассаККМ] = Объект.НомерЧекаККМ + 1;
			ПорядковыйНомерПродажи = ПорядковыйНомерПродажи + 1;
		КонецЕсли;
		КонецЕсли;
	
		// Готовим данные
		НомерЧека = НомерДокументаКассыККМ[Объект.КассаККМ] + 1;
		ОбщиеПараметры  = ВходящиеДанныеДляФРСервер(ПараметрыОперации.РаспределениеВыручкиПоСекциям, НомерЧека);
		
		Оповещение = Новый ОписаниеОповещения("НапечататьЧекКлиентЗавершение", ЭтотОбъект, ПараметрыОперации);
		
		ПодключенноеОборудование = Новый Структура("Терминал, ФискальныеУстройства");
		ПодключенноеОборудование.ФискальныеУстройства = Новый Массив; 
		ПодключенноеОборудование.ФискальныеУстройства.Добавить(ПараметрыОперации.ИдентификаторУстройства);
		
		ПараметрыОперации = Новый Структура;
		ПараметрыОперации.Вставить("ДокументСсылка", Объект.Ссылка);
		ПараметрыОперации.Вставить("Организация", Объект.Организация);
		ПараметрыОперации.Вставить("Партнер", Объект.Контрагент);
		ПараметрыОперации.Вставить("ПодключенноеОборудование", ПодключенноеОборудование);
		ПараметрыОперации.Вставить("ТорговыйОбъект", Неопределено);
		ПараметрыОперации.Вставить("ПараметрыОперацииИнкассации", РезультатВыполнения.ПараметрыОперацииИнкассации);
		
		ОткрытьФорму(
			"Обработка.ПечатьЧека.Форма",
			ПараметрыОперации,
			ЭтотОбъект,,,,
			Оповещение);
		
	Иначе
		ЭтаФорма.Доступность = Истина;
		ТекстСообщения = НСтр("ru = 'При операции внесения/выемки произошла ошибка.
									|Дополнительное описание: %ДополнительноеОписание%'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ДополнительноеОписание%", РезультатВыполнения.ОписаниеОшибки);
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
	
КонецПроцедуры

&НаКлиенте
Процедура НапечататьЧекКлиентЗавершение(РезультатВыполнения, ПараметрыОперации) Экспорт
	
	ЭтаФорма.Доступность = Истина;
	
	Если РезультатВыполнения = КодВозвратаДиалога.Отмена ИЛИ РезультатВыполнения = Неопределено Тогда
		// Отмена в форме печати чека
	ИначеЕсли РезультатВыполнения.Свойство("Результат") И РезультатВыполнения.Результат Тогда
		
		// Установить полученное значение номера чека реквизиту документа.
		Если ЗначениеЗаполнено(РезультатВыполнения.ВыходныеПараметры[1]) Тогда
			Объект.НомерЧекаККМ = РезультатВыполнения.ВыходныеПараметры[1];
		Иначе
			Объект.НомерЧекаККМ = НомерДокументаКассыККМ[Объект.КассаККМ];
		КонецЕсли;
		
		Объект.ПробитЧек    = Истина;
		Модифицированность  = Истина;
		РезультатЗаписи = Записать(Новый Структура("РежимЗаписи", РежимЗаписиДокумента.Проведение));
		
		Если РезультатЗаписи = Истина Тогда
			НомерДокументаКассыККМ[Объект.КассаККМ] = Объект.НомерЧекаККМ + 1;
			ПорядковыйНомерПродажи = ПорядковыйНомерПродажи + 1;
		КонецЕсли;
		
	Иначе
		ТекстСообщения = НСтр("ru = 'При печати чека произошла ошибка.
									|Чек не напечатан на фискальном устройстве.
									|Дополнительное описание: %ДополнительноеОписание%'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ДополнительноеОписание%", РезультатВыполнения.ОписаниеОшибки);
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
	// &ЗамерПроизводительности 
	ОценкаПроизводительностиРТКлиент.ЗакончитьЗамер(ПараметрыОперации.Замер);

КонецПроцедуры

&НаСервере
Процедура ПодготовитьИПроверитьПечатьЧека(Отказаться, 
										  ИдентификаторУстройства, 
										  ИспользоватьКассуБезПодключенияОборудования,
										  РаспределениеВыручкиПоСекциям)
	
	Отказаться = Ложь;
	
	Если ЗначениеЗаполнено(Объект.КассаККМ)  Тогда
		ПараметрыКассыККМ       = ЗначениеНастроекВызовСервера.ПараметрыКассыККМ(Объект.КассаККМ);
		ИдентификаторУстройства = ПараметрыКассыККМ.ИдентификаторУстройства;
		
		РаспределениеВыручкиПоСекциям = ПараметрыКассыККМ.РаспределениеВыручкиПоСекциям;
		ИспользоватьКассуБезПодключенияОборудования = ПараметрыКассыККМ.ИспользоватьБезПодключенияОборудования;
		
		СтруктураСостояниеКассовойСмены = РозничныеПродажиСервер.ПолучитьСостояниеКассовойСмены(Объект.КассаККМ);
		
		КассоваяСмена = СтруктураСостояниеКассовойСмены.КассоваяСмена;
		
		ТекстОшибки = НСтр("ru='Кассовая смена не открыта.'");
		Если НЕ РозничныеПродажиСервер.СменаОткрыта(КассоваяСмена, Объект.Дата, ТекстОшибки) Тогда
			
			ОбщегоНазначения.СообщитьПользователю(
				ТекстОшибки,
				,
				"Объект.КассаККМ",
				,
				Отказаться);
			
		КонецЕсли;
	Иначе
		ТекстОшибки = НСтр("ru='Не выбрана касса ККМ.'");
		ОбщегоНазначения.СообщитьПользователю(
			ТекстОшибки,
			,
			"Объект.КассаККМ",
			,
			Отказаться);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьТекущийОстаток()
	
	СтрокаОстаток = "";
	Если ЗначениеЗаполнено(Объект.Касса) Тогда
		ЗапросОстатокВКассе = Новый Запрос;
		ЗапросОстатокВКассе.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	СУММА(ДенежныеСредстваНаличныеОстатки.СуммаОстаток) КАК СуммаОстаток
		|ИЗ
		|	РегистрНакопления.ДенежныеСредстваНаличные.Остатки(
		|			,
		|			Организация = &Организация
		|				И Касса = &Касса
		|				И Магазин = &Магазин
		|				И ДоговорКонтрагента = &ДоговорКонтрагента) КАК ДенежныеСредстваНаличныеОстатки";
		ЗапросОстатокВКассе.УстановитьПараметр("Организация", Объект.Организация);
		ЗапросОстатокВКассе.УстановитьПараметр("Магазин", Магазин);
		ЗапросОстатокВКассе.УстановитьПараметр("Касса", Объект.Касса);
		ЗапросОстатокВКассе.УстановитьПараметр("ДоговорКонтрагента", Объект.ДоговорКонтрагента);
		Выборка = ЗапросОстатокВКассе.Выполнить().Выбрать();
		ТекущийОстатокВКассе = 0;
		Пока Выборка.Следующий() Цикл
			ТекущийОстатокВКассе = Выборка.СуммаОстаток;
		КонецЦикла;
		
		НадписьОстатокДС = ТекущийОстатокВКассе;
		
		ИспользоватьАгентскиеПлатежиИРазделениеВыручки = ПолучитьФункциональнуюОпцию("ИспользоватьАгентскиеПлатежиИРазделениеВыручки");
		Если ЗначениеЗаполнено(Объект.ДоговорКонтрагента) Тогда
			СтрокаОстаток = НСтр("ru = 'Остаток агентской выручки по договору ""%1"" в кассе: %2 тг.'");
			ПодсказкаНадписьОстатокДС = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(СтрокаОстаток, Объект.ДоговорКонтрагента, ТекущийОстатокВКассе);
			
		Иначе
			Если ИспользоватьАгентскиеПлатежиИРазделениеВыручки Тогда
				СтрокаОстаток = НСтр("ru = 'Текущий остаток собственных средств в кассе: %1 тг.'");
			Иначе
				СтрокаОстаток = НСтр("ru = 'Текущий остаток в кассе: %1 тг.'");
			КонецЕсли;
			ПодсказкаНадписьОстатокДС = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(СтрокаОстаток, ТекущийОстатокВКассе);
			
		КонецЕсли;
		
		
		Элементы.НадписьОстатокДС.Заголовок = ТекущийОстатокВКассе;
		Элементы.НадписьОстатокДС.Подсказка = ПодсказкаНадписьОстатокДС;
		
	Иначе
		
		Элементы.НадписьОстатокДС.Заголовок = "";
		Элементы.НадписьОстатокДС.Подсказка = "";
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОткрытьФормуРасшифровкиЗавершениеНаСервере()
	Документы.РасходныйКассовыйОрдер.ЗаполнитьРеквитыПечатнойФормы(Объект, Новый Структура("Основание"));
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьРеквитыПечатнойФормыСервер()
	
	Документы.РасходныйКассовыйОрдер.ЗаполнитьРеквитыПечатнойФормы(Объект);
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаСервере
Процедура ОпределитьРучноеИзменениеРеквизитовПечатнойФормы()
	
	Если ЗначениеЗаполнено(Объект.Основание) Тогда
		Основание = Объект.Основание;
		Документы.РасходныйКассовыйОрдер.ЗаполнитьРеквитыПечатнойФормы(Объект, Новый Структура("Основание"));
		ОснованиеУстановленоВручную = НЕ Основание = Объект.Основание;
		Объект.Основание = Основание;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыборФизЛицаЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ВыборФизЛицаЗавершениеНаСервере(Результат);
	
КонецПроцедуры

&НаСервере
Процедура ВыборФизЛицаЗавершениеНаСервере(Результат)
	Документы.РасходныйКассовыйОрдер.ЗаполнитьРеквитыПечатнойФормы(Объект, Новый Структура("Выдать", Результат));
КонецПроцедуры

&НаСервереБезКонтекста
Функция ДополнительныеПараметрыККМ(Организация, Дата, КассаККМ)
	
	Возврат ИнтеграцияWebKassaВызовСервераПереопределяемый.ПолучитьСведенияОбОрганизацииИКассеККМ(Организация, Дата, КассаККМ);
	
КонецФункции

#КонецОбласти