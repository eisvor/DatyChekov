#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Получение данных для формирования электронного документа.
//
// Параметры:
//  СсылкаНаОбъект - ДокументСсылка.РеализацияТоваров - ссылка на документ.
// 
// Возвращаемое значение:
//  Структура - структура данных для печати.
//
Функция ПолучитьДанныеДляЭД(СсылкаНаОбъект) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Товары.Ссылка.Контрагент КАК Владелец,
	|	"""" КАК Идентификатор,
	|	Товары.Номенклатура КАК Номенклатура,
	|	Товары.Характеристика КАК Характеристика,
	|	Товары.Упаковка КАК Упаковка
	|ИЗ
	|	Документ.РеализацияТоваров.Товары КАК Товары
	|ГДЕ
	|	Товары.Ссылка = &Ссылка";
	Запрос.УстановитьПараметр("Ссылка", СсылкаНаОбъект);
	ТаблицаОтбора = Запрос.Выполнить().Выгрузить();
	
	МенеджерТаблиц = Новый МенеджерВременныхТаблиц;
	СопоставлениеНоменклатурыКонтрагентов.СоздатьВременнуюТаблицуСоответствияНоменклатуры(ТаблицаОтбора, "втНоменклатураКонтрагента", МенеджерТаблиц);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерТаблиц;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	РеализацияТоваров.Ссылка КАК Ссылка,
	|	РеализацияТоваров.Организация КАК Организация,
	|	РеализацияТоваров.Магазин КАК Магазин,
	|	РеализацияТоваров.Склад КАК Склад,
	|	РеализацияТоваров.ЦенаВключаетНДС КАК ЦенаВключаетНДС
	|ПОМЕСТИТЬ ТаблицаДанныхДокументов
	|ИЗ
	|	Документ.РеализацияТоваров КАК РеализацияТоваров
	|ГДЕ
	|	РеализацияТоваров.Ссылка = &Ссылка";
	Запрос.УстановитьПараметр("Ссылка", СсылкаНаОбъект);
	Запрос.Выполнить();
	
	ПоместитьВременнуюТаблицуТоваров(МенеджерТаблиц);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерТаблиц;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	РеализацияТоваров.Ссылка КАК Ссылка,
	|	РеализацияТоваров.Номер КАК Номер,
	|	РеализацияТоваров.Дата КАК Дата,
	|	РеализацияТоваров.Организация КАК Организация,
	|	РеализацияТоваров.Контрагент КАК Контрагент,
	|	РеализацияТоваров.БанковскийСчетОрганизации КАК БанковскийСчетОрганизации,
	|	РеализацияТоваров.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	РеализацияТоваров.ДоговорКонтрагента.Наименование КАК НаименованиеДоговора,
	|	ВЫБОР
	|		КОГДА РеализацияТоваров.Организация.ОбособленноеПодразделение
	|			ТОГДА РеализацияТоваров.Организация
	|		ИНАЧЕ """"
	|	КОНЕЦ КАК Грузоотправитель,
	|	"""" КАК Грузополучатель,
	|	"""" КАК АдресДоставки,
	|	"""" КАК АдресДоставкиЗначенияПолей,
	|	"""" КАК Перевозчик,
	|	"""" КАК НомерТранспортнойНакладной,
	|	"""" КАК ДатаТранспортнойНакладной,
	|	"""" КАК СведенияОТранспортировкеИГрузе,
	|	"""" КАК ДатаОтгрузки,
	|	РеализацияТоваров.СуммаДокумента КАК СуммаДокумента,
	|	РеализацияТоваров.ЦенаВключаетНДС КАК ЦенаВключаетНДС,
	|	&Валюта КАК Валюта,
	|	&ВалютаКод КАК ВалютаКод,
	|	&Валюта КАК ВалютаНаименование,
	|	РеализацияТоваров.Комментарий КАК ДополнительнаяИнформация,
	|	"""" КАК ОснованиеОтгрузкиТоваров,
	|	"""" КАК СведенияОВыбытииМаркированныхТоваров
	|ИЗ
	|	Документ.РеализацияТоваров КАК РеализацияТоваров
	|ГДЕ
	|	РеализацияТоваров.Ссылка В(&Ссылка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.Ссылка КАК Ссылка,
	|	Товары.НомерСтроки КАК НомерСтроки,
	|	Товары.Номенклатура КАК Номенклатура,
	|	ЕСТЬNULL(втНоменклатураКонтрагента.Наименование, Товары.Номенклатура.НаименованиеПолное) КАК НоменклатураНаименование,
	|	Товары.Номенклатура.Артикул КАК НоменклатураКод,
	|	ЕСТЬNULL(Товары.Номенклатура.КодТНВЭД.Код, """") КАК КодВидаТовара,
	|	ЕСТЬNULL(втНоменклатураКонтрагента.Артикул, Товары.Номенклатура.Артикул) КАК НоменклатураАртикул,
	|	Товары.Номенклатура.СтавкаНДС КАК НоменклатураСтавкаНДС,
	|	Товары.Номенклатура.ТипНоменклатуры КАК ТипНоменклатуры,
	|	ЕСТЬNULL(втНоменклатураКонтрагента.НаименованиеХарактеристики, Товары.Характеристика) КАК Характеристика,
	|	ЕСТЬNULL(втНоменклатураКонтрагента.НаименованиеХарактеристики, Товары.Характеристика.Наименование) КАК ХарактеристикаНаименование,
	|	ЕСТЬNULL(втНоменклатураКонтрагента.ЕдиницаИзмерения, ВЫБОР
	|			КОГДА Товары.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка)
	|				ТОГДА Товары.Номенклатура.ЕдиницаИзмерения
	|			ИНАЧЕ Товары.Упаковка
	|		КОНЕЦ) КАК ЕдиницаИзмерения,
	|	ВЫБОР
	|		КОГДА Товары.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка)
	|			ТОГДА Товары.Номенклатура.ЕдиницаИзмерения.Наименование
	|		ИНАЧЕ Товары.Упаковка.Наименование
	|	КОНЕЦ КАК ЕдиницаИзмеренияНаименование,
	|	ЕСТЬNULL(втНоменклатураКонтрагента.ЕдиницаИзмеренияКод, ВЫБОР
	|			КОГДА Товары.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка)
	|				ТОГДА Товары.Номенклатура.ЕдиницаИзмерения.Код
	|			ИНАЧЕ ""0000""
	|		КОНЕЦ) КАК ЕдиницаИзмеренияКод,
	|	ВЫБОР
	|		КОГДА Товары.Номенклатура.ЕдиницаИзмеренияТНВЭД = ЗНАЧЕНИЕ(Справочник.БазовыеЕдиницыИзмерения.ПустаяСсылка)
	|			ТОГДА Товары.Номенклатура.ЕдиницаИзмерения.Код
	|		ИНАЧЕ Товары.Номенклатура.ЕдиницаИзмеренияТНВЭД.Код
	|	КОНЕЦ КАК ЕдиницаИзмеренияТНВЭДКод,
	|	ВЫБОР
	|		КОГДА Товары.Номенклатура.ЕдиницаИзмеренияТНВЭД = ЗНАЧЕНИЕ(Справочник.БазовыеЕдиницыИзмерения.ПустаяСсылка)
	|			ТОГДА Товары.Номенклатура.ЕдиницаИзмерения.Наименование
	|		ИНАЧЕ Товары.Номенклатура.ЕдиницаИзмеренияТНВЭД.Наименование
	|	КОНЕЦ КАК ЕдиницаИзмеренияТНВЭДНаименование,
	|	Товары.КоличествоУпаковок КАК Количество,
	|	Товары.КоличествоПоРНПТ КАК КоличествоПоРНПТ,
	|	Товары.Количество КАК МассаНетто,
	|	Товары.Цена КАК Цена,
	|	Товары.Сумма КАК Сумма,
	|	Товары.СтавкаНДС КАК СтавкаНДС,
	|	Товары.СуммаНДС КАК СуммаНДС,
	|	Товары.Ссылка.ЦенаВключаетНДС КАК НДСУчтеноВСумме,
	|	ВЫБОР
	|		КОГДА Товары.Ссылка.ЦенаВключаетНДС
	|			ТОГДА Товары.Сумма
	|		ИНАЧЕ Товары.Сумма + Товары.СуммаНДС
	|	КОНЕЦ КАК СуммаСНДС,
	|	ВЫБОР
	|		КОГДА Товары.Ссылка.ЦенаВключаетНДС
	|			ТОГДА Товары.Сумма - Товары.СуммаНДС
	|		ИНАЧЕ Товары.Сумма
	|	КОНЕЦ КАК СуммаБезНДС,
	|	Товары.Сумма + Товары.СуммаРучнойСкидки + Товары.СуммаАвтоматическойСкидки КАК СуммаБезСкидки,
	|	Товары.СуммаРучнойСкидки + Товары.СуммаАвтоматическойСкидки КАК Скидка,
	|	ВЫБОР
	|		КОГДА втНоменклатураКонтрагента.Идентификатор ЕСТЬ NULL
	|			ТОГДА Товары.Номенклатура
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|	КОНЕЦ КАК НоменклатураИБ,
	|	ВЫБОР
	|		КОГДА втНоменклатураКонтрагента.Идентификатор ЕСТЬ NULL
	|			ТОГДА Товары.Характеристика
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
	|	КОНЕЦ КАК ХарактеристикаИБ,
	|	ВЫБОР
	|		КОГДА втНоменклатураКонтрагента.Идентификатор ЕСТЬ NULL
	|			ТОГДА Товары.Упаковка
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка)
	|	КОНЕЦ КАК УпаковкаИБ,
	|	Товары.НомерГТД КАК НомерГТД,
	|	ВЫБОР
	|		КОГДА Товары.Номенклатура.СтранаПроисхождения = ЗНАЧЕНИЕ(Справочник.СтраныМира.ПустаяСсылка)
	|			ТОГДА """"
	|		ИНАЧЕ Товары.Номенклатура.СтранаПроисхождения.Код
	|	КОНЕЦ КАК СтранаПроисхожденияКод,
	|	Товары.Номенклатура.КодТНВЭД.ПрослеживаемыйТовар КАК ПрослеживаемыйТовар,
	|	ВЫБОР
	|		КОГДА Товары.Номенклатура.СтранаПроисхождения = ЗНАЧЕНИЕ(Справочник.СтраныМира.ПустаяСсылка)
	|			ТОГДА """"
	|		ИНАЧЕ Товары.Номенклатура.СтранаПроисхождения.Наименование
	|	КОНЕЦ КАК СтранаПроисхожденияНаименование,
	|	ЕСТЬNULL(втНоменклатураКонтрагента.Идентификатор, """") КАК ИдентификаторНоменклатурыПоставщика,
	|	Товары.Склад КАК Склад,
	|	Товары.Организация КАК Организация,
	|	Товары.Поставщик КАК Поставщик,
	|	Товары.Договор КАК Договор
	|ИЗ
	|	ТаблицаТоваров КАК Товары
	|		ЛЕВОЕ СОЕДИНЕНИЕ втНоменклатураКонтрагента КАК втНоменклатураКонтрагента
	|		ПО Товары.Номенклатура = втНоменклатураКонтрагента.Номенклатура
	|			И Товары.Характеристика = втНоменклатураКонтрагента.Характеристика
	|			И Товары.Упаковка = втНоменклатураКонтрагента.Упаковка
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Товары.Номенклатура КАК Номенклатура,
	|	ЕСТЬNULL(втНоменклатураКонтрагента.НаименованиеХарактеристики, Товары.Характеристика) КАК Характеристика,
	|	ЕСТЬNULL(втНоменклатураКонтрагента.ЕдиницаИзмерения, ВЫБОР
	|			КОГДА Товары.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка)
	|				ТОГДА Товары.Номенклатура.ЕдиницаИзмерения
	|			ИНАЧЕ Товары.Упаковка
	|		КОНЕЦ) КАК ЕдиницаИзмерения,
	|	ЕСТЬNULL(втНоменклатураКонтрагента.Штрихкод, Штрихкоды.Штрихкод) КАК Штрихкод
	|ИЗ
	|	ТаблицаТоваров КАК Товары
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.Штрихкоды КАК Штрихкоды
	|		ПО Товары.Номенклатура = Штрихкоды.Владелец
	|			И Товары.Характеристика = Штрихкоды.Характеристика
	|			И Товары.Упаковка = Штрихкоды.Упаковка
	|		ЛЕВОЕ СОЕДИНЕНИЕ втНоменклатураКонтрагента КАК втНоменклатураКонтрагента
	|		ПО Товары.Номенклатура = втНоменклатураКонтрагента.Номенклатура
	|			И Товары.Характеристика = втНоменклатураКонтрагента.Характеристика
	|			И Товары.Упаковка = втНоменклатураКонтрагента.Упаковка
	|ГДЕ
	|	Товары.Ссылка В(&Ссылка)";
	
	Запрос.УстановитьПараметр("Ссылка", СсылкаНаОбъект);
	Запрос.УстановитьПараметр("ВалютаКод", НСтр("ru = '398'"));
	Запрос.УстановитьПараметр("Валюта", НСтр("ru = 'тг.'"));
	
	МассивРезультатов = Запрос.ВыполнитьПакет();
	
	ВыборкаШапки = МассивРезультатов[0].Выбрать();
	
	ВыборкаТоваров = МассивРезультатов[1].Выбрать();
	
	Штрихкоды = МассивРезультатов[2].Выгрузить();
	Штрихкоды.Индексы.Добавить("Номенклатура, Характеристика, ЕдиницаИзмерения");
	
	СтруктураДанных = Новый Структура;
	СтруктураДанных.Вставить("ВыборкаШапки",   	ВыборкаШапки);
	СтруктураДанных.Вставить("ВыборкаТоваров", 	ВыборкаТоваров);
	СтруктураДанных.Вставить("Штрихкоды", 		Штрихкоды);
	
	Возврат СтруктураДанных;
	
КонецФункции

// Возвращает параметры указания серий для товаров, указанных в документе.
//
// Параметры:
//	Объект - ДокументОбъект или ДанныеФормыСтруктура - документ, для которого нужно сформировать параметры проверки.
//
// Возвращаемое значение:
//	Структура - Состав полей определяется требованиями функции
//	            ОбработкаТабличнойЧастиСервер.ЗаполнитьСтатусыУказанияСерий.
//
Функция ПараметрыУказанияСерий(Объект) Экспорт
	
	ПоляСвязи = Новый Массив;
	
	ПараметрыУказанияСерий = Новый Структура;
	ИспользованиеСерийСклад = Ложь;
	
	ИспользованиеСерийСклад = ПолучитьФункциональнуюОпцию("ИспользоватьСерииНоменклатуры");
	
	ПараметрыУказанияСерий.Вставить("ИспользоватьСерииНоменклатуры", ИспользованиеСерийСклад);
	ПараметрыУказанияСерий.Вставить("ПоляСвязи",ПоляСвязи);
	ПараметрыУказанияСерий.Вставить("ЭтоНакладная", Истина);
	
	СкладскиеОперации = Новый Массив;
	СкладскиеОперации.Добавить(Перечисления.СкладскиеОперации.ОтгрузкаКлиенту);
	
	ПараметрыУказанияСерий.Вставить("СкладскиеОперации", СкладскиеОперации);
	
	Возврат ПараметрыУказанияСерий;
	
КонецФункции

// Инициализирует таблицы значений, содержащие данные документа.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура ИнициализироватьДанныеДокумента(ДокументСсылка, ДополнительныеСвойства) Экспорт
	
	ИспользоватьКомиссионнуюТорговлю = ДополнительныеСвойства.ИспользуетсяКомиссионнаяТорговля;
	ИспользоватьУчетИмпортныхТоваров = ДополнительныеСвойства.ИспользуетсяУчетИмпортныхТоваров;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка"   , ДокументСсылка);
	Запрос.УстановитьПараметр("Поставщик", Справочники.Контрагенты.ПустаяСсылка());
	Запрос.УстановитьПараметр("НомерГТД" , Справочники.НомераГТД.ПустаяСсылка());
	Запрос.УстановитьПараметр("Договор"  , Справочники.ДоговорыКонтрагентов.ПустаяСсылка());
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	РеализацияТоваров.Дата КАК Период,
	|	РеализацияТоваров.Ссылка КАК Ссылка,
	|	РеализацияТоваров.Организация КАК Организация,
	|	РеализацияТоваров.Склад КАК Склад,
	|	РеализацияТоваров.Магазин КАК Магазин,
	|	РеализацияТоваров.ЗаказПокупателя КАК ЗаказПокупателя,
	|	РеализацияТоваров.Контрагент КАК Контрагент,
	|	ЗНАЧЕНИЕ(Справочник.АналитикаХозяйственныхОпераций.РеализацияТоваров) КАК АналитикаХозяйственнойОперации,
	|	РеализацияТоваров.Ссылка КАК Основание,
	|	РеализацияТоваров.ЦенаВключаетНДС КАК ЦенаВключаетНДС,
	|	РеализацияТоваров.УчитыватьНДС КАК УчитыватьНДС,
	|	РеализацияТоваров.Магазин.ИспользоватьОрдернуюСхемуПриОтгрузке КАК РеализацияПоОрдернойСхеме,
	|	РеализацияТоваров.ДисконтнаяКарта КАК ДисконтнаяКарта,
	|	РеализацияТоваров.ДокументРасчета КАК ДокументРасчета,
	|	РеализацияТоваров.ДисконтнаяКарта.ВладелецКарты КАК ВладелецДисконтнойКарты,
	|	НЕ РеализацияТоваров.Магазин.СкладУправляющейСистемы КАК ФормироватьДвижения,
	|	&Поставщик КАК Поставщик,
	|	&НомерГТД КАК НомерГТД,
	|	&Договор КАК Договор
	|ИЗ
	|	Документ.РеализацияТоваров КАК РеализацияТоваров
	|ГДЕ
	|	РеализацияТоваров.Ссылка = &Ссылка";
	РезультатЗапроса = Запрос.Выполнить();
	
	Реквизиты = РезультатЗапроса.Выбрать();
	Реквизиты.Следующий(); 
	
	ОбщегоНазначенияРТ.ПеренестиСтрокуВыборкиВПараметрыЗапроса(РезультатЗапроса, Реквизиты, Запрос);
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	РеализацияТоваровТовары.Ссылка,
	|	РеализацияТоваровТовары.НомерСтроки,
	|	РеализацияТоваровТовары.Номенклатура,
	|	РеализацияТоваровТовары.Характеристика,
	|	РеализацияТоваровТовары.Количество,
	|	РеализацияТоваровТовары.Цена,
	|	РеализацияТоваровТовары.Сумма,
	|	РеализацияТоваровТовары.СтавкаНДС,
	|	РеализацияТоваровТовары.СуммаНДС,
	|	РеализацияТоваровТовары.КлючСвязиСерийныхНомеров,
	|	РеализацияТоваровТовары.Продавец,
	|	РеализацияТоваровТовары.Упаковка,
	|	РеализацияТоваровТовары.КоличествоУпаковок,
	|	РеализацияТоваровТовары.КлючСвязи,
	|	РеализацияТоваровТовары.КодСтроки,
	|	РеализацияТоваровТовары.ЗаказПокупателя,
	|	РеализацияТоваровТовары.Резервировать
	|ПОМЕСТИТЬ ТаблицаВЗапросе
	|ИЗ
	|	Документ.РеализацияТоваров.Товары КАК РеализацияТоваровТовары
	|ГДЕ
	|	РеализацияТоваровТовары.Ссылка = &Ссылка
	|   И &ФормироватьДвижения
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СтавкиНДС.Ссылка КАК СтавкаНДС,
	|	СтавкиНДС.Ставка КАК ПроцентСтавки
	|ПОМЕСТИТЬ СтавкиНДС
	|ИЗ
	|	Справочник.СтавкиНДС КАК СтавкиНДС
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	&Магазин КАК Магазин,
	|	ВЫБОР
	|		КОГДА ТаблицаВЗапросе.Номенклатура.ТипНоменклатуры <> ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Услуга)
	|			ТОГДА &Склад
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
	|	КОНЕЦ КАК Склад,
	|	ТаблицаВЗапросе.Номенклатура,
	|	ТаблицаВЗапросе.Характеристика,
	|	ТаблицаВЗапросе.Ссылка КАК ДокументПродажи,
	|	ТаблицаВЗапросе.Продавец,
	|	ТаблицаВЗапросе.ЗаказПокупателя,
	|	ТаблицаВЗапросе.Количество,
	|	ТаблицаВЗапросе.Сумма + ВЫБОР
	|		КОГДА (НЕ &ЦенаВключаетНДС)
	|				И &УчитыватьНДС
	|			ТОГДА ТаблицаВЗапросе.СуммаНДС
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК Стоимость,
	|	(ТаблицаВЗапросе.Количество * ТаблицаВЗапросе.Цена + ВЫБОР
	|		КОГДА (НЕ &ЦенаВключаетНДС)
	|				И &УчитыватьНДС
	|			ТОГДА ТаблицаВЗапросе.Количество * ТаблицаВЗапросе.Цена * ЕСТЬNULL(СтавкиНДС.ПроцентСтавки, 0) / 100
	|		ИНАЧЕ 0
	|	КОНЕЦ) / ВЫБОР
	|		КОГДА ТаблицаВЗапросе.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка)
	|				ИЛИ ТаблицаВЗапросе.Упаковка.Коэффициент = 0
	|			ТОГДА 1
	|		ИНАЧЕ ТаблицаВЗапросе.Упаковка.Коэффициент
	|	КОНЕЦ КАК СтоимостьБезСкидок,
	|	ТаблицаВЗапросе.СуммаНДС КАК НДС,
	|	&АналитикаХозяйственнойОперации,
	|	&Период,
	|	ТаблицаВЗапросе.НомерСтроки
	|ИЗ
	|	ТаблицаВЗапросе КАК ТаблицаВЗапросе
	|		ЛЕВОЕ СОЕДИНЕНИЕ СтавкиНДС КАК СтавкиНДС
	|		ПО ТаблицаВЗапросе.СтавкаНДС = СтавкиНДС.СтавкаНДС
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	&Период,
	|	ТаблицаВЗапросе.Номенклатура,
	|	ТаблицаВЗапросе.Характеристика,
	|	ТаблицаВЗапросе.Сумма,
	|	ТаблицаВЗапросе.Количество,
	|	&ДисконтнаяКарта,
	|	&ВладелецДисконтнойКарты
	|ИЗ
	|	ТаблицаВЗапросе КАК ТаблицаВЗапросе
	|ГДЕ
	|	(НЕ &ДисконтнаяКарта = ЗНАЧЕНИЕ(Справочник.ИнформационныеКарты.ПустаяСсылка))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаВЗапросе.Номенклатура,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КАК ВидДвижения,
	|	ТаблицаВЗапросе.Характеристика,
	|	ТаблицаВЗапросе.Количество,
	|	ВЫБОР
	|		КОГДА ТаблицаВЗапросе.Резервировать
	|			ТОГДА ТаблицаВЗапросе.Количество
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК Резерв,
	|	&АналитикаХозяйственнойОперации,
	|	&Склад,
	|	&Период
	|ИЗ
	|	ТаблицаВЗапросе КАК ТаблицаВЗапросе
	|ГДЕ
	|	(НЕ &РеализацияПоОрдернойСхеме)
	|	И (ТаблицаВЗапросе.Номенклатура.ТипНоменклатуры <> ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Услуга))
	|;
	|
	// 5 ТаблицаТоварыКОтгрузке
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаВЗапросе.Номенклатура           КАК Номенклатура,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	ТаблицаВЗапросе.Характеристика         КАК Характеристика,
	|	ТаблицаВЗапросе.Количество             КАК Количество,
	|	&Склад                                 КАК Склад,
	|	&Период                                КАК Период,
	|	&Основание                             КАК ДокументОснование
	|ИЗ
	|	ТаблицаВЗапросе                        КАК ТаблицаВЗапросе
	|ГДЕ
	|	(&РеализацияПоОрдернойСхеме)
	|	И (ТаблицаВЗапросе.Номенклатура.ТипНоменклатуры <> ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Услуга))
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|";
	// 5 ТаблицаТоварыОрганизаций
	ТекстЗапроса = ТекстЗапроса + "
	|ВЫБРАТЬ
	|	ТаблицаТовары.НомерСтроки              КАК НомерСтроки,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КАК ВидДвижения,
	|	&Период                                КАК Период,
	|	&Организация                           КАК Организация,
	|	&Организация                           КАК ОрганизацияОтгрузки,
	|	&Склад                                 КАК Склад,
	|	&Поставщик                             КАК Поставщик,
	|	&Договор                               КАК Договор,
	|	&НомерГТД                              КАК НомерГТД,
	|	ТаблицаТовары.Номенклатура             КАК Номенклатура,
	|	ТаблицаТовары.Характеристика           КАК Характеристика,
	|	ТаблицаТовары.Количество               КАК Количество,
	|	0 									   КАК КоличествоПоРНПТ,
	|	ТаблицаТовары.Сумма                    КАК СуммаПродажи
	|ИЗ
	|	ТаблицаВЗапросе                        КАК ТаблицаТовары
	|
	|ГДЕ
	|	&ФормироватьДвижения
	|	И (ТаблицаТовары.Номенклатура.ТипНоменклатуры <> ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Услуга))
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	// 8 ТаблицаДвиженияСерийТоваров
	|ВЫБРАТЬ
	|	ТаблицаСерии.Номенклатура КАК Номенклатура,
	|	ТаблицаСерии.Характеристика КАК Характеристика,
	|	ТаблицаСерии.Серия КАК Серия,
	|	ТаблицаСерии.Количество КАК Количество,
	|	&Магазин КАК Магазин,
	|	ЗНАЧЕНИЕ(Перечисление.СкладскиеОперации.ОтгрузкаКлиенту) КАК СкладскаяОперация,
	|	&Ссылка КАК Документ,
	|	&Период КАК Период,
	|	&Ссылка КАК Регистратор,
	|	ТаблицаСерии.НомерСтроки КАК НомерСтроки
	|ИЗ
	|	Документ.РеализацияТоваров.Серии КАК ТаблицаСерии
	|
	|ГДЕ
	|	ТаблицаСерии.Ссылка = &Ссылка
	|	И ТаблицаСерии.Количество <> 0
	|	И ТаблицаСерии.Серия <> ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
	|	И &ФормироватьДвижения
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки
	|;
	|////////////////////////////////////////////////////////////////////////////////";
	
	ТекстЗапроса = ТекстЗапроса + ТекстЗапросаТаблицаСерийныхНомеров();
	ТекстЗапроса = ТекстЗапроса + ТекстЗапросаТаблицаПодарочныхСертификатов();
	
	ТекстЗапроса = ТекстЗапроса + "
	|ВЫБРАТЬ
	|	ТаблицаТовары.Ссылка,
	|	ТаблицаТовары.НомерСтроки,
	|	ТаблицаТовары.Номенклатура,
	|	ТаблицаТовары.Характеристика,
	|	ТаблицаТовары.Количество,
	|	ТаблицаТовары.Цена,
	|	ТаблицаТовары.Сумма,
	|	ТаблицаТовары.СтавкаНДС,
	|	ТаблицаТовары.СуммаНДС,
	|	&Склад,
	|	ТаблицаТовары.КлючСвязиСерийныхНомеров,
	|	ТаблицаТовары.Продавец,
	|	ТаблицаТовары.Упаковка,
	|	ТаблицаТовары.КоличествоУпаковок,
	|	ТаблицаТовары.КодСтроки
	|ПОМЕСТИТЬ ТаблицаТоварыПродажаПоЗаказу
	|ИЗ
	|	ТаблицаВЗапросе КАК ТаблицаТовары
	|ГДЕ
	|	ТаблицаТовары.КодСтроки > 0
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	&Период КАК Период,
	|	&Ссылка КАК Регистратор,
	|	&ЗаказПокупателя КАК Заказ,
	|	&Магазин КАК Магазин,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КАК ВидДвижения,
	|	ТаблицаТоварыПродажаПоЗаказу.Номенклатура,
	|	ТаблицаТоварыПродажаПоЗаказу.Характеристика,
	|	ТаблицаТоварыПродажаПоЗаказу.КодСтроки,
	|	ТаблицаТоварыПродажаПоЗаказу.Количество КАК Заказано
	|ИЗ
	|	ТаблицаТоварыПродажаПоЗаказу КАК ТаблицаТоварыПродажаПоЗаказу
	|;";
	
	ТекстЗапроса = ТекстЗапроса + ТекстЗапросаБонусы();
	ТекстЗапроса = ТекстЗапроса + ТекстЗапросаТаблицаРасчетыСКлиентами();
	
	Запрос.Текст = ТекстЗапроса;
	
	Запрос.УстановитьПараметр("Приход", ВидДвиженияНакопления.Приход);
	Запрос.УстановитьПараметр("ПустаяДата", Дата("00010101"));
	ИспользоватьРасчетыСКлиентами = ПолучитьФункциональнуюОпцию("ИспользоватьРасчетыСКлиентами");
	Запрос.УстановитьПараметр("ИспользоватьРасчетыСКлиентами", ИспользоватьРасчетыСКлиентами);
	
	Результат = Запрос.ВыполнитьПакет();
	
	ТаблицыДляДвижений = ДополнительныеСвойства.ТаблицыДляДвижений;
	ТаблицыДляДвижений.Вставить("ТаблицаПродажи"                  , Результат[2].Выгрузить());
	ТаблицыДляДвижений.Вставить("ТаблицаПродажиПоДисконтнымКартам", Результат[3].Выгрузить());
	ТаблицыДляДвижений.Вставить("ТаблицаТоварыНаСкладах"          , Результат[4].Выгрузить());
	ТаблицыДляДвижений.Вставить("ТаблицаТоварыКОтгрузке"          , Результат[5].Выгрузить());
	ТаблицыДляДвижений.Вставить("ТаблицаТоварыОрганизаций"        , Результат[6].Выгрузить());
	ТаблицыДляДвижений.Вставить("ТаблицаДвиженияСерийТоваров"     , Результат[7].Выгрузить());
	ТаблицыДляДвижений.Вставить("ТаблицаСерийныхНомеров"          , Результат[14].Выгрузить());
	ТаблицыДляДвижений.Вставить("ТаблицаПодарочныхСертификатов"   , Результат[15].Выгрузить());
	ТаблицыДляДвижений.Вставить("ТаблицаЗаказыПокупателей"        , Результат[17].Выгрузить());
	ТаблицыДляДвижений.Вставить("ТаблицаБонусныеБаллы"            , Результат[19].Выгрузить());
	ТаблицыДляДвижений.Вставить("ТаблицаРасчетыСКлиентами"        , Результат[22].Выгрузить());
	
	Если ИспользоватьКомиссионнуюТорговлю 
		ИЛИ ИспользоватьУчетИмпортныхТоваров Тогда
		ПроведениеСервер.ПерезаполнитьТаблицуДвиженийТоварыОрганизаций(
											ТаблицыДляДвижений.ТаблицаТоварыОрганизаций,
											Реквизиты.Ссылка,
											Реквизиты.Период);
		
		ТаблицыДляДвижений.Вставить("ТаблицаТоварыКОформлениюОтчетовКомитенту" , 
						   ПроведениеСервер.ТаблицаДвиженийРегистраТоварыКОформлениюОтчетовКомитенту(
						   ТаблицыДляДвижений.ТаблицаТоварыОрганизаций));

	КонецЕсли;
	
КонецПроцедуры

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати.
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	// Накладная
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "Накладная";
	КомандаПечати.Представление = НСтр("ru = 'Расходная накладная'");
	КомандаПечати.ДополнительныеПараметры.Вставить("Представление", КомандаПечати.Представление);
	КомандаПечати.ПроверкаПроведенияПередПечатью = Истина;
	
	// Опись номенклатуры
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "ОписьНоменклатуры";
	КомандаПечати.Представление = НСтр("ru = 'Опись номенклатуры'");
	КомандаПечати.ДополнительныеПараметры.Вставить("Представление", КомандаПечати.Представление);
	КомандаПечати.ПроверкаПроведенияПередПечатью = Истина;
	КомандаПечати.Порядок = 52;
	
	// Торг 12
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "ТОРГ12";
	КомандаПечати.Представление = НСтр("ru = 'ТОРГ-12 (Товарная накладная)'");
	КомандаПечати.ДополнительныеПараметры.Вставить("Представление", КомандаПечати.Представление);
	КомандаПечати.ДополнительныеПараметры.Вставить("ВыводитьУслуги", Истина);
	КомандаПечати.ПроверкаПроведенияПередПечатью = Истина;
	КомандаПечати.Порядок = 55;
	КомандаПечати.ФункциональныеОпции = "ОтключенныйФункционал";
	
	// Торг 12 (без услуг)
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "ТОРГ12";
	КомандаПечати.Представление = НСтр("ru = 'ТОРГ-12 (Товарная накладная без услуг)'");
	КомандаПечати.ДополнительныеПараметры.Вставить("Представление", КомандаПечати.Представление);
	КомандаПечати.ДополнительныеПараметры.Вставить("ВыводитьУслуги", Ложь);
	КомандаПечати.ПроверкаПроведенияПередПечатью = Истина;
	КомандаПечати.Порядок = 60;
	КомандаПечати.ФункциональныеОпции = "ОтключенныйФункционал";
	
	// Акт
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "Акт";
	КомандаПечати.Представление = НСтр("ru = 'Акт об оказании услуг'");
	КомандаПечати.ДополнительныеПараметры.Вставить("Представление", КомандаПечати.Представление);
	КомандаПечати.ПроверкаПроведенияПередПечатью = Истина;
	КомандаПечати.Порядок = 65;
	
	// М15
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "М15";
	КомандаПечати.Представление = НСтр("ru = 'Накладная М-15'");
	КомандаПечати.ДополнительныеПараметры.Вставить("Представление", КомандаПечати.Представление);
	КомандаПечати.ПроверкаПроведенияПередПечатью = Истина;
	КомандаПечати.Порядок = 70;
	КомандаПечати.ФункциональныеОпции = "ОтключенныйФункционал";
	
	// ТТН
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "ТТН";
	КомандаПечати.Представление = НСтр("ru = 'Товарно - транспортная накладная'");
	КомандаПечати.ДополнительныеПараметры.Вставить("Представление", КомандаПечати.Представление);
	КомандаПечати.ПроверкаПроведенияПередПечатью = Истина;
	КомандаПечати.Обработчик = "УправлениеПечатьюРТКлиент.ОбработкаКомандыПечатиТТН";
	КомандаПечати.Порядок = 75;
	
	// Счет фактура
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.МенеджерПечати = "Обработка.ПечатьОбщихФорм";
	КомандаПечати.Идентификатор = "СчетФактура";
	КомандаПечати.Представление = НСтр("ru = 'Счет-фактура'");
	КомандаПечати.ДополнительныеПараметры.Вставить("Представление", КомандаПечати.Представление);
	КомандаПечати.ПроверкаПроведенияПередПечатью = Истина;
	КомандаПечати.Порядок = 80;
	КомандаПечати.ФункциональныеОпции = "ОтключенныйФункционал";
	
	// УПД (Универсальный передаточный документ).
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.МенеджерПечати = "Обработка.ПечатьОбщихФорм";
	КомандаПечати.Идентификатор = "УПД";
	КомандаПечати.Представление = НСтр("ru = 'УПД (Универсальный передаточный документ)'");
	КомандаПечати.ДополнительныеПараметры.Вставить("Представление", КомандаПечати.Представление);
	КомандаПечати.ПроверкаПроведенияПередПечатью = Истина;
	КомандаПечати.Порядок = 85;
	КомандаПечати.ФункциональныеОпции = "ОтключенныйФункционал";
	
	// Транспортная накладная
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.МенеджерПечати = "Обработка.ПечатьТранспортнойНакладной";
	КомандаПечати.Идентификатор = "ТранспортнаяНакладная";
	КомандаПечати.Представление = НСтр("ru = 'Транспортная накладная'");
	КомандаПечати.ДополнительныеПараметры.Вставить("Представление", КомандаПечати.Представление);
	КомандаПечати.ПроверкаПроведенияПередПечатью = Истина;
	КомандаПечати.Порядок = 90;
	
	// Форма З-2
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "З2";
	КомандаПечати.Представление = НСтр("ru = 'З-2 (накладная на отпуск запасов)'");
	КомандаПечати.ДополнительныеПараметры.Вставить("Представление", КомандаПечати.Представление);
	КомандаПечати.ПроверкаПроведенияПередПечатью = Истина;
	КомандаПечати.Порядок = 70;
	
КонецПроцедуры

// Сформировать печатные формы объектов.
//
// Параметры:
//  МассивОбъектов - Массив - список объектов, для которых была выполнена процедура Печать;
//  ПараметрыПечати - Структура - произвольные параметры, переданные при вызове команды печати;
//  КоллекцияПечатныхФорм - ТаблицаЗначений - содержит сформированные табличные документы и дополнительную информацию;
//  ОбъектыПечати - СписокЗначений - соответствие между объектами и именами областей в табличных документах, где
//                                   значение - Объект, представление - имя области с объектом в табличных документах;
//  ПараметрыВывода - Структура - параметры, связанные с выводом табличных документов:
//   * ПараметрыОтправки - Структура - для заполнения письма при отправке печатной формы по электронной почте.
//                    см. РаботаСПочтовымиСообщениямиКлиент.РаботаСПочтовымиСообщениямиКлиент.ПараметрыОтправкиПисьма.
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "Накладная") Тогда

		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "Накладная",
				ПараметрыПечати.Представление,
				ПечатьНакладная(МассивОбъектов, ОбъектыПечати));
	
	КонецЕсли;
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ОписьНоменклатуры") Тогда

		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "ОписьНоменклатуры",
				ПараметрыПечати.Представление,
				ПечатьОписиНоменклатуры(МассивОбъектов, ОбъектыПечати));
	
	КонецЕсли;
			
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ТОРГ12") Тогда
		
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм,"ТОРГ12",
				ПараметрыПечати.Представление, 
				ПечатьТОРГ12(МассивОбъектов, ОбъектыПечати, ПараметрыПечати["ВыводитьУслуги"]));
		
	КонецЕсли;
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "Акт") Тогда

		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "Акт",
				ПараметрыПечати.Представление,
				ПечатьАктаОбОказанииУслуг(МассивОбъектов, ОбъектыПечати));
	
	КонецЕсли;
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ТТН") Тогда
		
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "ТТН",
				ПараметрыПечати.Представление,
				ПечатьТТН(МассивОбъектов, ОбъектыПечати, ПараметрыПечати));
		
	КонецЕсли;
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "М15") Тогда

		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "М15",
				ПараметрыПечати.Представление,
				ПечатьМ15(МассивОбъектов, ОбъектыПечати));
	
	КонецЕсли;
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ФискальнаяОперация") Тогда
		
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "ФискальнаяОперация",
				ПараметрыПечати.Представление,
				ПродажиСервер.ПечатьФискальныхОпераций(МассивОбъектов, ОбъектыПечати));
	КонецЕсли;

	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "З2") Тогда
		
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "З2",
				ПараметрыПечати.Представление,
				ПечатьЗ2(МассивОбъектов, ОбъектыПечати));
	
	КонецЕсли;
			
КонецПроцедуры

// Возвращает структуру данных для печати универсального передаточного документа
//
// Параметры:
//  МассивОбъектов - Массив - список объектов, для которых была выполнена процедура Печать.
//  ПараметрыПечати - Структура - произвольные параметры, переданные при вызове команды печати.
//  
// Возвращаемое значение:
//  Структура - данные для печатной формы.
//
Функция ПолучитьДанныеДляПечатнойФормыУПД(ПараметрыПечати, МассивОбъектов) Экспорт
	
	КолонкаКодов = ФормированиеПечатныхФормСервер.ИмяДополнительнойКолонки();
	
	Если ПустаяСтрока(КолонкаКодов) Тогда
		КолонкаКодов = "Код";
	КонецЕсли;
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ДанныеДокументов.Ссылка               КАК Ссылка,
	|	ДанныеДокументов.Организация          КАК Организация,
	|	ДанныеДокументов.Магазин              КАК Магазин,
	|	ДанныеДокументов.Склад                КАК Склад,
	|	ДанныеДокументов.ЦенаВключаетНДС      КАК ЦенаВключаетНДС
	|
	|ПОМЕСТИТЬ ТаблицаДанныхДокументов
	|ИЗ
	|	Документ.РеализацияТоваров КАК ДанныеДокументов
	|
	|ГДЕ
	|	ДанныеДокументов.Ссылка В (&МассивОбъектов)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка
	|;";
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	
	Запрос.Выполнить();
	
	ПоместитьВременнуюТаблицуТоваров(МенеджерВременныхТаблиц);
	
	ПродажиСервер.ПоместитьВременнуюТаблицуСчетовФактур(МенеджерВременныхТаблиц);
	
	Запрос.Текст =
	// 0
	"ВЫБРАТЬ
	|	ТаблицаТоваров.Ссылка КАК Ссылка,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА НЕ ТаблицаТоваров.ЭтоТовар
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ) КАК ЕстьУслуги,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА ТаблицаТоваров.ЭтоТовар
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ) КАК ЕстьТовары
	|ПОМЕСТИТЬ НоменклатураДокументов
	|ИЗ
	|	ТаблицаТоваров КАК ТаблицаТоваров
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаТоваров.Ссылка
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеДокумента.Ссылка КАК Ссылка,
	|	&ПредставлениеСчетФактура КАК ПредставлениеДокумента,
	|	ВЫБОР 
	|		КОГДА
	|			СчетаФактуры.Номер ЕСТЬ NULL
	|		ТОГДА
	|			2
	|		ИНАЧЕ
	|			1
	|	КОНЕЦ КАК СтатусУПД,
	|	ДанныеДокумента.УчитыватьНДС КАК УчитыватьНДС,
	|	ДанныеДокумента.Номер КАК НомерДокументаОтгрузки,
	|	ДанныеДокумента.Дата КАК ДатаДокументаОтгрузки,
	|	ЕСТЬNULL(СчетаФактуры.Номер, ДанныеДокумента.Номер) КАК Номер,
	|	ЕСТЬNULL(СчетаФактуры.Дата, ДанныеДокумента.Дата) КАК Дата,
	|	ЕСТЬNULL(СчетаФактуры.НомерИсправления, НЕОПРЕДЕЛЕНО) КАК НомерИсправления,
	|	ЕСТЬNULL(СчетаФактуры.ДатаИсправления, НЕОПРЕДЕЛЕНО) КАК ДатаИсправления,
	|	ЕСТЬNULL(СчетаФактуры.Исправление, ЛОЖЬ) КАК Исправление,
	|	НЕОПРЕДЕЛЕНО КАК НомерСчетаФактуры,
	|	НЕОПРЕДЕЛЕНО КАК ДатаСчетаФактуры,
	|	НЕОПРЕДЕЛЕНО КАК НомерИсправленияСчетаФактуры,
	|	НЕОПРЕДЕЛЕНО КАК ДатаИсправленияСчетаФактуры,
	|	ЕСТЬNULL(СчетаФактуры.СтрокаПлатежноРасчетныеДокументы, """") КАК СтрокаПоДокументу,
	|	ДанныеДокумента.Контрагент КАК Контрагент,
	|	ДанныеДокумента.Организация КАК Организация,
	|	ДанныеДокумента.Организация.ОбособленноеПодразделение КАК ОбособленноеПодразделение,
	|	ДанныеДокумента.Организация.Префикс КАК Префикс,
	|	ДанныеДокумента.Контрагент КАК Грузополучатель,
	|	ДанныеДокумента.Организация КАК Грузоотправитель,
	|	ДанныеДокумента.АдресДоставки КАК АдресДоставки,
	|	ВЫБОР
	|		КОГДА НоменклатураДокументов.ЕстьУслуги
	|				И НЕ НоменклатураДокументов.ЕстьТовары
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ТолькоУслуги,
	|	ЛОЖЬ КАК ЭтоПередачаНаКомиссию,
	|	ДанныеДокумента.ДоверенностьНомер КАК ДоверенностьНомер,
	|	ДанныеДокумента.ДоверенностьДата КАК ДоверенностьДата,
	|	ДанныеДокумента.ДоверенностьВыдана КАК ДоверенностьВыдана,
	|	ДанныеДокумента.ДоверенностьЧерезКого КАК ДоверенностьЛицо,
	|	ДанныеДокумента.Продавец КАК Кладовщик
	|ИЗ
	|	Документ.РеализацияТоваров КАК ДанныеДокумента
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаДанныхДокументов КАК ДанныеДокументов
	|		ПО ДанныеДокумента.Ссылка = ДанныеДокументов.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаСчетовФактур КАК СчетаФактуры
	|		ПО ДанныеДокумента.Ссылка = СчетаФактуры.ДокументОснование
	|		ЛЕВОЕ СОЕДИНЕНИЕ НоменклатураДокументов КАК НоменклатураДокументов
	|		ПО ДанныеДокумента.Ссылка = НоменклатураДокументов.Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаДокумента.Ссылка КАК Ссылка,
	|	ТаблицаДокумента.Номенклатура КАК Номенклатура,
	|	ТаблицаДокумента.Номенклатура.НаименованиеПолное КАК НоменклатураНаименование,
	|	ВЫБОР
	|		КОГДА &КолонкаКодов = ""Артикул""
	|			ТОГДА ТаблицаДокумента.Номенклатура.Артикул
	|		ИНАЧЕ ТаблицаДокумента.Номенклатура.Код
	|	КОНЕЦ КАК НоменклатураКод,
	|	ВЫБОР
	|		КОГДА ТаблицаДокумента.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка)
	|			ТОГДА ТаблицаДокумента.Номенклатура.ЕдиницаИзмерения
	|		ИНАЧЕ ТаблицаДокумента.Упаковка.ЕдиницаИзмерения
	|	КОНЕЦ КАК ЕдиницаИзмерения,
	|	ВЫБОР
	|		КОГДА ТаблицаДокумента.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка)
	|			ТОГДА ТаблицаДокумента.Номенклатура.ЕдиницаИзмерения.Представление
	|		ИНАЧЕ ТаблицаДокумента.Упаковка.ЕдиницаИзмерения.Представление
	|	КОНЕЦ КАК ЕдиницаИзмеренияНаименование,
	|	ВЫБОР
	|		КОГДА ТаблицаДокумента.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка)
	|			ТОГДА ТаблицаДокумента.Номенклатура.ЕдиницаИзмерения.Код
	|		ИНАЧЕ ТаблицаДокумента.Упаковка.ЕдиницаИзмерения.Код
	|	КОНЕЦ КАК ЕдиницаИзмеренияКод,
	|	ТаблицаДокумента.Характеристика КАК Характеристика,
	|	ТаблицаДокумента.Характеристика.Наименование КАК ХарактеристикаНаименование,
	|	ТаблицаДокумента.КоличествоПоРНПТ КАК КоличествоПрослеж,
	|	ВЫБОР
	|		КОГДА ТаблицаДокумента.Номенклатура.ЕдиницаИзмеренияТНВЭД = ЗНАЧЕНИЕ(Справочник.БазовыеЕдиницыИзмерения.ПустаяСсылка)
	|			ТОГДА ТаблицаДокумента.Номенклатура.ЕдиницаИзмерения.Код
	|		ИНАЧЕ ТаблицаДокумента.Номенклатура.ЕдиницаИзмеренияТНВЭД.Код
	|	КОНЕЦ КАК ЕдиницаИзмеренияПрослежКод,
	|	ВЫБОР
	|		КОГДА ТаблицаДокумента.Номенклатура.ЕдиницаИзмеренияТНВЭД = ЗНАЧЕНИЕ(Справочник.БазовыеЕдиницыИзмерения.ПустаяСсылка)
	|			ТОГДА ТаблицаДокумента.Номенклатура.ЕдиницаИзмерения.Наименование
	|		ИНАЧЕ ТаблицаДокумента.Номенклатура.ЕдиницаИзмеренияТНВЭД.Наименование
	|	КОНЕЦ КАК ЕдиницаИзмеренияПрослеж,
	|	ТаблицаДокумента.СтавкаНДС КАК СтавкаНДС,
	|	ТаблицаДокумента.КоличествоУпаковок КАК Количество,
	|	ТаблицаДокумента.СуммаНДС КАК СуммаНДС,
	|	ТаблицаДокумента.НомерГТД КАК НомерГТД,
	|	ВЫБОР
	|		КОГДА ТаблицаДокумента.Номенклатура.СтранаПроисхождения = ЗНАЧЕНИЕ(Справочник.СтраныМира.ПустаяСсылка)
	|			ТОГДА """"
	|		ИНАЧЕ ТаблицаДокумента.Номенклатура.СтранаПроисхождения.Код
	|	КОНЕЦ КАК СтранаПроисхожденияКод,
	|	ВЫБОР
	|		КОГДА ТаблицаДокумента.Номенклатура.СтранаПроисхождения = ЗНАЧЕНИЕ(Справочник.СтраныМира.ПустаяСсылка)
	|			ТОГДА """"
	|		ИНАЧЕ ТаблицаДокумента.Номенклатура.СтранаПроисхождения.Наименование
	|	КОНЕЦ КАК СтранаПроисхождения,
	|	ТаблицаДокумента.Номенклатура.КодТНВЭД.ПрослеживаемыйТовар КАК ПрослеживаемыйТовар,
	|	ЕстьNULL(ТаблицаДокумента.Номенклатура.КодТНВЭД.Код, """") КАК КодВидаТовара,
	|	ВЫБОР
	|		КОГДА ТаблицаДокумента.ЦенаВключаетНДС
	|			ТОГДА ТаблицаДокумента.Сумма
	|		ИНАЧЕ ТаблицаДокумента.Сумма + ТаблицаДокумента.СуммаНДС
	|	КОНЕЦ КАК СуммаСНДС,
	|	ВЫБОР
	|		КОГДА ТаблицаДокумента.ЦенаВключаетНДС
	|			ТОГДА ТаблицаДокумента.Сумма - ТаблицаДокумента.СуммаНДС
	|		ИНАЧЕ ТаблицаДокумента.Сумма + ТаблицаДокумента.СуммаНДС - ТаблицаДокумента.СуммаНДС
	|	КОНЕЦ КАК СуммаБезНДС,
	|	ВЫБОР
	|		КОГДА ТаблицаДокумента.ЦенаВключаетНДС
	|			ТОГДА (ТаблицаДокумента.Сумма - ТаблицаДокумента.СуммаНДС) / ТаблицаДокумента.КоличествоУпаковок
	|		ИНАЧЕ ТаблицаДокумента.Цена
	|	КОНЕЦ КАК Цена,
	|	ТаблицаДокумента.НомерСтроки КАК НомерСтроки,
	|	ТаблицаДокумента.Склад КАК Склад,
	|	ТаблицаДокумента.Организация КАК Организация,
	|	ТаблицаДокумента.Поставщик КАК Поставщик,
	|	ТаблицаДокумента.Договор КАК Договор
	|ИЗ
	|	ТаблицаТоваров КАК ТаблицаДокумента
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка,
	|	НомерСтроки
	|ИТОГИ ПО
	|	Ссылка";
	
	Запрос.УстановитьПараметр("ПредставлениеСчетФактура", НСтр("ru='счет-фактура'"));
	Запрос.УстановитьПараметр("КолонкаКодов", КолонкаКодов);
	
	
	МассивРезультатов         = Запрос.ВыполнитьПакет();
	РезультатПоШапке          = МассивРезультатов[1];
	РезультатПоТабличнойЧасти = МассивРезультатов[2];
	
	СтруктураДанныхДляПечати 	= Новый Структура("РезультатПоШапке, РезультатПоТабличнойЧасти",
													РезультатПоШапке, РезультатПоТабличнойЧасти);
	
	Возврат СтруктураДанныхДляПечати;
	
КонецФункции

// Функция получает данные для формирования печатной формы Транспортная накладная.
//
// Параметры:
//  МассивДокументов - Массив - список объектов, для которых была выполнена процедура Печать.
//  
// Возвращаемое значение:
//  Структура - данные для печатной формы.
//
Функция ПолучитьДанныеДляПечатнойФормыТранспортнаяНакладная(МассивДокументов) Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	РеализацияТоваров.Ссылка                                    КАК Ссылка,
	|	РеализацияТоваров.Дата                                      КАК Дата,
	|	РеализацияТоваров.Контрагент                                КАК Грузополучатель,
	|	РеализацияТоваров.Организация                               КАК Грузоотправитель,
	|	ЕСТЬNULL(МагазиныКонтактнаяОтправитель.Представление, """") КАК ПунктПогрузки,
	|	РеализацияТоваров.АдресДоставки                             КАК ПунктРазгрузки
	|ИЗ
	|	Документ.РеализацияТоваров КАК РеализацияТоваров
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	Справочник.Магазины.КонтактнаяИнформация КАК МагазиныКонтактнаяОтправитель
	|ПО
	|	РеализацияТоваров.Магазин = МагазиныКонтактнаяОтправитель.Ссылка
	|	И МагазиныКонтактнаяОтправитель.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ФактАдресМагазина)
	|ГДЕ
	|	РеализацияТоваров.Ссылка В(&МассивДокументов)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Дата, Ссылка";
	
	Запрос.УстановитьПараметр("МассивДокументов", МассивДокументов);
	
	ТаблицаРезультата = Запрос.Выполнить().Выгрузить();
	
	Возврат ТаблицаРезультата
	
КонецФункции

// Формирует временную таблицу, содержащую табличную часть по таблице данных документов.
//
Процедура ПоместитьВременнуюТаблицуТоваров(МенеджерВременныхТаблиц)
	
	ИспользоватьУчетИмпортныхТоваров = ПолучитьФункциональнуюОпцию("ИспользоватьУчетИмпортныхТоваров");
	ИспользоватьКомиссионнуюТорговлю = ПолучитьФункциональнуюОпцию("ИспользоватьКомиссионнуюТорговлю");
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	ТекстЗапроса = "";
	Если ИспользоватьУчетИмпортныхТоваров 
		Или ИспользоватьКомиссионнуюТорговлю Тогда
		ТекстЗапроса = ТекстЗапроса +
		"ВЫБРАТЬ
		|	ВЫБОР
		|		КОГДА ТоварыОрганизаций.НомерГТД.СтранаВвозаНеРФ
		|			ТОГДА """"
		|		ИНАЧЕ ТоварыОрганизаций.НомерГТД.РегистрационныйНомерДекларации
		|	КОНЕЦ КАК ПредставлениеГТД,
		|	ВЫБОР
		|		КОГДА ТоварыОрганизаций.НомерГТД.СтранаВвозаНеРФ
		|			ТОГДА """"
		|		ИНАЧЕ ТоварыОрганизаций.НомерГТД.СтранаПроисхождения.Код
		|	КОНЕЦ КАК СтранаПроисхожденияКод,
		|	ВЫБОР
		|		КОГДА ТоварыОрганизаций.НомерГТД.СтранаВвозаНеРФ
		|			ТОГДА """"
		|		ИНАЧЕ ТоварыОрганизаций.НомерГТД.СтранаПроисхождения.Наименование
		|	КОНЕЦ КАК ПредставлениеСтраны,
		|	ТоварыОрганизаций.НомерГТД КАК НомерГТД,
		|	ТоварыОрганизаций.Количество КАК Количество,
		|	ТоварыОрганизаций.КоличествоПоРНПТ КАК КоличествоПоРНПТ,
		|	ТоварыОрганизаций.НомерСтрокиДокумента КАК НомерСтрокиДокумента,
		|	ТоварыОрганизаций.Регистратор КАК Регистратор,
		|	ТоварыОрганизаций.Склад КАК Склад,
		|	ТоварыОрганизаций.Организация КАК Организация,
		|	ТоварыОрганизаций.Поставщик КАК Поставщик,
		|	ТоварыОрганизаций.Договор КАК Договор
		|ПОМЕСТИТЬ ТаблицаДвижений
		|ИЗ
		|	РегистрНакопления.ТоварыОрганизаций КАК ТоварыОрганизаций
		|ГДЕ
		|	ТоварыОрганизаций.Регистратор В
		|			(ВЫБРАТЬ
		|				ДанныеДокументов.Ссылка КАК Ссылка
		|			ИЗ
		|				ТаблицаДанныхДокументов КАК ДанныеДокументов)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаТоваров.Ссылка КАК Ссылка,
		|	ТаблицаТоваров.НомерСтроки КАК НомерСтроки,
		|	ТаблицаТоваров.Номенклатура КАК Номенклатура,
		|	ТаблицаТоваров.Характеристика КАК Характеристика,
		|	ТаблицаТоваров.Количество КАК КоличествоДокумента,
		|	ТаблицаТоваров.Упаковка КАК Упаковка,
		|	ТаблицаТоваров.КоличествоУпаковок КАК КоличествоУпаковокВДокументе,
		|	ТаблицаТоваров.Цена КАК Цена,
		|	ТаблицаТоваров.Сумма * ВЫБОР
		|		КОГДА ЕСТЬNULL(ТаблицаДвижений.Количество, 0) = 0
		|			ТОГДА ТаблицаТоваров.Количество
		|		ИНАЧЕ ЕСТЬNULL(ТаблицаДвижений.Количество, ТаблицаТоваров.Количество)
		|	КОНЕЦ / ТаблицаТоваров.Количество КАК Сумма,
		|	ТаблицаТоваров.СтавкаНДС КАК СтавкаНДС,
		|	ТаблицаТоваров.СуммаНДС * ВЫБОР
		|		КОГДА ЕСТЬNULL(ТаблицаДвижений.Количество, 0) = 0
		|			ТОГДА ТаблицаТоваров.Количество
		|		ИНАЧЕ ЕСТЬNULL(ТаблицаДвижений.Количество, ТаблицаТоваров.Количество)
		|	КОНЕЦ / ТаблицаТоваров.Количество КАК СуммаНДС,
		|	ДанныеДокументов.ЦенаВключаетНДС КАК ЦенаВключаетНДС,
		|	ВЫБОР
		|		КОГДА ТаблицаТоваров.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ЭтоТовар,
		|	ВЫБОР
		|		КОГДА ТаблицаТоваров.КоличествоУпаковок = 0
		|			ТОГДА 0
		|		ИНАЧЕ ВЫБОР
		|				КОГДА ЕСТЬNULL(ТаблицаДвижений.Количество, 0) = 0
		|					ТОГДА ТаблицаТоваров.Количество
		|				ИНАЧЕ ЕСТЬNULL(ТаблицаДвижений.Количество, ТаблицаТоваров.Количество)
		|			КОНЕЦ / ТаблицаТоваров.КоличествоУпаковок * ТаблицаТоваров.Количество
		|	КОНЕЦ КАК Количество,
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(ТаблицаДвижений.Количество, 0) = 0
		|			ТОГДА ТаблицаТоваров.Количество
		|		ИНАЧЕ ЕСТЬNULL(ТаблицаДвижений.Количество, ТаблицаТоваров.Количество)
		|	КОНЕЦ КАК КоличествоУпаковок,
		|	ТаблицаДвижений.КоличествоПоРНПТ КАК КоличествоПоРНПТ,
		|	ЕСТЬNULL(ТаблицаДвижений.ПредставлениеГТД, """") КАК ПредставлениеГТД,
		|	ЕСТЬNULL(ТаблицаДвижений.СтранаПроисхожденияКод, """") КАК СтранаПроисхожденияКод,
		|	ЕСТЬNULL(ТаблицаДвижений.ПредставлениеСтраны, """") КАК ПредставлениеСтраны,
		|	ТаблицаТоваров.СуммаРучнойСкидки КАК СуммаРучнойСкидки,
		|	ТаблицаТоваров.СуммаАвтоматическойСкидки КАК СуммаАвтоматическойСкидки,
		|	ТаблицаДвижений.НомерГТД КАК НомерГТД,
		|	ТаблицаДвижений.Склад КАК Склад,
		|	ТаблицаДвижений.Организация КАК Организация,
		|	ТаблицаДвижений.Поставщик КАК Поставщик,
		|	ТаблицаДвижений.Договор КАК Договор
		|ПОМЕСТИТЬ ТаблицаТоваров
		|ИЗ
		|	Документ.РеализацияТоваров.Товары КАК ТаблицаТоваров
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаДанныхДокументов КАК ДанныеДокументов
		|		ПО ТаблицаТоваров.Ссылка = ДанныеДокументов.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаДвижений КАК ТаблицаДвижений
		|		ПО ТаблицаТоваров.Ссылка = ТаблицаДвижений.Регистратор
		|			И ТаблицаТоваров.НомерСтроки = ТаблицаДвижений.НомерСтрокиДокумента";
	Иначе
		ТекстЗапроса = ТекстЗапроса +
		"ВЫБРАТЬ
		|	ТаблицаТоваров.Ссылка КАК Ссылка,
		|	ЛОЖЬ КАК ПрослеживаемыйТовар,
		|	ТаблицаТоваров.НомерСтроки КАК НомерСтроки,
		|	ТаблицаТоваров.Номенклатура КАК Номенклатура,
		|	ТаблицаТоваров.Характеристика КАК Характеристика,
		|	ТаблицаТоваров.Количество КАК Количество,
		|	ТаблицаТоваров.Упаковка КАК Упаковка,
		|	ТаблицаТоваров.КоличествоУпаковок КАК КоличествоУпаковок,
		|	0 КАК КоличествоПоРНПТ,
		|	ТаблицаТоваров.Цена КАК Цена,
		|	ТаблицаТоваров.Сумма КАК Сумма,
		|	ТаблицаТоваров.СтавкаНДС КАК СтавкаНДС,
		|	ТаблицаТоваров.СуммаНДС КАК СуммаНДС,
		|	ДанныеДокументов.ЦенаВключаетНДС КАК ЦенаВключаетНДС,
		|	ВЫБОР
		|		КОГДА ТаблицаТоваров.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ЭтоТовар,
		|	"""" КАК ПредставлениеГТД,
		|	"""" КАК НомерГТД,
		|	"""" КАК СтранаПроисхожденияКод,
		|	"""" КАК ПредставлениеСтраны,
		|	ТаблицаТоваров.СуммаРучнойСкидки КАК СуммаРучнойСкидки,
		|	ТаблицаТоваров.СуммаАвтоматическойСкидки КАК СуммаАвтоматическойСкидки,
		|	ДанныеДокументов.Склад КАК Склад,
		|	ДанныеДокументов.Организация КАК Организация,
		|	"""" КАК Поставщик,
		|	"""" КАК Договор
		|ПОМЕСТИТЬ ТаблицаТоваров
		|ИЗ
		|	Документ.РеализацияТоваров.Товары КАК ТаблицаТоваров
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаДанныхДокументов КАК ДанныеДокументов
		|		ПО ТаблицаТоваров.Ссылка = ДанныеДокументов.Ссылка";
	КонецЕсли;
	
	Запрос.Текст = ТекстЗапроса;
	Запрос.Выполнить();
	
КонецПроцедуры

// Формирует печатную форму Счета-фактуры.
//
// Параметры:
//  МассивОбъектов - Массив - список объектов, для которых была выполнена процедура Печать.
//  ПараметрыПечати - Структура - произвольные параметры, переданные при вызове команды печати.
//  
// Возвращаемое значение:
//  Структура - данные для печатной формы.
//
Функция ПолучитьДанныеДляПечатнойФормыСчетФактура(ПараметрыПечати, МассивОбъектов) Экспорт
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ДанныеДокументов.Ссылка               КАК Ссылка,
	|	ДанныеДокументов.Организация          КАК Организация,
	|	ДанныеДокументов.Склад                КАК Склад,
	|	ДанныеДокументов.ЦенаВключаетНДС      КАК ЦенаВключаетНДС
	|
	|ПОМЕСТИТЬ ТаблицаДанныхДокументов
	|ИЗ
	|	Документ.РеализацияТоваров КАК ДанныеДокументов
	|
	|ГДЕ
	|	ДанныеДокументов.Ссылка В (&МассивОбъектов)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка
	|;";
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	
	Запрос.Выполнить();
	
	ПоместитьВременнуюТаблицуТоваров(МенеджерВременныхТаблиц);
	
	ПродажиСервер.ПоместитьВременнуюТаблицуСчетовФактур(МенеджерВременныхТаблиц);
	ТекстЗапроса ="";
	ТекстЗапроса = ТекстЗапроса+
	"ВЫБРАТЬ
	|	РеализацияТоваров.Ссылка КАК Ссылка,
	|	&ПредставлениеСчетФактура КАК ПредставлениеДокумента,
	|	ЕСТЬNULL(СчетаФактуры.Номер, НЕОПРЕДЕЛЕНО) КАК Номер,
	|	ЕСТЬNULL(СчетаФактуры.Дата, НЕОПРЕДЕЛЕНО) КАК Дата,
	|	ЕСТЬNULL(СчетаФактуры.НомерИсправления, НЕОПРЕДЕЛЕНО) КАК НомерИсправления,
	|	ЕСТЬNULL(СчетаФактуры.ДатаИсправления, НЕОПРЕДЕЛЕНО) КАК ДатаИсправления,
	|	ЕСТЬNULL(СчетаФактуры.Исправление, ЛОЖЬ) КАК Исправление,
	|	НЕОПРЕДЕЛЕНО КАК НомерСчетаФактуры,
	|	НЕОПРЕДЕЛЕНО КАК ДатаСчетаФактуры,
	|	НЕОПРЕДЕЛЕНО КАК НомерИсправленияСчетаФактуры,
	|	НЕОПРЕДЕЛЕНО КАК ДатаИсправленияСчетаФактуры,
	|	ЕСТЬNULL(СчетаФактуры.СтрокаПлатежноРасчетныеДокументы, """") КАК СтрокаПоДокументу,
	|	РеализацияТоваров.Контрагент КАК Контрагент,
	|	РеализацияТоваров.Организация КАК Организация,
	|	РеализацияТоваров.Организация.ОбособленноеПодразделение КАК ОбособленноеПодразделение,
	|	РеализацияТоваров.Организация.Префикс КАК Префикс,
	|	РеализацияТоваров.Контрагент КАК Грузополучатель,
	|	РеализацияТоваров.Организация КАК Грузоотправитель,
	|	РеализацияТоваров.АдресДоставки КАК АдресДоставки,
	|	ВЫБОР
	|		КОГДА НоменклатураДокументов.ЕстьУслуги
	|				И НЕ НоменклатураДокументов.ЕстьТовары
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ТолькоУслуги
	|ИЗ
	|	Документ.РеализацияТоваров КАК РеализацияТоваров
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаДанныхДокументов КАК ДанныеДокументов
	|		ПО РеализацияТоваров.Ссылка = ДанныеДокументов.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаСчетовФактур КАК СчетаФактуры
	|		ПО РеализацияТоваров.Ссылка = СчетаФактуры.ДокументОснование
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			ТаблицаТоваров.Ссылка КАК Ссылка,
	|			МАКСИМУМ(ВЫБОР
	|					КОГДА НЕ ТаблицаТоваров.ЭтоТовар
	|						ТОГДА ИСТИНА
	|					ИНАЧЕ ЛОЖЬ
	|				КОНЕЦ) КАК ЕстьУслуги,
	|			МАКСИМУМ(ВЫБОР
	|					КОГДА ТаблицаТоваров.ЭтоТовар
	|						ТОГДА ИСТИНА
	|					ИНАЧЕ ЛОЖЬ
	|				КОНЕЦ) КАК ЕстьТовары
	|		ИЗ
	|			ТаблицаТоваров КАК ТаблицаТоваров
	|		
	|		СГРУППИРОВАТЬ ПО
	|			ТаблицаТоваров.Ссылка) КАК НоменклатураДокументов
	|		ПО РеализацияТоваров.Ссылка = НоменклатураДокументов.Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаДокумента.Ссылка КАК Ссылка,
	|	ТаблицаДокумента.Номенклатура КАК Номенклатура,
	|	ТаблицаДокумента.Номенклатура.НаименованиеПолное КАК НоменклатураНаименование,
	|	ВЫБОР
	|		КОГДА ТаблицаДокумента.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка)
	|			ТОГДА ТаблицаДокумента.Номенклатура.ЕдиницаИзмерения
	|		ИНАЧЕ ТаблицаДокумента.Упаковка.ЕдиницаИзмерения
	|	КОНЕЦ КАК ЕдиницаИзмерения,
	|	ВЫБОР
	|		КОГДА ТаблицаДокумента.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка)
	|			ТОГДА ТаблицаДокумента.Номенклатура.ЕдиницаИзмерения.Представление
	|		ИНАЧЕ ТаблицаДокумента.Упаковка.ЕдиницаИзмерения.Представление
	|	КОНЕЦ КАК ЕдиницаИзмеренияНаименование,
	|	ВЫБОР
	|		КОГДА ТаблицаДокумента.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка)
	|			ТОГДА ТаблицаДокумента.Номенклатура.ЕдиницаИзмерения.Код
	|		ИНАЧЕ ТаблицаДокумента.Упаковка.ЕдиницаИзмерения.Код
	|	КОНЕЦ КАК ЕдиницаИзмеренияКод,
	|	ТаблицаДокумента.Характеристика КАК Характеристика,
	|	ТаблицаДокумента.Характеристика.Наименование КАК ХарактеристикаНаименование,
	|	ТаблицаДокумента.КоличествоУпаковок КАК Количество,
	|	ТаблицаДокумента.КоличествоПоРНПТ КАК КоличествоПрослеж,
	|	ВЫБОР
	|		КОГДА ТаблицаДокумента.Номенклатура.ЕдиницаИзмеренияТНВЭД = ЗНАЧЕНИЕ(Справочник.БазовыеЕдиницыИзмерения.ПустаяСсылка)
	|			ТОГДА ТаблицаДокумента.Номенклатура.ЕдиницаИзмерения.Код
	|		ИНАЧЕ ТаблицаДокумента.Номенклатура.ЕдиницаИзмеренияТНВЭД.Код
	|	КОНЕЦ КАК ЕдиницаИзмеренияПрослежКод,
	|	ВЫБОР
	|		КОГДА ТаблицаДокумента.Номенклатура.ЕдиницаИзмеренияТНВЭД = ЗНАЧЕНИЕ(Справочник.БазовыеЕдиницыИзмерения.ПустаяСсылка)
	|			ТОГДА ТаблицаДокумента.Номенклатура.ЕдиницаИзмерения.Наименование
	|		ИНАЧЕ ТаблицаДокумента.Номенклатура.ЕдиницаИзмеренияТНВЭД.Наименование
	|	КОНЕЦ КАК ЕдиницаИзмеренияПрослеж,
	|	ТаблицаДокумента.СтавкаНДС КАК СтавкаНДС,
	|	ТаблицаДокумента.СуммаНДС КАК СуммаНДС,
	|	ВЫБОР
	|		КОГДА ТаблицаДокумента.ЦенаВключаетНДС
	|			ТОГДА ТаблицаДокумента.Сумма
	|		ИНАЧЕ ТаблицаДокумента.Сумма + ТаблицаДокумента.СуммаНДС
	|	КОНЕЦ КАК СуммаСНДС,
	|	ВЫБОР
	|		КОГДА ТаблицаДокумента.ЦенаВключаетНДС
	|			ТОГДА ТаблицаДокумента.Сумма - ТаблицаДокумента.СуммаНДС
	|		ИНАЧЕ ТаблицаДокумента.Сумма + ТаблицаДокумента.СуммаНДС - ТаблицаДокумента.СуммаНДС
	|	КОНЕЦ КАК СуммаБезНДС,
	|	ТаблицаДокумента.НомерГТД КАК НомерГТД,
	|	ВЫБОР
	|		КОГДА ТаблицаДокумента.Номенклатура.СтранаПроисхождения = ЗНАЧЕНИЕ(Справочник.СтраныМира.ПустаяСсылка)
	|			ТОГДА """"
	|		ИНАЧЕ ТаблицаДокумента.Номенклатура.СтранаПроисхождения.Код
	|	КОНЕЦ КАК СтранаПроисхожденияКод,
	|	ВЫБОР
	|		КОГДА ТаблицаДокумента.Номенклатура.СтранаПроисхождения = ЗНАЧЕНИЕ(Справочник.СтраныМира.ПустаяСсылка)
	|			ТОГДА """"
	|		ИНАЧЕ ТаблицаДокумента.Номенклатура.СтранаПроисхождения.Наименование
	|	КОНЕЦ КАК СтранаПроисхождения,
	|	ТаблицаДокумента.Номенклатура.КодТНВЭД.ПрослеживаемыйТовар КАК ПрослеживаемыйТовар,
	|	ЕстьNULL(ТаблицаДокумента.Номенклатура.КодТНВЭД.Код, """") КАК КодВидаТовара,
	|	ВЫБОР
	|		КОГДА ТаблицаДокумента.ЦенаВключаетНДС
	|			ТОГДА (ТаблицаДокумента.Сумма - ТаблицаДокумента.СуммаНДС) / ТаблицаДокумента.КоличествоУпаковок
	|		ИНАЧЕ ТаблицаДокумента.Цена
	|	КОНЕЦ КАК Цена,
	|	ТаблицаДокумента.НомерСтроки КАК НомерСтроки,
	|	ТаблицаДокумента.Склад КАК Склад,
	|	ТаблицаДокумента.Организация КАК Организация,
	|	ТаблицаДокумента.Поставщик КАК Поставщик,
	|	ТаблицаДокумента.Договор КАК Договор
	|ИЗ
	|	ТаблицаТоваров КАК ТаблицаДокумента
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка,
	|	НомерСтроки
	|ИТОГИ ПО
	|	Ссылка";
	
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("ПредставлениеСчетФактура", НСтр("ru='счет-фактура'"));
	
	МассивРезультатов         = Запрос.ВыполнитьПакет();
	РезультатПоШапке          = МассивРезультатов[0];
	РезультатПоТабличнойЧасти = МассивРезультатов[1];
	
	СтруктураДанныхДляПечати 	= Новый Структура("РезультатПоШапке, РезультатПоТабличнойЧасти",
	                                               РезультатПоШапке, РезультатПоТабличнойЧасти);
	
	Возврат СтруктураДанныхДляПечати;
	
КонецФункции

// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт
	
КонецПроцедуры

// СтандартныеПодсистемы.УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт

	Ограничение.Текст =
	"РазрешитьЧтениеИзменение
	|ГДЕ
	|	ЗначениеРазрешено(Магазин)";

КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Функция формирует текст запроса по серийным номерам.
// Возвращаемое значение: ТекстЗапроса - Строка.
Функция ТекстЗапросаТаблицаСерийныхНомеров()
	
	ТекстЗапроса = 
	"//2 
	|ВЫБРАТЬ
	|	ВЫРАЗИТЬ(Товары.Номенклатура КАК Справочник.Номенклатура) КАК Номенклатура,
	|	Товары.КлючСвязиСерийныхНомеров КАК КлючСвязиСерийныхНомеров,
	|	Товары.Количество,
	|	Товары.Цена
	|ПОМЕСТИТЬ ТабТоварыВСЕ
	|ИЗ
	|	Документ.РеализацияТоваров.Товары КАК Товары
	|ГДЕ
	|	Товары.Ссылка = &Ссылка
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	КлючСвязиСерийныхНомеров
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	// 3
	|ВЫБРАТЬ
	|	ТабТовары.Номенклатура,
	|	ТабТовары.КлючСвязиСерийныхНомеров КАК КлючСвязиСерийныхНомеров,
	|	ТабТовары.Количество,
	|	ТабТовары.Цена
	|ПОМЕСТИТЬ ТабТовары
	|ИЗ
	|	ТабТоварыВСЕ КАК ТабТовары
	|ГДЕ
	|	ТабТовары.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.ПодарочныйСертификат)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	КлючСвязиСерийныхНомеров
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	// 4
	|ВЫБРАТЬ
	|	ВЫРАЗИТЬ(СерийныеНомера.СерийныйНомер КАК Справочник.СерийныеНомера) КАК СерийныйНомер,
	|	СерийныеНомера.КлючСвязиСерийныхНомеров КАК КлючСвязиСерийныхНомеров,
	|	1 КАК Количество
	|ПОМЕСТИТЬ ТабСерийныеНомера
	|ИЗ
	|	Документ.РеализацияТоваров.СерийныеНомера КАК СерийныеНомера
	|ГДЕ
	|	СерийныеНомера.Ссылка = &Ссылка
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	КлючСвязиСерийныхНомеров
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	// 5
	|ВЫБРАТЬ
	|	ТабСерийныеНомера.СерийныйНомер.Владелец КАК Номенклатура,
	|	ТабСерийныеНомера.КлючСвязиСерийныхНомеров КАК КлючСвязиСерийныхНомеров,
	|	СУММА(ТабСерийныеНомера.Количество) КАК Количество
	|ПОМЕСТИТЬ ТабСвернутыхСерийныхНомеров
	|ИЗ
	|	ТабСерийныеНомера КАК ТабСерийныеНомера
	|
	|СГРУППИРОВАТЬ ПО
	|	ТабСерийныеНомера.СерийныйНомер.Владелец,
	|	ТабСерийныеНомера.КлючСвязиСерийныхНомеров
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	КлючСвязиСерийныхНомеров
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	// 6
	|ВЫБРАТЬ
	|	ТабТовары.Номенклатура,
	|	ТабТовары.КлючСвязиСерийныхНомеров КАК КлючСвязиСерийныхНомеров,
	|	ТабТовары.Количество - ЕСТЬNULL(ТабСвернутыхСерийныхНомеров.Количество, 0) КАК Количество
	|ПОМЕСТИТЬ ТабОстатокНоменклатур
	|ИЗ
	|	ТабТовары КАК ТабТовары
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТабСвернутыхСерийныхНомеров КАК ТабСвернутыхСерийныхНомеров
	|		ПО ТабТовары.КлючСвязиСерийныхНомеров = ТабСвернутыхСерийныхНомеров.КлючСвязиСерийныхНомеров
	|ГДЕ
	|	(НЕ ТабСвернутыхСерийныхНомеров.КлючСвязиСерийныхНомеров ЕСТЬ NULL )
	|	И ТабТовары.Количество - ЕСТЬNULL(ТабСвернутыхСерийныхНомеров.Количество, 0) > 0
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	КлючСвязиСерийныхНомеров
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	// 7
	|ВЫБРАТЬ
	|	ТабТовары.Номенклатура,
	|	ЕСТЬNULL(ТабСерийныеНомера.СерийныйНомер, ЗНАЧЕНИЕ(Справочник.СерийныеНомера.ПустаяСсылка)) КАК СерийныйНомер,
	|	ВЫБОР
	|		КОГДА ТабСерийныеНомера.СерийныйНомер ЕСТЬ NULL 
	|			ТОГДА ТабТовары.Количество
	|		ИНАЧЕ 1
	|	КОНЕЦ КАК Количество
	|ПОМЕСТИТЬ ТабОбщая
	|ИЗ
	|	ТабТовары КАК ТабТовары
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТабСерийныеНомера КАК ТабСерийныеНомера
	|		ПО ТабТовары.КлючСвязиСерийныхНомеров = ТабСерийныеНомера.КлючСвязиСерийныхНомеров
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТабОстатокНоменклатур.Номенклатура,
	|	ЗНАЧЕНИЕ(Справочник.СерийныеНомера.ПустаяСсылка),
	|	ТабОстатокНоменклатур.Количество
	|ИЗ
	|	ТабОстатокНоменклатур КАК ТабОстатокНоменклатур
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	// 8
	|ВЫБРАТЬ 
	|   ТаблицаСерийныеНомера.Номенклатура КАК Номенклатура,
	|	ТаблицаСерийныеНомера.СерийныйНомер КАК СерийныйНомер, 
	|	ТаблицаСерийныеНомера.Количество КАК Количество,
	|	&Склад КАК Отправитель,
	|	&Организация КАК Организация,
	|	&Период,
	|	&АналитикаХозяйственнойОперации КАК АналитикаХозяйственнойОперации
	|ИЗ (ВЫБРАТЬ
	|		ТабОбщая.Номенклатура КАК номенклатура,
	|		ТабОбщая.СерийныйНомер КАК СерийныйНомер,
	|		СУММА(ТабОбщая.Количество) КАК Количество
	|    ИЗ ТабОбщая КАК ТабОбщая
	|
	|	 СГРУППИРОВАТЬ ПО
	|	 ТабОбщая.Номенклатура,
	|	 ТабОбщая.СерийныйНомер) КАК ТаблицаСерийныеНомера
	|ГДЕ
	|	НЕ &РеализацияПоОрдернойСхеме
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////";
	
	Возврат ТекстЗапроса;
	
КонецФункции

// Функция формирует текст запроса по бонусам.
// Возвращаемое значение: ТекстЗапроса - Строка.
Функция ТекстЗапросаБонусы()
	
	ТекстЗапроса = "
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	БонусныеБаллы.ДатаНачисления КАК Период,
	|	&Приход КАК ВидДвижения,
	|	БонусныеБаллы.БонуснаяПрограммаЛояльности КАК БонуснаяПрограммаЛояльности,
	|	БонусныеБаллы.Ссылка.ДисконтнаяКарта КАК ДисконтнаяКарта,
	|	БонусныеБаллы.КоличествоБонусныхБаллов КАК Начислено,
	|	0 КАК КСписанию,
	|	&ПустаяДата КАК ДатаПервоначальногоНачисления
	|ПОМЕСТИТЬ БонусныеБаллы
	|ИЗ
	|	Документ.РеализацияТоваров.БонусныеБаллыКНачислению КАК БонусныеБаллы
	|ГДЕ
	|	БонусныеБаллы.Ссылка = &Ссылка
	|	И БонусныеБаллы.ДатаНачисления <> &ПустаяДата
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	БонусныеБаллы.ДатаСписания,
	|	&Приход,
	|	БонусныеБаллы.БонуснаяПрограммаЛояльности,
	|	БонусныеБаллы.Ссылка.ДисконтнаяКарта,
	|	0,
	|	БонусныеБаллы.КоличествоБонусныхБаллов,
	|	БонусныеБаллы.ДатаНачисления
	|ИЗ
	|	Документ.РеализацияТоваров.БонусныеБаллыКНачислению КАК БонусныеБаллы
	|ГДЕ
	|	БонусныеБаллы.Ссылка = &Ссылка
	|	И БонусныеБаллы.ДатаСписания <> &ПустаяДата
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	БонусныеБаллы.Период КАК Период,
	|	БонусныеБаллы.ВидДвижения КАК ВидДвижения,
	|	БонусныеБаллы.БонуснаяПрограммаЛояльности КАК БонуснаяПрограммаЛояльности,
	|	ВЫБОР
	|		КОГДА БонусныеБаллы.ДисконтнаяКарта.КартаДляНакоплений = ЗНАЧЕНИЕ(Справочник.ИнформационныеКарты.ПустаяСсылка)
	|			ТОГДА БонусныеБаллы.ДисконтнаяКарта
	|		ИНАЧЕ БонусныеБаллы.ДисконтнаяКарта.КартаДляНакоплений
	|	КОНЕЦ КАК ДисконтнаяКарта,
	|	СУММА(БонусныеБаллы.Начислено) КАК Начислено,
	|	СУММА(БонусныеБаллы.КСписанию) КАК КСписанию,
	|	БонусныеБаллы.ДатаПервоначальногоНачисления КАК ДатаПервоначальногоНачисления
	|ИЗ
	|	БонусныеБаллы КАК БонусныеБаллы
	|
	|СГРУППИРОВАТЬ ПО
	|	БонусныеБаллы.Период,
	|	БонусныеБаллы.ВидДвижения,
	|	БонусныеБаллы.БонуснаяПрограммаЛояльности,
	|	ВЫБОР
	|		КОГДА БонусныеБаллы.ДисконтнаяКарта.КартаДляНакоплений = ЗНАЧЕНИЕ(Справочник.ИнформационныеКарты.ПустаяСсылка)
	|			ТОГДА БонусныеБаллы.ДисконтнаяКарта
	|		ИНАЧЕ БонусныеБаллы.ДисконтнаяКарта.КартаДляНакоплений
	|	КОНЕЦ,
	|	БонусныеБаллы.ДатаПервоначальногоНачисления
	|;
	|";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаРасчетыСКлиентами()
	
	ТекстЗапроса = "
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	РасчетыСКлиентамиОстатки.ДокументРасчета КАК ДокументРасчета,
	|	РасчетыСКлиентамиОстатки.СуммаОстаток КАК СуммаОстаток
	|ПОМЕСТИТЬ РасчетыСКлиентами
	|ИЗ
	|	РегистрНакопления.РасчетыСКлиентами.Остатки(&Период, ДокументРасчета = &ДокументРасчета) КАК РасчетыСКлиентамиОстатки
	|ГДЕ
	|	РасчетыСКлиентамиОстатки.СуммаОстаток > 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеДокумента.Дата КАК Период,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КАК ВидДвижения,
	|	ДанныеДокумента.Организация КАК Организация,
	|	ДанныеДокумента.Магазин КАК Магазин,
	|	ДанныеДокумента.Контрагент КАК Контрагент,
	|	ДанныеДокумента.СуммаДокумента КАК Сумма,
	|	ДанныеДокумента.ЗаказПокупателя КАК ЗаказПокупателя,
	|	ДанныеДокумента.Ссылка КАК Ссылка,
	|	ЕСТЬNULL(РасчетыСКлиентами.СуммаОстаток, 0) КАК СуммаАванса,
	|	ДанныеДокумента.ДокументРасчета КАК ДокументРасчета
	|ПОМЕСТИТЬ ДанныеДокументаСАвансом

	|ИЗ
	|	Документ.РеализацияТоваров КАК ДанныеДокумента
	|		ЛЕВОЕ СОЕДИНЕНИЕ РасчетыСКлиентами КАК РасчетыСКлиентами
	|		ПО РасчетыСКлиентами.ДокументРасчета = ДанныеДокумента.ДокументРасчета
	|ГДЕ
	|	&ИспользоватьРасчетыСКлиентами
	|	И ДанныеДокумента.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеДокумента.Период КАК Период,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КАК ВидДвижения,
	|	ДанныеДокумента.Организация КАК Организация,
	|	ДанныеДокумента.Магазин КАК Магазин,
	|	ДанныеДокумента.Контрагент КАК Контрагент,
	|	ДанныеДокумента.Сумма КАК Сумма,
	|	ДанныеДокумента.ЗаказПокупателя КАК ЗаказПокупателя,
	|	ДанныеДокумента.Ссылка КАК ДокументРасчета
	|ИЗ
	|	ДанныеДокументаСАвансом КАК ДанныеДокумента
	|ГДЕ
	|	&ИспользоватьРасчетыСКлиентами
	|	И (ДанныеДокумента.ДокументРасчета = Неопределено)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДанныеДокумента.Период КАК Период,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КАК ВидДвижения,
	|	ДанныеДокумента.Организация КАК Организация,
	|	ДанныеДокумента.Магазин КАК Магазин,
	|	ДанныеДокумента.Контрагент КАК Контрагент,
	|	ВЫБОР
	|		КОГДА ДанныеДокумента.СуммаАванса >= ДанныеДокумента.Сумма
	|			ТОГДА ДанныеДокумента.Сумма
	|		ИНАЧЕ ДанныеДокумента.СуммаАванса
	|	КОНЕЦ КАК Сумма,
	|	ДанныеДокумента.ЗаказПокупателя КАК ЗаказПокупателя,
	|	ДанныеДокумента.ДокументРасчета КАК ДокументРасчета
	|ИЗ
	|	ДанныеДокументаСАвансом КАК ДанныеДокумента
	|ГДЕ
	|	&ИспользоватьРасчетыСКлиентами
	|	И НЕ ДанныеДокумента.ДокументРасчета = Неопределено
	|	И ДанныеДокумента.СуммаАванса > 0
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДанныеДокумента.Период КАК Период,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КАК ВидДвижения,
	|	ДанныеДокумента.Организация КАК Организация,
	|	ДанныеДокумента.Магазин КАК Магазин,
	|	ДанныеДокумента.Контрагент КАК Контрагент,
	|	ДанныеДокумента.Сумма - ДанныеДокумента.СуммаАванса КАК Сумма,
	|	ДанныеДокумента.ЗаказПокупателя КАК ЗаказПокупателя,
	|	ДанныеДокумента.Ссылка КАК ДокументРасчета
	|ИЗ
	|	ДанныеДокументаСАвансом КАК ДанныеДокумента
	|ГДЕ
	|	&ИспользоватьРасчетыСКлиентами
	|	И НЕ ДанныеДокумента.ДокументРасчета = Неопределено
	|	И ДанныеДокумента.Сумма >= ДанныеДокумента.СуммаАванса
	|	И (ДанныеДокумента.Сумма - ДанныеДокумента.СуммаАванса) > 0
	|;";
	
	Возврат ТекстЗапроса;
	
КонецФункции


///////////////////////////////////////////////////////////////////////////////
// Печать

// Функция формирует табличный документ с печатной формой акта об
// об оказании услуг.
//
// Возвращаемое значение:
//  Табличный документ - печатная форма акта.
//
Функция ПечатьАктаОбОказанииУслуг(МассивОбъектов, ОбъектыПечати)
	
	
	ВыводитьУпаковки   = ПолучитьФункциональнуюОпцию("ИспользоватьУпаковкиНоменклатуры");
	ТабличныйДокумент  = Новый ТабличныйДокумент;
	РеквизитыДокумента = Новый Структура("Номер, Дата, Префикс");
	СинонимДокумента   = НСтр("ru='Акт об оказании услуг'");
	
	ТабличныйДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_РеализацияТоваров_Акт";
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВложенныйЗапрос.Номер,
	|	ВложенныйЗапрос.Дата КАК Дата,
	|	ВложенныйЗапрос.Получатель,
	|	ВложенныйЗапрос.Поставщик,
	|	ВложенныйЗапрос.Организация,
	|	ВложенныйЗапрос.СуммаДокумента,
	|	ВложенныйЗапрос.УчитыватьНДС,
	|	ВложенныйЗапрос.ЦенаВключаетНДС,
	|	ВложенныйЗапрос.ЕстьСкидки,
	|	ВложенныйЗапрос.Ссылка КАК Ссылка
	|ИЗ
	|	(ВЫБРАТЬ
	|		Документ.Ссылка.Номер КАК Номер,
	|		Документ.Ссылка.Дата КАК Дата,
	|		Документ.Ссылка.Контрагент КАК Получатель,
	|		Документ.Ссылка.Склад.Организация КАК Поставщик,
	|		Документ.Ссылка.Склад.Организация КАК Организация,
	|		Документ.Ссылка.СуммаДокумента КАК СуммаДокумента,
	|		Документ.Ссылка.УчитыватьНДС КАК УчитыватьНДС,
	|		Документ.Ссылка.ЦенаВключаетНДС КАК ЦенаВключаетНДС,
	|		МАКСИМУМ(ВЫБОР
	|				КОГДА Документ.Цена * Документ.Количество = Документ.Сумма
	|					ТОГДА ЛОЖЬ
	|				ИНАЧЕ ИСТИНА
	|			КОНЕЦ) КАК ЕстьСкидки,
	|		Документ.Ссылка КАК Ссылка
	|	ИЗ
	|		Документ.РеализацияТоваров.Товары КАК Документ
	|	ГДЕ
	|		Документ.Ссылка В(&МассивОбъектов)
	|		И Документ.Ссылка.Проведен
	|		И Документ.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Услуга)
	|	
	|	СГРУППИРОВАТЬ ПО
	|		Документ.Ссылка,
	|		Документ.Ссылка.Номер,
	|		Документ.Ссылка.Дата,
	|		Документ.Ссылка.Контрагент,
	|		Документ.Ссылка.Склад.Организация,
	|		Документ.Ссылка.СуммаДокумента,
	|		Документ.Ссылка.УчитыватьНДС,
	|		Документ.Ссылка.ЦенаВключаетНДС,
	|		Документ.Ссылка.Склад.Организация) КАК ВложенныйЗапрос
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка,
	|	Дата
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТаблицаТовары.Номенклатура.НаименованиеПолное КАК Номенклатура,
	|	ТаблицаТовары.Номенклатура.НаименованиеПолное КАК НоменклатураПредставление,
	|	ПРЕДСТАВЛЕНИЕ(ТаблицаТовары.Характеристика) КАК ХарактеристикаПредставление,
	|	ТаблицаТовары.Характеристика КАК Характеристика,
	|	ТаблицаТовары.Количество,
	|	ВЫБОР
	|		КОГДА ТаблицаТовары.Упаковка <> ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка)
	|			ТОГДА ПРЕДСТАВЛЕНИЕ(ТаблицаТовары.Упаковка.ЕдиницаИзмерения)
	|		ИНАЧЕ ПРЕДСТАВЛЕНИЕ(ТаблицаТовары.Номенклатура.ЕдиницаИзмерения)
	|	КОНЕЦ КАК ЕдиницаИзмерения,
	|	ТаблицаТовары.Цена КАК Цена,
	|	ТаблицаТовары.Сумма КАК Сумма,
	|	ТаблицаТовары.СтавкаНДС,
	|	ТаблицаТовары.СуммаНДС КАК СуммаНДС,
	|	ТаблицаТовары.Цена * ТаблицаТовары.Количество - ТаблицаТовары.Сумма КАК Скидка,
	|	ТаблицаТовары.Ссылка
	|ИЗ
	|	Документ.РеализацияТоваров.Товары КАК ТаблицаТовары
	|ГДЕ
	|	ТаблицаТовары.Ссылка В(&МассивОбъектов)
	|	И ТаблицаТовары.Ссылка.Проведен
	|	И ТаблицаТовары.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Услуга)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ТаблицаТовары.Ссылка,
	|	ТаблицаТовары.НомерСтроки
	|ИТОГИ ПО
	|	ТаблицаТовары.Ссылка";
	
	
	
	
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	
	Результаты = Запрос.ВыполнитьПакет();
	
	Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.РеализацияТоваров.ПФ_MXL_Акт");
	
	ОбластьЗаголовок = Макет.ПолучитьОбласть("Заголовок");
	
	ОбластьШапкаСоСкидкой  = Макет.ПолучитьОбласть("ШапкаТаблицыСоСкидкой");
	ОбластьСтрокиСоСкидкой = Макет.ПолучитьОбласть("СтрокаСоСкидкой");
	ОбластьШапкаБезСкидок  = Макет.ПолучитьОбласть("ШапкаТаблицы");
	ОбластьСтрокиБезСкидок = Макет.ПолучитьОбласть("Строка");
	
	ОбластьИтого         = Макет.ПолучитьОбласть("Итого");
	ОбластьИтогоНДС      = Макет.ПолучитьОбласть("ИтогоНДС");
	ОбластьСуммаПрописью = Макет.ПолучитьОбласть("СуммаПрописью");
	ОбластьПодписей      = Макет.ПолучитьОбласть("Подписи");
	
	
	ВыборкаПоДокументам = Результаты[0].Выбрать();
	ВыборкаПоТабличнымЧастям = Результаты[1].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	ПервыйДокумент = Истина;
	
	Пока ВыборкаПоДокументам.Следующий() Цикл
		
		Если НЕ ВыборкаПоТабличнымЧастям.НайтиСледующий(Новый Структура("Ссылка",ВыборкаПоДокументам.Ссылка)) Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		ВыборкаПоСтрокамТЧ = ВыборкаПоТабличнымЧастям.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		Если НЕ ПервыйДокумент Тогда
			
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
			
		КонецЕсли;
		
		ПервыйДокумент = Ложь;
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		ЗаполнитьЗначенияСвойств(РеквизитыДокумента, ВыборкаПоДокументам);
		ОбластьЗаголовок.Параметры.Заполнить(ВыборкаПоДокументам);
		
		ОбластьЗаголовок.Параметры.ТекстЗаголовка = ФормированиеПечатныхФормСервер.СформироватьЗаголовокДокумента(РеквизитыДокумента, СинонимДокумента);
		
		ПредставлениеПоставщика = ФормированиеПечатныхФормСервер.ОписаниеОрганизации(ФормированиеПечатныхФормСервер.СведенияОЮрФизЛице(ВыборкаПоДокументам.Поставщик, ВыборкаПоДокументам.Дата), "ПолноеНаименование,");
		ОбластьЗаголовок.Параметры.ПредставлениеПоставщика = ПредставлениеПоставщика;
		
		ПредставлениеПолучателя = ФормированиеПечатныхФормСервер.ОписаниеОрганизации(ФормированиеПечатныхФормСервер.СведенияОЮрФизЛице(ВыборкаПоДокументам.Получатель, ВыборкаПоДокументам.Дата), "ПолноеНаименование,");
		ОбластьЗаголовок.Параметры.ПредставлениеПолучателя = ПредставлениеПолучателя;
		
		ТабличныйДокумент.Вывести(ОбластьЗаголовок);
		
		Если ВыборкаПоДокументам.ЕстьСкидки Тогда
			ТабличныйДокумент.Вывести(ОбластьШапкаСоСкидкой);
			ОбластьСтроки = ОбластьСтрокиСоСкидкой;
		Иначе
			ТабличныйДокумент.Вывести(ОбластьШапкаБезСкидок);
			ОбластьСтроки = ОбластьСтрокиБезСкидок;
		КонецЕсли;
		
		// СТРОКИ ТЧ
		ВсегоНаименований = 0;
		Сумма             = 0;
		ВсегоСкидок       = 0;
		ВсегоБезСкидок    = 0;
		СуммаНДС          = 0;
		
		Пока ВыборкаПоСтрокамТЧ.Следующий() Цикл
			Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамТЧ.Номенклатура) Тогда
				Продолжить;
			КонецЕсли;
			
			ВсегоНаименований = ВсегоНаименований + 1;
			
			ОбластьСтроки.Параметры.Заполнить(ВыборкаПоСтрокамТЧ);
			ОбластьСтроки.Параметры.НомерСтроки = ВсегоНаименований;
			ОбластьСтроки.Параметры.Товар = ФормированиеПечатныхФормСервер.ПолучитьПредставлениеНоменклатурыДляПечати(ВыборкаПоСтрокамТЧ.НоменклатураПредставление,ВыборкаПоСтрокамТЧ.ХарактеристикаПредставление);
			
			Если ВыборкаПоДокументам.ЕстьСкидки Тогда
				
				ОбластьСтроки.Параметры.Скидка         = ВыборкаПоСтрокамТЧ.Скидка;
				ОбластьСтроки.Параметры.СуммаБезСкидки = ФормированиеПечатныхФормСервер.ФорматСумм(ВыборкаПоСтрокамТЧ.Сумма + ВыборкаПоСтрокамТЧ.Скидка);
				
			КонецЕсли;
			
			Сумма          = Сумма       + ВыборкаПоСтрокамТЧ.Сумма;
			ВсегоСкидок    = ВсегоСкидок + ВыборкаПоСтрокамТЧ.Скидка;
			ВсегоБезСкидок = Сумма       + ВсегоСкидок;
			СуммаНДС       = СуммаНДС    + Окр(ВыборкаПоСтрокамТЧ.СуммаНДС, 2, 1);
			
			ТабличныйДокумент.Вывести(ОбластьСтроки);
			
		КонецЦикла;
		
		ОбластьИтого.Параметры.Всего = ФормированиеПечатныхФормСервер.ФорматСумм(Сумма);
		ТабличныйДокумент.Вывести(ОбластьИтого);
		
		Если ВыборкаПоДокументам.УчитыватьНДС Тогда
			
			ОбластьИтогоНДС.Параметры.ВсегоНДС = ФормированиеПечатныхФормСервер.ФорматСумм(СуммаНДС);
			ОбластьИтогоНДС.Параметры.НДС      = ?(ВыборкаПоДокументам.ЦенаВключаетНДС, НСтр("ru = 'В том числе НДС'"), " " + НСтр("ru = 'Сумма НДС'"));
			ТабличныйДокумент.Вывести(ОбластьИтогоНДС);
			
		КонецЕсли;
		
		ТекстИтоговойСтроки = НСтр("ru = 'Всего оказано услуг %ВсегоНаименований%, на сумму %Итого%'");
		
		ТекстИтоговойСтроки = СтрЗаменить(ТекстИтоговойСтроки,"%ВсегоНаименований%", ВсегоНаименований);
		ТекстИтоговойСтроки = СтрЗаменить(ТекстИтоговойСтроки,"%Итого%", ФормированиеПечатныхФормСервер.ФорматСумм(Сумма));
		
		ОбластьСуммаПрописью.Параметры.ИтоговаяСтрока = ТекстИтоговойСтроки;
		ОбластьСуммаПрописью.Параметры.СуммаПрописью  = ФормированиеПечатныхФормСервер.СформироватьСуммуПрописью(Сумма);
		
		ТабличныйДокумент.Вывести(ОбластьСуммаПрописью);
		
		// ПОДПИСИ
		ОбластьПодписей.Параметры.Заполнить(ВыборкаПоДокументам);
		ТабличныйДокумент.Вывести(ОбластьПодписей);
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, ВыборкаПоДокументам.Ссылка);
		
	КонецЦикла;
	
	ТабличныйДокумент.АвтоМасштаб = Истина;
	
	Возврат ТабличныйДокумент;
	
КонецФункции

// Функция формирует табличный документ унифицированной формы М-15.
//
// Параметры: 
//  Нет.
//
// Возвращаемое значение:
//  Табличный документ по форме М-15.
//
Функция ПечатьМ15(МассивОбъектов, ОбъектыПечати)
	
	
	ТабличныйДокумент  = Новый ТабличныйДокумент;
	РеквизитыДокумента = Новый Структура("Номер, Дата, Префикс");
	СинонимДокумента   = НСтр("ru='Реализация товаров'");
	
	ТабличныйДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_РеализацияТоваров_М15";
	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Документ.Номер КАК Номер,
	|	Документ.Дата КАК ДатаСоставления,
	|	Документ.Дата КАК ДатаДокумента,
	|	Документ.Организация КАК Организация,
	|	Документ.Организация КАК ЮрФизЛицо,
	|	Документ.Организация КАК Руководители,
	|	Документ.Организация.Префикс КАК Префикс,
	|	Документ.Склад КАК Склад,
	|	Документ.Склад.Наименование КАК СкладНаименование,
	|	Документ.Ответственный КАК ОтветственноеЛицо,
	|	Документ.Контрагент.Код КАК КонтрагентКод,
	|	Документ.Контрагент КАК Контрагент,
	|	Документ.АдресДоставки КАК АдресДоставки,
	|	Документ.УчитыватьНДС,
	|	Документ.ЦенаВключаетНДС,
	|	Документ.Ссылка
	|ИЗ
	|	Документ.РеализацияТоваров КАК Документ
	|ГДЕ
	|	Документ.Ссылка В(&МассивОбъектов)
	|	И Документ.Проведен
	|
	|УПОРЯДОЧИТЬ ПО
	|	Документ.Ссылка,
	|	Документ.Дата
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВложенныйЗапрос.Номенклатура,
	|	ВложенныйЗапрос.Номенклатура.Код КАК ТоварКод,
	|	ВложенныйЗапрос.Характеристика КАК Характеристика,
	|	ВложенныйЗапрос.Номенклатура.НаименованиеПолное КАК НоменклатураПредставление,
	|	ПРЕДСТАВЛЕНИЕ(ВложенныйЗапрос.Характеристика) КАК ХарактеристикаПредставление,
	|	ВложенныйЗапрос.ЕдиницаИзмерения КАК ЕдиницаИзмеренияНаименование,
	|	ВложенныйЗапрос.ЕдиницаИзмеренияКод КАК ЕдиницаИзмеренияКод,
	|	ВложенныйЗапрос.КоличествоПринято,
	|	ВложенныйЗапрос.Цена,
	|	ВложенныйЗапрос.Сумма,
	|	ВложенныйЗапрос.СуммаНДС,
	|	ВложенныйЗапрос.Ссылка КАК Ссылка,
	|	ВложенныйЗапрос.НомерСтроки КАК НомерСтроки
	|ИЗ
	|	(ВЫБРАТЬ
	|		РеализацияТоваровУслуг.Номенклатура КАК Номенклатура,
	|		РеализацияТоваровУслуг.Характеристика КАК Характеристика,
	|		ВЫБОР
	|			КОГДА РеализацияТоваровУслуг.Упаковка <> ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка)
	|				ТОГДА ПРЕДСТАВЛЕНИЕ(РеализацияТоваровУслуг.Упаковка.ЕдиницаИзмерения)
	|			ИНАЧЕ ПРЕДСТАВЛЕНИЕ(РеализацияТоваровУслуг.Номенклатура.ЕдиницаИзмерения)
	|		КОНЕЦ КАК ЕдиницаИзмерения,
	|		ВЫБОР
	|			КОГДА РеализацияТоваровУслуг.Упаковка <> ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка)
	|				ТОГДА ПРЕДСТАВЛЕНИЕ(РеализацияТоваровУслуг.Упаковка.ЕдиницаИзмерения.Код)
	|			ИНАЧЕ ПРЕДСТАВЛЕНИЕ(РеализацияТоваровУслуг.Номенклатура.ЕдиницаИзмерения.Код)
	|		КОНЕЦ КАК ЕдиницаИзмеренияКод,
	|		СУММА(РеализацияТоваровУслуг.Количество) КАК КоличествоПринято,
	|		СУММА(РеализацияТоваровУслуг.Цена) КАК Цена,
	|		СУММА(РеализацияТоваровУслуг.Сумма) КАК Сумма,
	|		СУММА(РеализацияТоваровУслуг.СуммаНДС) КАК СуммаНДС,
	|		РеализацияТоваровУслуг.Ссылка КАК Ссылка,
	|		РеализацияТоваровУслуг.НомерСтроки КАК НомерСтроки
	|	ИЗ
	|		Документ.РеализацияТоваров.Товары КАК РеализацияТоваровУслуг
	|	ГДЕ
	|		РеализацияТоваровУслуг.Ссылка В(&МассивОбъектов)
	|		И РеализацияТоваровУслуг.Ссылка.Проведен
	|		И РеализацияТоваровУслуг.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар)
	|	
	|	СГРУППИРОВАТЬ ПО
	|		РеализацияТоваровУслуг.Номенклатура,
	|		РеализацияТоваровУслуг.Характеристика,
	|		РеализацияТоваровУслуг.Ссылка,
	|		РеализацияТоваровУслуг.НомерСтроки,
	|		ВЫБОР
	|			КОГДА РеализацияТоваровУслуг.Упаковка <> ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка)
	|				ТОГДА ПРЕДСТАВЛЕНИЕ(РеализацияТоваровУслуг.Упаковка.ЕдиницаИзмерения)
	|			ИНАЧЕ ПРЕДСТАВЛЕНИЕ(РеализацияТоваровУслуг.Номенклатура.ЕдиницаИзмерения)
	|		КОНЕЦ,
	|		ВЫБОР
	|			КОГДА РеализацияТоваровУслуг.Упаковка <> ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка)
	|				ТОГДА ПРЕДСТАВЛЕНИЕ(РеализацияТоваровУслуг.Упаковка.ЕдиницаИзмерения.Код)
	|			ИНАЧЕ ПРЕДСТАВЛЕНИЕ(РеализацияТоваровУслуг.Номенклатура.ЕдиницаИзмерения.Код)
	|		КОНЕЦ) КАК ВложенныйЗапрос
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка,
	|	НомерСтроки
	|ИТОГИ ПО
	|	Ссылка";
	
	
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	
	Результаты = Запрос.ВыполнитьПакет();
	
	Макет = УправлениеПечатью.МакетПечатнойФормы("ОбщийМакет.ПФ_MXL_М15");
	
	ОбластьШапка            = Макет.ПолучитьОбласть("Шапка");
	ОбластьЗаголовокТаблицы = Макет.ПолучитьОбласть("ЗаголовокТаблицы");
	ОбластьСтрока           = Макет.ПолучитьОбласть("Строка");
	ОбластьПодвал           = Макет.ПолучитьОбласть("Подвал");
	
	
	
	ВыборкаПоДокументам = Результаты[0].Выбрать();
	ВыборкаПоТабличнымЧастям = Результаты[1].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	ПервыйДокумент = Истина;
	
	СтрокНаСтранице = 24;
	СтрокШапки      = 9;
	СтрокПодвала    = 3;
	НомерСтраницы   = 1;
	
	Пока ВыборкаПоДокументам.Следующий() Цикл
		
		Если НЕ ВыборкаПоТабличнымЧастям.НайтиСледующий(Новый Структура("Ссылка",ВыборкаПоДокументам.Ссылка)) Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		ВыборкаПоСтрокамТЧ = ВыборкаПоТабличнымЧастям.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		Если НЕ ПервыйДокумент Тогда
			
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
			
		КонецЕсли;
		
		ПервыйДокумент = Ложь;
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		// Выводим общие реквизиты шапки.
		СведенияОбОрганизации = ФормированиеПечатныхФормСервер.СведенияОЮрФизЛице(ВыборкаПоДокументам.ЮрФизЛицо, ВыборкаПоДокументам.ДатаСоставления);
		
		ОбластьШапка.Параметры.Заполнить(ВыборкаПоДокументам);
		ОбластьШапка.Параметры.ПредставлениеОрганизации = ФормированиеПечатныхФормСервер.ОписаниеОрганизации(СведенияОбОрганизации);
		ОбластьШапка.Параметры.ОрганизацияПоОКПО        = СведенияОбОрганизации.КодПоОКПО;
		ОбластьШапка.Параметры.НомерДокумента           = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(ВыборкаПоДокументам.Номер, Ложь, Истина);
		
		ПредставлениеКонтрагента = ФормированиеПечатныхФормСервер.ОписаниеОрганизации(ФормированиеПечатныхФормСервер.СведенияОЮрФизЛице(ВыборкаПоДокументам.Контрагент, ВыборкаПоДокументам.ДатаСоставления), "ПолноеНаименование,");
		ОбластьШапка.Параметры.КонтрагентНаименование = ПредставлениеКонтрагента;
		
		ТабличныйДокумент.Вывести(ОбластьШапка);
		ТабличныйДокумент.Вывести(ОбластьЗаголовокТаблицы);
		
		КоличествоСтрок = ВыборкаПоСтрокамТЧ.Количество();
		Если КоличествоСтрок = 1 Тогда
			ПереноситьПоследнююСтроку = 0;
		Иначе
			ЦелыхСтраницСПодвалом     = Цел((СтрокШапки + КоличествоСтрок + СтрокПодвала) / СтрокНаСтранице);
			ЦелыхСтраницБезПодвала    = Цел((СтрокШапки + КоличествоСтрок - 1) / СтрокНаСтранице);
			ПереноситьПоследнююСтроку = ЦелыхСтраницСПодвалом - ЦелыхСтраницБезПодвала;
		КонецЕсли;
		
		// Инициализация итогов в документе.
		ИтогоКоличествоПринято = 0;
		ИтогоСуммаБезНДС = 0;
		ИтогоСуммаНДС    = 0;
		ИтогоВсегоСНДС   = 0;
		Номер            = 0;
		
		// Выводим многострочную часть документа.
		
		Пока ВыборкаПоСтрокамТЧ.Следующий() Цикл
			
			Если Не ЗначениеЗаполнено(ВыборкаПоСтрокамТЧ.Номенклатура) Тогда
				Продолжить;
			КонецЕсли;
			
			Номер = Номер + 1;
			// Начинаем новую страницу, если предыдущая строка была последней на странице
			// или пора переносить последнюю строку на последнюю страницу с подвалом.
			ЦелаяСтраница = (СтрокШапки + Номер - 1) / СтрокНаСтранице;
			
			Если (ЦелаяСтраница = Цел(ЦелаяСтраница))
				Или ((ПереноситьПоследнююСтроку = 1) И (Номер = КоличествоСтрок)) Тогда
				
				НомерСтраницы	= НомерСтраницы + 1;
				ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
				ОбластьЗаголовокТаблицы.Параметры.НомерСтраницы = "Страница " + НомерСтраницы;
				ТабличныйДокумент.Вывести(ОбластьЗаголовокТаблицы);
			КонецЕсли;
			
			
			
			ОбластьЗаголовокТаблицы.Параметры.Заполнить(ВыборкаПоСтрокамТЧ);
			
			СуммаСНДС   = (ВыборкаПоСтрокамТЧ.Сумма + ?(ВыборкаПоДокументам.ЦенаВключаетНДС, 0, ВыборкаПоСтрокамТЧ.СуммаНДС));
			СуммаНДС    = ВыборкаПоСтрокамТЧ.СуммаНДС;
			СуммаБезНДС = СуммаСНДС  - СуммаНДС;
			
			Количество      = ВыборкаПоСтрокамТЧ.КоличествоПринято;
			Цена            = СуммаБезНДС / Количество;
			
			ОбластьСтрока.Параметры.Количество        = Количество;
			ОбластьСтрока.Параметры.СуммаСНДС         = СуммаСНДС;
			ОбластьСтрока.Параметры.СуммаБезНДС       = СуммаБезНДС;
			ОбластьСтрока.Параметры.СуммаНДС          = СуммаНДС;
			ОбластьСтрока.Параметры.Цена              = Цена;
			ОбластьСтрока.Параметры.ТоварНаименование = ФормированиеПечатныхФормСервер.ПолучитьПредставлениеНоменклатурыДляПечати(ВыборкаПоСтрокамТЧ.НоменклатураПредставление,ВыборкаПоСтрокамТЧ.ХарактеристикаПредставление);
			
			ТабличныйДокумент.Вывести(ОбластьСтрока);
			
			ИтогоКоличествоПринято = ИтогоКоличествоПринято + Количество;
			ИтогоСуммаБезНДС       = ИтогоСуммаБезНДС       + СуммаБезНДС;
			ИтогоВсегоСНДС         = ИтогоВсегоСНДС         + СуммаСНДС;
			
		КонецЦикла;
		
		ОбластьПодвал.Параметры.Заполнить(ВыборкаПоДокументам);
		
		Руководители = ФормированиеПечатныхФормСервер.ОтветственныеЛицаОрганизаций(ВыборкаПоДокументам.Руководители, ВыборкаПоДокументам.ДатаДокумента,);
		Руководитель = Руководители.Руководитель;
		Бухгалтер    = Руководители.ГлавныйБухгалтер;
		
		// Главный бухгалтер
		ОбластьПодвал.Параметры.ФИОГлавБухгалтера = Бухгалтер;
		
		ФИООтпускРазрешил       = Руководитель;
		ДолжностьОтпускРазрешил = Руководители.РуководительДолжность;
		
		ОбластьПодвал.Параметры.ФИОРуководителя       = ФИООтпускРазрешил;
		ОбластьПодвал.Параметры.ДолжностьРуководителя = ДолжностьОтпускРазрешил;
		
		// Отпуск товара произвел
		ФамилияИмяОтчествоФизЛица     = ФормированиеПечатныхФормСервер.ФамилияИмяОтчество(ВыборкаПоДокументам.ОтветственноеЛицо, ВыборкаПоДокументам.ДатаДокумента);
		
		ФамилияИмяОтчествоОтпускПроизвел = ФамилияИмяОтчествоФизЛица.Фамилия + " " + ФамилияИмяОтчествоФизЛица.Имя + " " + ФамилияИмяОтчествоФизЛица.Отчество;
		ФИООтпускПроизвел                = ФормированиеПечатныхФормСервер.ФамилияИнициалыФизЛица(ФамилияИмяОтчествоОтпускПроизвел);
		
		ОбластьПодвал.Параметры.ФИОКладовщика       = ФИООтпускПроизвел;
		
		// Выводим итоги по документу
		ОбластьПодвал.Параметры.КоличествоПорядковыхНомеровЗаписейПрописью = ЧислоПрописью(КоличествоСтрок, ,",,,,,,,,0");
		ОбластьПодвал.Параметры.СуммаПрописью = ФормированиеПечатныхФормСервер.СформироватьСуммуПрописью(ИтогоВсегоСНДС);
		ОбластьПодвал.Параметры.ИтогНДС       = ИтогоВсегоСНДС - ИтогоСуммаБезНДС;
		
		ТабличныйДокумент.Вывести(ОбластьПодвал);
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, ВыборкаПоДокументам.Ссылка);
		
	КонецЦикла;
	
	ТабличныйДокумент.АвтоМасштаб = Истина;
	// Зададим параметры макета
	ТабличныйДокумент.ПолеСверху         = 20;
	ТабличныйДокумент.ПолеСлева          = 10;
	ТабличныйДокумент.ПолеСнизу          = 20;
	ТабличныйДокумент.ПолеСправа         = 20;
	ТабличныйДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
	
	
	Возврат ТабличныйДокумент;
	
КонецФункции

// Функция формирует табличный документ с печатной формой.
//
// Возвращаемое значение:
//  ТабличныйДокумент - печатная форма.
//
Функция ПечатьНакладная(МассивОбъектов, ОбъектыПечати)

	КолонкаКодов       = ФормированиеПечатныхФормСервер.ИмяДополнительнойКолонки();
	ВыводитьКоды       = ЗначениеЗаполнено(КолонкаКодов);
	ВыводитьУпаковки   = ПолучитьФункциональнуюОпцию("ИспользоватьУпаковкиНоменклатуры");
	ТабличныйДокумент  = Новый ТабличныйДокумент;
	РеквизитыДокумента = Новый Структура("Номер, Дата, Префикс");
	СинонимДокумента   = НСтр("ru='Реализация товаров'");
	
	ТабличныйДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_РеализацияТоваров_Накладная";
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Документ.Ссылка КАК Ссылка,
	|	Документ.Номер КАК Номер,
	|	Документ.Дата КАК Дата,
	|	Документ.Магазин КАК Магазин,
	|	ВЫБОР
	|		КОГДА Документ.Организация.ЮрФизЛицо = ЗНАЧЕНИЕ(Перечисление.ЮрФизЛицо.ЮрЛицо)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ОрганизацияЮридическоеЛицо,
	|	Документ.Организация КАК Поставщик,
	|	Документ.СуммаДокумента КАК СуммаДокумента,
	|	ПРЕДСТАВЛЕНИЕ(Документ.Магазин) КАК МагазинПредставление,
	|	ПРЕДСТАВЛЕНИЕ(Документ.Организация) КАК ПредставлениеПоставщика,
	|	Документ.Ответственный.ФизическоеЛицо КАК Ответственный,
	|	Документ.Контрагент КАК Получатель,
	|	ПРЕДСТАВЛЕНИЕ(Документ.Контрагент) КАК ПредставлениеПолучателя,
	|	Документ.УчитыватьНДС,
	|	Документ.ЦенаВключаетНДС
	|ИЗ
	|	Документ.РеализацияТоваров КАК Документ
	|ГДЕ
	|	Документ.Ссылка В(&МассивОбъектов)
	|	И Документ.Проведен
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка,
	|	Дата
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТаблицаТовары.НомерСтроки КАК НомерСтроки,
	|	ТаблицаТовары.Номенклатура КАК Номенклатура,
	|	" + ?(ВыводитьКоды, "ТаблицаТовары.Номенклатура." + КолонкаКодов +" КАК КолонкаКодов,", "") + "
	|	ТаблицаТовары.Номенклатура.Представление КАК Товар,
	|	ТаблицаТовары.Номенклатура.НаименованиеПолное КАК НоменклатураПредставление,
	|	ПРЕДСТАВЛЕНИЕ(ТаблицаТовары.Характеристика) КАК ХарактеристикаПредставление,
	|	ПРЕДСТАВЛЕНИЕ(ТаблицаТовары.Номенклатура.ЕдиницаИзмерения) КАК ПредставлениеБазовойЕдиницыИзмерения,
	|	ВЫБОР
	|		КОГДА ТаблицаТовары.Упаковка <> ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка)
	|			ТОГДА ПРЕДСТАВЛЕНИЕ(ТаблицаТовары.Упаковка.ЕдиницаИзмерения)
	|		ИНАЧЕ ПРЕДСТАВЛЕНИЕ(ТаблицаТовары.Номенклатура.ЕдиницаИзмерения)
	|	КОНЕЦ КАК ЕдиницаИзмерения,
	|	ТаблицаТовары.Количество КАК КоличествоВБазовыхЕдиницах,
	|	ТаблицаТовары.КоличествоУпаковок КАК Количество,
	|	ВЫБОР КОГДА ТаблицаТовары.КоличествоУпаковок = 0 ТОГДА ТаблицаТовары.КоличествоУпаковок
	|	ИНАЧЕ ТаблицаТовары.Сумма / ТаблицаТовары.КоличествоУпаковок
	|	КОНЕЦ КАК Цена,
	|	ТаблицаТовары.Сумма КАК Сумма,
	|	ТаблицаТовары.Ссылка КАК Ссылка,
	|	ТаблицаТовары.Сумма +
	|	ТаблицаТовары.СуммаРучнойСкидки +
	|	ТаблицаТовары.СуммаАвтоматическойСкидки   КАК СуммаБезСкидки,
	|	ТаблицаТовары.СуммаРучнойСкидки +
	|	ТаблицаТовары.СуммаАвтоматическойСкидки   КАК Скидка,
	|	ТаблицаТовары.СуммаНДС,
	|	ТаблицаТовары.СтавкаНДС
	|ИЗ
	|	Документ.РеализацияТоваров.Товары КАК ТаблицаТовары
	|ГДЕ
	|	ТаблицаТовары.Ссылка В(&МассивОбъектов)
	|	И ТаблицаТовары.Ссылка.Проведен
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка,
	|	НомерСтроки
	|ИТОГИ ПО
	|	Ссылка");
	
	
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	
	Результаты = Запрос.ВыполнитьПакет();
	
	Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.РеализацияТоваров.ПФ_MXL_Накладная");
	
	ОбластьЗаголовок = Макет.ПолучитьОбласть("Заголовок");
	
	ОбластьШапкаНомера         = Макет.ПолучитьОбласть("ШапкаТаблицы|НомерСтроки");
	ОбластьШапкаКодов          = Макет.ПолучитьОбласть("ШапкаТаблицы|КолонкаКодов");
	ОбластьШапкаДанных         = Макет.ПолучитьОбласть("ШапкаТаблицы|Данные");
	ОбластьШапкаСкидок         = Макет.ПолучитьОбласть("ШапкаТаблицы|Скидка");
	ОбластьШапкаСуммы          = Макет.ПолучитьОбласть("ШапкаТаблицы|Сумма");
	
	ОбластьКолонкаТовар = Макет.Область("Товар");
	Если Не ВыводитьКоды Тогда
		ОбластьКолонкаТовар.ШиринаКолонки = ОбластьКолонкаТовар.ШиринаКолонки
		                                  + Макет.Область("КолонкаКодов").ШиринаКолонки;
	КонецЕсли;
	ОбластьСтрокаНомера         = Макет.ПолучитьОбласть("Строка|НомерСтроки");
	ОбластьСтрокаКодов          = Макет.ПолучитьОбласть("Строка|КолонкаКодов");
	ОбластьСтрокаДанных         = Макет.ПолучитьОбласть("Строка|Данные");
	ОбластьСтрокаСкидок         = Макет.ПолучитьОбласть("Строка|Скидка");
	ОбластьСтрокаСуммы          = Макет.ПолучитьОбласть("Строка|Сумма");
	
	ОбластьИтогоНДСНомера = Макет.ПолучитьОбласть("ИтогоНДС|НомерСтроки");
	ОбластьИтогоНДСКодов  = Макет.ПолучитьОбласть("ИтогоНДС|КолонкаКодов");
	ОбластьИтогоНДСДанных = Макет.ПолучитьОбласть("ИтогоНДС|Данные");
	ОбластьИтогоНДССкидок = Макет.ПолучитьОбласть("ИтогоНДС|Скидка");
	ОбластьИтогоНДССуммы  = Макет.ПолучитьОбласть("ИтогоНДС|Сумма");
	
	// Вывести Итого.
	ОбластьИтогоНомера         = Макет.ПолучитьОбласть("Итого|НомерСтроки");
	ОбластьИтогоКодов          = Макет.ПолучитьОбласть("Итого|КолонкаКодов");
	ОбластьИтогоДанных         = Макет.ПолучитьОбласть("Итого|Данные");
	ОбластьИтогоСкидок         = Макет.ПолучитьОбласть("Итого|Скидка");
	ОбластьИтогоСуммы          = Макет.ПолучитьОбласть("Итого|Сумма");
	
	ОбластьСуммаПрописью = Макет.ПолучитьОбласть("СуммаПрописью");
	ОбластьПодписей      = Макет.ПолучитьОбласть("Подписи");
	
	
	ВыборкаПоДокументам = Результаты[0].Выбрать();
	ВыборкаПоТабличнымЧастям = Результаты[1].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	ПервыйДокумент = Истина;
	
	Пока ВыборкаПоДокументам.Следующий() Цикл
		
		Если НЕ ВыборкаПоТабличнымЧастям.НайтиСледующий(Новый Структура("Ссылка",ВыборкаПоДокументам.Ссылка)) Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		ВыборкаПоСтрокамТЧ = ВыборкаПоТабличнымЧастям.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		Если НЕ ПервыйДокумент Тогда
			
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
			
		КонецЕсли;
		
		ПервыйДокумент = Ложь;
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		ЗаполнитьЗначенияСвойств(РеквизитыДокумента, ВыборкаПоДокументам);
		ОбластьЗаголовок.Параметры.Заполнить(ВыборкаПоДокументам);
		
		ОбластьЗаголовок.Параметры.ТекстЗаголовка = ФормированиеПечатныхФормСервер.СформироватьЗаголовокДокумента(РеквизитыДокумента, СинонимДокумента);
		
		ПредставлениеПоставщика = ФормированиеПечатныхФормСервер.ОписаниеОрганизации(ФормированиеПечатныхФормСервер.СведенияОЮрФизЛице(ВыборкаПоДокументам.Поставщик, ВыборкаПоДокументам.Дата), "ПолноеНаименование,");
		ОбластьЗаголовок.Параметры.ПредставлениеПоставщика = ПредставлениеПоставщика;
		
		ПредставлениеПолучателя = ФормированиеПечатныхФормСервер.ОписаниеОрганизации(ФормированиеПечатныхФормСервер.СведенияОЮрФизЛице(ВыборкаПоДокументам.Получатель, ВыборкаПоДокументам.Дата), "ПолноеНаименование,");
		ОбластьЗаголовок.Параметры.ПредставлениеПолучателя = ПредставлениеПолучателя;
		
		ТабличныйДокумент.Вывести(ОбластьЗаголовок);
		
		// Шапка
		
		ТабличныйДокумент.Вывести(ОбластьШапкаНомера);
		Если ВыводитьКоды Тогда
			ОбластьШапкаКодов.Параметры.ИмяКолонкиКодов = КолонкаКодов;
			ТабличныйДокумент.Присоединить(ОбластьШапкаКодов);
		КонецЕсли;
		ТабличныйДокумент.Присоединить(ОбластьШапкаДанных);
		ТабличныйДокумент.Присоединить(ОбластьШапкаСкидок);
		ТабличныйДокумент.Присоединить(ОбластьШапкаСуммы);
		
		
		ВсегоНаименований = 0;
		Сумма             = 0;
		ВсегоСкидок       = 0;
		ВсегоБезСкидок    = 0;
		СуммаНДС          = 0;
		
		// СТРОКИ ТЧ
		Пока ВыборкаПоСтрокамТЧ.Следующий() Цикл
			Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамТЧ.Номенклатура) Тогда
				Продолжить;
			КонецЕсли;

			ОбластьСтрокаНомера.Параметры.Заполнить(ВыборкаПоСтрокамТЧ);
			ТабличныйДокумент.Вывести(ОбластьСтрокаНомера);

			Если ВыводитьКоды Тогда
				
				ОбластьСтрокаКодов.Параметры.Артикул = ВыборкаПоСтрокамТЧ["КолонкаКодов"];
				ТабличныйДокумент.Присоединить(ОбластьСтрокаКодов);
				
			КонецЕсли;

			ОбластьСтрокаДанных.Параметры.Заполнить(ВыборкаПоСтрокамТЧ);
			ОбластьСтрокаДанных.Параметры.Товар = ФормированиеПечатныхФормСервер.ПолучитьПредставлениеНоменклатурыДляПечати(ВыборкаПоСтрокамТЧ.НоменклатураПредставление,ВыборкаПоСтрокамТЧ.ХарактеристикаПредставление);
			ТабличныйДокумент.Присоединить(ОбластьСтрокаДанных);
			
			ОбластьСтрокаСкидок.Параметры.Заполнить(ВыборкаПоСтрокамТЧ);
			ТабличныйДокумент.Присоединить(ОбластьСтрокаСкидок);

			ОбластьСтрокаСуммы.Параметры.Заполнить(ВыборкаПоСтрокамТЧ);
			ТабличныйДокумент.Присоединить(ОбластьСтрокаСуммы);
			
			ВсегоНаименований = ВсегоНаименований + 1;
			
			Сумма          = Сумма       + ВыборкаПоСтрокамТЧ.Сумма;
			ВсегоСкидок    = ВсегоСкидок + ВыборкаПоСтрокамТЧ.Скидка;
			ВсегоБезСкидок = Сумма       + ВсегоСкидок;
			СуммаНДС       = СуммаНДС    + Окр(ВыборкаПоСтрокамТЧ.СуммаНДС, 2, 1);
			
		КонецЦикла;
		
		ТабличныйДокумент.Вывести(ОбластьИтогоНомера);
		Если ВыводитьКоды Тогда
			ТабличныйДокумент.Присоединить(ОбластьИтогоКодов);
		КонецЕсли;
		
		ТабличныйДокумент.Присоединить(ОбластьИтогоДанных);
		ОбластьИтогоСкидок.Параметры.ВсегоСкидок    = ВсегоСкидок;
		ОбластьИтогоСкидок.Параметры.ВсегоБезСкидок = ВсегоБезСкидок;
		ТабличныйДокумент.Присоединить(ОбластьИтогоСкидок);
		ОбластьИтогоСуммы.Параметры.Всего = Сумма;
		ТабличныйДокумент.Присоединить(ОбластьИтогоСуммы);
		
		
		// Вывести ИтогоНДС
		ТабличныйДокумент.Вывести(ОбластьИтогоНДСНомера);
		Если ВыводитьКоды Тогда
			ТабличныйДокумент.Присоединить(ОбластьИтогоНДСКодов);
		КонецЕсли;
		
		ОбластьИтогоНДСДанных.Параметры.НДС = ?(ВыборкаПоДокументам.ЦенаВключаетНДС, НСтр("ru = 'В том числе НДС:'"), НСтр("ru = 'Сумма НДС:'"));
		ТабличныйДокумент.Присоединить(ОбластьИтогоНДСДанных);
		ТабличныйДокумент.Присоединить(ОбластьИтогоНДССкидок);
		
		Если НЕ ВыборкаПоДокументам.УчитыватьНДС Тогда
			СуммаНДССтрока = НСтр("ru = 'Без НДС'");
		Иначе
			СуммаНДССтрока = Строка(СуммаНДС);
		КонецЕсли;
		
		ОбластьИтогоНДССуммы.Параметры.ВсегоНДС = СуммаНДССтрока;
		ТабличныйДокумент.Присоединить(ОбластьИтогоНДССуммы);
		
		
		// Вывести Сумму прописью.
		
		ТекстИтоговойСтроки = НСтр("ru = 'Всего наименований %ВсегоНаименований%, на сумму %Итого%'");
		
		ТекстИтоговойСтроки = СтрЗаменить(ТекстИтоговойСтроки,"%ВсегоНаименований%", ВсегоНаименований);
		ТекстИтоговойСтроки = СтрЗаменить(ТекстИтоговойСтроки,"%Итого%", ФормированиеПечатныхФормСервер.ФорматСумм(Сумма));
		
		ОбластьСуммаПрописью.Параметры.ИтоговаяСтрока = ТекстИтоговойСтроки;
		ОбластьСуммаПрописью.Параметры.СуммаПрописью  = ФормированиеПечатныхФормСервер.СформироватьСуммуПрописью(Сумма);
		
		ТабличныйДокумент.Вывести(ОбластьСуммаПрописью);
		
		// ПОДПИСИ
		ОбластьПодписей.Параметры.Заполнить(ВыборкаПоДокументам);
		ОбластьПодписей.Параметры.ОтветственныйПредставление = ФормированиеПечатныхФормСервер.ФамилияИнициалыФизЛица(ВыборкаПоДокументам.Ответственный);
		ТабличныйДокумент.Вывести(ОбластьПодписей);
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, ВыборкаПоДокументам.Ссылка);
		
	КонецЦикла;
	
	ТабличныйДокумент.АвтоМасштаб = Истина;
	
	Возврат ТабличныйДокумент;
КонецФункции

// Функция формирует печатную форму документа.
//
Функция ПечатьТОРГ12(МассивОбъектов, ОбъектыПечати,ВыводитьУслуги = Истина)
	
	КолонкаКодов = ФормированиеПечатныхФормСервер.ИмяДополнительнойКолонки();
	
	Если ПустаяСтрока(КолонкаКодов) Тогда
		
		КолонкаКодов = "Код";
		
	КонецЕсли;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ДокументКПечати.Ссылка                                                 КАК Ссылка,
	|	ДокументКПечати.Номер                                                  КАК Номер,
	|	ДокументКПечати.Дата                                                   КАК Дата,
	|	ДокументКПечати.Контрагент                                             КАК Контрагент,
	|	ДокументКПечати.Организация                                            КАК Организация,
	|	ДокументКПечати.Организация                                            КАК Руководители,
	|	ДокументКПечати.Организация.Префикс                                    КАК Префикс,
	|	ДокументКПечати.Организация                                            КАК Грузоотправитель,
	|	ДокументКПечати.Контрагент                                             КАК Грузополучатель,
	|	ДокументКПечати.Контрагент                                             КАК Покупатель,
	|	ДокументКПечати.БанковскийСчетОрганизации                              КАК БанковскийСчетОрганизации,
	|	ДокументКПечати.Организация                                            КАК Поставщик,
	|	ДокументКПечати.Контрагент                                             КАК Плательщик,
	|	ДокументКПечати.Ответственный.ФизическоеЛицо                           КАК ОтветственноеЛицо,
	|	ДокументКПечати.ЦенаВключаетНДС                                        КАК ЦенаВключаетНДС,
	|	ДокументКПечати.АдресДоставки                                          КАК АдресДоставки,
	|	ДокументКПечати.УчитыватьНДС                                           КАК УчитыватьНДС,
	|	ДокументКПечати.ДоверенностьНомер                                      КАК ДоверенностьНомер,
	|	ДокументКПечати.ДоверенностьДата                                       КАК ДоверенностьДата,
	|	ДокументКПечати.ДоверенностьВыдана                                     КАК ДоверенностьВыдана,
	|	ДокументКПечати.ДоверенностьЧерезКого                                  КАК ДоверенностьЧерезКого
	|ИЗ
	|	Документ.РеализацияТоваров КАК ДокументКПечати
	|
	|ГДЕ
	|	ДокументКПечати.Ссылка В (&МассивДокументов)
	|	И ДокументКПечати.Проведен
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка
	|;		
	|
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВложенныйЗапрос.Ссылка                                                     КАК Ссылка,
	|	ВложенныйЗапрос.Номенклатура                                               КАК Номенклатура,
	|	ВложенныйЗапрос.Номенклатура.НаименованиеПолное                            КАК ТоварНаименование,
	|	ВложенныйЗапрос.Номенклатура." + КолонкаКодов + "                          КАК ТоварКод,
	|	ВложенныйЗапрос.ЕдиницаИзмерения.Представление                             КАК БазоваяЕдиницаНаименование,
	|	ВложенныйЗапрос.ЕдиницаИзмерения.Код                                       КАК БазоваяЕдиницаКодПоОКЕИ,
	|	ВложенныйЗапрос.ЕдиницаИзмерения                                           КАК ЕдиницаИзмерения,
	|	ВложенныйЗапрос.ЕдиницаИзмеренияМест.Представление                         КАК ВидУпаковки,
	|	ВложенныйЗапрос.КоэффициентМест / ВложенныйЗапрос.Коэффициент              КАК КоличествоВОдномМесте,
	|	ВложенныйЗапрос.Характеристика                                             КАК Характеристика,
	|	ВложенныйЗапрос.СтавкаНДС                                                  КАК СтавкаНДС,
	|	ВложенныйЗапрос.Цена                                                       КАК Цена,
	|	ВложенныйЗапрос.Количество                                                 КАК Количество,
	|	ЕСТЬNULL(ВложенныйЗапрос.КоличествоМест, 0)                                КАК КоличествоМест,
	|	ВложенныйЗапрос.Сумма                                                      КАК Сумма,
	|	ВложенныйЗапрос.СуммаНДС                                                   КАК СуммаНДС,
	|	ВложенныйЗапрос.НомерСтроки                                                КАК НомерСтроки,
	|	ВложенныйЗапрос.МассаБрутто                                                КАК МассаБрутто,
	|	ЛОЖЬ                                                                       КАК ЭтоВозвратнаяТара
	|ИЗ (
	|	ВЫБРАТЬ
	|		Товары.Ссылка КАК Ссылка,
	|		Товары.Номенклатура КАК Номенклатура,
	|
	|		ВЫБОР КОГДА Товары.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка) ТОГДА
	|			1
	|		ИНАЧЕ
	|			Товары.Упаковка.Коэффициент
	|		КОНЕЦ КАК Коэффициент,
	|
	|		ВЫБОР КОГДА Товары.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка) ТОГДА
	|			Товары.Номенклатура.ЕдиницаИзмерения
	|		ИНАЧЕ
	|			Товары.Упаковка.ЕдиницаИзмерения
	|		КОНЕЦ КАК ЕдиницаИзмерения,
	|
	|		ВЫБОР КОГДА Товары.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка) ТОГДА
	|			1
	|		ИНАЧЕ
	|			Товары.Упаковка.Коэффициент
	|		КОНЕЦ КАК КоэффициентМест,
	|
	|		ВЫБОР КОГДА Товары.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка) ТОГДА
	|			Товары.Номенклатура.ЕдиницаИзмерения
	|		ИНАЧЕ
	|			Товары.Упаковка.ЕдиницаИзмерения
	|		КОНЕЦ КАК ЕдиницаИзмеренияМест,
	|
	|		ВЫБОР КОГДА Товары.Упаковка.Вес ЕСТЬ NULL ТОГДА
	|			Товары.Количество * Товары.Номенклатура.Вес
	|		ИНАЧЕ
	|			Товары.КоличествоУпаковок * Товары.Упаковка.Вес
	|		КОНЕЦ КАК МассаБрутто,
	|
	|		Товары.Характеристика     КАК Характеристика,
	|		Товары.СтавкаНДС          КАК СтавкаНДС,
	|		ВЫБОР
	|			КОГДА
	|				Товары.КоличествоУпаковок = 0
	|			ТОГДА
	|				Товары.Цена
	|			ИНАЧЕ
	|				Товары.Сумма / Товары.КоличествоУпаковок
	|		КОНЕЦ КАК Цена,
	|		Товары.КоличествоУпаковок КАК Количество,
	|		Товары.КоличествоУпаковок КАК КоличествоМест,
	|		Товары.Сумма              КАК Сумма,
	|		Товары.СуммаНДС           КАК СуммаНДС,
	|		Товары.НомерСтроки        КАК НомерСтроки
	|	ИЗ
	|		Документ.РеализацияТоваров.Товары КАК Товары
	|	ГДЕ
	|		Товары.Ссылка В (&МассивДокументов)
	|		И Товары.Ссылка.Проведен
	|		" + ?(НЕ ВыводитьУслуги, " И НЕ (Товары.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Услуга)) ", "") + "
	|	
	|	) КАК ВложенныйЗапрос
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВложенныйЗапрос.Ссылка,
	|	НомерСтроки
	|
	|ИТОГИ ПО
	|	Ссылка
	|");
	
	Запрос.УстановитьПараметр("МассивДокументов", МассивОбъектов);
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ПоступлениеТоваров_ТОРГ12";
	
	ЕдиницаИзмеренияВеса           = ЗначениеНастроекПовтИсп.ПолучитьЗначениеКонстанты("ЕдиницаИзмеренияВеса");
	
	ТабличныйДокумент.ПолеСлева = 5;
	ТабличныйДокумент.ПолеСправа = 6;
	ТабличныйДокумент.РазмерКолонтитулаСверху = 0;
	ТабличныйДокумент.РазмерКолонтитулаСнизу = 0;
	ТабличныйДокумент.АвтоМасштаб = Истина;
	ТабличныйДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
	
	МассивРезультатов = Запрос.ВыполнитьПакет();
	ДанныеПечати = МассивРезультатов[0].Выбрать();
	ВыборкаПоДокументам = МассивРезультатов[1].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Макет = УправлениеПечатью.МакетПечатнойФормы("ОбщийМакет.ПФ_MXL_ТОРГ12");
	
	ПервыйДокумент = Истина;
	Пока ДанныеПечати.Следующий() Цикл
		
		Если Не ПервыйДокумент Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		ПервыйДокумент = Ложь;
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		СведенияОПоставщике       = ФормированиеПечатныхФормСервер.СведенияОЮрФизЛице(ДанныеПечати.Поставщик,        ДанныеПечати.Дата,,ДанныеПечати.БанковскийСчетОрганизации);
		СведенияОПокупателе       = ФормированиеПечатныхФормСервер.СведенияОЮрФизЛице(ДанныеПечати.Покупатель,       ДанныеПечати.Дата);
		СведенияОГрузополучателе  = ФормированиеПечатныхФормСервер.СведенияОЮрФизЛице(ДанныеПечати.Грузополучатель,  ДанныеПечати.Дата);
		СведенияОГрузоотправитель = ФормированиеПечатныхФормСервер.СведенияОЮрФизЛице(ДанныеПечати.Грузоотправитель, ДанныеПечати.Дата,,ДанныеПечати.БанковскийСчетОрганизации);
		
		ОбластьШапка = Макет.ПолучитьОбласть("Шапка");
		ОбластьШапка.Параметры.Заполнить(ДанныеПечати);
		ОбластьШапка.Параметры.НомерДокумента = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(ДанныеПечати.Номер, Ложь, Истина);
		ОбластьШапка.Параметры.ДатаДокумента  = ДанныеПечати.Дата;
		
		Если ДанныеПечати.Организация = ДанныеПечати.Грузоотправитель Тогда
			
			ОбластьШапка.Параметры.ПредставлениеОрганизации = ФормированиеПечатныхФормСервер.ОписаниеОрганизации(СведенияОПоставщике, 
			"ПолноеНаименование,ИНН,ЮридическийАдрес,Телефоны,БанковскиеРеквизиты");
			
		Иначе
			
			ОбластьШапка.Параметры.ПредставлениеОрганизации = ФормированиеПечатныхФормСервер.ОписаниеОрганизации(СведенияОГрузоотправитель, 
			"ПолноеНаименование,ИНН,ЮридическийАдрес,Телефоны,БанковскиеРеквизиты");
			
		КонецЕсли;
		
		ОбластьШапка.Параметры.ПредставлениеГрузополучателя = ФормированиеПечатныхФормСервер.ОписаниеОрганизации(СведенияОГрузополучателе, 
		"ПолноеНаименование,ИНН,ФактическийАдрес,Телефоны,БанковскиеРеквизиты");
		
		ОбластьШапка.Параметры.ПредставлениеПоставщика  = ФормированиеПечатныхФормСервер.ОписаниеОрганизации(СведенияОПоставщике, 
		"ПолноеНаименование,ИНН,ЮридическийАдрес,Телефоны,БанковскиеРеквизиты");
		
		ОбластьШапка.Параметры.ПредставлениеПлательщика = ФормированиеПечатныхФормСервер.ОписаниеОрганизации(СведенияОПокупателе, 
		"ПолноеНаименование,ИНН,ЮридическийАдрес,Телефоны,БанковскиеРеквизиты");
		
		// Выводим коды
		ОбластьШапка.Параметры.ОрганизацияПоОКПО          = СведенияОПоставщике.КодПоОКПО;
		ОбластьШапка.Параметры.ВидДеятельностиПоОКДП      = "";
		ОбластьШапка.Параметры.ГрузополучательПоОКПО      = СведенияОГрузополучателе.КодПоОКПО;
		ОбластьШапка.Параметры.ПоставщикПоОКПО            = СведенияОПоставщике.КодПоОКПО;
		ОбластьШапка.Параметры.ПлательщикПоОКПО           = СведенияОПокупателе.КодПоОКПО;
		ОбластьШапка.Параметры.ОснованиеНомер             = "";
		ОбластьШапка.Параметры.ОснованиеДата              = "";
		ОбластьШапка.Параметры.ТранспортнаяНакладнаяНомер = "";
		ОбластьШапка.Параметры.ТранспортнаяНакладнаяДата  = "";
		
		ТабличныйДокумент.Вывести(ОбластьШапка);
		
		НомерСтраницы = 1;
		
		ИтоговыеСуммы = Новый Структура;
		
		// Инициализация итогов по странице.
		ИтоговыеСуммы.Вставить("ИтогоМассаБруттоНаСтранице", 0);
		ИтоговыеСуммы.Вставить("ИтогоМестНаСтранице", 0);
		ИтоговыеСуммы.Вставить("ИтогоКоличествоНаСтранице", 0);
		ИтоговыеСуммы.Вставить("ИтогоСуммаНаСтранице", 0);
		ИтоговыеСуммы.Вставить("ИтогоНДСНаСтранице", 0);
		ИтоговыеСуммы.Вставить("ИтогоСуммаСНДСНаСтранице", 0);
		ИтоговыеСуммы.Вставить("ИтогоМассаБруттоНаСтранице", 0);
		ИтоговыеСуммы.Вставить("ИтогоМассаНеттоНаСтранице", 0);
		
		// Инициализация итогов по документу.
		ИтоговыеСуммы.Вставить("ИтогоМассаБрутто", 0);
		ИтоговыеСуммы.Вставить("ИтогоМест", 0);
		ИтоговыеСуммы.Вставить("ИтогоКоличество", 0);
		ИтоговыеСуммы.Вставить("ИтогоСуммаСНДС", 0);
		ИтоговыеСуммы.Вставить("ИтогоСумма", 0);
		ИтоговыеСуммы.Вставить("ИтогоНДС", 0);
		ИтоговыеСуммы.Вставить("ИтогоМассаБрутто", 0);
		ИтоговыеСуммы.Вставить("ИтогоМассаНетто", 0);
		
		ИтоговыеСуммы.Вставить("КоличествоПорядковыхНомеровЗаписейПрописью", 0);
		ИтоговыеСуммы.Вставить("СуммаПрописью", "");
		
		ДанныеСтроки = Новый Структура;
		ДанныеСтроки.Вставить("Номер", 0);
		ДанныеСтроки.Вставить("Мест", 0);
		ДанныеСтроки.Вставить("Количество", 0);
		ДанныеСтроки.Вставить("Цена", 0);
		ДанныеСтроки.Вставить("СуммаБезНДС", 0);
		ДанныеСтроки.Вставить("СуммаНДС", 0);
		ДанныеСтроки.Вставить("СуммаСНДС", 0);
		ДанныеСтроки.Вставить("МассаБрутто", 0);
		ДанныеСтроки.Вставить("МассаНетто", 0);
		
		
		// Создаем массив для проверки вывода.
		МассивВыводимыхОбластей = Новый Массив;
		
		// Выводим многострочную часть документа.
		ОбластьЗаголовокТаблицы = Макет.ПолучитьОбласть("ЗаголовокТаб");
		ОбластьСтрока           = Макет.ПолучитьОбласть("Строка");
		ОбластьИтоговПоСтранице = Макет.ПолучитьОбласть("ИтогоПоСтранице");
		ОбластьВсего            = Макет.ПолучитьОбласть("Всего");
		ОбластьПодвала          = Макет.ПолучитьОбласть("Подвал");
		
		СтруктураПоиска = Новый Структура("Ссылка", ДанныеПечати.Ссылка);
		ВыборкаПоДокументам.НайтиСледующий(СтруктураПоиска);
		
		СтрокаТовары = ВыборкаПоДокументам.Выбрать();
		
		КоличествоСтрок = СтрокаТовары.Количество();
		
		Пока СтрокаТовары.Следующий() Цикл
			
			ДанныеСтроки.Номер = ДанныеСтроки.Номер + 1;
			
			ОбластьСтрока.Параметры.Заполнить(СтрокаТовары);
			ОбластьСтрока.Параметры.ТоварНаименование = ФормированиеПечатныхФормСервер.ПолучитьПредставлениеНоменклатурыДляПечати(
				СтрокаТовары.ТоварНаименование,
				СтрокаТовары.Характеристика);
			
			ДанныеСтроки.Мест = СтрокаТовары.КоличествоМест;
			ДанныеСтроки.Количество  = СтрокаТовары.Количество;
			
			Если ЕдиницаИзмеренияВеса <> Неопределено Тогда
				Если Не ЗначениеЗаполнено(ЕдиницаИзмеренияВеса) Тогда
					ДанныеСтроки.МассаБрутто = 0;
				Иначе
					ДанныеСтроки.МассаБрутто = СтрокаТовары.МассаБрутто;
				КонецЕсли;
			КонецЕсли;
			
			ДанныеСтроки.СуммаСНДС   = Окр((СтрокаТовары.Сумма + ?(ДанныеПечати.ЦенаВключаетНДС, 0, СтрокаТовары.СуммаНДС)), 2);
			ДанныеСтроки.СуммаНДС    = СтрокаТовары.СуммаНДС;
			ДанныеСтроки.СуммаБезНДС = ДанныеСтроки.СуммаСНДС - ДанныеСтроки.СуммаНДС;
			
			Если ДанныеПечати.ЦенаВключаетНДС Тогда
				ДанныеСтроки.Цена = ?(ДанныеСтроки.Количество = 0, 0, ДанныеСтроки.СуммаБезНДС / ДанныеСтроки.Количество);
			Иначе
				ДанныеСтроки.Цена = СтрокаТовары.Цена;
			КонецЕсли;
			
			ОбластьСтрока.Параметры.Заполнить(ДанныеСтроки);
			
			Если ДанныеСтроки.Номер = 1 Тогда // первая строка
				
				ОбластьЗаголовокТаблицы.Параметры.НомерСтраницы = "Страница " + НомерСтраницы; 
				ТабличныйДокумент.Вывести(ОбластьЗаголовокТаблицы);
				
			Иначе
				
				МассивВыводимыхОбластей.Очистить();
				
				МассивВыводимыхОбластей.Добавить(ОбластьСтрока);
				МассивВыводимыхОбластей.Добавить(ОбластьИтоговПоСтранице);
				
				Если ДанныеСтроки.Номер = КоличествоСтрок Тогда
					
					МассивВыводимыхОбластей.Добавить(ОбластьВсего);
					МассивВыводимыхОбластей.Добавить(ОбластьПодвала);
					
				КонецЕсли;
					
				Если НЕ ТабличныйДокумент.ПроверитьВывод(МассивВыводимыхОбластей) Тогда
					
					ОбластьИтоговПоСтранице.Параметры.Заполнить(ИтоговыеСуммы);
					ТабличныйДокумент.Вывести(ОбластьИтоговПоСтранице);
					
					ИтоговыеСуммы.ИтогоМассаБруттоНаСтранице = 0;
					ИтоговыеСуммы.ИтогоМассаНеттоНаСтранице  = 0;
					ИтоговыеСуммы.ИтогоМестНаСтранице        = 0;
					ИтоговыеСуммы.ИтогоКоличествоНаСтранице  = 0;
					ИтоговыеСуммы.ИтогоСуммаНаСтранице       = 0;
					ИтоговыеСуммы.ИтогоНДСНаСтранице         = 0;
					ИтоговыеСуммы.ИтогоСуммаСНДСНаСтранице   = 0;
					
					НомерСтраницы = НомерСтраницы + 1;
					ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
					ОбластьЗаголовокТаблицы.Параметры.НомерСтраницы = "Страница " + НомерСтраницы;
					ТабличныйДокумент.Вывести(ОбластьЗаголовокТаблицы);
					
				КонецЕсли;
				
			КонецЕсли;
			
			ТабличныйДокумент.Вывести(ОбластьСтрока);
			
			// Увеличим итоги по странице.
			ИтоговыеСуммы.ИтогоМестНаСтранице        = ИтоговыеСуммы.ИтогоМестНаСтранице        + ДанныеСтроки.Мест;
			ИтоговыеСуммы.ИтогоКоличествоНаСтранице  = ИтоговыеСуммы.ИтогоКоличествоНаСтранице  + ДанныеСтроки.Количество;
			ИтоговыеСуммы.ИтогоСуммаНаСтранице       = ИтоговыеСуммы.ИтогоСуммаНаСтранице       + ДанныеСтроки.СуммаБезНДС;
			ИтоговыеСуммы.ИтогоНДСНаСтранице         = ИтоговыеСуммы.ИтогоНДСНаСтранице         + ДанныеСтроки.СуммаНДС;
			ИтоговыеСуммы.ИтогоСуммаСНДСНаСтранице   = ИтоговыеСуммы.ИтогоСуммаСНДСНаСтранице   + ДанныеСтроки.СуммаСНДС;
			ИтоговыеСуммы.ИтогоМассаБруттоНаСтранице = ИтоговыеСуммы.ИтогоМассаБруттоНаСтранице + ДанныеСтроки.МассаБрутто;
			ИтоговыеСуммы.ИтогоМассаНеттоНаСтранице  = ИтоговыеСуммы.ИтогоМассаНеттоНаСтранице  + ДанныеСтроки.МассаНетто;
			
			// Увеличим итоги по документу.
			ИтоговыеСуммы.ИтогоМест        = ИтоговыеСуммы.ИтогоМест        + ДанныеСтроки.Мест;
			ИтоговыеСуммы.ИтогоКоличество  = ИтоговыеСуммы.ИтогоКоличество  + ДанныеСтроки.Количество;
			ИтоговыеСуммы.ИтогоСумма       = ИтоговыеСуммы.ИтогоСумма       + ДанныеСтроки.СуммаБезНДС;
			ИтоговыеСуммы.ИтогоНДС         = ИтоговыеСуммы.ИтогоНДС         + ДанныеСтроки.СуммаНДС;
			ИтоговыеСуммы.ИтогоСуммаСНДС   = ИтоговыеСуммы.ИтогоСуммаСНДС   + ДанныеСтроки.СуммаСНДС;
			ИтоговыеСуммы.ИтогоМассаБрутто = ИтоговыеСуммы.ИтогоМассаБрутто + ДанныеСтроки.МассаБрутто;
			ИтоговыеСуммы.ИтогоМассаНетто  = ИтоговыеСуммы.ИтогоМассаНетто  + ДанныеСтроки.МассаНетто;
			
		КонецЦикла;
		
		// Выводим итоги по последней странице.
		ОбластьИтоговПоСтранице = Макет.ПолучитьОбласть("ИтогоПоСтранице");
		ОбластьИтоговПоСтранице.Параметры.Заполнить(ИтоговыеСуммы);
		
		ТабличныйДокумент.Вывести(ОбластьИтоговПоСтранице);
		
		// Выводим итоги по документу в целом.
		ОбластьМакета = Макет.ПолучитьОбласть("Всего");
		ОбластьМакета.Параметры.Заполнить(ИтоговыеСуммы);
		
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		// Выводим подвал документа
		
		ИтоговыеСуммы.Вставить("КоличествоПорядковыхНомеровЗаписейПрописью", ЧислоПрописью(ДанныеСтроки.Номер, ,",,,,,,,,0"));
		ИтоговыеСуммы.Вставить("СуммаПрописью", ФормированиеПечатныхФормСервер.СформироватьСуммуПрописью(ИтоговыеСуммы.ИтогоСуммаСНДС));
		
		ОбластьМакета = Макет.ПолучитьОбласть("Подвал");
		
		ОбластьМакета.Параметры.Заполнить(ДанныеПечати);
		
		ПолнаяДатаДокумента = Формат(ДанныеПечати.Дата, Нстр("ru='ДФ=""дд ММММ гггг """"года""""""'"));
		ДлинаСтроки = СтрДлина(ПолнаяДатаДокумента);
		ПервыйРазделитель = Найти(ПолнаяДатаДокумента, " ");
		ВторойРазделитель = Найти(Прав(ПолнаяДатаДокумента, ДлинаСтроки - ПервыйРазделитель), " ") + ПервыйРазделитель;
		ОбластьМакета.Параметры.ДатаДокументаДень = """" + Лев(ПолнаяДатаДокумента, ПервыйРазделитель -1 ) + """";
		ОбластьМакета.Параметры.ДатаДокументаМесяц = Сред(ПолнаяДатаДокумента, ПервыйРазделитель + 1, ВторойРазделитель - ПервыйРазделитель - 1);
		ОбластьМакета.Параметры.ДатаДокументаГод = Прав(ПолнаяДатаДокумента, ДлинаСтроки - ВторойРазделитель);
		
		Руководители = ФормированиеПечатныхФормСервер.ОтветственныеЛицаОрганизаций(ДанныеПечати.Руководители, ДанныеПечати.Дата);
		
		ОбластьМакета.Параметры.ФИОГлавБухгалтера     = ФормированиеПечатныхФормСервер.ФамилияИнициалыФизЛица(Руководители.ГлавныйБухгалтер);
		ОбластьМакета.Параметры.ФИОРуководителя       = ФормированиеПечатныхФормСервер.ФамилияИнициалыФизЛица(Руководители.Руководитель);
		ОбластьМакета.Параметры.ДолжностьРуководителя = Руководители.РуководительДолжность;
		СтруктураФИО = ФормированиеПечатныхФормСервер.ФамилияИмяОтчество(ДанныеПечати.ОтветственноеЛицо, ДанныеПечати.Дата);
		ОбластьМакета.Параметры.ФИОКладовщика         = ФормированиеПечатныхФормСервер.ФамилияИнициалыФизЛица(Неопределено,СтруктураФИО.Фамилия,СтруктураФИО.Имя,СтруктураФИО.Отчество);
		
		
		Если ИтоговыеСуммы.ИтогоМест > 0 Тогда
			
			ОбластьМакета.Параметры.ВсегоМестПрописью = ЧислоПрописью(ИтоговыеСуммы.ИтогоМест, ,",,,,,,,,0");
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ЕдиницаИзмеренияВеса) И ИтоговыеСуммы.ИтогоМассаБрутто > 0 Тогда
			
			ОбластьМакета.Параметры.МассаГрузаПрописью = ЧислоПрописью(ИтоговыеСуммы.ИтогоМассаБрутто, ,",,,,,,,,0")+ " " + СокрЛП(ЕдиницаИзмеренияВеса) + ".";
			
		КонецЕсли;
		
		ОбластьМакета.Параметры.КоличествоПорядковыхНомеровЗаписейПрописью = ИтоговыеСуммы.КоличествоПорядковыхНомеровЗаписейПрописью;
		ОбластьМакета.Параметры.СуммаПрописью = ИтоговыеСуммы.СуммаПрописью;
		
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, ДанныеПечати.Ссылка);
		
	КонецЦикла;
	
	Возврат ТабличныйДокумент;
	
КонецФункции

// Функция формирует печатную форму документа.
//
Функция ПечатьТТН(МассивОбъектов, ОбъектыПечати, ПараметрыПечати)
	
	КолонкаКодов = ФормированиеПечатныхФормСервер.ИмяДополнительнойКолонки();
	
	Если ПустаяСтрока(КолонкаКодов) Тогда
		
		КолонкаКодов = "Код";
		
	КонецЕсли;
	
	Запрос = Новый Запрос();
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	РеализацияТоваров.Ссылка КАК Ссылка,
	|	РеализацияТоваров.Номер КАК Номер,
	|	РеализацияТоваров.Дата КАК Дата,
	|	РеализацияТоваров.Организация КАК Организация,
	|	РеализацияТоваров.Организация КАК Руководители,
	|	РеализацияТоваров.Контрагент КАК Грузополучатель,
	|	РеализацияТоваров.Организация КАК Грузоотправитель,
	|	РеализацияТоваров.Контрагент КАК Контрагент,
	|	РеализацияТоваров.Организация.Префикс КАК Префикс,
	|	&СрокДоставки КАК СрокДоставки,
	|	&МаркаАвтомобиля КАК МаркаАвтомобиля,
	|	&МаркаПрицепа КАК МаркаПрицепа,
	|	&ГосНомерАвтомобиля КАК ГосНомерАвтомобиля,
	|	&ГосНомерПрицепа КАК ГосНомерПрицепа,
	|	&ПунктПогрузки КАК ПунктПогрузки,
	|	&ПунктРазгрузки КАК ПунктРазгрузки,
	|	&Водитель КАК Водитель,
	|	&Перевозчик КАК ПредставлениеПеревозчика,
	|	&Заказчик КАК ПредставлениеЗаказчика,
	|	&ВидПеревозки КАК ВидПеревозки,
	|	&ЛицензионнаяКарточка КАК ЛицензионнаяКарточка,
	|	&ВодительскоеУдостоверение КАК ВодительскоеУдостоверение,
	|	РеализацияТоваров.ЦенаВключаетНДС КАК ЦенаВключаетНДС,
	|	РеализацияТоваров.УчитыватьНДС КАК УчитыватьНДС,
	|	"""" КАК ДоверенностьНомер,
	|	"""" КАК ДоверенностьДата,
	|	"""" КАК ДоверенностьВыдана,
	|	"""" КАК ДоверенностьЛицо,
	|	НаименованияТоваров.Количество КАК КоличествоНаименований
	|ИЗ
	|	Документ.РеализацияТоваров КАК РеализацияТоваров
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			СУММА(1) КАК Количество,
	|			СписокТоваров.Ссылка КАК Ссылка
	|		ИЗ
	|			(ВЫБРАТЬ 
	|				РеализацияТоваровТовары.Ссылка КАК Ссылка,
	|				РеализацияТоваровТовары.Номенклатура КАК Номенклатура,
	|				РеализацияТоваровТовары.Характеристика КАК Характеристика
	|			ИЗ
	|				Документ.РеализацияТоваров.Товары КАК РеализацияТоваровТовары
	|			ГДЕ
	|				РеализацияТоваровТовары.Ссылка В(&МассивДокументов)) КАК СписокТоваров
	|		
	|		СГРУППИРОВАТЬ ПО
	|			СписокТоваров.Ссылка) КАК НаименованияТоваров
	|		ПО РеализацияТоваров.Ссылка = НаименованияТоваров.Ссылка
	|ГДЕ
	|	РеализацияТоваров.Ссылка В(&МассивДокументов)
	|	И РеализацияТоваров.Ссылка.Проведен
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	РеализацияТоваров.Ссылка КАК Ссылка,
	|	РеализацияТоваров.Номенклатура КАК Номенклатура,
	|	РеализацияТоваров.Номенклатура."+КолонкаКодов+" КАК ТоварКод,
	|	РеализацияТоваров.Номенклатура.НаименованиеПолное КАК ТоварНаименование,
	|	РеализацияТоваров.Характеристика КАК Характеристика,
	|	РеализацияТоваров.Количество КАК Количество,
	|	ВЫБОР
	|		КОГДА РеализацияТоваров.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка)
	|			ТОГДА РеализацияТоваров.Номенклатура.ЕдиницаИзмерения.Наименование
	|		ИНАЧЕ РеализацияТоваров.Упаковка.ЕдиницаИзмерения.Наименование
	|	КОНЕЦ КАК ВидУпаковки,
	|	РеализацияТоваров.Номенклатура.ЕдиницаИзмерения.Наименование КАК БазоваяЕдиницаНаименование,
	|	РеализацияТоваров.Цена КАК Цена,
	|	ВЫБОР
	|		КОГДА РеализацияТоваров.Упаковка.Вес ЕСТЬ NULL 
	|			ТОГДА РеализацияТоваров.Количество * РеализацияТоваров.Номенклатура.Вес
	|		ИНАЧЕ РеализацияТоваров.КоличествоУпаковок * РеализацияТоваров.Упаковка.Вес
	|	КОНЕЦ КАК МассаБрутто,
	|	РеализацияТоваров.Количество * РеализацияТоваров.Номенклатура.Вес КАК МассаНетто,
	|	РеализацияТоваров.КоличествоУпаковок КАК КоличествоМест,
	|	РеализацияТоваров.Сумма КАК Сумма,
	|	РеализацияТоваров.СуммаНДС КАК СуммаНДС,
	|	РеализацияТоваров.НомерСтроки КАК НомерСтроки,
	|	РеализацияТоваров.Номенклатура.Весовой КАК Весовой
	|ИЗ
	|	Документ.РеализацияТоваров.Товары КАК РеализацияТоваров
	|
	|ГДЕ
	|	РеализацияТоваров.Ссылка В(&МассивДокументов)
	|	И РеализацияТоваров.Ссылка.Проведен
	|	И НЕ (РеализацияТоваров.Номенклатура.ТипНоменклатуры = Значение(Перечисление.ТипыНоменклатуры.Услуга))
	|
	|УПОРЯДОЧИТЬ ПО
	|	РеализацияТоваров.Ссылка,
	|	РеализацияТоваров.НомерСтроки
	|ИТОГИ ПО
	|	Ссылка";
		
	
	
	
	Запрос.УстановитьПараметр("МассивДокументов", МассивОбъектов);
	Запрос.УстановитьПараметр("СрокДоставки", ПараметрыПечати.СрокДоставки);
	Запрос.УстановитьПараметр("МаркаАвтомобиля", ПараметрыПечати.МаркаАвтомобиля);
	Запрос.УстановитьПараметр("МаркаПрицепа", ПараметрыПечати.МаркаПрицепа);
	Запрос.УстановитьПараметр("ГосНомерАвтомобиля", ПараметрыПечати.ГосНомерАвтомобиля);
	Запрос.УстановитьПараметр("ГосНомерПрицепа", ПараметрыПечати.ГосНомерПрицепа);
	Запрос.УстановитьПараметр("ПунктПогрузки", ПараметрыПечати.ПунктПогрузки);
	Запрос.УстановитьПараметр("ПунктРазгрузки", ПараметрыПечати.ПунктРазгрузки);
	Запрос.УстановитьПараметр("Водитель", ПараметрыПечати.Водитель);
	Запрос.УстановитьПараметр("Перевозчик", ПараметрыПечати.Перевозчик);
	Запрос.УстановитьПараметр("Заказчик", ПараметрыПечати.Заказчик);
	Запрос.УстановитьПараметр("ВидПеревозки", ПараметрыПечати.ВидПеревозки);
	Запрос.УстановитьПараметр("ЛицензионнаяКарточка", ПараметрыПечати.ЛицензионнаяКарточка);
	Запрос.УстановитьПараметр("ВодительскоеУдостоверение", ПараметрыПечати.ВодительскоеУдостоверение);
    	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_РеализацияТоваров_ТТН";
	
	ФормированиеПечатныхФормСервер.ЗаполнитьТабличныйДокументТТН(ТабличныйДокумент, Запрос, ОбъектыПечати);
		
	Возврат ТабличныйДокумент;
    	
КонецФункции

Функция ПечатьОписиНоменклатуры(МассивОбъектов, ОбъектыПечати)
	
	КолонкаКодов       = ФормированиеПечатныхФормСервер.ИмяДополнительнойКолонки();
	ВыводитьКоды       = ЗначениеЗаполнено(КолонкаКодов);
	ТабличныйДокумент  = Новый ТабличныйДокумент;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаДокументов.Организация КАК Поставщик,
	|	ТаблицаДокументов.Контрагент КАК Покупатель,
	|	ТаблицаДокументов.Магазин,
	|	ТаблицаДокументов.Склад,
	|	ТаблицаДокументов.Ссылка
	|ИЗ
	|	Документ.РеализацияТоваров КАК ТаблицаДокументов
	|ГДЕ
	|	ТаблицаДокументов.Ссылка В(&МассивОбъектов)";
	
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	СтруктураПечати = Новый Структура;
	СтруктураПечати.Вставить("ИмяРеквизита1", "Поставщик");
	СтруктураПечати.Вставить("ИмяРеквизита2", "Покупатель");
	СтруктураПечати.Вставить("ИмяРеквизита3", "Магазин");
	СтруктураПечати.Вставить("ИмяРеквизита4", "Склад");
	СтруктураПечати.Вставить("КоличествоРеквизитов", 4);
	СтруктураПечати.Вставить("ВыводитьКоды", ВыводитьКоды);
	СтруктураПечати.Вставить("КолонкаКодов", КолонкаКодов);
	
	ПервыйДокумент = Истина;
	
	Пока Выборка.Следующий() Цикл
		
		СтруктураПечати.Вставить("Документ", Выборка.Ссылка);
		СтруктураПечати.Вставить("Реквизит1", Выборка.Поставщик);
		СтруктураПечати.Вставить("Реквизит2", Выборка.Покупатель);
		СтруктураПечати.Вставить("Реквизит3", Выборка.Магазин);
		СтруктураПечати.Вставить("Реквизит4", Выборка.Склад);
		
		УправлениеПечатьюРТ.ПечатьОписиНоменклатуры(ТабличныйДокумент, ОбъектыПечати, СтруктураПечати, ПервыйДокумент);
	КонецЦикла;
	
	Возврат ТабличныйДокумент;
	
КонецФункции

// Функция формирует текст запроса по подарочным сертификатам.
// Возвращаемое значение: ТекстЗапроса - Строка.
Функция ТекстЗапросаТаблицаПодарочныхСертификатов()
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	&Период КАК Период,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	ТабТовары.Номенклатура КАК ПодарочныйСертификат,
	|	ЕСТЬNULL(ТабСерийныеНомера.СерийныйНомер, ЗНАЧЕНИЕ(Справочник.СерийныеНомера.ПустаяСсылка)) КАК НомерСертификата,
	|	ВЫБОР
	|		КОГДА ТабТовары.Номенклатура.ПроизвольныйНоминал
	|			ТОГДА ТабТовары.Цена
	|		ИНАЧЕ ТабТовары.Номенклатура.Номинал
	|	КОНЕЦ КАК Сумма
	|ИЗ
	|	ТабТовары КАК ТабТовары
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТабСерийныеНомера КАК ТабСерийныеНомера
	|		ПО ТабТовары.КлючСвязиСерийныхНомеров = ТабСерийныеНомера.КлючСвязиСерийныхНомеров
	|	
	|ГДЕ	(ТабТовары.Номенклатура.ЧастичноеПогашение
	|			ИЛИ ТабТовары.Номенклатура.ПроизвольныйНоминал)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////";
	
	Возврат ТекстЗапроса;
	
КонецФункции

// Функция формирует табличный документ унифицированной формы З-2
//
// Параметры: 
//  Нет.
//
// Возвращаемое значение:
//  Табличный документ по форме З-2.
//
Функция ПечатьЗ2(МассивОбъектов, ОбъектыПечати)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	РеализацияТоваров.Номер,
	|	РеализацияТоваров.Дата КАК ДатаДокумента,
	|	РеализацияТоваров.Организация КАК Организация,
	|	РеализацияТоваров.Контрагент КАК Получатель,
	|	РеализацияТоваров.Склад,
	|	ВЫБОР
	|		КОГДА РеализацияТоваров.Ответственный.ФизическоеЛицо <> ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)
	|			ТОГДА РеализацияТоваров.Ответственный.ФизическоеЛицо
	|		ИНАЧЕ РеализацияТоваров.Ответственный
	|	КОНЕЦ КАК Ответственный,
	|	РеализацияТоваров.ДоверенностьНомер КАК Доверенность,
	|	РеализацияТоваров.ДоверенностьЧерезКого КАК ЧерезКого,
	|	РеализацияТоваров.Ссылка КАК Ссылка,
	|	РеализацияТоваров.ДоверенностьДата КАК ДоверенностьДата
	|ИЗ
	|	Документ.РеализацияТоваров КАК РеализацияТоваров
	|ГДЕ
	|	РеализацияТоваров.Ссылка В(&МассивОбъектов)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка,
	|	ДатаДокумента
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВложенныйЗапросПоТоварам.Номенклатура,
	|	(ВЫРАЗИТЬ(ВложенныйЗапросПоТоварам.Номенклатура.НаименованиеПолное КАК СТРОКА(1000))) + 
	|	ВЫБОР 
	|		КОГДА ВложенныйЗапросПоТоварам.Характеристика.Наименование ЕСТЬ NULL
	|			ТОГДА """"
	|		ИНАЧЕ "", "" + (ВЫРАЗИТЬ(ВложенныйЗапросПоТоварам.Характеристика.Наименование КАК СТРОКА(1000)))
	|	КОНЕЦ КАК Товар,
	|	ВложенныйЗапросПоТоварам.Номенклатура.Код КАК Код,
	|	ВложенныйЗапросПоТоварам.Номенклатура.Код КАК ТоварКод,
	|	ВложенныйЗапросПоТоварам.Номенклатура.Артикул КАК Артикул,
	|	ВложенныйЗапросПоТоварам.Количество КАК Количество,
	|	ВложенныйЗапросПоТоварам.ЕдиницаИзмерения КАК ЕдиницаИзмеренияНаименование,
	|	ВложенныйЗапросПоТоварам.Цена,
	|	ВложенныйЗапросПоТоварам.Сумма КАК Сумма,
	|	ВложенныйЗапросПоТоварам.СуммаНДС КАК СуммаНДС,
	|	ВложенныйЗапросПоТоварам.СуммаСНДС КАК СуммаСНДС,
	|	ВложенныйЗапросПоТоварам.НомерСтроки КАК НомерСтроки,
	|	ВложенныйЗапросПоТоварам.Ссылка КАК Ссылка,
	|	ВложенныйЗапросПоТоварам.Характеристика
	|ИЗ
	|	(ВЫБРАТЬ
	|		РеализацияТоваров.Номенклатура КАК Номенклатура,
	|		ВЫБОР
	|			КОГДА РеализацияТоваров.Упаковка <> ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка)
	|				ТОГДА ПРЕДСТАВЛЕНИЕ(РеализацияТоваров.Упаковка.ЕдиницаИзмерения)
	|			ИНАЧЕ ПРЕДСТАВЛЕНИЕ(РеализацияТоваров.Номенклатура.ЕдиницаИзмерения)
	|		КОНЕЦ КАК ЕдиницаИзмерения,
	|		МАКСИМУМ(ВЫБОР
	|				КОГДА РеализацияТоваров.Ссылка.УчитыватьНДС
	|							И РеализацияТоваров.Ссылка.ЦенаВключаетНДС
	|						ИЛИ НЕ РеализацияТоваров.Ссылка.УчитыватьНДС
	|					ТОГДА РеализацияТоваров.Сумма / Количество
	|				ИНАЧЕ ВЫБОР
	|						КОГДА РеализацияТоваров.Ссылка.УчитыватьНДС
	|								И НЕ РеализацияТоваров.Ссылка.ЦенаВключаетНДС
	|							ТОГДА (РеализацияТоваров.Сумма + РеализацияТоваров.СуммаНДС) / Количество
	|					КОНЕЦ
	|			КОНЕЦ) КАК Цена,
	|		РеализацияТоваров.СтавкаНДС КАК СтавкаНДС,
	|		СУММА(РеализацияТоваров.Количество) КАК Количество,
	|		СУММА(РеализацияТоваров.Сумма) КАК Сумма,
	|		СУММА(РеализацияТоваров.СуммаНДС) КАК СуммаНДС,
	|		СУММА(ВЫБОР
	|				КОГДА РеализацияТоваров.Ссылка.УчитыватьНДС
	|							И РеализацияТоваров.Ссылка.ЦенаВключаетНДС
	|						ИЛИ НЕ РеализацияТоваров.Ссылка.УчитыватьНДС
	|					ТОГДА РеализацияТоваров.Сумма
	|				ИНАЧЕ ВЫБОР
	|						КОГДА РеализацияТоваров.Ссылка.УчитыватьНДС
	|								И НЕ РеализацияТоваров.Ссылка.ЦенаВключаетНДС
	|							ТОГДА РеализацияТоваров.Сумма + РеализацияТоваров.СуммаНДС
	|					КОНЕЦ
	|			КОНЕЦ) КАК СуммаСНДС,
	|		МИНИМУМ(РеализацияТоваров.НомерСтроки) КАК НомерСтроки,
	|		РеализацияТоваров.Ссылка КАК Ссылка,
	|		РеализацияТоваров.Характеристика КАК Характеристика
	|	ИЗ
	|		Документ.РеализацияТоваров.Товары КАК РеализацияТоваров
	|	ГДЕ
	|		РеализацияТоваров.Ссылка В(&МассивОбъектов)
	|	
	|	СГРУППИРОВАТЬ ПО
	|		РеализацияТоваров.Номенклатура,
	|		РеализацияТоваров.Цена,
	|		РеализацияТоваров.СтавкаНДС,
	|		РеализацияТоваров.Ссылка,
	|		РеализацияТоваров.Характеристика,
	|		ВЫБОР
	|			КОГДА РеализацияТоваров.Упаковка <> ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка)
	|				ТОГДА ПРЕДСТАВЛЕНИЕ(РеализацияТоваров.Упаковка.ЕдиницаИзмерения)
	|			ИНАЧЕ ПРЕДСТАВЛЕНИЕ(РеализацияТоваров.Номенклатура.ЕдиницаИзмерения)
	|		КОНЕЦ) КАК ВложенныйЗапросПоТоварам
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка,
	|	НомерСтроки
	|ИТОГИ
	|	СУММА(Количество),
	|	СУММА(СуммаНДС),
	|	СУММА(СуммаСНДС)
	|ПО
	|	Ссылка";
	
	
	Результаты = Запрос.ВыполнитьПакет();
	
	ВыборкаПоДокументам = Результаты[0].Выбрать();
	ВыборкаПоТабличнымЧастям = Результаты[1].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
		
	Макет = УправлениеПечатью.МакетПечатнойФормы("ОбщийМакет.ПФ_MXL_З2");

	ТабличныйДокумент = Новый ТабличныйДокумент;
	
	// Зададим параметры макета
	ТабличныйДокумент.ПолеСверху         = 0;
	ТабличныйДокумент.ПолеСлева          = 10;
	ТабличныйДокумент.ПолеСнизу          = 0;
	ТабличныйДокумент.ПолеСправа         = 0;
	ТабличныйДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
    	
	ТабличныйДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ПередачаТоваров_З2";
	
	ПервыйДокумент = Истина;

	// Выводим общие реквизиты шапки
	ОбластьШапка 				= Макет.ПолучитьОбласть("Шапка");
	ОбластьЗаголовокТаблицы 	= Макет.ПолучитьОбласть("ЗаголовокТаблицы");
	ОбластьСтрокаТаблицы 		= Макет.ПолучитьОбласть("СтрокаТаблицы");
	ОбластьСтрокаТаблицыИтого 	= Макет.ПолучитьОбласть("СтрокаТаблицыИтого");
	ОбластьИтого 				= Макет.ПолучитьОбласть("Итого");
	ОбластьПодвал 				= Макет.ПолучитьОбласть("Подвал");
	
	Пока ВыборкаПоДокументам.Следующий() Цикл
		
		Если НЕ ПервыйДокумент Тогда
			
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
			
		КонецЕсли;
		
		ПервыйДокумент = Ложь;
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		СведенияОбОрганизации = ФормированиеПечатныхФормСервер.СведенияОЮрФизЛице(ВыборкаПоДокументам.Организация, ВыборкаПоДокументам.ДатаДокумента);
		
		ОбластьШапка.Параметры.Заполнить(ВыборкаПоДокументам);
		ОбластьШапка.Параметры.ПредставлениеОрганизации = СведенияОбОрганизации.ПолноеНаименование;
		ОбластьШапка.Параметры.ПредставлениеОтправителя = СведенияОбОрганизации.ПолноеНаименование;
		ОбластьШапка.Параметры.ОрганизацияРНН_БИН		= ФормированиеПечатныхФормСервер.ОписаниеОрганизации(СведенияОбОрганизации, "ИНН,", Ложь, "ru");
		ОбластьШапка.Параметры.НомерДокумента           = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(ВыборкаПоДокументам.Номер, ПустаяСтрока(ПолучитьФункциональнуюОпцию("ПрефиксИнформационнойБазы")), Истина);
		
		ОтветственныйДляПечати  = "";
		ДолжностьОтветственного = "";
		
		Если ТипЗнч(ВыборкаПоДокументам.Ответственный) = Тип("СправочникСсылка.ФизическиеЛица") Тогда
			ДанныеОтветственного 	= ФормированиеПечатныхФормСервер.ДанныеФизЛица(ВыборкаПоДокументам.Ответственный, ВыборкаПоДокументам.ДатаДокумента); 
			ОтветственныйДляПечати 	= ДанныеОтветственного.Представление;
			ДолжностьОтветственного = ДанныеОтветственного.Должность;
		Иначе
			ОтветственныйДляПечати 	= ВыборкаПоДокументам.Ответственный;
		КонецЕсли;	
		
		ОбластьШапка.Параметры.ОтветственныйЗаПоставку = ОтветственныйДляПечати;
		
		ПредставлениеПолучателя = ФормированиеПечатныхФормСервер.ОписаниеОрганизации(ФормированиеПечатныхФормСервер.СведенияОЮрФизЛице(ВыборкаПоДокументам.Получатель, ВыборкаПоДокументам.ДатаДокумента), "ПолноеНаименование,");
		ОбластьШапка.Параметры.ПредставлениеПолучателя = ПредставлениеПолучателя;
	
		ТабличныйДокумент.Вывести(ОбластьШапка);

		// Выводим заголовок таблицы
		ОбластьЗаголовокТаблицы.Параметры.Валюта = "тенге";
		ТабличныйДокумент.Вывести(ОбластьЗаголовокТаблицы);
		
		КоличествоСтрок = 0;
		
		
		Если ВыборкаПоТабличнымЧастям.НайтиСледующий(Новый Структура("Ссылка", ВыборкаПоДокументам.Ссылка)) Тогда
			
			ВыборкаПоСтрокамТЧ = ВыборкаПоТабличнымЧастям.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			
			Пока ВыборкаПоСтрокамТЧ.Следующий() = 1 Цикл
				
				КоличествоСтрок = КоличествоСтрок + 1;
				
				
				Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамТЧ.Номенклатура) Тогда
					Сообщить("В одной из строк не заполнено значение номенклатуры - строка при печати пропущена.", СтатусСообщения.Важное);
					Продолжить;
				КонецЕсли;
				
				Если Не ОбщегоНазначения.ПроверитьВыводТабличногоДокумента(ТабличныйДокумент, ОбластьСтрокаТаблицы) Тогда
					ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
					ТабличныйДокумент.Вывести(ОбластьЗаголовокТаблицы);
				КонецЕсли;	
				
				ОбластьСтрокаТаблицы.Параметры.Заполнить(ВыборкаПоСтрокамТЧ);
				ОбластьСтрокаТаблицы.Параметры.НомерПП 				= ВыборкаПоСтрокамТЧ.НомерСтроки;
				ОбластьСтрокаТаблицы.Параметры.ТоварНаименование 	= СокрЛП(ВыборкаПоСтрокамТЧ.Товар);  
				
				ТабличныйДокумент.Вывести(ОбластьСтрокаТаблицы);
				
			КонецЦикла;
			
		КонецЕсли;
		
		// Выводим итоги по таблице
		
		ОбластьСтрокаТаблицыИтого.Параметры.КоличествоИтого = ВыборкаПоТабличнымЧастям.Количество;
		ОбластьСтрокаТаблицыИтого.Параметры.СуммаСНДСИтого 	= ВыборкаПоТабличнымЧастям.СуммаСНДС;
		ОбластьСтрокаТаблицыИтого.Параметры.СуммаНДСИтого 	= ВыборкаПоТабличнымЧастям.СуммаНДС;
		
		ТабличныйДокумент.Вывести(ОбластьСтрокаТаблицыИтого);
		
		// Выводим итоги по документу
		ОбластьИтого.Параметры.Валюта = "тенге";
		
		ОбластьИтого.Параметры.КоличествоПорядковыхНомеровЗаписейПрописью = ЧислоПрописью(ВыборкаПоТабличнымЧастям.Количество, ,",,,,,,,,0");
		ОбластьИтого.Параметры.СуммаПрописью = ФормированиеПечатныхФормСервер.СформироватьСуммуПрописью(?(ЗначениеЗаполнено(ВыборкаПоТабличнымЧастям.СуммаСНДС), ВыборкаПоТабличнымЧастям.СуммаСНДС,0));
		
		ТабличныйДокумент.Вывести(ОбластьИтого);
		
		// вывод подписей
		ОбластьПодвал.Параметры.Заполнить(ВыборкаПоДокументам);
		
		ОбластьПодвал.Параметры.ДоверенностьНомер = СокрЛП(ВыборкаПоДокументам.Доверенность);
		ОбластьПодвал.Параметры.ЧерезКого    = СокрЛП(ВыборкаПоДокументам.ЧерезКого);
		ОбластьПодвал.Параметры.ДоверенностьДата    = ВыборкаПоДокументам.ДоверенностьДата;
		
		Руководители = ФормированиеПечатныхФормСервер.ОтветственныеЛицаОрганизаций(ВыборкаПоДокументам.Организация, ВыборкаПоДокументам.ДатаДокумента,);
		Бухгалтер    = ?(НЕ ЗначениеЗаполнено(Руководители.ГлавныйБухгалтер), "Не предусмотрен", Руководители.ГлавныйБухгалтер);
		ОбластьПодвал.Параметры.ГлБухгалтер = Бухгалтер;
		
		Если ЗначениеЗаполнено(ВыборкаПоДокументам.Ответственный) Тогда
			ДанныеМОЛ = ФормированиеПечатныхФормСервер.ДанныеФизЛица(ВыборкаПоДокументам.Ответственный, ВыборкаПоДокументам.ДатаДокумента);
			ОбластьПодвал.Параметры.ОтпускРазрешил 			= ДанныеМОЛ.Представление;		
			ОбластьПодвал.Параметры.ОтпускРазрешилДолжность = ДанныеМОЛ.Должность;		
			ОбластьПодвал.Параметры.МОЛОтпустил 			= ДанныеМОЛ.Представление;		
		КонецЕсли;	
		
		ТабличныйДокумент.Вывести(ОбластьПодвал);
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, ВыборкаПоДокументам.Ссылка);
		
	КонецЦикла;

	Возврат ТабличныйДокумент;
	
КонецФункции //ПечатьЗ2

#КонецОбласти

#Область СканированиеМаркируемойПродукции

Функция ОбработатьДанныеШтрихкода(Форма, ДанныеШтрихкода, ПараметрыСканирования, ВложенныеШтрихкоды = Неопределено) Экспорт
	
	Результат = Неопределено;
	
	Если ДанныеШтрихкода.ВидПродукции = Перечисления.ВидыПродукцииИС.Алкогольная Тогда
		
		Если ИнтеграцияИСКлиентСервер.ЭтоУпаковка(ДанныеШтрихкода.ТипУпаковки) Тогда
			
			Результат = ОбработатьДанныеШтрихкодаУпаковкиМаркируемойПродукции(Форма, ДанныеШтрихкода, ВложенныеШтрихкоды, ПараметрыСканирования);
			
		ИначеЕсли ДанныеШтрихкода.ТипУпаковки = Перечисления.ТипыУпаковок.МаркированныйТовар Тогда
			
			Результат = ОбработатьДанныеШтрихкодаЕдиницыАлкогольнойПродукции(Форма, ДанныеШтрихкода, ПараметрыСканирования);
			
		ИначеЕсли ДанныеШтрихкода.ТипШтрихкода = Перечисления.ТипыШтрихкодов.DataMatrix Тогда
			
			Результат = ОбработатьДанныеШтрихкодаЕдиницыСНомеромИСерией(Форма, ДанныеШтрихкода, ПараметрыСканирования);
			
		Иначе
			
			Результат = ОбработатьДанныеШтрихкодаЕдиницыАлкогольнойПродукции(Форма, ДанныеШтрихкода, ПараметрыСканирования);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЭтоАдресВременногоХранилища(ПараметрыСканирования.КэшМаркируемойПродукции) Тогда
		КэшМаркируемойПродукции = ПолучитьИзВременногоХранилища(ПараметрыСканирования.КэшМаркируемойПродукции);
		КэшМаркируемойПродукции.ОбработанныеКодыМаркировки.Очистить();
		ПоместитьВоВременноеХранилище(КэшМаркируемойПродукции, ПараметрыСканирования.КэшМаркируемойПродукции);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ОбработатьДанныеШтрихкодаУпаковкиМаркируемойПродукции(Форма, ДанныеШтрихкода, ВложенныеШтрихкоды, ПараметрыСканирования) Экспорт
	
	РезультатОбработки = ШтрихкодированиеОбщегоНазначенияИС.ИнициализироватьРезультатОбработкиШтрихкода(ПараметрыСканирования, ДанныеШтрихкода);
	
	ПараметрыЗаполнения = АкцизныеМаркиЕГАИС.ПараметрыЗаполненияТоваровИАкцизныхМарок(Форма, Истина, ПараметрыСканирования);
	ПараметрыЗаполнения.ЕстьСправка2                   = Ложь;
	ПараметрыЗаполнения.ПараметрыУказанияСерий         = Форма.ПараметрыУказанияСерий;
	ПараметрыЗаполнения.ИмяКолонкиАлкогольнаяПродукция = "НоменклатураЕГАИС";
	ПараметрыЗаполнения.ЕстьКоличествоАкцизныхМарок    = Ложь;
	
	ЗаполнитьТоварыИАкцизныеМаркиМаркируемойпродукции(Форма, ВложенныеШтрихкоды.ДеревоУпаковок, ПараметрыЗаполнения);
	
	РезультатОбработки.ИзмененныеСтроки  = ПараметрыЗаполнения.ИзмененныеСтроки;
	РезультатОбработки.ДобавленныеСтроки = ПараметрыЗаполнения.ДобавленныеСтроки;
	
	Возврат РезультатОбработки;
	
КонецФункции

// Заполняет табличные части Акцизные марки и Товары по данным дерева упаковок.
//
// Параметры:
//  ДокументОбъект - ДокументОбъект.ТТНИсходящаяЕГАИС - ТТН ЕГАИС (исходящая).
//  ДеревоУпаковок - ДеревоЗначений - дерево упаковок.
//  ШтрихкодыУпаковок - ТаблицаЗначений - таблица штрихкодов упаковок и их хеш-сумм.
//  УпаковкаВерхнегоУровня - СправочникСсылка.ШтрихкодыУпаковокТоваров - Упаковка верхнего уровня.
//
Процедура ЗаполнитьТоварыИАкцизныеМаркиМаркируемойПродукции(Форма, ДеревоУпаковок, ПараметрыЗаполнения, УпаковкаВерхнегоУровня = Неопределено) Экспорт
	
	ДокументОбъект = Форма.Объект;
	Для Каждого СтрокаДерева Из ДеревоУпаковок.Строки Цикл
		
		Если УпаковкаВерхнегоУровня = Неопределено
			И СтрокаДерева.ТипУпаковки <> Перечисления.ТипыУпаковок.МаркированныйТовар Тогда
			УпаковкаВерхнегоУровняСтрокиДерева = СтрокаДерева.ШтрихкодУпаковки;
		Иначе
			УпаковкаВерхнегоУровняСтрокиДерева = УпаковкаВерхнегоУровня;
		КонецЕсли;
		
		ЗаполнитьТоварыИАкцизныеМаркиМаркируемойПродукции(Форма, СтрокаДерева, ПараметрыЗаполнения, УпаковкаВерхнегоУровняСтрокиДерева);
		
		Если СтрокаДерева.ВидПродукции <> Неопределено
			И СтрокаДерева.Номенклатура <> Неопределено
			И СтрокаДерева.Характеристика <> Неопределено
			И СтрокаДерева.Серия <> Неопределено
			И СтрокаДерева.ТипУпаковки = Перечисления.ТипыУпаковок.МаркированныйТовар Тогда
			
			Если СтрокаДерева.Видпродукции = Перечисления.ВидыПродукцииИС.Алкогольная Тогда
				
				#Область АлкогольнаяПродукция
				
				ПараметрыПоиска = Новый Структура;
				ПараметрыПоиска.Вставить("Номенклатура",   СтрокаДерева.Номенклатура);
				ПараметрыПоиска.Вставить("Характеристика", СтрокаДерева.Характеристика);
				
				НайденныеСтроки = ДокументОбъект.Товары.НайтиСтроки(ПараметрыПоиска);
				
				Если НайденныеСтроки.Количество() > 0 Тогда
					
					ПараметрыОтбора = Новый Структура;
					ПараметрыОтбора.Вставить("Номенклатура",   СтрокаДерева.Номенклатура);
					ПараметрыОтбора.Вставить("Характеристика", СтрокаДерева.Характеристика);
					
					РезультатПоиска = АкцизныеМаркиЕГАИС.НайтиСтрокиТоваров(
						ДокументОбъект.Товары, ПараметрыОтбора,
						Неопределено, СтрокаДерева.АлкогольнаяПродукция, ПараметрыЗаполнения);
					
					СтрокаТЧ                        = РезультатПоиска.ПолноеСоответствие;
					СтрокиТЧДляУменьшенияКоличества = РезультатПоиска.КЗаполнению;
					
				Иначе
					
					СтрокаТЧ                        = Неопределено;
					СтрокиТЧДляУменьшенияКоличества = Неопределено;
					
				КонецЕсли;
				
				Если СтрокиТЧДляУменьшенияКоличества = Неопределено
					И СтрокаТЧ = Неопределено Тогда
					
					СтрокаТЧ = ДокументОбъект.Товары.Добавить();
					СтрокаТЧ[ПараметрыЗаполнения.ИмяКолонкиАлкогольнаяПродукция] = СтрокаДерева.АлкогольнаяПродукция;
					СтрокаТЧ.Номенклатура         = СтрокаДерева.Номенклатура;
					СтрокаТЧ.Характеристика       = СтрокаДерева.Характеристика;
					СтрокаТЧ.Штрихкод             = СтрокаДерева.Штрихкод;
					
					АкцизныеМаркиЕГАИС.ОбработатьДобавленнуюСтроку(СтрокаТЧ, ПараметрыЗаполнения, 1);
					
				ИначеЕсли СтрокиТЧДляУменьшенияКоличества = Неопределено
					И СтрокаТЧ <> Неопределено Тогда
					
					АкцизныеМаркиЕГАИС.ОбработатьИзмененнуюСтроку(СтрокаТЧ, ПараметрыЗаполнения, 1);
					
				Иначе
					
					Для Каждого СтрокаТЧДляУменьшенияКоличества Из СтрокиТЧДляУменьшенияКоличества Цикл
						
						Если СтрокаТЧДляУменьшенияКоличества.Количество <= 1 Тогда
							
							Если СтрокаТЧ = Неопределено Тогда
								
								СтрокаТЧ = СтрокаТЧДляУменьшенияКоличества;
								
								СтрокаТЧ[ПараметрыЗаполнения.ИмяКолонкиАлкогольнаяПродукция] = СтрокаДерева.АлкогольнаяПродукция;
								
							Иначе
								
								ДокументОбъект.Товары.Удалить(СтрокаТЧДляУменьшенияКоличества);
								
								Индекс = ПараметрыЗаполнения.ИзмененныеСтроки.Найти(СтрокаТЧДляУменьшенияКоличества);
								Если Индекс <> Неопределено Тогда
									ПараметрыЗаполнения.ИзмененныеСтроки.Удалить(Индекс);
								КонецЕсли;
								
							КонецЕсли;
							
							АкцизныеМаркиЕГАИС.ОбработатьИзмененнуюСтроку(СтрокаТЧ, ПараметрыЗаполнения, 1);
							
						Иначе
							
							СтрокаТЧДляУменьшенияКоличества.Количество = СтрокаТЧДляУменьшенияКоличества.Количество - 1;
							ПараметрыЗаполнения.ИзмененныеСтроки.Добавить(СтрокаТЧДляУменьшенияКоличества);
							
							Если СтрокаТЧ = Неопределено Тогда
								
								СтрокаТЧ = ДокументОбъект.Товары.Вставить(Форма.Объект.Товары.Индекс(СтрокаТЧДляУменьшенияКоличества) + 1);
								ЗаполнитьЗначенияСвойств(СтрокаТЧ, СтрокаТЧДляУменьшенияКоличества,,"Количество, КоличествоУпаковок, КлючСвязи");
								
								СтрокаТЧ[ПараметрыЗаполнения.ИмяКолонкиАлкогольнаяПродукция] = СтрокаДерева.АлкогольнаяПродукция;
								
								АкцизныеМаркиЕГАИС.ОбработатьДобавленнуюСтроку(СтрокаТЧ, ПараметрыЗаполнения, 1);
								
							Иначе
								
								АкцизныеМаркиЕГАИС.ОбработатьИзмененнуюСтроку(СтрокаТЧ, ПараметрыЗаполнения, 1);
								
							КонецЕсли;
							
						КонецЕсли;
						
						Прервать;
						
					КонецЦикла;
					
				КонецЕсли;
				
				Если Не ЗначениеЗаполнено(СтрокаТЧ.КлючСвязи) Тогда 
					ОбработкаТабличнойЧастиТоварыКлиентСервер.ЗаполнитьКлючСвязи(ДокументОбъект.Товары, СтрокаТЧ, "КлючСвязи");
				КонецЕсли;
				
				Если ШтрихкодированиеИСРТ.ЭтоМарка(СтрокаДерева.Штрихкод) Тогда
					АкцизныеМаркиСтрокаТЧ = ДокументОбъект.АкцизныеМарки.Добавить();
					АкцизныеМаркиСтрокаТЧ.КлючСвязи        = СтрокаТЧ.КлючСвязи;
					АкцизныеМаркиСтрокаТЧ.АкцизнаяМарка    = СтрокаДерева.ШтрихкодУпаковки;
					АкцизныеМаркиСтрокаТЧ.ШтрихкодУпаковки = УпаковкаВерхнегоУровня;
					АкцизныеМаркиСтрокаТЧ.КодАкцизнойМарки = СтрокаДерева.Штрихкод;
					АкцизныеМаркиСтрокаТЧ.Справка2         = СтрокаДерева.Справка2;
				КонецЕсли;
				
				#КонецОбласти
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#Область АлкогольнаяПродукция

Функция ТаблицаАлкогольнойПродукцииКОпределениюСправок2(ДокументОбъект) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТабличнаяЧасть.АлкогольнаяПродукция КАК АлкогольнаяПродукция,
	|	ТабличнаяЧасть.Номенклатура КАК Номенклатура,
	|	НЕОПРЕДЕЛЕНО КАК Характеристика,
	|	НЕОПРЕДЕЛЕНО КАК Серия,
	|	ТабличнаяЧасть.Количество КАК Количество
	|ПОМЕСТИТЬ ВТТовары
	|ИЗ
	|	&Товары КАК ТабличнаяЧасть
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТабличнаяЧасть.Номенклатура КАК Номенклатура,
	|	НЕОПРЕДЕЛЕНО КАК Характеристика,
	|	НЕОПРЕДЕЛЕНО КАК Серия,
	|	ТабличнаяЧасть.Количество КАК Количество
	|ПОМЕСТИТЬ ВТСерии
	|ИЗ
	|	&Серии КАК ТабличнаяЧасть
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СоответствиеНоменклатурыЕГАИС.Номенклатура КАК Номенклатура
	|ПОМЕСТИТЬ ВТ_АлкогольнаяПродукция
	|ИЗ
	|	РегистрСведений.СоответствиеНоменклатурыЕГАИС КАК СоответствиеНоменклатурыЕГАИС
	|ГДЕ
	|	СоответствиеНоменклатурыЕГАИС.Номенклатура <> ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТабличнаяЧасть.АлкогольнаяПродукция КАК АлкогольнаяПродукция,
	|	ТабличнаяЧасть.Номенклатура КАК Номенклатура,
	|	НЕОПРЕДЕЛЕНО КАК Характеристика,
	|	НЕОПРЕДЕЛЕНО КАК Серия,
	|	ЗНАЧЕНИЕ(Справочник.Справки2ЕГАИС.ПустаяСсылка) КАК Справка2,
	|	СУММА(ТабличнаяЧасть.Количество) КАК Количество,
	|	ЕСТЬNULL(ВидыАлкогольнойПродукции.Маркируемый, ЛОЖЬ) КАК Маркируемая
	|ИЗ
	|	ВТТовары КАК ТабличнаяЧасть
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
	|		ПО ТабличнаяЧасть.Номенклатура = СправочникНоменклатура.Ссылка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_АлкогольнаяПродукция КАК ВТ_АлкогольнаяПродукция
	|		ПО ТабличнаяЧасть.Номенклатура = ВТ_АлкогольнаяПродукция.Номенклатура
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КлассификаторАлкогольнойПродукцииЕГАИС КАК КлассификаторАлкогольнойПродукцииЕГАИС
	|		ПО ТабличнаяЧасть.АлкогольнаяПродукция = КлассификаторАлкогольнойПродукцииЕГАИС.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыАлкогольнойПродукции КАК ВидыАлкогольнойПродукции
	|		ПО (КлассификаторАлкогольнойПродукцииЕГАИС.ВидПродукции = ВидыАлкогольнойПродукции.Ссылка)
	|
	|СГРУППИРОВАТЬ ПО
	|	ТабличнаяЧасть.Номенклатура,
	|	ТабличнаяЧасть.АлкогольнаяПродукция,
	|	ЕСТЬNULL(ВидыАлкогольнойПродукции.Маркируемый, ЛОЖЬ)";
	
	Запрос.УстановитьПараметр("Товары", ДокументОбъект.Товары.Выгрузить());
	Запрос.УстановитьПараметр("Серии", ДокументОбъект.Серии.Выгрузить());
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

Функция ШтрихкодыУпаковок(ДокументСсылка, ЗаполнитьСправки2ИзРегистра = Ложь) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	АкцизныеМаркиЕГАИС.ОрганизацияЕГАИС КАК ОрганизацияЕГАИС,
	|	АкцизныеМаркиЕГАИС.АкцизнаяМарка КАК ШтрихкодУпаковки,
	|	ВЫБОР
	|		КОГДА АкцизныеМаркиЕГАИС.Справка2 = РеализацияАкцизныеМарки.Справка2
	|			ТОГДА АкцизныеМаркиЕГАИС.Справка2
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.СтатусыАкцизныхМарок.ОшибкаЧтенияСтатуса)
	|	КОНЕЦ КАК Статус,
	|	АкцизныеМаркиЕГАИС.АлкогольнаяПродукция КАК АлкогольнаяПродукция,
	|	РеализацияАкцизныеМарки.Справка2 КАК Справка2
	|ИЗ
	|	Документ.РеализацияТоваров.АкцизныеМарки КАК РеализацияАкцизныеМарки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КлассификаторОрганизацийЕГАИС КАК КлассификаторОрганизацийЕГАИС
	|		ПО РеализацияАкцизныеМарки.Ссылка.Организация = КлассификаторОрганизацийЕГАИС.Контрагент
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.АкцизныеМаркиЕГАИС КАК АкцизныеМаркиЕГАИС
	|		ПО РеализацияАкцизныеМарки.АкцизнаяМарка = АкцизныеМаркиЕГАИС.АкцизнаяМарка
	|ГДЕ
	|	РеализацияАкцизныеМарки.Ссылка = &Ссылка";
	
	Если ЗаполнитьСправки2ИзРегистра Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "РеализацияАкцизныеМарки.Справка2", "АкцизныеМаркиЕГАИС.Справка2");
	КонецЕсли; 
	
	Возврат Новый Структура("МаркированныеТовары", Запрос.Выполнить().Выгрузить());
КонецФункции

// Функция предназначена для обработки считанного штрихкода акцизной марки старого (PDF417) и нового (Data Matrix) образцов
//
Функция ОбработатьДанныеШтрихкодаЕдиницыАлкогольнойПродукции(Форма, ДанныеШтрихкода, ПараметрыСканирования) Экспорт
	
	ДокументОбъект = Форма.Объект;
	
	Результат = ШтрихкодированиеОбщегоНазначенияИС.ИнициализироватьРезультатОбработкиШтрихкода(Неопределено, ДанныеШтрихкода);
	
	ПараметрыЗаполнения = АкцизныеМаркиЕГАИС.ПараметрыЗаполненияТоваровИАкцизныхМарок(Форма, Истина, ПараметрыСканирования);
	ПараметрыЗаполнения.ЕстьСправка2                   = Ложь;
	ПараметрыЗаполнения.ПараметрыУказанияСерий         = Форма.ПараметрыУказанияСерий;
	ПараметрыЗаполнения.ИмяКолонкиАлкогольнаяПродукция = "НоменклатураЕГАИС";
	ПараметрыЗаполнения.ЕстьКоличествоАкцизныхМарок    = Ложь;
	
	ПараметрыПоиска = Новый Структура;
	ПараметрыПоиска.Вставить("Номенклатура",   ДанныеШтрихкода.Номенклатура);
	ПараметрыПоиска.Вставить("Характеристика", ДанныеШтрихкода.Характеристика);
	
	НайденныеСтроки = ДокументОбъект.Товары.НайтиСтроки(ПараметрыПоиска);
	
	Если НайденныеСтроки.Количество() = 0 Тогда
		
		СтрокаТЧ = Форма.Объект.Товары.Добавить();
		СтрокаТЧ.Номенклатура         = ДанныеШтрихкода.Номенклатура;
		СтрокаТЧ.Характеристика       = ДанныеШтрихкода.Характеристика;
		СтрокаТЧ.Штрихкод             = ДанныеШтрихкода.Штрихкод;
		
		АкцизныеМаркиЕГАИС.ОбработатьДобавленнуюСтроку(СтрокаТЧ, ПараметрыЗаполнения, 1);
		
	Иначе
		
		СтрокаТЧ = НайденныеСтроки[0];
		ОбработатьИзмененнуюСтроку(Форма, СтрокаТЧ, ПараметрыЗаполнения, 1);
		
	КонецЕсли;
	
	Результат.ИзмененныеСтроки  = ПараметрыЗаполнения.ИзмененныеСтроки;
	Результат.ДобавленныеСтроки = ПараметрыЗаполнения.ДобавленныеСтроки;
	
	Если Не ЗначениеЗаполнено(СтрокаТЧ.КлючСвязи) Тогда 
		ОбработкаТабличнойЧастиТоварыКлиентСервер.ЗаполнитьКлючСвязи(ДокументОбъект.Товары, СтрокаТЧ, "КлючСвязи");
	КонецЕсли;
	
	Если ШтрихкодированиеИСРТ.ЭтоМарка(ДанныеШтрихкода.Штрихкод) Тогда
		АкцизныеМаркиСтрокаТЧ = ДокументОбъект.АкцизныеМарки.Добавить();
		АкцизныеМаркиСтрокаТЧ.КлючСвязи        = СтрокаТЧ.КлючСвязи;
		АкцизныеМаркиСтрокаТЧ.АкцизнаяМарка    = ДанныеШтрихкода.ШтрихкодУпаковки;
		АкцизныеМаркиСтрокаТЧ.КодАкцизнойМарки = ДанныеШтрихкода.Штрихкод;
		АкцизныеМаркиСтрокаТЧ.Справка2         = ДанныеШтрихкода.Справка2;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Процедура ОбработатьИзмененнуюСтроку(Форма, СтрокаТЧТовары, ПараметрыЗаполнения, Количество) Экспорт
	
	ЭтоДобавленнаяСтрока = ПараметрыЗаполнения.ДобавленныеСтроки.Найти(СтрокаТЧТовары) <> Неопределено;
	ЭтоИзмененнаяСтрока  = ПараметрыЗаполнения.ИзмененныеСтроки.Найти(СтрокаТЧТовары) <> Неопределено;
	
	Если ПараметрыЗаполнения.ДобавлятьКоличество
		Или ЭтоДобавленнаяСтрока
		Или ЭтоИзмененнаяСтрока Тогда
		
		СтрокаТЧТовары[ПараметрыЗаполнения.ИмяКолонкиКоличество] = СтрокаТЧТовары[ПараметрыЗаполнения.ИмяКолонкиКоличество] + Количество;
		
		Если ЭтоДобавленнаяСтрока Тогда
			СтрокаТЧТовары[ПараметрыЗаполнения.ИмяКолонкиКоличествоУпаковок] = СтрокаТЧТовары[ПараметрыЗаполнения.ИмяКолонкиКоличествоУпаковок] + Количество;
		КонецЕсли;
		
	Иначе
		СтрокаТЧТовары[ПараметрыЗаполнения.ИмяКолонкиКоличество] = Количество;
	КонецЕсли;
	
	Если Не ЭтоИзмененнаяСтрока И Не ЭтоДобавленнаяСтрока Тогда
		ПараметрыЗаполнения.ИзмененныеСтроки.Добавить(СтрокаТЧТовары);
	КонецЕсли;
	
КонецПроцедуры

// Заполняет табличные части Акцизные марки и Товары по данным дерева упаковок.
//
// Параметры:
//  ДокументОбъект - ДокументОбъект.ТТНИсходящаяЕГАИС - ТТН ЕГАИС (исходящая).
//  ДеревоУпаковок - ДеревоЗначений - дерево упаковок.
//  ШтрихкодыУпаковок - ТаблицаЗначений - таблица штрихкодов упаковок и их хеш-сумм.
//  УпаковкаВерхнегоУровня - СправочникСсылка.ШтрихкодыУпаковокТоваров - Упаковка верхнего уровня.
//
Процедура ЗаполнитьТоварыИАкцизныеМарки(ДокументОбъект, ДеревоУпаковок, ПараметрыЗаполнения, УпаковкаВерхнегоУровня = Неопределено) Экспорт
	
	Для Каждого СтрокаДерева Из ДеревоУпаковок.Строки Цикл
		
		Если УпаковкаВерхнегоУровня = Неопределено
			И СтрокаДерева.ТипУпаковки <> Перечисления.ТипыУпаковок.МаркированныйТовар Тогда
			УпаковкаВерхнегоУровняСтрокиДерева = СтрокаДерева.ШтрихкодУпаковки;
		Иначе
			УпаковкаВерхнегоУровняСтрокиДерева = УпаковкаВерхнегоУровня;
		КонецЕсли;
		
		ЗаполнитьТоварыИАкцизныеМарки(
			ДокументОбъект, СтрокаДерева, ПараметрыЗаполнения,
			УпаковкаВерхнегоУровняСтрокиДерева);
		
		Если СтрокаДерева.ТипУпаковки = Перечисления.ТипыУпаковок.МаркированныйТовар Тогда
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Функция предназначена для обработки считанного малого штрихкода акцизной марки старого (PDF417) образца
//
Функция ОбработатьДанныеШтрихкодаЕдиницыСНомеромИСерией(Форма, ДанныеШтрихкода, ПараметрыСканирования) Экспорт
	
	МодульШтрихкодированиеОбщегоНазначенияИС = ОбщегоНазначения.ОбщийМодуль("ШтрихкодированиеОбщегоНазначенияИС");
	Результат = МодульШтрихкодированиеОбщегоНазначенияИС.ИнициализироватьРезультатОбработкиШтрихкода(ПараметрыСканирования, ДанныеШтрихкода);
	Результат.ТекстОшибки = НСтр("ru = 'Обработка кодов DataMatrix в документе Чек ККМ не поддерживается. Считайте код акцизной марки.'");
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область ОбновлениеИнформационнойБазы

Процедура ПерезаполнитьСистемуНалогообложения(Параметры) Экспорт
	
	МетаданныеДокумента = Метаданные.Документы.РеализацияТоваров;
	ПолноеИмяОбъекта = МетаданныеДокумента.ПолноеИмя();
	
	#Если НЕ ТолстыйКлиентУправляемоеПриложение Тогда
		
		Выборка = ОбновлениеИнформационнойБазы.ВыбратьСсылкиДляОбработки(Параметры.Очередь, ПолноеИмяОбъекта);
		МодульОбновлениеИнформационнойБазыРТ = ОбщегоНазначения.ОбщийМодуль("ОбновлениеИнформационнойБазыРТ");
		МодульОбновлениеИнформационнойБазыРТ.ЗаполнитьСистемыНалогообложенияДокументов(ПолноеИмяОбъекта, Выборка, Параметры);
		
	#КонецЕсли
	
КонецПроцедуры

Процедура ЗарегистрироватьДанныеКЗаполнениюСНО(Параметры) Экспорт
	
	МетаданныеДокумента = Метаданные.Документы.РеализацияТоваров;
	ПолноеИмяОбъекта = МетаданныеДокумента.ПолноеИмя();
	
	#Если НЕ ТолстыйКлиентУправляемоеПриложение Тогда
		
		МодульОбновлениеИнформационнойБазыРТ = ОбщегоНазначения.ОбщийМодуль("ОбновлениеИнформационнойБазыРТ");
		ДокументыДляОбработки = МодульОбновлениеИнформационнойБазыРТ.ДокументыДляЗаполненияСНО(ПолноеИмяОбъекта);
		ОбновлениеИнформационнойБазы.ОтметитьКОбработке(Параметры, ДокументыДляОбработки);
		
	#КонецЕсли
	
КонецПроцедуры

Процедура ПерезаполнитьБанковскийСчетОрганизации(Параметры) Экспорт
	
	МетаданныеДокумента = Метаданные.Документы.РеализацияТоваров;
	ПолноеИмяОбъекта = МетаданныеДокумента.ПолноеИмя();
	
	#Если НЕ ТолстыйКлиентУправляемоеПриложение Тогда
		
		Выборка = ОбновлениеИнформационнойБазы.ВыбратьСсылкиДляОбработки(Параметры.Очередь, ПолноеИмяОбъекта);
		МодульОбновлениеИнформационнойБазыРТ = ОбщегоНазначения.ОбщийМодуль("ОбновлениеИнформационнойБазыРТ");
		МодульОбновлениеИнформационнойБазыРТ.ЗаполнитьБанковскийСчетОрганизацииОбъектов(ПолноеИмяОбъекта, "БанковскийСчетОрганизации", Выборка, Параметры);
		
	#КонецЕсли
	
КонецПроцедуры

Процедура ЗарегистрироватьДанныеКЗаполнениюБСО(Параметры) Экспорт
	
	МетаданныеДокумента = Метаданные.Документы.РеализацияТоваров;
	ПолноеИмяОбъекта = МетаданныеДокумента.ПолноеИмя();
	
	#Если НЕ ТолстыйКлиентУправляемоеПриложение Тогда
		
		МодульОбновлениеИнформационнойБазыРТ = ОбщегоНазначения.ОбщийМодуль("ОбновлениеИнформационнойБазыРТ");
		ДокументыДляОбработки = МодульОбновлениеИнформационнойБазыРТ.ОбъектыДляЗаполненияБанковскогоСчетаОрганизации(ПолноеИмяОбъекта, "БанковскийСчетОрганизации");
		ОбновлениеИнформационнойБазы.ОтметитьКОбработке(Параметры, ДокументыДляОбработки);
		
	#КонецЕсли
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецЕсли