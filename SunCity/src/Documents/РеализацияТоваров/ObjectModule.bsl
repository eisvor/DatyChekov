#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий

// Процедура - обработчик события "ОбработкаЗаполнения".
//
Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	ИнициализироватьДокумент(СтандартнаяОбработка, ДанныеЗаполнения);
	ОбщегоНазначенияРТ.ПроверитьИспользованиеОрганизации(,,Организация);
	УчетНДС.СкорректироватьНДСВТЧДокумента(ЭтотОбъект, Товары);
	
КонецПроцедуры

// Процедура - обработчик события "ОбработкаПроведения".
//
Процедура ОбработкаПроведения(Отказ, РежимПроведения)

	// &ЗамерПроизводительности
	ВремяНачалаЗамера = ОценкаПроизводительности.НачатьЗамерВремени();
	
	ПроведениеСервер.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства, РежимПроведения);
	
	Документы.РеализацияТоваров.ИнициализироватьДанныеДокумента(Ссылка, ДополнительныеСвойства);
	
	ПроведениеСервер.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);
	
	ПродажиСервер.ОтразитьПродажи(ДополнительныеСвойства, Движения, Отказ);
	ПродажиСервер.ОтразитьПродажиПоДисконтнымКартам(ДополнительныеСвойства, Движения, Отказ);
	ЗапасыСервер.ОтразитьТоварыНаСкладах(ДополнительныеСвойства, Движения, Отказ);
	
	Если ДополнительныеСвойства.ИспользуетсяКомиссионнаяТорговля Тогда
		ЗапасыСервер.ОтразитьТоварыКОформлениюОтчетовКомитенту(ДополнительныеСвойства, Движения, Отказ);
	КонецЕсли;
	
	ЗапасыСервер.ОтразитьТоварыОрганизаций(ДополнительныеСвойства, Движения, Отказ);
	ЗапасыСервер.ОтразитьТоварыКОтгрузке(ДополнительныеСвойства, Движения, Отказ);
	ЗапасыСервер.ОтразитьДвиженияСерийныхНомеров(ДополнительныеСвойства, Движения, Отказ);
	ЗапасыСервер.ОтразитьДвиженияПодарочныхСертификатов(ДополнительныеСвойства, Движения, Отказ);
	ЗапасыСервер.ОтразитьДвиженияСерийТоваров(ДополнительныеСвойства, Движения, Отказ);
	ПродажиСервер.ОтразитьЗаказыПокупателей(ДополнительныеСвойства, Движения, Отказ);
	БонусныеБаллыСервер.ОтразитьБонусныеБаллы(ДополнительныеСвойства, Движения, Отказ);
	ДенежныеСредстваСервер.ОтразитьРасчетыСКлиентами(ДополнительныеСвойства, Движения, Отказ);
	
	СформироватьСписокРегистровДляКонтроля(ДополнительныеСвойства);

	ПроведениеСервер.ЗаписатьНаборыЗаписей(ЭтотОбъект);

	ПроведениеСервер.ВыполнитьКонтрольРезультатовПроведения(ЭтотОбъект, Отказ);

	ПроведениеСервер.ОчиститьДополнительныеСвойстваДляПроведения(ДополнительныеСвойства);
	
	ДополнительныеСвойства.Вставить("Отказ", Отказ);
	
	Если НЕ Отказ Тогда
		РезультатОбработкиНакоплений = СкидкиНаценкиВызовСервера.РезультатОбработкиНакопленийВДисконтномСервере(Ссылка);
		Если РезультатОбработкиНакоплений.Свойство("СообщениеПользователю") Тогда
			ОбщегоНазначения.СообщитьПользователю(РезультатОбработкиНакоплений.СообщениеПользователю);
		КонецЕсли;
	КонецЕсли;
	
	ОценкаПроизводительности.ЗакончитьЗамерВремени("РеализацияТоваровПроведение",ВремяНачалаЗамера,Товары.Количество(), Нстр("ru='Вес по табличной части ""Товары""'"));
	Если НЕ Отказ Тогда
		ОбменССайтомРТ.ЗаписатьСостояниеДоставкиЗаказаПокупателя(ЗаказПокупателя, Ссылка);
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	МассивНепроверяемыхРеквизитов = Новый Массив;

	ОбработкаТабличнойЧастиТоварыСервер.ПроверитьЗаполнениеКоличества(ЭтотОбъект, ПроверяемыеРеквизиты, Отказ);
	ОбработкаТабличнойЧастиТоварыСервер.ПроверитьЗаполнениеХарактеристик(ЭтотОбъект,МассивНепроверяемыхРеквизитов,Отказ);
	ОбработкаТабличнойЧастиТоварыСервер.ПроверитьЗаполнениеСерий(ЭтотОбъект,Документы.РеализацияТоваров.ПараметрыУказанияСерий(ЭтотОбъект),Отказ);
	ОбработкаТабличнойЧастиТоварыСервер.ПроверитьСодержитТолькоУслуги(ЭтотОбъект, ПроверяемыеРеквизиты);
	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты,МассивНепроверяемыхРеквизитов);

	МаркетинговыеАкцииСервер.ПроверитьЦеныСертификатов(
		ЭтотОбъект,
		"Товары",
		Отказ
	);
	
	МаркетинговыеАкцииСервер.ПроверитьЗаполнениеТабличнойЧастиСерийныеНомера(
		ЭтотОбъект,
		"Товары",
		"СерийныеНомера",
		Отказ
	);
	
	МаркетинговыеАкцииСервер.ПроверитьДвиженияСерийныхНомеров(
		ЭтотОбъект,
		"Товары",
		"СерийныеНомера",
		Отказ
	);
	
	МаркетинговыеАкцииСервер.ПроверитьОкончаниеАбсолютныхСроковДействияСертификатов(
		ЭтотОбъект,
		"Товары",
		Отказ,
	);
	
	ПродажиСервер.ПроверитьСистемуНалогообложения(ЭтотОбъект, Отказ);
	
КонецПроцедуры

// Процедура - обработчик события "ОбработкаУдаленияПроведения".
//
Процедура ОбработкаУдаленияПроведения(Отказ)
	
	ПроведениеСервер.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства);

	ПроведениеСервер.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);
	
	ИспользуетсяКомиссионнаяТорговля = ДополнительныеСвойства.ИспользуетсяКомиссионнаяТорговля;
	ИспользуетсяУчетИмпортныхТоваров = ДополнительныеСвойства.ИспользуетсяУчетИмпортныхТоваров;
	
	СформироватьСписокРегистровДляКонтроля(ДополнительныеСвойства);

	ПроведениеСервер.ЗаписатьНаборыЗаписей(ЭтотОбъект);

	ПроведениеСервер.ВыполнитьКонтрольРезультатовПроведения(ЭтотОбъект, Отказ);

	ПроведениеСервер.ОчиститьДополнительныеСвойстваДляПроведения(ДополнительныеСвойства);
	
	Если НЕ Отказ Тогда
		РезультатОбработкиНакоплений = СкидкиНаценкиВызовСервера.РезультатОбработкиНакопленийВДисконтномСервере(Ссылка);
		Если РезультатОбработкиНакоплений.Свойство("СообщениеПользователю") Тогда
			ОбщегоНазначения.СообщитьПользователю(РезультатОбработкиНакоплений.СообщениеПользователю);
		КонецЕсли;
		ОбменССайтомРТ.ЗаписатьСостояниеДоставкиЗаказаПокупателя(ЗаказПокупателя, Ссылка, Истина);
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик события "ПередЗаписью".
//
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Справочники.СерийныеНомера.ОчиститьВДокументеНеиспользуемыеСерийныеНомера(Товары, СерийныеНомера);
	ОбщегоНазначенияРТ.УдалитьНеиспользуемыеСтрокиСерий(ЭтотОбъект,Документы.РеализацияТоваров.ПараметрыУказанияСерий(ЭтотОбъект));
	
	Документы.СчетФактураВыданный.ПроверитьРеквизитыСчетФактуры(Ссылка, ПометкаУдаления, Организация);
	
	ПроведениеСервер.УстановитьРежимПроведения(Проведен, РежимЗаписи, РежимПроведения);
	
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ПеренестиДоговорКотрагентаВТЧ(ЭтотОбъект);

	ДополнительныеСвойства.Вставить("ЭтоНовый",    ЭтоНовый());
	ДополнительныеСвойства.Вставить("РежимЗаписи", РежимЗаписи);
	
	// Очистим заказ покупателя в табличной части при необходимости.
	Если НЕ ЗначениеЗаполнено(ЗаказПокупателя) Тогда
		Для Каждого Строка Из Товары Цикл
			Строка.ЗаказПокупателя = ЗаказПокупателя;
			Строка.КодСтроки       = Неопределено;
			Строка.Резервировать   = Ложь;
		КонецЦикла;
	КонецЕсли;
	
	ОбщегоНазначенияРТ.УстановитьНовоеЗначениеРеквизита(
		ЭтотОбъект,
		ОбработкаТабличнойЧастиТоварыКлиентСервер.СуммаДокумента(Товары, ЦенаВключаетНДС),
		"СуммаДокумента");
		
	ДополнительныеСвойства.Вставить("Отказ", Отказ);
	
	// ИнтеграцияГИСМ - Отключенный функционал
	ЕстьМаркируемаяПродукцияГИСМ = Ложь; //ИнтеграцияГИСМРТ.ЕстьМаркируемаяПродукцияГИСМ(Товары);
	// Конец ИнтеграцияГИСМ
	
	// ЕГАИС
	Если НЕ ДополнительныеСвойства.Свойство("СверткаИБ")
		И ИнтеграцияЕГАИСРТ.ЕстьПереданныеЧекиЕГАИС(Ссылка) Тогда
		СообщениеПользователю = НСтр("ru = 'Документ передан в ЕГАИС, изменения невозможны'");
		ОбщегоНазначения.СообщитьПользователю(СообщениеПользователю,,,, Отказ);
	КонецЕсли;
	// Конец ЕГАИС
	
КонецПроцедуры

// Процедура - обработчик события "ПриКопировании".
//
Процедура ПриКопировании(ОбъектКопирования)
	
	ЗаказПокупателя = Документы.ЗаказПокупателя.ПустаяСсылка();
	СкидкиРассчитаны = Ложь;
	ЕстьМаркируемаяПродукцияГИСМ = Ложь;
	СкидкиНаценкиСервер.ОтменитьСкидки(ЭтотОбъект, "Товары");
	Серии.Очистить();
	СерийныеНомера.Очистить();
	БонусныеБаллыКНачислению.Очистить();
	
	КоличествоТоваров = Товары.Количество();
	Если НЕ КоличествоТоваров = 0 Тогда
		Товары.ЗагрузитьКолонку(Новый Массив(Товары.Количество()), "КлючСвязиСерийныхНомеров");
	КонецЕсли;
	
	АкцизныеМарки.Очистить();
	
	УчетНДС.СкорректироватьНДСВТЧДокумента(ЭтотОбъект, Товары);
	
	ИнициализироватьДокумент(Истина);
	
КонецПроцедуры

Процедура ПриЗаписи(Отказ)
	
	Если ОбменДанными.Загрузка ИЛИ ДополнительныеСвойства.РежимЗаписи = РежимЗаписиДокумента.Запись Тогда
		Возврат;
	КонецЕсли;
	
	ТребуетсяСчетФактура = Истина;
	
	Документы.СчетФактураВыданный.АктуализироватьСчетФактуру(ЭтотОбъект.Ссылка, ЭтотОбъект.Проведен, ТребуетсяСчетФактура);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Инициализирует документ
//
Процедура ИнициализироватьДокумент(СтандартнаяОбработка, ДанныеЗаполнения = Неопределено)
	
	ТипДанныхЗаполнения = ТипЗнч(ДанныеЗаполнения);
	
	Если Не ДанныеЗаполнения = Неопределено Тогда
		КонтрагентИзОснования = "";
		ТекстОшибки = "";
		ПроверятьКонтрагента = Ложь;
		
		Если ТипДанныхЗаполнения = Тип("ДокументСсылка.ИсходящаяТранспортнаяОперацияВЕТИС") Тогда
			КонтрагентИзОснования = ДанныеЗаполнения.ГрузополучательХозяйствующийСубъект.Контрагент;
			ПроверятьКонтрагента = Истина;
		Иначе
			Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ДанныеЗаполнения, "Контрагент") Тогда
				КонтрагентИзОснования = ДанныеЗаполнения.Контрагент;
				ПроверятьКонтрагента = Истина;
			КонецЕсли;
		КонецЕсли;
		
		Если ПроверятьКонтрагента Тогда
			Если НЕ ЗначениеЗаполнено(КонтрагентИзОснования) Тогда
				ЕстьОшибка = Истина;
				ТекстОшибки = НСтр("ru='В основании не указан контрагент.'");
				//|Документ ""Реализация товаров"" не предназначен для работы с физическими лицами.'");
				
				ВызватьИсключение ТекстОшибки;
			КонецЕсли;
			
			ТипКонтрагента = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(КонтрагентИзОснования, "ЮрФизЛицо");
			//Если ТипКонтрагента = Перечисления.ЮрФизЛицо.ФизЛицо Тогда
			//	ТекстОшибки = НСтр("ru='Документ ""Реализация товаров"" не предназначен для работы с физическими лицами.'");
			//	
			//	ВызватьИсключение ТекстОшибки;
			//КонецЕсли;
		КонецЕсли;
	КонецЕсли;

	Если ТипДанныхЗаполнения = Тип("Структура") Тогда
		
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, ДанныеЗаполнения);
		
		Если ДанныеЗаполнения.Свойство("Магазин") И НЕ ЗначениеЗаполнено(Магазин) Тогда
			Склад = ЗначениеНастроекПовтИсп.СкладПродажиПоУмолчанию(ДанныеЗаполнения.Магазин,, Склад, Ответственный);
		КонецЕсли;
		
		Если ДанныеЗаполнения.Свойство("Организация") И НЕ ЗначениеЗаполнено(Организация) Тогда
			БанковскийСчетОрганизации = ЗначениеНастроекПовтИсп.БанковскийСчетОрганизацииПоУмолчанию(
				ДанныеЗаполнения.Организация,
				,
				БанковскийСчетОрганизации);
		КонецЕсли;
			
	ИначеЕсли ТипДанныхЗаполнения = Тип("ДокументСсылка.ПриходныйКассовыйОрдер") Тогда
		
		ОбщегоНазначенияРТ.ПроверитьВозможностьВводаНаОсновании(ДанныеЗаполнения);
		
		Магазин         = ДанныеЗаполнения.КассаККМ.Магазин;
		Организация     = ДанныеЗаполнения.Организация;
		Контрагент      = ДанныеЗаполнения.Контрагент;
		ЗаказПокупателя = ДанныеЗаполнения.ЗаказПокупателя;
		ДокументРасчета = ДанныеЗаполнения.Ссылка;
		Склад           = Магазин.СкладПродажи;
		
		ЦенаВключаетНДС =
			ОбщегоНазначенияРТ.ЗначениеРеквизитаВПривилегированномРежиме(Магазин.ПравилоЦенообразования, "ЦенаВключаетНДС");
		
	ИначеЕсли ТипДанныхЗаполнения = Тип("ДокументСсылка.ОплатаОтПокупателяПлатежнойКартой") Тогда
		
		ОбщегоНазначенияРТ.ПроверитьВозможностьВводаНаОсновании(ДанныеЗаполнения);
		
		Магазин         = ДанныеЗаполнения.Магазин;
		Организация     = ДанныеЗаполнения.Организация;
		Контрагент      = ДанныеЗаполнения.Контрагент;
		ЗаказПокупателя = ДанныеЗаполнения.ЗаказПокупателя;
		ДокументРасчета = ДанныеЗаполнения.Ссылка;
		Склад           = Магазин.СкладПродажи;
		
		ЦенаВключаетНДС =
			ОбщегоНазначенияРТ.ЗначениеРеквизитаВПривилегированномРежиме(Магазин.ПравилоЦенообразования, "ЦенаВключаетНДС");
		
	ИначеЕсли ТипДанныхЗаполнения = Тип("ДокументСсылка.РегистрацияБезналичнойОплаты") Тогда
		
		ОбщегоНазначенияРТ.ПроверитьВозможностьВводаНаОсновании(ДанныеЗаполнения);
		
		Магазин         = ДанныеЗаполнения.Магазин;
		Организация     = ДанныеЗаполнения.Организация;
		Контрагент      = ДанныеЗаполнения.Контрагент;
		ДокументРасчета = ДанныеЗаполнения.Ссылка;
		Склад           = Магазин.СкладПродажи;
		
		Если ТипЗнч(ДанныеЗаполнения.ДокументОснование) = Тип("ДокументСсылка.ЗаказПокупателя") Тогда
			ЗаказПокупателя = ДанныеЗаполнения.ДокументОснование;
		КонецЕсли;
		
		ЦенаВключаетНДС = ОбщегоНазначенияРТ.ЗначениеРеквизитаВПривилегированномРежиме(Магазин.ПравилоЦенообразования, "ЦенаВключаетНДС");
		
	ИначеЕсли ТипДанныхЗаполнения = Тип("ДокументСсылка.ЗаказПокупателя") Тогда
		
		ОбщегоНазначенияРТ.ПроверитьВозможностьВводаНаОсновании(ДанныеЗаполнения);
		
		Магазин         = ДанныеЗаполнения.Магазин;
		Организация     = ДанныеЗаполнения.Организация;
		Контрагент      = ДанныеЗаполнения.Контрагент;
		ЗаказПокупателя = ДанныеЗаполнения;
		Склад           = ДанныеЗаполнения.Склад;
		УчитыватьНДС    = ДанныеЗаполнения.УчитыватьНДС;
		ЦенаВключаетНДС = ДанныеЗаполнения.ЦенаВключаетНДС;
		
	ИначеЕсли ТипДанныхЗаполнения = Тип("ДокументСсылка.ИсходящаяТранспортнаяОперацияВЕТИС") Тогда
		
		ИнтеграцияВЕТИСРТ.ЗаполнитьРеализациюТоваровНаОснованииИсходящейТранспортнойОперацииВЕТИС(
			ЭтотОбъект,
			ДанныеЗаполнения,
			,
			СтандартнаяОбработка);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ЗаказПокупателя) Тогда
		Если ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.ЗаказПокупателя") Тогда
			СтатусЗаказа = ДанныеЗаполнения.Статус;
		ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("Структура") Тогда
			Если ДанныеЗаполнения.Свойство("Статус") Тогда
				СтатусЗаказа = ДанныеЗаполнения.Статус;
			Иначе
				СтатусЗаказа = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЗаказПокупателя, "Статус");
			КонецЕсли;
		Иначе
			СтатусЗаказа = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЗаказПокупателя, "Статус");
		КонецЕсли;
		
		Если СтатусЗаказа = Перечисления.СтатусыЗаказовПокупателей.НеСогласован Тогда
			
			ТекстОшибки = НСтр("ru='Заказ не согласован. Заполнение документа не выполнено.'");
			ВызватьИсключение ТекстОшибки;
			
		ИначеЕсли СтатусЗаказа = Перечисления.СтатусыЗаказовПокупателей.Закрыт Тогда
			
			ТекстОшибки = НСтр("ru='Заказ закрыт.Заполнение документа не выполнено.'");
			ВызватьИсключение ТекстОшибки;
			
		КонецЕсли;
		
		РозничныеПродажиСервер.ЗаполнитьПоОстаткамЗаказа(ЭтотОбъект, ЗаказПокупателя);
		
	КонецЕсли;
	
	Ответственный = Пользователи.ТекущийПользователь();
	
	Магазин    = ЗначениеНастроекПовтИсп.МагазинПоУмолчанию(Магазин);
	Склад      = ЗначениеНастроекПовтИсп.СкладПродажиПоУмолчанию(Магазин,, Склад, Ответственный);
	Контрагент = ЗначениеНастроекПовтИсп.ПокупательПоУмолчанию(Ответственный, Контрагент);
	Продавец   = ЗначениеНастроекПовтИсп.ПродавецПоУмолчанию(Ответственный, Продавец);
	
	Если ДанныеЗаполнения = Неопределено И ЗначениеЗаполнено(Склад) Тогда
		Организация = Склад.Организация;
	КонецЕсли;
	
	Организация = ЗначениеНастроекПовтИсп.ОрганизацияПоУмолчанию(Организация, Ответственный);
	БанковскийСчетОрганизации =
		ЗначениеНастроекПовтИсп.БанковскийСчетОрганизацииПоУмолчанию(Организация,, БанковскийСчетОрганизации);
	
	ПодключаемоеОборудованиеРТ.ЗаполнитьСистемуНалогообложения(ЭтотОбъект);
	
	Если ДанныеЗаполнения = Неопределено Тогда
		ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьДоговорПлатежногоАгентаВТЧСервер(Товары);
	Иначе
		ОбработкаТабличнойЧастиТоварыКлиентСервер.ПеренестиДоговорКотрагентаВТЧ(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

// Процедура формирует массив имен регистров для контроля проведения.
//
Процедура СформироватьСписокРегистровДляКонтроля(ДополнительныеСвойства)

	Массив = Новый Массив;
	
	ИспользуетсяКомиссионнаяТорговля = ДополнительныеСвойства.ИспользуетсяКомиссионнаяТорговля;
	ИспользуетсяУчетИмпортныхТоваров = ДополнительныеСвойства.ИспользуетсяУчетИмпортныхТоваров;
	ИспользоватьУчетПрослеживаемыхИмпортныхТоваров 	= ПолучитьФункциональнуюОпцию("ИспользоватьУчетПрослеживаемыхИмпортныхТоваров");
	ТребуетсяКонтрольПрослеживаемыхТоваров 			= УправлениеПользователями.ПолучитьБулевоЗначениеПраваПользователя(
														ПланыВидовХарактеристик.ПраваПользователей.КонтролироватьОстатокПрослеживаемогоТовараПриПроведении, Ложь);
	
	// При проведении выполняется контроль превышения остатков на складах.
	Если ДополнительныеСвойства.РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		
		Массив.Добавить(Движения.ТоварыНаСкладах);
		Массив.Добавить(Движения.ДвиженияСерийныхНомеров);
		Массив.Добавить(Движения.ЗаказыПокупателей);
		
		Если ИспользоватьУчетПрослеживаемыхИмпортныхТоваров И ТребуетсяКонтрольПрослеживаемыхТоваров Тогда
			Если УчетПрослеживаемыхТоваровРТ.ЭтоПрослеживаемыйДокумент(Товары, Дата) Тогда
				Массив.Добавить(Движения.ТоварыОрганизаций);
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;

	ДополнительныеСвойства.ДляПроведения.Вставить("РегистрыДляКонтроля", Массив);
	ДополнительныеСвойства.ДляПроведения.Вставить("ПопыткиПродажПревышающихОстаток");

КонецПроцедуры

#КонецОбласти

#КонецЕсли
