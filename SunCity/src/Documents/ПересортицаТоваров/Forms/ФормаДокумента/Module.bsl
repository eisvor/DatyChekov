#Область ОписаниеПеременных

&НаКлиенте
Перем КэшированныеЗначения;

#КонецОбласти

#Область ПрограммныйИнтерфейс

#Область ОбработчикиСобытийПодключаемогоОборудования

&НаКлиенте
Функция ПолученМагнитныйКод(МагнитныйКод) Экспорт 
	
	СтруктураРезультат = ДанныеПоискаПоМагнитномуКодуСервер(МагнитныйКод);
	
	Возврат ПодключаемоеОборудованиеРТКлиент.ПолученМагнитныйКод(ЭтотОбъект, СтруктураРезультат);
КонецФункции

&НаКлиенте
Функция ПолученШтрихкодИзСШК(Штрихкод) Экспорт
	
	СтруктураРезультат = ДанныеПоискаПоШтрихкодуСервер(Штрихкод);
	
	Возврат ПодключаемоеОборудованиеРТКлиент.ПолученШтрихкодИзСШК(ЭтотОбъект, СтруктураРезультат);
КонецФункции

&НаКлиенте
Процедура ОбработатьДанныеПоКодуКлиент(СтруктураПараметровКлиента) Экспорт
	
	ОткрытаБлокирующаяФорма = Ложь;
	
	ПодключаемоеОборудованиеРТКлиент.ОбработатьДанныеПоКоду(
		ЭтотОбъект,
		СтруктураПараметровКлиента,
		ОткрытаБлокирующаяФорма);
	
	Если НЕ ОткрытаБлокирующаяФорма Тогда
		ЗавершитьОбработкуДанныхПоКодуКлиент(СтруктураПараметровКлиента);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Функция ДобавитьНайденныеПозицииТоваров(СтруктураПараметров, ДополнительныеПараметры = Неопределено) Экспорт
	
	Возврат ДобавитьНайденныеПозицииТоваровСервер(СтруктураПараметров, ДополнительныеПараметры);
КонецФункции

&НаКлиенте
Процедура ОповещениеОткрытьФормуВыбораДанныхПоиска(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено Тогда
		ПродолжитьОбработатьДанныеПоКодуКлиент(Результат);
		ОбработатьДанныеПоКодуКлиент(Результат)
	КонецЕсли;
КонецПроцедуры

&НаСервере
Функция ДанныеПоискаПоМагнитномуКодуСервер(МагнитныйКод)
	
	Возврат ПодключаемоеОборудованиеРТ.ДанныеПоискаПоМагнитномуКоду(МагнитныйКод, ЭтотОбъект);
КонецФункции

&НаСервере
Функция ДанныеПоискаПоШтрихкодуСервер(Штрихкод)
	
	Возврат ПодключаемоеОборудованиеРТ.ДанныеПоискаПоШтрихкоду(Штрихкод, ЭтотОбъект);
КонецФункции

&НаКлиенте
Процедура ОповещениеОбработатьДанныеПоКоду(СтруктураРезультат, ДополнительныеПараметры) Экспорт
	
	ПродолжитьОбработатьДанныеПоКодуКлиент(СтруктураРезультат);
КонецПроцедуры

&НаКлиенте
Процедура ПродолжитьОбработатьДанныеПоКодуКлиент(СтруктураРезультат) Экспорт
	
	ИдентификаторСтроки = Неопределено;
	СтрокаРезультата = СтруктураРезультат.ЗначенияПоиска[0];
	
	Если СтрокаРезультата.Свойство("Карта") Тогда
		
		ПодключаемоеОборудованиеРТКлиент.ВставитьПредупреждениеОНевозможностиОбработкиКарт(
			СтруктураРезультат,
			СтрокаРезультата);
		
	ИначеЕсли СтрокаРезультата.Свойство("СерийныйНомер") Тогда
		
		ИдентификаторСтроки =
			ПодключаемоеОборудованиеРТКлиент.ДобавитьНоменклатуруПоСерийномуНомеру(ЭтотОбъект, СтрокаРезультата);
		
	Иначе // Номенклатура.
		
		ИдентификаторСтроки = ДобавитьНайденныеПозицииТоваровСервер(СтрокаРезультата);
		
	КонецЕсли;

	Если СтрокаРезультата.Свойство("ТекстПредупреждения") Тогда
		СтруктураРезультат.Вставить("ТекстПредупреждения", СтрокаРезультата.ТекстПредупреждения);
	КонецЕсли;
	
	Если ИдентификаторСтроки <> Неопределено Тогда
		СтруктураРезультат.Вставить("АктивизироватьСтроку", ИдентификаторСтроки);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Функция ОбработатьДанныеИзТСДКлиент(СтруктураПараметров, ДополнительныеПараметры) Экспорт
	
	СтруктураПараметров.Вставить("СворачиватьУпаковки", Истина);
	Результат = ПодключаемоеОборудованиеРТКлиент.ОбработатьДанныеПоНоменклатуреИзТСДКлиент(
		ЭтотОбъект,
		СтруктураПараметров);
	ПодключаемоеОборудованиеРТКлиент.СообщитьТекстПредупреждения(СтруктураПараметров);
	
	Возврат Результат;
КонецФункции

&НаСервере
Функция ДобавитьНайденныеПозицииТоваровСервер(СтруктураПараметров, ДополнительныеПараметры = Неопределено)
	
	Если Не ДополнительныеПараметры = Неопределено Тогда 
		СтруктураПараметров = ДополнительныеПараметры;
		ИдентификаторСтроки = СтруктураПараметров;
	Иначе 
		ИдентификаторСтроки = Неопределено;
	КонецЕсли;
	
	РеквизитыНоменклатуры = Новый Структура;
	РеквизитыНоменклатуры.Вставить("ИспользоватьСерийныеНомера");
	РеквизитыНоменклатуры.Вставить("ТипНоменклатуры");
	СтруктураНоменклатуры =
		ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СтруктураПараметров.Номенклатура, РеквизитыНоменклатуры);
	
	Если СтруктураНоменклатуры.ТипНоменклатуры <> Перечисления.ТипыНоменклатуры.Товар
		И СтруктураНоменклатуры.ТипНоменклатуры <> Перечисления.ТипыНоменклатуры.ПодарочныйСертификат Тогда
		
		ТекстПредупреждения =
			НСтр("ru = 'По коду ""%1"" найдена номенклатура с типом %2.
			|Допускается пересортица только для товаров и несерийных подарочных сертификатов'");
		ТекстПредупреждения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			ТекстПредупреждения,
			СтруктураПараметров.ДанныеПО,
			СтруктураНоменклатуры.ТипНоменклатуры);
		
		СтруктураПараметров.Вставить("ТекстПредупреждения", ТекстПредупреждения);
		
		Возврат Неопределено;
	КонецЕсли;
	
	Если СтруктураНоменклатуры.ИспользоватьСерийныеНомера Тогда
		ТекстПредупреждения = 
			НСтр("ru = 'По коду ""%1"" найден подарочный сертификат с использованием серийных номеров.
			|Допускается пересортица только для товаров и несерийных подарочных сертификатов'");
		ТекстПредупреждения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			ТекстПредупреждения,
			СтруктураПараметров.ДанныеПО);
		
		СтруктураПараметров.Вставить("ТекстПредупреждения", ТекстПредупреждения);
		
		Возврат Неопределено;
	КонецЕсли;
	
	ПрефиксРаздела = "";
	ПрефиксВторогоРаздела = "Оприходование";
	Если Найти(Элементы.Товары.ТекущийЭлемент.Имя, "Оприходование") > 0 Тогда
		ПрефиксРаздела = "Оприходование";
		ПрефиксВторогоРаздела = "";
	КонецЕсли;
	
	КоличествоУпаковок = 1;
	СтруктураПараметров.Свойство("Количество", КоличествоУпаковок);
	
	ОбновитьКоличество = Ложь;
	Если СтруктураПараметров.Свойство("ОбновитьКоличество") Тогда
		ОбновитьКоличество = Истина;
	КонецЕсли;

	СтруктураПоиска = Новый Структура;
	
	СтруктураПоиска.Вставить("Номенклатура" + ПрефиксРаздела, СтруктураПараметров.Номенклатура);
	СтруктураПоиска.Вставить("Характеристика" + ПрефиксРаздела, СтруктураПараметров.Характеристика);
	МассивСтрок = Объект.Товары.НайтиСтроки(СтруктураПоиска);
	
	КоэффициентПересчета = 1;
	Если ЗначениеЗаполнено(СтруктураПараметров.Упаковка) Тогда
		КоэффициентПересчета = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтруктураПараметров.Упаковка, "Коэффициент");
	КонецЕсли;
	Если КоэффициентПересчета <= 0 Тогда
		КоэффициентПересчета = 1;
	КонецЕсли;
	
	ДобавлятьНовуюСтроку = Истина;
	Если МассивСтрок.Количество() > 0 Тогда 
		
		ТекущаяСтрока = МассивСтрок[0];
		ДобавлятьНовуюСтроку = Ложь;
	Иначе
		
		СтруктураПоиска.Вставить("Номенклатура" + ПрефиксВторогоРаздела, СтруктураПараметров.Номенклатура);
		СтруктураПоиска.Вставить("Характеристика" + ПрефиксВторогоРаздела, СтруктураПараметров.Характеристика);
		МассивСтрок = Объект.Товары.НайтиСтроки(СтруктураПоиска);
		Если МассивСтрок.Количество() > 0 Тогда 
			ТекущаяСтрока = МассивСтрок[0];
			ДобавлятьНовуюСтроку = Ложь;
		Иначе
			Если Объект.Товары.Количество() > 0 И Элементы.Товары.ТекущаяСтрока <> Неопределено Тогда
				ТекущаяСтрока = Объект.Товары.НайтиПоИдентификатору(Элементы.Товары.ТекущаяСтрока);
				Если ТекущаяСтрока <> Неопределено Тогда
					Если НЕ ЗначениеЗаполнено(ТекущаяСтрока["Номенклатура" + ПрефиксРаздела]) Тогда
						ДобавлятьНовуюСтроку = Ложь;
						ТекущаяСтрока["Номенклатура" + ПрефиксРаздела] = СтруктураПараметров.Номенклатура;
						ТекущаяСтрока["Характеристика" + ПрефиксРаздела] = СтруктураПараметров.Характеристика;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	СтруктураДействий = Новый Структура;
	Если ДобавлятьНовуюСтроку Тогда
		ТекущаяСтрока = Объект.Товары.Добавить();
		ТекущаяСтрока["Номенклатура" + ПрефиксРаздела] = СтруктураПараметров.Номенклатура;
		ТекущаяСтрока["Характеристика" + ПрефиксРаздела] = СтруктураПараметров.Характеристика;
		
		Если ПрефиксВторогоРаздела = "Оприходование" Тогда
			ТекущаяСтрока.Количество = КоличествоУпаковок * КоэффициентПересчета;
		КонецЕсли;
		
		СтруктураДействий.Вставить("ПроверитьХарактеристикуПоВладельцу", ТекущаяСтрока["Характеристика" + ПрефиксРаздела]);
	Иначе
		Если ПрефиксВторогоРаздела = "Оприходование" Тогда
			Если ОбновитьКоличество Тогда
				ТекущаяСтрока.Количество = КоличествоУпаковок * КоэффициентПересчета;
			Иначе
				ТекущаяСтрока.Количество = ТекущаяСтрока.Количество + КоличествоУпаковок * КоэффициентПересчета;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	КэшированныеЗначения = ОбработкаТабличнойЧастиТоварыКлиентСервер.СтруктураКэшируемыхЗначений();
	ОбработкаТабличнойЧастиТоварыСервер.ОбработатьСтрокуТЧСервер(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ЗаполнитьКлючСвязи(Объект.Товары, ТекущаяСтрока, "КлючСвязи");
	
	ИдентификаторСтроки = ТекущаяСтрока.ПолучитьИдентификатор();
	
	Если Не ДополнительныеПараметры = Неопределено Тогда 
		СтруктураПараметров = ИдентификаторСтроки;
		Возврат СтруктураПараметров;
	Иначе 
		Возврат ИдентификаторСтроки;
	КонецЕсли;
КонецФункции

#КонецОбласти

&НаКлиенте
Процедура ОповещениеПоискаПоНаименованию(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено Тогда
		ПродолжитьОбработатьДанныеПоКодуКлиент(Результат);
		ЗавершитьОбработкуДанныхПоКодуКлиент(Результат);
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	
	ДополнительныеКолонкиНоменклатуры =
		ЗначениеНастроекПовтИсп.ПолучитьЗначениеКонстанты("ДополнительнаяКолонкаПриОтображенииНоменклатуры");
	
	ОбщегоНазначенияРТ.ЗаполнитьШапкуДокумента(
		Объект,
		КартинкаСостоянияДокумента,
		Элементы.КартинкаСостоянияДокумента.Подсказка,
		РазрешеноПроведение);
	
	Если Параметры.ЗначенияЗаполнения.Свойство("АдресТаблицыТовары") Тогда
		ТаблицаТоваров = ПолучитьИзВременногоХранилища(Параметры.ЗначенияЗаполнения.АдресТаблицыТовары);
		Объект.Товары.Загрузить(ТаблицаТоваров);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьПризнакИспользованияХарактеристик(Объект.Товары);
		ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьПризнакИспользованияХарактеристик(
			Объект.Товары,
			Новый Структура("СуффиксДопРеквизита", "Оприходование"));
	КонецЕсли;
	
	ПодключаемоеОборудованиеРТ.НастроитьПодключаемоеОборудование(ЭтотОбъект);
	
	УправлениеЭлементамиФормыНаСервере();
	НастроитьФормуПоДополнительнымПравам();
	
	Элементы.Склад.ТолькоПросмотр = НЕ ЗначениеЗаполнено(Объект.Магазин);
	
	ОбщегоНазначенияРТКлиентСервер.УстановитьКартинкуДляКомментария(Элементы.СтраницаКомментарий, Объект.Комментарий);
	
	СобытияФормРТ.ПриСозданииНаСервере(ЭтотОбъект, Отказ, СтандартнаяОбработка);
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)

	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьПризнакИспользованияХарактеристик(Объект.Товары);
	ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьПризнакИспользованияХарактеристик(
		Объект.Товары,
		Новый Структура("СуффиксДопРеквизита", "Оприходование"));
	
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	ОбщегоНазначенияРТКлиентСервер.ОбновитьСостояниеДокумента(
		Объект,
		Элементы.КартинкаСостоянияДокумента.Подсказка,
		КартинкаСостоянияДокумента,
		РазрешеноПроведение);
	
	СобытияФормРТ.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)

	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьПризнакИспользованияХарактеристик(Объект.Товары);
	ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьПризнакИспользованияХарактеристик(
		Объект.Товары,
		Новый Структура("СуффиксДопРеквизита", "Оприходование"));
	
	СобытияФормРТ.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	ОбщегоНазначенияРТКлиентСервер.ОбновитьСостояниеДокумента(
		Объект,
		Элементы.КартинкаСостоянияДокумента.Подсказка,
		КартинкаСостоянияДокумента,
		РазрешеноПроведение);
	
	СобытияФормРТКлиент.ПослеЗаписи(ЭтотОбъект, ПараметрыЗаписи);
	
	// &ЗамерПроизводительности
	ОценкаПроизводительностиРТКлиент.ЗакончитьЗамер(ПараметрыЗаписи.Замер);
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// ПодключаемоеОборудование
	МенеджерОборудованияКлиент.НачатьПодключениеОборудованиеПриОткрытииФормы(
		Неопределено,
		ЭтотОбъект,
		"СканерШтрихкода, СчитывательМагнитныхКарт");
	// Конец ПодключаемоеОборудование
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	// ПодключаемоеОборудование
	МенеджерОборудованияКлиент.НачатьОтключениеОборудованиеПриЗакрытииФормы(Неопределено, ЭтотОбъект);
	// Конец ПодключаемоеОборудование
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	СобытияФормРТКлиент.ОбработкаОповещения(ЭтотОбъект, ИмяСобытия, Параметр, Источник);
КонецПроцедуры

&НаКлиенте
Процедура ВнешнееСобытие(Источник, Событие, Данные)
	
	Если ВводДоступен() Тогда
		ПодключаемоеОборудованиеРТКлиент.ВнешнееСобытиеОборудования(ЭтотОбъект, Источник, Событие, Данные);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	// &ЗамерПроизводительности
	Замер = ОценкаПроизводительностиРТКлиент.НачатьЗамер(
		Ложь,
		"Документ.ПересортицаТоваров.ФормаДокумента.Запись",
		Ложь);
	
	ПараметрыЗаписи.Вставить("Замер", Замер);
	
	СобытияФормРТКлиент.ПередЗаписью(ЭтотОбъект, Отказ, ПараметрыЗаписи);
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаНавигационнойСсылки(НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СобытияФормРТКлиент.ОбработкаНавигационнойСсылки(
		ЭтотОбъект,
		НавигационнаяСсылкаФорматированнойСтроки,
		СтандартнаяОбработка);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура СкладПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.Склад) И НЕ ЗначениеЗаполнено(Объект.Организация) Тогда
		ПриИзмененииСклада();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура МагазинПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.Магазин) Тогда
		ПриИзмененииМагазина();
	КонецЕсли;
	
	УстановитьДоступностьЭлементов();
КонецПроцедуры

&НаКлиенте
Процедура КомментарийПриИзменении(Элемент)
	
	ПодключитьОбработчикОжидания("Подключаемый_УстановитьКартинкуДляКомментария", 0.5, Истина);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_УстановитьКартинкуДляКомментария()
	
	ОбщегоНазначенияРТКлиентСервер.УстановитьКартинкуДляКомментария(Элементы.СтраницаКомментарий, Объект.Комментарий);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТабличнойЧастиТовары

&НаКлиенте
Процедура ТоварыПередУдалением(Элемент, Отказ)
	
	УдаляемыйКлючСвязи = Элементы.Товары.ТекущиеДанные.КлючСвязи;
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	Если Копирование Тогда
		
		ТекущаяСтрока.КлючСвязи = 0;
	КонецЕсли;
	
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ЗаполнитьКлючСвязи(Объект.Товары, ТекущаяСтрока, "КлючСвязи");
КонецПроцедуры

&НаКлиенте
Процедура ТоварыНоменклатураСписаниеПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПроверитьХарактеристикуПоВладельцу", ТекущаяСтрока.Характеристика);
	СтруктураДействий.Вставить("ОбнулитьЦену");
	Если ЗначениеЗаполнено(ТекущаяСтрока.Номенклатура) Тогда 
		СтруктураДействий.Вставить("ПересчитатьКоличество");
	КонецЕсли;
	
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ЗаполнитьКлючСвязи(Объект.Товары, ТекущаяСтрока, "КлючСвязи");
	ОбработкаТабличнойЧастиТоварыКлиент.ПриИзмененииРеквизитовВТЧКлиент(
		Объект.Товары,
		ТекущаяСтрока,
		СтруктураДействий,
		КэшированныеЗначения);
КонецПроцедуры

&НаКлиенте
Процедура ТоварыНоменклатураОприходованиеПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
	ТекущаяСтрока = Новый Структура;
	ТекущаяСтрока.Вставить("Номенклатура", ТекущиеДанные.НоменклатураОприходование);
	ТекущаяСтрока.Вставить("Характеристика", ТекущиеДанные.ХарактеристикаОприходование);
	ТекущаяСтрока.Вставить("ХарактеристикиИспользуются", ТекущиеДанные.ХарактеристикиИспользуютсяОприходование);
	ТекущаяСтрока.Вставить("Цена", ТекущиеДанные.Цена);
	ТекущаяСтрока.Вставить("Упаковка", ПредопределенноеЗначение("Справочник.УпаковкиНоменклатуры.ПустаяСсылка"));
	ТекущаяСтрока.Вставить("Количество", ТекущиеДанные.Количество);
	ТекущаяСтрока.Вставить("КлючСвязи", ТекущиеДанные.КлючСвязи);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПроверитьХарактеристикуПоВладельцу", ТекущиеДанные.ХарактеристикаОприходование);
	СтруктураДействий.Вставить("ОбнулитьЦену");
	
	Если ЗначениеЗаполнено(ТекущаяСтрока.Номенклатура) Тогда 
		СтруктураДействий.Вставить("ПересчитатьКоличество");
	КонецЕсли;
	
	ОбработкаТабличнойЧастиТоварыКлиент.ПриИзмененииРеквизитовВТЧКлиент(
		Объект.Товары,
		ТекущаяСтрока,
		СтруктураДействий,
		КэшированныеЗначения);
	
	ТекущиеДанные.ХарактеристикаОприходование = ТекущаяСтрока.Характеристика;
	ТекущиеДанные.ХарактеристикиИспользуютсяОприходование = ТекущаяСтрока.ХарактеристикиИспользуются;
	ТекущиеДанные.ЦенаОприходование = ТекущаяСтрока.Цена;
	ТекущиеДанные.Количество = ТекущаяСтрока.Количество;
	
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ЗаполнитьКлючСвязи(Объект.Товары, ТекущаяСтрока, "КлючСвязи");
КонецПроцедуры

&НаКлиенте
Процедура ТоварыКоличествоПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	Если ЗначениеЗаполнено(ТекущаяСтрока.Номенклатура) И ЗначениеЗаполнено(ТекущаяСтрока.НоменклатураОприходование) Тогда 
		РазрешенВводДробногоКоличества = ОбработкаТабличнойЧастиТоварыВызовСервера.ВводДробногоКоличества();
		Если РазрешенВводДробногоКоличества И ТекущаяСтрока <> Неопределено Тогда 
			МассивСсылок = Новый Массив;
			МассивСсылок.Добавить(ТекущаяСтрока.Номенклатура);
			МассивСсылок.Добавить(ТекущаяСтрока.НоменклатураОприходование);
			Если ПроверятьНаДробноеКоличество(МассивСсылок) Тогда 
				ДробнаяЧасть = ТекущаяСтрока.Количество - Цел(ТекущаяСтрока.Количество);
				Если ДробнаяЧасть > 0 Тогда 
					ТекущаяСтрока.Количество = 0;
					ТекстСообщения = НСтр("ru = 'Для номенклатуры не допустим ввод дробного количества.'");
					ПоказатьПредупреждение(, ТекстСообщения);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ТоварыХарактеристикаСписаниеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОбработкаТабличнойЧастиТоварыКлиент.ВыбратьХарактеристикуНоменклатуры(
		ЭтаФорма,
		Элемент,
		СтандартнаяОбработка,
		Элементы.Товары.ТекущиеДанные);
КонецПроцедуры

&НаКлиенте
Процедура ТоварыХарактеристикаСписаниеСоздание(Элемент, СтандартнаяОбработка)
	
	ОбработкаТабличнойЧастиТоварыКлиент.СоздатьХарактеристикуНоменклатуры(
		ЭтотОбъект,
		Элемент,
		СтандартнаяОбработка,
		Элементы.Товары.ТекущиеДанные);
КонецПроцедуры

&НаКлиенте
Процедура ТоварыХарактеристикаОприходованиеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
	ТекущаяСтрока = Новый Структура;
	ТекущаяСтрока.Вставить("Номенклатура", ТекущиеДанные.НоменклатураОприходование);
	ТекущаяСтрока.Вставить("Характеристика", ТекущиеДанные.ХарактеристикаОприходование);
	ТекущаяСтрока.Вставить("ХарактеристикиИспользуются", ТекущиеДанные.ХарактеристикиИспользуютсяОприходование);
	
	ОбработкаТабличнойЧастиТоварыКлиент.ВыбратьХарактеристикуНоменклатуры(
		ЭтаФорма,
		Элемент,
		СтандартнаяОбработка,
		ТекущаяСтрока);
	
	ТекущиеДанные.ХарактеристикаОприходование = ТекущаяСтрока.Характеристика;
КонецПроцедуры

&НаКлиенте
Процедура ТоварыХарактеристикаОприходованиеСоздание(Элемент, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
	ТекущаяСтрока = Новый Структура;
	ТекущаяСтрока.Вставить("ИдентификаторТекущейСтроки", ТекущиеДанные.ПолучитьИдентификатор());
	ТекущаяСтрока.Вставить("Номенклатура", ТекущиеДанные.НоменклатураОприходование);
	ТекущаяСтрока.Вставить("Характеристика", ТекущиеДанные.ХарактеристикаОприходование);
	ТекущаяСтрока.Вставить("ХарактеристикиИспользуются", ТекущиеДанные.ХарактеристикиИспользуютсяОприходование);
	
	ОбработкаТабличнойЧастиТоварыКлиент.СоздатьХарактеристикуНоменклатуры(
		ЭтотОбъект,
		Элемент,
		СтандартнаяОбработка,
		Элементы.Товары.ТекущиеДанные,
		,
		"ХарактеристикаОприходование");
КонецПроцедуры


&НаКлиенте
Процедура ТоварыНоменклатураСписаниеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОбработатьНачалоВыбораНоменклатуры(Элемент, ДанныеВыбора, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура ТоварыНоменклатураОприходованиеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОбработатьНачалоВыбораНоменклатуры(Элемент, ДанныеВыбора, СтандартнаяОбработка);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

#Область ОбработчикиКомандПодключаемогоОборудования

&НаКлиенте
Процедура ВыгрузитьДанныеВТСД(Команда)
	
	ДополнительныеПараметры = Новый Структура;
	ПрефиксРаздела = "";
	Если Найти(Элементы.Товары.ТекущийЭлемент.Имя, "Оприходование") > 0 Тогда
		ПрефиксРаздела = "Оприходование";
	КонецЕсли;
	ДополнительныеПараметры.Вставить("ПрефиксРаздела", ПрефиксРаздела);
	ПодключаемоеОборудованиеРТКлиент.ВыгрузитьДокументВТСД(ЭтотОбъект, Истина, ДополнительныеПараметры);
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьДанныеИзТСД(Команда)
	
	ПодключаемоеОборудованиеРТКлиент.ПолучитьДанныеИзТСД(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ПоискПоМагнитномуКоду(Команда)
	
	ОбработкаТабличнойЧастиТоварыКлиент.ВвестиМагнитныйКод(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ПоискПоШтрихкоду(Команда)
	
	ОбработкаТабличнойЧастиТоварыКлиент.ВвестиШтрихкод(ЭтотОбъект);
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура ПоискПоНаименованию(Команда)
	
	ПараметрыПоиска = Новый Структура;
	ПараметрыПоиска.Вставить("Магазин",Объект.Магазин);
	РаботаСПравиламиИменованияКлиент.ПоискПоНаименованию(ЭтаФорма,ПараметрыПоиска);
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьЦеныПоРозничнымЦенам(Команда)
	
	Если Объект.Товары.Количество() = 0 Тогда
		
		ТекстПредупреждения = НСтр("ru='В документе не заполнена таблица %ПредставлениеТабличнойЧасти%.
			|Цены не могут быть заполнены'");
		ТекстПредупреждения = СтрЗаменить(ТекстПредупреждения, "%ПредставлениеТабличнойЧасти%", "Товары");
		ПоказатьПредупреждение(, ТекстПредупреждения);
		
		Возврат;
	Иначе
		Если ЗначениеЗаполнено(Объект.Магазин) Тогда
			ЦеныРассчитаны = ЗаполнитьЦеныПоРозничнымЦенамСервер();
			ЗапасыКлиент.ОповеститьОбОкончанииЗаполненияЦенПоРозничнымЦенам(ЦеныРассчитаны, Объект.Магазин);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьЦеныПоВидуЦен(Команда)
	
	Если Объект.Товары.Количество() = 0 Тогда
		
		ТекстПредупреждения = НСтр("ru='В документе не заполнена таблица %ПредставлениеТабличнойЧасти%.
			|Цены не могут быть заполнены'");
		ТекстПредупреждения = СтрЗаменить(ТекстПредупреждения, "%ПредставлениеТабличнойЧасти%", "Товары");
		ПоказатьПредупреждение(,ТекстПредупреждения);
		
		Возврат;
	Иначе
		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("МножественныйВыбор", Ложь);
		
		Обработчик = Новый ОписаниеОповещения("ОбработчикЗаполнитьЦеныПоВидуЦен", ЭтотОбъект);
		Режим = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
		ОткрытьФорму("Справочник.ВидыЦен.Форма.ФормаВыбора", СтруктураПараметров, ЭтаФорма,,,, Обработчик, Режим);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоСебестоимости(Команда)
	
	ЦеныРассчитаны = ЗаполнитьЦеныПоСебестоимостиСервер();
	ЗапасыКлиент.ОповеститьОбОкончанииЗаполненияЦенПоСебестоимости(ЦеныРассчитаны);
КонецПроцедуры

&НаКлиенте
Процедура РазвернутьСвернутьТЧ(Команда)
	
	РазвернутьСвернутьТЧНаСервере();
КонецПроцедуры


// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат) Экспорт
	
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВыполнитьПереопределяемуюКоманду(Команда)
	
	СобытияФормРТКлиент.ВыполнитьПереопределяемуюКоманду(ЭтаФорма, Команда);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура ОповещениеПоискаПоШтрихкоду(Штрихкод, ДополнительныеПараметры) Экспорт
	
	Если НЕ ПустаяСтрока(Штрихкод) Тогда
		СтруктураПараметровКлиента = ПолученШтрихкодИзСШК(Штрихкод);
		ОбработатьДанныеПоКодуКлиент(СтруктураПараметровКлиента);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеПоискаПоМагнитномуКоду(ТекКод, ДополнительныеПараметры) Экспорт
	
	Если НЕ ПустаяСтрока(ТекКод) Тогда
		СтруктураПараметровКлиента = ПолученМагнитныйКод(ТекКод);
		ОбработатьДанныеПоКодуКлиент(СтруктураПараметровКлиента);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьСозданиеИВыборНовойХарактеристики(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущаяСтрока = Объект.Товары.НайтиПоИдентификатору(ДополнительныеПараметры.ИдентификаторТекущейСтроки);
	ТекущаяСтрока[ДополнительныеПараметры.ИмяРеквизита] = Результат;
КонецПроцедуры

&НаКлиенте
Процедура ОбработчикЗаполнитьЦеныПоВидуЦен(ВидЦены, ДополнительныеПараметры) Экспорт
	
	Если ЗначениеЗаполнено(ВидЦены) Тогда
		ЦеныРассчитаны = ЗаполнитьЦеныПоВидуЦенСервер(ВидЦены);
		ЗапасыКлиент.ОповеститьОбОкончанииЗаполненияЦенПоВидуЦен(ЦеныРассчитаны, ВидЦены);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура РазвернутьСвернутьТЧНаСервере()
	
	РазвернутаТЧ = НЕ РазвернутаТЧ;
	
	ВидимостьЭлементов = НЕ РазвернутаТЧ;
	
	ЭтаФорма.ПоложениеКоманднойПанели =
		?(ВидимостьЭлементов, ПоложениеКоманднойПанелиФормы.Авто, ПоложениеКоманднойПанелиФормы.Нет);
	Элементы.ГруппаОснование.Видимость = ВидимостьЭлементов;
	Элементы.Шапка.Видимость = ВидимостьЭлементов;
	Элементы.СтраницаКомментарий.Видимость = ВидимостьЭлементов;
	Элементы.ГруппаОтветственный.Видимость = ВидимостьЭлементов;
	
	Элементы.РазвернутьСвернутьТЧ.Картинка =
		?(ВидимостьЭлементов, БиблиотекаКартинок.РазвернутьТабличнуюЧасть, БиблиотекаКартинок.СвернутьТабличнуюЧасть);
КонецПроцедуры

&НаСервере
Процедура УправлениеЭлементамиФормыНаСервере()
	
	Если ЗначениеЗаполнено(Объект.ДокументОснование) Тогда
		
		Элементы.Магазин.ТолькоПросмотр = ЗначениеЗаполнено(Объект.Магазин);
		Элементы.Склад.ТолькоПросмотр = ЗначениеЗаполнено(Объект.Склад);
		Элементы.Организация.ТолькоПросмотр = ЗначениеЗаполнено(Объект.Организация);
	Иначе
		
		Элементы.ДокументОснование.Видимость = Ложь;
		Элементы.Магазин.ТолькоПросмотр = Ложь;
		Элементы.Склад.ТолькоПросмотр = Ложь;
		Элементы.Организация.ТолькоПросмотр = Ложь;
	КонецЕсли;
	
	Если Объект.Магазин.СкладУправляющейСистемы ИЛИ НЕ ЗначениеЗаполнено(Объект.Магазин) Тогда
		Элементы.Склад.ТолькоПросмотр = Истина;
	КонецЕсли;
КонецПроцедуры

// Процедура заполняет организацию при изменении склада.
//
&НаСервере
Процедура ПриИзмененииСклада()
	
	Если НЕ ЗначениеЗаполнено(Объект.Организация) Тогда
		Объект.Организация = Объект.Склад.Организация;
	КонецЕсли;
КонецПроцедуры

// Процедура заполняет склад при изменении магазина.
//
&НаСервере
Процедура ПриИзмененииМагазина()
	
	Объект.Склад = ЗначениеНастроекПовтИсп.СкладПоступленияПоУмолчанию(
		Объект.Магазин,
		,
		Объект.Склад,
		Пользователи.ТекущийПользователь());
	Если ЗначениеЗаполнено(Объект.Склад) Тогда
		ПриИзмененииСклада();
	КонецЕсли;
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПроверятьНаДробноеКоличество(МассивСсылок)
	
	РеквизитыОбъектов = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(МассивСсылок, "РазрешитьВводДробногоКоличества");
	
	Возврат НЕ (РеквизитыОбъектов[МассивСсылок[0]].РазрешитьВводДробногоКоличества
		И РеквизитыОбъектов[МассивСсылок[1]].РазрешитьВводДробногоКоличества);
КонецФункции

&НаСервере
Процедура НастроитьФормуПоДополнительнымПравам()
	
	УправлениеПользователями.УстановитьТолькоПросмотрДляРеквизитовТабличнойЧасти(
		Элементы.ТоварыЦена.ТолькоПросмотр,
		ПланыВидовХарактеристик.ПраваПользователей.ИзменятьЦену);
	
	УправлениеПользователями.УстановитьТолькоПросмотрДляРеквизитовТабличнойЧасти(
		Элементы.Дата.ТолькоПросмотр,
		ПланыВидовХарактеристик.ПраваПользователей.ИзменятьДату);
КонецПроцедуры

&НаКлиенте
Процедура УстановитьДоступностьЭлементов()
	
	Элементы.Склад.ТолькоПросмотр = НЕ ЗначениеЗаполнено(Объект.Магазин);
КонецПроцедуры

&НаСервере
Функция ЗаполнитьЦеныПоРозничнымЦенамСервер()
	
	ЦеныРассчитаны = ЗапасыСервер.ЗаполнитьЦеныВыделенныхСтрокПоРозничнымЦенамПересортица(
		Объект,
		"Товары",
		Элементы.Товары.ВыделенныеСтроки,
		Объект.Магазин,
		ЗапасыСервер.ДатаДляЦенообразованияДляДокумента(Объект));
	
	Возврат ЦеныРассчитаны;
КонецФункции

&НаСервере
Функция ЗаполнитьЦеныПоВидуЦенСервер(ВидЦены)
	
	ЦеныРассчитаны = ЗапасыСервер.ЗаполнитьЦеныВыделенныхСтрокПоВидуЦенПересортица(
		Объект,
		"Товары",
		Элементы.Товары.ВыделенныеСтроки,
		ВидЦены,
		ЗапасыСервер.ДатаДляЦенообразованияДляДокумента(Объект));
		
	Возврат ЦеныРассчитаны;
КонецФункции

&НаСервере
Функция ЗаполнитьЦеныПоСебестоимостиСервер()
	
	ЦеныРассчитаны = ЗапасыСервер.ЗаполнитьЦеныВыделенныхСтрокПоСебестоимостиПересортица(
		Объект,
		"Товары", 
		Элементы.Товары.ВыделенныеСтроки,
		ЗапасыСервер.ДатаДляЦенообразованияДляДокумента(Объект));
	
	Возврат ЦеныРассчитаны;
КонецФункции

&НаКлиенте
Процедура ОбработатьНачалоВыбораНоменклатуры(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	// &ЗамерПроизводительности
	ОценкаПроизводительностиРТКлиент.НачатьЗамер(
		Истина,
		"Справочник.Номенклатура.Форма.ФормаВыбора.Открытие");

	СтандартнаяОбработка = Ложь;
	СтруктураПараметрыОтбора = Новый Структура;
	СтруктураПараметрыОтбора.Вставить("ИспользоватьСерийныеНомера", Ложь);
	
	МассивТиповНоменклатуры = Новый Массив;
	МассивТиповНоменклатуры.Добавить(ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Товар"));
	МассивТиповНоменклатуры.Добавить(ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.ПодарочныйСертификат"));
	
	СтруктураПараметрыОтбора.Вставить("МассивТиповНоменклатуры", Новый ФиксированныйМассив(МассивТиповНоменклатуры));
	
	СтруктураПараметры = Новый Структура("СтруктураПараметрыОтбора", СтруктураПараметрыОтбора);
	СтруктураПараметры.Вставить("РежимВыбора", Истина);
	
	ОткрытьФорму("Справочник.Номенклатура.ФормаВыбора", СтруктураПараметры, Элемент);
КонецПроцедуры

&НаКлиенте
Процедура ЗавершитьОбработкуДанныхПоКодуКлиент(СтруктураПараметровКлиента)
	
	ИдентификаторСтроки =
		ПодключаемоеОборудованиеРТКлиент.ЗавершитьОбработкуДанныхПоКодуКлиент(ЭтотОбъект, СтруктураПараметровКлиента);
КонецПроцедуры

#КонецОбласти
