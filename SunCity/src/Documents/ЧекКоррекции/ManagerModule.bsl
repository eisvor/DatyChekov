#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Возвращает структуру (ОбщиеПараметры) для фискализации чека коррекции
//
// Параметры:
//  ЧекКоррекции			 - 	 ДокументСсылка.ЧекКоррекции - документ для фискализации.
//  ИдентификаторУстройства	 - 	 Неопределено - заполняется в теле функции 
// 
// Возвращаемое значение:
//   Структура, Неопределено - ОбщиеПараметры см. МенеджерОборудованияКлиентСервер.ПараметрыОперацииЧекаКоррекции(),
//   Неопределено в случае ошибки
//
Функция ПодготовитьДанныеДляПробитияЧека(ЧекКоррекции, ИдентификаторУстройства) Экспорт
	
	// Общие параметры чека
	СтруктураРеквизитов = Новый Структура;
	СтруктураРеквизитов.Вставить("КассаККМ");
	СтруктураРеквизитов.Вставить("Магазин");
	СтруктураРеквизитов.Вставить("Организация");
	СтруктураРеквизитов.Вставить("Покупатель");
	СтруктураРеквизитов.Вставить("Дата");
	СтруктураРеквизитов.Вставить("Ответственный");
	СтруктураРеквизитов.Вставить("АдресМагазина");
	СтруктураРеквизитов.Вставить("АдресРасчетов");
	СтруктураРеквизитов.Вставить("МестоРасчетов"); 
	СтруктураРеквизитов.Вставить("СистемаНалогообложения");
	СтруктураРеквизитов.Вставить("ТипРасчета");
	СтруктураРеквизитов.Вставить("ТипКоррекции");
	СтруктураРеквизитов.Вставить("ОписаниеКоррекции");
	СтруктураРеквизитов.Вставить("ДатаКоррекции");
	СтруктураРеквизитов.Вставить("НомерПредписания");
	СтруктураРеквизитов.Вставить("НеприменениеККТ");
	СтруктураРеквизитов.Вставить("ДокументОснование");
	СтруктураРеквизитов.Вставить("ПробитЧек");
	СтруктураРеквизитов.Вставить("Кассир");
	СтруктураРеквизитов.Вставить("КассирИНН");
	СтруктураРеквизитов.Вставить("Магазин");
	СтруктураРеквизитов.Вставить("ДополнительныйРеквизит");
	
	РеквизитыДокумента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ЧекКоррекции, СтруктураРеквизитов);
	
	Если РеквизитыДокумента.ПробитЧек Тогда
		ТекстСообщения = НСтр("ru = '%1 уже пробит'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, ЧекКоррекции);
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
		Возврат Неопределено;
	КонецЕсли;
	
	ОбщиеПараметры = МенеджерОборудованияКлиентСервер.ПараметрыОперацииЧекаКоррекции();
	
	ЗаполнитьЗначенияСвойств(ОбщиеПараметры, РеквизитыДокумента);
	
	ОбщиеПараметры.ТорговыйОбъект = РеквизитыДокумента.Магазин;
	
	ПараметрыКассыККМ			= ЗначениеНастроекВызовСервера.ПараметрыКассыККМ(РеквизитыДокумента.КассаККМ);
	ИдентификаторУстройства 	= ПараметрыКассыККМ.ИдентификаторУстройства;
	
	СтруктураРеквизитов = Новый Структура;
	СтруктураРеквизитов.Вставить("Наименование");
	СтруктураРеквизитов.Вставить("НаименованиеПолное");
	СтруктураРеквизитов.Вставить("ИНН");
	СтруктураРеквизитов.Вставить("КПП");
	РеквизитыОрганизация = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(РеквизитыДокумента.Организация, СтруктураРеквизитов);
	
	СтруктураРеквизитов = Новый Структура;
	СтруктураРеквизитов.Вставить("ЭлектронныйЧекSMSПередаютсяПрограммой1С");
	СтруктураРеквизитов.Вставить("ЭлектронныйЧекEmailПередаютсяПрограммой1С");
	СтруктураРеквизитов.Вставить("ПодключаемоеОборудование");
	СтруктураРеквизитов.Вставить("СпособФорматноЛогическогоКонтроля", "ПодключаемоеОборудование.СпособФорматноЛогическогоКонтроля");
	СтруктураРеквизитов.Вставить("ДопустимоеРасхождениеФорматноЛогическогоКонтроля", "ПодключаемоеОборудование.ДопустимоеРасхождениеФорматноЛогическогоКонтроля");
	СтруктураРеквизитов.Вставить("ТипОборудования", "ПодключаемоеОборудование.ТипОборудования");
	СтруктураРеквизитов.Вставить("Код");
	РеквизитыКассыККМ = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(РеквизитыДокумента.КассаККМ, СтруктураРеквизитов);
	
	ОбщиеПараметры.Кассир          = РеквизитыДокумента.Кассир;
	ОбщиеПараметры.КассирИНН       = РеквизитыДокумента.КассирИНН;
	
	ОбщиеПараметры.Организация    = РеквизитыДокумента.Организация;
	ОбщиеПараметры.ОрганизацияНазвание = ?(ПустаяСтрока(РеквизитыОрганизация.НаименованиеПолное), РеквизитыОрганизация.Наименование, РеквизитыОрганизация.НаименованиеПолное);
	ОбщиеПараметры.ОрганизацияИНН = РеквизитыОрганизация.ИНН;
	ОбщиеПараметры.ОрганизацияКПП = РеквизитыОрганизация.КПП;
	
	СерийныйНомер = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(РеквизитыКассыККМ.ПодключаемоеОборудование, "СерийныйНомер");
	Если НЕ ЗначениеЗаполнено(СерийныйНомер) Тогда
		СерийныйНомер = "1";
	КонецЕсли;
	
	ОбщиеПараметры.НаименованиеМагазина = Строка(РеквизитыДокумента.Магазин);
	ОбщиеПараметры.СерийныйНомер = СерийныйНомер;
	
	ОбщиеПараметры.ДокументОснование = ЧекКоррекции;
	
	Для Каждого ПозицияЧека Из ЧекКоррекции.ПозицииЧека Цикл
		
		СтрокаПозицииЧека = МенеджерОборудованияКлиентСервер.ПараметрыФискальнойСтрокиЧека();
		
		ЗаполнитьЗначенияСвойств(СтрокаПозицииЧека, ПозицияЧека);
		ЗаполнитьЗначенияСвойств(СтрокаПозицииЧека.ДанныеКодаТоварнойНоменклатуры, ПозицияЧека);
		
		СтрокаПозицииЧека.ШтрихкодBase64 = Неопределено;
		
		ДанныеАгента = СтрокаПозицииЧека.ДанныеАгента;
		
		ОператорПеревода = ДанныеАгента.ОператорПеревода;
		ОператорПеревода.Адрес 			= ПозицияЧека.ОператорПереводаАдрес;
		ОператорПеревода.ИНН 			= ПозицияЧека.ОператорПереводаИНН;
		ОператорПеревода.Наименование 	= ПозицияЧека.ОператорПереводаНаименование;
		ОператорПеревода.Телефон 		= ПозицияЧека.ОператорПереводаТелефон;
		
		ДанныеАгента.ОператорПоПриемуПлатежей.Телефон = ПозицияЧека.ОператорПоПриемуПлатежейТелефон;
		
		ДанныеАгента.ПлатежныйАгент.Операция 	= ПозицияЧека.ПлатежныйАгентОперация;
		ДанныеАгента.ПлатежныйАгент.Телефон 	= ПозицияЧека.ПлатежныйАгентТелефон;
		
		ДанныеКодаТоварнойНоменклатуры = СтрокаПозицииЧека.ДанныеКодаТоварнойНоменклатуры;
		ЗаполнитьЗначенияСвойств(ДанныеКодаТоварнойНоменклатуры, ПозицияЧека);
		
		ДанныеПоставщика = СтрокаПозицииЧека.ДанныеПоставщика;
		ДанныеПоставщика.ИНН 			= ПозицияЧека.ДанныеПоставщикаИНН;
		ДанныеПоставщика.Наименование 	= ПозицияЧека.ДанныеПоставщикаНаименование;
		ДанныеПоставщика.Телефон 		= ПозицияЧека.ДанныеПоставщикаТелефон;
		
		СтрокаПозицииЧека.Наименование = Строка(ПозицияЧека.НаименованиеПредметаРасчета) + " " + Строка(ПозицияЧека.Характеристика) + " " + Строка(ПозицияЧека.Упаковка);
		
		СтрокаПозицииЧека.Сумма 	= ПозицияЧека.СуммаСоСкидками;    
		
		Если ЧекКоррекции.ПозицииЧека.ВыгрузитьКолонки("МераКоличества") <> Неопределено И Не ПустаяСтрока(ПозицияЧека.МераКоличества) Тогда
			ЕдиницаИзмерения = Справочники.БазовыеЕдиницыИзмерения.НайтиПоНаименованию(ПозицияЧека.МераКоличества);
			Если Не ЕдиницаИзмерения = Справочники.БазовыеЕдиницыИзмерения.ПустаяСсылка() Тогда
				СтрокаПозицииЧека.ЕдиницаИзмерения = Строка(ЕдиницаИзмерения.Код);
			КонецЕсли;
		Иначе
			Если Не ПустаяСтрока(ПозицияЧека.ЕдиницаИзмерения) Тогда
				ЕдиницаИзмерения = Справочники.БазовыеЕдиницыИзмерения.НайтиПоНаименованию(ПозицияЧека.ЕдиницаИзмерения);
				Если НЕ ЕдиницаИзмерения = Справочники.БазовыеЕдиницыИзмерения.ПустаяСсылка() Тогда
					СтрокаПозицииЧека.КодЕдиницыИзмерения = Строка(ЕдиницаИзмерения.Код);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		ЭтоАванс = ПозицияЧека.ПризнакСпособаРасчета = Перечисления.ПризнакиСпособаРасчета.Аванс
				ИЛИ ПозицияЧека.ПризнакСпособаРасчета = Перечисления.ПризнакиСпособаРасчета.ПредоплатаПолная
				ИЛИ ПозицияЧека.ПризнакСпособаРасчета = Перечисления.ПризнакиСпособаРасчета.ПредоплатаЧастичная;
		
		СтрокаПозицииЧека.СтавкаНДС = ПодключаемоеОборудованиеРТ.СтавкаНДСВФорматеБПО(ПозицияЧека.СтавкаНДС, ЭтоАванс);
		
		ОбщиеПараметры.ПозицииЧека.Добавить(СтрокаПозицииЧека);
		
	КонецЦикла;
	
	Если ЧекКоррекции.ЭтоСторно И ТипЗнч(ЧекКоррекции.ДокументОснование) = Тип("ДокументСсылка.ЧекККМ") Тогда
		ЗаполнитьОплатуПриПробитииЧекаККМНаККТ(ЧекКоррекции, ОбщиеПараметры);
	Иначе
		Для Каждого СтрокаОплаты Из ЧекКоррекции.Оплата Цикл
			
			СтруктураОплаты = МенеджерОборудованияКлиентСервер.ПараметрыСтрокиОплаты();
			ЗаполнитьЗначенияСвойств(СтруктураОплаты, СтрокаОплаты);
			ОбщиеПараметры.ТаблицаОплат.Добавить(СтруктураОплаты);
			
		КонецЦикла;
	КонецЕсли;
	
	Если РеквизитыДокумента.ТипКоррекции = 1 Тогда
		ТипКоррекции = 1;
	Иначе
		ТипКоррекции = 0;
	КонецЕсли;
	
	ОбщиеПараметры.ДанныеКоррекции.ТипКоррекции			= ТипКоррекции;
	ОбщиеПараметры.КорректируемыйДокумент				= РеквизитыДокумента.ДокументОснование;
	ОбщиеПараметры.ДанныеКоррекции.ТипКоррекции			= ТипКоррекции;
	ОбщиеПараметры.ДанныеКоррекции.ОписаниеКоррекции	= РеквизитыДокумента.ОписаниеКоррекции;
	ОбщиеПараметры.ДанныеКоррекции.ДатаКоррекции		= РеквизитыДокумента.ДатаКоррекции;
	ОбщиеПараметры.ДанныеКоррекции.НомерПредписания		= РеквизитыДокумента.НомерПредписания;
	ОбщиеПараметры.НеприменениеККТ 						= РеквизитыДокумента.НеприменениеККТ;
	
	ОбщиеПараметры.Вставить("СформироватьЧекКоррекции", Истина);
	ОбщиеПараметры.Вставить("СформироватьЧекКоррекцииСторно", Ложь);
	
	ОбщиеПараметры.СпособФорматноЛогическогоКонтроля 				= РеквизитыКассыККМ.СпособФорматноЛогическогоКонтроля;
	ОбщиеПараметры.ДопустимоеРасхождениеФорматноЛогическогоКонтроля = РеквизитыКассыККМ.ДопустимоеРасхождениеФорматноЛогическогоКонтроля;
	ОбщиеПараметры.ИндивидуальныйРежимПодготовкиДанныхКПередачеВОФД = Истина;
	
	ОписаниеОшибки = "";
	
	Если НЕ ФорматноЛогическийКонтрольВызовСервера.ВыполненаПроверкаОбязательностиИПравильностиЗаполненияТэгов(ОбщиеПараметры, ИдентификаторУстройства, ОписаниеОшибки) Тогда
		ТекстСообщения = НСтр("ru = 'Не удалось сформировать данные для печати чека.
									| %1'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, ОписаниеОшибки);
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
		
		Возврат Неопределено;
		
	КонецЕсли;
	
	Если ФорматноЛогическийКонтрольКлиентСервер.НуженФорматноЛогическийКонтроль(ОбщиеПараметры) Тогда
		ФорматноЛогическийКонтрольКлиентСервер.ПровестиФорматноЛогическийКонтроль(ОбщиеПараметры);
	КонецЕсли;
	
	Возврат ОбщиеПараметры;
	
КонецФункции

Процедура ЗаполнитьОплатуПриПробитииЧекаККМНаККТ(ДокументОбъект, ОбщиеПараметры)
	
	// Подготовка таблицы оплат
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЧекККМОплата.Сумма,
	|	ВЫРАЗИТЬ(ЧекККМОплата.ВидОплаты КАК Справочник.ВидыОплатЧекаККМ) КАК ВидОплаты
	|ПОМЕСТИТЬ ТаблицаВЗапросе
	|ИЗ
	|	&Оплата КАК ЧекККМОплата
	|ГДЕ
	|	НЕ ЧекККМОплата.ВидОплаты = ЗНАЧЕНИЕ(Справочник.ВидыОплатЧекаККМ.ПустаяСсылка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаВЗапросе.Сумма,
	|	ТаблицаВЗапросе.ВидОплаты.ТипОплаты КАК ТипОплаты
	|ПОМЕСТИТЬ ТаблицаСТипамиОплат
	|ИЗ
	|	ТаблицаВЗапросе КАК ТаблицаВЗапросе
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СУММА(ТаблицаСТипамиОплат.Сумма) КАК Сумма,
	|	ТаблицаСТипамиОплат.ТипОплаты
	|ИЗ
	|	ТаблицаСТипамиОплат КАК ТаблицаСТипамиОплат
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаСТипамиОплат.ТипОплаты
	|
	|ИМЕЮЩИЕ
	|	СУММА(ТаблицаСТипамиОплат.Сумма) >= 0";
	
	Запрос.УстановитьПараметр("Оплата", ДокументОбъект.Оплата.Выгрузить());
	
	Результат = Запрос.Выполнить();
	ТаблицаПоТипамОплат = Результат.Выгрузить();
	
	// Наличные
	СтрокаТаблицы = ТаблицаПоТипамОплат.Найти(Перечисления.ТипыОплатЧекаККМ.Наличные, "ТипОплаты");
	Если НЕ СтрокаТаблицы = Неопределено Тогда
		СтрокаОплаты = Новый Структура();
		СтрокаОплаты.Вставить("ТипОплаты", Перечисления.ТипыОплатыККТ.Наличные);
		СтрокаОплаты.Вставить("Наименование", НСтр("ru = 'Наличные'"));
		СтрокаОплаты.Вставить("Сумма", СтрокаТаблицы.Сумма);
		ОбщиеПараметры.ТаблицаОплат.Добавить(СтрокаОплаты);
	КонецЕсли;
	
	СуммаЭлектронно = 0;
	
	// Платежная карта
	СтрокаТаблицы = ТаблицаПоТипамОплат.Найти(Перечисления.ТипыОплатЧекаККМ.ПлатежнаяКарта, "ТипОплаты");
	Если НЕ СтрокаТаблицы = Неопределено Тогда
		СуммаЭлектронно = СтрокаТаблицы.Сумма;
	КонецЕсли;
	
	Если СуммаЭлектронно > 0 Тогда
		СтрокаОплаты = Новый Структура();
		СтрокаОплаты.Вставить("ТипОплаты", Перечисления.ТипыОплатыККТ.Электронно);
		СтрокаОплаты.Вставить("Наименование", НСтр("ru = 'Электронно'"));
		СтрокаОплаты.Вставить("Сумма", СуммаЭлектронно);
		ОбщиеПараметры.ТаблицаОплат.Добавить(СтрокаОплаты);
	КонецЕсли;
	
	СуммаЭлектронно = 0;
	
	// Платежная система
	СтрокаТаблицы = ТаблицаПоТипамОплат.Найти(Перечисления.ТипыОплатЧекаККМ.ПлатежнаяСистема, "ТипОплаты");
	Если НЕ СтрокаТаблицы = Неопределено Тогда
		СуммаЭлектронно = СтрокаТаблицы.Сумма;
	КонецЕсли;
	
	Если СуммаЭлектронно > 0 Тогда
		СтрокаОплаты = Новый Структура();
		СтрокаОплаты.Вставить("ТипОплаты", Перечисления.ТипыОплатыККТ.Электронно);
		СтрокаОплаты.Вставить("Наименование", НСтр("ru = 'Электронно'"));
		СтрокаОплаты.Вставить("Сумма", СуммаЭлектронно);
		ОбщиеПараметры.ТаблицаОплат.Добавить(СтрокаОплаты);
	КонецЕсли;
	
	СуммаЭлектронно = 0;
	
	// Банковский платеж
	СтрокаТаблицы = ТаблицаПоТипамОплат.Найти(Перечисления.ТипыОплатЧекаККМ.БанковскийПлатеж, "ТипОплаты");
	Если НЕ СтрокаТаблицы = Неопределено Тогда
		СуммаЭлектронно = СтрокаТаблицы.Сумма;
	КонецЕсли;
	
	Если СуммаЭлектронно > 0 Тогда
		СтрокаОплаты = Новый Структура();
		СтрокаОплаты.Вставить("ТипОплаты", Перечисления.ТипыОплатыККТ.Электронно);
		СтрокаОплаты.Вставить("Наименование", НСтр("ru = 'Электронно'"));
		СтрокаОплаты.Вставить("Сумма", СуммаЭлектронно);
		ОбщиеПараметры.ТаблицаОплат.Добавить(СтрокаОплаты);
	КонецЕсли;
	
	СуммаКредита = 0;
	
	// В рассрочку и кредитом
	СтрокаТаблицы = ТаблицаПоТипамОплат.Найти(Перечисления.ТипыОплатЧекаККМ.ВРассрочку, "ТипОплаты");
	Если НЕ СтрокаТаблицы = Неопределено Тогда
		СуммаКредита = СуммаКредита + СтрокаТаблицы.Сумма;
	КонецЕсли;
	
	// Банковский кредит
	СтрокаТаблицы = ТаблицаПоТипамОплат.Найти(Перечисления.ТипыОплатЧекаККМ.БанковскийКредит, "ТипОплаты");
	Если НЕ СтрокаТаблицы = Неопределено Тогда
		СуммаКредита = СуммаКредита + СтрокаТаблицы.Сумма;
	КонецЕсли;
	
	Если СуммаКредита > 0 Тогда
		СтрокаОплаты = Новый Структура();
		СтрокаОплаты.Вставить("ТипОплаты", Перечисления.ТипыОплатыККТ.Постоплата);
		СтрокаОплаты.Вставить("Наименование", НСтр("ru = 'Постоплата'"));
		СтрокаОплаты.Вставить("Сумма", СуммаКредита);
		ОбщиеПараметры.ТаблицаОплат.Добавить(СтрокаОплаты);
	КонецЕсли;
	
	ЗачетАванса = 0;
	
	// Подарочный сертификат
	СтрокаТаблицы = ТаблицаПоТипамОплат.Найти(Перечисления.ТипыОплатЧекаККМ.ПодарочныйСертификат, "ТипОплаты");
	Если НЕ СтрокаТаблицы = Неопределено Тогда
		ЗачетАванса = СтрокаТаблицы.Сумма;
	КонецЕсли;
	
	// Зачет аванс
	СтрокаТаблицы = ТаблицаПоТипамОплат.Найти(Перечисления.ТипыОплатЧекаККМ.ЗачетАванса, "ТипОплаты");
	Если НЕ СтрокаТаблицы = Неопределено Тогда
		ЗачетАванса = ЗачетАванса + СтрокаТаблицы.Сумма;
	КонецЕсли;
	
	Если ЗачетАванса > 0 Тогда
		СтрокаОплаты = Новый Структура();
		СтрокаОплаты.Вставить("ТипОплаты", Перечисления.ТипыОплатыККТ.Предоплата);
		СтрокаОплаты.Вставить("Наименование", НСтр("ru = 'Зачет аванс'"));
		СтрокаОплаты.Вставить("Сумма", ЗачетАванса);
		ОбщиеПараметры.ТаблицаОплат.Добавить(СтрокаОплаты);
	КонецЕсли;
	
	
КонецПроцедуры // ЗаполнитьОплатуПриПробитииЧекаККМНаККТ()

// СтандартныеПодсистемы.УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт

	Ограничение.Текст =
	"РазрешитьЧтениеИзменение
	|ГДЕ
	|	ЗначениеРазрешено(Магазин)";

КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

// Инициализирует таблицы значений, содержащие данные документа.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура ИнициализироватьДанныеДокумента(ДокументСсылка, ДополнительныеСвойства) Экспорт
	
	Перем СуммаБезналичных;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЧекКоррекции.Проведен КАК Проведен,
	|	ЧекКоррекции.ДокументОснование КАК ДокументОснование,
	|	ЧекКоррекции.ДокументРасчетов КАК ДокументРасчета,
	|	ЧекКоррекции.КассаККМ КАК КассаККМ,
	|	ЧекКоррекции.Кассир КАК Кассир,
	|	ЧекКоррекции.Магазин КАК Магазин,
	|	ЧекКоррекции.НеприменениеККТ КАК НеприменениеККТ,
	|	ЧекКоррекции.ЭтоСторно КАК ЭтоСторно,
	|	ЧекКоррекции.ТипРасчета КАК ТипРасчета,
	|	ЧекКоррекции.ПробитЧек КАК ПробитЧек,
	|	ЧекКоррекции.ЗаказПокупателя КАК ЗаказПокупателя,
	|	ЧекКоррекции.ДисконтнаяКарта КАК ДисконтнаяКарта,
	|	ЧекКоррекции.ВидОперации КАК ВидОперации,
	|	ЧекКоррекции.ОперацияСДенежнымиСредствами КАК ОперацияСДенежнымиСредствами,
	|	ЧекКоррекции.Дата КАК Период,
	|	ЧекКоррекции.ВыручкаНаличными КАК ВыручкаНаличными,
	|	ЧекКоррекции.Организация КАК Организация,
	|	ЧекКоррекции.Покупатель КАК Контрагент,
	|	ЧекКоррекции.ДокументРасчетов.Дата КАК ПериодРасчетов
	|ИЗ
	|	Документ.ЧекКоррекции КАК ЧекКоррекции
	|ГДЕ
	|	ЧекКоррекции.Ссылка = &Ссылка";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Реквизиты = РезультатЗапроса.Выбрать();
	Реквизиты.Следующий();
	
	ОбщегоНазначенияРТ.ПеренестиСтрокуВыборкиВПараметрыЗапроса(РезультатЗапроса, Реквизиты, Запрос);
	
	ОперацияСДенежнымиСредствами = Реквизиты.ОперацияСДенежнымиСредствами;
	
	ВозвратПослеЗакрытияСмены = Ложь;
	
	Если Реквизиты.ВидОперации = Перечисления.ВидыОперацийЧекККМ.Продажа Тогда
		ЭтоВозврат = Ложь;
		Запрос.УстановитьПараметр("ЭтоВозврат", ЭтоВозврат);
	Иначе
		ЭтоВозврат = Истина;
		Запрос.УстановитьПараметр("ЭтоВозврат", ЭтоВозврат);
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ФормироватьДвижения", НЕ ОбменДаннымиРТ.ЭтоПодчиненныйУзелПоРабочемуМесту());
	
	Запрос.УстановитьПараметр("Приход", ВидДвиженияНакопления.Приход);
	Запрос.УстановитьПараметр("Расход", ВидДвиженияНакопления.Расход);
	Запрос.УстановитьПараметр("ПустаяДата", Дата("00010101"));
	ПериодБонусов = НачалоДня(Реквизиты.Период);
	Запрос.УстановитьПараметр("ЗачетАванса", Перечисления.ТипыОплатыККТ.Предоплата);
	Запрос.УстановитьПараметр("ВРассрочку" , Перечисления.ТипыОплатыККТ.Постоплата);
	Запрос.УстановитьПараметр("ВидОплатыНаличные", Перечисления.ТипыОплатыККТ.Наличные);
	Если Не ЗначениеЗаполнено(Запрос.Параметры.ПериодРасчетов) Тогда
		Запрос.УстановитьПараметр("ПериодРасчетов", Запрос.Параметры.Период);
	КонецЕсли;
	
	ВыручкаНаличными = ?(Реквизиты.ВыручкаНаличными = 0, ПроведениеСервер.ВыручкаНаличными(ДокументСсылка), Реквизиты.ВыручкаНаличными);
	Запрос.УстановитьПараметр("ВыручкаНаличными", ВыручкаНаличными);
	
	ИспользоватьРасчетыСКлиентами = ПолучитьФункциональнуюОпцию("ИспользоватьРасчетыСКлиентами");
	Запрос.УстановитьПараметр("ИспользоватьРасчетыСКлиентами", ИспользоватьРасчетыСКлиентами);
	Запрос.УстановитьПараметр("КартаБонусов", Реквизиты.ДисконтнаяКарта);
	Запрос.УстановитьПараметр("ФормироватьДвиженияДенежныхСредств", Ложь);
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ЧекКоррекцииПозицииЧека.Ссылка КАК Ссылка,
	|	ЧекКоррекцииПозицииЧека.НомерСтроки КАК НомерСтроки,
	|	ЧекКоррекцииПозицииЧека.Характеристика КАК Характеристика,
	|	ЧекКоррекцииПозицииЧека.Упаковка КАК Упаковка,
	|	ЧекКоррекцииПозицииЧека.НаименованиеПредметаРасчета КАК Номенклатура,
	|	ЧекКоррекцииПозицииЧека.Количество КАК Количество,
	|	ЧекКоррекцииПозицииЧека.СтавкаНДС КАК СтавкаНДС,
	|	ЧекКоррекцииПозицииЧека.СуммаСоСкидками КАК СуммаСоСкидками,
	|	ЧекКоррекцииПозицииЧека.СуммаНДС КАК СуммаНДС,
	|	ЧекКоррекцииПозицииЧека.ЦенаСоСкидками КАК ЦенаСоСкидками,
	|	ЧекКоррекцииПозицииЧека.Склад КАК Склад
	|ПОМЕСТИТЬ ТаблицаТовары
	|ИЗ
	|	Документ.ЧекКоррекции.ПозицииЧека КАК ЧекКоррекцииПозицииЧека
	|ГДЕ
	|	ЧекКоррекцииПозицииЧека.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС10) КАК СтавкаНДС,
	|	10 КАК ПроцентСтавки
	|ПОМЕСТИТЬ СтавкиНДС
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС18),
	|	18
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС20),
	|	20
	|;
	|
//		ДенежныеСредстваККМ
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	&КассаККМ КАК КассаККМ,
	|	&Период КАК Период,
	|	&ВыручкаНаличными КАК Сумма,
	|	ВЫБОР
	|		КОГДА &ЭтоВозврат
	|			ТОГДА ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|		ИНАЧЕ ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|	КОНЕЦ КАК ВидДвижения
	|ГДЕ
	|	&ВыручкаНаличными <> 0 И &ФормироватьДвиженияДенежныхСредств
	|;
	|
// Продажи
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	&ПериодРасчетов КАК Период,
	|	&Магазин КАК Магазин,
	|	ТаблицаТовары.Номенклатура КАК Номенклатура,
	|	ТаблицаТовары.Характеристика КАК Характеристика,
	|	ТаблицаТовары.Склад КАК Склад,
	|	&Ссылка КАК ДокументПродажи,
	|	&ЗаказПокупателя КАК ЗаказПокупателя,
	|	ВЫБОР
	|		КОГДА &ЭтоВозврат
	|			ТОГДА -1
	|		ИНАЧЕ 1
	|	КОНЕЦ * ТаблицаТовары.Количество КАК Количество,
	|	ВЫБОР
	|		КОГДА &ЭтоВозврат
	|			ТОГДА -1
	|		ИНАЧЕ 1
	|	КОНЕЦ * ТаблицаТовары.СуммаСоСкидками КАК Стоимость,
	|	ВЫБОР
	|		КОГДА &ЭтоВозврат
	|			ТОГДА -1
	|		ИНАЧЕ 1
	|	КОНЕЦ * ТаблицаТовары.Количество * ТаблицаТовары.ЦенаСоСкидками / ВЫБОР
	|		КОГДА ТаблицаТовары.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка)
	|				ИЛИ ТаблицаТовары.Упаковка.Коэффициент = 0
	|			ТОГДА 1
	|		ИНАЧЕ ТаблицаТовары.Упаковка.Коэффициент
	|	КОНЕЦ КАК СтоимостьБезСкидок,
	|	ВЫБОР
	|		КОГДА &ЭтоВозврат
	|			ТОГДА -1
	|		ИНАЧЕ 1
	|	КОНЕЦ * ТаблицаТовары.СуммаНДС КАК НДС,
	|	ТаблицаТовары.НомерСтроки КАК НомерСтроки
	|ИЗ
	|	ТаблицаТовары КАК ТаблицаТовары
	|		ЛЕВОЕ СОЕДИНЕНИЕ СтавкиНДС КАК СтавкиНДС
	|		ПО ТаблицаТовары.СтавкаНДС = СтавкиНДС.СтавкаНДС
	|ГДЕ
	|	&ФормироватьДвижения
	|	И НЕ &ОперацияСДенежнымиСредствами
	|;
	|
//		ПродажиПоДисконтнымКартам
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	&Период КАК Период,
	|	&ДисконтнаяКарта КАК ДисконтнаяКарта,
	|	ТаблицаТовары.Номенклатура КАК Номенклатура,
	|	ТаблицаТовары.Характеристика КАК Характеристика,
	|	ВЫБОР
	|		КОГДА &ЭтоВозврат
	|			ТОГДА -1
	|		ИНАЧЕ 1
	|	КОНЕЦ * ТаблицаТовары.СуммаСоСкидками КАК Сумма,
	|	ВЫБОР
	|		КОГДА &ЭтоВозврат
	|			ТОГДА -1
	|		ИНАЧЕ 1
	|	КОНЕЦ * ТаблицаТовары.Количество КАК Количество
	|ИЗ
	|	ТаблицаТовары КАК ТаблицаТовары
	|ГДЕ
	|	НЕ &ДисконтнаяКарта = ЗНАЧЕНИЕ(Справочник.ИнформационныеКарты.ПустаяСсылка)
	|	И НЕ &ОперацияСДенежнымиСредствами
	|;
	|
//		ПродажиПоПлатежнымКартам
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЧекКоррекцииОплата.Ссылка КАК Ссылка,
	|	ЧекКоррекцииОплата.ТипОплаты КАК ТипОплаты,
	|	ЧекКоррекцииОплата.Сумма КАК Сумма,
	|	ЧекКоррекцииОплата.ВидОплаты КАК ВидОплаты,
	|	ЧекКоррекцииОплата.ЭквайринговыйТерминал КАК ЭквайринговыйТерминал
	|ПОМЕСТИТЬ ТаблицаОплата
	|ИЗ
	|	Документ.ЧекКоррекции.Оплата КАК ЧекКоррекцииОплата
	|ГДЕ
	|	ЧекКоррекцииОплата.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	&Период КАК Период,
	|	&Магазин КАК Магазин,
	|	&Организация КАК Организация,
	|	ТаблицаОплата.ВидОплаты КАК ВидОплаты,
	|	СУММА(ВЫБОР
	|			КОГДА &ЭтоВозврат
	|				ТОГДА 0
	|			ИНАЧЕ ТаблицаОплата.Сумма
	|		КОНЕЦ) КАК СуммаОперацийПродажи,
	|	СУММА(ВЫБОР
	|			КОГДА &ЭтоВозврат
	|				ТОГДА ТаблицаОплата.Сумма
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК СуммаОперацийВозврата,
	|	ТаблицаОплата.ЭквайринговыйТерминал КАК ЭквайринговыйТерминал
	|ИЗ
	|	ТаблицаОплата КАК ТаблицаОплата
	|ГДЕ
	|	ТаблицаОплата.ТипОплаты = ЗНАЧЕНИЕ(Перечисление.ТипыОплатыККТ.Электронно)
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаОплата.ВидОплаты,
	|	ТаблицаОплата.ЭквайринговыйТерминал
	|;
	|
//		РасчетыСКлиентами
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	&Период КАК Период,
	|	&Ссылка КАК Регистратор,
	|	ВЫБОР
	|		КОГДА &ДокументРасчета = НЕОПРЕДЕЛЕНО
	|				ИЛИ ЧекКоррекцииОплата.ТипОплаты = &ВРассрочку
	|			ТОГДА &Ссылка
	|		ИНАЧЕ &ДокументРасчета
	|	КОНЕЦ КАК ДокументРасчета,
	|	&Приход КАК ВидДвижения,
	|	ЧекКоррекцииОплата.Сумма КАК Сумма,
	|	&Организация КАК Организация,
	|	&Контрагент КАК Контрагент,
	|	&ЗаказПокупателя КАК ЗаказПокупателя,
	|	&Магазин КАК Магазин,
	|	ЧекКоррекцииОплата.ТипОплаты КАК ТипОплаты
	|ПОМЕСТИТЬ ТаблицаРасчетыСКлиентами
	|ИЗ
	|	Документ.ЧекКоррекции.Оплата КАК ЧекКоррекцииОплата
	|ГДЕ
	|	&ИспользоватьРасчетыСКлиентами
	|	И ЧекКоррекцииОплата.Ссылка = &Ссылка
	|	И НЕ &ОперацияСДенежнымиСредствами
	|	И &ЭтоВозврат
	|	И (ЧекКоррекцииОплата.ТипОплаты = &ЗачетАванса
	|			ИЛИ ЧекКоррекцииОплата.ТипОплаты = &ВРассрочку)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	&Период КАК Период,
	|	&Ссылка КАК Регистратор,
	|	ВЫБОР
	|		КОГДА &ДокументРасчета = НЕОПРЕДЕЛЕНО
	|				ИЛИ ЧекКоррекцииОплата.ТипОплаты = &ВРассрочку
	|			ТОГДА &Ссылка
	|		ИНАЧЕ &ДокументРасчета
	|	КОНЕЦ КАК ДокументРасчета,
	|	&Расход КАК ВидДвижения,
	|	ЧекКоррекцииОплата.Сумма КАК Сумма,
	|	&Организация КАК Организация,
	|	&Контрагент КАК Контрагент,
	|	&ЗаказПокупателя КАК ЗаказПокупателя,
	|	&Магазин КАК Магазин,
	|	ЧекКоррекцииОплата.ТипОплаты КАК ТипОплаты
	|ИЗ
	|	Документ.ЧекКоррекции.Оплата КАК ЧекКоррекцииОплата
	|ГДЕ
	|	&ИспользоватьРасчетыСКлиентами
	|	И ЧекКоррекцииОплата.Ссылка = &Ссылка
	|	И НЕ &ОперацияСДенежнымиСредствами
	|	И НЕ &ЭтоВозврат
	|	И (ЧекКоррекцииОплата.ТипОплаты = &ЗачетАванса
	|			ИЛИ ЧекКоррекцииОплата.ТипОплаты = &ВРассрочку)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	&Период,
	|	&Ссылка,
	|	&Ссылка,
	|	&Расход,
	|	ЧекКоррекцииОплата.Сумма,
	|	&Организация,
	|	&Контрагент,
	|	&ЗаказПокупателя,
	|	&Магазин,
	|	ЧекКоррекцииОплата.ТипОплаты
	|ИЗ
	|	Документ.ЧекКоррекции.Оплата КАК ЧекКоррекцииОплата
	|ГДЕ
	|	&ИспользоватьРасчетыСКлиентами
	|	И ЧекКоррекцииОплата.Ссылка = &Ссылка
	|	И НЕ &ОперацияСДенежнымиСредствами
	|	И НЕ &ЭтоВозврат
	|	И НЕ ЧекКоррекцииОплата.ТипОплаты = &ЗачетАванса
	|	И НЕ ЧекКоррекцииОплата.ТипОплаты = &ВРассрочку
	|	И НЕ ЧекКоррекцииОплата.ТипОплаты = &ВидОплатыНаличные
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	&Период,
	|	&Ссылка,
	|	ВЫБОР
	|		КОГДА &ДокументРасчета = НЕОПРЕДЕЛЕНО
	|				ИЛИ НЕ &ОперацияСДенежнымиСредствами
	|			ТОГДА &Ссылка
	|		ИНАЧЕ &ДокументРасчета
	|	КОНЕЦ,
	|	&Приход,
	|	ЧекКоррекцииОплата.Сумма,
	|	&Организация,
	|	&Контрагент,
	|	&ЗаказПокупателя,
	|	&Магазин,
	|	ЧекКоррекцииОплата.ВидОплаты
	|ИЗ
	|	Документ.ЧекКоррекции.Оплата КАК ЧекКоррекцииОплата
	|ГДЕ
	|	&ИспользоватьРасчетыСКлиентами
	|	И ЧекКоррекцииОплата.Ссылка = &Ссылка
	|	И НЕ &ЭтоВозврат
	|	И НЕ ЧекКоррекцииОплата.ТипОплаты = &ЗачетАванса
	|	И НЕ ЧекКоррекцииОплата.ТипОплаты = &ВРассрочку
	|	И НЕ ЧекКоррекцииОплата.ТипОплаты = &ВидОплатыНаличные
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	&Период,
	|	&Ссылка,
	|	ВЫБОР
	|		КОГДА &ДокументРасчета = НЕОПРЕДЕЛЕНО
	|			ТОГДА &Ссылка
	|		ИНАЧЕ &ДокументРасчета
	|	КОНЕЦ,
	|	&Расход,
	|	ЧекКоррекцииОплата.Сумма,
	|	&Организация,
	|	&Контрагент,
	|	&ЗаказПокупателя,
	|	&Магазин,
	|	ЧекКоррекцииОплата.ВидОплаты
	|ИЗ
	|	Документ.ЧекКоррекции.Оплата КАК ЧекКоррекцииОплата
	|ГДЕ
	|	&ИспользоватьРасчетыСКлиентами
	|	И ЧекКоррекцииОплата.Ссылка = &Ссылка
	|	И &ЭтоВозврат
	|	И НЕ ЧекКоррекцииОплата.ТипОплаты = &ЗачетАванса
	|	И НЕ ЧекКоррекцииОплата.ТипОплаты = &ВРассрочку
	|	И НЕ ЧекКоррекцииОплата.ТипОплаты = &ВидОплатыНаличные
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	&Период,
	|	&Ссылка,
	|	&Ссылка,
	|	&Приход,
	|	ЧекКоррекцииОплата.Сумма,
	|	&Организация,
	|	&Контрагент,
	|	&ЗаказПокупателя,
	|	&Магазин,
	|	ЧекКоррекцииОплата.ВидОплаты
	|ИЗ
	|	Документ.ЧекКоррекции.Оплата КАК ЧекКоррекцииОплата
	|ГДЕ
	|	&ИспользоватьРасчетыСКлиентами
	|	И ЧекКоррекцииОплата.Ссылка = &Ссылка
	|	И НЕ &ОперацияСДенежнымиСредствами
	|	И &ЭтоВозврат
	|	И НЕ ЧекКоррекцииОплата.ТипОплаты = &ЗачетАванса
	|	И НЕ ЧекКоррекцииОплата.ТипОплаты = &ВРассрочку
	|	И НЕ ЧекКоррекцииОплата.ТипОплаты = &ВидОплатыНаличные
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаРасчетыСКлиентами.Период КАК Период,
	|	ТаблицаРасчетыСКлиентами.Регистратор КАК Регистратор,
	|	ТаблицаРасчетыСКлиентами.ДокументРасчета КАК ДокументРасчета,
	|	ТаблицаРасчетыСКлиентами.ВидДвижения КАК ВидДвижения,
	|	ВЫБОР
	|		КОГДА ТаблицаРасчетыСКлиентами.ТипОплаты = &ВидОплатыНаличные
	|			ТОГДА &ВыручкаНаличными
	|		ИНАЧЕ ТаблицаРасчетыСКлиентами.Сумма
	|	КОНЕЦ КАК Сумма,
	|	ТаблицаРасчетыСКлиентами.Организация КАК Организация,
	|	ТаблицаРасчетыСКлиентами.Контрагент КАК Контрагент,
	|	ТаблицаРасчетыСКлиентами.ЗаказПокупателя КАК ЗаказПокупателя,
	|	ТаблицаРасчетыСКлиентами.Магазин КАК Магазин
	|ИЗ
	|	ТаблицаРасчетыСКлиентами КАК ТаблицаРасчетыСКлиентами";
	
	Запрос.Текст = ТекстЗапроса;
	
	Результат = Запрос.ВыполнитьПакет();
	
	ТаблицыДляДвижений = ДополнительныеСвойства.ТаблицыДляДвижений;
	ТаблицыДляДвижений.Вставить("ТаблицаДенежныеСредстваККМ"      	, Результат[2].Выгрузить());
	ТаблицыДляДвижений.Вставить("ТаблицаПродажи"                  	, Результат[3].Выгрузить());
	ТаблицыДляДвижений.Вставить("ТаблицаПродажиПоДисконтнымКартам"	, Результат[4].Выгрузить());
	ТаблицыДляДвижений.Вставить("ТаблицаПродажиПоПлатежнымКартам" 	, Результат[6].Выгрузить());
	ТаблицыДляДвижений.Вставить("ТаблицаРасчетыСКлиентами"        	, Результат[8].Выгрузить());
	
	Если ИспользоватьРасчетыСКлиентами И ВыручкаНаличными <> 0  Тогда
		
		СтрокаТаблицы = ТаблицыДляДвижений.ТаблицаРасчетыСКлиентами.Добавить();
		Если ЭтоВозврат Тогда
			СтрокаТаблицы.ВидДвижения     = ВидДвиженияНакопления.Расход;
		Иначе
			СтрокаТаблицы.ВидДвижения     = ВидДвиженияНакопления.Приход;
		КонецЕсли;
		СтрокаТаблицы.ДокументРасчета = Реквизиты.ДокументРасчета;
		Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.ДокументРасчета) Тогда
			СтрокаТаблицы.ДокументРасчета     = Реквизиты.Ссылка;
		КонецЕсли;
		СтрокаТаблицы.ЗаказПокупателя = Реквизиты.ЗаказПокупателя;
		СтрокаТаблицы.Контрагент      = Реквизиты.Контрагент;
		СтрокаТаблицы.Магазин         = Реквизиты.Магазин;
		СтрокаТаблицы.Организация     = Реквизиты.Организация;
		СтрокаТаблицы.Период          = Реквизиты.Период;
		СтрокаТаблицы.Регистратор     = Реквизиты.Ссылка;
		СтрокаТаблицы.Сумма           = ВыручкаНаличными;
		
		Если НЕ Реквизиты.ОперацияСДенежнымиСредствами Тогда
			СтрокаТаблицы = ТаблицыДляДвижений.ТаблицаРасчетыСКлиентами.Добавить();
			Если ЭтоВозврат Тогда
				СтрокаТаблицы.ВидДвижения     = ВидДвиженияНакопления.Приход;
			Иначе
				СтрокаТаблицы.ВидДвижения     = ВидДвиженияНакопления.Расход;
			КонецЕсли;
			СтрокаТаблицы.ДокументРасчета = Реквизиты.ДокументРасчета;
			Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.ДокументРасчета) Тогда
				СтрокаТаблицы.ДокументРасчета     = Реквизиты.Ссылка;
			КонецЕсли;
			СтрокаТаблицы.ЗаказПокупателя = Реквизиты.ЗаказПокупателя;
			СтрокаТаблицы.Контрагент      = Реквизиты.Контрагент;
			СтрокаТаблицы.Магазин         = Реквизиты.Магазин;
			СтрокаТаблицы.Организация     = Реквизиты.Организация;
			СтрокаТаблицы.Период          = Реквизиты.Период;
			СтрокаТаблицы.Регистратор     = Реквизиты.Ссылка;
			СтрокаТаблицы.Сумма           = ВыручкаНаличными;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли