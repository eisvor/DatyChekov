
#Область ОписаниеПеременных

&НаКлиенте
Перем КэшированныеЗначения;

&НаКлиенте
Перем ТекущиеДанныеИдентификатор; // Используется для передачи текущей строки в обработчик ожидания.

// СтандартныеПодсистемы.РаботаСКонтрагентами
&НаКлиенте
Перем ПроверкаКонтрагентовПараметрыОбработчикаОжидания Экспорт;

&НаКлиенте
Перем ФормаДлительнойОперации Экспорт;
// Конец СтандартныеПодсистемы.РаботаСКонтрагентами

#КонецОбласти

#Область ПрограммныйИнтерфейс

#Область ОбработчикиСобытийПодключаемогоОборудования

&НаКлиенте
Функция ПолученМагнитныйКод(МагнитныйКод) Экспорт 
	
	СтруктураРезультат = ДанныеПоискаПоМагнитномуКодуСервер(МагнитныйКод);
	Возврат ПодключаемоеОборудованиеРТКлиент.ПолученМагнитныйКод(ЭтотОбъект, СтруктураРезультат);
	
КонецФункции

&НаКлиенте
Функция ПолученШтрихкодИзСШК(Штрихкод) Экспорт
	
	СтруктураРезультат = ДанныеПоискаПоШтрихкодуСервер(Штрихкод);
	Возврат ПодключаемоеОборудованиеРТКлиент.ПолученШтрихкодИзСШК(ЭтотОбъект, СтруктураРезультат);
	
КонецФункции

&НаСервере
Процедура ОбработатьДанныеПоКодуСервер(СтруктураРезультат) Экспорт
	
	ИдентификаторСтроки = Неопределено;
	СтрокаРезультата = СтруктураРезультат.ЗначенияПоиска[0];
	
	Если НЕ СтруктураРезультат.Свойство("ДействиеОтменено") Тогда
		Если СтрокаРезультата.Свойство("Карта") Тогда
			Если СтрокаРезультата.ЭтоРегистрационнаяКарта Тогда
				Объект.Продавец = СтрокаРезультата.ВладелецКарты;
				Модифицированность = Истина;
			Иначе
				Объект.ДисконтнаяКарта = СтрокаРезультата.Карта;
				СтруктураРезультат.Вставить("НайденаДисконтнаяКарта");
				Модифицированность = Истина;
			КонецЕсли;
			
		ИначеЕсли СтрокаРезультата.Свойство("СерийныйНомер") Тогда
			
			ИдентификаторСтроки = ДобавитьНайденныеСерийныеНомера(СтрокаРезультата);
			
		ИначеЕсли СтрокаРезультата.Свойство("Серия") Тогда
			
			СтрокаРезультата.Вставить("ОбработатьСерии");
			
		ИначеЕсли СтрокаРезультата.Свойство("Номенклатура") Тогда
			
			ИдентификаторСтроки = ДобавитьНайденныеПозицииТоваровСервер(СтрокаРезультата);
			
		КонецЕсли;
	КонецЕсли;

	Если СтрокаРезультата.Свойство("ТекстПредупреждения") Тогда
		СтруктураРезультат.Вставить("ТекстПредупреждения", СтрокаРезультата.ТекстПредупреждения);
	КонецЕсли;
		
	Если СтрокаРезультата.Свойство("НеобходимостьВводаАкцизнойМарки") Тогда
		СтруктураРезультат.Вставить("НеобходимостьВводаАкцизнойМарки", СтрокаРезультата.НеобходимостьВводаАкцизнойМарки);
	КонецЕсли;
	
	Если ИдентификаторСтроки <> Неопределено Тогда
		СтруктураРезультат.Вставить("АктивизироватьСтроку", ИдентификаторСтроки);
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьДанныеПоКодуКлиент(СтруктураПараметровКлиента) Экспорт
	
	ОткрытаБлокирующаяФорма = Ложь;
	
	Если СтруктураПараметровКлиента.Свойство("НайденаДисконтнаяКарта") Тогда
		
		Если ЗначениеЗаполнено(Объект.ДисконтнаяКарта) Тогда
			ДисконтнаяКартаПриИзменении(Неопределено);
		КонецЕсли;
		
	Иначе
		ПодключаемоеОборудованиеРТКлиент.ОбработатьДанныеПоКоду(ЭтотОбъект, СтруктураПараметровКлиента, ОткрытаБлокирующаяФорма);
	КонецЕсли;
	
	Если НЕ ОткрытаБлокирующаяФорма Тогда
		ЗавершитьОбработкуДанныхПоКодуКлиент(СтруктураПараметровКлиента);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ОбработатьДанныеПослеЗагрузкиИзТСД(СтруктураПараметров, ДополнительныеПараметры) Экспорт
	
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ОбновитьСтатусыСерийИПодарочныхСертификатов(Объект.Товары);
	
КонецФункции

&НаКлиенте
Функция ДобавитьНайденныеПозицииТоваров(СтруктураПараметров, ДополнительныеПараметры) Экспорт
	
	Возврат ДобавитьНайденныеПозицииТоваровСервер(СтруктураПараметров, ДополнительныеПараметры);
	
КонецФункции

&НаСервере
Функция ДобавитьНайденныеСерийныеНомера(СтруктураНомера) Экспорт
	
	СтруктураНомера.Вставить("ТекстПредупреждения", НСтр("ru = 'Возврат подарочных сертификатов не возможен.'"));
	Возврат Неопределено;
	
КонецФункции

&НаКлиенте
Процедура ДобавитьНайденныеВТЧСерииНоменклатурыКлиент(СтруктураПараметров)
	
	Если СтруктураПараметров.Свойство("ОбработатьСерии") Тогда
		ПодключаемоеОборудованиеРТКлиент.ДобавитьНайденныеВТЧСерииНоменклатуры(ЭтотОбъект, СтруктураПараметров);
	КонецЕсли;
	
КонецПроцедуры


&НаСервере
Функция ДанныеПоискаПоМагнитномуКодуСервер(МагнитныйКод)
	
	Возврат ПодключаемоеОборудованиеРТ.ДанныеПоискаПоМагнитномуКоду(МагнитныйКод, ЭтотОбъект);
	
КонецФункции

&НаСервере
Функция ДанныеПоискаПоШтрихкодуСервер(Штрихкод)
	
	Возврат ПодключаемоеОборудованиеРТ.ДанныеПоискаПоШтрихкоду(Штрихкод, ЭтотОбъект);
	
КонецФункции

&НаКлиенте
Процедура ОповещениеОбработатьДанныеПоКоду(СтруктураРезультат, ДополнительныеПараметры) Экспорт
	
	ОбработатьДанныеПоКодуСервер(СтруктураРезультат);
	ДобавитьНайденныеВТЧСерииНоменклатурыКлиент(СтруктураРезультат);
	
КонецПроцедуры

&НаКлиенте
Функция ОбработатьДанныеИзТСДКлиент(СтруктураПараметров, ДополнительныеПараметры) Экспорт
	
	Результат = ПодключаемоеОборудованиеРТКлиент.ОбработатьДанныеПоНоменклатуреИзТСДКлиент(ЭтотОбъект, СтруктураПараметров);
	
	Если Не ДополнительныеПараметры = Неопределено Тогда 
		Если ДополнительныеПараметры.Свойство("ОбработатьПослеЗагрузки") И ДополнительныеПараметры.ОбработатьПослеЗагрузки Тогда 
			ОбработатьДанныеПослеЗагрузкиИзТСД(СтруктураПараметров, Неопределено);
		КонецЕсли;
	КонецЕсли;
	
	ПодключаемоеОборудованиеРТКлиент.СообщитьТекстПредупреждения(СтруктураПараметров);
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ДобавитьНайденныеПозицииТоваровСервер(СтруктураПараметров, ДополнительныеПараметры = Неопределено)
	
	Если Не ДополнительныеПараметры = Неопределено Тогда
		СтруктураПараметров = ДополнительныеПараметры;
		ИдентификаторСтроки = СтруктураПараметров;
	Иначе
		ИдентификаторСтроки = Неопределено;
	КонецЕсли;
	
	ТипНоменклатуры = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтруктураПараметров.Номенклатура, "ТипНоменклатуры");
	Если ТипНоменклатуры = Перечисления.ТипыНоменклатуры.ПодарочныйСертификат Тогда
		СтруктураПараметров.Вставить("ТекстПредупреждения", НСтр("ru = 'Возврат подарочных сертификатов не возможен.'"));
		Возврат СтруктураПараметров;
	КонецЕсли;
	
	ОбработатьБезМаркировки = Ложь;
	Если СтруктураПараметров.Свойство("ОбработатьБезМаркировки")
		И СтруктураПараметров.ОбработатьБезМаркировки Тогда
		ОбработатьБезМаркировки = Истина;
	КонецЕсли;
	
	ДобавленаСтрока = Ложь;
	Если СтруктураПараметров.Свойство("ДобавленаСтрока") Тогда
		ДобавленаСтрока = СтруктураПараметров.ДобавленаСтрока;
	КонецЕсли;
	
	СтруктураДействий = Новый Структура;
	Если СтруктураПараметров.Свойство("ТекущаяСтрока") Тогда
		ТекущаяСтрока = СтруктураПараметров.ТекущаяСтрока;
		СтруктураДействий.Вставить("ПересчитатьКоличествоУпаковок");
	Иначе
		ТекущаяСтрока = ПодключаемоеОборудованиеРТ.ИнициализацияСтрокиТоваров(ЭтотОбъект, СтруктураПараметров, ДобавленаСтрока);
		СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
	КонецЕсли;
	
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ЗаполнитьКлючСвязи(Объект.Товары, ТекущаяСтрока, "КлючСвязи");
	
	Если ДобавленаСтрока Тогда
		ОбработкаТабличнойЧастиТоварыКлиентСервер.ДополнитьСтруктуруДействиямиПриИзмененииЭлемента(Объект, СтруктураДействий, "Номенклатура");
		
		СтруктураДействий.Вставить("ПроставитьПродавца", Объект.Продавец);
		СтруктураДействий.Вставить("ЗаполнитьЦенуПродажи", ОбработкаТабличнойЧастиТоварыКлиентСервер.ПолучитьСтруктуруЗаполненияЦеныПродажиВСтрокеТЧ(Объект, Истина));
		СтруктураДействий.Вставить("ЗаполнитьСтавкуНДССкладВШапке", ОбработкаТабличнойЧастиТоварыКлиентСервер.СтруктураПараметровСтавкиНДССкладВидНалогаВШапке(Объект));
		
	КонецЕсли;
	
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", ОбработкаТабличнойЧастиТоварыКлиентСервер.СтруктураПересчетаСуммыНДСВСтрокеТЧ(Объект));
	СтруктураДействий.Вставить("ПересчитатьСумму");
	
	ДополнитьСтруктуруДействиямиНДС(СтруктураДействий, ВестиУчетМаркируемойПродукцииИСМП);
	ДополнитьСтруктуруДействиямиГосИС(СтруктураДействий, МаркировкаВключена, ОбработатьБезМаркировки);
	
	ИдентификаторСтроки = ПодключаемоеОборудованиеРТ.ЗавершениеОбработкиСтрокиТоваров(ЭтотОбъект, ТекущаяСтрока, СтруктураДействий);
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ОбновитьСуммыПодвала(Объект.Товары, Объект.ЦенаВключаетНДС, СуммаВсего);
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ЗаполнитьСуммуВсегоВТаблице(Объект.Товары, Объект.ЦенаВключаетНДС);
	
	Если ИдентификаторСтроки <> Неопределено Тогда
		Если ТекущаяСтрока.НеобходимостьВводаАкцизнойМарки Тогда
			Если НЕ ЕстьАлкогольнаяПродукцияЕГАИС Тогда
				ЕстьАлкогольнаяПродукцияЕГАИС = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если Не ДополнительныеПараметры = Неопределено Тогда
		СтруктураПараметров = ИдентификаторСтроки;
		Возврат СтруктураПараметров;
	Иначе
		Возврат ИдентификаторСтроки;
	КонецЕсли;
	
КонецФункции

#КонецОбласти

&НаКлиенте
Процедура ОповещениеВводДатыЧекаККМ(Дата, ДополнительныеПараметры) Экспорт
	Если НЕ Дата = Неопределено Тогда
        
        // &ЗамерПроизводительности
        ОценкаПроизводительностиРТКлиент.НачатьЗамер(
                 Истина, "Документ.ЧекККМ.Форма.ФормаВыбора.Открытие");
        
        СтруктураПараметрыОтбора = Новый Структура;
		СтруктураПараметрыОтбора.Вставить("Номенклатура"  , ДополнительныеПараметры.Номенклатура);
		СтруктураПараметрыОтбора.Вставить("Характеристика", ДополнительныеПараметры.Характеристика);
		СтруктураПараметрыОтбора.Вставить("Дата"          , Дата);
		СтруктураПараметрыОтбора.Вставить("Магазин"       , Объект.Магазин);
		Если ЗначениеЗаполнено(Объект.ДисконтнаяКарта) Тогда
			СтруктураПараметрыОтбора.Вставить("ДисконтнаяКарта", Объект.ДисконтнаяКарта);
		КонецЕсли;
		СтруктураПараметрыОтбора.Вставить("ОперацияСДенежнымиСредствами", Ложь);
		
		СтруктураПараметры = Новый Структура("СтруктураПараметрыОтбора", СтруктураПараметрыОтбора);
		СтруктураПараметры.Вставить("РежимВыбора", Истина);
		
		ОткрытьФорму("Документ.ЧекККМ.ФормаВыбора", СтруктураПараметры, ДополнительныеПараметры.Элемент);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеВводДатыНачалаПоискаДокументов(Дата, ДополнительныеПараметры) Экспорт
	Если НЕ Дата = Неопределено Тогда
		
		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("Номенклатура"  , ДополнительныеПараметры.Номенклатура);
		СтруктураПараметров.Вставить("Характеристика", ДополнительныеПараметры.Характеристика);
		СтруктураПараметров.Вставить("ДатаС"         , Дата);
		СтруктураПараметров.Вставить("Магазин"       , Объект.Магазин);
		
		ТекущаяСтрока = Объект.Товары.НайтиПоИдентификатору(ДополнительныеПараметры.ИндексТекущейСтроки);
		Если ТекущаяСтрока = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		СписокДокументов = ЗапасыСерверВызовСервера.ПолучитьСписокДокументовСодержащихНоменклатуру(СтруктураПараметров);
		
		Если СписокДокументов.Количество() = 0 Тогда
			ПоказатьПредупреждение(,НСтр("ru = 'Документы продажи данного товара не найдены.'"));
			Возврат;
		ИначеЕсли СписокДокументов.Количество() = 1 Тогда
			Выбор = СписокДокументов[0];
			ЗавершитьВыборДокументаПродажи(Выбор.Значение, ТекущаяСтрока)
		Иначе
			ТекстПодсказки = НСтр("ru = 'Выбор документа продажи:'");
			ДополнительныеПараметры = Новый Структура;
			ДополнительныеПараметры.Вставить("ИндексТекущейСтроки", ТекущаяСтрока.ПолучитьИдентификатор());
			
			ОбработчикОповещения = Новый ОписаниеОповещения("ОповещениеВыборЭлементаДокументПродажи", ЭтотОбъект, ДополнительныеПараметры);
			СписокДокументов.ПоказатьВыборЭлемента(ОбработчикОповещения, ТекстПодсказки);
		КонецЕсли;
		
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеВыборЭлементаДокументПродажи(Выбор, ДополнительныеПараметры) Экспорт
	Если НЕ Выбор = Неопределено Тогда
		ТекущаяСтрока = Объект.Товары.НайтиПоИдентификатору(ДополнительныеПараметры.ИндексТекущейСтроки);
		ЗавершитьВыборДокументаПродажи(Выбор.Значение, ТекущаяСтрока)
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеОткрытьФормуВыбораСтрокиДокумента(РезультатОткрытияФормы, ДополнительныеПараметры) Экспорт
	Если НЕ РезультатОткрытияФормы = Неопределено Тогда
		
		ТекущаяСтрока = Объект.Товары.НайтиПоИдентификатору(ДополнительныеПараметры.ИндексТекущейСтроки);
		Если ТекущаяСтрока = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(ТекущаяСтрока, РезультатОткрытияФормы, , "Сумма");
		
		Если ОтчетОРозничныхПродажахПоЧекуККМСервер(ТекущаяСтрока.ЧекККМ) = ДополнительныеПараметры.ВыбранныйДокумент Тогда
		
			ТекущаяСтрока.ЧекККМ = ПредопределенноеЗначение("Документ.ЧекККМ.ПустаяСсылка");
		
		КонецЕсли;
		
		СтруктураДействий = Новый Структура;
		СтруктураДействий.Вставить("ПересчитатьСуммуНДС", ОбработкаТабличнойЧастиТоварыКлиент.СтруктураПересчетаСуммыНДСВСтрокеТЧ(Объект));
		СтруктураДействий.Вставить("ПересчитатьСумму");
		
		ОбработкаТабличнойЧастиТоварыКлиент.ПриИзмененииРеквизитовВТЧКлиент(Объект.Товары, ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
		
		ОбработкаТабличнойЧастиТоварыКлиентСервер.ЗаполнитьСуммуВсегоВСтрокеТаблицы(ТекущаяСтрока, Объект.ЦенаВключаетНДС);
		ОбработкаТабличнойЧастиТоварыКлиентСервер.ОбновитьСуммыПодвала(Объект.Товары, Объект.ЦенаВключаетНДС, СуммаВсего);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьУказаниеСерий(ЗначениеВозврата, ПараметрыФормыУказанияСерий) Экспорт
	
	Если ЗначениеВозврата <> Неопределено Тогда
		ПараметрыФормыУказанияСерий.Вставить("ЗначениеВозврата", ЗначениеВозврата);
		ОбработатьУказаниеСерийСервер(ПараметрыФормыУказанияСерий);
	КонецЕсли;
	
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ОбновитьСтатусыСерийИПодарочныхСертификатов(Объект.Товары);
	
	// ИнтеграцияЕГАИС - отключенный функционал
	//ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	//ИнтеграцияЕГАИСРТКлиент.УстановитьЗначениеСтатусАкцизныхМарокВСтроке(ТекущаяСтрока);
	// Конец ИнтеграцияЕГАИС
	
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеУстановкаКомпонентыСклонения(ДополнительныеПараметры) Экспорт
	ФИОФизЛица = ОбщегоНазначенияРТКлиентСерверПовтИсп.ПолучитьСклонениеФИО(ФИОФизЛицаИП, 3);
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеПоискаПоНаименованию(Результат, ДополнительныеПараметры) Экспорт
		
	Если Результат <> Неопределено Тогда
		ОбработатьДанныеПоКодуСервер(Результат);
		ДобавитьНайденныеВТЧСерииНоменклатурыКлиент(Результат);
		ЗавершитьОбработкуДанныхПоКодуКлиент(Результат);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьСозданиеИВыборНовойХарактеристики(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущаяСтрока = Объект.Товары.НайтиПоИдентификатору(ДополнительныеПараметры.ИдентификаторТекущейСтроки);
	ТекущаяСтрока.Характеристика = Результат;
	ТоварыХарактеристикаПриИзменении(Неопределено);

КонецПроцедуры

&НаКлиенте
Процедура ОповещениеОткрытиеФормыВводаEmail(РезультатОткрытияФормы, ДополнительныеПараметры) Экспорт
	
	Если НЕ РезультатОткрытияФормы = Неопределено Тогда
		
		Если ЗначениеЗаполнено(РезультатОткрытияФормы.Email) Тогда
			Объект.АдресЭП = РезультатОткрытияФормы.Email;
			Объект.Телефон = "";
			ТелефонСтрокой = "";
			ДанныеSMSИлиEmail = Объект.АдресЭП;
			ОтказКлиентаОтСохраненияТелефонаEmail = РезультатОткрытияФормы.ОтказКлиентаОтСохраненияEmail;
		Иначе
			Объект.АдресЭП = "";
			Объект.Телефон = "";
			Телефон = 0;
		КонецЕсли;
		
	КонецЕсли;
	
	ОбновитьФормуSMSИEmail();
	
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеОткрытиеФормыВводаТелефона(РезультатОткрытияФормы, ДополнительныеПараметры) Экспорт
	
	Если НЕ РезультатОткрытияФормы = Неопределено Тогда
		
		Если ЗначениеЗаполнено(РезультатОткрытияФормы.ВведенноеЧисло) Тогда
			Телефон = 0;
			ПодключаемоеОборудованиеРТКлиент.ПреобразоватьТелефонКПользовательскомуВиду(РезультатОткрытияФормы.ВведенноеЧисло, Телефон, ТелефонСтрокой);
			Объект.Телефон = Формат(РезультатОткрытияФормы.ВведенноеЧисло, "ЧЦ=10; ЧДЦ=; ЧГ=0");
			Объект.АдресЭП = "";
			ДанныеSMSИлиEmail = ТелефонСтрокой;
			ОтказКлиентаОтСохраненияТелефонаEmail = РезультатОткрытияФормы.ОтказКлиентаОтСохраненияТелефона;
		Иначе
			Объект.Телефон = 0;
			ТелефонСтрокой = "";
			Объект.АдресЭП = "";
		КонецЕсли;
	КонецЕсли;
	
	ОбновитьФормуSMSИEmail();
	
КонецПроцедуры

// Обработка выборка характеристики, после обработки ШК.
//
// Параметры:
//  Результат - Структура - структура с повторяющимися штрихкодами.
//  Параметры - Структура - структура дополнительных параметров.
//
&НаКлиенте
Процедура ОбработатьСериюНоменклатурыПослеВыбораХарактеристики(Результат, Параметры) Экспорт
	
	Если ЗначениеЗаполнено(Результат) Тогда
		Параметры.Вставить("Характеристика", Результат);
		ПодключаемоеОборудованиеРТКлиент.ЗаполнениеСерииНоменклатуры(ЭтотОбъект, Параметры);
		ПодключаемоеОборудованиеРТКлиент.ЗаполнениеНоменклатурыИХарактеристики(ЭтотОбъект, Параметры);
		ПодключаемоеОборудованиеРТКлиент.ЗапуститьОбработкуДействийСерий(ЭтотОбъект, Параметры);
	КонецЕсли;
	
КонецПроцедуры

//Обработать изменение строки
&НаКлиенте
Процедура ОбработатьИзменениеСтроки(ИдентификаторСтроки, Действие) Экспорт
	
	ТекущаяСтрока = Объект.Товары.НайтиПоИдентификатору(ИдентификаторСтроки);
	
	Если Действие = "ИзмененоКоличество" Тогда
		ПриИзмененииТоварыКоличестваУпаковок(ТекущаяСтрока);
	ИначеЕсли Действие = "ИзмененыНоменклатураХарактеристика" Тогда
		ПриИзмененииТоварыНоменклатура(ТекущаяСтрока);
		ЗаполнитьСтатусыУказанияСерийПриОкончанииРедактированияСтрокиТЧ(ИдентификаторСтроки, КэшированныеЗначения);
		ОбработкаТабличнойЧастиТоварыКлиент.ОбновитьСтатусСерийИПодарочныхСертификатов(ТекущаяСтрока);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Пропускаем инициализацию, чтобы гарантировать получение формы при передаче параметра "АвтоТест".
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.РаботаСКонтрагентами
	ПроверкаКонтрагентов.ПриСозданииНаСервереДокумент(ЭтотОбъект, Параметры);
	// Конец СтандартныеПодсистемы.РаботаСКонтрагентами
	
	ОбщегоНазначенияРТ.ЗаполнитьШапкуДокумента(Объект,КартинкаСостоянияДокумента, Элементы.КартинкаСостоянияДокумента.Подсказка, РазрешеноПроведение);
	
	ВестиУчетМаркируемойПродукцииИСМП = ПолучитьФункциональнуюОпцию("ВестиУчетМаркируемойПродукцииИСМП");
	
	РабочееМесто = ПараметрыСеанса.РабочееМестоКлиента;
	
	БезНДС = НСтр("ru = 'Без НДС'");
	ДополнительныеКолонкиНоменклатуры = ЗначениеНастроекПовтИсп.ПолучитьЗначениеКонстанты("ДополнительнаяКолонкаПриОтображенииНоменклатуры");
	
	Если НЕ ЗначениеЗаполнено(Объект.АналитикаХозяйственнойОперации) Тогда
		
		Объект.АналитикаХозяйственнойОперации = Справочники.АналитикаХозяйственныхОпераций.ПолучитьОперациюПоУмолчанию(Перечисления.ХозяйственныеОперации.ВозвратОтПокупателя);
		
	КонецЕсли;
		
	Если Параметры.Ключ.Пустая() Тогда
		
		Если ЗначениеЗаполнено(Объект.ДокументОснование)
			И ТипЗнч(Объект.ДокументОснование) = Тип("ДокументСсылка.РеализацияТоваров") Тогда
			УстановитьПризнакиУчетаНДСПоОснованию(Объект.ДокументОснование);
		КонецЕсли;
		
		УстановитьДоступностьЦенаВключаетНДС();
		
		Если ЗначениеЗаполнено(Объект.Магазин) Тогда
			
			СтруктураРеквизитовМагазина = Новый Структура();
			СтруктураРеквизитовМагазина.Вставить("СкладУправляющейСистемы");
			СтруктураРеквизитовМагазина.Вставить("СкладПродажи");
			
			РеквизитыМагазина = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект.Магазин, СтруктураРеквизитовМагазина);
				
			Если РеквизитыМагазина.СкладУправляющейСистемы Тогда
				
				Объект.Склад = Справочники.Склады.ПустаяСсылка();
				
			ИначеЕсли НЕ ЗначениеЗаполнено(Объект.Склад) Тогда
				
				Объект.Склад = РеквизитыМагазина.СкладПродажи;
				
				Если НЕ ЗначениеЗаполнено(Объект.Организация) Тогда
					
					Объект.Организация = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Склад, "Организация");
					Объект.КассаККМ	   = ДенежныеСредстваСервер.КассаККМ(Объект.Организация, Объект.Магазин, РабочееМесто);
					
				КонецЕсли;
				
				ЗаполнитьСистемуНалогообложения();
			
			КонецЕсли;
				
		ИначеЕсли ЗначениеЗаполнено(Объект.Склад) Тогда
			
			СтруктураРеквизитовСклада = Новый Структура();
			СтруктураРеквизитовСклада.Вставить("Магазин");
			СтруктураРеквизитовСклада.Вставить("Организация");
			
			РеквизитыСклад = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект.Склад, СтруктураРеквизитовСклада);
			
			Объект.Магазин = РеквизитыСклад.Магазин;
			
			Если НЕ ЗначениеЗаполнено(Объект.Организация) Тогда
				
				Объект.Организация = РеквизитыСклад.Организация;
				
			КонецЕсли;
			
			Объект.КассаККМ = ДенежныеСредстваСервер.КассаККМ(Объект.Организация, Объект.Магазин, РабочееМесто);
			ЗаполнитьСистемуНалогообложения();
			
		КонецЕсли;
		
		НастроитьОтображениеРеквизитовСчетаФактуры(
			ЭтотОбъект,
			ПродажиСервер.ПараметрыПредставленияСчетаФактуры(Объект.Ссылка, Объект.Организация));
	
		ПараметрыУказанияСерий = Новый ФиксированнаяСтруктура(Документы.ВозвратТоваровОтПокупателя.ПараметрыУказанияСерий(Объект));
		
	КонецЕсли;
	
	ЭтоLinuxСервер = ОбщегоНазначенияРТВызовСервера.ЭтоLinuxСервер();
	
	Если ЗначениеЗаполнено(Объект.ФизЛицо) Тогда
		ЗаполнениеФИО();
	КонецЕсли;
	
	УправлениеЭлементамиФормыПриСозданииНаСервере();
	
	ЗаполнитьСтавкиНДС();
	
	ПодключаемоеОборудованиеРТ.НастроитьПодключаемоеОборудование(ЭтотОбъект);
	ПараметрыСобытийПО = Новый Структура;
	
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ЗаполнитьСуммуВсегоВТаблице(Объект.Товары, Объект.ЦенаВключаетНДС);
	
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ОбновитьСуммыПодвала(Объект.Товары, Объект.ЦенаВключаетНДС, СуммаВсего);
	
	ВозможностьЭлектронногоПлатежа = ПодключаемоеОборудованиеРТ.ВозможностьЭлектронногоПлатежа(Объект.КассаККМ.ПодключаемоеОборудование);
	Если ВозможностьЭлектронногоПлатежа Тогда
		ПередачаEmailЧерезПрограмму = Объект.КассаККМ.ЭлектронныйЧекEmailПередаютсяПрограммой1С;
		ПередачаSMSЧерезПрограмму  = Объект.КассаККМ.ЭлектронныйЧекSMSПередаютсяПрограммой1С;
	КонецЕсли;
	
	Элементы.КомандаEmail.Видимость = ВозможностьЭлектронногоПлатежа;
	Элементы.КомандаSMS.Видимость   = ВозможностьЭлектронногоПлатежа;
	Элементы.ГруппаДанныеSMSИEmail.Видимость   = ВозможностьЭлектронногоПлатежа;
		
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьПризнакИспользованияХарактеристик(Объект.Товары);
		ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьСтатусыУказанияСерий(Объект,ПараметрыУказанияСерий);
		ОбработкаТабличнойЧастиТоварыКлиентСервер.ОбновитьСтатусыСерийИПодарочныхСертификатов(Объект.Товары);
		БонусныеБаллыСервер.ОбновитьОтображениеБонусов(Объект, , , "НомерСтроки");
		ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьНеобходимостьВводаАкцизнойМарки(Объект.Товары);
		ОбновитьРеквизитыОбменаСГИСМ();
	КонецЕсли;
	
	УстановитьВидимостьСтатусыСерийИПодарочныхСертификатов();
	УстановитьТекущуюСтраницуСуммПодвала();
	
	НастроитьФормуПоДополнительнымПравам();
	УстановитьДоступностьКомандБуфераОбмена();
	
	ОбщегоНазначенияРТКлиентСервер.УстановитьКартинкуДляКомментария(Элементы.СтраницаКомментарий, Объект.Комментарий);
	
	// ИнтеграцияЕГАИС - отключенный функционал
	ВестиУчетАлкогольнойПродукции     = Ложь; //ИнтеграцияЕГАИСРТ.НужноРаботатьСЕГАИС(Объект.Дата);
	ВестиУчетМаркируемойПродукцииИСМП = Ложь; //ПолучитьФункциональнуюОпцию("ВестиУчетМаркируемойПродукцииИСМП");
	ВестиУчетПродукцииГИСМ            = Ложь; //ПолучитьФункциональнуюОпцию("ВестиУчетМаркировкиПродукцииВГИСМ")
		// И НЕ ИнтеграцияГИСМ.ПодсистемаНеИспользуется();
	
	МаркировкаВключена = Ложь; //ВестиУчетАлкогольнойПродукции Или ВестиУчетМаркируемойПродукцииИСМП;
	
	ЕстьАлкогольнаяПродукцияЕГАИС = Ложь;
	Для Каждого СтрокаТовары Из Объект.Товары Цикл
		Если Ложь И СтрокаТовары.НеобходимостьВводаАкцизнойМарки Тогда
			ЕстьАлкогольнаяПродукцияЕГАИС = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	//УстановитьВидимостьИДоступностьЕГАИС(ЭтотОбъект);
	// Конец ИнтеграцияЕГАИС
	
	//ИнтеграцияИСМПТК
	//ИСМПТ
	РаботаСДокументамиИСМПТКПереопределяемый.ОбновитьРеквизитыИСМПТ(ЭтаФорма);
	//ИСЦЭДМ
	РаботаСДокументамиИСМПТКПереопределяемый.ОбновитьРеквизитыИСЦЭДМ(ЭтаФорма);
	//Конец ИнтеграцияИСМПТК
	
	СобытияФормРТ.ПриСозданииНаСервере(ЭтотОбъект, Отказ, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// ПодключаемоеОборудование
	МенеджерОборудованияКлиент.НачатьПодключениеОборудованиеПриОткрытииФормы(Неопределено, ЭтотОбъект, "СканерШтрихкода, СчитывательМагнитныхКарт");
	// Конец ПодключаемоеОборудование
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	Если ЗначениеЗаполнено(Объект.ФизЛицо) И ЭтоLinuxСервер Тогда
		ОбработчикОповещения = Новый ОписаниеОповещения("ОповещениеУстановкаКомпонентыСклонения", ЭтотОбъект);
		Если ОбщегоНазначенияРТКлиент.КомпонентаСклоненияУстановлена(ОбработчикОповещения) Тогда
			ФИОФизЛица = ОбщегоНазначенияРТКлиентСерверПовтИсп.ПолучитьСклонениеФИО(ФИОФизЛицаИП, 3);
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.КассаККМ) И НомерДокументаКассыККМ[Объект.КассаККМ] = Неопределено Тогда
		ОбщегоНазначенияРТКлиент.ЗаполнитьНомерДокументаКассыККМ(Объект.КассаККМ);
	КонецЕсли;
		
	// СтандартныеПодсистемы.РаботаСКонтрагентами
	ПроверкаКонтрагентовКлиент.ПриОткрытииДокумент(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.РаботаСКонтрагентами
	
	// ИнтеграцияЕГАИС - отключенный функционал
	//ИнтеграцияЕГАИСРТКлиент.ЗаполнитьКоличествоАкцизныхМарок(Объект.Товары, Объект.АкцизныеМарки);
	//ИнтеграцияЕГАИСРТКлиент.УстановитьЗначениеСтатусАкцизныхМарок(Объект.Товары);
	// Конец ИнтеграцияЕГАИС
	
	ПредставитьТелефонИEmailКлиент();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	// ПодключаемоеОборудование
	МенеджерОборудованияКлиент.НачатьОтключениеОборудованиеПриЗакрытииФормы(Неопределено, ЭтотОбъект);
	// Конец ПодключаемоеОборудование
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ИсточникВыбора.ИмяФормы = "Обработка.ПодборТоваров.Форма.Форма" Тогда	
		
		ОбработкаВыбораПодборНаСервере(ВыбранноеЗначение);
		
	ИначеЕсли ИсточникВыбора.ИмяФормы = "Документ.СчетФактураВыданный.Форма.ФормаДокумента"
	 ИЛИ ИсточникВыбора.ИмяФормы = "Документ.СчетФактураВыданный.Форма.ФормаСписка" Тогда
		
		НастроитьОтображениеРеквизитовСчетаФактуры(ЭтотОбъект, ВыбранноеЗначение);
		
	КонецЕсли;
	
	Если Окно <> Неопределено Тогда
		
		Окно.Активизировать();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// СтандартныеПодсистемы.РаботаСКонтрагентами
	ПроверкаКонтрагентовКлиент.ОбработкаОповещения(ЭтотОбъект, ИмяСобытия, Параметр, Источник);
	// Конец СтандартныеПодсистемы.РаботаСКонтрагентами
	
	Если ИмяСобытия = "КопированиеСтрокВБуферОбмена" Или ИмяСобытия = "ВставкаСтрокИзБуфераОбмена" Тогда
		УстановитьДоступностьКомандБуфераОбмена();
	КонецЕсли;
	
	// ИнтеграцияГИСМ
	Если ИмяСобытия = "Запись_МаркировкаТоваровГИСМ"
		И Параметр.Ссылка = Объект.Ссылка Тогда
		
		ОбновитьРеквизитыОбменаСГИСМ();
		
	КонецЕсли;
	
	Если ИмяСобытия = "ИзменениеСостоянияГИСМ"
		И Параметр.Ссылка = Объект.Ссылка Тогда
		
		ОбновитьРеквизитыОбменаСГИСМ();
		
	КонецЕсли;
	
	Если ИмяСобытия = "ВыполненОбменГИСМ"
		И (Параметр = Неопределено
		Или (ТипЗнч(Параметр) = Тип("Структура") И Параметр.ОбновлятьСтатусГИСМФормахВДокументах)) Тогда
		
		ОбновитьРеквизитыОбменаСГИСМ();
		
	КонецЕсли;
	// Конец ИнтеграцияГИСМ
	
	//ИнтеграцияИСМПТК
	Если ИмяСобытия = "Запись_АктПриемаПередачи" 
		Или ИмяСобытия = "Запись_УведомлениеОВводеВОборот" Тогда
		//ИСМПТ
		ОбработкаОповещенияЗаписиИСМПТНаСервере();
		
	ИначеЕсли ИмяСобытия = "Запись_АктПриемаПередачиИСЦЭДМ" 
		Или ИмяСобытия = "Запись_УведомлениеОВводеВОборотИСЦЭДМ" Тогда
		//ИСЦЭДМ
		ОбработкаОповещенияЗаписиИСЦЭДМНаСервере();
	КонецЕсли;
	//Конец ИнтеграцияИСМПТК
	
	// ГосИС
	СобытияФормРТКлиент.ОбработкаОповещения(ЭтотОбъект, ИмяСобытия, Параметр, Источник);
	// Конец ГосИс
	
КонецПроцедуры

&НаКлиенте
Процедура ВнешнееСобытие(Источник, Событие, Данные)
	
	Если ВводДоступен() Тогда
		ПодключаемоеОборудованиеРТКлиент.ВнешнееСобытиеОборудования(ЭтотОбъект, Источник, Событие, Данные);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.РаботаСКонтрагентами
	ПроверкаКонтрагентов.ПередЗаписьюНаСервереДокумент(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.РаботаСКонтрагентами
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)

	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	УстановитьДоступностьЦенаВключаетНДС();
	
	ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьПризнакИспользованияХарактеристик(Объект.Товары);
	СтруктураМарки = Новый Структура;
	СтруктураМарки.Вставить("Дата", Объект.Дата);
	ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьНеобходимостьВводаАкцизнойМарки(Объект.Товары, СтруктураМарки);
	ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьНДСПострочно(Объект.Товары);
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ЗаполнитьСуммуВсегоВТаблице(Объект.Товары, Объект.ЦенаВключаетНДС);
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ОбновитьСуммыПодвала(Объект.Товары, Объект.ЦенаВключаетНДС, СуммаВсего);
	УстановитьТекущуюСтраницуСуммПодвала();
	
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	ОбщегоНазначенияРТКлиентСервер.ОбновитьСостояниеДокумента(Объект, Элементы.КартинкаСостоянияДокумента.Подсказка, КартинкаСостоянияДокумента, РазрешеноПроведение);
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ОбновитьСтатусыСерийИПодарочныхСертификатов(Объект.Товары);
	БонусныеБаллыСервер.ОбновитьОтображениеБонусов(Объект, , , "НомерСтроки");
	
	НастроитьОтображениеРеквизитовСчетаФактуры(
		ЭтотОбъект,
		ПродажиСервер.ПараметрыПредставленияСчетаФактуры(Объект.Ссылка, Объект.Организация));
		
	ПараметрыУказанияСерий = Новый ФиксированнаяСтруктура(Документы.ВозвратТоваровОтПокупателя.ПараметрыУказанияСерий(ТекущийОбъект));
	ОбновитьРеквизитыОбменаСГИСМ();
	
	// ИнтеграцияЕГАИС - отключенный функционал
	ЕстьПереданныеЧекиЕГАИС = Ложь; //ЕстьПереданныеЧекиЕГАИС(Объект.Ссылка);
	// Конец ИнтеграцияЕГАИС
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

	//ИнтеграцияИСМПТК
	//ИСМПТ
	РаботаСДокументамиИСМПТКПереопределяемый.ОбновитьРеквизитыИСМПТ(ЭтаФорма);
	//ИСЦЭДМ
	РаботаСДокументамиИСМПТКПереопределяемый.ОбновитьРеквизитыИСЦЭДМ(ЭтаФорма);
	//Конец ИнтеграцияИСМПТК
	
	// ГосИС
	СобытияФормИС.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец ГосИС
	
КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	// СтандартныеПодсистемы.РаботаСКонтрагентами
	ПроверкаКонтрагентов.ПриЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.РаботаСКонтрагентами
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)

	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьПризнакИспользованияХарактеристик(Объект.Товары);
	СтруктураМарки = Новый Структура;
	СтруктураМарки.Вставить("Дата", Объект.Дата);
	ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьНеобходимостьВводаАкцизнойМарки(Объект.Товары, СтруктураМарки);
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ЗаполнитьСуммуВсегоВТаблице(Объект.Товары, Объект.ЦенаВключаетНДС);
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ОбновитьСуммыПодвала(Объект.Товары, Объект.ЦенаВключаетНДС, СуммаВсего);
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ОбновитьСтатусыСерийИПодарочныхСертификатов(Объект.Товары);
	БонусныеБаллыСервер.ОбновитьОтображениеБонусов(Объект, , , "НомерСтроки");
	
	// СтандартныеПодсистемы.РаботаСКонтрагентами
	ПроверкаКонтрагентов.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.РаботаСКонтрагентами
	
	// ИнтеграцияГИСМ
	Если ПолучитьФункциональнуюОпцию("ОтключенныйФункционал") Тогда
	ОбновитьРеквизитыОбменаСГИСМ();
	КонецЕсли;
	// Конец ИнтеграцияГИСМ
	
	// ИнтеграцияЕГАИС - отключенный функционал
	//УстановитьВидимостьИДоступностьЕГАИС(ЭтотОбъект);
	// Конец ИнтеграцияЕГАИС
	
	// ГосИС
	СобытияФормИС.ПослеЗаписиНаСервере(ЭтотОбъект);
	// Конец ГосИС
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	ОбщегоНазначенияРТКлиентСервер.ОбновитьСостояниеДокумента(Объект, Элементы.КартинкаСостоянияДокумента.Подсказка, КартинкаСостоянияДокумента, РазрешеноПроведение);
	
	// &ЗамерПроизводительности 
	ОценкаПроизводительностиРТКлиент.ЗакончитьЗамер(ПараметрыЗаписи.Замер);
	
	// ГосИС
	СобытияФормИСКлиент.ПослеЗаписи(ЭтотОбъект, ПараметрыЗаписи);
	// Конец ГосИС
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	// &ЗамерПроизводительности 
	Замер = ОценкаПроизводительностиРТКлиент.НачатьЗамер(Ложь, 
								"Документ.ВозвратТоваровОтПокупателя.ФормаДокумента.Запись",
															Ложь);
	
	ПараметрыЗаписи.Вставить("Замер", Замер);

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаНавигационнойСсылки(НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СобытияФормИСКлиент.ОбработкаНавигационнойСсылки(ЭтотОбъект, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура АналитикаХозяйственнойОперацииНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	// &ЗамерПроизводительности
	ОценкаПроизводительностиРТКлиент.НачатьЗамер(
	Истина, "Справочник.АналитикаХозяйственныхОпераций.Форма.ФормаВыбора.Открытие");
КонецПроцедуры

&НаКлиенте
Процедура ДисконтнаяКартаПриИзменении(Элемент)
	
	ИнформационныеКартыКлиент.ПровестиОпросВладельца(Объект.ДисконтнаяКарта, ОбщегоНазначенияКлиент.ДатаСеанса());
	
	ПриИзмененииДисконтнаяКартаСервер();
	
	Если ЭтоLinuxСервер Тогда
		ОбработчикОповещения = Новый ОписаниеОповещения("ОповещениеУстановкаКомпонентыСклонения", ЭтотОбъект);
		Если ОбщегоНазначенияРТКлиент.КомпонентаСклоненияУстановлена(ОбработчикОповещения) Тогда
			ФИОФизЛица = ОбщегоНазначенияРТКлиентСерверПовтИсп.ПолучитьСклонениеФИО(ФИОФизЛицаИП, 3);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура МагазинПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.Магазин) Тогда
		ПриИзмененииМагазинСервер();
		КассаККМПриИзмененииКлиент();
	Иначе
		ОбработкаТабличнойЧастиТоварыКлиентСервер.ОбновитьСтатусыСерийИПодарочныхСертификатов(Объект.Товары);
		Объект.СистемаНалогообложения = ПредопределенноеЗначение("Перечисление.ТипыСистемНалогообложенияККТ.ПустаяСсылка");
	КонецЕсли;
		
	УстановитьДоступностьЭлементов();
	
	// ИнтеграцияГИСМ - Отключенный функционал
	//ОбновитьРеквизитыОбменаСГИСМ();
	// Конец ИнтеграцияГИСМ
	
КонецПроцедуры

&НаКлиенте
Процедура СкладПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.Склад) Тогда
		ПриИзмененииСкладСервер();
	Иначе
		Объект.СистемаНалогообложения = ПредопределенноеЗначение("Перечисление.ТипыСистемНалогообложенияККТ.ПустаяСсылка");
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура УчитыватьНДСПриИзменении(Элемент)
	
	Если Объект.УчитыватьНДС = Ложь Тогда
		
		Объект.ЦенаВключаетНДС = Ложь;
		
	КонецЕсли;

	ПриИзмененииУчитыватьНДССервер();
	
КонецПроцедуры

&НаКлиенте
Процедура ЦенаВключаетНДСПриИзменении(Элемент)
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", ОбработкаТабличнойЧастиТоварыКлиент.СтруктураПересчетаСуммыНДСВТЧ(Объект));
	ОбработкаТабличнойЧастиТоварыКлиент.ПриИзмененииРеквизитовВТЧКлиент(Объект.Товары, , СтруктураДействий, КэшированныеЗначения);
	
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ЗаполнитьСуммуВсегоВТаблице(Объект.Товары, Объект.ЦенаВключаетНДС);
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ОбновитьСуммыПодвала(Объект.Товары, Объект.ЦенаВключаетНДС, СуммаВсего);
		
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	ОрганизацияПриИзмененииСервер();
	КассаККМПриИзмененииКлиент();
	
КонецПроцедуры

&НаКлиенте
Процедура ТекстСчетФактураНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПродажиКлиент.ВвестиСчетФактуру(ЭтотОбъект, Объект, Истина, Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура СписокСчетовФактурНажатие(Элемент)
	
	СтруктураОтбор = Новый Структура;
	СтруктураОтбор.Вставить("ДокументОснование", Объект.Ссылка);
	СтруктураОтбор.Вставить("Организация",       Объект.Организация);
	СтруктураОтбор.Вставить("ПометкаУдаления",   Ложь);
	
	ОткрытьФорму(
		"Документ.СчетФактураВыданный.ФормаСписка",
		Новый Структура("Отбор", СтруктураОтбор),
		ЭтотОбъект);
		
КонецПроцедуры

&НаКлиенте
Процедура ФизЛицоПриИзменении(Элемент)
	ЗаполнениеФизЛицаСервер();
	
	Если ЭтоLinuxСервер Тогда
		ОбработчикОповещения = Новый ОписаниеОповещения("ОповещениеУстановкаКомпонентыСклонения", ЭтотОбъект);
		Если ОбщегоНазначенияРТКлиент.КомпонентаСклоненияУстановлена(ОбработчикОповещения) Тогда
			ФИОФизЛица = ОбщегоНазначенияРТКлиентСерверПовтИсп.ПолучитьСклонениеФИО(ФИОФизЛицаИП, 3);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	
	// СтандартныеПодсистемы.РаботаСКонтрагентами
	ПроверкаКонтрагентовКлиент.ЗапуститьПроверкуКонтрагентовВДокументе(ЭтотОбъект, Объект.Дата);
	// Конец СтандартныеПодсистемы.РаботаСКонтрагентами
	
	ДатаПриИзмененииНаСервере();
	
	Если Объект.Товары.Количество() > 0 Тогда 
		
		СтруктураДействий = Новый Структура;
		СтруктураДействий.Вставить("ЗаполнитьСтавкуНДССкладВШапке", 
			ОбработкаТабличнойЧастиТоварыКлиентСервер.СтруктураПараметровСтавкиНДССкладВидНалогаВШапке(Объект));
		СтруктураДействий.Вставить("ПересчитатьСуммуНДС", 
			ОбработкаТабличнойЧастиТоварыКлиентСервер.СтруктураПересчетаСуммыНДСВТЧ(Объект));
		
		ОбработкаТабличнойЧастиТоварыКлиент.ПриИзмененииРеквизитовВТЧКлиент(Объект.Товары, , СтруктураДействий, Неопределено);
		ОбработкаТабличнойЧастиТоварыКлиентСервер.ЗаполнитьСуммуВсегоВТаблице(Объект.Товары, Объект.ЦенаВключаетНДС);
		ОбработкаТабличнойЧастиТоварыКлиентСервер.ОбновитьСуммыПодвала(Объект.Товары, Объект.ЦенаВключаетНДС, СуммаВсего);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ДатаПриИзмененииНаСервере()
	
	ЗаполнитьСистемуНалогообложения();
	
	ЗаполнитьСтавкиНДС();
	
	// ИнтеграцияЕГАИС - отключенный функционал
	ВестиУчетАлкогольнойПродукции = Ложь; //ИнтеграцияЕГАИСРТ.НужноРаботатьСЕГАИС(Объект.Дата);
	// Конец ИнтеграцияЕГАИС
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентПриИзменении(Элемент)
	// СтандартныеПодсистемы.РаботаСКонтрагентами
	ПроверкаКонтрагентовКлиент.ЗапуститьПроверкуКонтрагентовВДокументе(ЭтотОбъект, Элемент);
	// Конец СтандартныеПодсистемы.РаботаСКонтрагентами
КонецПроцедуры

&НаКлиенте
Процедура КомментарийПриИзменении(Элемент)
	ПодключитьОбработчикОжидания("Подключаемый_УстановитьКартинкуДляКомментария", 0.5, Истина);
КонецПроцедуры

&НаКлиенте
Процедура КассаККМПриИзменении(Элемент)
	
	КассаККМПриИзмененииКлиент();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыТовары

&НаКлиенте
Процедура ТоварыПередНачаломИзменения(Элемент, Отказ)
	
	ТоварыВводДополнительнойИнформации(Элемент, Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПередУдалением(Элемент, Отказ)
	
	ОбработкаТабличнойЧастиТоварыКлиент.ОбновитьКэшированныеЗначенияДляУчетаСерий(
				Элемент,КэшированныеЗначения,ПараметрыУказанияСерий);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если Копирование Тогда
		
		ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
		
		ТекущаяСтрока.КлючСвязи = 0;
		ОбработкаТабличнойЧастиТоварыКлиентСервер.ЗаполнитьКлючСвязи(Объект.Товары, ТекущаяСтрока, "КлючСвязи");
		
	КонецЕсли;
	
	ОбработкаТабличнойЧастиТоварыКлиент.ОбновитьКэшированныеЗначенияДляУчетаСерий(
				Элемент,КэшированныеЗначения,ПараметрыУказанияСерий, Копирование);
	
	РедактированиеТЧТовары = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
		
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ОбновитьСуммыПодвала(Объект.Товары, Объект.ЦенаВключаетНДС, СуммаВсего);
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
	Если ОбработкаТабличнойЧастиТоварыКлиент.НеобходимоОбновитьСтатусыСерий(
		Элемент,КэшированныеЗначения,ПараметрыУказанияСерий) Тогда
		
		ТекущаяСтрокаИдентификатор = ТекущиеДанные.ПолучитьИдентификатор();
		
		ЗаполнитьСтатусыУказанияСерийПриОкончанииРедактированияСтрокиТЧ(ТекущаяСтрокаИдентификатор, КэшированныеЗначения);
		ОбработкаТабличнойЧастиТоварыКлиент.ОбновитьКэшированныеЗначенияДляУчетаСерий(Элемент,КэшированныеЗначения,ПараметрыУказанияСерий);
		
	КонецЕсли;
	
	Если Объект.Товары.Количество() = 1 Тогда
		Объект.ДоговорКонтрагента = ТекущиеДанные.ДоговорКонтрагента;
	КонецЕсли;
	
	ОбработкаТабличнойЧастиТоварыКлиент.ОбновитьСтатусСерийИПодарочныхСертификатов(ТекущиеДанные);
	
	РедактированиеТЧТовары = Ложь;
	
	ПриИзмененииЭлементаГосИС();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииЭлементаГосИС()
	
	ДополнительныеПараметры = Новый Структура;
	СобытияФормРТКлиент.ПриИзмененииЭлемента(ЭтотОбъект, "Товары", ДополнительныеПараметры);
	Если ДополнительныеПараметры.Свойство("ТребуетсяСерверныйВызов") Тогда
		ПодключитьОбработчикОжидания("ТоварыПриОкончанииРедактированияДляСерверногоВызова", 0.5, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриОкончанииРедактированияДляСерверногоВызова()
	
	ТоварыПриОкончанииРедактированияНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ТоварыПриОкончанииРедактированияНаСервере()
	
	СобытияФормРТ.ПриИзмененииЭлемента(ЭтотОбъект, "Товары");
	
КонецПроцедуры



&НаКлиенте
Процедура ТоварыПослеУдаления(Элемент)
	
	Если ОбработкаТабличнойЧастиТоварыКлиент.НеобходимоОбновитьСтатусыСерий(
		Элемент,КэшированныеЗначения,ПараметрыУказанияСерий,Истина) Тогда
		
		ЗаполнитьСтатусыУказанияСерийПриОкончанииРедактированияСтрокиТЧ(Неопределено, КэшированныеЗначения);
		ОбработкаТабличнойЧастиТоварыКлиент.ОбновитьКэшированныеЗначенияДляУчетаСерий(
					Элемент,КэшированныеЗначения,ПараметрыУказанияСерий);
		
	КонецЕсли;
	
	ТоварыПослеУдаленияСервер();
	
	// ИнтеграцияЕГАИС - отключенный функционал
	Если Ложь И ЕстьАлкогольнаяПродукцияЕГАИС Тогда
		ЕстьАлкогольнаяПродукцияЕГАИС = Ложь;
		Для Каждого СтрокаТовары Из Объект.Товары Цикл
			Если СтрокаТовары.НеобходимостьВводаАкцизнойМарки Тогда
				ЕстьАлкогольнаяПродукцияЕГАИС = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		УстановитьВидимостьИДоступностьЕГАИС(ЭтотОбъект);
	КонецЕсли;
	// Конец ИнтеграцияЕГАИС
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыНоменклатураПриИзменении(Элемент)
	
	ПриИзмененииТоварыНоменклатура();
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыХарактеристикаПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", ОбработкаТабличнойЧастиТоварыКлиент.СтруктураПересчетаСуммыНДСВСтрокеТЧ(Объект));
	СтруктураДействий.Вставить("ПересчитатьСумму");
	
	ОбработкаТабличнойЧастиТоварыКлиент.ПриИзмененииРеквизитовВТЧКлиент(Объект.Товары, ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ЗаполнитьСуммуВсегоВСтрокеТаблицы(ТекущаяСтрока, Объект.ЦенаВключаетНДС);
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ОбновитьСуммыПодвала(Объект.Товары, Объект.ЦенаВключаетНДС, СуммаВсего);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыХарактеристикаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОбработкаТабличнойЧастиТоварыКлиент.ВыбратьХарактеристикуНоменклатуры(ЭтотОбъект, Элемент, СтандартнаяОбработка, Элементы.Товары.ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыХарактеристикаСоздание(Элемент, СтандартнаяОбработка)
	
	ОбработкаТабличнойЧастиТоварыКлиент.СоздатьХарактеристикуНоменклатуры(ЭтотОбъект, Элемент, СтандартнаяОбработка, Элементы.Товары.ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыУпаковкаПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
	
	Если ТекущаяСтрока.Количество > 0 Тогда
		СтруктураДействий.Вставить("ПересчитатьЦенуЗаУпаковку", ТекущаяСтрока.Количество);
	Иначе
		СтруктураДействий.Вставить("ЗаполнитьЦенуПродажи", ОбработкаТабличнойЧастиТоварыКлиент.СтруктураЗаполненияЦеныПродажиВСтрокеТЧ(Объект, Истина));
	КонецЕсли;
	
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", ОбработкаТабличнойЧастиТоварыКлиент.СтруктураПересчетаСуммыНДСВСтрокеТЧ(Объект));
	СтруктураДействий.Вставить("ПересчитатьСумму");
	
	ОбработкаТабличнойЧастиТоварыКлиент.ПриИзмененииРеквизитовВТЧКлиент(Объект.Товары, ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ЗаполнитьСуммуВсегоВСтрокеТаблицы(ТекущаяСтрока, Объект.ЦенаВключаетНДС);
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ОбновитьСуммыПодвала(Объект.Товары, Объект.ЦенаВключаетНДС, СуммаВсего);
	
	// ИнтеграцияЕГАИС - отключенный функционал
	//ИнтеграцияЕГАИСРТКлиент.УстановитьЗначениеСтатусАкцизныхМарокВСтроке(ТекущаяСтрока);
	// Конец ИнтеграцияЕГАИС
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыУпаковкаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОбработкаТабличнойЧастиТоварыКлиент.ВыбратьУпаковкуНоменклатуры(ДанныеВыбора, СтандартнаяОбработка, Элементы.Товары.ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыКоличествоУпаковокПриИзменении(Элемент)
	
	ПриИзмененииТоварыКоличестваУпаковок();
	
	// ИнтеграцияЕГАИС - отключенный функционал
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	//ИнтеграцияЕГАИСРТКлиент.УстановитьЗначениеСтатусАкцизныхМарокВСтроке(ТекущаяСтрока);
	// Конец ИнтеграцияЕГАИС
	
	ПриИзмененииЭлементаГосИС();
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыЧекККМПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	ПриИзмененииТоварыЧекККМСервер(ТекущаяСтрока.ЧекККМ);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ЗаполнитьДанныеПоДокументуПродажи", "ЧекККМ");
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", ОбработкаТабличнойЧастиТоварыКлиент.СтруктураПересчетаСуммыНДСВСтрокеТЧ(Объект));
	СтруктураДействий.Вставить("ПересчитатьСумму");
	
	ОбработкаТабличнойЧастиТоварыКлиент.ПриИзмененииРеквизитовВТЧКлиент(Объект.Товары, ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ЗаполнитьСуммуВсегоВСтрокеТаблицы(ТекущаяСтрока, Объект.ЦенаВключаетНДС);
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ОбновитьСуммыПодвала(Объект.Товары, Объект.ЦенаВключаетНДС, СуммаВсего);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыЧекККМНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	Перем ДатаС;
	
	СтандартнаяОбработка = Ложь;
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	Если ТекущаяСтрока = Неопределено ИЛИ НЕ ЗначениеЗаполнено(ТекущаяСтрока.Номенклатура) Тогда
		Возврат;
	КонецЕсли;
	
	// Найдем чеки по дате
	
	ТекстПодсказки = НСтр("ru = 'Введите дату чека:'");
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Номенклатура"  , ТекущаяСтрока.Номенклатура);
	ДополнительныеПараметры.Вставить("Характеристика", ТекущаяСтрока.Характеристика);
	ДополнительныеПараметры.Вставить("Элемент"       , Элемент);
	
	ОбработчикОповещения = Новый ОписаниеОповещения("ОповещениеВводДатыЧекаККМ", ЭтотОбъект, ДополнительныеПараметры);
	ДатаИсходная = Объект.Дата - 14*24*60*60;
	ЧастьДаты = ЧастиДаты.Дата;
	ПоказатьВводДаты(ОбработчикОповещения, ДатаИсходная, ТекстПодсказки, ЧастьДаты) 
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыДокументПродажиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	
	СтандартнаяОбработка = Ложь;
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	Если НЕ ЗначениеЗаполнено(ТекущаяСтрока.Номенклатура) Тогда
		Возврат;
	КонецЕсли;
	
	// Найдем документы оплаты по диапазону.
	
	ТекстПодсказки = НСтр("ru = 'Введите дату начала поиска документов:'");
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Номенклатура"  , ТекущаяСтрока.Номенклатура);
	ДополнительныеПараметры.Вставить("Характеристика", ТекущаяСтрока.Характеристика);
	ДополнительныеПараметры.Вставить("Элемент"       , Элемент);
	
	ДополнительныеПараметры.Вставить("ИндексТекущейСтроки", ТекущаяСтрока.ПолучитьИдентификатор());
	
	ОбработчикОповещения = Новый ОписаниеОповещения("ОповещениеВводДатыНачалаПоискаДокументов", ЭтотОбъект, ДополнительныеПараметры);
	ДатаИсходная = ДобавитьМесяц(Объект.Дата, -1);
	ЧастьДаты = ЧастиДаты.Дата;
	ПоказатьВводДаты(ОбработчикОповещения, ДатаИсходная, ТекстПодсказки, ЧастьДаты) 
	
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыЦенаПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", ОбработкаТабличнойЧастиТоварыКлиент.СтруктураПересчетаСуммыНДСВСтрокеТЧ(Объект));
	СтруктураДействий.Вставить("ПересчитатьСумму");
	
	ОбработкаТабличнойЧастиТоварыКлиент.ПриИзмененииРеквизитовВТЧКлиент(Объект.Товары, ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ЗаполнитьСуммуВсегоВСтрокеТаблицы(ТекущаяСтрока, Объект.ЦенаВключаетНДС);
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ОбновитьСуммыПодвала(Объект.Товары, Объект.ЦенаВключаетНДС, СуммаВсего);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСуммаПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьЦенуПоСуммеВЗакупках");
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС",  ОбработкаТабличнойЧастиТоварыКлиент.СтруктураПересчетаСуммыНДСВСтрокеТЧ(Объект));
	ОбработкаТабличнойЧастиТоварыКлиент.ПриИзмененииРеквизитовВТЧКлиент(Объект.Товары, ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ЗаполнитьСуммуВсегоВСтрокеТаблицы(ТекущаяСтрока, Объект.ЦенаВключаетНДС);
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ОбновитьСуммыПодвала(Объект.Товары, Объект.ЦенаВключаетНДС, СуммаВсего);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСтавкаНДСПриИзменении(Элемент)

	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;

	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", ОбработкаТабличнойЧастиТоварыКлиент.СтруктураПересчетаСуммыНДСВСтрокеТЧ(Объект));
	СтруктураДействий.Вставить("ПересчитатьСумму");
	
	ОбработкаТабличнойЧастиТоварыКлиент.ПриИзмененииРеквизитовВТЧКлиент(Объект.Товары, ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);

	ОбработкаТабличнойЧастиТоварыКлиентСервер.ЗаполнитьСуммуВсегоВСтрокеТаблицы(ТекущаяСтрока, Объект.ЦенаВключаетНДС);
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ОбновитьСуммыПодвала(Объект.Товары, Объект.ЦенаВключаетНДС, СуммаВсего);

КонецПроцедуры

&НаКлиенте
Процедура ТоварыСуммаВсегоПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	СтруктураПересчета = ОбработкаТабличнойЧастиТоварыКлиент.СтруктураПересчетаСуммыНДСВСтрокеТЧ(Объект);
	
	СтруктураДействий.Вставить("ПересчитатьСуммуНДСПоСуммеСНДС", СтруктураПересчета);
	СтруктураДействий.Вставить("ПересчитатьСуммуПоСуммеСНДС", СтруктураПересчета);
	СтруктураДействий.Вставить("ПересчитатьЦенуПоСуммеВЗакупках", СтруктураПересчета);
	
	ОбработкаТабличнойЧастиТоварыКлиент.ПриИзмененииРеквизитовВТЧКлиент(Объект.Товары, ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ОбновитьСуммыПодвала(Объект.Товары, Объект.ЦенаВключаетНДС, СуммаВсего);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриАктивизацииЯчейки(Элемент)
	
	Если РедактированиеТЧТовары Тогда
		ТоварыВводДополнительнойИнформации(Элемент);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ОткрытьПодбор(Команда)
	
	Отказ = Ложь;
	Если Не ЗначениеЗаполнено(Объект.Магазин) Тогда
		ОчиститьСообщения();
		СообщитьОбОшибкахОткрытияПодбора(Отказ);
	КонецЕсли;
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрЗаголовок = НСтр("ru = 'Подбор товаров в %Документ%'");
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ПараметрЗаголовок = СтрЗаменить(ПараметрЗаголовок, "%Документ%", Объект.Ссылка);
	Иначе
		ПараметрЗаголовок = СтрЗаменить(ПараметрЗаголовок, "%Документ%", НСтр("ru = 'возврат товаров от покупателя'"));
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Магазин",    Объект.Магазин);
	ПараметрыФормы.Вставить("РежимПодбораБезУслуг", Ложь);
	ПараметрыФормы.Вставить("РежимПодбораБезСертификатов", Истина);
	ПараметрыФормы.Вставить("Склад", Объект.Склад);
	ПараметрыФормы.Вставить("Заголовок", ПараметрЗаголовок);
	ПараметрыФормы.Вставить("Дата", Объект.Дата);
	
	Если НЕ ЕстьПравоИзменятьЦену() Тогда
		ПараметрыФормы.Вставить("РежимПодбораБезСуммовыхПараметров", Истина);
		ПараметрыФормы.Вставить("ЗаголовокКнопкиЗапрашиватьКоличествоИЦену",НСтр("ru = 'Запрашивать количество'"));
	КонецЕсли;
	
	ОткрытьФорму("Обработка.ПодборТоваров.Форма", ПараметрыФормы, ЭтотОбъект, УникальныйИдентификатор);
	
КонецПроцедуры

#Область ОбработчикиКомандПодключаемогоОборудования

&НаКлиенте
Процедура ВыгрузитьДанныеВТСД(Команда)
	
	ПодключаемоеОборудованиеРТКлиент.ВыгрузитьДокументВТСД(ЭтотОбъект, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьДанныеИзТСД(Команда)
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ВыбиратьНенайденные", Ложь);
	ДополнительныеПараметры.Вставить("ОбработатьПослеЗагрузки", Истина);
	ПодключаемоеОборудованиеРТКлиент.ПолучитьДанныеИзТСД(ЭтотОбъект, ДополнительныеПараметры);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоискПоМагнитномуКоду(Команда)
	
	ОбработкаТабличнойЧастиТоварыКлиент.ВвестиМагнитныйКод(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоискПоШтрихкоду(Команда)
	
	ШтрихкодированиеИСКлиент.ПоказатьВводШтрихкода(ОписаниеОповещенияОбработкиКодаМаркировки());
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьВес(Команда)
	
	ОповещенияПриПолученииВеса = Новый ОписаниеОповещения("ПолучитьВесЗавершение", ЭтотОбъект);
	ПодключаемоеОборудованиеРТКлиент.ПолучениеВесаСЭлектронныхВесовДляТабличнойЧасти(ОповещенияПриПолученииВеса, ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура РазвернутьСвернутьТЧ(Команда)
	РазвернутьСвернутьТЧНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ВвестиИсправлениеСчетаФактуры(Команда)
	
	ПродажиКлиент.ВвестиСчетФактуру(ЭтотОбъект, Объект, Ложь, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьКонтрагента(Команда)
	
	// СтандартныеПодсистемы.РаботаСКонтрагентами
	ПроверкаКонтрагентовКлиент.ПроверитьКонтрагентовВДокументеПоКнопке(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.РаботаСКонтрагентами
	
КонецПроцедуры

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат) Экспорт
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

&НаКлиенте
Процедура ПробитьЧек(Команда)
	
	Если Объект.ПробитЧек Тогда
		ТекстСообщения = НСтр("ru = 'Чек уже пробит на фискальном регистраторе.'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	ОповещениеЗавершенияПроверки = Новый ОписаниеОповещения("ПроверитьВозможностьПечатиЧекаЗавершение", ЭтотОбъект);
	ФинансыКлиент.ПроверитьВозможностьПечатиЧека(ОповещениеЗавершенияПроверки, ЭтотОбъект);
	
КонецПроцедуры

// ИнтеграцияЕГАИС
&НаКлиенте
Процедура СоздатьНаОснованииЧекЕГАИСВозврат(Команда)
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) ИЛИ Модифицированность Тогда
		ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Данные еще не записаны.
				|Выполнение действия ""%1"" возможно только после записи данных.
				|Данные будут записаны.'"),
			НСтр("ru='Чек ЕГАИС на возврат: создать на основании'"));
			
		ОписаниеОповещения = Новый ОписаниеОповещения("СоздатьНаОснованииЧекЕГАИСВозвратПодтверждениеЗаписи", ЭтотОбъект);
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ОКОтмена);
		Возврат;
	КонецЕсли;
	
	СоздатьЧекЕГАИСВозвратПослеЗаписиВозвратаОтПокупателя();
	
КонецПроцедуры
// Конец ИнтеграцияЕГАИС

&НаКлиенте
Процедура СкопироватьСтроки(Команда)
	
	Если КопированиеСтрокКлиент.ВозможноКопированиеСтрок(Элементы.Товары.ТекущаяСтрока) Тогда
		СкопироватьСтрокиНаСервере();
		КопированиеСтрокКлиент.ОповеститьПользователяОКопированииСтрок(Элементы.Товары.ВыделенныеСтроки.Количество());
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВставитьСтроки(Команда)

	КоличествоТоваровДоВставки = Объект.Товары.Количество();
	ПолучитьСтрокиИзБуфераОбмена();
	КоличествоВставленных = Объект.Товары.Количество() - КоличествоТоваровДоВставки;
	КопированиеСтрокКлиент.ОповеститьПользователяОВставкеСтрок(КоличествоВставленных);
	
	// Интерфейс ЕГАИС
	ИнтеграцияЕГАИСРТКлиент.УстановитьЗначениеСтатусАкцизныхМарок(Объект.Товары);
	
КонецПроцедуры
// Конец ИнтеграцияЕГАИС

&НаКлиенте
Процедура ПоискПоНаименованию(Команда)
	
	ПараметрыПоиска = Новый Структура;
	ПараметрыПоиска.Вставить("Магазин",Объект.Магазин);
	РаботаСПравиламиИменованияКлиент.ПоискПоНаименованию(ЭтаФорма,ПараметрыПоиска);
	
КонецПроцедуры


&НаКлиенте
Процедура КомандаEmail(Команда)
	
	ДополнительныеПараметры = Новый Структура;
	ОбработчикОповещения = Новый ОписаниеОповещения("ОповещениеОткрытиеФормыВводаEmail", ЭтотОбъект, ДополнительныеПараметры);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Email", Объект.АдресЭП);
	ПараметрыФормы.Вставить("ДисконтнаяКарта", Объект.ДисконтнаяКарта);
	ПараметрыФормы.Вставить("Заголовок", НСтр("ru = 'Введите адрес электронной почты (Email)'"));
	ПараметрыФормы.Вставить("ОтказКлиентаОтСохраненияEmail", ОтказКлиентаОтСохраненияТелефонаEmail);
	
	ПодключаемоеОборудованиеРТКлиент.ОткрытьФормуВводаEmailОтправкиЧерезОФД(ОбработчикОповещения, ПараметрыФормы);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаSMS(Команда)
	
	ДополнительныеПараметры = Новый Структура;
	ОбработчикОповещения = Новый ОписаниеОповещения("ОповещениеОткрытиеФормыВводаТелефона", ЭтотОбъект, ДополнительныеПараметры);
	
	Если ЗначениеЗаполнено(Объект.Телефон) Тогда
		Телефон = Число(Объект.Телефон);
	Иначе
		Телефон = 0;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Заголовок" , НСтр("ru = 'Введите номер телефона'"));
	ПараметрыФормы.Вставить("ДисконтнаяКарта", Объект.ДисконтнаяКарта);
	ПараметрыФормы.Вставить("ЧислоВвода", Телефон);
	ПараметрыФормы.Вставить("ОтказКлиентаОтСохраненияТелефона", ОтказКлиентаОтСохраненияТелефонаEmail);
	
	ПодключаемоеОборудованиеРТКлиент.ОткрытьФормуВводаТелефонаДляОтправкиЧерезОФД(ОбработчикОповещения, ПараметрыФормы);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции


#Область Штрихкодирование

&НаКлиенте
Процедура ОбработатьКодМаркировки(ИсходныеДанные, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если ИсходныеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыСканирования = ШтрихкодированиеОбщегоНазначенияИСКлиент.ПараметрыСканирования(ЭтотОбъект);
	
	ШтрихкодированиеОбщегоНазначенияИСКлиентСервер.ЗакодироватьШтрихкодДанныхBase64(ИсходныеДанные);
	
	РезультатОбработки = ОбработатьВводШтрихкода(ИсходныеДанные, Неопределено, ПараметрыСканирования);
	
	ПараметрыЗавершенияВводаШтрихкода = ПараметрыЗавершенияВводаШтрихкода(ИсходныеДанные, РезультатОбработки, ПараметрыСканирования);
	ШтрихкодированиеОбщегоНазначенияИСКлиент.ЗавершитьОбработкуШтрихкода(ПараметрыЗавершенияВводаШтрихкода);
	
КонецПроцедуры

&НаСервере
Функция ОбработатьВводШтрихкода(ДанныеШтрихкода, КэшированныеЗначения, ПараметрыСканирования = Неопределено)
	
	РезультатОбработкиШтрихкода =
		ШтрихкодированиеОбщегоНазначенияИС.ОбработатьВводШтрихкода(ЭтотОбъект, ДанныеШтрихкода, КэшированныеЗначения, ПараметрыСканирования);
	
	ПослеОбработкиШтрихкодов(РезультатОбработкиШтрихкода, КэшированныеЗначения);
	
	Возврат РезультатОбработкиШтрихкода;
	
КонецФункции

&НаСервере
Процедура ПослеОбработкиШтрихкодов(РезультатОбработкиШтрихкода, КэшированныеЗначения)
	
	Если Не РезультатОбработкиШтрихкода.ТребуетсяОбработкаШтрихкода Тогда
		
		ОбработатьСтрокиТЧ(
			РезультатОбработкиШтрихкода.ДобавленныеСтроки,
			РезультатОбработкиШтрихкода.ИзмененныеСтроки,
			КэшированныеЗначения,
			РезультатОбработкиШтрихкода.ОбработкаШтрихкодаБезМарки);
			
		РезультатОбработкиШтрихкода.ИзмененныеСтроки = Неопределено;
		РезультатОбработкиШтрихкода.ДобавленныеСтроки = Неопределено;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ПараметрыЗавершенияВводаШтрихкода(ИсходныеДанные, РезультатОбработки, ПараметрыСканирования)
	
	ПараметрыЗавершенияВводаШтрихкода = ШтрихкодированиеОбщегоНазначенияИСКлиент.ПараметрыЗавершенияОбработкиШтрихкода();
	ПараметрыЗавершенияВводаШтрихкода.РезультатОбработкиШтрихкода = РезультатОбработки;
	ПараметрыЗавершенияВводаШтрихкода.Форма                       = ЭтотОбъект;
	ПараметрыЗавершенияВводаШтрихкода.ПараметрыСканирования       = ПараметрыСканирования;
	ПараметрыЗавершенияВводаШтрихкода.ДанныеШтрихкода             = ИсходныеДанные;
	ПараметрыЗавершенияВводаШтрихкода.ОбработатьШтрихкод          = "ОбработатьКодМаркировки";
	ПараметрыЗавершенияВводаШтрихкода.ВыполнитьДействие           = "ОбработкаКодаМаркировкиВыполнитьДействие";
	ПараметрыЗавершенияВводаШтрихкода.ЗавершениеОбработки         = "ОповещениеЗавершениеОбработкиКодаМаркировки";
	
	Возврат ПараметрыЗавершенияВводаШтрихкода;
	
КонецФункции

&НаКлиенте
Процедура ОповещениеЗавершениеОбработкиКодаМаркировки(Результат, ДополнительныеПараметры) Экспорт 
	
	Если Результат = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Если Результат.ТребуетсяОбработкаШтрихкода Тогда
		Штрихкод = Неопределено;
		Если ЗначениеЗаполнено(Результат.Штрихкод) Тогда
			Штрихкод = Результат.Штрихкод;
		ИначеЕсли ТипЗнч(Результат.ИсходныеДанные) = Тип("Структура") И Результат.ИсходныеДанные.Свойство("Штрихкод") Тогда
			Штрихкод = Результат.ИсходныеДанные.Штрихкод;
		ИначеЕсли ТипЗнч(Результат.ДанныеШтрихкода) = Тип("Структура") И Результат.ДанныеШтрихкода.Свойство("Штрихкод") Тогда
			Штрихкод = Результат.ДанныеШтрихкода.Штрихкод;
		ИначеЕсли ТипЗнч(Результат.ДанныеШтрихкода) = Тип("Строка") Тогда
			Штрихкод = Результат.ДанныеШтрихкода;
		КонецЕсли;
		
		// Обработаем штрихкод средствами РТ.
		Если ЗначениеЗаполнено(Штрихкод) Тогда
			ОповещениеПоискаПоШтрихкоду(Штрихкод);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ОписаниеОповещенияОбработкиКодаМаркировки()
	
	Возврат Новый ОписаниеОповещения("ОбработатьКодМаркировки", ЭтотОбъект);
	
КонецФункции

&НаКлиенте
Функция ОбработкаКодаМаркировкиВыполнитьДействие(ДанныеДляВыполненияДействия, ДополнительныеПараметры) Экспорт
	
	РезультатВыбора             = ДанныеДляВыполненияДействия.РезультатВыбора;
	РезультатОбработкиШтрихкода = ДанныеДляВыполненияДействия.РезультатОбработкиШтрихкода;
	КэшированныеЗначения        = ДанныеДляВыполненияДействия.КэшированныеЗначения;
	ПараметрыСканирования       = ДанныеДляВыполненияДействия.ПараметрыСканирования;
	
	Действие = ДанныеДляВыполненияДействия.Действие;
	РезультатОбработкиШтрихкода = ОбработкаКодаМаркировкиВыполнитьДействиеСервер(Действие, РезультатВыбора, РезультатОбработкиШтрихкода, ПараметрыСканирования, КэшированныеЗначения);
	
	ПараметрыЗавершенияВводаШтрихкода = ПараметрыЗавершенияВводаШтрихкода(
		ДанныеДляВыполненияДействия.ИсходныеДанные, РезультатОбработкиШтрихкода, ДанныеДляВыполненияДействия.ПараметрыСканирования);
	ШтрихкодированиеОбщегоНазначенияИСКлиент.ЗавершитьОбработкуШтрихкода(ПараметрыЗавершенияВводаШтрихкода);
	
КонецФункции

&НаСервере
Функция ОбработкаКодаМаркировкиВыполнитьДействиеСервер(Действие, РезультатВыбора, РезультатОбработкиШтрихкода, ПараметрыСканирования, КэшированныеЗначения)
	
	ПараметрыОбработкиВыбора    = ШтрихкодированиеОбщегоНазначенияИС.ИнициализироватьПараметрыОбработкиВыбора(РезультатВыбора, РезультатОбработкиШтрихкода, КэшированныеЗначения);
	РезультатОбработкиШтрихкода = ШтрихкодированиеИС.ВыполнитьДействие(ЭтотОбъект, Действие, ПараметрыОбработкиВыбора);
	
	ПослеОбработкиШтрихкодов(РезультатОбработкиШтрихкода, КэшированныеЗначения);
	
	РезультатОбработкиШтрихкода.ИзмененныеСтроки  = Неопределено;
	РезультатОбработкиШтрихкода.ДобавленныеСтроки = Неопределено;
	
	Возврат РезультатОбработкиШтрихкода;
	
КонецФункции

&НаСервере
Процедура ОбработатьСтрокиТЧ(ДобавленныеСтроки, ИзмененныеСтроки, КэшированныеЗначения = Неопределено, ОбработатьБезМаркировки = Ложь) Экспорт
	
	Для Каждого Строка Из ДобавленныеСтроки Цикл
		СтруктураПараметров = ШтрихкодированиеИСРТ.ДанныеШтрихкодаДляОбработки();
		СтруктураПараметров.Вставить("ТекущаяСтрока", Строка);
		СтруктураПараметров.Вставить("ДобавленаСтрока", Истина);
		СтруктураПараметров.ОбработатьБезМаркировки = ОбработатьБезМаркировки;
		
		ДобавитьНайденныеПозицииТоваровСервер(СтруктураПараметров);
	КонецЦикла;
	
	Для Каждого Строка Из ИзмененныеСтроки Цикл 
		СтруктураПараметров = ШтрихкодированиеИСРТ.ДанныеШтрихкодаДляОбработки();
		СтруктураПараметров.Вставить("ТекущаяСтрока", Строка);
		СтруктураПараметров.ОбработатьБезМаркировки = ОбработатьБезМаркировки;
		
		ДобавитьНайденныеПозицииТоваровСервер(СтруктураПараметров);
	КонецЦикла;
	
	Если ДобавленныеСтроки.Количество()>0 Или ИзмененныеСтроки.Количество()>0 Тогда
		СобытияФормИС.ПриИзмененииЭлемента(ЭтотОбъект, "Товары", Неопределено);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОткрытьФормуУточненияДанных()
	
	СобытияФормРТКлиент.ПриИзмененииЭлемента(ЭтотОбъект, "Подключаемый_ОткрытьФормуУточненияДанных");
	
КонецПроцедуры

#КонецОбласти


&НаКлиенте
Процедура ОповещениеПоискаПоШтрихкоду(Штрихкод, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если ТипЗнч(Штрихкод) = Тип("Структура") Тогда 
		Штрихкод = ДополнительныеПараметры;
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(Штрихкод) Тогда
		Если НЕ(КэшированныеЗначения <> Неопределено
			И КэшированныеЗначения.Свойство("Номенклатура")) Тогда
			ОбработкаТабличнойЧастиТоварыКлиент.ОбновитьКэшированныеЗначенияДляУчетаСерий(
				ЭтотОбъект.Элементы.Товары,
				КэшированныеЗначения,
				ПараметрыУказанияСерий);
		КонецЕсли;
		СтруктураПараметровКлиента = ПолученШтрихкодИзСШК(Штрихкод);
		ОбработатьДанныеПоКодуКлиент(СтруктураПараметровКлиента);
		ПриИзмененииЭлементаГосИС();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеПоискаПоМагнитномуКоду(ТекКод, ДополнительныеПараметры) Экспорт
	
	Если Не ПустаяСтрока(ТекКод) Тогда
		СтруктураПараметровКлиента = ПолученМагнитныйКод(ТекКод);
		ОбработатьДанныеПоКодуКлиент(СтруктураПараметровКлиента);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеОткрытьФормуВыбораДанныхПоиска(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено Тогда
		ОбработатьДанныеПоКодуСервер(Результат);
		ДобавитьНайденныеВТЧСерииНоменклатурыКлиент(Результат);
		ОбработатьДанныеПоКодуКлиент(Результат);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьВесЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат Тогда
		ТоварыКоличествоУпаковокПриИзменении(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОрганизацияПриИзмененииСервер()
	
	НастроитьОтображениеРеквизитовСчетаФактуры(
			ЭтотОбъект,
			ПродажиСервер.ПараметрыПредставленияСчетаФактуры(Объект.Ссылка, Объект.Организация));
	
	ОБъект.КассаККМ = ДенежныеСредстваСервер.КассаККМ(Объект.Организация, Объект.Магазин, РабочееМесто);

	УчитыватьНДС = ПолучитьПризнакУчетаНДС();
	Объект.УчитыватьНДС = УчитыватьНДС;	
	Объект.ЦенаВключаетНДС = УчитыватьНДС;
	ПересчетНДСТабличнойЧастиСервер();
	
	УстановитьДоступностьЦенаВключаетНДС();
	
	ЗаполнитьСистемуНалогообложения();
	
	Если Объект.Товары.Количество() > 0 Тогда
		
		СтруктураДействий = Новый Структура;
		СтруктураДействий.Вставить("ЗаполнитьСтавкуНДССкладВШапке", ОбработкаТабличнойЧастиТоварыКлиентСервер.СтруктураПараметровСтавкиНДССкладВидНалогаВШапке(Объект));
		СтруктураДействий.Вставить("ПересчитатьСуммуНДС", ОбработкаТабличнойЧастиТоварыКлиентСервер.СтруктураПересчетаСуммыНДСВТЧ(Объект));
		
		СтруктураТЧ = Новый Структура;
		СтруктураТЧ.Вставить("СтрокиТЧ", Объект.Товары);
		ОбработкаТабличнойЧастиТоварыСервер.ПриИзмененииРеквизитовВТЧСервер(СтруктураТЧ, СтруктураДействий, Неопределено);
		
		ОбработкаТабличнойЧастиТоварыКлиентСервер.ЗаполнитьСуммуВсегоВТаблице(Объект.Товары, Объект.ЦенаВключаетНДС);
		ОбработкаТабличнойЧастиТоварыКлиентСервер.ОбновитьСуммыПодвала(Объект.Товары, Объект.ЦенаВключаетНДС, СуммаВсего);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура РазвернутьСвернутьТЧНаСервере()
	
	РазвернутаТЧ = НЕ РазвернутаТЧ;
	
	ВидимостьЭлементов = НЕ РазвернутаТЧ;
	
	ПоложениеКоманднойПанели = ?(ВидимостьЭлементов, ПоложениеКоманднойПанелиФормы.Авто, ПоложениеКоманднойПанелиФормы.Нет);
	Элементы.ГруппаОснование.Видимость                = ВидимостьЭлементов;
	Элементы.Шапка.Видимость                          = ВидимостьЭлементов;
	Элементы.ГруппаСчетФактура.Видимость              = ВидимостьЭлементов;
	
	
	Элементы.РазвернутьСвернутьТЧ.Картинка = ?(ВидимостьЭлементов, БиблиотекаКартинок.РазвернутьТабличнуюЧасть, БиблиотекаКартинок.СвернутьТабличнуюЧасть);
	
КонецПроцедуры

&НаКлиенте
Процедура УказатьСерии(ТекущееПоле)
	
	ВводСерийРазрешен = Истина;
	ОбработкаТабличнойЧастиТоварыКлиент.ПроверитьВозможностьУказанияСерий(ЭтотОбъект, ПараметрыУказанияСерий, ВводСерийРазрешен);
	Если НЕ ВводСерийРазрешен Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанныеИдентификатор = Элементы.Товары.ТекущиеДанные.ПолучитьИдентификатор();
	ПараметрыФормыУказанияСерий = ПараметрыФормыУказанияСерий(ТекущиеДанныеИдентификатор);
	ПараметрыФормыУказанияСерий.Вставить("ТекущееПоле", ТекущееПоле);
	ПараметрыФормыУказанияСерий.Вставить("КоличествоЕдиницДоПересчета");
	
	ОбработчикУказанияСерий = Новый ОписаниеОповещения("ОбработатьУказаниеСерий", ЭтотОбъект, ПараметрыФормыУказанияСерий);
	РежимБлокировки = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
	
	ОткрытьФорму(ПараметрыФормыУказанияСерий.ИмяФормы, ПараметрыФормыУказанияСерий, ЭтотОбъект,,,, ОбработчикУказанияСерий, РежимБлокировки);
	
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(СтруктураДействий, Объект)
	
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", ОбработкаТабличнойЧастиТоварыКлиентСервер.СтруктураПересчетаСуммыНДСВСтрокеТЧ(Объект));
	СтруктураДействий.Вставить("ПересчитатьСумму");
	
КонецПроцедуры

// Процедура устанавливает доступность.
//
&НаСервере
Процедура НастроитьФормуПоДополнительнымПравам()
	
	ИзменятьЦену = ПланыВидовХарактеристик.ПраваПользователей.ИзменятьЦену;
	
	УправлениеПользователями.УстановитьТолькоПросмотрДляРеквизитовТабличнойЧасти(Элементы.ТоварыЦена.ТолькоПросмотр, ИзменятьЦену);
	
	УправлениеПользователями.УстановитьТолькоПросмотрДляРеквизитовТабличнойЧасти(Элементы.ТоварыСумма.ТолькоПросмотр, ИзменятьЦену);
	
	УправлениеПользователями.УстановитьТолькоПросмотрДляРеквизитовТабличнойЧасти(Элементы.ТоварыСуммаВсего.ТолькоПросмотр, ИзменятьЦену);
	
	УправлениеПользователями.УстановитьТолькоПросмотрДляРеквизитовТабличнойЧасти(Элементы.Продавец.ТолькоПросмотр, 
																				 ПланыВидовХарактеристик.ПраваПользователей.ИзменятьПродавца);

	УправлениеПользователями.УстановитьТолькоПросмотрДляРеквизитовТабличнойЧасти(Элементы.ТоварыПродавец.ТолькоПросмотр, 
																				 ПланыВидовХарактеристик.ПраваПользователей.ИзменятьПродавца);

	УправлениеПользователями.УстановитьТолькоПросмотрДляРеквизитовТабличнойЧасти(Элементы.Дата.ТолькоПросмотр, 
																				 ПланыВидовХарактеристик.ПраваПользователей.ИзменятьДату);

	РазрешитьОформлениеВозвратовОтПокупателяБезДокументовПродажи = УправлениеПользователями.ПолучитьБулевоЗначениеПраваПользователя(ПланыВидовХарактеристик.ПраваПользователей.РазрешитьОформлениеВозвратовОтПокупателяБезДокументовПродажи, Ложь);
	
	Элементы.ТоварыДокументПродажи.АвтоОтметкаНезаполненного = НЕ РазрешитьОформлениеВозвратовОтПокупателяБезДокументовПродажи;
	
КонецПроцедуры

// Процедура заполняет товары из подбора.
// Параметры: 
//  ВыбранноеЗначение - Структура
&НаСервере
Процедура ОбработкаВыбораПодборНаСервере(ВыбранноеЗначение)
	
	ТаблицаТоваров = ПолучитьИзВременногоХранилища(ВыбранноеЗначение.АдресТоваровВХранилище);
	
	Для Каждого СтрокаТовара Из ТаблицаТоваров Цикл
		
		ТекущаяСтрока = Объект.Товары.Добавить();
		ЗаполнитьЗначенияСвойств(ТекущаяСтрока, СтрокаТовара, "Номенклатура, Характеристика, Упаковка, Цена, КоличествоУпаковок, Сумма");
		
		СтруктураДействий = Новый Структура;

		СтруктураДействий.Вставить("ЗаполнитьСтавкуНДССкладВШапке", ОбработкаТабличнойЧастиТоварыКлиентСервер.СтруктураПараметровСтавкиНДССкладВидНалогаВШапке(Объект));
		СтруктураДействий.Вставить("ЗаполнитьДоговорПлатежногоАгента");
		СтруктураДействий.Вставить("ПересчитатьСуммуНДС", ОбработкаТабличнойЧастиТоварыКлиентСервер.СтруктураПересчетаСуммыНДСВСтрокеТЧ(Объект));
		Если ВестиУчетМаркируемойПродукцииИСМП Тогда
			СтруктураДействий.Вставить("ЗаполнитьФлагНДСПострочно");
		КонецЕсли;
		СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
		СтруктураДействий.Вставить("ПроверитьНеобходимостьВводаМаркируемойПродукцииГосИС");
		
		КэшированныеЗначения = ОбработкаТабличнойЧастиТоварыКлиентСервер.СтруктураКэшируемыхЗначений();
		ОбработкаТабличнойЧастиТоварыСервер.ОбработатьСтрокуТЧСервер(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
		ОбработкаТабличнойЧастиТоварыКлиентСервер.ЗаполнитьКлючСвязи(Объект.Товары, ТекущаяСтрока, "КлючСвязи");
		
	КонецЦикла;
	
	ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьПризнакИспользованияХарактеристик(Объект.Товары);
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ЗаполнитьСуммуВсегоВТаблице(Объект.Товары, Объект.ЦенаВключаетНДС);
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ОбновитьСуммыПодвала(Объект.Товары, Объект.ЦенаВключаетНДС, СуммаВсего);
	ЗаполнитьСтатусыУказанияСерийСервер();
	
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ОбновитьСтатусыСерийИПодарочныхСертификатов(Объект.Товары);
	СтруктураМарки = Новый Структура;
	СтруктураМарки.Вставить("Дата", Объект.Дата);
	ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьНеобходимостьВводаАкцизнойМарки(Объект.Товары, СтруктураМарки);
	
	// ИнтеграцияЕГАИС - отключенный функционал
	Если Не ЕстьАлкогольнаяПродукцияЕГАИС Тогда
		Для Каждого СтрокаТовары Из Объект.Товары Цикл
			Если СтрокаТовары.НеобходимостьВводаАкцизнойМарки Тогда
				ЕстьАлкогольнаяПродукцияЕГАИС = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		УстановитьВидимостьИДоступностьЕГАИС(ЭтотОбъект);
	КонецЕсли;
	// Конец ИнтеграцияЕГАИС
	
	СобытияФормРТ.ПриИзмененииЭлемента(ЭтотОбъект, "Товары");
	
КонецПроцедуры

&НаСервере
Функция ОтчетОРозничныхПродажахПоЧекуККМСервер(ЧекККМ)
	
	Возврат ЧекККМ.ОтчетОРозничныхПродажах
	
КонецФункции

&НаСервере
Процедура ПриИзмененииДисконтнаяКартаСервер()
	
	ВладелецКарты = Объект.ДисконтнаяКарта.ВладелецКарты;
	
	Если ЗначениеЗаполнено(ВладелецКарты) И ТипЗнч(ВладелецКарты) = Тип("СправочникСсылка.Контрагенты") Тогда
	
		Объект.Контрагент = ВладелецКарты;
	
	ИначеЕсли ЗначениеЗаполнено(ВладелецКарты) И ТипЗнч(ВладелецКарты) = Тип("СправочникСсылка.ФизическиеЛица") Тогда
	
		Объект.ФизЛицо = ВладелецКарты;
		ЗаполнениеФизЛицаСервер();
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура заполняет склад при изменении магазина.
//
&НаСервере
Процедура ПриИзмененииМагазинСервер()
	
	Объект.Склад = ЗначениеНастроекПовтИсп.СкладПродажиПоУмолчанию(Объект.Магазин,,Объект.Склад, Пользователи.ТекущийПользователь());
	Если ЗначениеЗаполнено(Объект.Склад) Тогда
		ПриИзмененииСкладСервер();
	КонецЕсли;
	
	ОБъект.КассаККМ = ДенежныеСредстваСервер.КассаККМ(Объект.Организация, Объект.Магазин, РабочееМесто);
	
	ПараметрыУказанияСерий = Новый ФиксированнаяСтруктура(Документы.ВозвратТоваровОтПокупателя.ПараметрыУказанияСерий(Объект));
	ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьСтатусыУказанияСерий(Объект,ПараметрыУказанияСерий);
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ОбновитьСтатусыСерийИПодарочныхСертификатов(Объект.Товары);
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииСкладСервер()

	Если НЕ ЗначениеЗаполнено(Объект.Организация) Тогда
		
		Объект.Организация = Объект.Склад.Организация;
			
	КонецЕсли;
		
	ЗаполнитьСистемуНалогообложения();
	
	//Если Объект.Товары.Количество() > 0 Тогда
	//	
	//	СтруктураДействий = Новый Структура;
	//	СтруктураДействий.Вставить("ЗаполнитьСтавкуНДССкладВШапке", ОбработкаТабличнойЧастиТоварыКлиентСервер.СтруктураПараметровСтавкиНДССкладВидНалогаВШапке(Объект));
	//	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", ОбработкаТабличнойЧастиТоварыКлиентСервер.СтруктураПересчетаСуммыНДСВТЧ(Объект));
	//	
	//	СтруктураТЧ = Новый Структура;
	//	СтруктураТЧ.Вставить("СтрокиТЧ", Объект.Товары);
	//	ОбработкаТабличнойЧастиТоварыСервер.ПриИзмененииРеквизитовВТЧСервер(СтруктураТЧ, СтруктураДействий, Неопределено);
	//	
	//	ОбработкаТабличнойЧастиТоварыКлиентСервер.ЗаполнитьСуммуВсегоВТаблице(Объект.Товары, Объект.ЦенаВключаетНДС);
	//	ОбработкаТабличнойЧастиТоварыКлиентСервер.ОбновитьСуммыПодвала(Объект.Товары, Объект.ЦенаВключаетНДС, СуммаВсего);
	//	
	//КонецЕсли;
	
КонецПроцедуры

&НаСервере
// Установка дисконтной карты по чеку ККМ.
//
// Параметры:
//  Нет
//
Процедура ПриИзмененииТоварыЧекККМСервер(ЧекККМ)

	СтруктураРеквизитов = Новый Структура;
	СтруктураРеквизитов.Вставить("ДисконтнаяКарта"        , "ДисконтнаяКарта");
	СтруктураРеквизитов.Вставить("ВладелецДисконтнойКарты", "ВладелецДисконтнойКарты");
	СтруктураРеквизитов.Вставить("ЦенаВключаетНДС"        , "ЦенаВключаетНДС");
	СтруктураРеквизитов.Вставить("Дата"                   , "Дата");
	СтруктураРеквизитов.Вставить("НомерЧекаККМ"           , "НомерЧекаККМ");
	ЗначенияРеквизитов = ОбщегоНазначенияРТ.ЗначенияРеквизитовОбъекта(ЧекККМ, СтруктураРеквизитов);
	
	Объект.ДисконтнаяКарта         = ЗначенияРеквизитов.ДисконтнаяКарта;
	Объект.ВладелецДисконтнойКарты = ЗначенияРеквизитов.ВладелецДисконтнойКарты;
	
	Если ЗначениеЗаполнено(ЗначенияРеквизитов.НомерЧекаККМ) Тогда
		Объект.ЧекНомер = ЗначенияРеквизитов.НомерЧекаККМ;
		Объект.ЧекДата  = ЗначенияРеквизитов.Дата;
	КонецЕсли;

КонецПроцедуры

// Заполняет реквизиты документа по умолчанию в зависимости от выбранного налогообложения НДС.
//
&НаСервере
Процедура ПриИзмененииУчитыватьНДССервер()
	
	УстановитьДоступностьЦенаВключаетНДС(Истина);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ЗаполнитьСтавкуНДССкладВШапке", ОбработкаТабличнойЧастиТоварыКлиентСервер.СтруктураПараметровСтавкиНДССкладВидНалогаВШапке(Объект));
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", ОбработкаТабличнойЧастиТоварыКлиентСервер.СтруктураПересчетаСуммыНДСВТЧ(Объект));
	
	СтруктураТЧ = Новый Структура;
	СтруктураТЧ.Вставить("СтрокиТЧ" , Объект.Товары);
	ОбработкаТабличнойЧастиТоварыСервер.ПриИзмененииРеквизитовВТЧСервер(СтруктураТЧ, СтруктураДействий, Неопределено);
	
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ЗаполнитьСуммуВсегоВТаблице(Объект.Товары, Объект.ЦенаВключаетНДС);
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ОбновитьСуммыПодвала(Объект.Товары, Объект.ЦенаВключаетНДС, СуммаВсего);
	УстановитьТекущуюСтраницуСуммПодвала();
	
КонецПроцедуры

// Процедура сообщает о необходимости заполнения реквизитов документа при вызове подбора.
// Параметры:
//  Отказ - Булево
//
&НаКлиенте
Процедура СообщитьОбОшибкахОткрытияПодбора(Отказ)
	
	Если НЕ ЗначениеЗаполнено(Объект.Магазин) Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Поле ""Магазин"" не заполнено'"), Объект, "Объект.Магазин",,Отказ);
	КонецЕсли;
		
КонецПроцедуры

// Процедура управляет видимостью и доступностью элементов формы на сервере.
//
&НаСервере
Процедура УправлениеЭлементамиФормыПриСозданииНаСервере()
		
	Если ЗначениеЗаполнено(Объект.ДокументОснование) Тогда
		
		Элементы.Магазин.ТолькоПросмотр = ЗначениеЗаполнено(Объект.Магазин);
		Элементы.Склад.ТолькоПросмотр = ЗначениеЗаполнено(Объект.Склад);
		Элементы.Организация.ТолькоПросмотр = ЗначениеЗаполнено(Объект.Организация);
		
	Иначе
		
		Элементы.ДокументОснование.Видимость = Ложь;
		Элементы.Магазин.ТолькоПросмотр = Ложь;
		Элементы.Склад.ТолькоПросмотр = Ложь;
		Элементы.Организация.ТолькоПросмотр = Ложь;
		
	КонецЕсли;
	
	Если Объект.Магазин.СкладУправляющейСистемы ИЛИ НЕ ЗначениеЗаполнено(Объект.Магазин) Тогда
		
		Элементы.Склад.ТолькоПросмотр = Истина;
		
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы, "ОбщаяКомандаФискальныеОперации", "Видимость", Объект.ПробитЧек);
		
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы, "ФормаПробитьЧек", "Видимость", Ложь);
		
	//ИнтеграцияИСМПТК
	//Скроем меню ввода Акта приёмки маркированной продукции
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ФормаДокументАктПриемаПередачиИСМПТКСоздатьАППИсход", "Видимость", Ложь);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ФормаДокументАктПриемаПередачиИСЦЭДМСоздатьАППИсход",  "Видимость", Ложь);
	//Конец ИнтеграцияИСМПТК
	
КонецПроцедуры

// Устанавливает доступность поля ЦенаВключаетНДС.
//
&НаСервере
Процедура УстановитьДоступностьЦенаВключаетНДС(ПриИзменении = Ложь)

	Если ПриИзменении И Не Объект.УчитыватьНДС И Объект.ЦенаВключаетНДС Тогда
		Объект.ЦенаВключаетНДС = Ложь;
	ИначеЕсли ПриИзменении И Объект.УчитыватьНДС Тогда
		Объект.ЦенаВключаетНДС = Истина;
	КонецЕсли;
	
	Элементы.ЦенаВключаетНДС.ТолькоПросмотр = Не Объект.УчитыватьНДС;

КонецПроцедуры

&НаКлиенте
Процедура УстановитьДоступностьЭлементов()
	
	Элементы.Склад.ТолькоПросмотр = НЕ ЗначениеЗаполнено(Объект.Магазин);
	
КонецПроцедуры

// Процедура учитывает изменение параметров налогообложения в документе.
//
&НаСервере
Процедура УстановитьТекущуюСтраницуСуммПодвала()
	
	Если Объект.УчитыватьНДС Тогда
		Элементы.ГруппаПодвалСтраницы.ТекущаяСтраница = Элементы.ГруппаСуммыНДС;		
	Иначе
		Элементы.ГруппаПодвалСтраницы.ТекущаяСтраница = Элементы.ГруппаСуммы;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьПризнакиУчетаНДСПоОснованию(Основание)

	РеквизитыОснования = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Основание, "ЦенаВключаетНДС, УчитыватьНДС");
	
	Объект.УчитыватьНДС 	= РеквизитыОснования.УчитыватьНДС;
	Объект.ЦенаВключаетНДС 	= РеквизитыОснования.ЦенаВключаетНДС;

КонецПроцедуры

&НаСервере
Функция ЕстьПравоИзменятьЦену()
	
	Возврат УправлениеПользователями.ПолучитьБулевоЗначениеПраваПользователя(ПланыВидовХарактеристик.ПраваПользователей.ИзменятьЦену);
	
КонецФункции

&НаСервере
Процедура УстановитьВидимостьСтатусыСерийИПодарочныхСертификатов()
	
	Если НЕ ПараметрыУказанияСерий.ИспользоватьСерииНоменклатуры И НЕ Справочники.Номенклатура.ИспользуютсяПодарочныеСертификаты() Тогда
		Элементы.ТоварыСтатусыСерийИПодарочныхСертификатов.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура НастроитьОтображениеРеквизитовСчетаФактуры(Форма, ПараметрыПредставления = Неопределено)
	
	Форма.ТекстСчетФактура = ПараметрыПредставления.ТекстСчетФактура;
	Форма.Элементы.ТекстСчетФактура.Гиперссылка = ПараметрыПредставления.ГиперссылкаСчетФактура;
	Форма.Элементы.СписокСчетовФактур.Заголовок = ПараметрыПредставления.ТекстСписок;
	Форма.Элементы.СписокСчетовФактур.Гиперссылка = ЗначениеЗаполнено(ПараметрыПредставления.ТекстСписок);
	Форма.Элементы.ВвестиИсправлениеСчетаФактуры.Доступность = ПараметрыПредставления.РазрешеныИсправления;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнениеФизЛицаСервер()
	
	Если Не ТипЗнч(Объект.ФизЛицо) = Тип("Строка") И ЗначениеЗаполнено(Объект.ФизЛицо) Тогда
		
		УдостоверениеЛичности = РегистрыСведений.ДокументыФизическихЛиц.ДокументУдостоверяющийЛичностьФизлица(Объект.Физлицо);
		Объект.ПоДокументу = УдостоверениеЛичности;
		Объект.ДатаРождения = Объект.ФизЛицо.ДатаРождения;
		
	КонецЕсли;
	
	ЗаполнениеФИО();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнениеФИО()
	
	Если Не ТипЗнч(Объект.ФизЛицо) = Тип("Строка") И ЗначениеЗаполнено(Объект.ФизЛицо) Тогда
		ФизЛицоФИО = РегистрыСведений.ФИОФизЛиц.ПолучитьПоследнее(, Новый Структура("ФизЛицо", Объект.ФизЛицо)); 
		ФИОФизЛицаИП = ФизЛицоФИО.Фамилия + " " + ФизЛицоФИО.Имя + " " + ФизЛицоФИО.Отчество;

		Если СокрЛП(ФИОФизЛицаИП) = "" Тогда
			ФИОФизЛицаИП = Объект.ФизЛицо.Наименование;
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(Объект.ФизЛицо) = Тип("Строка") Тогда
		ФИОФизЛицаИП = Объект.ФизЛицо;
	Иначе
		ФИОФизЛицаИП = ""
	КонецЕсли;
	Если Не ЭтоLinuxСервер Тогда
		ФИОФизЛица = ОбщегоНазначенияРТКлиентСерверПовтИсп.ПолучитьСклонениеФИО(ФИОФизЛицаИП, 3);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьФормуSMSИEmail()
	
	Если ЗначениеЗаполнено(ДанныеSMSИлиEmail)
		И ЗначениеЗаполнено(Объект.ДисконтнаяКарта) Тогда
		Если ОтказКлиентаОтСохраненияТелефонаEmail Тогда
			Элементы.ДекорацияОтказКлиентаОтСохраненияТелефонаEmail.Картинка = БиблиотекаКартинок.НеСохранять16;
		Иначе
			Элементы.ДекорацияОтказКлиентаОтСохраненияТелефонаEmail.Картинка = БиблиотекаКартинок.Сохранить16;
		КонецЕсли;
	Иначе
		Элементы.ДекорацияОтказКлиентаОтСохраненияТелефонаEmail.Картинка = БиблиотекаКартинок.Пустая;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПредставитьТелефонИEmailКлиент()
	
	Если ЗначениеЗаполнено(Объект.Телефон) Тогда
		Если ЗначениеЗаполнено(Объект.Телефон) Тогда
			СохраненныйТелефон = Число(Объект.Телефон);
		Иначе
			СохраненныйТелефон = 0;
		КонецЕсли;
		Телефон = 0;
		ПодключаемоеОборудованиеРТКлиент.ПреобразоватьТелефонКПользовательскомуВиду(СохраненныйТелефон, Телефон, ТелефонСтрокой);
		ДанныеSMSИлиEmail = ТелефонСтрокой;
	ИначеЕсли ЗначениеЗаполнено(Объект.АдресЭП) Тогда
		ДанныеSMSИлиEmail = Объект.АдресЭП;
	КонецЕсли;
	
КонецПроцедуры



///////////////////////////////////////////////////////////////////////////////
// Серии

&НаСервере
Процедура ОбработатьУказаниеСерийСервер(ПараметрыФормыУказанияСерий)
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ОбновлятьКоличествоТоваровПриРегистрацииСерий", Истина);
	СтруктураДействий.Вставить("ПересчитатьЦенуЗаУпаковку");
	ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(СтруктураДействий, Объект);
	
	ОбработкаТабличнойЧастиТоварыСервер.ОбработатьУказаниеСерий(Объект,ПараметрыУказанияСерий,ПараметрыФормыУказанияСерий,СтруктураДействий);
	
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ЗаполнитьСуммуВсегоВТаблице(Объект.Товары, Объект.ЦенаВключаетНДС);
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ОбновитьСуммыПодвала(Объект.Товары, Объект.ЦенаВключаетНДС, СуммаВсего);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСтатусыУказанияСерийПриОкончанииРедактированияСтрокиТЧ(ТекущаяСтрокаИдентификатор, КэшированныеЗначения)
	
	ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьСтатусыУказанияСерийПриОкончанииРедактированияСтрокиТЧ(Объект, 
				ПараметрыУказанияСерий, ТекущаяСтрокаИдентификатор, КэшированныеЗначения);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСтатусыУказанияСерийСервер()
	
	ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьСтатусыУказанияСерий(Объект,ПараметрыУказанияСерий);
	
КонецПроцедуры

&НаСервере
Функция ПараметрыФормыУказанияСерий(ТекущиеДанныеИдентификатор)
	
	Возврат ОбработкаТабличнойЧастиТоварыСервер.ПоместитьСерииВХранилище(Объект, ПараметрыУказанияСерий, ТекущиеДанныеИдентификатор, ЭтотОбъект);
	
КонецФункции

&НаКлиенте
Процедура ЗавершитьВыборДокументаПродажи(ВыбранныйДокумент, ТекущаяСтрока)
	
	Если ЗначениеЗаполнено(ВыбранныйДокумент)  Тогда
		Если Тип("ДокументСсылка.ОтчетОРозничныхПродажах") = ТипЗнч(ВыбранныйДокумент) Тогда
			МетаданныеНаименование = "ОтчетОРозничныхПродажах";
		Иначе
			МетаданныеНаименование = "РеализацияТоваров";
		КонецЕсли;
		
		РезультатОтбораСтрок = ОбработкаТабличнойЧастиТоварыВызовСервера.СтрокиДокументаПродажиНаКлиента(ВыбранныйДокумент, МетаданныеНаименование, ТекущаяСтрока.Номенклатура, ТекущаяСтрока.Характеристика, УникальныйИдентификатор);
		
		Если ЗначениеЗаполнено(РезультатОтбораСтрок)  Тогда
			
			ПараметрыФормы = Новый Структура("АдресТаблицы", РезультатОтбораСтрок);
			
			ДополнительныеПараметры = Новый Структура;
			ДополнительныеПараметры.Вставить("ИндексТекущейСтроки", ТекущаяСтрока.ПолучитьИдентификатор());
			ДополнительныеПараметры.Вставить("ВыбранныйДокумент"  , ВыбранныйДокумент);
			
			ОбработчикОповещения = Новый ОписаниеОповещения("ОповещениеОткрытьФормуВыбораСтрокиДокумента", ЭтотОбъект, ДополнительныеПараметры);
			Режим = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
			ОткрытьФорму("Документ.ВозвратТоваровОтПокупателя.Форма.ФормаВыбораСтрокиДокумента", ПараметрыФормы,,,,, ОбработчикОповещения, Режим);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершитьОбработкуДанныхПоКодуКлиент(СтруктураПараметровКлиента)
	
	ИдентификаторСтроки = ПодключаемоеОборудованиеРТКлиент.ЗавершитьОбработкуДанныхПоКодуКлиент(ЭтотОбъект, СтруктураПараметровКлиента);
	
КонецПроцедуры

&НаСервере
Процедура ТоварыПослеУдаленияСервер()
	
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ОбновитьСуммыПодвала(Объект.Товары, Объект.ЦенаВключаетНДС, СуммаВсего);
	
	УдалитьНесвязанныеАкцизы();
	
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ОбновитьСтатусыСерийИПодарочныхСертификатов(Объект.Товары);
	
	СобытияФормРТ.ПриИзмененииЭлемента(ЭтотОбъект, "Товары");
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииТоварыНоменклатура(ТекущаяСтрока = Неопределено)
	
	Если ТекущаяСтрока = Неопределено Тогда
		ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	КонецЕсли;
	
	Если ТекущаяСтрока.НеобходимостьВводаАкцизнойМарки Тогда
		// Нужно удалить старые акцизные марки.
		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("КлючСвязи", ТекущаяСтрока.КлючСвязи);
		
		МассивАкцизныхМарок = Объект.АкцизныеМарки.НайтиСтроки(СтруктураПоиска);
		
		Для Каждого СтрокаАкцизнаяМарка Из МассивАкцизныхМарок Цикл
			Объект.АкцизныеМарки.Удалить(СтрокаАкцизнаяМарка);
		КонецЦикла;
	КонецЕсли;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ЗаполнитьТипНоменклатуры");
	СтруктураДействий.Вставить("ПроверитьХарактеристикуПоВладельцу", ТекущаяСтрока.Характеристика);
	СтруктураДействий.Вставить("ПроверитьЗаполнитьУпаковкуПоВладельцу"      , ТекущаяСтрока.Упаковка);
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
	
	СтруктураМарки = Новый Структура;
	СтруктураМарки.Вставить("Дата", Объект.Дата);
	СтруктураДействий.Вставить("ПроверитьНеобходимостьВводаАкцизнойМарки", СтруктураМарки);
	СтруктураДействий.Вставить("ПроверитьНеобходимостьВводаМаркируемойПродукцииГосИС");
	
	СтруктураДействий.Вставить("ЗаполнитьСтавкуНДССкладВШапке", ОбработкаТабличнойЧастиТоварыКлиентСервер.СтруктураПараметровСтавкиНДССкладВидНалогаВШапке(Объект));
	СтруктураДействий.Вставить("ЗаполнитьДоговорПлатежногоАгента");
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", ОбработкаТабличнойЧастиТоварыКлиент.СтруктураПересчетаСуммыНДСВСтрокеТЧ(Объект));
	Если ВестиУчетМаркируемойПродукцииИСМП Тогда
		СтруктураДействий.Вставить("ЗаполнитьФлагНДСПострочно");
	КонецЕсли;
	СтруктураДействий.Вставить("ПересчитатьСумму");
	СтруктураДействий.Вставить("ПроставитьПродавца", Объект.Продавец);
	
	ОбработкаТабличнойЧастиТоварыКлиент.ПриИзмененииРеквизитовВТЧКлиент(Объект.Товары, ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ЗаполнитьСуммуВсегоВСтрокеТаблицы(ТекущаяСтрока, Объект.ЦенаВключаетНДС);
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ОбновитьСуммыПодвала(Объект.Товары, Объект.ЦенаВключаетНДС, СуммаВсего);
	
	Если ОбработкаТабличнойЧастиТоварыКлиент.НеобходимоОбновитьСтатусыСерий(
		Элементы.Товары, КэшированныеЗначения, ПараметрыУказанияСерий) Тогда
		
		ТекущаяСтрокаИдентификатор = ТекущаяСтрока.ПолучитьИдентификатор();
		
		ЗаполнитьСтатусыУказанияСерийПриОкончанииРедактированияСтрокиТЧ(ТекущаяСтрокаИдентификатор, КэшированныеЗначения);
		ОбработкаТабличнойЧастиТоварыКлиент.ОбновитьКэшированныеЗначенияДляУчетаСерий(Элементы.Товары, КэшированныеЗначения,ПараметрыУказанияСерий);
		
	КонецЕсли;
	
	ОбработкаТабличнойЧастиТоварыКлиент.ОбновитьСтатусСерийИПодарочныхСертификатов(ТекущаяСтрока);
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ЗаполнитьКлючСвязи(Объект.Товары, ТекущаяСтрока, "КлючСвязи");
	
	// ИнтеграцияЕГАИС - отключенный функционал
	Если Ложь И Не ЕстьАлкогольнаяПродукцияЕГАИС = ТекущаяСтрока.НеобходимостьВводаАкцизнойМарки Тогда
		Если ТекущаяСтрока.НеобходимостьВводаАкцизнойМарки Тогда
			ЕстьАлкогольнаяПродукцияЕГАИС = Истина;
			УстановитьВидимостьИДоступностьЕГАИС(ЭтотОбъект);
		Иначе
			ЕстьАлкогольнаяПродукцияЕГАИС = Ложь;
			Для Каждого СтрокаТовары Из Объект.Товары Цикл
				Если СтрокаТовары.НеобходимостьВводаАкцизнойМарки Тогда
					ЕстьАлкогольнаяПродукцияЕГАИС = Истина;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			УстановитьВидимостьИДоступностьЕГАИС(ЭтотОбъект);
		КонецЕсли;
	КонецЕсли;
	//ИнтеграцияЕГАИСРТКлиент.УстановитьЗначениеСтатусАкцизныхМарокВСтроке(ТекущаяСтрока);
	// Конец ИнтеграцияЕГАИС
	
КонецПроцедуры


&НаСервере
Процедура УдалитьНесвязанныеАкцизы()
	
	ОбработкаТабличнойЧастиТоварыСервер.УдалитьНесвязанныеАкцизы(ЭтотОбъект);
	
КонецПроцедуры

// СтандартныеПодсистемы.РаботаСКонтрагентами
&НаКлиенте
Процедура Подключаемый_ПоказатьПредложениеИспользоватьПроверкуКонтрагентов()
	ПроверкаКонтрагентовКлиент.ПредложитьВключитьПроверкуКонтрагентов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбработатьРезультатПроверкиКонтрагентов()
	ПроверкаКонтрагентовКлиент.ОбработатьРезультатПроверкиКонтрагентовВДокументе(ЭтотОбъект);
КонецПроцедуры

// Процедура - Отображение результата проверки контрагентов в документе.
//
&НаСервере
Процедура ОтобразитьРезультатПроверкиКонтрагента() Экспорт
	ПроверкаКонтрагентов.ОтобразитьРезультатПроверкиКонтрагентаВДокументе(ЭтотОбъект);
КонецПроцедуры

// Процедура - Запуск фонового задания по проверке контрагента.
//
// Параметры:
//  ПараметрыФоновогоЗадания	 - ТаблицаФормы - Если изменения контрагента или даты произошли в табличной части.
//								 - ПолеФормы - Элемент управления, содержащий контрагента или счет-фактуру, в случае, 
//		если произошло изменение в контрагенте, находящегося в шапке или в счете-фактуре, находящегося в подвале.
//								 - Дата - Дата документа, в случае если произошло изменение даты
//								 - Неопределено - если требуется проверка всех контрагентов в документе.
//								 - Булево - если это запуск проверки контрагента при создании на сервере.
&НаСервере
Процедура ПроверитьКонтрагентовФоновоеЗадание(ПараметрыФоновогоЗадания) Экспорт	
	ПроверкаКонтрагентов.ПроверитьКонтрагентовВДокументеФоновоеЗадание(ЭтотОбъект, ПараметрыФоновогоЗадания);
КонецПроцедуры
// Конец СтандартныеПодсистемы.РаботаСКонтрагентами

&НаКлиенте
Процедура Подключаемый_УстановитьКартинкуДляКомментария()
	ОбщегоНазначенияРТКлиентСервер.УстановитьКартинкуДляКомментария(Элементы.СтраницаКомментарий, Объект.Комментарий);
КонецПроцедуры

&НаКлиенте
Процедура ТоварыВводДополнительнойИнформации(Элемент, ЗавершатьРедактирование = Истина)
	
	Если Элемент.ТекущийЭлемент = Элементы.ТоварыКоличествоУпаковок
		ИЛИ Элемент.ТекущийЭлемент = Элементы.ТоварыУпаковка 
		ИЛИ Элемент.ТекущийЭлемент = Элементы.ТоварыНоменклатураЕдиницаИзмерения Тогда
		ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
		
		Если ТекущиеДанные <> Неопределено Тогда
		
			Если ТекущиеДанные.СтатусУказанияСерий <> 0 Тогда
				Если ЗавершатьРедактирование Тогда
					Элементы.Товары.ЗакончитьРедактированиеСтроки(Ложь);
				КонецЕсли;
				Если Элемент.ТекущийЭлемент = Элементы.ТоварыКоличествоУпаковок Тогда
					УказатьСерии("КоличествоУпаковок");
				Иначе
					УказатьСерии("Упаковка");
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииТоварыКоличестваУпаковок(ТекущаяСтрока = Неопределено)
	
	Если ТекущаяСтрока = Неопределено Тогда
		ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	КонецЕсли;
	
	СтруктураДействий = Новый Структура;
	ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(СтруктураДействий, Объект);
	ОбработкаТабличнойЧастиТоварыКлиент.ПриИзмененииРеквизитовВТЧКлиент(Объект.Товары, ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ЗаполнитьСуммуВсегоВСтрокеТаблицы(ТекущаяСтрока, Объект.ЦенаВключаетНДС);
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ОбновитьСуммыПодвала(Объект.Товары, Объект.ЦенаВключаетНДС, СуммаВсего);

КонецПроцедуры

&НаСервере
Функция ВходящиеДанныеДляФРСервер(РаспределениеВыручкиПоСекциям, НомерЧека)
	
	Возврат Документы.ВозвратТоваровОтПокупателя.ПодготовитьДанныеДляПробитияЧека(Объект.Ссылка, РаспределениеВыручкиПоСекциям, НомерЧека);
	
КонецФункции

&НаКлиенте
Процедура КассаККМПриИзмененииКлиент()
	
	Если ЗначениеЗаполнено(Объект.КассаККМ) И НомерДокументаКассыККМ[Объект.КассаККМ] = Неопределено Тогда
		ОбщегоНазначенияРТКлиент.ЗаполнитьНомерДокументаКассыККМ(Объект.КассаККМ);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВозможностьПечатиЧекаЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат Тогда
		НапечататьЧекКлиент();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НапечататьЧекКлиент()
	Перем Отказ, ИдентификаторУстройства, ИспользоватьКассуБезПодключенияОборудования, РаспределениеВыручкиПоСекциям;
	
	ПодготовитьИПроверитьПечатьЧека(Отказ, ИдентификаторУстройства, ИспользоватьКассуБезПодключенияОборудования, РаспределениеВыручкиПоСекциям);
	
	Если Отказ Тогда
		Возврат
	КонецЕсли;
	
	Если НЕ ИспользоватьПодключаемоеОборудование ИЛИ ИспользоватьКассуБезПодключенияОборудования Тогда
		
		Если НомерДокументаКассыККМ[Объект.КассаККМ] <> Неопределено Тогда
			Объект.НомерЧекаККМ  = НомерДокументаКассыККМ[Объект.КассаККМ];
		Иначе
			Объект.НомерЧекаККМ  = ПорядковыйНомерПродажи;
		КонецЕсли;
		Объект.ПробитЧек     = Истина;
		
		Модифицированность = Истина;
		
		РезультатЗаписи = Записать(Новый Структура("РежимЗаписи", РежимЗаписиДокумента.Проведение));
		
		Если РезультатЗаписи = Истина Тогда
			НомерДокументаКассыККМ[Объект.КассаККМ] = Объект.НомерЧекаККМ + 1;
			ПорядковыйНомерПродажи = ПорядковыйНомерПродажи + 1;
		КонецЕсли;
		
		Возврат;
		
	КонецЕсли;     
	
	Если ИдентификаторУстройства <> Неопределено Тогда
        
        // &ЗамерПроизводительности 
        Замер = ОценкаПроизводительностиРТКлиент.НачатьЗамер(Ложь, 
                                                    "Документ.ВозвратТоваровОтПокупателя.Форма.ФормаДокумента.Команда.ПробитьЧек",
                                                               Ложь);
                                                               
       	ЭтаФорма.Доступность = Ложь;
		
		ПараметрыОперации = Новый Структура("ИдентификаторУстройства, РаспределениеВыручкиПоСекциям, Замер", ИдентификаторУстройства, РаспределениеВыручкиПоСекциям, Замер);
		
		НомерЧека = НомерДокументаКассыККМ[Объект.КассаККМ] + 1;
		ОбщиеПараметры  = ВходящиеДанныеДляФРСервер(ПараметрыОперации.РаспределениеВыручкиПоСекциям, НомерЧека);
		
		Оповещение = Новый ОписаниеОповещения("НапечататьЧекКлиентЗавершение", ЭтотОбъект, ПараметрыОперации);
		
		МенеджерОборудованияКлиент.НачатьФискализациюЧекаНаФискальномУстройстве(Оповещение, 
										УникальныйИдентификатор, 
										ОбщиеПараметры, 
										ПараметрыОперации.ИдентификаторУстройства);
		
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НапечататьЧекКлиентЗавершение(РезультатВыполнения, ПараметрыОперации) Экспорт
	
	ЭтаФорма.Доступность = Истина;
	
	Если РезультатВыполнения.Результат Тогда
		
		// Установить полученное значение номера чека реквизиту документа.
		Если ЗначениеЗаполнено(РезультатВыполнения.ВыходныеПараметры[1]) Тогда
			Объект.НомерЧекаККМ = РезультатВыполнения.ВыходныеПараметры[1];
		Иначе
			Объект.НомерЧекаККМ = НомерДокументаКассыККМ[Объект.КассаККМ];
		КонецЕсли;
		Объект.ПробитЧек    = Истина;
		Модифицированность  = Истина;
		РезультатЗаписи = Записать(Новый Структура("РежимЗаписи", РежимЗаписиДокумента.Проведение));
		
		Если РезультатЗаписи = Истина Тогда
			НомерДокументаКассыККМ[Объект.КассаККМ] = Объект.НомерЧекаККМ + 1;
			ПорядковыйНомерПродажи = ПорядковыйНомерПродажи + 1;
		КонецЕсли;
		
	Иначе
		ТекстСообщения = НСтр("ru = 'При печати чека произошла ошибка.
									|Чек не напечатан на фискальном устройстве.
									|Дополнительное описание: %ДополнительноеОписание%'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ДополнительноеОписание%", РезультатВыполнения.ОписаниеОшибки);
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы, "ОбщаяКомандаФискальныеОперации", "Видимость", Объект.ПробитЧек);
    
    // &ЗамерПроизводительности 
    ОценкаПроизводительностиРТКлиент.ЗакончитьЗамер(ПараметрыОперации.Замер);

КонецПроцедуры

&НаСервере
Процедура ПодготовитьИПроверитьПечатьЧека(Отказаться, 
										  ИдентификаторУстройства, 
										  ИспользоватьКассуБезПодключенияОборудования,
										  РаспределениеВыручкиПоСекциям)
	
	Отказаться = Ложь;
	
	Если ЗначениеЗаполнено(Объект.КассаККМ)  Тогда
		ПараметрыКассыККМ       = ЗначениеНастроекВызовСервера.ПараметрыКассыККМ(Объект.КассаККМ);
		ИдентификаторУстройства = ПараметрыКассыККМ.ИдентификаторУстройства;
		
		РаспределениеВыручкиПоСекциям = ПараметрыКассыККМ.РаспределениеВыручкиПоСекциям;
		ИспользоватьКассуБезПодключенияОборудования = ПараметрыКассыККМ.ИспользоватьБезПодключенияОборудования;
		
		СтруктураСостояниеКассовойСмены = РозничныеПродажиСервер.ПолучитьСостояниеКассовойСмены(Объект.КассаККМ);
		
		КассоваяСмена = СтруктураСостояниеКассовойСмены.КассоваяСмена;
		
		ТекстОшибки = НСтр("ru='Кассовая смена не открыта.'");
		Если НЕ РозничныеПродажиСервер.СменаОткрыта(КассоваяСмена, Объект.Дата, ТекстОшибки) Тогда
			
			ОбщегоНазначения.СообщитьПользователю(
				ТекстОшибки,
				,
				"Объект.КассаККМ",
				,
				Отказаться);
			
		КонецЕсли;
	Иначе
		ТекстОшибки = НСтр("ru='Не выбрана касса ККМ.'");
		ОбщегоНазначения.СообщитьПользователю(
			ТекстОшибки,
			,
			"Объект.КассаККМ",
			,
			Отказаться);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСтавкиНДС()
	
	УчетНДС.ЗаполнитьСписокВыбораСтавокНДС(Элементы, Объект.Дата);
	
КонецПроцедуры

#Область ЕГАИС

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьВидимостьИДоступностьЕГАИС(Форма)
	
	Форма.ТолькоПросмотр = Форма.ЕстьПереданныеЧекиЕГАИС ИЛИ Форма.Объект.ПробитЧек;
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьНаОснованииЧекЕГАИСВозвратПодтверждениеЗаписи(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса <> КодВозвратаДиалога.ОК Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ Записать() Тогда
		Возврат;
	КонецЕсли;
	
	СоздатьЧекЕГАИСВозвратПослеЗаписиВозвратаОтПокупателя();
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьЧекЕГАИСВозвратПослеЗаписиВозвратаОтПокупателя()
	
	Если НЕ ПроверитьВозможностьВводаНаОсновании(Объект.Ссылка) Тогда
		ВызватьИсключение НСтр("ru='На основании документа существуют созданные чеки ЕГАИС'");
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Основание", Объект.Ссылка);
	
	ОткрытьФорму("Документ.ЧекЕГАИСВозврат.Форма.ФормаДокумента", ПараметрыФормы, ЭтотОбъект);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПроверитьВозможностьВводаНаОсновании(ДокументОснование)
	
	ОбщегоНазначенияРТ.ПроверитьВозможностьВводаНаОсновании(ДокументОснование);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументОснование", ДокументОснование);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЧекЕГАИСВозврат.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.ЧекЕГАИСВозврат КАК ЧекЕГАИСВозврат
	|ГДЕ
	|	ЧекЕГАИСВозврат.ДокументОснование = &ДокументОснование
	|	И НЕ ЧекЕГАИСВозврат.ПометкаУдаления";
	
	Возврат Запрос.Выполнить().Пустой();
	
КонецФункции

&НаСервереБезКонтекста
Функция ЕстьПереданныеЧекиЕГАИС(ДокументОснование)
	
	Возврат ИнтеграцияЕГАИСРТ.ЕстьПереданныеЧекиЕГАИС(ДокументОснование, Истина);
	
КонецФункции

#КонецОбласти

#Область ГИСМ

&НаСервере
Процедура ОбновитьРеквизитыОбменаСГИСМ()
	СформироватьНадписьМаркировкаПродукции();
	ОбновитьСтатусГИСМ();
КонецПроцедуры

&НаСервере
Процедура ОбновитьСтатусГИСМ()
	
	ВидимостьКомандГИСМ = Объект.ЕстьМаркируемаяПродукцияГИСМ
		И ПараметрыУказанияСерий.ИспользоватьСерииНоменклатуры;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"СтатусГИСМ",
		"Видимость",
		ВидимостьКомандГИСМ);
		
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ФормаОбщаяКомандаПротоколОбменаГИСМ",
		"Видимость",
		ВидимостьКомандГИСМ);
		
	Если НЕ Объект.ЕстьМаркируемаяПродукцияГИСМ
		ИЛИ НЕ ПараметрыУказанияСерий.ИспользоватьСерииНоменклатуры Тогда
		
		Возврат;
		
	КонецЕсли;
	
	СтатусГИСМ         = Перечисления.СтатусыИнформированияГИСМ.Черновик;
	ДальнейшееДействие = Перечисления.ДальнейшиеДействияПоВзаимодействиюГИСМ.ПустаяСсылка();
	
	Если НЕ Объект.Ссылка.Пустая() Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = "
		|ВЫБРАТЬ
		|	ЕСТЬNULL(СтатусыИнформированияГИСМ.Статус, ЗНАЧЕНИЕ(Перечисление.СтатусыИнформированияГИСМ.Черновик)) КАК СтатусГИСМ,
		|	ВЫБОР
		|		КОГДА СтатусыИнформированияГИСМ.ДальнейшееДействие В (&МассивДальнейшиеДействия)
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ДальнейшиеДействияПоВзаимодействиюГИСМ.ПустаяСсылка)
		|		ИНАЧЕ ЕСТЬNULL(СтатусыИнформированияГИСМ.ДальнейшееДействие, ЗНАЧЕНИЕ(Перечисление.ДальнейшиеДействияПоВзаимодействиюГИСМ.ПередайтеДанные))
		|	КОНЕЦ КАК ДальнейшееДействие
		|ИЗ
		|	Документ.ВозвратТоваровОтПокупателя КАК ВозвратТоваровОтПокупателя
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтатусыИнформированияГИСМ КАК СтатусыИнформированияГИСМ
		|		ПО (СтатусыИнформированияГИСМ.Документ = ВозвратТоваровОтПокупателя.Ссылка)
		|ГДЕ
		|	ВозвратТоваровОтПокупателя.Ссылка = &Ссылка";
		
		Запрос.УстановитьПараметр("Ссылка",Объект.Ссылка);
		Запрос.УстановитьПараметр("МассивДальнейшиеДействия", ИнтеграцияГИСМ.НеотображаемыеВДокументахДальнейшиеДействия());
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Если Выборка.Следующий() Тогда
			
			СтатусГИСМ         = Выборка.СтатусГИСМ;
			ДальнейшееДействие = Выборка.ДальнейшееДействие;
			
		КонецЕсли;
		
	КонецЕсли;
	
	СтатусГИСМПредставление = ИнтеграцияГИСМ.ПредставлениеСтатусаГИСМ(
		СтатусГИСМ,
		ДальнейшееДействие,
		Перечисления.ДальнейшиеДействияПоВзаимодействиюГИСМ.ПередайтеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьНажатиеНавигационнойСсылки(НавигационнаяСсылкаФорматированнойСтроки)
	
	Если НавигационнаяСсылкаФорматированнойСтроки = "ПередатьДанные" Тогда
		
		СтандартнаяОбработка = Ложь;
		ИнтеграцияГИСМКлиент.ПодготовитьСообщениеКПередаче(
			Объект.Ссылка,
			ПредопределенноеЗначение("Перечисление.ОперацииОбменаГИСМ.ПередачаДанных"));
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СтатусГИСМОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если Модифицированность Тогда
		
		ОписаниеОповещенияВопрос = Новый ОписаниеОповещения("СтатусГИСМОбработкаНавигационнойСсылкиЗавершение",
		                                                    ЭтотОбъект,
		                                                    Новый Структура("НавигационнаяСсылкаФорматированнойСтроки", НавигационнаяСсылкаФорматированнойСтроки));
		ТекстВопроса = НСтр("ru = 'Возврат товаров от покупателя был изменен. Записать?'");
		ПоказатьВопрос(ОписаниеОповещенияВопрос, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		
	ИначеЕсли Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		ОписаниеОповещенияВопрос = Новый ОписаниеОповещения("СтатусГИСМОбработкаНавигационнойСсылкиЗавершение",
		                                                    ЭтотОбъект,
		                                                    Новый Структура("НавигационнаяСсылкаФорматированнойСтроки", НавигационнаяСсылкаФорматированнойСтроки));
		ТекстВопроса = НСтр("ru = 'Возврат товаров от покупателя не записан. Записать?'");
		ПоказатьВопрос(ОписаниеОповещенияВопрос, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		
	Иначе
		
		ОбработатьНажатиеНавигационнойСсылки(НавигационнаяСсылкаФорматированнойСтроки);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СтатусГИСМОбработкаНавигационнойСсылкиЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если Не РезультатВопроса = КодВозвратаДиалога.Да Тогда
		 Возврат;
	КонецЕсли;
	
	Если ПроверитьЗаполнение() Тогда
		Записать();
	КонецЕсли;
	
	Если Не Модифицированность И ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ОбработатьНажатиеНавигационнойСсылки(ДополнительныеПараметры.НавигационнаяСсылкаФорматированнойСтроки);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СформироватьНадписьМаркировкаПродукции()
	
	Элементы.ТекстМаркировкаТоваров.Видимость = Объект.ЕстьМаркируемаяПродукцияГИСМ И НЕ ПараметрыУказанияСерий.ИспользоватьСерииНоменклатуры;
	Если НЕ (Объект.ЕстьМаркируемаяПродукцияГИСМ И НЕ ПараметрыУказанияСерий.ИспользоватьСерииНоменклатуры) Тогда
		Возврат;
	КонецЕсли;
	
	МетаданныеМаркировки = Метаданные.Документы.МаркировкаТоваровГИСМ;
	ПравоДобавления      = ПравоДоступа("Добавление", МетаданныеМаркировки);
	ПравоЧтения          = ПравоДоступа("Чтение", МетаданныеМаркировки);

	Если Не ПравоЧтения Тогда
		Возврат;
	КонецЕсли;
	
	Если ПравоДобавления Тогда
		ТекстНадписи = НСтр("ru = 'Оформить маркировку товаров'");
		ИмяКоманды   = "ОформитьМаркировкуТоваров";
	Иначе
		ТекстНадписи = НСтр("ru = 'Маркировка товаров не создана'");
		ИмяКоманды   = "";
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	МаркировкаТоваровГИСМ.Ссылка,
	|	СтатусыИнформированияГИСМ.Статус
	|ИЗ
	|	Документ.МаркировкаТоваровГИСМ КАК МаркировкаТоваровГИСМ
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтатусыИнформированияГИСМ КАК СтатусыИнформированияГИСМ
	|		ПО (СтатусыИнформированияГИСМ.Документ = МаркировкаТоваровГИСМ.Ссылка)
	|ГДЕ
	|	МаркировкаТоваровГИСМ.ДокументОснование = &ОснованиеСсылка
	|	И НЕ МаркировкаТоваровГИСМ.ПометкаУдаления";

	Запрос.УстановитьПараметр("ОснованиеСсылка", Объект.Ссылка);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		
		ТекстНадписи  = СтрШаблон(НСтр("ru = 'Маркировка товаров: %1'"), НРег (Строка(Выборка.Статус)));
		ИмяКоманды    = "ОткрытьПротоколОбмена";
		
	КонецЕсли;
	
	ТекстМаркировкаТоваров = Новый ФорматированнаяСтрока(
		ТекстНадписи,
		,
		ЦветаСтиля.ЦветГиперссылки,
		,
		ИмяКоманды);
	
КонецПроцедуры

&НаКлиенте
Процедура ТекстМаркировкаТоваровОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Если НавигационнаяСсылкаФорматированнойСтроки = "ОткрытьПротоколОбмена" Тогда
		
		ИнтеграцияГИСМКлиент.ОткрытьПротоколОбмена(Объект.Ссылка, ЭтотОбъект);
		
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "ОформитьМаркировкуТоваров" Тогда
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Основание", Объект.Ссылка);
		ОткрытьФорму("Документ.МаркировкаТоваровГИСМ.Форма.ФормаДокумента", ПараметрыФормы, ЭтотОбъект);
		
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область Маркировка

&НаКлиентеНаСервереБезКонтекста
Процедура ДополнитьСтруктуруДействиямиНДС(СтруктураДействий, ВестиУчетМаркируемойПродукцииИСМП)
	
	ИнтеграцияИСРТКлиентСервер.ДополнитьСтруктуруДействиямиНДС(СтруктураДействий, ВестиУчетМаркируемойПродукцииИСМП);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ДополнитьСтруктуруДействиямиГосИС(СтруктураДействий, МаркировкаВключена, БезМаркировки = Ложь)
	
	ИнтеграцияИСРТКлиентСервер.ДополнитьСтруктуруДействиямиГосИС(СтруктураДействий, Ложь, МаркировкаВключена, БезМаркировки);
	
КонецПроцедуры

#КонецОбласти

#Область РаботаСБуферомОбмена
	
&НаСервере
Процедура СкопироватьСтрокиНаСервере()
		
	КопированиеСтрокСервер.ПоместитьВыделенныеСтрокиВБуферОбмена(Элементы.Товары.ВыделенныеСтроки, Объект.Товары);
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьСтрокиИзБуфераОбмена()
	
	МассивТиповНоменклатуры = Новый Массив;
	МассивТиповНоменклатуры.Добавить(ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Товар"));
	МассивТиповНоменклатуры.Добавить(ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Услуга"));
	
	ПараметрыОтбора = Новый Структура();
	ПараметрыОтбора.Вставить("ОтборПоТипуНоменклатуры", МассивТиповНоменклатуры);
	
	ТаблицаТоваров = КопированиеСтрокСервер.СтрокиИзБуфераОбмена(ПараметрыОтбора);
	
	Для каждого СтрокаТовара Из ТаблицаТоваров Цикл
		
		ТекущаяСтрока = Объект.Товары.Добавить();
		ЗаполнитьЗначенияСвойств(ТекущаяСтрока, СтрокаТовара);
		
		СтруктураДействий = Новый Структура;
		СтруктураДействий.Вставить("ПроверитьХарактеристикуПоВладельцу", 			ТекущаяСтрока.Характеристика);
		СтруктураДействий.Вставить("ПроверитьЗаполнитьУпаковкуПоВладельцу"      , 	ТекущаяСтрока.Упаковка);
		СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
		
		СтруктураМарки = Новый Структура;
		СтруктураМарки.Вставить("Дата", Объект.Дата);
		СтруктураДействий.Вставить("ПроверитьНеобходимостьВводаАкцизнойМарки", СтруктураМарки);
		СтруктураДействий.Вставить("ПроверитьНеобходимостьВводаМаркируемойПродукцииГосИС");
		
		СтруктураДействий.Вставить("ЗаполнитьСтавкуНДССкладВШапке", ОбработкаТабличнойЧастиТоварыКлиентСервер.СтруктураПараметровСтавкиНДССкладВидНалогаВШапке(Объект));
		СтруктураДействий.Вставить("ЗаполнитьДоговорПлатежногоАгента");
		СтруктураДействий.Вставить("ПересчитатьСуммуНДС", ОбработкаТабличнойЧастиТоварыКлиентСервер.СтруктураПересчетаСуммыНДСВСтрокеТЧ(Объект));
		Если ВестиУчетМаркируемойПродукцииИСМП Тогда
			СтруктураДействий.Вставить("ЗаполнитьФлагНДСПострочно");
		КонецЕсли;
		СтруктураДействий.Вставить("ПересчитатьСумму");
		СтруктураДействий.Вставить("ПроставитьПродавца", Объект.Продавец);
		
		КэшированныеЗначения = ОбработкаТабличнойЧастиТоварыКлиентСервер.СтруктураКэшируемыхЗначений();
		ОбработкаТабличнойЧастиТоварыКлиентСервер.ОбновитьКэшированныеЗначенияДляУчетаСерий(ТекущаяСтрока, КэшированныеЗначения, ПараметрыУказанияСерий, Ложь);
		ОбработкаТабличнойЧастиТоварыСервер.ОбработатьСтрокуТЧСервер(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);		
		ОбработкаТабличнойЧастиТоварыКлиентСервер.ЗаполнитьСуммуВсегоВСтрокеТаблицы(ТекущаяСтрока, Объект.ЦенаВключаетНДС);
		ОбработкаТабличнойЧастиТоварыКлиентСервер.ОбновитьСуммыПодвала(Объект.Товары, Объект.ЦенаВключаетНДС, СуммаВсего);
		
		ТекущаяСтрокаИдентификатор = ТекущаяСтрока.ПолучитьИдентификатор();
		
		ЗаполнитьСтатусыУказанияСерийПриОкончанииРедактированияСтрокиТЧ(ТекущаяСтрокаИдентификатор, КэшированныеЗначения);
		ОбработкаТабличнойЧастиТоварыКлиентСервер.ОбновитьКэшированныеЗначенияДляУчетаСерий(Элементы.Товары, КэшированныеЗначения,ПараметрыУказанияСерий);
		
		ОбработкаТабличнойЧастиТоварыКлиентСервер.ЗаполнитьКлючСвязи(Объект.Товары, ТекущаяСтрока, "КлючСвязи");
		
		// ИнтеграцияЕГАИС - отключенный функционал
		Если Ложь И Не ЕстьАлкогольнаяПродукцияЕГАИС = ТекущаяСтрока.НеобходимостьВводаАкцизнойМарки Тогда
			Если ТекущаяСтрока.НеобходимостьВводаАкцизнойМарки Тогда
				ЕстьАлкогольнаяПродукцияЕГАИС = Истина;
				УстановитьВидимостьИДоступностьЕГАИС(ЭтотОбъект);
			Иначе
				ЕстьАлкогольнаяПродукцияЕГАИС = Ложь;
				Для Каждого СтрокаТовары Из Объект.Товары Цикл
					Если СтрокаТовары.НеобходимостьВводаАкцизнойМарки Тогда
						ЕстьАлкогольнаяПродукцияЕГАИС = Истина;
						Прервать;
					КонецЕсли;
				КонецЦикла;
				УстановитьВидимостьИДоступностьЕГАИС(ЭтотОбъект);
			КонецЕсли;
		КонецЕсли;
		// Конец ИнтеграцияЕГАИС
		
	КонецЦикла;
	
	КопированиеСтрокСервер.ОчиститьБуферОбмена();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьДоступностьКомандБуфераОбмена()
	
	МассивЭлементов = Новый Массив();
	МассивЭлементов.Добавить("ТоварыВставитьСтроки");
	
	ОбщегоНазначенияРТКлиентСервер.УстановитьСвойствоЭлементовФормы(Элементы, МассивЭлементов, "Доступность", 
		НЕ ОбщегоНазначения.ПустойБуферОбмена("Строки"));
		
КонецПроцедуры

#КонецОбласти

&НаСервере
Процедура ЗаполнитьСистемуНалогообложения()
	
	Если ЗначениеЗаполнено(Объект.ДокументОснование) Тогда
		СистемаНалогообложенияПродажи = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
			Объект.ДокументОснование, "СистемаНалогообложения");
		Если ЗначениеЗаполнено(СистемаНалогообложенияПродажи) Тогда
			Объект.СистемаНалогообложения = СистемаНалогообложенияПродажи;
		Иначе
			ПодключаемоеОборудованиеРТ.ЗаполнитьСистемуНалогообложения(Объект);
		КонецЕсли;
	Иначе
		ПодключаемоеОборудованиеРТ.ЗаполнитьСистемуНалогообложения(Объект);
	КонецЕсли;
	
КонецПроцедуры

#Область НДС

&НаСервере 
Функция ПолучитьПризнакУчетаНДС()
	
	Если РегистрыСведений.ПрименениеСистемНалогообложения.ПолучитьПоследнее(Объект.Дата, Новый Структура("Организация", Объект.Организация)).СистемаНалогообложения = Перечисления.ТипыСистемНалогообложенияККТ.ОСН Тогда
		Возврат Истина;		
	Иначе
		Возврат Ложь;
	КонецЕсли;	       
	
КонецФункции

&НаСервере
Процедура ПересчетНДСТабличнойЧастиСервер()
	
	СтруктураДействий = Новый Структура;
	
	СтруктураПараметровПересчетаНДС = ОбработкаТабличнойЧастиТоварыКлиентСервер.СтруктураПересчетаСуммыНДСВСтрокеТЧ(Объект);
	СтруктураПараметровПересчетаНДС.Вставить("НеобходимоОбработатьВсюТЧ", Истина);
	
	СтруктураДействий.Вставить("ЗаполнитьСтавкуНДС",  ОбработкаТабличнойЧастиТоварыКлиентСервер.СтруктураПараметровСтавкиНДСУчитыватьНДС(Объект));
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПараметровПересчетаНДС);
	СтруктураДействий.Вставить("ПересчитатьСумму");
	
	СтруктураТЧ = Новый Структура;
	СтруктураТЧ.Вставить("СтрокиТЧ" , Объект.Товары);
	ОбработкаТабличнойЧастиТоварыСервер.ПриИзмененииРеквизитовВТЧСервер(СтруктураТЧ, СтруктураДействий, Неопределено);
		
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ЗаполнитьСуммуВсегоВТаблице(Объект.Товары, Объект.ЦенаВключаетНДС);
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ОбновитьСуммыПодвала(Объект.Товары, Объект.ЦенаВключаетНДС, СуммаВсего);
	
	УстановитьТекущуюСтраницуСуммПодвала();
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ИнтеграцияСФормойПроверкиИПодбора

&НаКлиенте
Процедура Подключаемый_ВыполнитьПереопределяемуюКоманду(Команда)
	
	СобытияФормИСКлиент.ВыполнитьПереопределяемуюКоманду(ЭтаФорма, Команда, Неопределено);
	
КонецПроцедуры

#КонецОбласти

//ИнтеграцияИСМПТК
#Область ИСМПТ

&НаКлиенте
Процедура НадписьИСМПТНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	РаботаСДокументамиИСМПТККлиент.ОткрытьДокументИСМПТ_ДокументОснование(ЭтаФорма, ЭтаФорма.ДанныеДокументаИСМПТ);
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаОповещенияЗаписиИСМПТНаСервере()

	ЭтаФорма.ДокументИСМПТСсылка = Неопределено;
	РаботаСДокументамиИСМПТКПереопределяемый.ОбновитьРеквизитыИСМПТ(ЭтаФорма);

КонецПроцедуры

#КонецОбласти

#Область ИСЦЭДМ

&НаКлиенте
Процедура НадписьИСЦЭДМНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	РаботаСДокументамиИСМПТККлиент.ОткрытьДокументИСЦЭДМ_ДокументОснование(ЭтаФорма, ЭтаФорма.ДанныеДокументаИСЦЭДМ);
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаОповещенияЗаписиИСЦЭДМНаСервере()

	ЭтаФорма.ДокументИСЦЭДМСсылка = Неопределено;
	РаботаСДокументамиИСМПТКПереопределяемый.ОбновитьРеквизитыИСЦЭДМ(ЭтаФорма);

КонецПроцедуры

#КонецОбласти
//Конец ИнтеграцияИСМПТК