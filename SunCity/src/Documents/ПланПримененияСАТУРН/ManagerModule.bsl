
#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

#Область Статусы

// Возвращает статус по умолчанию.
// 
// Возвращаемое значение:
//  ПеречислениеСсылка.СтатусыОбработкиПланаПримененияСАТУРН - Статус по-умолчанию.
//
Функция СтатусПоУмолчанию() Экспорт
	
	Возврат Перечисления.СтатусыОбработкиПланаПримененияСАТУРН.Черновик;
	
КонецФункции

// Возвращает статусы ошибок.
//
// Возвращаемое значение:
//  Массив из ПеречислениеСсылка.СтатусыОбработкиПланаПримененияСАТУРН - Статусы ошибок.
//
Функция СтатусыОшибок() Экспорт
	
	Статусы = Новый Массив;
	
	Статусы.Добавить(Перечисления.СтатусыОбработкиПланаПримененияСАТУРН.Ошибка);
	Статусы.Добавить(Перечисления.СтатусыОбработкиПланаПримененияСАТУРН.ПроведеноЧастично);
	
	Возврат Статусы;
	
КонецФункции

// Возвращает конечные статусы документа.
//
// Параметры:
//   ТребуетсяПовторноеОформление - Булево.
//
// Возвращаемое значение:
//  Массив из ПеречислениеСсылка.СтатусыОбработкиПланаПримененияСАТУРН - Конечные статусы.
//
Функция КонечныеСтатусы(ТребуетсяПовторноеОформление = Истина) Экспорт
	
	Статусы = Новый Массив;
	
	Если Не ТребуетсяПовторноеОформление Тогда
		Статусы.Добавить(Перечисления.СтатусыОбработкиПланаПримененияСАТУРН.ПроведенСАТУРН);
	КонецЕсли;
	
	Возврат Статусы;
	
КонецФункции

// Возвращает дальнейшее действие по умолчанию.
// 
// Параметры:
//   СтруктураПараметров - Структура - Входящие данные.
//
// Возвращаемое значение:
//  Массив из ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюСАТУРН - Дальнейшее действие по-умолчанию.
//
Функция ДальнейшееДействиеПоУмолчанию(СтруктураПараметров = Неопределено) Экспорт
	
	Возврат Перечисления.ДальнейшиеДействияПоВзаимодействиюСАТУРН.ПередайтеДанные;
	
КонецФункции

#КонецОбласти

#Область ДействияПриОбмене

// Статус после подготовки к передаче данных.
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.ПланПримененияСАТУРН - Ссылка на документ.
//  Операция - ПеречислениеСсылка.ВидыОперацийСАТУРН - Операция.
//  ДополнительныеПараметры - Структура - Дополнительные параметры.
//
// Возвращаемое значение:
//  Структура - Структура со свойствами:
//   * НовыйСтатус - ПеречислениеСсылка.СтатусыОбработкиПланаПримененияСАТУРН - Новый статус.
//   * ДальнейшееДействие1 - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюСАТУРН - Дальнейшее действие 1.
//   * ДальнейшееДействие2 - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюСАТУРН - Дальнейшее действие 2.
//   * ДальнейшееДействие3 - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюСАТУРН - Дальнейшее действие 3.
//
Функция СтатусПослеПодготовкиКПередачеДанных(ДокументСсылка, Операция, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если Операция = Перечисления.ВидыОперацийСАТУРН.ПланПримененияСозданиеДокумента
		Или Операция = Перечисления.ВидыОперацийСАТУРН.ПланПримененияРасчетСтатуса 
		Или Операция = Перечисления.ВидыОперацийСАТУРН.ПланПримененияРасчетСтатусовПоДокументу Тогда
		
		ПараметрыОбновления = РегистрыСведений.СтатусыДокументовСАТУРН.РассчитатьСтатусыКПередаче(
			ДокументСсылка,
			Перечисления.СтатусыОбработкиПланаПримененияСАТУРН.КПередаче);
		
	ИначеЕсли Операция = Перечисления.ВидыОперацийСАТУРН.ПланПримененияИзменениеДокумента
		Или Операция = Перечисления.ВидыОперацийСАТУРН.ПланПримененияПринятиеКУчету Тогда
		
		СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийСАТУРН.ЗаявкаПринята;
		
		Статусы = РегистрыСведений.СтатусыДокументовСАТУРН.СтруктураСтатусы();
		
		Статусы.Принят = Перечисления.СтатусыОбработкиПланаПримененияСАТУРН.Обрабатывается;
		Статусы.ПринятДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюСАТУРН.ОжидайтеЗавершенияОбработкиДанных);
		
		Статусы.Ошибка = Перечисления.СтатусыОбработкиПланаПримененияСАТУРН.Ошибка;
		Статусы.ОшибкаДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюСАТУРН.ПередайтеДанные);
		Статусы.ОшибкаДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюСАТУРН.ОтменитеОперацию);
		
		ПараметрыОбновления = РегистрыСведений.СтатусыДокументовСАТУРН.РассчитатьСтатусы(ДокументСсылка, СтатусОбработки, Статусы);
	
	Иначе
		ВызватьИсключение ОбщегоНазначенияИС.ТекстИсключенияОбработкиСтатуса(ДокументСсылка, Операция);
	КонецЕсли;
	
	Возврат ПараметрыОбновления;
	
КонецФункции

// Статус после передачи данных.
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.ПланПримененияСАТУРН - Ссылка на документ.
//  Операция - ПеречислениеСсылка.ВидыОперацийСАТУРН - Операция.
//  СтатусОбработки - ПеречислениеСсылка.СтатусыОбработкиСообщенийСАТУРН - Статус обработки сообщения.
//
// Возвращаемое значение:
//  Структура - Структура со свойствами:
//   * НовыйСтатус - ПеречислениеСсылка.СтатусыОбработкиПланаПримененияСАТУРН - Новый статус.
//   * ДальнейшееДействие1 - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюСАТУРН - Дальнейшее действие 1.
//   * ДальнейшееДействие2 - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюСАТУРН - Дальнейшее действие 2.
//   * ДальнейшееДействие3 - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюСАТУРН - Дальнейшее действие 3.
//
Функция СтатусПослеПередачиДанных(ДокументСсылка, Операция, СтатусОбработки) Экспорт
	
	Если СтатусОбработки = Неопределено Тогда
		СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийСАТУРН.ЗаявкаПринята;
	КонецЕсли;
	
	Если Операция = Перечисления.ВидыОперацийСАТУРН.ПланПримененияСозданиеДокумента
		Или Операция = Перечисления.ВидыОперацийСАТУРН.ПланПримененияИзменениеДокумента
		Или Операция = Перечисления.ВидыОперацийСАТУРН.ПланПримененияРасчетСтатуса Тогда
		
		Статусы = РегистрыСведений.СтатусыДокументовСАТУРН.СтруктураСтатусы();
		
		Статусы.Принят = Перечисления.СтатусыОбработкиПланаПримененияСАТУРН.Обрабатывается;
		Статусы.ПринятДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюСАТУРН.ОжидайтеЗавершенияОбработкиДанных);
		
		Статусы.Ошибка = Перечисления.СтатусыОбработкиПланаПримененияСАТУРН.Ошибка;
		Статусы.ОшибкаДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюСАТУРН.ПередайтеДанные);
		Статусы.ОшибкаДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюСАТУРН.ОтменитеОперацию);
		
		ПараметрыОбновления = РегистрыСведений.СтатусыДокументовСАТУРН.РассчитатьСтатусы(ДокументСсылка, СтатусОбработки, Статусы);
		
	Иначе
		ВызватьИсключение ОбщегоНазначенияИС.ТекстИсключенияОбработкиСтатуса(ДокументСсылка, Операция);
	КонецЕсли;
	
	Возврат ПараметрыОбновления;
	
КонецФункции

// Статус после получения данных.
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.ПланПримененияСАТУРН - Ссылка на документ.
//  Операция - ПеречислениеСсылка.ВидыОперацийСАТУРН - Операция.
//  ДополнительныеПараметры - Структура - Структура со свойствами:
//   * СтатусОбработки - ПеречислениеСсылка.СтатусыОбработкиСообщенийСАТУРН - Статус обработки сообщения.
//   * ОперацияКвитанции - ПеречислениеСсылка.ВидыОперацийСАТУРН - Операция, на которую получена квитанция.
//   * ДополнительныеПараметры - Неопределено, Структура - 
// Возвращаемое значение:
//  Структура - Структура со свойствами:
//   * НовыйСтатус - ПеречислениеСсылка.СтатусыОбработкиПланаПримененияСАТУРН - Новый статус.
//   * ДальнейшееДействие1 - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюСАТУРН - Дальнейшее действие 1.
//   * ДальнейшееДействие2 - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюСАТУРН - Дальнейшее действие 2.
//   * ДальнейшееДействие3 - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюСАТУРН - Дальнейшее действие 3.
//
Функция СтатусПослеПолученияДанных(ДокументСсылка, Операция, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если Операция = Перечисления.ВидыОперацийСАТУРН.ПланПримененияСозданиеДокумента Тогда
		
		Статусы = РегистрыСведений.СтатусыДокументовСАТУРН.СтруктураСтатусы();
		
		Статусы.Принят = Перечисления.СтатусыОбработкиПланаПримененияСАТУРН.Обрабатывается;
		Статусы.ПринятДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюСАТУРН.ОжидайтеЗавершенияОбработкиДанных);
		
		Статусы.Обрабатывается = Перечисления.СтатусыОбработкиПланаПримененияСАТУРН.КПередаче;
		Статусы.ОбрабатываетсяДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюСАТУРН.ОжидайтеЗавершенияОбработкиДанных);
		
		Статусы.Ошибка = Перечисления.СтатусыОбработкиПланаПримененияСАТУРН.Ошибка;
		Статусы.ОшибкаДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюСАТУРН.ПередайтеДанные);
		Статусы.ОшибкаДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюСАТУРН.ОтменитеОперацию);
		
		ПараметрыОбновления = РегистрыСведений.СтатусыДокументовСАТУРН.РассчитатьСтатусы(
			ДокументСсылка,
			ДополнительныеПараметры.СтатусОбработки,
			Статусы);
	
	ИначеЕсли Операция = Перечисления.ВидыОперацийСАТУРН.ПланПримененияИзменениеДокумента Тогда
		
		Статусы = РегистрыСведений.СтатусыДокументовСАТУРН.СтруктураСтатусы();
		
		Статусы.Принят = Перечисления.СтатусыОбработкиПланаПримененияСАТУРН.Обрабатывается;
		Статусы.ПринятДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюСАТУРН.ОжидайтеЗавершенияОбработкиДанных);
		
		Статусы.Обрабатывается = Перечисления.СтатусыОбработкиПланаПримененияСАТУРН.Обрабатывается;
		Статусы.ОбрабатываетсяДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюСАТУРН.ОжидайтеЗавершенияОбработкиДанных);
		
		Статусы.Ошибка = Перечисления.СтатусыОбработкиПланаПримененияСАТУРН.Ошибка;
		Статусы.ОшибкаДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюСАТУРН.ПередайтеДанные);
		Статусы.ОшибкаДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюСАТУРН.ОтменитеОперацию);
		
		ПараметрыОбновления = РегистрыСведений.СтатусыДокументовСАТУРН.РассчитатьСтатусы(
			ДокументСсылка,
			ДополнительныеПараметры.СтатусОбработки,
			Статусы);
		
	ИначеЕсли Операция = Перечисления.ВидыОперацийСАТУРН.ПланПримененияПринятиеКУчету Тогда
		
		Статусы = РегистрыСведений.СтатусыДокументовСАТУРН.СтруктураСтатусы();
		
		Статусы.Принят = Перечисления.СтатусыОбработкиПланаПримененияСАТУРН.ПроведенСАТУРН;
		
		Статусы.Обрабатывается = Перечисления.СтатусыОбработкиПланаПримененияСАТУРН.Обрабатывается;
		Статусы.ОбрабатываетсяДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюСАТУРН.ОжидайтеЗавершенияОбработкиДанных);
		
		Статусы.Ошибка = Перечисления.СтатусыОбработкиПланаПримененияСАТУРН.Ошибка;
		Статусы.ОшибкаДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюСАТУРН.ПередайтеДанные);
		Статусы.ОшибкаДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюСАТУРН.ОтменитеОперацию);
		
		ПараметрыОбновления = РегистрыСведений.СтатусыДокументовСАТУРН.РассчитатьСтатусы(
			ДокументСсылка,
			ДополнительныеПараметры.СтатусОбработки,
			Статусы);
		
	ИначеЕсли Операция = Перечисления.ВидыОперацийСАТУРН.ПланПримененияРасчетСтатуса Тогда
		
		Статусы = РегистрыСведений.СтатусыДокументовСАТУРН.СтруктураСтатусы();
		
		Статусы.Принят = Перечисления.СтатусыОбработкиПланаПримененияСАТУРН.ПроведенСАТУРН;
		
		Статусы.Обрабатывается = Перечисления.СтатусыОбработкиПланаПримененияСАТУРН.Обрабатывается;
		Статусы.ОбрабатываетсяДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюСАТУРН.ОжидайтеЗавершенияОбработкиДанных);
		
		Статусы.Ошибка = Перечисления.СтатусыОбработкиПланаПримененияСАТУРН.Ошибка;
		Статусы.ОшибкаДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюСАТУРН.ПередайтеДанные);
		Статусы.ОшибкаДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюСАТУРН.ОтменитеОперацию);
		
		ПараметрыОбновления = РегистрыСведений.СтатусыДокументовСАТУРН.РассчитатьСтатусы(
			ДокументСсылка,
			ДополнительныеПараметры.СтатусОбработки,
			Статусы);
		
	ИначеЕсли Операция = Перечисления.ВидыОперацийСАТУРН.ПланПримененияРасчетСтатусовПоДокументу Тогда
		
		Статусы = РегистрыСведений.СтатусыДокументовСАТУРН.СтруктураСтатусы();
		
		РезультирующийСтатусДокумента = РезультирующийСтатусДокумента(ДокументСсылка);
		Статусы.Принят = РезультирующийСтатусДокумента.Статус;
		Статусы.ПринятДействия = РезультирующийСтатусДокумента.ДальнейшееДействие;
		
		ПараметрыОбновления = РегистрыСведений.СтатусыДокументовСАТУРН.РассчитатьСтатусы(
			ДокументСсылка,
			Перечисления.СтатусыОбработкиСообщенийСАТУРН.ЗаявкаВыполнена,
			Статусы);
		
	Иначе
		ВызватьИсключение ОбщегоНазначенияИС.ТекстИсключенияОбработкиСтатуса(ДокументСсылка, Операция);
	КонецЕсли;
	
	Возврат ПараметрыОбновления;
	
КонецФункции

// Обновить статус после подготовки к передаче данных.
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.ПланПримененияСАТУРН - Ссылка на документ.
//  Операция - ПеречислениеСсылка.ВидыОперацийСАТУРН - Операция.
//  ДополнительныеПараметры - Структура - Дополнительные параметры.
//
// Возвращаемое значение:
//  ПеречислениеСсылка.СтатусыОбработкиПланаПримененияСАТУРН - Новый статус.
//
Функция ОбновитьСтатусПослеПодготовкиКПередачеДанных(ДокументСсылка, Операция, ДополнительныеПараметры = Неопределено) Экспорт
	
	ПараметрыОбновления = СтатусПослеПодготовкиКПередачеДанных(ДокументСсылка, Операция);

	Если ПараметрыОбновления = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если ДополнительныеПараметры <> Неопределено Тогда
		ПараметрыОбновления.ИдентификаторСтроки = ДополнительныеПараметры.ИдентификаторСтроки;
	КонецЕсли;

	НовыйСтатусПослеОбновления = РегистрыСведений.СтатусыДокументовСАТУРН.ОбновитьСтатус(
		ДокументСсылка,
		ПараметрыОбновления, ДополнительныеПараметры);

	Возврат НовыйСтатусПослеОбновления;
	
КонецФункции

// Обновить статус после передачи данных.
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.ПланПримененияСАТУРН - Ссылка на документ.
//  Операция - ПеречислениеСсылка.ВидыОперацийСАТУРН - Операция.
//  СтатусОбработки - ПеречислениеСсылка.СтатусыОбработкиСообщенийСАТУРН - Статус обработки сообщения.
//  ДополнительныеПараметры - Структура - Дополнительные параметры.
//
// Возвращаемое значение:
//  ПеречислениеСсылка.СтатусыОбработкиПланаПримененияСАТУРН - Новый статус.
//
Функция ОбновитьСтатусПослеПередачиДанных(ДокументСсылка, Операция, СтатусОбработки, ДополнительныеПараметры = Неопределено) Экспорт
	
	ПараметрыОбновления = СтатусПослеПередачиДанных(ДокументСсылка, Операция, СтатусОбработки);

	Если ПараметрыОбновления = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если ДополнительныеПараметры <> Неопределено Тогда
		ПараметрыОбновления.ИдентификаторСтроки = ДополнительныеПараметры.ИдентификаторСтроки;
		НовыйСтатусПослеОбновления = РегистрыСведений.СтатусыДокументовСАТУРН.ОбновитьСтатус(
			ДокументСсылка, ПараметрыОбновления, ДополнительныеПараметры);
		ПараметрыОбновления.ИдентификаторСтроки = "";
	КонецЕсли;

	НовыйСтатусПослеОбновления = РегистрыСведений.СтатусыДокументовСАТУРН.ОбновитьСтатус(
		ДокументСсылка,
		ПараметрыОбновления, ДополнительныеПараметры);

	Возврат НовыйСтатусПослеОбновления;
	
КонецФункции

// Обновить статус после получения данных.
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.ПланПримененияСАТУРН - Ссылка на документ.
//  Операция - ПеречислениеСсылка.ВидыОперацийСАТУРН - Операция.
//  ДополнительныеПараметры - Неопределено, Структура - Структура со свойствами:
//   * СтатусОбработки - ПеречислениеСсылка.СтатусыОбработкиСообщенийСАТУРН - Статус обработки сообщения.
//   * ОперацияКвитанции - ПеречислениеСсылка.ВидыОперацийСАТУРН - Операция, на которую получена квитанция.
//
// Возвращаемое значение:
//  ПеречислениеСсылка.СтатусыОбработкиПланаПримененияСАТУРН - Новый статус.
//
Функция ОбновитьСтатусПослеПолученияДанных(ДокументСсылка, Операция, ДополнительныеПараметры = Неопределено) Экспорт
	
	ПараметрыОбновления = СтатусПослеПолученияДанных(ДокументСсылка, Операция, ДополнительныеПараметры);

	Если ПараметрыОбновления = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если ДополнительныеПараметры <> Неопределено Тогда
		
		Если ЗначениеЗаполнено(ДополнительныеПараметры.ИдентификаторСтроки) Тогда
			
			ПараметрыОбновления.ИдентификаторСтроки = ДополнительныеПараметры.ИдентификаторСтроки;
			НовыйСтатусПослеОбновления = РегистрыСведений.СтатусыДокументовСАТУРН.ОбновитьСтатус(
				ДокументСсылка, ПараметрыОбновления, ДополнительныеПараметры);
			
			ПараметрыОбновления.ИдентификаторСтроки = "";
			
		КонецЕсли;
		
	КонецЕсли;

	НовыйСтатусПослеОбновления = РегистрыСведений.СтатусыДокументовСАТУРН.ОбновитьСтатус(
		ДокументСсылка,
		ПараметрыОбновления, ДополнительныеПараметры);

	Возврат НовыйСтатусПослеОбновления;
	
КонецФункции

// Изменяет и возвращает статус документа.
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.ПланПримененияСАТУРН - Ссылка на документ.
//  ПараметрыОбновления - Структура - Структура со свойствами:
//   * НовыйСтатус - ПеречислениеСсылка.СтатусыОбработкиАктаПримененияСАТУРН - Новый статус.
//   * ДальнейшееДействие1 - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюСАТУРН - Дальнейшее действие 1.
//   * ДальнейшееДействие2 - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюСАТУРН - Дальнейшее действие 2.
//   * ДальнейшееДействие3 - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюСАТУРН - Дальнейшее действие 3.
//  ДополнительныеПараметры - Структура - Дополнительные параметры.
// Возвращаемое значение:
//  ПеречислениеСсылка.СтатусыОбработкиПланаПримененияСАТУРН - Новый статус.
//
Функция ОбновитьСтатус(ДокументСсылка, ПараметрыОбновления, ДополнительныеПараметры) Экспорт
	
	НовыйСтатусПослеОбновления = РегистрыСведений.СтатусыДокументовСАТУРН.ОбновитьСтатус(
		ДокументСсылка,
		ПараметрыОбновления, ДополнительныеПараметры);
	
	Возврат НовыйСтатусПослеОбновления;
	
КонецФункции

// Получить последовательность операций в течении жизненного цикла документа.
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.ПланПримененияСАТУРН - Ссылка на документ.
//  ЛинейныйСписок - Булево - Не используется.
//
// Возвращаемое значение:
//  ТаблицаЗначений - см. функцию ПротоколОбменаИС.ПустаяТаблицаПоследовательностьОпераций().
//
Функция ПоследовательностьОпераций(ДокументСсылка, ЛинейныйСписок = Ложь) Экспорт
	
	Таблица = ПротоколОбменаИС.ПустаяТаблицаПоследовательностьОпераций();
	
	Исходящий = Перечисления.ТипыЗапросовИС.Исходящий;
	
	АбстрактнаяОперация = ПротоколОбменаИС.ДобавитьОперациюВПоследовательность(Таблица, 11,
		Исходящий,
		Перечисления.ВидыОперацийСАТУРН.ПланПримененияРасчетСтатуса);
	АбстрактнаяОперация.АбстрактнаяОперация = Истина;

	АбстрактнаяОперация = ПротоколОбменаИС.ДобавитьОперациюВПоследовательность(Таблица, 12,
		Исходящий,
		Перечисления.ВидыОперацийСАТУРН.ПланПримененияРасчетСтатусовПоДокументу);
	АбстрактнаяОперация.АбстрактнаяОперация = Истина;
	
	ПротоколОбменаИС.ДобавитьОперациюВПоследовательность(Таблица, 13,
		Исходящий,
		Перечисления.ВидыОперацийСАТУРН.ПланПримененияСозданиеДокумента);
		
	ПротоколОбменаИС.ДобавитьОперациюВПоследовательность(Таблица, 14,
		Исходящий,
		Перечисления.ВидыОперацийСАТУРН.ПланПримененияИзменениеДокумента);
		
	ПротоколОбменаИС.ДобавитьОперациюВПоследовательность(Таблица, 15,
		Исходящий,
		Перечисления.ВидыОперацийСАТУРН.ПланПримененияПринятиеКУчету);
	
	Возврат Таблица;
	
КонецФункции

// Обработчик изменения статуса документа.
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.ПланПримененияСАТУРН - Ссылка на документ.
//  ПредыдущийСтатус - ПеречислениеСсылка.СтатусыОбработкиПланаПримененияСАТУРН - Предыдущий статус.
//  НовыйСтатус - ПеречислениеСсылка.СтатусыОбработкиПланаПримененияСАТУРН - Новый статус.
//  ПараметрыОбновленияСтатуса - Структура - см. функцию ИнтеграцияСАТУРН.ПараметрыОбновленияСтатуса().
//
Процедура ПриИзмененииСтатусаДокумента(ДокументСсылка, ПредыдущийСтатус, НовыйСтатус, ПараметрыОбновленияСтатуса) Экспорт
	
	ИнтеграцияСАТУРНПереопределяемый.ПриИзмененииСтатусаДокумента(ДокументСсылка, ПредыдущийСтатус, НовыйСтатус, ПараметрыОбновленияСтатуса);
	
	//Получение конечного статуса требующего повторного оформления
	Если КонечныеСтатусы().Найти(НовыйСтатус) <> Неопределено
		И КонечныеСтатусы().Найти(ПредыдущийСтатус) = Неопределено Тогда
		РасчетСтатусовОформленияСАТУРН.РассчитатьСтатусыОформленияДокументов(ДокументСсылка);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ПанельОбменСАТУРН

Функция ВсеТребующиеДействия() Экспорт
	
	МассивДействий = Новый Массив;
	МассивДействий.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюСАТУРН.ПередайтеДанные);
	МассивДействий.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюСАТУРН.ОтменитеОперацию);
	МассивДействий.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюСАТУРН.ВыполнитеОбмен);
	
	Возврат МассивДействий;
	
КонецФункции

Функция ВсеТребующиеОжидания() Экспорт
	
	МассивДействий = Новый Массив;
	МассивДействий.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюСАТУРН.ОжидайтеПередачуДанныхРегламентнымЗаданием);
	МассивДействий.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюСАТУРН.ОжидайтеЗавершенияОбработкиДанных);
	
	Возврат МассивДействий;
	
КонецФункции

#КонецОбласти

#Область ДляВызоваИзДругихПодсистем

#Область Отчеты

// Заполняет список команд отчетов.
//
// Параметры:
//   КомандыОтчетов - ТаблицаЗначений - состав полей см. в функции МенюОтчеты.СоздатьКоллекциюКомандОтчетов
//   Параметры - Структура - Вспомогательные параметры. См. ВариантыОтчетовПереопределяемый.ПередДобавлениемКомандОтчетов.Параметры.
//
Процедура ДобавитьКомандыОтчетов(КомандыОтчетов, Параметры) Экспорт

	ИнтеграцияИСПереопределяемый.ДобавитьКомандуСтруктураПодчиненности(КомандыОтчетов);
	ИнтеграцияИСПереопределяемый.ДобавитьКомандуДвиженияДокумента(КомандыОтчетов);
	
	КомандаОтчет = Отчеты.АнализРасхожденийПриДвиженииСАТУРН.ДобавитьКомандуОтчета(КомандыОтчетов);
	Если КомандаОтчет <> Неопределено Тогда
		КомандаОтчет.Важность = "Обычное";
		КомандаОтчет.Порядок = 1;
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область Печать

// Заполняет список команд печати.
//
// Параметры:
//   КомандыПечати - см. УправлениеПечатью.СоздатьКоллекциюКомандПечати.
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	Возврат;
	
КонецПроцедуры

// Сформировать печатные формы объектов.
//
// Параметры:
//   МассивОбъектов        - Массив из Произвольный         - ссылки на объекты, которые нужно распечатать
//   ПараметрыПечати       - Структура                      - дополнительные настройки печати
//   КоллекцияПечатныхФорм - ТаблицаЗначений                - сформированные табличные документы (выходной параметр)
//   ОбъектыПечати         - СписокЗначений из Произвольный - имя области, в которой был выведен объект (выходной параметр)
//   ПараметрыВывода       - Структура                      - дополнительные параметры сформированных табличных документов (выходной параметр)
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	Возврат;
	
КонецПроцедуры

#КонецОбласти

#Область Прочее

// СтандартныеПодсистемы.ВерсионированиеОбъектов

// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
//
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт
	
	Возврат;
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

// СтандартныеПодсистемы.УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт

	УправлениеДоступомИСПереопределяемый.ПриЗаполненииОграниченияДоступа(
		Метаданные.Документы.НакладнаяСАТУРН, Ограничение);

КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

#КонецОбласти

#Область Серии

//Имена реквизитов, от значений которых зависят параметры указания серий
//
//	Возвращаемое значение:
//		Строка - имена реквизитов, перечисленные через запятую
//
Функция ИменаРеквизитовДляЗаполненияПараметровУказанияСерий() Экспорт
	
	Возврат ИнтеграцияИС.ИменаРеквизитовДляЗаполненияПараметровУказанияСерий(Метаданные.Документы.ПланПримененияСАТУРН);
	
КонецФункции

// Возвращает параметры указания серий для товаров, указанных в документе.
//
// Параметры:
//  Объект - Структура - структура значений реквизитов объекта, необходимых для заполнения параметров указания серий.
// 
// Возвращаемое значение:
//  Произвольный - (См. ИнтеграцияИСПереопределяемый.ЗаполнитьПараметрыУказанияСерий) - особенности указания серий.
//
Функция ПараметрыУказанияСерий(Объект) Экспорт
	
	Возврат ИнтеграцияИС.ПараметрыУказанияСерий(Метаданные.Документы.ПланПримененияСАТУРН, Объект);
	
КонецФункции

// Возвращает текст запроса для расчета статусов указания серий
// Параметры:
//   ПараметрыУказанияСерий - См. ПараметрыУказанияСерий
// Возвращаемое значение:
//   Строка - текст запроса
//
Функция ТекстЗапросаЗаполненияСтатусовУказанияСерий(ПараметрыУказанияСерий) Экспорт
	
	Возврат ИнтеграцияИС.ТекстЗапросаЗаполненияСтатусовУказанияСерий(Метаданные.Документы.ПланПримененияСАТУРН, ПараметрыУказанияСерий);

КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

#Область Обмен

Процедура ОбработкаЗагрузкиПолученныхДанных(ЭлементОчереди, ПараметрыОбмена, ПолученныеДанные, ИзмененныеОбъекты) Экспорт
	
	РеквизитыИсходящегоСообщения = ЭлементОчереди.РеквизитыИсходящегоСообщения;
	
	Если ЭлементОчереди.Операция = Перечисления.ВидыОперацийСАТУРН.ПланПримененияСозданиеДокумента Тогда
		
		СообщенияJSON = Новый Массив;
		
		Идентификатор = ПолученныеДанные.objList._OBJ_ARRAY[0].id;
		
		ЭлементОчередиОснование               = ИнтеграцияСАТУРНСлужебный.ЭлементОчередиСообщенияОснования(ЭлементОчереди, ПараметрыОбмена);
		РеквизитыИсходящегоСообщенияОснования = ЭлементОчередиОснование.РеквизитыИсходящегоСообщения;
		
		ЭлементВерхнеуровневогоСообщения      = ИнтеграцияСАТУРНСлужебный.ЭлементОчередиСообщенияОснования(ЭлементОчередиОснование, ПараметрыОбмена);
		РеквизитыВерхнеуровневогоСообщения    = ЭлементВерхнеуровневогоСообщения.РеквизитыИсходящегоСообщения;
		
		ПараметрыЗапросаКОбновлению = РеквизитыВерхнеуровневогоСообщения.ПараметрыЗапроса;
	
		ОбработанныеСтроки = Неопределено;
		ПараметрыЗапросаКОбновлению.Свойство("ОбработанныеСтроки", ОбработанныеСтроки);
		Если ОбработанныеСтроки = Неопределено Тогда
			ОбработанныеСтроки = Новый Соответствие;
			ПараметрыЗапросаКОбновлению.Вставить("ОбработанныеСтроки", ОбработанныеСтроки);
		КонецЕсли;
		
		ОбработанныеСтроки.Вставить(ЭлементОчереди.ИдентификаторСтроки, Идентификатор);
		
		РеквизитыИсходящегоСообщенияОснования.ИдентификаторЗаявки = Идентификатор;
		
		СообщениеJSON = ИнтеграцияСАТУРНСлужебный.СтруктураСообщенияJSON();
		
		ИнтеграцияСАТУРНСлужебный.ЗаполнитьСообщениеПоИсточнику(СообщениеJSON, РеквизитыИсходящегоСообщения);
		
		СообщениеJSON.Операция            = Перечисления.ВидыОперацийСАТУРН.ПланПримененияИзменениеДокумента;
		СообщениеJSON.Описание            = ИнтеграцияСАТУРНСлужебный.ОписаниеОперацииПередачиДанных(СообщениеJSON.Операция, СообщениеJSON.Документ);
		СообщениеJSON.ИдентификаторЗаявки = Идентификатор;
		СообщениеJSON.ИдентификаторСтроки = РеквизитыИсходящегоСообщения.ИдентификаторСтроки;
		СообщениеJSON.ПараметрыЗапроса    = Новый Структура;
		СообщениеJSON.АргументыОперации   = РеквизитыИсходящегоСообщения.ПараметрыЗапроса;
		СообщениеJSON.АргументыОперации.theCard._id = Идентификатор;
		
		СообщенияJSON.Добавить(СообщениеJSON);
		
		ИнтеграцияСАТУРНСлужебный.ПодготовитьКПередачеИсходныеСообщения(СообщенияJSON, ПараметрыОбмена);
		
	ИначеЕсли ЭлементОчереди.Операция = Перечисления.ВидыОперацийСАТУРН.ПланПримененияИзменениеДокумента Тогда
		
		СообщенияJSON = Новый Массив;
		
		СообщениеJSON = ИнтеграцияСАТУРНСлужебный.СтруктураСообщенияJSON();
		ИнтеграцияСАТУРНСлужебный.ЗаполнитьСообщениеПоИсточнику(СообщениеJSON, РеквизитыИсходящегоСообщения);
		
		СообщениеJSON.ИдентификаторЗаявки = РеквизитыИсходящегоСообщения.ИдентификаторЗаявки;
		СообщениеJSON.ИдентификаторСтроки = РеквизитыИсходящегоСообщения.ИдентификаторСтроки;
		
		СообщениеJSON.Операция = Перечисления.ВидыОперацийСАТУРН.ПланПримененияПринятиеКУчету;
		СообщениеJSON.Описание = ИнтеграцияСАТУРНСлужебный.ОписаниеОперацииПередачиДанных(СообщениеJSON.Операция, СообщениеJSON.Документ);
		
		СообщенияJSON.Добавить(СообщениеJSON);
		
		ИнтеграцияСАТУРНСлужебный.ПодготовитьКПередачеИсходныеСообщения(СообщенияJSON, ПараметрыОбмена);
		
	ИначеЕсли ЭлементОчереди.Операция = Перечисления.ВидыОперацийСАТУРН.ПланПримененияРасчетСтатусовПоДокументу Тогда
		
		ПараметрыЗапроса = ЭлементОчереди.РеквизитыИсходящегоСообщения.ПараметрыЗапроса;
		
		Если ПараметрыЗапроса.Свойство("ОбработанныеСтроки") Тогда
			
			Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки = Блокировка.Добавить(Метаданные.Документы.ПланПримененияСАТУРН.ПолноеИмя());
			ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
			ЭлементБлокировки.УстановитьЗначение("Ссылка", ЭлементОчереди.Документ);
			
			Попытка
				
				Блокировка.Заблокировать();
				
				ДокументОбъект               = ЭлементОчереди.Документ.ПолучитьОбъект();
				
				Для Каждого СтрокаОбработанныхСтрок Из ПараметрыЗапроса.ОбработанныеСтроки Цикл
					
					СтрокаПоИдентификаторуСтроки = ДокументОбъект.Товары.Найти(СтрокаОбработанныхСтрок.Ключ, "Идентификатор");
					
					Если СтрокаПоИдентификаторуСтроки = Неопределено Тогда
						
						ШаблонИсключения = НСтр("ru = 'Не найдена строка по идентификатору %1.'");
						ТекстИсключения  = СтрШаблон(ШаблонИсключения, СтрокаОбработанныхСтрок.Ключ);
						
						ВызватьИсключение ТекстИсключения;
						
					КонецЕсли;
					
					СтрокаПоИдентификаторуСтроки.ИдентификаторСАТУРН = СтрокаОбработанныхСтрок.Значение;
					
				КонецЦикла;
				
				ДокументОбъект.Записать();
				
			Исключение
				ВызватьИсключение;
			КонецПопытки;
			
		КонецЕсли;
		
		Статусы = РегистрыСведений.СтатусыДокументовСАТУРН.СтруктураСтатусы();
		
		РезультирующийСтатусДокумента = РезультирующийСтатусДокумента(ЭлементОчереди.Документ);
		Статусы.Принят = РезультирующийСтатусДокумента.Статус;
		
		Если ЗначениеЗаполнено(РезультирующийСтатусДокумента.ДальнейшееДействие) Тогда
			
			Если ТипЗнч(РезультирующийСтатусДокумента.ДальнейшееДействие) = Тип("Массив") Тогда
				
				Для Каждого СтрокаДальнейшихДействий Из РезультирующийСтатусДокумента.ДальнейшееДействие Цикл
					
					Статусы.ПринятДействия.Добавить(СтрокаДальнейшихДействий);
					
				КонецЦикла;
				
			Иначе
			
				Статусы.ПринятДействия.Добавить(РезультирующийСтатусДокумента.ДальнейшееДействие);
				
			КонецЕсли;
			
		КонецЕсли;
		
		ПараметрыОбновления = РегистрыСведений.СтатусыДокументовСАТУРН.РассчитатьСтатусы(
			ЭлементОчереди.Документ,
			Перечисления.СтатусыОбработкиСообщенийСАТУРН.ЗаявкаВыполнена,
			Статусы);
		
		РегистрыСведений.СтатусыДокументовСАТУРН.ОбновитьСтатус(
			ЭлементОчереди.Документ,
			ПараметрыОбновления);
		ИзмененныеОбъекты.Добавить(ЭлементОчереди.Документ);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Сообщения

// Сообщение к передаче JSON.
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.ПланПримененияСАТУРН - Ссылка на документ.
//  ДальнейшееДействие - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюСАТУРН - Дальнейшее действие.
//  ДополнительныеПараметры - Структура, Неопределено - Дополнительные параметры.
//
// Возвращаемое значение:
//  Массив Из См. ИнтеграцияСАТУРНСлужебный.СтруктураСообщенияJSON - Сообщения к передаче.
//
Функция СообщениеКПередачеJSON(ДокументСсылка, ДальнейшееДействие, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если ДальнейшееДействие = Перечисления.ДальнейшиеДействияПоВзаимодействиюСАТУРН.ПередайтеДанные Тогда
		
		Возврат ПланПримененияСАТУРН(ДокументСсылка, ДополнительныеПараметры);
	
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

#Область Проведение

Функция ДополнительныеИсточникиДанныхДляДвижений(ИмяРегистра) Экспорт

	ИсточникиДанных = Новый Соответствие;

	Возврат ИсточникиДанных;

КонецФункции

Процедура ИнициализироватьДанныеДокумента(ДокументСсылка, ДополнительныеСвойства, Регистры = Неопределено) Экспорт
	
	////////////////////////////////////////////////////////////////////////////
	// Создадим запрос инициализации движений
	
	Запрос = Новый Запрос;
	ЗаполнитьПараметрыИнициализации(Запрос, ДокументСсылка);
	
	////////////////////////////////////////////////////////////////////////////
	// Сформируем текст запроса
	
	ТекстыЗапроса = Новый СписокЗначений;
	ИнтеграцияИСПереопределяемый.ТекстыЗапросовТаблицыДвижения(Запрос, ТекстыЗапроса, Регистры, ДокументСсылка, ДополнительныеСвойства);
	
	ИнтеграцияИС.ИнициализироватьТаблицыДляДвижений(Запрос, ТекстыЗапроса, ДополнительныеСвойства.ТаблицыДляДвижений, Истина);
	
КонецПроцедуры

Процедура ЗаполнитьПараметрыИнициализации(Запрос, ДокументСсылка)
	
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Формирует JSON сообщения для плана применения.
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.ПланПримененияСАТУРН - Ссылка на документ.
//  ДополнительныеПараметры - Структура, Неопределено - Дополнительные параметры.
//  Повторно - Булево - признак подготовки сообщения с исправлениями.
//
// Возвращаемое значение:
//  Массив Из См. ИнтеграцияСАТУРНСлужебный.СтруктураСообщенияJSON - Сообщения к передаче
//
Функция ПланПримененияСАТУРН(ДокументСсылка, ДополнительныеПараметры = Неопределено)
	
	Операция       = Перечисления.ВидыОперацийСАТУРН.ПланПримененияРасчетСтатуса;
	СообщенияJSON  = Новый Массив;
	СписокЗапросов = Новый СписокЗначений;
	
	СписокЗапросов.Добавить(
	"ВЫБРАТЬ
	|	ПрисоединенныеФайлы.Документ                      КАК Ссылка,
	|	МАКСИМУМ(ЕСТЬNULL(ПрисоединенныеФайлы.Версия, 0)) КАК ПоследнийНомерВерсии
	|ПОМЕСТИТЬ Версии
	|ИЗ
	|	Справочник.САТУРНПрисоединенныеФайлы КАК ПрисоединенныеФайлы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПланПримененияСАТУРН КАК Шапка
	|		ПО Шапка.Ссылка                 = &Ссылка
	|		И Шапка.Ссылка                 = ПрисоединенныеФайлы.Документ
	|		И ПрисоединенныеФайлы.Операция = &Операция
	|ГДЕ
	|	ПрисоединенныеФайлы.ТипСообщения = ЗНАЧЕНИЕ(Перечисление.ТипыЗапросовИС.Исходящий)
	|СГРУППИРОВАТЬ ПО
	|	ПрисоединенныеФайлы.Документ
	|");
	
	СписокЗапросов.Добавить(
	"ВЫБРАТЬ
	|	Шапка.Номер                              КАК Номер,
	|	Шапка.Дата                               КАК Дата,
	|	ЕСТЬNULL(Версии.ПоследнийНомерВерсии, 0) КАК ПоследнийНомерВерсии,
	|	Шапка.ДокументОснование                  КАК ДокументОснование,
	|	Шапка.Ссылка                             КАК Документ,
	|
	|	Шапка.Ответственный                      КАК Ответственный,
	|	Представление(Шапка.Ответственный)       КАК ОтветственныйПредставление,
	|
	|	Шапка.ОрганизацияСАТУРН                  КАК ОрганизацияСАТУРН,
	|	Представление(Шапка.ОрганизацияСАТУРН)   КАК ОрганизацияСАТУРНПредставление,
	|	Шапка.ОрганизацияСАТУРН.Идентификатор    КАК ОрганизацияСАТУРНИдентификатор,
	|
	|	Шапка.ПлановаяДатаПрименения             КАК ПлановаяДатаПрименения,
	|	Шапка.СрокОграничений                    КАК СрокОграничений,
	|	Шапка.СпособПримененияПАТ                КАК СпособНанесения,
	|	Шапка.Комментарий                        КАК Комментарий
	|ИЗ
	|	Документ.ПланПримененияСАТУРН КАК Шапка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Версии КАК Версии
	|		ПО Шапка.Ссылка = Версии.Ссылка
	|ГДЕ
	|	Шапка.Ссылка = &Ссылка",
	"Шапка");
	
	СписокЗапросов.Добавить(
	"ВЫБРАТЬ
	|	Препараты.Идентификатор              КАК ИдентификаторПрепарата,
	|	ТаблицаМестаПрименения.Идентификатор КАК ИдентификаторМестаПрименения,
	|	ВЫРАЗИТЬ("""" КАК СТРОКА(36))        КАК ИдентификаторСтроки
	|ИЗ
	|	Документ.ПланПримененияСАТУРН.МестаПрименения КАК ТаблицаМестаПрименения
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПланПримененияСАТУРН.Товары КАК Препараты
	|		ПО ТаблицаМестаПрименения.Ссылка = Препараты.Ссылка
	|ГДЕ
	|	ТаблицаМестаПрименения.Ссылка = &Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	ТаблицаМестаПрименения.НомерСтроки",
	"Идентификаторы");
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка",   ДокументСсылка);
	Запрос.УстановитьПараметр("Операция", Операция);
	
	РезультатЗапроса = ИнтеграцияИС.ВыполнитьПакетЗапросов(Запрос, СписокЗапросов);
	
	//@skip-warning
	Шапка  = РезультатЗапроса["Шапка"].Выбрать();
	Шапка.Следующий();
	//@skip-warning
	Идентификаторы = РезультатЗапроса["Идентификаторы"].Выгрузить();
	
	НомерВерсии = Шапка.ПоследнийНомерВерсии + 1;
	
	Для Каждого СтрокаИдентификаторов Из Идентификаторы Цикл
		
		СтрокаИдентификаторов.ИдентификаторСтроки = СтрШаблон(
			"%1|%2",
			Формат(СтрокаИдентификаторов.ИдентификаторМестаПрименения, "ЧГ=0;"),
			Формат(СтрокаИдентификаторов.ИдентификаторПрепарата, "ЧГ=0;"));
		
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	&Ссылка                                             КАК ДокументСсылка,
		|	ТаблицаИдентификаторов.ИдентификаторСтроки          КАК ИдентификаторСтроки,
		|	ТаблицаИдентификаторов.ИдентификаторМестаПрименения КАК ИдентификаторМестаПрименения,
		|	ТаблицаИдентификаторов.ИдентификаторПрепарата       КАК ИдентификаторПрепарата
		|ПОМЕСТИТЬ ВТ_ТаблицаИдентификаторов
		|ИЗ
		|	&ТаблицаИдентификаторов КАК ТаблицаИдентификаторов
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_ТаблицаИдентификаторов.ДокументСсылка                    КАК ДокументСсылка,
		|	ВТ_ТаблицаИдентификаторов.ИдентификаторСтроки               КАК ИдентификаторСтроки,
		|	ВТ_ТаблицаИдентификаторов.ИдентификаторМестаПрименения      КАК ИдентификаторМестаПрименения,
		|	ВТ_ТаблицаИдентификаторов.ИдентификаторПрепарата            КАК ИдентификаторПрепарата,
		|	Препараты.ПАТ.Идентификатор                                 КАК ПрепаратИдентификатор,
		|	Препараты.Дозировка                                         КАК Дозировка,
		|	ВЫБОР
		|		КОГДА НЕ ТаблицаМестаПрименения.ОписаниеМестаПрименения = """"
		|			ТОГДА ТаблицаМестаПрименения.ОписаниеМестаПрименения
		|		ИНАЧЕ
		|			Представление(ТаблицаМестаПрименения.МестоПрименения)
		|	КОНЕЦ                                                       КАК МестоПримененияПредставление,
		|	ВЫБОР
		|		КОГДА ТаблицаМестаПрименения.МестоПрименения = ЗНАЧЕНИЕ(Справочник.МестаПримененияСАТУРН.ПустаяСсылка)
		|			ТОГДА """"
		|		ИНАЧЕ ТаблицаМестаПрименения.МестоПрименения.Идентификатор
		|	КОНЕЦ                                                       КАК МестоПримененияИдентификатор
		|ИЗ
		|	ВТ_ТаблицаИдентификаторов КАК ВТ_ТаблицаИдентификаторов
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтатусыДокументовСАТУРН КАК СтатусыДокументовСАТУРН
		|		ПО ВТ_ТаблицаИдентификаторов.ДокументСсылка = СтатусыДокументовСАТУРН.Документ
		|			И ВЫРАЗИТЬ(ВТ_ТаблицаИдентификаторов.ИдентификаторСтроки КАК СТРОКА(36)) = СтатусыДокументовСАТУРН.ИдентификаторСтроки
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПланПримененияСАТУРН.МестаПрименения КАК ТаблицаМестаПрименения
		|		ПО ВТ_ТаблицаИдентификаторов.ДокументСсылка = ТаблицаМестаПрименения.Ссылка
		|			И ВТ_ТаблицаИдентификаторов.ИдентификаторМестаПрименения = ТаблицаМестаПрименения.Идентификатор
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПланПримененияСАТУРН.Товары КАК Препараты
		|		ПО ВТ_ТаблицаИдентификаторов.ДокументСсылка = Препараты.Ссылка
		|			И ВТ_ТаблицаИдентификаторов.ИдентификаторПрепарата = Препараты.Идентификатор
		|ГДЕ
		|	НЕ ЕСТЬNULL(СтатусыДокументовСАТУРН.Статус,
		|		ЗНАЧЕНИЕ(Перечисление.СтатусыОбработкиПланаПримененияСАТУРН.ПустаяСсылка)) = ЗНАЧЕНИЕ(Перечисление.СтатусыОбработкиПланаПримененияСАТУРН.ПроведенСАТУРН)";
	
	Запрос.УстановитьПараметр("Ссылка",                 ДокументСсылка);
	Запрос.УстановитьПараметр("ТаблицаИдентификаторов", Идентификаторы);
	
	РезультатЗапроса = Запрос.Выполнить();

	Если РезультатЗапроса.Пустой() Тогда
		
		СообщениеJSON = ИнтеграцияСАТУРНСлужебный.СтруктураСообщенияJSON();
		СообщениеJSON.ОрганизацияСАТУРН   = Шапка.ОрганизацияСАТУРН;
		СообщениеJSON.Документ            = ДокументСсылка;
		СообщениеJSON.ДокументОснование   = Шапка.ДокументОснование;
		СообщениеJSON.Операция            = Перечисления.ВидыОперацийСАТУРН.ПланПримененияСозданиеДокумента;
		СообщениеJSON.Версия              = НомерВерсии;
		
		СообщениеJSON.Описание            = ИнтеграцияСАТУРНСлужебный.ОписаниеОперацииПередачиДанных(СообщениеJSON.Операция, ДокументСсылка);
		
		СообщениеJSON.ТекстОшибки = НСтр("ru = 'Нет данных для выгрузки.'");
		СообщенияJSON.Добавить(СообщениеJSON);
		Возврат СообщенияJSON;
		
	КонецЕсли;
		
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();

	АбстрактноеСообщениеПоДокументуJSON = ИнтеграцияСАТУРНСлужебный.ИнициализироватьСообщениеJSON(
		Шапка, ДокументСсылка, Перечисления.ВидыОперацийСАТУРН.ПланПримененияРасчетСтатусовПоДокументу, НомерВерсии);
	АбстрактноеСообщениеПоДокументуJSON.АргументыОперации = Новый Структура;
	АбстрактноеСообщениеПоДокументуJSON.ПараметрыЗапроса  = Новый Структура;
	
	СообщенияJSON.Добавить(АбстрактноеСообщениеПоДокументуJSON);
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		АбстрактноеСообщениеJSON = ИнтеграцияСАТУРНСлужебный.ИнициализироватьСообщениеJSON(
			Шапка, ДокументСсылка, Перечисления.ВидыОперацийСАТУРН.ПланПримененияРасчетСтатуса, НомерВерсии);
		АбстрактноеСообщениеJSON.АргументыОперации   = Новый Структура;
		АбстрактноеСообщениеJSON.ПараметрыЗапроса    = Новый Структура;
		АбстрактноеСообщениеJSON.ИдентификаторСтроки = ВыборкаДетальныеЗаписи.ИдентификаторСтроки;
		
		АбстрактноеСообщениеJSON.ЗагружатьДо       = АбстрактноеСообщениеПоДокументуJSON.Идентификатор;
		
		АбстрактноеСообщениеJSON.ЯвляетсяОснованиемСообщений = Истина;
		
		СообщенияJSON.Добавить(АбстрактноеСообщениеJSON);
	
		СообщениеJSON = ИнтеграцияСАТУРНСлужебный.СтруктураСообщенияJSON();
		СообщениеJSON.ОрганизацияСАТУРН   = Шапка.ОрганизацияСАТУРН;
		СообщениеJSON.Документ            = ДокументСсылка;
		СообщениеJSON.ДокументОснование   = Шапка.ДокументОснование;
		СообщениеJSON.Версия              = НомерВерсии;
		СообщениеJSON.АргументыОперации   = Новый Структура;
		СообщениеJSON.ПараметрыЗапроса    = Новый Структура;
		СообщениеJSON.ИдентификаторСтроки = ВыборкаДетальныеЗаписи.ИдентификаторСтроки;
		СообщениеJSON.ЗагружатьДо         = АбстрактноеСообщениеJSON.Идентификатор;

		СообщениеJSON.Операция = Перечисления.ВидыОперацийСАТУРН.ПланПримененияСозданиеДокумента;
		АргументыОперации = СообщениеJSON.ПараметрыЗапроса;
		
		СообщениеJSON.Описание            = ИнтеграцияСАТУРНСлужебный.ОписаниеОперацииПередачиДанных(СообщениеJSON.Операция, ДокументСсылка);
		СообщениеJSON.СообщениеОснование = АбстрактноеСообщениеJSON.Идентификатор;
		
		АргументыОперации.Вставить("theCard", Новый Структура);
		ДанныеДокумента = АргументыОперации.theCard;
		
		Описание = СтрШаблон(
			"%1 - %2 - %3", 
			ВыборкаДетальныеЗаписи.МестоПримененияПредставление, 
			Шапка.СпособНанесения, 
			ВыборкаДетальныеЗаписи.Дозировка);
			
		ОписаниеДозировкиИНанесения = СтрШаблон(
			"%1 (%2)",
			Шапка.СпособНанесения,
			ВыборкаДетальныеЗаписи.Дозировка);
		
		ДанныеДокумента.Вставить("_id",                  "");
		ДанныеДокумента.Вставить("name",                 Описание);
		ДанныеДокумента.Вставить("description",          Шапка.Комментарий);
		ДанныеДокумента.Вставить("contractor_id",        Шапка.ОрганизацияСАТУРНИдентификатор);
		ДанныеДокумента.Вставить("docDate",              Шапка.Дата);
		ДанныеДокумента.Вставить("place_acreageId",      ВыборкаДетальныеЗаписи.МестоПримененияИдентификатор);
		ДанныеДокумента.Вставить("place_description",    ВыборкаДетальныеЗаписи.МестоПримененияПредставление);
		ДанныеДокумента.Вставить("planDate",             Шапка.ПлановаяДатаПрименения);
		ДанныеДокумента.Вставить("patProduct_id",        ВыборкаДетальныеЗаписи.ПрепаратИдентификатор);
		ДанныеДокумента.Вставить("patProduct_usageInfo", ОписаниеДозировкиИНанесения);
		ДанныеДокумента.Вставить(
			"applicationMethod",
			ИнтерфейсСАТУРН.СпособПримененияПАТ(Шапка.СпособНанесения));
		Если ЗначениеЗаполнено(Шапка.СрокОграничений) Тогда
			ДанныеДокумента.Вставить("restrictionDuration",  Шапка.СрокОграничений);
		Иначе
			ДанныеДокумента.Вставить("restrictionDuration",  НСтр("ru = 'нет ограничений'"));
		КонецЕсли;
		
		СообщенияJSON.Добавить(СообщениеJSON);
		
	КонецЦикла;
	
	Возврат СообщенияJSON;
	
КонецФункции

Функция РезультирующийСтатусДокумента(ДокументСсылка) Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("Статус",             Неопределено);
	Результат.Вставить("ДальнейшееДействие", Новый Массив);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ТаблицаМестаПрименения.НомерСтроки   КАК НомерСтроки,
		|	Препараты.Идентификатор              КАК ИдентификаторПрепарата,
		|	ТаблицаМестаПрименения.Идентификатор КАК ИдентификаторМестаПрименения,
		|	ВЫРАЗИТЬ("""" КАК СТРОКА(36))        КАК ИдентификаторСтроки
		|ИЗ
		|	Документ.ПланПримененияСАТУРН.МестаПрименения КАК ТаблицаМестаПрименения
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПланПримененияСАТУРН.Товары КАК Препараты
		|		ПО ТаблицаМестаПрименения.Ссылка = Препараты.Ссылка
		|ГДЕ
		|	ТаблицаМестаПрименения.Ссылка = &Ссылка
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки";
	
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);

	РезультатЗапроса = Запрос.Выполнить();

	Идентификаторы = РезультатЗапроса.Выгрузить();
	
	Для Каждого СтрокаИдентификаторов Из Идентификаторы Цикл

		СтрокаИдентификаторов.ИдентификаторСтроки = Формат(СтрокаИдентификаторов.ИдентификаторМестаПрименения, "ЧГ=0;")
			+ "|" + Формат(СтрокаИдентификаторов.ИдентификаторПрепарата, "ЧГ=0;");
		
	КонецЦикла;
	
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	&Ссылка                                             КАК ДокументСсылка,
		|	ТаблицаИдентификаторов.ИдентификаторСтроки          КАК ИдентификаторСтроки,
		|	ТаблицаИдентификаторов.ИдентификаторМестаПрименения КАК ИдентификаторМестаПрименения,
		|	ТаблицаИдентификаторов.ИдентификаторПрепарата       КАК ИдентификаторПрепарата
		|ПОМЕСТИТЬ ВТ_ТаблицаИдентификаторов
		|ИЗ
		|	&ТаблицаИдентификаторов КАК ТаблицаИдентификаторов
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_ТаблицаИдентификаторов.ДокументСсылка                                       КАК ДокументСсылка,
		|	ВТ_ТаблицаИдентификаторов.ИдентификаторСтроки                                  КАК ИдентификаторСтроки,
		|	ЕСТЬNULL(СтатусыДокументовСАТУРН.Статус,
		|		ЗНАЧЕНИЕ(Перечисление.СтатусыОбработкиПланаПримененияСАТУРН.ПустаяСсылка)) КАК Статус
		|ИЗ
		|	ВТ_ТаблицаИдентификаторов КАК ВТ_ТаблицаИдентификаторов
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтатусыДокументовСАТУРН КАК СтатусыДокументовСАТУРН
		|		ПО ВТ_ТаблицаИдентификаторов.ДокументСсылка = СтатусыДокументовСАТУРН.Документ
		|		И ВТ_ТаблицаИдентификаторов.ИдентификаторСтроки = СтатусыДокументовСАТУРН.ИдентификаторСтроки";
	
	Запрос.УстановитьПараметр("ТаблицаИдентификаторов", Идентификаторы);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	ЕстьСформировано = Ложь;
	ЕстьОшибки       = Ложь;
	
	Пока Выборка.Следующий() Цикл
		
		Если Выборка.Статус = Перечисления.СтатусыОбработкиПланаПримененияСАТУРН.ПроведенСАТУРН Тогда
			ЕстьСформировано = Истина;
		ИначеЕсли Выборка.Статус = Перечисления.СтатусыОбработкиПланаПримененияСАТУРН.Обрабатывается Тогда
			
			Результат.Статус = Перечисления.СтатусыОбработкиПланаПримененияСАТУРН.Обрабатывается;
			Результат.ДальнейшееДействие.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюСАТУРН.ОжидайтеЗавершенияОбработкиДанных);
			
			Возврат Результат;
			
		Иначе
			ЕстьОшибки = Истина;
		КонецЕсли;
		
	КонецЦикла;

	ДальнейшееДействие = Новый Массив;

	Если ЕстьСформировано И ЕстьОшибки Тогда
		
		Статус = Перечисления.СтатусыОбработкиПланаПримененияСАТУРН.ПроведеноЧастично;
		ДальнейшееДействие.Добавить(ДальнейшееДействиеПоУмолчанию());

	ИначеЕсли ЕстьСформировано Тогда
		
		Статус = Перечисления.СтатусыОбработкиПланаПримененияСАТУРН.ПроведенСАТУРН;
		
	Иначе
		
		Статус = Перечисления.СтатусыОбработкиПланаПримененияСАТУРН.Ошибка;
		ДальнейшееДействие.Добавить(ДальнейшееДействиеПоУмолчанию());
		
	КонецЕсли;
	
	Результат.Статус             = Статус;
	Результат.ДальнейшееДействие = ДальнейшееДействие;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#КонецЕсли