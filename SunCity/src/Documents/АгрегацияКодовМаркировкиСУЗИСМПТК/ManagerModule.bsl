#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

Процедура ОбработкаПолученияПредставления(Данные, Представление, СтандартнаяОбработка)
	
	Представление = НСтр("ru='Агрегация кодов маркировки (СУЗ) №%1 от %2'");
	Представление = ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(Представление, Данные.Номер, Формат(Данные.Дата, "ДЛФ=DT")); 
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

Процедура ОбработкаПолученияПолейПредставления(Поля, СтандартнаяОбработка)
	
	Поля.Добавить("Номер");
	Поля.Добавить("Дата");
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

#Область СлужебныйПрограммныйИнтерфейс

// Удаляет использованные коды маркировки из пула в случаях:
//   * Все коды маркировки по основанию распечатаны, основание полностью оформлено (по основанию)
//   * Основание не указано или архивировано, коды маркировки распечатаны (по использованным кодам).
//
Процедура ПолучитьИнформациюПоСтатусамАгрегации() Экспорт
	
	НастройкаОбменаСУЗ = ИнтеграцияИСМПТК.НастройкиОбменаСУЗ();
	Если НЕ НастройкаОбменаСУЗ = Неопределено Тогда
		Если ТипЗнч(НастройкаОбменаСУЗ) = Тип("Массив") Тогда
			Для Каждого Настройка Из НастройкаОбменаСУЗ Цикл
				ПолучитьИнформациюПоСтатусамАгрегацииПродолжить(Настройка);
			КонецЦикла;
		Иначе
			ПолучитьИнформациюПоСтатусамАгрегацииПродолжить(НастройкаОбменаСУЗ);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПолучитьИнформациюПоСтатусамАгрегацииПродолжить(НастройкаОбменаСУЗ)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	АгрегацияКодовМаркировкиСУЗИСМПТК.OrderID КАК OrderID,
	|	АгрегацияКодовМаркировкиСУЗИСМПТК.Статус КАК Статус,
	|	АгрегацияКодовМаркировкиСУЗИСМПТК.Ссылка КАК Ссылка,
	|	АгрегацияКодовМаркировкиСУЗИСМПТК.ВидПродукции КАК ВидПродукции
	|ИЗ
	|	Документ.АгрегацияКодовМаркировкиСУЗИСМПТК КАК АгрегацияКодовМаркировкиСУЗИСМПТК
	|ГДЕ
	|	НЕ АгрегацияКодовМаркировкиСУЗИСМПТК.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыОбработкиОтчетовСУЗИСМПТК.Отклонен)
	|	И НЕ АгрегацияКодовМаркировкиСУЗИСМПТК.OrderID = &ПустаяСтрока";
	
	Запрос.УстановитьПараметр("ПустаяСтрока", "");
	Результат = Запрос.Выполнить();
	ОтветСервера = Неопределено;
	
	Если Не Результат.Пустой() Тогда 
		Выборка = Результат.Выбрать();
		Пока Выборка.Следующий() Цикл 
			
			ОтветСервера = ИнтеграцияИСМПТК.ПолучитьСтатусАгрегацииКМ(НастройкаОбменаСУЗ, Выборка.ВидПродукции, Выборка.OrderID);
			
			Если Не ЗначениеЗаполнено(ОтветСервера.ТекстОшибки) Тогда
				
				СтатусОтчета = ИнтеграцияИСМПТК.СтатусОбработкиОтчета(ОтветСервера.ДанныеОСтатусах["reportStatus"]);
				Если Не Выборка.Статус = СтатусОтчета Тогда 
					ДокументОбъект 		  = Выборка.Ссылка.ПолучитьОбъект();
					ДокументОбъект.Статус = СтатусОтчета;
					
					Попытка
						ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
					Исключение
						ТекстСообщения = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияОшибкаПриЗаписиСтатусНеИзменилсяСПараметрами();
						ТекстСообщения = ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(ТекстСообщения, ДокументОбъект, СтатусОтчета);
						
						ИмяСобытия  = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияОшибкаВФункцииСПараметром();
						ИмяСобытия  = СтрЗаменить(ИмяСобытия, "%ИмяФункции%", "Документы.АгрегацияКодовМаркировкиСУЗИСМПТК.ПолучитьИнформациюПоСтатусамАгрегацииПродолжить");
						ТекстОшибки = НСтр("ru = 'Ошибка при выполнении регламентного задания ""%ИмяЗадания%"":'")
									+ Символы.ПС
									+ ТекстСообщения;
						ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ИмяЗадания%", Метаданные.РегламентныеЗадания.ОтправкаПолучениеДанныхСУЗИСМПТК.Предопределенное);
						ОбщегоНазначенияИСМПТКВызовСервера.ЗаписатьОшибкуВЖурналРегистрации(ТекстОшибки, ИмяСобытия);
					КонецПопытки;
				КонецЕсли;
				
			Иначе
				ОбщегоНазначенияИСМПТКВызовСервера.ЗаписатьОшибкуВЖурналРегистрации(ОтветСервера.ТекстОшибки);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если Не ОтветСервера = Неопределено Тогда
		Если ЗначениеЗаполнено(ОтветСервера.ТекстОшибки) Тогда
			ИмяСобытия  = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияОшибкаВФункцииСПараметром();
			ИмяСобытия  = СтрЗаменить(ИмяСобытия, "%ИмяФункции%", "Документы.АгрегацияКодовМаркировкиСУЗИСМПТК.ПолучитьИнформациюПоСтатусамАгрегацииПродолжить");
			ТекстОшибки = НСтр("ru = 'Ошибка при выполнении регламентного задания ""%ИмяЗадания%"":'")
						+ Символы.ПС
						+ ОтветСервера.ТекстОшибки;
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ИмяЗадания%", Метаданные.РегламентныеЗадания.ОтправкаПолучениеДанныхСУЗИСМПТК.Предопределенное);
			ОбщегоНазначенияИСМПТКВызовСервера.ЗаписатьОшибкуВЖурналРегистрации(ТекстОшибки, ИмяСобытия);
		КонецЕсли;
	КонецЕсли;
		
КонецПроцедуры

#КонецОбласти

#Область СтандартныеПодсистемы

Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт
	
КонецПроцедуры

Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт
	
	РаботаСДокументамиИСМПТКПереопределяемый.ПриЗаполненииОграниченияДоступа(Ограничение, ОбщегоНазначенияИСМПТКВызовСервера.ИмяДокументаАгрегацияКодовМаркировкиСУЗИСМПТК());
	
КонецПроцедуры

#КонецОбласти

#Область Печать

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати.
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "АгрегацияКМ";
	КомандаПечати.Представление = Метаданные.Документы.АгрегацияКодовМаркировкиСУЗИСМПТК.Представление();
	КомандаПечати.Порядок = 50;
	
КонецПроцедуры

Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	Если ПечатьКодовМаркировкиИСМПТКПереопределяемый.НужноПечататьМакет(КоллекцияПечатныхФорм, "АгрегацияКМ") Тогда
		
		ПечатнаяФорма = СформироватьПечатнуюФормуАгрегацияКМ(МассивОбъектов, ОбъектыПечати, ПараметрыВывода.КодЯзыка);
		
		ПечатьКодовМаркировкиИСМПТКПереопределяемый.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм,
			"АгрегацияКМ",
			Метаданные.Документы.АгрегацияКодовМаркировкиСУЗИСМПТК.Представление(),
			ПечатнаяФорма,
			,
			"Документ.АгрегацияКодовМаркировкиСУЗИСМПТК.ПФ_MXL_АгрегированныеТовары");
			
		ОписаниеПечатнойФормы = КоллекцияПечатныхФорм.Найти(ВРег("АгрегацияКМ"), "ИмяВРЕГ");
		Если ОписаниеПечатнойФормы <> Неопределено Тогда
			ОписаниеПечатнойФормы.ДоступенВыводНаДругихЯзыках = Истина;
		КонецЕсли;
		
	КонецЕсли;
		
КонецПроцедуры

Функция СформироватьПечатнуюФормуАгрегацияКМ(МассивОбъектов, ОбъектыПечати, КодЯзыка)
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	ТекстЗапросаПоТоварам = ПечатьКодовМаркировкиИСМПТКПереопределяемый.ТекстЗапросаПечатьАгрегацияКодовМаркировки();
	Запрос.Текст = ТекстЗапросаПоТоварам;
	
	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	ВыборкаРеквизиты  = РезультатыЗапроса[0].Выбрать();
	ВыборкаКоды 	  = РезультатыЗапроса[1].Выбрать();
	
	Макет = ПечатьКодовМаркировкиИСМПТКПереопределяемый.МакетПечатнойФормы("Документ.АгрегацияКодовМаркировкиСУЗИСМПТК.ПФ_MXL_АгрегированныеТовары", КодЯзыка);
	РеквизитыДокумента = Новый Структура("Номер, Дата, Организация, ОрганизацияИдентификационныйНомер, ВидПродукции, ВидУпаковки, Ответственный");

	Эталон = Обработки.ПечатьКодовМаркировкиИСМПТК.ПолучитьМакет("Эталон");
	КоличествоМиллиметровВПикселе = Эталон.Рисунки.Квадрат100Пикселей.Высота / 100;
	УровеньЧеткости = 1;
		
	Пока ВыборкаРеквизиты.Следующий() Цикл
		
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		ЗаполнитьЗначенияСвойств(РеквизитыДокумента, ВыборкаРеквизиты);
		
		Если ВыборкаРеквизиты.ВидУпаковки = ПредопределенноеЗначение("Перечисление.ВидыУпаковокИСМПТК.Логистическая") Тогда
			//Для кода SSCC
			ИмяОбласти  = "ОбластьКодАгрегатаSSCC";
			ТипКода 	= 2;
			ИмяКартинки = "КартинкаШтрихкодаSSCC";
		Иначе
			//Для кода GS1 DataMatrix
			ИмяОбласти  = "ОбластьКодАгрегатаDataMatrix";
			ТипКода 	= 24;
			ИмяКартинки = "КартинкаШтрихкодаDataMatrix";
		КонецЕсли;
		
		//Штрихкод агрегата
		ОбластьКартинка = Макет.ПолучитьОбласть(ИмяОбласти);
		ЗначениеШтрихкодаДляКомпоненты = РазборИОбработкаКодовМаркировкиИСМПТКСлужебный.КодGS1ДляКомпонентыПечати(
										 РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйКлиентСервер.Base64ВШтрихкод(ВыборкаРеквизиты.ИдентификационныйКодЕдиницыАгрегации), ТипКода);
		Высота = ОбластьКартинка.Рисунки[ИмяКартинки].Высота;
		Ширина = ОбластьКартинка.Рисунки[ИмяКартинки].Ширина;
		ПараметрыШтрихкода = Новый Структура;
		ПараметрыШтрихкода.Вставить("Ширина",          Окр(Ширина / КоличествоМиллиметровВПикселе) * УровеньЧеткости);
		ПараметрыШтрихкода.Вставить("Высота",          (Окр(Высота / КоличествоМиллиметровВПикселе) * УровеньЧеткости) + 2);
		ПараметрыШтрихкода.Вставить("Штрихкод",        ЗначениеШтрихкодаДляКомпоненты);
		ПараметрыШтрихкода.Вставить("ТипКода",         ТипКода);
		ПараметрыШтрихкода.Вставить("ОтображатьТекст", Истина);
		ПараметрыШтрихкода.Вставить("НеGS1", 		   Ложь); //"Истина" только при генерации штрихкода табачной потребительской упаковки. В коде агрегата ее не может оказаться
		
		ОбластьКартинка.Рисунки[ИмяКартинки].Картинка = ПечатьКодовМаркировкиИСМПТКВызовСервера.ПолучитьКартинкуШтрихкода(ПараметрыШтрихкода);
		
		//Вывод дополнительного поля значения КМ агрегата
		Если НЕ ВыборкаРеквизиты.ВидУпаковки = ПредопределенноеЗначение("Перечисление.ВидыУпаковокИСМПТК.Логистическая") Тогда
			//ОбластьКартинка.Параметры.КодАгрегата = РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйКлиентСервер.Base64ВШтрихкод(ВыборкаРеквизиты.ИдентификационныйКодЕдиницыАгрегации);
			ОбластьКартинка.Параметры.КодАгрегата = ВыборкаРеквизиты.КодИдентификацииУпаковки;
		КонецЕсли;
		
		ТабличныйДокумент.Вывести(ОбластьКартинка);
		
		//Заголовок
		Область = Макет.ПолучитьОбласть("Заголовок");
		Область.Параметры.Заполнить(ВыборкаРеквизиты);
		ТабличныйДокумент.Вывести(Область);
		
		//Данные шапки
		Область = Макет.ПолучитьОбласть("Шапка");
		Область.Параметры.ПредставлениеОрганизации 			= ВыборкаРеквизиты.Организация;
		Область.Параметры.ОрганизацияИдентификационныйНомер = ВыборкаРеквизиты.ОрганизацияИдентификационныйНомер;
		Область.Параметры.Ответственный 					= ВыборкаРеквизиты.Ответственный;
		ТабличныйДокумент.Вывести(Область);
		
		//Данные упаковки
		Область = Макет.ПолучитьОбласть("ДанныеУпаковки");
		Область.Параметры.ВидПродукции = ВыборкаРеквизиты.ВидПродукции;
		Область.Параметры.ВидУпаковки  = ВыборкаРеквизиты.ВидУпаковки;
		Область.Параметры.ЕмкостьУпаковки 			= ВыборкаРеквизиты.ЕмкостьУпаковки;
		Область.Параметры.ФактическоеКоличествоШтук = ВыборкаРеквизиты.ФактическоеКоличествоШтук;
		ТабличныйДокумент.Вывести(Область);
		
		Область = Макет.ПолучитьОбласть("ШапкаТаблицы");
		ТабличныйДокумент.Вывести(Область);
		
	КонецЦикла;
	
	Пока ВыборкаКоды.Следующий() Цикл
		
		//Данные строки
		Область = Макет.ПолучитьОбласть("СтрокаТаблицы");
		Область.Параметры.НомерСтроки  = ВыборкаКоды.НомерСтроки;
		Область.Параметры.GTIN  	   = ВыборкаКоды.GTIN;
		
		ПредставлениеНоменклатуры = "";
		Если ЗначениеЗаполнено(ВыборкаКоды.ПредставлениеНоменклатуры) Тогда
			ПредставлениеНоменклатуры = ПредставлениеНоменклатуры + ВыборкаКоды.ПредставлениеНоменклатуры;
		КонецЕсли;
		Если ЗначениеЗаполнено(ВыборкаКоды.ПредставлениеХарактеристики) Тогда
			ПредставлениеНоменклатуры = ПредставлениеНоменклатуры + " (" + ВыборкаКоды.ПредставлениеХарактеристики + ")";
		КонецЕсли;
		Область.Параметры.Номенклатура = ПредставлениеНоменклатуры;
		
		Область.Параметры.КодИдентификации = ВыборкаКоды.КодИдентификации;
		Если РазборИОбработкаКодовМаркировкиИСМПТКСлужебный.ЭтоКодSSCC(ВыборкаКоды.КодИдентификации) Тогда
			//Это транспортный код
			ТипКода = 2;
		Иначе 
			Если РеквизитыДокумента.ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИСМПТК.Табачная") 
				И РеквизитыДокумента.ВидУпаковки = ПредопределенноеЗначение("Перечисление.ВидыУпаковокИСМПТК.Потребительская") Тогда 
				ТипКода = 18; //DataMatrix для табачных пачек
			Иначе
				ТипКода = 24; //GS1 DataMatrix для всех остальных кодов
			КонецЕсли;
		КонецЕсли;
				
		//Штрихкод кода маркировки
		ЗначениеШтрихкодаДляКомпоненты = РазборИОбработкаКодовМаркировкиИСМПТКСлужебный.КодGS1ДляКомпонентыПечати(
										 РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйКлиентСервер.Base64ВШтрихкод(ВыборкаКоды.КодМаркировки), ТипКода);
		Высота = Область.Рисунки.ШтрихкодКМ.Высота;
		Ширина = Область.Рисунки.ШтрихкодКМ.Ширина;
		ПараметрыШтрихкода = Новый Структура;
		ПараметрыШтрихкода.Вставить("Ширина",          Окр(Ширина / КоличествоМиллиметровВПикселе) * УровеньЧеткости);
		ПараметрыШтрихкода.Вставить("Высота",          Окр(Высота / КоличествоМиллиметровВПикселе) * УровеньЧеткости);
		ПараметрыШтрихкода.Вставить("Штрихкод",        ЗначениеШтрихкодаДляКомпоненты);
		ПараметрыШтрихкода.Вставить("ТипКода",         ТипКода);
		ПараметрыШтрихкода.Вставить("ОтображатьТекст", Истина);
		ПараметрыШтрихкода.Вставить("НеGS1", 		   Ложь); //для ТипКода = 2 это значение игнорируется, для ТипКода = 24 - Ложь. 
				
		Область.Рисунки.ШтрихкодКМ.Картинка = ПечатьКодовМаркировкиИСМПТКВызовСервера.ПолучитьКартинкуШтрихкода(ПараметрыШтрихкода);
		ТабличныйДокумент.Вывести(Область);
		
	КонецЦикла;
	
	Область = Макет.ПолучитьОбласть("ПодвалТаблицы");
	ТабличныйДокумент.Вывести(Область);
	
	Если ПривилегированныйРежим() Тогда
		УстановитьПривилегированныйРежим(Ложь);
	КонецЕсли;
	
	Возврат ТабличныйДокумент;
	
КонецФункции

#КонецОбласти

#КонецЕсли