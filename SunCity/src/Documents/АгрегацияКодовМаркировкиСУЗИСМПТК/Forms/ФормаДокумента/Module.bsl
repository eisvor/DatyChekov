
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("ПрефиксыЭлементовФормы", "АгрегированныеКМ");
	СобытияФормИСМПТКПереопределяемый.ПриСозданииНаСервере_НастроитьПодключаемоеОборудование(ЭтаФорма, ДополнительныеПараметры);
	
	Если Объект.Ссылка.Пустая() Тогда
	
		Объект.OrderID = "";
		Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыОбработкиОтчетовСУЗИСМПТК.Черновик");
		ЗаполнитьВидПродукцииИОграничитьВидимостьПоФОУчета();
		Объект.Ответственный = ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.ТекущийПользователь();
				
	КонецЕсли;
	
	СформироватьСписокВыбораВидаПродукции();
	
	//Справочные поля заполняем по последнему добавленному КМ в таблице
	ЗаполнитьНоменклатураХарактеристикаСправочно();
		
	ЗаполнитьСлужебныеРеквизитыПоНоменклатуре();
	СобытияФормИСМПТКПереопределяемый.ЗаполнитьПризнакИспользованияХарактеристик(Объект.АгрегированныеКМ);
	
	СобытияФормИСМПТКПереопределяемый.ПриСозданииНаСервере(ЭтотОбъект, Отказ, СтандартнаяОбработка);
	
	ПриЧтенииСозданииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	ПриЧтенииСозданииНаСервере();
	СобытияФормИСМПТКПереопределяемый.ПриЧтенииНаСервере(ТекущийОбъект, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	СобытияФормИСМПТККлиентПереопределяемый.ПриОткрытии(ЭтотОбъект, Отказ);
	
	ОбщегоНазначенияИСМПТККлиентПереопределяемый.НачатьОбновлениеКоманд(ЭтотОбъект);
	ОбщегоНазначенияИСМПТККлиентПереопределяемый.НачатьПодключениеОборудованиеПриОткрытииФормы(ЭтаФорма, "СканерШтрихкода");
	
	УправлениеФормой();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если Источник = "ПодключаемоеОборудование" И ВводДоступен() Тогда
		Если ИмяСобытия = "ScanData" Тогда
			//В зависимости от того, сканируют код агрегата или код вложенной позиции - разная обработка значения
			Если Не ЭтаФорма.ТекущийЭлемент = Неопределено Тогда
				Если ЭтаФорма.ТекущийЭлемент.Имя = "Упаковки" Тогда
					Если Объект.Упаковки.Количество() > 0 Тогда //Код агрегата уже указан, поддерживается ввод только 1 кода на документ
						ДополнительныеПараметры = Новый Структура("ЗаполняемаяТаблица, ДанныеКода", "Упаковки", Параметр);
						Оповещение = Новый ОписаниеОповещения("ВводАгрегатаПовторный", ЭтотОбъект, ДополнительныеПараметры);
						ТекстВопроса = ТекстВопросаКодАгрегатаЗаполнен();
						ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет);	
					Иначе
						ОбработкаСобытияСканераОбщая(Параметр, "Упаковки");
					КонецЕсли;	
				Иначе
					//Сканирование вложенной позиции 
					ОбработкаСобытияСканераОбщая(Параметр, "АгрегированныеКМ");
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли ИмяСобытия = РаботаСДокументамиИСМПТККлиентСервер.ИмяСобытияЗаписьАгрегацияКодовМаркировки() Тогда
		
		Если Не Объект.Ссылка.Пустая() Тогда
			ЭтаФорма.Прочитать();
		КонецЕсли;
		
	Иначе
		РаботаСДокументамиИСМПТККлиентПереопределяемый.ОбработкаОповещенияДокументыИСМПТ(ЭтаФорма, Объект.Ссылка, ИмяСобытия, Параметр, Источник);		
	КонецЕсли;
	
	СобытияФормИСМПТККлиентПереопределяемый.ОбработкаОповещения(ЭтотОбъект, ИмяСобытия, Параметр, Источник);
	УправлениеФормой();
	
КонецПроцедуры

&НаКлиенте
Процедура ВнешнееСобытие(Источник, Событие, Данные)
	
	Если Не СобытияФормИСМПТККлиентПереопределяемый.ОбрабатыватьВнешнееСобытиеТО() Тогда 
		Возврат;
	КонецЕсли;
	
	Параметр = Новый Массив;
	Параметр.Добавить(Данные);
	Параметр.Добавить(Неопределено);
	
	Если ВводДоступен() Тогда
		Если Событие = "Штрихкод" ИЛИ Событие = "ПолученШтрихкод" Тогда
			//В зависимости от того, сканируют код агрегата или код вложенной позиции - разная обработка значения
			Если Не ЭтаФорма.ТекущийЭлемент = Неопределено Тогда
				Если ЭтаФорма.ТекущийЭлемент.Имя = "Упаковки" Тогда
					Если Объект.Упаковки.Количество() > 0 Тогда //Код агрегата уже указан, поддерживается ввод только 1 кода на документ
						ДополнительныеПараметры = Новый Структура("ЗаполняемаяТаблица, ДанныеКода", "Упаковки", Параметр);
						Оповещение = Новый ОписаниеОповещения("ВводАгрегатаПовторный", ЭтотОбъект, ДополнительныеПараметры);
						ТекстВопроса = ТекстВопросаКодАгрегатаЗаполнен();
						ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет);	
					Иначе
						ОбработкаСобытияСканераОбщая(Параметр, "Упаковки");
					КонецЕсли;	
				Иначе
					//Сканирование вложенной позиции 
					ОбработкаСобытияСканераОбщая(Параметр, "АгрегированныеКМ");
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	Иначе
		РаботаСДокументамиИСМПТККлиентПереопределяемый.ОбработкаОповещенияДокументыИСМПТ(ЭтаФорма, Объект.Ссылка, Событие, Параметр, Источник);		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	СобытияФормИСМПТКПереопределяемый.ЗаполнитьПризнакИспользованияХарактеристик(Объект.АгрегированныеКМ);
	УправлениеФормой();
	ИнтерфейсИСМПТК.УстановитьЗаголовокФормыДокумента(, Объект.Ссылка, ЭтаФорма);
	
	СобытияФормИСМПТКПереопределяемый.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	СобытияФормИСМПТККлиентПереопределяемый.ПослеЗаписи(ЭтаФорма, ПараметрыЗаписи);
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	СобытияФормИСМПТКПереопределяемый.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	СобытияФормИСМПТККлиентПереопределяемый.ПередЗаписью(ЭтотОбъект, Отказ, ПараметрыЗаписи);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаСобытияСканераОбщая(Параметр, ЗаполняемаяТаблица = "АгрегированныеКМ", ЗаменятьКодАгрегата = Ложь)
	
	ОчиститьСообщения();
	Если Не Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыОбработкиОтчетовСУЗИСМПТК.Черновик") Тогда
		ТекстСообщения = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияУказаниеКМТолькоВЧерновике("ИСМПТ");
		ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
	Иначе
		Если ИнтеграцияИСМПТКВызовСервера.ИспользоватьАвтоПроверкаВалидностиКодаИСМПТК() 
			И Не ЗначениеЗаполнено(Объект.Организация) Тогда
			ТекстСообщения = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияВключенАвтозапросНужнаОрганизацияДляВыполнения("АвтоПроверкаВалидностиКодаИСМПТК");
			ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
			Возврат;
		КонецЕсли;
		Если Не РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйКлиентСервер.ПроверкаФорматаТранспортногоКодаПройденаУспешно(РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйКлиент.ПреобразоватьДанныеСоСканераВСтруктуру(Параметр)) Тогда
			Возврат;
		КонецЕсли;
		ОбработатьКодМаркировки(РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйКлиент.ПреобразоватьДанныеСоСканераВСтруктуру(Параметр),, ЗаполняемаяТаблица, ЗаменятьКодАгрегата);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ВводАгрегатаПовторный(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		
		Параметр 		   = ДополнительныеПараметры.ДанныеКода;
		ЗаполняемаяТаблица = ДополнительныеПараметры.ЗаполняемаяТаблица;
		ОбработкаСобытияСканераОбщая(Параметр, ЗаполняемаяТаблица, Истина);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ПоискПоШтрихкодуВыполнить(Команда)
	
	ОчиститьСообщения();
	Если ИнтеграцияИСМПТКВызовСервера.ИспользоватьАвтоПроверкаВалидностиКодаИСМПТК() 
		И Не ЗначениеЗаполнено(Объект.Организация) Тогда
		ТекстСообщения = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияВключенАвтозапросНужнаОрганизацияДляВыполнения("АвтоПроверкаВалидностиКодаИСМПТК");
		ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	Оповещение = Новый ОписаниеОповещения("ПоискПоШтрихкодуЗавершение", ЭтотОбъект, Новый Структура("ЗаполняемаяТаблица", "АгрегированныеКМ"));
	СобытияФормИСМПТККлиент.ПоказатьВводШтрихкода(Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура КодАгрегатаПоискПоШтрихкодуПоискПоШтрихкодуВыполнить(Команда)
	
	Если Объект.Упаковки.Количество() > 0 Тогда //Код агрегата уже указан, поддерживается ввод только 1 кода на документ
		Оповещение = Новый ОписаниеОповещения("КодАгрегатаПоискПоШтрихкодуВопрос", ЭтотОбъект);
		ТекстВопроса = ТекстВопросаКодАгрегатаЗаполнен();
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет);	
	Иначе
		КодАгрегатаПоискПоШтрихкодуПродолжение();
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура КодАгрегатаПоискПоШтрихкодуВопрос(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		СтруктураДанных = Новый Структура("ЗаполняемаяТаблица, ЗаменятьШК", "Упаковки", Истина);
		КодАгрегатаПоискПоШтрихкодуОбщая(СтруктураДанных);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КодАгрегатаПоискПоШтрихкодуПродолжение()
	
	СтруктураДанных = Новый Структура("ЗаполняемаяТаблица", "Упаковки");
	КодАгрегатаПоискПоШтрихкодуОбщая(СтруктураДанных);
	
КонецПроцедуры

&НаКлиенте
Процедура КодАгрегатаПоискПоШтрихкодуОбщая(СтруктураДанных)
	
	ОчиститьСообщения();
	Оповещение = Новый ОписаниеОповещения("ПоискПоШтрихкодуЗавершение", ЭтотОбъект, СтруктураДанных);
	СобытияФормИСМПТККлиент.ПоказатьВводШтрихкода(Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьКодыМаркировкиИзФайла(Команда)
	
	ОчиститьСообщения();
	Если ИнтеграцияИСМПТКВызовСервера.ИспользоватьАвтоПроверкаВалидностиКодаИСМПТК() 
		И Не ЗначениеЗаполнено(Объект.Организация) Тогда
		ТекстСообщения = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияВключенАвтозапросНужнаОрганизацияДляВыполнения("АвтоПроверкаВалидностиКодаИСМПТК");
		ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.ВидПродукции) Тогда
		
		ТекстОшибки = НСтр("ru = 'Перед загрузкой требуется указать Вид продукции!'");
		ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстОшибки);
		Возврат;
		
	КонецЕсли;
	
	ИнтеграцияИСМПТККлиент.ЗагрузитьКодыМаркировкиИзФайла(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьКодыМаркировкиИзФайлаСРазделителями(Команда)
	
	ОчиститьСообщения();
	Если ИнтеграцияИСМПТКВызовСервера.ИспользоватьАвтоПроверкаВалидностиКодаИСМПТК() 
		И Не ЗначениеЗаполнено(Объект.Организация) Тогда
		ТекстСообщения = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияВключенАвтозапросНужнаОрганизацияДляВыполнения("АвтоПроверкаВалидностиКодаИСМПТК");
		ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.ВидПродукции) Тогда
		ТекстОшибки = НСтр("ru = 'Перед загрузкой требуется указать Вид продукции!'");
		ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстОшибки);
		Возврат;
	КонецЕсли;
	
	Если Объект.Упаковки.Количество() > 0 Тогда //Код агрегата уже указан, поддерживается ввод только 1 кода на документ
		Оповещение = Новый ОписаниеОповещения("ЗагрузитьКодыМаркировкиИзФайлаСРазделителямиПослеВопросаАгрегата", ЭтотОбъект);
		ТекстВопроса = ТекстВопросаКодАгрегатаЗаполнен();
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет);	
	Иначе
		ЗагрузитьКодыМаркировкиИзФайлаСРазделителямиПродолжение();
	КонецЕсли;
			
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьКодыМаркировкиИзФайлаСРазделителямиПослеВопросаАгрегата(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	ЗагрузитьКодыМаркировкиИзФайлаСРазделителямиПродолжение(РезультатВопроса = КодВозвратаДиалога.Да);
		
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьКодыМаркировкиИзФайлаСРазделителямиПродолжение(НужноОчиститьКодАгрегата = Ложь)
	
	ТекстВопроса = НСтр("ru = 'Если выбранный файл CSV содержит информацию по нескольким агрегациям, будут загружены только данные первой упаковки из списка.'")
				 + Символы.ПС + НСтр("ru = 'Для корректной загрузки такого файла необходимо воспользоваться обработкой группового создания Агрегаций.'")
				 + Символы.ПС + НСтр("ru = 'Продолжить загрузку?'");
				 		
	ЗагрузитьКодыМаркировкиИзФайлаСРазделителямиПослеВопроса = Новый ОписаниеОповещения("ЗагрузитьКодыМаркировкиИзФайлаСРазделителямиПослеВопроса", ЭтотОбъект, Новый Структура("НужноОчиститьКодАгрегата", НужноОчиститьКодАгрегата));
	ПоказатьВопрос(ЗагрузитьКодыМаркировкиИзФайлаСРазделителямиПослеВопроса, ТекстВопроса, РежимДиалогаВопрос.ОКОтмена);
		
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьКодыМаркировкиИзФайлаСРазделителямиПослеВопроса(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.ОК Тогда
		
		ДиалогВыбораФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
		ДиалогВыбораФайла.Заголовок = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияЗаголовокВыборФайла();
		ДиалогВыбораФайла.Фильтр 	= "CSV (Comma-Separated Values)(*.csv)|*.csv";
		ДиалогВыбораФайла.ИндексФильтра = 0;
		ДиалогВыбораФайла.ПредварительныйПросмотр = Ложь;
		ДиалогВыбораФайла.ПроверятьСуществованиеФайла = Истина;
		ДиалогВыбораФайла.МножественныйВыбор = Ложь;
		
		Оповещение = Новый ОписаниеОповещения("ЗагрузитьКодыМаркировкиИзФайлаСРазделителямиЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ДиалогВыбораФайла.Показать(Оповещение);
	
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьКодыМаркировкиВФайл(Команда)
	
	Если Объект.Упаковки.Количество() = 0 Тогда
		ТекстОшибки = НСтр("ru = 'Не заполнен код агрегата, выгрузка в указанном формате невозможна.'");
		ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстОшибки);
		Возврат;
	КонецЕсли;
	
	ДиалогВыбораФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Сохранение);
	ДиалогВыбораФайла.Заголовок = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияЗаголовокВыборФайла();
	ДиалогВыбораФайла.Фильтр 	= "CSV (Comma-Separated Values)(*.csv)|*.csv";
	ДиалогВыбораФайла.ИндексФильтра = 0;
	ДиалогВыбораФайла.ПредварительныйПросмотр 	  = Ложь;
	ДиалогВыбораФайла.ПроверятьСуществованиеФайла = Истина;
	ДиалогВыбораФайла.МножественныйВыбор 		  = Ложь;
	Если ЗначениеЗаполнено(Объект.Упаковки[0].КодИдентификацииУпаковки) Тогда
		ДиалогВыбораФайла.ПолноеИмяФайла = Объект.Упаковки[0].КодИдентификацииУпаковки;
	КонецЕсли;
		
	Оповещение = Новый ОписаниеОповещения("ВыгрузитьКодыМаркировкиВФайлЗавершение", ЭтотОбъект);
	ДиалогВыбораФайла.Показать(Оповещение);
		
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьДанныеВExcel(Команда)
	
	Если Объект.Упаковки.Количество() = 0 Тогда
		ТекстОшибки = НСтр("ru = 'Не заполнен код агрегата, выгрузка в указанном формате невозможна.'");
		ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстОшибки);
		Возврат;
	КонецЕсли;
	
	ДиалогВыбораФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Сохранение);
	ДиалогВыбораФайла.Заголовок = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияЗаголовокВыборФайла();
	ДиалогВыбораФайла.Фильтр 	= "Все поддерживаемые форматы файлов(*.xls;*.xlsx;)|*.xls;*.xlsx;|Книга Excel 97 (*.xls)|*.xls|Книга Excel 2007 (*.xlsx)|*.xlsx";
	ДиалогВыбораФайла.ИндексФильтра = 0;
	ДиалогВыбораФайла.ПредварительныйПросмотр 	  = Ложь;
	ДиалогВыбораФайла.ПроверятьСуществованиеФайла = Истина;
	ДиалогВыбораФайла.МножественныйВыбор		  = Ложь;
	Если ЗначениеЗаполнено(Объект.Упаковки[0].КодИдентификацииУпаковки) Тогда
		ДиалогВыбораФайла.ПолноеИмяФайла = Объект.Упаковки[0].КодИдентификацииУпаковки;
	КонецЕсли;
	
	Оповещение = Новый ОписаниеОповещения("СоздатьФайлXLS", ЭтотОбъект);
	ДиалогВыбораФайла.Показать(Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоGTIN(Команда)
	
	Если Объект.АгрегированныеКМ.Количество() = 0 Тогда
		ТекстСообщения = НСтр( "ru = 'Таблица товаров не заполнена!'");
		ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	ТекстВопроса = НСтр("ru = 'Таблица ""Товары"" будут перезаполнена по регистру ""%НаименованиеРегистра%"", при этом уже введенные данные по номенклатуре будут очищены.'")
				 + Символы.ПС
				 + НСтр("ru = 'Выполнить заполнение?'");
	ТекстВопроса = СтрЗаменить(ТекстВопроса, "%НаименованиеРегистра%", ОбщегоНазначенияИСМПТКПереопределяемый.ПолучитьПредставлениеРегистраШтрихкоды());
	ЗаполнитьПоGTINЗавершение = Новый ОписаниеОповещения("ЗаполнитьПоGTINЗавершение", ЭтаФорма);
	ПоказатьВопрос(ЗаполнитьПоGTINЗавершение, ТекстВопроса, РежимДиалогаВопрос.ОКОтмена);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьДанныеИзТСД(Команда)
	
	ОчиститьСообщения();
	Если ИнтеграцияИСМПТКВызовСервера.ИспользоватьАвтоПроверкаВалидностиКодаИСМПТК() 
		И Не ЗначениеЗаполнено(Объект.Организация) Тогда
		ТекстСообщения = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияВключенАвтозапросНужнаОрганизацияДляВыполнения("АвтоПроверкаВалидностиКодаИСМПТК");
		ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	ОбщегоНазначенияИСМПТККлиентПереопределяемый.НачатьЗагрузкуДанныеИзТСД(Новый ОписаниеОповещения("ЗагрузитьИзТСДЗавершение", ЭтотОбъект), УникальныйИдентификатор);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	СтруктураДанных = ПолучитьРеквизитыОрганизацииКонтрагента(Объект.Организация, "Организация");
	ЗаполнитьЗначенияСвойств(Объект, СтруктураДанных, "ОрганизацияИдентификационныйНомер");
	
	УправлениеФормой();
	
КонецПроцедуры

&НаКлиенте
Процедура ВидПродукцииПриИзменении(Элемент)
	
	УстановитьВидУпаковкиПоУмолчанию();
	УправлениеФормой();
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияОчистка(Элемент, СтандартнаяОбработка)
	
	Объект.ОрганизацияИдентификационныйНомер = "";
	
КонецПроцедуры

&НаКлиенте
Процедура ВидПродукцииОчистка(Элемент, СтандартнаяОбработка)
	
	Объект.ИдентификаторПроизводственногоЗаказа = "";
	Объект.ИдентификаторПроизводственнойЛинии   = "";
	Объект.Упаковки.Очистить();
	Объект.АгрегированныеКМ.Очистить();
	Номенклатура   = "";
	Характеристика = "";
	УправлениеФормой();
	
КонецПроцедуры

&НаКлиенте
Процедура АгрегированныеКМПослеУдаления(Элемент)
	
	СтрокаАгрегата = Элементы.Упаковки.ТекущиеДанные;
	Если Не СтрокаАгрегата = Неопределено Тогда
		СтрокаАгрегата.ФактическоеКоличествоШтук = СтрокаАгрегата.ФактическоеКоличествоШтук - 1; //при удалении вложенной позиции уменьшаем количество факт в строке упаковки
	КонецЕсли;
	
	//Справочные поля заполняем по последнему добавленному КМ в таблице
	ЗаполнитьНоменклатураХарактеристикаСправочно();
			
КонецПроцедуры

&НаКлиенте
Процедура АгрегированныеКМПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Отказ = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура АгрегированныеКМНоменклатураПриИзменении(Элемент)
	
	ЗаполнитьСлужебныеРеквизитыПоНоменклатуре();
	
КонецПроцедуры

&НаКлиенте
Процедура ВидУпаковкиПриИзменении(Элемент)
	
	Если Не Объект.Упаковки.Количество() = 0 Тогда
		Объект.Упаковки.Очистить();
	КонецЕсли; 
	УправлениеФормой();
	
КонецПроцедуры

#КонецОбласти

#Область Штрихкодирование

&НаКлиенте
Процедура ОбработатьКодМаркировки(ИсходныеДанные, ДополнительныеПараметры = Неопределено, ЗаполняемаяТаблица, ЗаменятьКодАгрегата = Ложь) Экспорт
	
	Если ИсходныеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	//Для передачи на сервер КМ, в составе которого есть символы GS (29), требуется дополнительное кодирование
	РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйКлиентСервер.ЗакодироватьШтрихкодДанныхBase64(ИсходныеДанные);
	ИсходныеДанные.Вставить("ФорматBase64", Истина);
	СтруктураКодовМаркировки = ИнтеграцияИСМПТКВызовСервера.ПолучитьКодыМаркировки(ИсходныеДанные);   
	
	НужноЗаполнитьАгрегатБезПроверки = Ложь;
	//Если удалось разобрать код, вернется структура. Если нет - текст сообщения об ошибке.
	Если ТипЗнч(СтруктураКодовМаркировки) = Тип("Строка") Тогда
		Если Не ЗаполняемаяТаблица = "АгрегированныеКМ" Тогда
			//В данном случае не отказываем в заполнении, просто вписываем в код агрегата исходный вариант указанного штрихкода, 
			//т.к. это может быть код произвольного формата, допускаемый правилами.
			СтруктураКодовМаркировки = ИсходныеДанные;
			НужноЗаполнитьАгрегатБезПроверки = Истина;
		Иначе
			ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(СтруктураКодовМаркировки);
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Если ЗаполняемаяТаблица = "АгрегированныеКМ" Тогда 
		Если Не НайтиПоКодуИдентификации(СтруктураКодовМаркировки.КодИдентификации) = Неопределено Тогда 
			
			ПараметрыОткрытия = СобытияФормИСМПТККлиент.ПараметрыОткрытияФормыНевозможностиДобавленияОтсканированного();
			ПараметрыОткрытия.Штрихкод    = ИсходныеДанные.Штрихкод;
			ПараметрыОткрытия.ТекстОшибки = НСтр("ru = 'Данный код маркировки уже указан в документе!'");
			ОткрытьФорму(ОбщегоНазначенияИСМПТККлиент.ПолучитьИмяФормыИнформацияОНевозможностиДобавленияКМ(), ПараметрыОткрытия, ЭтаФорма);
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Если Не СтруктураКодовМаркировки = Неопределено Тогда 
		ДобавитьНовыйКод(СтруктураКодовМаркировки, ЗаполняемаяТаблица, ЗаменятьКодАгрегата, НужноЗаполнитьАгрегатБезПроверки);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура ЗагрузитьИзТСДЗавершение(РезультатВыполнения, ДополнительныеПараметры) Экспорт
	
	СобытияФормИСМПТККлиентПереопределяемый.ПриПолученииДанныхИзТСД(Новый ОписаниеОповещения("Подключаемый_ПолученыДанныеИзТСД", ЭтотОбъект), ЭтотОбъект, РезультатВыполнения);
	
	Если ИнтеграцияИСМПТКВызовСервера.ИспользоватьАвтоПроверкаВалидностиКодаИСМПТК() Тогда 
		
		ТокенАвторизацииВрем = Неопределено;
		ЗавершениеПроверитьСостояниеКодовНаСервере = Новый ОписаниеОповещения("ЗавершениеПроверитьСостояниеКодовНаСервере", ЭтаФорма);
		ПолучитьКлючАвторизации(ЗавершениеПроверитьСостояниеКодовНаСервере, Истина);
		
	КонецЕсли;
	
КонецПроцедуры 

&НаКлиенте
Функция НайтиПоКодуИдентификации(КодИдентификации)
	
	СтруктураПоиска = Новый Структура("КодИдентификации", КодИдентификации);
	НайденныеСтроки = Объект.АгрегированныеКМ.НайтиСтроки(СтруктураПоиска);
	
	Если НайденныеСтроки.Количество() > 0 Тогда
		Возврат НайденныеСтроки;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура ПоискПоШтрихкодуЗавершение(ДанныеШтрихкода, ДополнительныеПараметры) Экспорт
	
	Если Не РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйКлиентСервер.ПроверкаФорматаТранспортногоКодаПройденаУспешно(ДанныеШтрихкода) Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполняемаяТаблица = ДополнительныеПараметры.ЗаполняемаяТаблица;
	ЗаменятьШК 		   = ?(ДополнительныеПараметры.Свойство("ЗаменятьШК"), Истина, Ложь);
	ОбработатьКодМаркировки(ДанныеШтрихкода,, ЗаполняемаяТаблица, ЗаменятьШК);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьНовыйКод(СтруктураКодовМаркировки, ЗаполняемаяТаблица = "АгрегированныеКМ", ЗаменятьКодАгрегата = Ложь, НужноЗаполнитьАгрегатБезПроверки = Ложь, ВызываетсяВЦикле = Ложь)
	
	СообщенияОбОшибках = Новый Соответствие();
	Если Не СтруктураКодовМаркировки = Неопределено Тогда 
		
		Если Не НужноЗаполнитьАгрегатБезПроверки Тогда
		
			Если СтруктураКодовМаркировки.ВидУпаковки = ПредопределенноеЗначение("Перечисление.ВидыУпаковокИСМПТК.Логистическая") Тогда
				ЗначНоменклатура   = Неопределено;
				ЗначХарактеристика = Неопределено;
				ЗначВидПродукции   = Объект.ВидПродукции; //у транспортного кода определить невозможно
			Иначе
				ДанныеНоменклатуры = ПолучитьНоменклатуруПоШтрихкоду(СтруктураКодовМаркировки.EAN, СообщенияОбОшибках);
				Если ТипЗнч(ДанныеНоменклатуры) = Тип("Структура") Тогда
					ЗначНоменклатура   = ДанныеНоменклатуры.Номенклатура;
					ЗначХарактеристика = ДанныеНоменклатуры.Характеристика;
				Иначе
					ЗначНоменклатура   = ДанныеНоменклатуры;
					ЗначХарактеристика = Неопределено;
				КонецЕсли;
				Если Не СообщенияОбОшибках.Количество() = 0 Тогда
					Для Каждого СообщениеОшибка Из СообщенияОбОшибках Цикл 
						ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(СообщениеОшибка.Значение);
					КонецЦикла;
				КонецЕсли;
				ЗначВидПродукции = СтруктураКодовМаркировки.ВидПродукции;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(Объект.ВидПродукции) И Объект.ВидПродукции <> ЗначВидПродукции 
				И Не Объект.ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИСМПТК.Обувная") Тогда  //Для обуви возможна мультитоварность
				
				ТекстОшибки = НСтр("ru = 'Код относится к товарной группе %1, ожидается заполнение по товарной группе %2.'")
							+ Символы.ПС 
							+ НСтр("ru = 'Упаковка должна быть монотоварной.'");
				ТекстОшибки = ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(ТекстОшибки, СтруктураКодовМаркировки.ВидПродукции, Объект.ВидПродукции);
				ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстОшибки);
				Возврат;
				
			КонецЕсли;
		
		КонецЕсли;
	
		Если ЗаполняемаяТаблица = "АгрегированныеКМ" Тогда
			//Добавление вложенной позиции
			НоваяСтрока = Объект.АгрегированныеКМ.Добавить();
			НоваяСтрока.КодИдентификации   = СтруктураКодовМаркировки.КодИдентификации;
			Если Не РозничноеВыбытиеИСМПТККлиент.ЭтоСтрокаФорматаBase64(СтруктураКодовМаркировки.КодМаркировки) Тогда
				КодМаркировки = РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйКлиентСервер.ШтрихкодВBase64(СтруктураКодовМаркировки.КодМаркировки);
			Иначе
				КодМаркировки = СтруктураКодовМаркировки.КодМаркировки;
			КонецЕсли;			
			НоваяСтрока.КодМаркировки       = КодМаркировки;
			НоваяСтрока.Номенклатура 	    = ЗначНоменклатура;
			НоваяСтрока.Характеристика	    = ЗначХарактеристика;
			НоваяСтрока.GTIN 	 		    = СтруктураКодовМаркировки.GTIN;
			Если СтруктураКодовМаркировки.Свойство("GTINВерхнегоУровня") Тогда 
				НоваяСтрока.GTINВерхнегоУровня  = СтруктураКодовМаркировки.GTINВерхнегоУровня;
			КонецЕсли;
			НоваяСтрока.EAN 	 		    = СтруктураКодовМаркировки.EAN;
			НоваяСтрока.ВидПродукции 	    = ЗначВидПродукции;
			НоваяСтрока.ИдентификаторСтроки = 1; //На текущий момент агрегат может быть только 1
			
			//Справочные поля заполняем по последнему добавленному КМ в таблице
			ЗаполнитьНоменклатураХарактеристикаСправочно();
			
			Если  Не ВызываетсяВЦикле Тогда //Добавление 1го КМ за раз - сразу выполняем проверку. В случае вызова в цикле запрос статусов выполняем отдельно после завершения обхода.
				//Проверяем состояние кода маркировки и выводим предупреждение, если с кодом что-то не так
				Если ИнтеграцияИСМПТКВызовСервера.ИспользоватьАвтоПроверкаВалидностиКодаИСМПТК() Тогда
					ДополнительныеПараметры = Новый Структура("КодИдентификации", СтруктураКодовМаркировки.КодИдентификации);
					ТокенАвторизацииВрем = Неопределено;
					//отложено: вывод сообщения с результатом запроса статуса
					ЗавершениеПроверитьСостояниеКМПриДобавленииНаСервере = Новый ОписаниеОповещения("ЗавершениеПроверитьСостояниеКМПриДобавленииНаСервере", ЭтаФорма, ДополнительныеПараметры);
					//предварительный запрос токена
					ПолучитьКлючАвторизации(ЗавершениеПроверитьСостояниеКМПриДобавленииНаСервере, Истина);
				КонецЕсли;
			КонецЕсли;
			
			Если Не Объект.Упаковки.Количество() = 0 Тогда
				//при добавлении новой вложенной позиции увеличиваем количество факт в строке упаковки
				Объект.Упаковки[0].ФактическоеКоличествоШтук = Объект.Упаковки[0].ФактическоеКоличествоШтук + 1;
			КонецЕсли;
			
		Иначе
			
			Если НужноЗаполнитьАгрегатБезПроверки Тогда
				КодМаркировкиИзСтруктуры = СтруктураКодовМаркировки.Штрихкод;
			Иначе
				КодМаркировкиИзСтруктуры = СтруктураКодовМаркировки.КодМаркировки;
			КонецЕсли;
			
			Если Не РозничноеВыбытиеИСМПТККлиент.ЭтоСтрокаФорматаBase64(КодМаркировкиИзСтруктуры) Тогда
				КодМаркировки = РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйКлиентСервер.ШтрихкодВBase64(КодМаркировкиИзСтруктуры);
			Иначе
				КодМаркировки = КодМаркировкиИзСтруктуры;
			КонецЕсли;
			
			Если ЗаменятьКодАгрегата Тогда
				//Замена существующей строки
				РедактируемаяСтрока = Объект.Упаковки[0];
				РедактируемаяСтрока.ИдентификационныйКодЕдиницыАгрегации = КодМаркировки;
				Если Не НужноЗаполнитьАгрегатБезПроверки Тогда
					РедактируемаяСтрока.КодИдентификацииУпаковки = СтруктураКодовМаркировки.КодИдентификации;
				Иначе
					РедактируемаяСтрока.КодИдентификацииУпаковки = РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйКлиентСервер.Base64ВШтрихкод(КодМаркировки);
				КонецЕсли;
				
			Иначе
				//Добавление нового кода агрегата
				НоваяСтрока = Объект.Упаковки.Добавить();
				НоваяСтрока.ИдентификационныйКодЕдиницыАгрегации = КодМаркировки;
				Если Не НужноЗаполнитьАгрегатБезПроверки Тогда
					НоваяСтрока.КодИдентификацииУпаковки = СтруктураКодовМаркировки.КодИдентификации;
				Иначе
					НоваяСтрока.КодИдентификацииУпаковки = РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйКлиентСервер.Base64ВШтрихкод(КодМаркировки);
				КонецЕсли;
				НоваяСтрока.ТипАгрегации 			  = ПредопределенноеЗначение("Перечисление.ТипыАгрегацииИСМПТК.НоваяАгрегация");
				НоваяСтрока.ФактическоеКоличествоШтук = Объект.АгрегированныеКМ.Количество();			
			КонецЕсли;
			
		КонецЕсли;				
				
		ЗаполнитьСлужебныеРеквизитыПоНоменклатуре();
		Модифицированность = Истина;
		УправлениеФормой();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьПроцедуруФоновоВыполнено(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияОперацияОтменена());
		Возврат;
	ИначеЕсли Результат.Статус = "Ошибка" Тогда
		ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(Результат.ПодробноеПредставлениеОшибки);
	ИначеЕсли Результат.Статус = "Выполнено" Тогда
		
		// обрабатываем результат
		Модифицированность = Истина;
		
		Если ОбработатьРезультатЗагрузкиКодов(Результат.АдресРезультата) Тогда
			
			СтрокаАгрегата = Элементы.Упаковки.ТекущиеДанные;
			Для Каждого СтрокаКМ Из Объект.АгрегированныеКМ Цикл 
				СтрокаКМ.ИдентификаторСтроки = 1;
			КонецЦикла;
			
			Модифицированность = Истина;
			ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияОперацияЗагрузкиКМЗавершена());
			
			Если ИнтеграцияИСМПТКВызовСервера.ИспользоватьАвтоПроверкаВалидностиКодаИСМПТК() Тогда 
				
				ТокенАвторизацииВрем = Неопределено;
				ЗавершениеПроверитьСостояниеКодовНаСервере = Новый ОписаниеОповещения("ЗавершениеПроверитьСостояниеКодовНаСервере", ЭтаФорма);
				ПолучитьКлючАвторизации(ЗавершениеПроверитьСостояниеКодовНаСервере, Истина);

			КонецЕсли;
		КонецЕсли;
			
	КонецЕсли;
	УправлениеФормой();
	
КонецПроцедуры

&НаСервере
Функция ОбработатьРезультатЗагрузкиКодов(АдресРезультата)
	
	РезультатЗадания      = ПолучитьИзВременногоХранилища(АдресРезультата);
	КоличествоЗагруженных = РезультатЗадания.ТаблицаПолученныхКодов.Количество();
	
	Если РезультатЗадания.Свойство("МассивОшибок") И Не РезультатЗадания.МассивОшибок.Количество() = 0 Тогда
		Для Каждого ТекстОшибки Из РезультатЗадания.МассивОшибок Цикл 
			ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстОшибки);
		КонецЦикла;
	КонецЕсли;
	
	Если РезультатЗадания.Успешно И НЕ КоличествоЗагруженных = 0 Тогда
		СкорректироватьДанныеГрупповыхУпаковок(РезультатЗадания.ТаблицаПолученныхКодов);
		Объект.АгрегированныеКМ.Загрузить(РезультатЗадания.ТаблицаПолученныхКодов);
		Если Не Объект.Упаковки.Количество() = 0 Тогда 
			Объект.Упаковки[0].ФактическоеКоличествоШтук = КоличествоЗагруженных;
		КонецЕсли;
		//Справочные поля заполняем по последнему добавленному КМ в таблице
		ЗаполнитьНоменклатураХарактеристикаСправочно(); 
		Возврат Истина;
	Иначе 
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

&НаСервере
Процедура СкорректироватьДанныеГрупповыхУпаковок(ТаблицаПолученныхКодов)
	
	Для Каждого СтрокаТЧ Из ТаблицаПолученныхКодов Цикл 
		Если Не ЗначениеЗаполнено(СтрокаТЧ.GTIN) И СтрокаТЧ.ВидУпаковки = Перечисления.ВидыУпаковокИСМПТК.Групповая Тогда 
			СтрокаТЧ.GTIN = СтрокаТЧ.GTINВерхнегоУровня;
		КонецЕсли;
	КонецЦикла;
		
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьКодыМаркировкиИзФайлаСРазделителямиЗавершение(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	
	Если НЕ ДополнительныеПараметры = Неопределено Тогда 
		НужноОчиститьКодАгрегата = ДополнительныеПараметры.НужноОчиститьКодАгрегата;
	Иначе
		НужноОчиститьКодАгрегата = Ложь;
	КонецЕсли;
	
	Если Не ВыбранныеФайлы = Неопределено Тогда
		
		ПрочитанныйФайл = Новый ТекстовыйДокумент;
		ПрочитанныйФайл.Прочитать(ВыбранныеФайлы[0]);
		
		СтруктураКода = Новый Структура("Штрихкод, Количество", "", 1);
		КодАгрегатаПредыдущий  = "";
		СписокВложенныхТоваров = Новый СписокЗначений;
		ОшибкаЗагрузки 		   = Ложь;
		
		Для НомерСтроки = 1 По ПрочитанныйФайл.КоличествоСтрок() Цикл
			
			СтрокаФайла = ПрочитанныйФайл.ПолучитьСтроку(НомерСтроки);
			
			ПозицияРазделителя = СтрНайти(СтрокаФайла, ",");
			Если ПозицияРазделителя = 0 Тогда
				ОшибкаЗагрузки = Истина;
				ТекстОшибки    = НСтр("ru = 'Указанный файл не соответствует ожидаемой структуре, загрузка данных не была произведена!'");
				ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстОшибки);
				Прервать;
			КонецЕсли;
				
			КодАгрегатаИзСтроки   = Лев(СтрокаФайла,  ПозицияРазделителя - 1);
			КодМаркировкиИзСтроки = Сред(СтрокаФайла, ПозицияРазделителя + 1);
			
			Если КодАгрегатаИзСтроки = КодАгрегатаПредыдущий ИЛИ НомерСтроки = 1 Тогда
				СписокВложенныхТоваров.Добавить(КодМаркировкиИзСтроки);
				КодАгрегатаПредыдущий = КодАгрегатаИзСтроки;
			Иначе
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
		Если Не ОшибкаЗагрузки Тогда 
			
			КодАгрегацииBase64 = РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйКлиентСервер.ШтрихкодВBase64(КодАгрегатаПредыдущий); //Код агрегата в кодировке
			Для Каждого СтрокаКМ Из СписокВложенныхТоваров Цикл
				ДанныеШК = Новый Структура("Штрихкод, Количество, ФорматBase64", РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйКлиентСервер.ШтрихкодВBase64(СтрокаКМ.Значение), 1, Истина);
				ДобавитьКодМаркировкиИзФайла(ДанныеШК);
			КонецЦикла;
			
			Если ИнтеграцияИСМПТКВызовСервера.ИспользоватьАвтоПроверкаВалидностиКодаИСМПТК() Тогда
				ТокенАвторизацииВрем = Неопределено;
				ЗавершениеПроверитьСостояниеКодовНаСервере = Новый ОписаниеОповещения("ЗавершениеПроверитьСостояниеКодовНаСервере", ЭтаФорма);
				ПолучитьКлючАвторизации(ЗавершениеПроверитьСостояниеКодовНаСервере, Истина);
			КонецЕсли;
				
			//Если код агрегата - DataMatrix, разделяем его на КМ и КИ. Если SSCC - оставляем без изменений
			ИсходныеДанные = Новый Структура();
			ИсходныеДанные.Вставить("Штрихкод", 	КодАгрегацииBase64);
			ИсходныеДанные.Вставить("ФорматBase64", Истина);
			СтруктураКодовМаркировки = ИнтеграцияИСМПТКВызовСервера.ПолучитьКодыМаркировки(ИсходныеДанные);
			
			Если Не ТипЗнч(СтруктураКодовМаркировки) = Тип("Строка") Тогда 
				//Удалось разобрать код, значит это групповая упаковка
				КМ = РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйКлиентСервер.ШтрихкодВBase64(СтруктураКодовМаркировки.КодМаркировки);
				КИ = СтруктураКодовМаркировки.КодИдентификации;
			Иначе
				//Это SSCC 
				КМ = КодАгрегацииBase64;
				КИ = РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйКлиентСервер.Base64ВШтрихкод(КодАгрегацииBase64);
			КонецЕсли;
			
			Если Не Объект.Упаковки.Количество() = 0 Тогда
				Если НужноОчиститьКодАгрегата Тогда 
					Объект.Упаковки[0].ФактическоеКоличествоШтук = СписокВложенныхТоваров.Количество();
					Объект.Упаковки[0].ИдентификационныйКодЕдиницыАгрегации = КМ;
					Объект.Упаковки[0].КодИдентификацииУпаковки				= КИ
				КонецЕсли; //Иначе ничего не делаем, т.к. код упаковки менять не нужно
			Иначе
				НоваяСтрокаАгрегат = Объект.Упаковки.Добавить();
				НоваяСтрокаАгрегат.ТипАгрегации = ПредопределенноеЗначение("Перечисление.ТипыАгрегацииИСМПТК.НоваяАгрегация");
				НоваяСтрокаАгрегат.ИдентификационныйКодЕдиницыАгрегации = КМ;
				НоваяСтрокаАгрегат.КодИдентификацииУпаковки				= КИ;
				НоваяСтрокаАгрегат.ФактическоеКоличествоШтук = СписокВложенныхТоваров.Количество();
			КонецЕсли;
			
		КонецЕсли;
			
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьКодыМаркировкиВФайлЗавершение(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	
	Если Не ВыбранныеФайлы = Неопределено Тогда
		
		НовыйТекстовыйДокумент = Новый ТекстовыйДокумент;
		
		Если Не Объект.Упаковки.Количество() = 0 Тогда
			КодАгрегата = РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйКлиентСервер.Base64ВШтрихкод(Объект.Упаковки[0].ИдентификационныйКодЕдиницыАгрегации);
		Иначе
			КодАгрегата = "";
		КонецЕсли;
		
		Для Каждого СтрокаТЧ Из Объект.АгрегированныеКМ Цикл
			СтрокаЗагрузки = КодАгрегата + "," + СтрокаТЧ.КодИдентификации;
			НовыйТекстовыйДокумент.ДобавитьСтроку(СтрокаЗагрузки);
		КонецЦикла;
		
		НовыйТекстовыйДокумент.Записать(ВыбранныеФайлы[0]);
				
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура СоздатьФайлXLS(ВыбранныеФайлы, ДополнительныеПараметрым) Экспорт
	
	Если Не ВыбранныеФайлы = Неопределено Тогда
		
		ТабличныйДокумент = Новый ТабличныйДокумент;
		
		Если Не Объект.Упаковки.Количество() = 0 Тогда
			КодАгрегата = РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйКлиентСервер.Base64ВШтрихкод(Объект.Упаковки[0].ИдентификационныйКодЕдиницыАгрегации);
		Иначе
			КодАгрегата = "";
		КонецЕсли;
		
		Итератор = 1;
		Для Каждого СтрокаТЧ Из Объект.АгрегированныеКМ Цикл
			
			КодТовара    = СтрокаТЧ.КодИдентификации;
			КодДляЗаписи = КодАгрегата + "," + КодТовара;
						
			ТабличныйДокумент.Область("R" + Формат(Итератор,"ЧГ=0") + "C1").Текст = КодДляЗаписи;
			Итератор = Итератор + 1;
		КонецЦикла;
		
		ТабличныйДокумент.Записать(ВыбранныеФайлы[0], ТипФайлаТабличногоДокумента.XLS97);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьКодМаркировкиИзФайла(ИсходныеДанные)
	
	СтруктураКодовМаркировки = ИнтеграцияИСМПТКВызовСервера.ПолучитьКодыМаркировки(ИсходныеДанные);   
	
	//Если удалось разобрать код, вернется структура. Если нет - текст сообщения об ошибке.
	Если ТипЗнч(СтруктураКодовМаркировки) = Тип("Строка") Тогда
		ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(СтруктураКодовМаркировки);
		Возврат;
	КонецЕсли;
	
	ТекстОшибки = "";
	
	Если Не НайтиПоКодуИдентификации(СтруктураКодовМаркировки.КодИдентификации) = Неопределено Тогда	
		
		ТекстОшибки = НСтр("ru = 'Код маркировки %1 не был добавлен, поскольку уже присутствует в документе!'");
		ТекстОшибки = ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(ТекстОшибки, СтруктураКодовМаркировки.КодИдентификации);
		ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстОшибки);
		
	Иначе
		
		ДобавитьНовыйКод(СтруктураКодовМаркировки,,,,Истина);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииСозданииНаСервере()

	УправлениеФормой();
	ИнтерфейсИСМПТК.УстановитьЗаголовокФормыДокумента(, Объект.Ссылка, ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Функция ПолучитьРеквизитыОрганизацииКонтрагента(Ссылка, Реквизит) Экспорт
	
	Возврат ИнтеграцияИСМПТКПереопределяемый.ПолучитьРеквизитыОрганизацииКонтрагента(Ссылка, Реквизит);
	
КонецФункции

&НаСервере
Процедура УправлениеФормой() 
	
	//Редактирование формы
	РазрешенТолькоПросмотр = Объект.Статус <> ПредопределенноеЗначение("Перечисление.СтатусыОбработкиОтчетовСУЗИСМПТК.Черновик");
	
	//Данные по коду упаковки
	Если Объект.Упаковки.Количество() = 1 Тогда
		Объект.Упаковки[0].ТипАгрегации = ПредопределенноеЗначение("Перечисление.ТипыАгрегацииИСМПТК.НоваяАгрегация");
	КонецЕсли;
		
	//Специфика отображения полей по ТГ
	Товар_ТабакФарма = Объект.ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИСМПТК.АльтернативныйТабак") 
					    Или Объект.ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИСМПТК.Табачная") 
					    Или Объект.ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИСМПТК.ЛекарственныеПрепараты");
	Товар_ОбувьАлкоМолоко = Объект.ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИСМПТК.Алкогольная") 
						Или Объект.ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИСМПТК.Обувная")
						Или Объект.ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИСМПТК.МолочнаяПродукция");
		
	ОбщегоНазначенияИСМПТККлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГруппаТабакФарма", "Видимость", Товар_ТабакФарма);
	
	//Генерация SSCC
	Если ПравоДоступа("Просмотр", Метаданные.РегистрыСведений.ШтрихкодыSSCCИСМПТК) Тогда
		ДоступностьГруппыSSCC = ЗначениеЗаполнено(Объект.Организация) 
								И Объект.ВидУпаковки = ПредопределенноеЗначение("Перечисление.ВидыУпаковокИСМПТК.Логистическая")
								И Не РазрешенТолькоПросмотр;
		ОбщегоНазначенияИСМПТККлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГруппаSSCCБиблиотека", "Видимость",   Объект.ВидУпаковки = ПредопределенноеЗначение("Перечисление.ВидыУпаковокИСМПТК.Логистическая"));
		ОбщегоНазначенияИСМПТККлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГруппаSSCCБиблиотека", "Доступность", ДоступностьГруппыSSCC);
	Иначе
		ОбщегоНазначенияИСМПТККлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГруппаSSCCБиблиотека", "Видимость",   Ложь);
	КонецЕсли;
		
	ОбщегоНазначенияИСМПТККлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "УпаковкиКодАгрегатаПоискПоШтрихкоду", "Доступность", Не РазрешенТолькоПросмотр);
	
	//Общее
	ОбщегоНазначенияИСМПТККлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "АгрегированныеКМ", "ТолькоПросмотр", РазрешенТолькоПросмотр);
	ОбщегоНазначенияИСМПТККлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "Упаковки", 		  "ТолькоПросмотр", РазрешенТолькоПросмотр);
	ОбщегоНазначенияИСМПТККлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГруппаШапка",	  "ТолькоПросмотр", РазрешенТолькоПросмотр);
	//Агрегаты
	ОбщегоНазначенияИСМПТККлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГруппаКодыАгрегацииСписком", "ТолькоПросмотр", РазрешенТолькоПросмотр);
	ОбщегоНазначенияИСМПТККлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГруппаКодыАгрегации",	    "ТолькоПросмотр", РазрешенТолькоПросмотр);
	//Команды ТЧ
	ОбщегоНазначенияИСМПТККлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "АгрегированныеКМПоискПоШтрихкоду", "Доступность", Не РазрешенТолькоПросмотр);
	ОбщегоНазначенияИСМПТККлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "АгрегированныеКМЗагрузитьДанныеИзТСД",  	  "Доступность", Не РазрешенТолькоПросмотр);
	ОбщегоНазначенияИСМПТККлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "АгрегированныеКМЗагрузитьКодыМаркировкиИзФайла", "Доступность", Не РазрешенТолькоПросмотр);
	ОбщегоНазначенияИСМПТККлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "АгрегированныеКМЗагрузитьКодыМаркировкиИзФайлаСРазделителями",  "Доступность", Не РазрешенТолькоПросмотр);
	
	//Характеристики
	ХарактеристикиИспользуются = ИнтеграцияИСМПТКПереопределяемый.ПроверитьИспользованиеХарактеристик();
	Если ХарактеристикиИспользуются Тогда //в целом по конфигурации 
		Если ЗначениеЗаполнено(Характеристика) Тогда //у конкретной номенклатуры в этой форме
			ОбщегоНазначенияИСМПТККлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "Характеристика", "Видимость", ХарактеристикиИспользуются);
		Иначе
			ОбщегоНазначенияИСМПТККлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "Характеристика", "Видимость", Ложь);
		КонецЕсли;	
	КонецЕсли;
	
	//Отражение в учете
	ДокументМожноОтразитьВБазе = РаботаСДокументамиИСМПТКПереопределяемый.ПроверитьВозможностьОтраженияДокументаВУчете(ОбщегоНазначенияИСМПТКВызовСервера.ИмяДокументаАгрегацияКодовМаркировкиСУЗИСМПТК());
	ОбщегоНазначенияИСМПТККлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ФормаГруппаОтражение", "Видимость", ДокументМожноОтразитьВБазе);
	ОбщегоНазначенияИСМПТККлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ПредставлениеДокументаОснования", "Видимость", ДокументМожноОтразитьВБазе);
	
	//Мобильное приложение
	ИспользоватьПриложение = Константы.ИспользоватьМобильноеПриложениеИСМПТК.Получить();
	Если Не ИспользоватьПриложение Тогда
		ОбщегоНазначенияИСМПТККлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "АгрегированныеКМЗагрузитьКодыМаркировкиИзМобильногоПриложения", "Видимость", Ложь);
	Иначе
		ОбщегоНазначенияИСМПТККлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "АгрегированныеКМЗагрузитьКодыМаркировкиИзМобильногоПриложения", "Доступность", Не РазрешенТолькоПросмотр);
	КонецЕсли;
				
	СформироватьПредставлениеСостояния();
	СобытияФормИСМПТКПереопределяемый.УстановитьУсловноеОформлениеХарактеристикНоменклатуры(ЭтаФорма, "АгрегированныеКМХарактеристика", "Объект.АгрегированныеКМ.ХарактеристикиИспользуются");
	УстановитьВидимостьКнопокИзмененияСтатуса();
	
КонецПроцедуры

&НаСервере
Процедура СформироватьПредставлениеСостояния()
	
	ОтчетПереданНаСервер = ЗначениеЗаполнено(Объект.OrderID);
	
	Если Объект.Статус = Перечисления.СтатусыОбработкиОтчетовСУЗИСМПТК.Отправлен Тогда //финальный статус после проверок на сервере
				
		ПредставлениеСостояния = НСтр("ru = 'Успешно принят системой СУЗ'");
		
	ИначеЕсли Объект.Статус = Перечисления.СтатусыОбработкиОтчетовСУЗИСМПТК.Черновик Тогда
		
		ПредставлениеСостояния = НСтр("ru = 'Черновик'");
		
	ИначеЕсли Объект.Статус = Перечисления.СтатусыОбработкиОтчетовСУЗИСМПТК.ВОжидании 
		И ОтчетПереданНаСервер Тогда
		
		ПредставлениеСостояния = НСтр("ru = 'Находится в ожидании в СУЗ'");
		
	ИначеЕсли Объект.Статус = Перечисления.СтатусыОбработкиОтчетовСУЗИСМПТК.ГотовКОтправке 
		И ОтчетПереданНаСервер Тогда
		
		ПредставлениеСостояния = НСтр("ru = 'Проверяется в СУЗ'");
		
	ИначеЕсли Объект.Статус = Перечисления.СтатусыОбработкиОтчетовСУЗИСМПТК.Отклонен Тогда
		
		ПредставлениеСостояния = НСтр("ru = 'Отклонен на стороне СУЗ'");
		
	Иначе
		
		Если Объект.Ссылка.Пустая() Тогда
			ПредставлениеСостояния = НСтр("ru = 'Новый документ'");
		Иначе
			ПредставлениеСостояния = НСтр("ru = 'Документ %Состояние%'");
			ПредставлениеСостояния = СтрЗаменить(ПредставлениеСостояния, "%Состояние%", НРег(Объект.Состояние));
		КонецЕсли;
		
	КонецЕсли;
	
	Элементы.ПредставлениеСостояния.ЦветТекста = ОбщегоНазначенияИСМПТККлиентСервер.ЦветСостояния(Объект.Состояние);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоGTINЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.ОК Тогда
		ЗаполнитьПоGTINНаСервере();
		Модифицированность = Истина;
	КонецЕсли;
		
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоGTINНаСервере()
	
	// Необходимо по введенным пользователем кодам GTIN найти соответствия в РС Штрихкоды номенклатуры 
	// и дозаполнить данные в ТЧ по номенклатуре, характеристикам, упаковкам
	ТаблицаКодовGTIN = Новый ТаблицаЗначений();
	ТаблицаКодовGTIN.Колонки.Добавить("НомерСтрокиВЗаказе");
	ТаблицаКодовGTIN.Колонки.Добавить("Штрихкод");
	ТаблицаКодовGTIN.Колонки.Добавить("Номенклатура");
	ТаблицаКодовGTIN.Колонки.Добавить("Характеристика");
	ТаблицаКодовGTIN.Колонки.Добавить("Упаковка");
	
	Для Каждого СтрокаТЧ Из Объект.АгрегированныеКМ Цикл
		
		Если ЗначениеЗаполнено(СтрокаТЧ.EAN) Тогда
			
			НоваяСтрока = ТаблицаКодовGTIN.Добавить();
			НоваяСтрока.НомерСтрокиВЗаказе = СтрокаТЧ.НомерСтроки;
			НоваяСтрока.Штрихкод 		   = СтрокаТЧ.EAN;
			
		ИначеЕсли ЗначениеЗаполнено(СтрокаТЧ.GTINВерхнегоУровня) Тогда
			
			НоваяСтрока = ТаблицаКодовGTIN.Добавить();
			НоваяСтрока.НомерСтрокиВЗаказе = СтрокаТЧ.НомерСтроки;
			// В ТЧ Товары хранится GTIN, для поиска соответствия в РС нужен EAN.
			Штрихкод = РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйКлиентСервер.EANПоGTIN(СтрокаТЧ.GTINВерхнегоУровня);
			НоваяСтрока.Штрихкод = Штрихкод;
			СтрокаТЧ.EAN 		 = Штрихкод 
					
		КонецЕсли;
		
	КонецЦикла;
	
	ДанныеПоНоменклатуре = РаботаСДокументамиИСМПТКПереопределяемый.ПолучитьДанныеОНоменклатуреПоGTIN(ТаблицаКодовGTIN); 
	
	Если ДанныеПоНоменклатуре.Количество() <> 0 Тогда
		
		Для Каждого Строка Из ДанныеПоНоменклатуре Цикл
			
			Объект.АгрегированныеКМ[Строка.НомерСтрокиВЗаказе-1].Номенклатура   = Строка.Номенклатура;
			Объект.АгрегированныеКМ[Строка.НомерСтрокиВЗаказе-1].Характеристика = Строка.Характеристика;
						
		КонецЦикла;
		
	КонецЕсли;
	
	СобытияФормИСМПТКПереопределяемый.ЗаполнитьПризнакИспользованияХарактеристик(Объект.АгрегированныеКМ);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСлужебныеРеквизитыПоНоменклатуре()
	
	ПараметрыЗаполненияРеквизитов = Новый Структура;
	ПараметрыЗаполненияРеквизитов.Вставить("ЗаполнитьПризнакХарактеристикиИспользуются",
											Новый Структура("Номенклатура", "ХарактеристикиИспользуются"));
											
	СобытияФормИСМПТКПереопределяемый.ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВКоллекции(Объект.АгрегированныеКМ, ПараметрыЗаполненияРеквизитов);
		
КонецПроцедуры

&НаСервере
функция ПолучитьНоменклатуруПоШтрихкоду(EAN, СообщенияОбОшибках = Неопределено)
	
	Если СообщенияОбОшибках = Неопределено Тогда
		СообщенияОбОшибках = Новый Соответствие();
	КонецЕсли;
	
	НоменклатураЗнач = Неопределено;
	
	НайденныеСтроки = Объект.АгрегированныеКМ.НайтиСтроки(Новый Структура("EAN", EAN));
	Если Не НайденныеСтроки.Количество() = 0 Тогда 
		НоменклатураЗнач   = НайденныеСтроки[0].Номенклатура;
		ХарактеристикаЗнач = НайденныеСтроки[0].Характеристика;
		ВосстановленныеДанные = Новый Структура("Номенклатура, Характеристика", НоменклатураЗнач, ХарактеристикаЗнач);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(НоменклатураЗнач) Тогда 
		Возврат ВосстановленныеДанные;
	Иначе
		Возврат ОбщегоНазначенияИСМПТКПереопределяемый.ПолучитьДанныеНоменклатурыИзРегистраШтрихкодовПоШтрихкоду(, EAN,,СообщенияОбОшибках);
	КонецЕсли;
	
КонецФункции

&НаСервере
Процедура УстановитьВидимостьКнопокИзмененияСтатуса()
	
	НеОтправлен = Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыОбработкиОтчетовСУЗИСМПТК.Черновик");
	
	ОбщегоНазначенияИСМПТККлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ФормаДокументАгрегацияКодовМаркировкиСУЗИСМПТКОтправить", "Видимость", НеОтправлен);
	ОбщегоНазначенияИСМПТККлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ФормаДокументАгрегацияКодовМаркировкиСУЗИСМПТКПроверить", "Видимость", НеОтправлен);
		
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьВидПродукцииИОграничитьВидимостьПоФОУчета()
	
	//Если в базе ведется учет только по одному виду маркируемой продукции то заполняем ег опо умолчанию и не даем редактировать поле
	ВедетсяУчетОбуви  	= ПолучитьФункциональнуюОпцию("ВестиУчетМаркируемойОбувиИСМПТК");
	ВедетсяУчетТабака 	= ПолучитьФункциональнуюОпцию("ВестиУчетМаркируемогоТабакаИСМПТК");
	ВедетсяУчетМолока 	= ПолучитьФункциональнуюОпцию("ВестиУчетМаркируемойМолочкиИСМПТК");
	ВедетсяУчетЛекарств = ПолучитьФункциональнуюОпцию("ВестиУчетМаркируемыхЛекарствИСМПТК");
	ВедетсяУчетАлкоголя = ПолучитьФункциональнуюОпцию("ВестиУчетМаркируемогоАлкоголяИСМПТК");
	ВедетсяУчетТекстиля = ПолучитьФункциональнуюОпцию("ВестиУчетМаркируемогоТекстиляИСМПТК");
	
	НужноЗаблокироватьВидПродукци = Истина;
	Если ВедетсяУчетОбуви И Не ВедетсяУчетТабака И Не ВедетсяУчетМолока И Не ВедетсяУчетЛекарств Тогда
		Объект.ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИСМПТК.Обувная");
	ИначеЕсли ВедетсяУчетТабака И Не ВедетсяУчетОбуви И Не ВедетсяУчетМолока И Не ВедетсяУчетЛекарств Тогда
		Объект.ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИСМПТК.Табачная");
	ИначеЕсли ВедетсяУчетМолока И Не ВедетсяУчетОбуви И Не ВедетсяУчетТабака И Не ВедетсяУчетЛекарств Тогда
		Объект.ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИСМПТК.МолочнаяПродукция");
	ИначеЕсли ВедетсяУчетЛекарств И Не ВедетсяУчетОбуви И Не ВедетсяУчетТабака И Не ВедетсяУчетМолока Тогда
		Объект.ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИСМПТК.ЛекарственныеПрепараты");
	Иначе
		НужноЗаблокироватьВидПродукци = Ложь;
	КонецЕсли;
	
	ОбщегоНазначенияИСМПТККлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ВидПродукции", "ТолькоПросмотр", НужноЗаблокироватьВидПродукци);
	
	Если НужноЗаблокироватьВидПродукци И (ВедетсяУчетЛекарств Или ВедетсяУчетОбуви) Тогда
		//Для этих ТГ доступно только формирование транспортных упаковок.
		Объект.ВидУпаковки	 = ПредопределенноеЗначение("Перечисление.ВидыУпаковокИСМПТК.Логистическая");
		НужноЗаблокироватьВидУпаковки = Истина;
	Иначе
	    Объект.ВидУпаковки	 = ПредопределенноеЗначение("Перечисление.ВидыУпаковокИСМПТК.Групповая");
		НужноЗаблокироватьВидУпаковки = Ложь;
	КонецЕсли;
	
	ОбщегоНазначенияИСМПТККлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ВидУпаковки", "ТолькоПросмотр", НужноЗаблокироватьВидУпаковки);
		
КонецПроцедуры

&НаКлиенте
Процедура УстановитьВидУпаковкиПоУмолчанию()
	
	Если Объект.ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИСМПТК.Обувная")
		Или Объект.ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИСМПТК.ЛекарственныеПрепараты") Тогда
		
		Объект.ВидУпаковки = ПредопределенноеЗначение("Перечисление.ВидыУпаковокИСМПТК.Логистическая");
		Элементы.ВидУпаковки.ТолькоПросмотр = Истина; //Поддерживается только один формат упаковки
		
	ИначеЕсли Объект.ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИСМПТК.МолочнаяПродукция") Тогда
		
		Объект.ВидУпаковки = ПредопределенноеЗначение("Перечисление.ВидыУпаковокИСМПТК.Логистическая");
		Элементы.ВидУпаковки.ТолькоПросмотр = Ложь;
		
	ИначеЕсли Объект.ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИСМПТК.Табачная") Тогда 
		
		Объект.ВидУпаковки = ПредопределенноеЗначение("Перечисление.ВидыУпаковокИСМПТК.Групповая");
		Элементы.ВидУпаковки.ТолькоПросмотр = Ложь;
		
	КонецЕсли;	
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьНоменклатураХарактеристикаСправочно()
	
	КоличествоКодов = Объект.АгрегированныеКМ.Количество();
	Если Не КоличествоКодов = 0 Тогда
		Номенклатура   = Объект.АгрегированныеКМ[КоличествоКодов - 1].Номенклатура;
		Характеристика = Объект.АгрегированныеКМ[КоличествоКодов - 1].Характеристика;
	Иначе
		Номенклатура   = "";
		Характеристика = "";
	КонецЕсли;
	УправлениеФормой()
	
КонецПроцедуры

&НаКлиенте
Процедура УпаковкиПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	Отказ = Истина;	
КонецПроцедуры

&НаКлиенте
Функция ТекстВопросаКодАгрегатаЗаполнен()
	
	Возврат НСтр("ru = 'Код агрегата уже указан! Заменить текущее значение?'");
	
КонецФункции

&НаКлиенте
Процедура ОповеститьОПроблемеЗапросаВалидностиКМ() Экспорт
	
	//Если по какой-то причине не удалось выполнить получение Токена, то и запрос на проверку статуса КМ не выполнялся,
	//об этом нужно предупредить и отметить непроверенные коды.
	Если ТокенАвторизацииВрем = Неопределено Тогда 
		СообщитьОНевозможностиВыполнитьПроверкуСтатусаКМ("Фоновый");
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СформироватьСписокВыбораВидаПродукции()
	
	МассивВидовПродукции = РаботаСДокументамиИСМПТК.СформироватьСписокВыбораВидаПродукции();
	Элементы.ВидПродукции.СписокВыбора.ЗагрузитьЗначения(МассивВидовПродукции);
	
	Если МассивВидовПродукции.Количество() = 1 Тогда
		Объект.ВидПродукции = МассивВидовПродукции[0];
	КонецЕсли;	
	
КонецПроцедуры

#КонецОбласти

#Область РаботаСТСД

#Область ЗагрузкаИзТСД

&НаКлиенте
Процедура ЗагрузитьИзТСДПослеАвторизации(РезультатАвторизации, Штрихкоды) Экспорт
	
	Подключаемый_ПолученыДанныеИзТСД(Штрихкоды, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПолученыДанныеИзТСД(Штрихкоды, АвторизацияЗапрашивалась = Неопределено) Экспорт
	
	Если Штрихкоды.Количество() = 0 Тогда
		
		ПоказатьПредупреждение( ,РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияВДанныхИзТСДНетИнформацииОКодахМаркировки());
		Возврат;
		
	КонецЕсли;
	
	СобытияФормИСМПТККлиент.ОповеститьОНачалеОбработкиДанныхТСД();
	ПараметрыСканирования = РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйКлиент.ПараметрыСканирования(ЭтотОбъект);
	СобытияФормИСМПТККлиент.ПреобразоватьШтрихкодыТСДВBase64(Штрихкоды);
	ЗагрузкаДанныхТСД = ОбработатьПолученныеДанныеТСДНаСервере(Штрихкоды, ПараметрыСканирования, Неопределено);
	
	ОбработатьПолученныеДанныеТСД();
	
КонецПроцедуры

&НаСервере
Функция ОбработатьПолученныеДанныеТСДНаСервере(ШтрихкодыТСД, ПараметрыСканирования, КэшированныеЗначения)
	
	Результат = РаботаСДокументамиИСМПТК.ОбработатьПолученныеДанныеТСДВДокументе(ЭтотОбъект, ШтрихкодыТСД, ПараметрыСканирования);
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ОбработатьПолученныеДанныеТСД()
	
	Если ЗагрузкаДанныхТСД = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	МассивКодовМаркировки = Новый Массив;
	
	Для НомерСтроки = 0 По ЗагрузкаДанныхТСД.Всего - 1 Цикл
		Штрихкод = ЗагрузкаДанныхТСД.ШтрихкодыТСД[НомерСтроки];
		ДанныеШтрихкода = Новый Структура("ШтрихКод, ФорматBase64, Количество", Штрихкод.Штрихкод, Ложь, 1);
		РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйКлиентСервер.ЗакодироватьШтрихкодДанныхBase64(ДанныеШтрихкода);
		МассивКодовМаркировки.Добавить(ДанныеШтрихкода);
	КонецЦикла;
	
	СтруктураПараметров = Новый Структура("ФормаОбъекта, МассивКодовМаркировки", ЭтотОбъект, МассивКодовМаркировки);
	
	ИнтеграцияИСМПТККлиент.ЗагрузитьКодыМаркировкиИзТСДЗавершение(Неопределено, СтруктураПараметров);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область SSCC

&НаКлиенте
Процедура СгенерироватьШтрихкодПослеВопроса() Экспорт
	
	ПередаваемыеПараметры = Новый Структура;
	ПередаваемыеПараметры.Вставить("ТипУпаковки",  ПредопределенноеЗначение("Перечисление.ТипыУпаковокИСМПТК.МонотоварнаяУпаковка"));
	ПередаваемыеПараметры.Вставить("ТипШтрихкода", ПредопределенноеЗначение("Перечисление.ТипыШтрихкодовИСМПТК.SSCC"));
	ПередаваемыеПараметры.Вставить("Организация",  Объект.Организация);
	ПередаваемыеПараметры.Вставить("ВидПродукции", Объект.ВидПродукции);
	Если Не Объект.Упаковки.Количество() = 0 Тогда
		ПередаваемыеПараметры.Вставить("КоличествоВложенныхЕдиниц", Объект.Упаковки[0].ФактическоеКоличествоШтук);
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОбработкаГенерацииШтрихкода", ЭтотОбъект);
	
	ОткрытьФорму("Обработка.ГенерацияШтрихкодовИСМПТК.Форма.ФормаГенерацииSSCC", ПередаваемыеПараметры, ЭтотОбъект, УникальныйИдентификатор,,,
		ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры
	
&НаКлиенте
Процедура ОбработкаГенерацииШтрихкода(Результат, ДополнительныеПараметры) Экспорт
	
	Если НЕ Результат = Неопределено Тогда
		Если ТипЗнч(Результат) = Тип("Структура") Тогда 
			Штрихкод = Результат.Штрихкод;
		Иначе
			Штрихкод = Результат;
		КонецЕсли;
		
		Если Объект.Упаковки.Количество() = 0 Тогда
			НоваяСтрока = Объект.Упаковки.Добавить();
			НоваяСтрока.ИдентификационныйКодЕдиницыАгрегации = ОбщегоНазначенияИСМПТКВызовСервера.СтрокуВBase64(Штрихкод); //Вместо полного КМ - закодированный SSCC 
			НоваяСтрока.КодИдентификацииУпаковки 			 = Штрихкод; //Т.к. это SSCC - КИ не получаем
			НоваяСтрока.ФактическоеКоличествоШтук 			 = Объект.АгрегированныеКМ.Количество();
			НоваяСтрока.ТипАгрегации						 = ПредопределенноеЗначение("Перечисление.ТипыАгрегацииИСМПТК.НоваяАгрегация");
		Иначе
			Объект.Упаковки[0].ИдентификационныйКодЕдиницыАгрегации = ОбщегоНазначенияИСМПТКВызовСервера.СтрокуВBase64(Штрихкод); //Вместо полного КМ - закодированный SSCC 
			Объект.Упаковки[0].КодИдентификацииУпаковки 			= Штрихкод; //Т.к. это SSCC - КИ не получаем
		КонецЕсли;	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПодобратьSSCCИзРегистра(Команда)
	
	Если Объект.Упаковки.Количество() > 0 Тогда //Код агрегата уже указан, поддерживается ввод только 1 кода на документ
		Оповещение = Новый ОписаниеОповещения("ПодобратьSSCCИзРегистраПродолжение", ЭтотОбъект);
		ТекстВопроса = ТекстВопросаКодАгрегатаЗаполнен();
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	Иначе	
		ПодобратьSSCCИзРегистраПослеВопроса();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПодобратьSSCCИзРегистраПродолжение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		Объект.Упаковки.Удалить(Объект.Упаковки[0]);
		ПодобратьSSCCИзРегистраПослеВопроса();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПодобратьSSCCИзРегистраПослеВопроса()
	
	ПараметрыФормыВыбора = Новый Структура();
	Отбор = Новый Структура();
	Отбор.Вставить("Организация", Объект.Организация);
	ПараметрыФормыВыбора.Вставить("Отбор", Отбор); 
	
	Оповещение = Новый ОписаниеОповещения("ОбработкаГенерацииШтрихкода", ЭтотОбъект);
	ОткрытьФорму("РегистрСведений.ШтрихкодыSSCCИСМПТК.Форма.ФормаПодбораКода", ПараметрыФормыВыбора, ЭтаФорма, Истина,,,Оповещение,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

#КонецОбласти

#Область МобильноеПриложение

&НаКлиенте
Процедура МобильноеПриложениеЗагрузитьТовары(Команда)
	
	ОчиститьСообщения();
	Если ИнтеграцияИСМПТКВызовСервера.ИспользоватьАвтоПроверкаВалидностиКодаИСМПТК() 
		И Не ЗначениеЗаполнено(Объект.Организация) Тогда
		ТекстСообщения = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияВключенАвтозапросНужнаОрганизацияДляВыполнения("АвтоПроверкаВалидностиКодаИСМПТК");
		ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	ОповещениеПослеВыбораЭлемента = Новый ОписаниеОповещения("МобильноеПриложениеЗагрузитьТоварыОбработкаВыбора", ЭтотОбъект);
	Список = РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйВызовСервера.МобильноеПриложениеЗагрузитьТоварыНаСервере();
	Список.ПоказатьОтметкуЭлементов(ОповещениеПослеВыбораЭлемента, РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияВыборДокументаДляЗагрузки());
	
КонецПроцедуры

&НаКлиенте
Процедура МобильноеПриложениеЗагрузитьТоварыОбработкаВыбора(Элемент, Параметры) Экспорт
	
	РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйКлиент.МобильноеПриложениеЗагрузитьТоварыОбработкаВыбораОбщая(ЭтотОбъект, Элемент, Параметры);

КонецПроцедуры

#КонецОбласти

#Область ПроверкаСостоянияКодаНаСервере

&НаКлиенте
Процедура ПроверитьСостояниеКодовНаСервере(Команда)
	
	//Проверяем данные таблицы
	Если Объект.АгрегированныеКМ.Количество() = 0 Тогда
		ТекстОшибки = НСтр("ru = 'В табличной части Вложенные товары отсутствуют коды маркировки.'"); 
		ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстОшибки);
		Возврат;
	КонецЕсли;

	Если Не ЗначениеЗаполнено(Объект.Организация) Тогда
		ТекстОшибки = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияНеЗаполненаОрганизацияКомандаПроверитьСостояниеКМ();
		ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстОшибки);
		Возврат;
	КонецЕсли;
	
	ТокенАвторизацииВрем = Неопределено;
	ЗавершениеПроверитьСостояниеКодовНаСервере = Новый ОписаниеОповещения("ЗавершениеПроверитьСостояниеКодовНаСервере", ЭтаФорма);
	ПолучитьКлючАвторизации(ЗавершениеПроверитьСостояниеКодовНаСервере, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьКлючАвторизации(СобытиеПослеАвторизации, ОповещениеПриОшибке = Ложь) Экспорт 
	
	ИнтерфейсИСМПТККлиент.ПолучитьКлючАвторизацииОбщая(СобытиеПослеАвторизации, Объект.Организация, ОповещениеПриОшибке);
	
КонецПроцедуры

//Выполнить запрос состояния КМ с сервера списком.
//Используется из команд ручной проверки статусов, загрузки из файла, ТСД и Мобильного приложения.
&НаСервере
Процедура ЗавершениеПроверитьСостояниеКодовНаСервере(РезультатВыполнения, Параметры) Экспорт
			
	ТокенАвторизацииВрем = ?(ЗначениеЗаполнено(РезультатВыполнения), РезультатВыполнения, Неопределено);
	
	//Если по какой-то причине не удалось выполнить получение Токена, то и запрос на проверку статуса КМ не выполнялся,
	//об этом нужно предупредить и отметить непроверенные коды.
	Если ТокенАвторизацииВрем = Неопределено Тогда 
		ТекстСообщения = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияНевозможноВыполнитьПроверкуСтатусаКМ_ВФоне();
		ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	ЗапроситьДанныеОСостоянииКодовСписком(ТокенАвторизацииВрем);
	
КонецПроцедуры

&НаСервере
Процедура ЗапроситьДанныеОСостоянииКодовСписком(ТокенАвторизации = Неопределено)
	
	МассивКМ = Новый Массив();
	Для Каждого СтрокаМарка Из Объект.АгрегированныеКМ Цикл
		МассивКМ.Добавить(СтрокаМарка.КодИдентификации);	
	КонецЦикла;
	
	ОтветСервераСостояниеКМ = ИнтеграцияИСМПТК.ЗапроситьДанныеОСостоянииКМ(МассивКМ, Объект.Организация, ТокенАвторизации);
	ОбработатьОтветСервераПоСостояниюКМ(МассивКМ, ОтветСервераСостояниеКМ);	
	
КонецПроцедуры

//Выполнить запрос состояния конкретного КМ при его добавлении.
//
&НаСервере
Процедура ЗавершениеПроверитьСостояниеКМПриДобавленииНаСервере(РезультатВыполнения, Параметры) Экспорт
	
	ТокенАвторизацииВрем = ?(ЗначениеЗаполнено(РезультатВыполнения), РезультатВыполнения, Неопределено);
	
	//Если по какой-то причине не удалось выполнить получение Токена, то и запрос на проверку статуса КМ не выполнялся,
	//об этом нужно предупредить и отметить непроверенные коды.
	Если ТокенАвторизацииВрем = Неопределено Тогда 
		ТекстСообщения = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияНевозможноВыполнитьПроверкуСтатусаКМ_ВФоне();
		ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	МассивКМ = Новый Массив();
	МассивКМ.Добавить(Параметры.КодИдентификации);

	ОтветСервераСостояниеКМ = ИнтеграцияИСМПТК.ЗапроситьДанныеОСостоянииКМ(МассивКМ, Объект.Организация, ТокенАвторизацииВрем);
	ОбработатьОтветСервераПоСостояниюКМ(МассивКМ, ОтветСервераСостояниеКМ);
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьОтветСервераПоСостояниюКМ(МассивКМ, ОтветСервераСостояниеКМ)
	
	НовоеСоответствиеСтатусов = Неопределено;
	ИнтеграцияИСМПТК.ОбработатьОтветСервераПоСостояниюКМ_Общая(ЭтаФорма, МассивКМ, ОтветСервераСостояниеКМ, "АгрегацияКМ", НовоеСоответствиеСтатусов);
	
	//Заполняем статус проверки в дереве по данным запроса сервера
	Для Каждого СтрокаКМ Из Объект.АгрегированныеКМ Цикл
		Если Не СтрокаКМ.Ошибочный Тогда //Значение по умолчанию - ложь. Если стоит Истина, значит код уже проверен - сохранеям этот признак.
			СтрокаКМ.Ошибочный = ?(НовоеСоответствиеСтатусов.Получить(СтрокаКМ.КодИдентификации) = Неопределено, Ложь, НовоеСоответствиеСтатусов.Получить(СтрокаКМ.КодИдентификации));
		КонецЕсли;
	КонецЦикла;
			
КонецПроцедуры

&НаКлиенте
Процедура СообщитьОНевозможностиВыполнитьПроверкуСтатусаКМ(РежимЗапроса) Экспорт

	Если РежимЗапроса = "Ручной" Тогда
		ТекстСообщения = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияНевозможноВыполнитьПроверкуСтатусаКМ_Вручную();
	Иначе	
		ТекстСообщения = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияНевозможноВыполнитьПроверкуСтатусаКМ_ВФоне();
	КонецЕсли;
	ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
	
КонецПроцедуры

#КонецОбласти

#Область ОтражениеВУчете

&НаКлиентеНаСервереБезКонтекста
Процедура СформироватьПредставлениеДокументаОснования(Форма)
	
	Если ЗначениеЗаполнено(Форма.Объект.ДокументОснование) Тогда
		Форма.ПредставлениеДокументаОснования = Форма.Объект.ДокументОснование;
		Форма.Элементы.ПредставлениеДокументаОснования.ЦветТекста = ОбщегоНазначенияИСМПТККлиентСервер.ЦветСиний();
	Иначе
		Форма.ПредставлениеДокументаОснования = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияДокументНеОтраженВУчете();
		Форма.Элементы.ПредставлениеДокументаОснования.ЦветТекста = ОбщегоНазначенияИСМПТККлиентСервер.ЦветКрасный();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеДокументаОснованияНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если ЗначениеЗаполнено(Объект.ДокументОснование) Тогда
		ПоказатьЗначение(, Объект.ДокументОснование);
	Иначе
		Кнопки = Новый СписокЗначений;
		Кнопки.Добавить("Создать", РаботаСТекстамиИСМПТККлиентСервер.ТекстКомандыСоздать());
		Кнопки.Добавить("Выбрать", РаботаСТекстамиИСМПТККлиентСервер.ТекстКомандыВыбрать());
		Кнопки.Добавить("Отмена",  РаботаСТекстамиИСМПТККлиентСервер.ТекстКомандыОтмена());
		ОтразитьДокументВУчетеЗавершение = Новый ОписаниеОповещения("ОтразитьДокументВУчетеЗавершение", ЭтаФорма);
		Если Модифицированность Тогда
			ПоказатьВопрос(ОтразитьДокументВУчетеЗавершение, РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияВопросОтразитьДокументВУчетеСпредварительнойЗаписью(), Кнопки);
		Иначе
			ПоказатьВопрос(ОтразитьДокументВУчетеЗавершение, РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияВопросОтразитьДокументВУчете(), Кнопки);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтразитьДокументВУчетеЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт

	Если Модифицированность Тогда
		Попытка
			ЭтотОбъект.Записать();
		Исключение 
			
			Если Объект.Ссылка.Пустая() Тогда
				ПредставлениеПолное = ОбщегоНазначенияИСМПТКВызовСервера.ПолучитьИмяИПредставлениеПоСсылке(Объект.Ссылка).Синоним;
			Иначе
				ПредставлениеПолное = Объект.Ссылка;
			КонецЕсли;
			
			ТекстОшибки = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияОшибкаПриЗаписиДокументаСПараметромСмотриЖурналРегистрации();
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ДанныеДокумента%", ПредставлениеПолное);
			
			ИмяСобытия  = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияИмяСобытияЗаписьДокумента();
			ИмяСобытия  = СтрЗаменить(ИмяСобытия, "%ЗаписываемыйДокумент%", ПредставлениеПолное);
			ОбщегоНазначенияИСМПТКВызовСервера.СоздатьЗаписьЖурналаРегистрации(ИмяСобытия, "Ошибка",,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
			ВызватьИсключение ТекстОшибки;
		КонецПопытки;
	КонецЕсли;
	
	Если РезультатВопроса = "Выбрать" Тогда
		ВыбратьДокументОснование();
	ИначеЕсли РезультатВопроса = "Создать" Тогда
		СоздатьДокументОснованиеНаКлиентеПослеЗаписи(КодВозвратаДиалога.ОК, Неопределено);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДокументОснованиеВыбрать(Команда)
	
	ВыбратьДокументОснование();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьДокументОснование()
	
	ДокументыВыбора = РаботаСДокументамиИСМПТККлиентСерверПереопределяемый.ПолучитьСписокДокументовОснованияДляАгрегацииКМИСМПТК(,"Выбрать");
	
	Если ДокументыВыбора.Количество() > 1 Тогда
		
		ПараметрыФормы = Новый Структура();
		ПараметрыФормы.Вставить("ДокументыВыбора", ДокументыВыбора);
					
		Оповещение = Новый ОписаниеОповещения("ВыборДокументаОснованияЗавершение", ЭтотОбъект);
		ОткрытьФорму("ОбщаяФорма.ФормаВыбораДокументаОснованияИСМПТК", ПараметрыФормы,,,,,Оповещение,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	ИначеЕсли ДокументыВыбора.Количество() = 1 Тогда
		
		ВыбранныйДокумент = ДокументыВыбора[0].Значение;
		ВыборДокументаОснованияЗавершение(ВыбранныйДокумент, Неопределено);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыборДокументаОснованияЗавершение(ВыбранныйДокумент, ДополнительныеПараметры) Экспорт
	
	Если ВыбранныйДокумент <> "" И ТипЗнч(ВыбранныйДокумент) <> Тип("Неопределено") Тогда
		
		ИмяДокумента = ВыбранныйДокумент;
		
		СтруктураОтбора = Новый Структура();
		Если ЗначениеЗаполнено(Объект.Организация) Тогда
			СтруктураОтбора.Вставить("Организация", Объект.Организация);
		КонецЕсли;
		
		ДопПараметрыДляОтбора = Новый Структура("ИмяДокумента", ИмяДокумента);
		РаботаСДокументамиИСМПТККлиентПереопределяемый.ДополнитьСтруктуруОтбораПервичногоДокумента(СтруктураОтбора, Объект, ДопПараметрыДляОтбора);
		
		СтруктураПараметров = Новый Структура("Отбор, РежимВыбора, МножественныйВыбор", СтруктураОтбора, Истина, Ложь);
		
		ИмяФормыВыбора = "Документ." + ИмяДокумента + ".ФормаВыбора"; 
		ОткрытьФорму(ИмяФормыВыбора, СтруктураПараметров , ЭтаФорма,,,,, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьДокументОснование(Команда)
	
	Если ЗначениеЗаполнено(Объект.ДокументОснование) Тогда
		ПоказатьЗначение(, Объект.ДокументОснование);
	Иначе
		Действие = РаботаСДокументамиИСМПТККлиентСервер.ДействиеОткрыть();
		ПоказатьПредупреждение(, РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияОтказДокументНеОтраженВУчете(Действие));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтсоединитьДокументОснование(Команда)
	
	Если ЗначениеЗаполнено(Объект.ДокументОснование) Тогда
		Объект.ДокументОснование = Неопределено;
		СформироватьПредставлениеДокументаОснования(ЭтаФорма);
		Модифицированность = Истина;
	Иначе
		Действие = РаботаСДокументамиИСМПТККлиентСервер.ДействиеОтсоединить();
		ПоказатьПредупреждение(, РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияОтказДокументНеОтраженВУчете(Действие));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДокументОснованиеСоздать(Команда)
	
	Если Объект.Ссылка.Пустая() ИЛИ ЭтаФорма.Модифицированность Тогда
		
		СоздатьДокументОснованиеНаКлиентеПослеЗаписи = Новый ОписаниеОповещения("СоздатьДокументОснованиеНаКлиентеПослеЗаписи", ЭтаФорма);	
		ИнтеграцияИСМПТККлиент.ВопросЗаписатьОбъектПередВыполнением(СоздатьДокументОснованиеНаКлиентеПослеЗаписи);
		
	Иначе
		
		СоздатьДокументОснованиеНаКлиентеПослеЗаписи(КодВозвратаДиалога.ОК, Неопределено);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьДокументОснованиеНаКлиентеПослеЗаписи(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.ОК Тогда
		
		ДокументыВыбора = РаботаСДокументамиИСМПТККлиентСерверПереопределяемый.ПолучитьСписокДокументовОснованияДляАгрегацииКМИСМПТК(,"Создать");
		
		Если ДокументыВыбора.Количество() > 1 Тогда
			
			ПараметрыФормы = Новый Структура();
			ПараметрыФормы.Вставить("ДокументыВыбора", ДокументыВыбора);
			
			Оповещение = Новый ОписаниеОповещения("СозданиеДокументаОснованияЗавершение", ЭтотОбъект);
			ОткрытьФорму("ОбщаяФорма.ФормаВыбораДокументаОснованияИСМПТК", ПараметрыФормы,,,,,Оповещение, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
			
		ИначеЕсли ДокументыВыбора.Количество() = 1 Тогда
			
			ВыбранныйДокумент = ДокументыВыбора[0].Значение;
			СозданиеДокументаОснованияЗавершение(ВыбранныйДокумент, Неопределено);
			
		КонецЕсли;
	КонецЕсли;
			
КонецПроцедуры

&НаКлиенте
Процедура СозданиеДокументаОснованияЗавершение(ВыбранныйДокумент, ДополнительныеПараметры) Экспорт
	
	Если Не ВыбранныйДокумент = Неопределено Тогда
		Массив = Новый Массив;
		Массив.Добавить(Объект.Ссылка);
		
		ДанныеДляСоздания = Новый Структура();
		ДанныеДляСоздания.Вставить("ИсходныйДокумент", 	  Массив);
		ДанныеДляСоздания.Вставить("СоздаваемыйДокумент", ВыбранныйДокумент);

		РаботаСДокументамиИСМПТККлиент.СоздатьПервичныйДокумент(ДанныеДляСоздания);
		СформироватьПредставлениеДокументаОснования(ЭтаФорма);
		Модифицированность = Истина;
	КонецЕсли;
			
КонецПроцедуры

#КонецОбласти

#Область ПодключаемыеКоманды

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	
	ОбщегоНазначенияИСМПТККлиентПереопределяемый.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
	
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат) Экспорт
	
	ОбщегоНазначенияИСМПТКПереопределяемый.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	
	ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.ОбновитьКоманды(ЭтотОбъект, Объект);
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти