
#Область ОписаниеПеременных

&НаКлиенте
Перем КэшированныеЗначения; //используется механизмом обработки изменения реквизитов ТЧ

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	СобытияФормИСМПТКПереопределяемый.ПриСозданииНаСервере_НастроитьПодключаемоеОборудование(ЭтаФорма);
	
	УстановитьУсловноеОформление();
				
	ДоступныеВидыПродукцииИСМПТК = Новый Массив;
	ДоступныеВидыПродукцииИСМПТК.Добавить(Перечисления.ВидыПродукцииИСМПТК.Табачная);
	ДоступныеВидыПродукцииИСМПТК.Добавить(Перечисления.ВидыПродукцииИСМПТК.Обувная);
	ДоступныеВидыПродукцииИСМПТК.Добавить(Перечисления.ВидыПродукцииИСМПТК.МолочнаяПродукция);
	ДоступныеВидыПродукцииИСМПТК.Добавить(Перечисления.ВидыПродукцииИСМПТК.ЛекарственныеПрепараты);
	СобытияФормИСМПТК.НастроитьВидПродукцииПриСозданииНаСервере(ЭтотОбъект, ДоступныеВидыПродукцииИСМПТК);
	
	Если Объект.Ссылка.Пустая() Тогда
	
		Объект.OrderID = "";
		
		ПриСозданииЧтенииНаСервере();
		Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыОбработкиЗаказовНаЭмиссиюКодовМаркировкиИСМПТК.Черновик");
		
		Если Не ЗначениеЗаполнено(Объект.СпособВводаВОборот) Тогда
			Объект.СпособВводаВОборот = ПредопределенноеЗначение("Перечисление.СпособыВводаВОборотСУЗИСМПТК.Производство");
		КонецЕсли;
				
		Если Не ЗначениеЗаполнено(Объект.Ответственный) Тогда
			Объект.Ответственный = ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.ТекущийПользователь();
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(Объект.КонтактноеЛицо) Тогда
			Объект.КонтактноеЛицо = РаботаСДокументамиИСМПТКПереопределяемый.ПолучитьКонтактноеЛицо(Объект.Ответственный);
		КонецЕсли;
		
		Объект.СпособИзготовленияСИ = ПредопределенноеЗначение("Перечисление.СпособыИзготовленияСредствИдентификацииСУЗИСМПТК.Самостоятельно");
		
	КонецЕсли;
	
	Если ПравоДоступа("Просмотр", Метаданные.Документы.НанесениеКодовМаркировкиСУЗИСМПТК) Тогда
		Если (Объект.ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИСМПТК.ЛекарственныеПрепараты") 
				ИЛИ Объект.ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИСМПТК.МолочнаяПродукция")
				ИЛИ Объект.ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИСМПТК.Табачная"))
			И (Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыОбработкиЗаказовНаЭмиссиюКодовМаркировкиИСМПТК.Выполнен")
				ИЛИ Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыОбработкиЗаказовНаЭмиссиюКодовМаркировкиИСМПТК.КодыМаркировкиЭмитированы")) Тогда
			
			НанесениеКМ = ПроверитьИЗаполнитьОтчетОНанесении();
		КонецЕсли;
	КонецЕсли;
	
	//Переопределение: скрывается команда ввода Заказа на основании Заказа
	//наличие этой команды обусловлено определяемым типом ОснованиеЗаказКодовМаркировкиСУЗИСМПТК, в состав которого включен сам документ.
	//В этом случае, если в типовой конфигурации-приемнике модуля маркировки нет документа-основания для заказа, изменить тип на Строку (исключив Заказ) нельзя, 
	//поэтому скрываем ненужную команду программно.
	ОбщегоНазначенияИСМПТККлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ФормаИСМПТК", 
																	   "Видимость", ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.ПолучитьЗначениеВидимостиГруппыИСМПТК(ОбщегоНазначенияИСМПТКВызовСервера.ИмяДокументаЗаказКодовМаркировкиСУЗИСМПТК()));
	
	ЗаполнитьСлужебныеРеквизитыПоНоменклатуре();
	ЗаполнитьПризнакИспользованияХарактеристик();
	
	//Выставляем значение по умолчанию из общих настроек ИС МПТ
	ОтображатьДанныеПоНоменклатуре = Константы.ОтображатьДанныеПоНоменклатуреВДокументахСУЗИСМПТК.Получить();
	
	СобытияФормИСМПТКПереопределяемый.ПриСозданииНаСервере(ЭтотОбъект, Отказ, СтандартнаяОбработка);
	
	УправлениеФормой();
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	ПриСозданииЧтенииНаСервере();
	СобытияФормИСМПТКПереопределяемый.ПриЧтенииНаСервере(ТекущийОбъект, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
			
	УправлениеФормой();
	
	СобытияФормИСМПТККлиентПереопределяемый.ПриОткрытии(ЭтотОбъект, Отказ);
	
	ОбщегоНазначенияИСМПТККлиентПереопределяемый.НачатьОбновлениеКоманд(ЭтотОбъект);
	ОбщегоНазначенияИСМПТККлиентПереопределяемый.НачатьПодключениеОборудованиеПриОткрытииФормы(ЭтаФорма, "СканерШтрихкода");
	
	Если ЗначениеЗаполнено(Объект.ВидПродукции) Тогда
		Элементы.СпособВыпускаВОборот.СписокВыбора.Очистить();
		СписокЗначенийВидаОпераций = ПолучитьСписокВыбораВидаОперации(); 
		Элементы.СпособВыпускаВОборот.СписокВыбора.ЗагрузитьЗначения(СписокЗначенийВидаОпераций);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.ДокументОснование) И Не Объект.Товары.Количество() = 0 Тогда
		Для Каждого Строка Из Объект.Товары Цикл
			БазоваяЕИ = РозничноеВыбытиеИСМПТКПереопределяемый.ПолучитьЗначениеБазовойЕИНоменклатуры(Строка.Номенклатура);
			ЗаполненаБазоваяЕИ = (Строка.Упаковка = БазоваяЕИ);
			ЭтоТабак = (Строка.Шаблон = ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗИСМПТК.ТабачнаяПачка")
						ИЛИ Строка.Шаблон = ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗИСМПТК.БлокТабачныхПачек"));
			Штрихкоды = ЗаполнитьGTINПоНоменклатуре(Строка.Номенклатура, ?(ЗаполненаБазоваяЕИ, "", Строка.Упаковка), Строка.Характеристика, ?(ЗначениеЗаполнено(Строка.Характеристика), Истина, Ложь), ЭтоТабак);
			ЗаполнитьШтрихкодыВСтроке(Штрихкоды, Строка);
		КонецЦикла;
	КонецЕсли;
			
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	Если НЕ ЗавершениеРаботы И ИспользуютсяСканерыШтрихкода Тогда
		ОбщегоНазначенияИСМПТККлиентПереопределяемый.НачатьОтключениеОборудованиеПриЗакрытииФормы(Неопределено, ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = РаботаСДокументамиИСМПТККлиентСервер.ИмяСобытияЗаписьЗаказНаЭмиссию() 
		Или ИмяСобытия = РаботаСДокументамиИСМПТККлиентСервер.ИмяСобытияОбновлениеСтатусаЗаказНаЭмиссию()
		Или ИмяСобытия = РаботаСДокументамиИСМПТККлиентСервер.ИмяСобытияПолучениеКМПоЗаказу() Тогда
		
		Если Объект.Ссылка.Пустая() Тогда
		Иначе
			ЭтаФорма.Прочитать();
		КонецЕсли;
		
	ИначеЕсли ИмяСобытия = РаботаСДокументамиИСМПТККлиентСервер.ИмяСобытияЗаписьНанесениеКодовМаркировки() 
		И ПроверитьПравоДоступаНанесение() Тогда
		
 		НанесениеКМ = ПроверитьИЗаполнитьОтчетОНанесении();
		
	ИначеЕсли Источник = "ПодключаемоеОборудование" И ВводДоступен() Тогда
		Если ИмяСобытия = "ScanData" Тогда
			ОбработкаСобытияСканераОбщая(Параметр);
		КонецЕсли;
		
	Иначе
		РаботаСДокументамиИСМПТККлиентПереопределяемый.ОбработкаОповещенияДокументыИСМПТ(ЭтаФорма, Объект.Ссылка, ИмяСобытия, Параметр, Источник);
	КонецЕсли;
	
	СобытияФормИСМПТККлиентПереопределяемый.ОбработкаОповещения(ЭтотОбъект, ИмяСобытия, Параметр, Источник);
	УправлениеФормой();
	
КонецПроцедуры

&НаКлиенте
Процедура ВнешнееСобытие(Источник, Событие, Данные)
	
	Если Не СобытияФормИСМПТККлиентПереопределяемый.ОбрабатыватьВнешнееСобытиеТО() Тогда 
		Возврат;
	КонецЕсли;
	
	Параметр = Новый Массив;
	Параметр.Добавить(Данные);
	Параметр.Добавить(Неопределено);
	
	Если ВводДоступен() Тогда
		Если Событие = "Штрихкод" ИЛИ Событие = "ПолученШтрихкод" Тогда
			ОбработкаСобытияСканераОбщая(Параметр);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПроверитьПравоДоступаНанесение()
	
	Возврат ПравоДоступа("Просмотр", Метаданные.Документы.НанесениеКодовМаркировкиСУЗИСМПТК);
	
КонецФункции

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	ИнтеграцияИСМПТКПереопределяемый.ЗаполнитьСлужебныеРеквизитыВКоллекции(ЭтотОбъект, Объект.Товары);
	ЗаполнитьКоличествоЭмитированоВТоварах();
	РазблокироватьДанныеФормыДляРедактирования();
	ЗаполнитьПризнакИспользованияХарактеристик();
	
	ИнтерфейсИСМПТК.УстановитьЗаголовокФормыДокумента(, Объект.Ссылка, ЭтаФорма);
	СобытияФормИСМПТКПереопределяемый.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
		
	УправлениеФормой();
	СобытияФормИСМПТККлиентПереопределяемый.ПослеЗаписи(ЭтаФорма, ПараметрыЗаписи);
	ИнтеграцияИСМПТККлиент.ОповеститьФормы(РаботаСДокументамиИСМПТККлиентСервер.ИмяСобытияЗаписьЗаказНаЭмиссию());
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	СобытияФормИСМПТКПереопределяемый.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	Если (ЗначениеЗаполнено(НанесениеКМ) 
		И (Объект.ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИСМПТК.МолочнаяПродукция")
			ИЛИ Объект.ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИСМПТК.ЛекарственныеПрепараты")))
			ИЛИ Объект.ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИСМПТК.Табачная") Тогда
		Объект.ВыполненоНанесениеКМ = Истина;
	ИначеЕсли Объект.ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИСМПТК.Обувная")
		И ПроверитьНаличиеКодовВПуле().КодыПолучены Тогда
		Объект.ВыполненоНанесениеКМ = Истина;
	Иначе
		Объект.ВыполненоНанесениеКМ = Ложь;
	КонецЕсли;
	СобытияФормИСМПТККлиентПереопределяемый.ПередЗаписью(ЭтотОбъект, Отказ, ПараметрыЗаписи);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	ИзменитьДокументОснование = Ложь;
	
	Если ТипЗнч(ИсточникВыбора) = Тип("ФормаКлиентскогоПриложения") 
		И ИсточникВыбора.ИмяФормы = РаботаСДокументамиИСМПТККлиентПереопределяемый.ПолучитьИмяФормыПодбораНоменклатуры() Тогда
		ОбработкаПодбораТоваровИзПодбора(ВыбранноеЗначение.АдресТоваровВХранилище);
	Иначе 
		//Сначала проверяем, если ли в выбранном основании товары, по которым необходимо заполнять Акт
		ЕстьМаркируемыйТовар = ПроверитьНаличиеМаркируемогоТовара(ВыбранноеЗначение);
		
		Если Не ЕстьМаркируемыйТовар Тогда
			//Если в выбранном основании нет маркируемого товара, то заполнять Заказ по нему не имеет смысла. 
			//Сообщаем пользователю, отменяем выбор.
			ТекстСообщения = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияВДокументеОтсутствуетМаркируемаяпродукция();
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ДокументОснование%", ВыбранноеЗначение);
			Сообщить(ТекстСообщения);
			Возврат;
		КонецЕсли;
		
		Если ТипЗнч(ВыбранноеЗначение) <> Тип("Структура") Тогда
			
			Если ЗначениеЗаполнено(Объект.ДокументОснование)
				И Объект.ДокументОснование <> ВыбранноеЗначение Тогда
				
				ТекстВопроса = НСтр("ru = 'Документ уже связан с ""%СтарыйДокументОснование%"".'")
							 + Символы.ПС
							 + НСтр("ru = 'Отразить документ в учете с помощью выбранного документа?'");
				ТекстВопроса = СтрЗаменить(ТекстВопроса, "%СтарыйДокументОснование%", Объект.ДокументОснование);
				
				ИзменитьДокументОснованиеЗавершение = Новый ОписаниеОповещения("ИзменитьДокументОснованиеЗавершение", ЭтаФорма, Новый Структура("ВыбранноеЗначение", ВыбранноеЗначение));
				ПоказатьВопрос(ИзменитьДокументОснованиеЗавершение, ТекстВопроса, РежимДиалогаВопрос.ОКОтмена);
				
			Иначе
				
				ИзменитьДокументОснование = Истина;
				
			КонецЕсли;
			
			Если ИзменитьДокументОснование Тогда
				
				Структура_СвязанныйЗаказ = ПроверитьСвязанныйЗаказ(ВыбранноеЗначение);
				
				Если Структура_СвязанныйЗаказ = Неопределено Тогда
					
					Объект.ДокументОснование = ВыбранноеЗначение;
					СформироватьПредставлениеДокументаОснования(ЭтаФорма);
					
					Если (Не ЗначениеЗаполнено(Объект.OrderID)
							И Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыОбработкиЗаказовНаЭмиссиюКодовМаркировкиИСМПТК.Создан"))
							Или Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыОбработкиЗаказовНаЭмиссиюКодовМаркировкиИСМПТК.Черновик") Тогда 
						//Предлагаем перезаполнение
						ТекстВопроса = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияПерезаполнитьДокументПоНовомуОснованию();
						ПерезаполнитьДокументПоОснованию = Новый ОписаниеОповещения("ПерезаполнитьДокументПоОснованию", ЭтаФорма);
						ПоказатьВопрос(ПерезаполнитьДокументПоОснованию, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
					КонецЕсли;
					
					УправлениеФормой();
					Модифицированность = Истина;
					
				Иначе
					
					//Если связанный Заказ есть, предупреждаем об этом пользователя и даем возможность отказаться от выбора
					ТекстВопроса = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияЕстьСвязанныйДокументМаркировкиПривязатьЕщеОдин();
					ТекстВопроса = СтрЗаменить(ТекстВопроса, "%ДокументОснование%", ВыбранноеЗначение);
					
					ПродолжитьЗаполнениеДокументаОснования = Новый ОписаниеОповещения("ПродолжитьЗаполнениеДокументаОснования", ЭтаФорма, Новый Структура("ВыбранноеЗначение", ВыбранноеЗначение));
					ПоказатьВопрос(ПродолжитьЗаполнениеДокументаОснования, ТекстВопроса, РежимДиалогаВопрос.ОКОтмена);
					
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПроверитьСвязанныйЗаказ(ВыбранноеЗначение)
	
	Возврат РаботаСДокументамиИСМПТК.ПроверитьНаличиеСвязанногоЗаказаКодов(ВыбранноеЗначение);
	
КонецФункции

&НаКлиенте
Процедура ПродолжитьЗаполнениеДокументаОснования(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.ОК Тогда
		
		Объект.ДокументОснование = ДополнительныеПараметры.ВыбранноеЗначение;
		СформироватьПредставлениеДокументаОснования(ЭтаФорма);
		
		Если (Не ЗначениеЗаполнено(Объект.OrderID)
				И Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыОбработкиЗаказовНаЭмиссиюКодовМаркировкиИСМПТК.Создан"))
			Или Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыОбработкиЗаказовНаЭмиссиюКодовМаркировкиИСМПТК.Черновик") Тогда 
			//Предлагаем перезаполнение
			ТекстВопроса = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияПерезаполнитьДокументПоНовомуОснованию();
			ПерезаполнитьДокументПоОснованию = Новый ОписаниеОповещения("ПерезаполнитьДокументПоОснованию", ЭтаФорма);
			ПоказатьВопрос(ПерезаполнитьДокументПоОснованию, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		КонецЕсли;

		Модифицированность = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура ВидПродукцииПриИзменении(Элемент)
	
	Элементы.СпособВыпускаВОборот.СписокВыбора.Очистить();
	СписокЗначенийВидаОпераций = ПолучитьСписокВыбораВидаОперации(); 
	Элементы.СпособВыпускаВОборот.СписокВыбора.ЗагрузитьЗначения(СписокЗначенийВидаОпераций);
	СформироватьСписокВыбораШаблона();
	УправлениеФормой();
		
КонецПроцедуры

&НаКлиенте
Процедура ВидПродукцииОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если Объект.Товары.Количество() > 0 Тогда
		
		СтандартнаяОбработка = Ложь;
		ТекстВопроса = НСтр("ru = 'При изменении вида продукции табличная часть Товары будет очищена. Продолжить?'");
		ОписаниеОповещения = Новый ОписаниеОповещения("ВопросПриИзмененииВидаПродукцииПриЗавершении", ЭтотОбъект, ВыбранноеЗначение);
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВидПродукцииОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыНоменклатураПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	ОчиститьСписокВыбораGTIN();
	
	Если Не ТекущиеДанные = Неопределено Тогда
		
		ЗаполнитьПоляСтрокиТоварыПоСтатистике(Элементы.Товары.ТекущаяСтрока);
		
		ЗаполнитьСлужебныеРеквизитыПоНоменклатуре();
		ЗаполнитьПризнакИспользованияХарактеристик(ТекущиеДанные.НомерСтроки - 1);
		
		//Заполняем упаковку по умолчанию
		ТекущиеДанные.Упаковка = РозничноеВыбытиеИСМПТКПереопределяемый.ПолучитьЗначениеБазовойЕИНоменклатуры(ТекущиеДанные.Номенклатура);
				
		Шаблон = ИнтеграцияИСМПТКВызовСервера.ПолучитьШаблонДляНоменклатурыЗаказа(ТекущиеДанные.Номенклатура);
		ТекущиеДанные.Шаблон = Шаблон;
		
		БазоваяЕИ = РозничноеВыбытиеИСМПТКПереопределяемый.ПолучитьЗначениеБазовойЕИНоменклатуры(ТекущиеДанные.Номенклатура);
		ЗаполненаБазоваяЕИ = (ТекущиеДанные.Упаковка = БазоваяЕИ);
		ЭтоТабак = (ТекущиеДанные.Шаблон = ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗИСМПТК.ТабачнаяПачка")
					ИЛИ ТекущиеДанные.Шаблон = ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗИСМПТК.БлокТабачныхПачек"));
		//Значение Упаковки не передаем, т.к. сейчас заполнена базовая ЕИ, а ее как упаковку не считаем
		Штрихкоды = ЗаполнитьGTINПоНоменклатуре(ТекущиеДанные.Номенклатура, ?(ЗаполненаБазоваяЕИ, "", ТекущиеДанные.Упаковка), ТекущиеДанные.Характеристика, Элементы.Товары.ТекущиеДанные.ХарактеристикиИспользуются, ЭтоТабак);
		ЗаполнитьШтрихкодыВСтроке(Штрихкоды, ТекущиеДанные);
				
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыНоменклатураНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	ВидыПродукции = Новый Массив;
	ВидыПродукции.Добавить(Объект.ВидПродукции);
	СобытияФормИСМПТККлиентПереопределяемый.ПриНачалеВыбораНоменклатуры(Элемент, ТекущиеДанные, СтандартнаяОбработка, ВидыПродукции);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыХарактеристикаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
	СобытияФормИСМПТККлиентПереопределяемый.ПриИзмененииХарактеристики(ЭтотОбъект, ТекущиеДанные, КэшированныеЗначения);
	ЗаполнитьПоляСтрокиТоварыПоСтатистике(Элементы.Товары.ТекущаяСтрока);
	
	ТекущиеДанные.GTIN = "";
	
	БазоваяЕИ = РозничноеВыбытиеИСМПТКПереопределяемый.ПолучитьЗначениеБазовойЕИНоменклатуры(ТекущиеДанные.Номенклатура);
	ЗаполненаБазоваяЕИ = (ТекущиеДанные.Упаковка = БазоваяЕИ);
	ЭтоТабак = (ТекущиеДанные.Шаблон = ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗИСМПТК.ТабачнаяПачка")
					ИЛИ ТекущиеДанные.Шаблон = ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗИСМПТК.БлокТабачныхПачек"));
	Штрихкоды = ЗаполнитьGTINПоНоменклатуре(ТекущиеДанные.Номенклатура, ?(ЗаполненаБазоваяЕИ, "", ТекущиеДанные.Упаковка), ТекущиеДанные.Характеристика, Элементы.Товары.ТекущиеДанные.ХарактеристикиИспользуются, ЭтоТабак);
	ЗаполнитьШтрихкодыВСтроке(Штрихкоды, ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыУпаковкаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
	УпаковкаНеШтучная  = Ложь;
	БазоваяЕИ = РозничноеВыбытиеИСМПТКПереопределяемый.ПолучитьЗначениеБазовойЕИНоменклатуры(ТекущиеДанные.Номенклатура);
	Если Не ЗначениеЗаполнено(ТекущиеДанные.Упаковка) Тогда
		ТекущиеДанные.Упаковка = БазоваяЕИ
	КонецЕсли; 
	ЗаполненаБазоваяЕИ = (ТекущиеДанные.Упаковка = БазоваяЕИ);	
	
	Если Объект.ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИСМПТК.Табачная") Тогда
		//Заполнение шаблона
		Если Не ЗаполненаБазоваяЕИ Тогда
			//Значение упаковки, возможно, выбирал пользователь - проверяем какую упаковку или ЕИ он указал.
			УпаковкаНеШтучная = ОбщегоНазначенияИСМПТКПереопределяемый.УпаковкаНеШтучная(ТекущиеДанные.Номенклатура, ТекущиеДанные.Упаковка);
		КонецЕсли;
		
		Если УпаковкаНеШтучная Тогда
			ТекущиеДанные.Шаблон = ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗИСМПТК.БлокТабачныхПачек");
		ИначеЕсли ЗначениеЗаполнено(ТекущиеДанные.Упаковка) Тогда
			//Указана либо базовая ЕИ, либо штучная упаковка ном-ры, оба случая считаем пачкой сигарет
			ТекущиеДанные.Шаблон = ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗИСМПТК.ТабачнаяПачка");
		Иначе
			ТекущиеДанные.Шаблон = ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗИСМПТК.ПустаяСсылка");
		КонецЕсли;
	КонецЕсли;
		
	ТекущиеДанные.GTIN = "";
	ЭтоТабак = (ТекущиеДанные.Шаблон = ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗИСМПТК.ТабачнаяПачка")
					ИЛИ ТекущиеДанные.Шаблон = ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗИСМПТК.БлокТабачныхПачек"));
	Штрихкоды = ЗаполнитьGTINПоНоменклатуре(ТекущиеДанные.Номенклатура, ?(ЗаполненаБазоваяЕИ, "", ТекущиеДанные.Упаковка), ТекущиеДанные.Характеристика, Элементы.Товары.ТекущиеДанные.ХарактеристикиИспользуются, ЭтоТабак);
	ЗаполнитьШтрихкодыВСтроке(Штрихкоды, ТекущиеДанные);
	
	ВыполнитьПересчетКоличества();
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыХарактеристикаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	СобытияФормИСМПТККлиентПереопределяемый.ПриНачалеВыбораХарактеристики(Элемент, ТекущиеДанные, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыGTINНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
	БазоваяЕИ = РозничноеВыбытиеИСМПТКПереопределяемый.ПолучитьЗначениеБазовойЕИНоменклатуры(ТекущиеДанные.Номенклатура);
	ЗаполненаБазоваяЕИ = (ТекущиеДанные.Упаковка = БазоваяЕИ);
	
	Если Не ТекущиеДанные = Неопределено Тогда
		Если ТекущиеДанные.Шаблон = ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗИСМПТК.ТабачнаяПачка")
			Или ТекущиеДанные.Шаблон = ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗИСМПТК.БлокТабачныхПачек") Тогда
			ЭтоТабак = Истина;
		Иначе 
			ЭтоТабак = Ложь;
		КонецЕсли;
		Штрихкоды = ЗаполнитьGTINПоНоменклатуре(ТекущиеДанные.Номенклатура, ?(ЗаполненаБазоваяЕИ, "", ТекущиеДанные.Упаковка), ТекущиеДанные.Характеристика, ТекущиеДанные.ХарактеристикиИспользуются, ЭтоТабак);
		ЗаполнитьШтрихкодыВСтроке(Штрихкоды, ТекущиеДанные);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыВидОбувиПриИзменении(Элемент)
	
	Если Элементы.Товары.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Элементы.Товары.ТекущиеДанные.GTIN = "";
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСпособВводаВОборотПриИзменении(Элемент)
	
	Если Элементы.Товары.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Элементы.Товары.ТекущиеДанные.GTIN = "";
		
КонецПроцедуры

&НаКлиенте
Процедура ТоварыКоличествоУпаковокПриИзменении(Элемент)
	
	ВыполнитьПересчетКоличества();	
	ОбновитьСтатусУказанияСерийныхНомеров();
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока Тогда
		
		ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
		ТекущиеДанные.ИдентификаторСтроки = Новый УникальныйИдентификатор;
		
		Если Объект.ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИСМПТК.Обувная") Тогда
			ТекущиеДанные.Шаблон = ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗИСМПТК.Обувь");
			
		ИначеЕсли Объект.ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИСМПТК.МолочнаяПродукция") Тогда
			ТекущиеДанные.Шаблон = ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗИСМПТК.МолочнаяПродукция");
			
		ИначеЕсли Объект.ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИСМПТК.ЛекарственныеПрепараты") Тогда
			ТекущиеДанные.Шаблон = ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗИСМПТК.ЛекарственныеПрепараты");
			
		ИначеЕсли Объект.ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИСМПТК.ЛегкаяПромышленность") Тогда
			ТекущиеДанные.Шаблон = ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗИСМПТК.ЛегкаяПромышленность");
			
		ИначеЕсли Объект.ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИСМПТК.Табачная") Тогда
			ТекущиеДанные.Шаблон = ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗИСМПТК.ТабачнаяПачка"); //Значение по умолчанию, меняется на форме польователем
		КонецЕсли;
		
		ТекущиеДанные.СпособФормированияСерийногоНомера = ПредопределенноеЗначение("Перечисление.СпособыФормированияСерийногоНомераСУЗИСМПТК.Автоматически");
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСпособФормированияСерийногоНомераНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	СпособФормированияСерийногоНомера = ТекущиеДанные.СпособФормированияСерийногоНомера;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСпособФормированияСерийногоНомераПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
	Если СпособФормированияСерийногоНомера = ТекущиеДанные.СпособФормированияСерийногоНомера Тогда
		Возврат;
	КонецЕсли;
	
	АвтоматическоеФормирование = ПредопределенноеЗначение("Перечисление.СпособыФормированияСерийногоНомераСУЗИСМПТК.Автоматически");
	Если ТекущиеДанные.СпособФормированияСерийногоНомера = АвтоматическоеФормирование Тогда
		
		ПараметрыОтбора = Новый Структура("ИдентификаторСтроки", ТекущиеДанные.ИдентификаторСтроки);
		НайденныеСтроки = Объект.СерийныеНомера.НайтиСтроки(ПараметрыОтбора);
		Если НайденныеСтроки.Количество() > 0 Тогда
			
			ОписаниеОповещения = Новый ОписаниеОповещения(
				"ВопросОбУдаленииСвязанныхСерийныхНомеровЗавершение", ЭтотОбъект);
			ТекстВопроса = НСтр("ru = 'Все связанные серийные номера будут очищены. Продолжить?'");
			ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
			
		Иначе
			
			ОбновитьСтатусУказанияСерийныхНомеров();
			
		КонецЕсли;
		
	Иначе
		
		ОбновитьСтатусУказанияСерийныхНомеров();
				
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыШаблонПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	УпаковкаНеШтучная = ОбщегоНазначенияИСМПТКПереопределяемый.УпаковкаНеШтучная(ТекущиеДанные.Номенклатура, ТекущиеДанные.Упаковка);
	
	Если (ТекущиеДанные.Шаблон = ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗИСМПТК.ТабачнаяПачка")
		ИЛИ ТекущиеДанные.Шаблон = ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗИСМПТК.БлокТабачныхПачек"))
		И УпаковкаНеШтучная Тогда
		ВыполнитьПересчетКоличества();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	ВыполнитьПроверкуТоваров();
			
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриИзменении(Элемент)
	
	ВыполнитьПроверкуТоваров();
	
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеДокументаОснованияНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если ЗначениеЗаполнено(Объект.ДокументОснование) Тогда
		ПоказатьЗначение(, Объект.ДокументОснование);
	Иначе
		Кнопки = Новый СписокЗначений;
		Кнопки.Добавить("Выбрать", РаботаСТекстамиИСМПТККлиентСервер.ТекстКомандыВыбрать());
		Кнопки.Добавить("Отмена",  РаботаСТекстамиИСМПТККлиентСервер.ТекстКомандыОтмена());
		ОтразитьДокументВУчетеЗавершение = Новый ОписаниеОповещения("ОтразитьДокументВУчетеЗавершение", ЭтаФорма);
		ПоказатьВопрос(ОтразитьДокументВУчетеЗавершение, РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияВопросОтразитьДокументВУчете(), Кнопки);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтразитьДокументВУчетеЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = "Выбрать" Тогда
		ВыбратьДокументОснование();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НанесениеКМНажатие(Элемент, СтандартнаяОбработка)
	
	ДокументИСМПТ	 = НанесениеКМ;
	ДокументИсточник = Объект.Ссылка;
	ИмяФормыДокументаИСМПТ = "Документ.ЗаказКодовМаркировкиСУЗИСМПТК.ФормаОбъекта";
	
	Если ТипЗнч(ДокументИСМПТ) <> Тип("СписокЗначений") И ЗначениеЗаполнено(ДокументИСМПТ) Тогда
		
		ПоказатьЗначение(,ДокументИСМПТ);
						
	ИначеЕсли ТипЗнч(ДокументИСМПТ) = Тип("СписокЗначений") И ЗначениеЗаполнено(ДокументИСМПТ) Тогда
		
		Если ДокументИСМПТ.Количество() > 1 Тогда
			СтандартнаяОбработка = Ложь;
			РаботаСДокументамиИСМПТККлиент.ОткрытьФормуПросмотраСпискаДокументов(ЭтаФорма, ЭтаФорма.НанесениеКМ, ДокументИСМПТ.Количество());
		КонецЕсли;
		
	Иначе
		
		ПараметрыФормы = Новый Структура("Основание", ЭтаФорма.Параметры.Ключ);
		ОткрытьФорму(ИмяФормыДокументаИСМПТ, ПараметрыФормы, ЭтаФорма);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьПересчетКоличества()
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	УпаковкаНеШтучная = ОбщегоНазначенияИСМПТКПереопределяемый.УпаковкаНеШтучная(ТекущиеДанные.Номенклатура, ТекущиеДанные.Упаковка);
	БазоваяЕИ = РозничноеВыбытиеИСМПТКПереопределяемый.ПолучитьЗначениеБазовойЕИНоменклатуры(ТекущиеДанные.Номенклатура);
	
	Если ТекущиеДанные.Упаковка = БазоваяЕИ
		Или Не УпаковкаНеШтучная Тогда
		//Выбрана минимальная ЕИ товара или штучная упаковка
		ТекущиеДанные.Количество = ТекущиеДанные.КоличествоУпаковок;
	Иначе 
		//Указана упаковка товара на несколько шт
		Если ТекущиеДанные.Шаблон = ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗИСМПТК.БлокТабачныхПачек") Тогда
			ТекущиеДанные.Количество = ТекущиеДанные.КоличествоУпаковок;
		Иначе
			ТекущиеДанные.Количество = ОбщегоНазначенияИСМПТКПереопределяемый.ПересчитатьКоличествоУпаковокВКоличество(ТекущиеДанные.КоличествоУпаковок, ТекущиеДанные.Упаковка, ТекущиеДанные.Номенклатура);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Печать(Команда)
	
	ПечатьКодовМаркировкиИСМПТККлиент.ОтрытьФормуПечатиКодовМаркировок(ЭтотОбъект, Объект);
	
КонецПроцедуры

&НаКлиенте
Процедура УказатьСерийныеНомера(Команда)
	
	ОткрытьФормуВыбораСерий();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоGTIN(Команда)
	
	Если Объект.Товары.Количество() = 0 Тогда
		ТекстСообщения = НСтр( "ru = 'Таблица товаров не заполнена!'");
		ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	ТекстВопроса = НСтр("ru = 'Таблица ""Товары"" будут перезаполнена по регистру ""%НаименованиеРегистра%"", при этом уже введенные данные по номенклатуре будут очищены.'")
				 + Символы.ПС
				 + НСтр("ru = 'Выполнить заполнение?'");
	ТекстВопроса = СтрЗаменить(ТекстВопроса, "%НаименованиеРегистра%", ОбщегоНазначенияИСМПТКПереопределяемый.ПолучитьПредставлениеРегистраШтрихкоды());
	ЗаполнитьПоGTINЗавершение = Новый ОписаниеОповещения("ЗаполнитьПоGTINЗавершение", ЭтаФорма);
	ПоказатьВопрос(ЗаполнитьПоGTINЗавершение, ТекстВопроса, РежимДиалогаВопрос.ОКОтмена);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтображатьДанныеПоНоменклатуреПриИзменении(Элемент)
	
	УправлениеФормой();
				
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриАктивизацииСтроки(Элемент)
	
	Если ПроверитьВозможностьИзмененияПоРолям() Тогда
		ОчиститьСписокВыбораGTIN();
	КонецЕсли;
	УстановитьДоступностьКомандыВводаСерий();
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьКодыМаркировкиВФайл(Команда)  //CSV
	
	ТекстВопроса = НСтр("ru = 'Будут выгружены доступные коды маркировки заказа (за исключением ранее удалённых).'")
				 + Символы.ПС
				 + НСтр("ru = 'Продолжить?'");
	
	ДополнительныеПараметры = Новый Структура("ФорматФайла", "CSV");
	ВыгрузитьКодыМаркировки = Новый ОписаниеОповещения("ВыгрузитьКодыМаркировки", ЭтаФорма, ДополнительныеПараметры);
	ПоказатьВопрос(ВыгрузитьКодыМаркировки, ТекстВопроса, РежимДиалогаВопрос.ОКОтмена);
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьКодыМаркировкиВExcel(Команда)
	
	ТекстВопроса = НСтр("ru = 'Будут выгружены доступные коды маркировки заказа (за исключением ранее удалённых).'")
				 + Символы.ПС
				 + НСтр("ru = 'Продолжить?'");
	
	ДополнительныеПараметры = Новый Структура("ФорматФайла", "Excel");
	ВыгрузитьКодыМаркировки = Новый ОписаниеОповещения("ВыгрузитьКодыМаркировки", ЭтаФорма, ДополнительныеПараметры);
	ПоказатьВопрос(ВыгрузитьКодыМаркировки, ТекстВопроса, РежимДиалогаВопрос.ОКОтмена);
	
КонецПроцедуры

&НаКлиенте
Процедура ДокументОснованиеВыбрать(Команда)
	
	ВыбратьДокументОснование();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьДокументОснование()
	
	ПараметрыФормыВыбора = Новый Структура("РежимВыбора", Истина);
	ДокументыВыбора = РаботаСДокументамиИСМПТККлиентСерверПереопределяемый.ПолучитьСписокДокументовОснованияДляЗаказаКМ();
	
	Если ДокументыВыбора.Количество() > 1 Тогда
		
		ПараметрыФормыВыбора.Вставить("ДокументыВыбора", ДокументыВыбора);
					
		Оповещение = Новый ОписаниеОповещения("ВыборДокументаОснованияЗавершение", ЭтотОбъект);
		ОткрытьФорму("ОбщаяФорма.ФормаВыбораДокументаОснованияИСМПТК", ПараметрыФормыВыбора,,,,,Оповещение,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	ИначеЕсли ДокументыВыбора.Количество() = 1 Тогда
		
		ВыбранныйДокумент = ДокументыВыбора[0].Значение;
		ВыборДокументаОснованияЗавершение(ВыбранныйДокумент, Неопределено);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтсоединитьДокументОснование(Команда)
	
	Если ЗначениеЗаполнено(Объект.ДокументОснование) Тогда
		Объект.ДокументОснование = Неопределено;
		СформироватьПредставлениеДокументаОснования(ЭтаФорма);
		Модифицированность = Истина;
	Иначе
		Действие = РаботаСДокументамиИСМПТККлиентСервер.ДействиеОтсоединить();
		ПоказатьПредупреждение(, РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияОтказДокументНеОтраженВУчете(Действие));
	КонецЕсли;
	
КонецПроцедуры

#Область ПодборТоваров

&НаКлиенте
Процедура ОткрытьПодбор(Команда)
	
	Если Не ЗначениеЗаполнено(Объект.ВидПродукции) Тогда 
		ТекстСообщения = НСтр( "ru = 'Сначала необходимо указать вид номекнлатуры в документе!'");
		ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	ОчиститьСообщения();
	РаботаСДокументамиИСМПТККлиентПереопределяемый.ПодобратьНоменклатуруВЗаказ(ЭтаФорма, УникальныйИдентификатор);
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПодбораТоваровИзПодбора(АдресТоваровВХранилище)
	
	РаботаСДокументамиИСМПТКПереопределяемый.ЗаполнитьЗаказИзПодбора(Объект.Товары, Объект.ВидПродукции, АдресТоваровВХранилище);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область Оборудование

&НаКлиенте
Процедура ПодключитьОборудованиеЗавершение(РезультатВыполнения, Параметры) Экспорт

	Если Не РезультатВыполнения.Результат Тогда
		ТекстСообщения = НСтр( "ru = 'При подключении оборудования произошла ошибка.'")
					   + Символы.ПС
					   + РезультатВыполнения.ОписаниеОшибки;
		ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОтключитьОборудованиеЗавершение(РезультатВыполнения, Параметры) Экспорт

	Если Не РезультатВыполнения.Результат Тогда
		ТекстСообщения = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияОшбкаПриОтключенииОборудования();
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%" , РезультатВыполнения.ОписаниеОшибки);
		ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаСобытияСканераОбщая(Параметр)
	
	ОчиститьСообщения();
	
	ИсходныеДанные = РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйКлиент.ПреобразоватьДанныеСоСканераВСтруктуру(Параметр);
	
	Если ИсходныеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйКлиентСервер.ЗакодироватьШтрихкодДанныхBase64(ИсходныеДанные);
	ИсходныеДанные.Вставить("ФорматBase64", Истина);
	ДанныеМаркировки = РозничноеВыбытиеИСМПТКВызовСервера.РазобратьШтриховойКодТовара(ИсходныеДанные.Штрихкод, Истина);
	
	Если ЗначениеЗаполнено(ДанныеМаркировки.ОписаниеОшибки) 
		ИЛИ Не ДанныеМаркировки.Разобран Тогда
		ТекстПредупреждения = НСтр( "ru = 'Не удалось распознать отсканированный штрихкод по причине: %1!'");
		ТекстПредупреждения = ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(ТекстПредупреждения, ДанныеМаркировки.ОписаниеОшибки); 					
		ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстПредупреждения);
		Возврат;
	ИначеЕсли Не Объект.Товары.НайтиСтроки(Новый Структура("GTIN", ДанныеМаркировки.GTIN)).Количество() = 0 Тогда
		ТекстПредупреждения = НСтр( "ru = 'Невозможно выполнить добавление: GTIN %1 уже присутствует в таблице!'");
		ТекстПредупреждения = ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(ТекстПредупреждения, ДанныеМаркировки.GTIN); 					
		ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстПредупреждения);
		Возврат;
	КонецЕсли;
	
	ДанныеНоменклатуры = РозничноеВыбытиеИСМПТККлиент.ПолучитьНоменклатуруПоШтрихкодуВРозничномКонтуре(ДанныеМаркировки.EAN);
	НоваяСтрока = Объект.Товары.Добавить();
	Если Не ДанныеНоменклатуры = Неопределено Тогда
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ДанныеНоменклатуры);
	КонецЕсли;
	НоваяСтрока.GTIN = ДанныеМаркировки.GTIN;
	НоваяСтрока.Шаблон = ИнтеграцияИСМПТКВызовСервера.ПолучитьШаблонДляНоменклатурыЗаказа(НоваяСтрока.Номенклатура);
	НоваяСтрока.СпособФормированияСерийногоНомера = ПредопределенноеЗначение("Перечисление.СпособыФормированияСерийногоНомераСУЗИСМПТК.Автоматически");
	НоваяСтрока.СпособВводаВОборот = Объект.СпособВводаВОборот;
	
	ЗаполнитьСлужебныеРеквизитыПоНоменклатуре();
	ЗаполнитьПризнакИспользованияХарактеристик(НоваяСтрока.НомерСтроки - 1);
		
	Если ЗначениеЗаполнено(Объект.ВидПродукции) И ЗначениеЗаполнено(НоваяСтрока.Номенклатура) Тогда
		
		ВидНоменклатуры = ОбщегоНазначенияИСМПТКПереопределяемый.ПолучитьВидПродукцииПоНоменклатуре(НоваяСтрока.Номенклатура);
		Если Объект.ВидПродукции <> ВидНоменклатуры Тогда
			
			ТекстСообщения = НСтр("ru='Особенности учета номенклатуры %1, подобранной по добавленному штрихкоду, не соответствуют указанному в документе виду продукции!'");
			ТекстСообщения = ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(ТекстСообщения, НоваяСтрока.Номенклатура);
			ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения, , , "Форма.Объект");
		
		КонецЕсли;
	КонецЕсли;
		
КонецПроцедуры

#КонецОбласти

#Область Прочее

&НаСервере
Процедура ЗаполнитьКоличествоЭмитированоВТоварах()
	
	ТаблицаТовары = Объект.Товары.Выгрузить();
	РазборИОбработкаКодовМаркировкиИСМПТКСлужебный.ПронумероватьИсходнуюТаблицуДанныхЗаполнения(ТаблицаТовары);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ТаблицаТовары.ИндексИсходнойСтроки КАК ИндексИсходнойСтроки,
		|	&Ссылка                            КАК Ссылка,
		|	ТаблицаТовары.Номенклатура         КАК Номенклатура,
		|	ТаблицаТовары.Характеристика       КАК Характеристика,
		|	ТаблицаТовары.Количество           КАК Количество,
		|	ТаблицаТовары.GTIN                 КАК GTIN
		|ПОМЕСТИТЬ ВременнаяТаблицаТовары
		|ИЗ
		|	&ТаблицаТовары КАК ТаблицаТовары
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Номенклатура,
		|	Характеристика,
		|	GTIN,
		|	Ссылка
		|;
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ВременнаяТаблицаТовары.ИндексИсходнойСтроки КАК ИндексИсходнойСтроки,
		|	МАКСИМУМ(ВременнаяТаблицаТовары.Количество) КАК Количество,
		|	СУММА(ВЫБОР
		|			КОГДА ПулКодовМаркировкиСУЗ.Номенклатура ЕСТЬ NULL
		|			ТОГДА 0
		|			ИНАЧЕ 1 КОНЕЦ) КАК КоличествоЭмитировано
		|ИЗ
		|	ВременнаяТаблицаТовары КАК ВременнаяТаблицаТовары
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПулКодовМаркировкиСУЗИСМПТК КАК ПулКодовМаркировкиСУЗ
		|		ПО ВременнаяТаблицаТовары.Номенклатура  = ПулКодовМаркировкиСУЗ.Номенклатура
		|		И ВременнаяТаблицаТовары.Характеристика = ПулКодовМаркировкиСУЗ.Характеристика
		|		И ВременнаяТаблицаТовары.Ссылка         = ПулКодовМаркировкиСУЗ.ЗаказНаЭмиссию
		|		И ВременнаяТаблицаТовары.GTIN           = ПулКодовМаркировкиСУЗ.GTIN
		|СГРУППИРОВАТЬ ПО
		|	ВременнаяТаблицаТовары.ИндексИсходнойСтроки
		|";
	
	Запрос.УстановитьПараметр("ТаблицаТовары", ТаблицаТовары);
	Запрос.УстановитьПараметр("Ссылка",        Объект.Ссылка);
	
	ВыборкаИзРезультатаЗапроса = Запрос.Выполнить().Выбрать();
	
	Пока ВыборкаИзРезультатаЗапроса.Следующий() Цикл
		СтрокаТовары = Объект.Товары.Получить(ВыборкаИзРезультатаЗапроса.ИндексИсходнойСтроки);
		СтрокаТовары.КоличествоЭмитировано = ВыборкаИзРезультатаЗапроса.КоличествоЭмитировано;
		Если ВыборкаИзРезультатаЗапроса.Количество <> ВыборкаИзРезультатаЗапроса.КоличествоЭмитировано Тогда
			СтрокаТовары.ЕстьОтличия = Истина;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоляСтрокиТоварыПоСтатистике(ТекущаяСтрока)
	
	ДанныеСтроки = Объект.Товары.НайтиПоИдентификатору(ТекущаяСтрока);
	
	Если Не ЗначениеЗаполнено(ДанныеСтроки.Номенклатура) 
		Или Не ЗначениеЗаполнено(ДанныеСтроки.Характеристика)
		И ДанныеСтроки.ХарактеристикиИспользуются Тогда
		Возврат;
	КонецЕсли;
		
	ЗаполнитьПоляСтрокиТоварыПоСтатистикеСервер(ТекущаяСтрока);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоляСтрокиТоварыПоСтатистикеСервер(ТекущаяСтрока)
	
	ТекущиеДанные = Объект.Товары.НайтиПоИдентификатору(ТекущаяСтрока);
	ТекущиеДанные.СпособФормированияСерийногоНомера = СпособФормированияСерийногоНомераПоСтатистике(ТекущиеДанные.Номенклатура, ТекущиеДанные.Характеристика);
	
КонецПроцедуры

&НаСервере
Процедура ПриСозданииЧтенииНаСервере()
	
	ПравоИзменения  = ПравоДоступа("Изменение", Метаданные.Документы.ЗаказКодовМаркировкиСУЗИСМПТК);
		
	ИнтеграцияИСМПТКПереопределяемый.НастроитьПодключаемоеОборудование(ЭтотОбъект);
	ИнтеграцияИСМПТКПереопределяемый.ЗаполнитьСлужебныеРеквизитыВКоллекции(ЭтотОбъект, Объект.Товары);
		
	ЗаполнитьКоличествоЭмитированоВТоварах();
	ЗаполнитьПризнакИспользованияХарактеристик();
	
	ИнтерфейсИСМПТК.УстановитьЗаголовокФормыДокумента(, Объект.Ссылка, ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	СобытияФормИСМПТКПереопределяемый.УстановитьУсловноеОформлениеХарактеристикНоменклатуры(ЭтаФорма);
	ОбщегоНазначенияИСМПТККлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ФормаПолучитьКМПовторно", "Доступность", ЕстьОшибкиПолученияКМ());
	
	//Характеристики
	ХарактеристикиИспользуются = ИнтеграцияИСМПТКПереопределяемый.ПроверитьИспользованиеХарактеристик();
	ОбщегоНазначенияИСМПТККлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ТоварыХарактеристика", 	 "Видимость", ХарактеристикиИспользуются);
	
КонецПроцедуры

&НаСервере
Процедура УправлениеФормой()
	
	ДанныеИзПула = ПроверитьНаличиеКодовВПуле();
	КодыПолученыУспешно = ДанныеИзПула.КодыПолучены;
	
	//Данные по номенклатуре в ТЧ Товары
	ОбщегоНазначенияИСМПТККлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГруппаДанныеНоменклатуры", "Видимость", ОтображатьДанныеПоНоменклатуре);
	ОбщегоНазначенияИСМПТККлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ЗаполнитьПоGTIN", 	  	 "Видимость", ОтображатьДанныеПоНоменклатуре);
	
	ОтразитьГруппуИдентификаторовПроизводства = Объект.ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИСМПТК.ЛекарственныеПрепараты") 
												ИЛИ Объект.ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИСМПТК.Табачная");
	ОбщегоНазначенияИСМПТККлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГруппаЛекарственныеТовары","Видимость", ОтразитьГруппуИдентификаторовПроизводства);
	
	//Редактирование формы
	Если (Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыОбработкиЗаказовНаЭмиссиюКодовМаркировкиИСМПТК.Создан")
			И ЗначениеЗаполнено(Объект.OrderID))
		ИЛИ Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыОбработкиЗаказовНаЭмиссиюКодовМаркировкиИСМПТК.ПринятКОбработке")
		ИЛИ Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыОбработкиЗаказовНаЭмиссиюКодовМаркировкиИСМПТК.ПодтвержденИСМП")
		ИЛИ Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыОбработкиЗаказовНаЭмиссиюКодовМаркировкиИСМПТК.КодыМаркировкиЭмитированы")
		ИЛИ Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыОбработкиЗаказовНаЭмиссиюКодовМаркировкиИСМПТК.Выполнен")
		ИЛИ Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыОбработкиЗаказовНаЭмиссиюКодовМаркировкиИСМПТК.НеПодтвержденИСМП") Тогда
		РазрешенТолькоПросмотр = Истина;
	Иначе
		РазрешенТолькоПросмотр = Ложь;
	КонецЕсли;
	
	ДоступностьПоРолям 		   = РольДоступна("АдминистрированиеИСМПТК") ИЛИ РольДоступна("ПолныеПрава");
	ДоступностьГруппыПолучения = ?(ЗначениеЗаполнено(Объект.OrderID) И Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыОбработкиЗаказовНаЭмиссиюКодовМаркировкиИСМПТК.КодыМаркировкиЭмитированы"), Истина, Ложь);
	
	Если ЗначениеЗаполнено(Объект.OrderID)
		И (Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыОбработкиЗаказовНаЭмиссиюКодовМаркировкиИСМПТК.КодыМаркировкиЭмитированы")
			ИЛИ Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыОбработкиЗаказовНаЭмиссиюКодовМаркировкиИСМПТК.Выполнен")) Тогда
		//Заказ выполнен, считаем, что коды получены
		Если Объект.ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИСМПТК.Обувная") Тогда
			//У обуви коды становятся доступны для передачи сразу после получения, разрешаем печать
			ДоступностьПечать = ПравоДоступа("Просмотр", Метаданные.Обработки.ПечатьКодовМаркировкиИСМПТК);
		Иначе
			//У табака, молочки и лекарств требуется отдельное нанесение кодов для ввода в оборот, печать из документа НанесениеКодовМаркировкиСУЗИСМПТК
			ДоступностьПечать = Ложь;
		КонецЕсли;
	Иначе
		ДоступностьПечать = Ложь;
	КонецЕсли;
	ДоступностьПовторногоПолучения = ?(ДоступностьГруппыПолучения И ДоступностьПоРолям, Истина, Ложь);
	
	ОбщегоНазначенияИСМПТККлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "Товары", 		 	"ТолькоПросмотр", РазрешенТолькоПросмотр);
	ОбщегоНазначенияИСМПТККлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГруппаШапка", 	"ТолькоПросмотр", РазрешенТолькоПросмотр);
	ОбщегоНазначенияИСМПТККлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ЗаполнитьПоGTIN", "Доступность",    Не РазрешенТолькоПросмотр);
	ОбщегоНазначенияИСМПТККлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ОткрытьПодбор", 	"Доступность",    Не РазрешенТолькоПросмотр);
	ОбщегоНазначенияИСМПТККлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ФормаПечать", 	"Видимость", 	  ДоступностьПечать);
	ОбщегоНазначенияИСМПТККлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ФормаПолучитьКМПовторно", 	   "Видимость", ДоступностьПовторногоПолучения);
	ОбщегоНазначенияИСМПТККлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГруппаПолучениеКодовМаркировки", "Видимость", ДоступностьГруппыПолучения);
	ОбщегоНазначенияИСМПТККлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ФормаДокументЗаказКодовМаркировкиСУЗИСМПТКПроверить", "Доступность", Не РазрешенТолькоПросмотр);
	ОбщегоНазначенияИСМПТККлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ФормаДокументЗаказКодовМаркировкиСУЗИСМПТКРазбитьНаНесколькоДокументов", "Видимость", Не РазрешенТолькоПросмотр);
	//////////
	
	//Нанесение полученных КМ
	//К данной группе относится команда ввода документа НанесениеКодовМаркировкиСУЗИСМПТК и декорации-оповещения.
	//Ввод документа требуется для всех ТГ, кроме Обуви. Ввод возможен только на основании выполненных заказов КМ (также требуется предварительное получение КМ).
	//Для ТГ, требующих нанесения, недоступно частичное получение КМ. Поэтому считаем, что если в Пуле есть коды по заказу и статус заказа Готов - уже можно вводить Нанесение, 
	//не дожидаясь закрытия заказа.
	Если Не Объект.ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИСМПТК.Обувная") 
		И КодыПолученыУспешно //когда в оповещении о получении КМ приходит параметр Истина	
		И (Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыОбработкиЗаказовНаЭмиссиюКодовМаркировкиИСМПТК.КодыМаркировкиЭмитированы") //Готов
			Или Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыОбработкиЗаказовНаЭмиссиюКодовМаркировкиИСМПТК.Выполнен")) Тогда //Закрыт
			
		//Команда ввода Нанесения КМ
		ОбщегоНазначенияИСМПТККлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ФормаОформитьНанесениеКМ",   "Видимость", Не ЗначениеЗаполнено(НанесениеКМ));
		//Ссылка с предупреждением о не оформленном отчете по нанесению
		ОбщегоНазначенияИСМПТККлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГруппаНанесениеНеОформлено", "Видимость", Не ЗначениеЗаполнено(НанесениеКМ));		
		//Ссылка на оформленный документ Нанесения 
		ОбщегоНазначенияИСМПТККлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГруппаНанесениеОформлено",   "Видимость", ЗначениеЗаполнено(НанесениеКМ));
		
		//Т.к. порционное получение для этих ТГ недоступно, то можно скрыть группу команд получения, т.к. признак КодыПолученыУспешно говорит, что КМ в регистре уже есть
		ОбщегоНазначенияИСМПТККлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГруппаПолучениеКодовМаркировки", "Видимость", Не КодыПолученыУспешно);
		
	ИначеЕсли Объект.ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИСМПТК.Обувная") 
		И ДанныеИзПула.КоличествоВПуле = Объект.Товары.Итог("Количество")
		И КодыПолученыУспешно Тогда
		
		//Значит получены все КМ по заказу и уже произошло их автоматическое нанесение в СУЗ (для этой ТГ отдельный документ не нужен)
		//Команда ввода Нанесения КМ
		ОбщегоНазначенияИСМПТККлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ФормаОформитьНанесениеКМ", 	"Видимость", Ложь);
		//Ссылка с предупреждением о не оформленном отчете по нанесению
		ОбщегоНазначенияИСМПТККлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГруппаНанесениеНеОформлено", "Видимость", Ложь);		
		//Ссылка на оформленный документ Нанесения 
		ОбщегоНазначенияИСМПТККлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГруппаНанесениеОформлено", 	"Видимость", Истина);
		Элементы.ДекорацияОформленоУведомление.Заголовок = НСтр("ru='Выполнено автоматическое нансение кодов маркировки в СУЗ.'");
		
	Иначе
		ОбщегоНазначенияИСМПТККлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ФормаОформитьНанесениеКМ",   "Видимость", Ложь);
		ОбщегоНазначенияИСМПТККлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГруппаНанесениеНеОформлено", "Видимость", Ложь);
		ОбщегоНазначенияИСМПТККлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГруппаНанесениеОформлено", 	"Видимость", Ложь);
	КонецЕсли;
	
	ОбщегоНазначенияИСМПТККлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "НанесениеКМ", "Видимость", ЗначениеЗаполнено(НанесениеКМ));
	//////////
	
	//Отражение в учете
	ДокументМожноОтразитьВБазе = РаботаСДокументамиИСМПТКПереопределяемый.ПроверитьВозможностьОтраженияДокументаВУчете(ОбщегоНазначенияИСМПТКВызовСервера.ИмяДокументаЗаказКодовМаркировкиСУЗИСМПТК());
	ОбщегоНазначенияИСМПТККлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ФормаГруппаОтражение", "Видимость", ДокументМожноОтразитьВБазе);
	ОбщегоНазначенияИСМПТККлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ПредставлениеДокументаОснования", "Видимость", ДокументМожноОтразитьВБазе);
	
	//Причина отклонения
	ОбщегоНазначенияИСМПТККлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ПричинаОтклонения", "Видимость", ЗначениеЗаполнено(Объект.ПричинаОтклонения));
	
	ВидимостьДокументаОснования = РаботаСДокументамиИСМПТКПереопределяемый.ПолучитьВидимостьСсылкиДокументОснованиеВЗаказе();
	ОбщегоНазначенияИСМПТККлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ПредставлениеДокументаОснования", "Видимость", ВидимостьДокументаОснования);	 
	ОбщегоНазначенияИСМПТККлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ФормаГруппаОтражение",  "Видимость", ВидимостьДокументаОснования);	 
	ОбщегоНазначенияИСМПТККлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "КонтактноеЛицо", 	   "Видимость", Объект.ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИСМПТК.Обувная"));
	
	ВидимостьПодбораНоменклатуры = РаботаСДокументамиИСМПТКПереопределяемый.ПолучитьВидимостьПодбораНоменклатурыВЗаказе();
	ОбщегоНазначенияИСМПТККлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ОткрытьПодбор", "Видимость", ВидимостьПодбораНоменклатуры);
	
	ОбщегоНазначенияИСМПТККлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ТоварыШаблон",  "ТолькоПросмотр", Не Объект.ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИСМПТК.Табачная"));
	СформироватьСписокВыбораШаблона();
	
	УстановитьВидимостьКнопокИзмененияСтатуса();
	СформироватьПредставлениеДокументаОснования(ЭтаФорма);
	СформироватьПредставлениеСостояния();
		
КонецПроцедуры

&НаСервере
Процедура СформироватьПредставлениеСостояния()
	
	ЗаказПереданНаСервер = ЗначениеЗаполнено(Объект.OrderID);
	
	Если Объект.Ссылка.Пустая() 
		Или Объект.Статус = Перечисления.СтатусыОбработкиЗаказовНаЭмиссиюКодовМаркировкиИСМПТК.Черновик Тогда
		//документ создан в базе, не отправлялся
		
		ПредставлениеСостояния = НСтр("ru = 'Черновик'");
		
	ИначеЕсли Объект.Статус = Перечисления.СтатусыОбработкиЗаказовНаЭмиссиюКодовМаркировкиИСМПТК.Создан
		И Не ЗаказПереданНаСервер Тогда
		
		ПредставлениеСостояния = НСтр("ru = 'Заказ кодов создан и готов к передачи в СУЗ'");
		
	ИначеЕсли Объект.Статус = Перечисления.СтатусыОбработкиЗаказовНаЭмиссиюКодовМаркировкиИСМПТК.Создан
		И ЗаказПереданНаСервер Тогда
		
		ПредставлениеСостояния = НСтр("ru = 'Заказ кодов создан и отправлен в СУЗ'");
		
	ИначеЕсли Объект.Статус = Перечисления.СтатусыОбработкиЗаказовНаЭмиссиюКодовМаркировкиИСМПТК.ПринятКОбработке Тогда
		
		ПредставлениеСостояния = НСтр("ru = 'Заказ кодов принят на строне СУЗ и ожидает подтверждения'");
		
	ИначеЕсли Объект.Статус = Перечисления.СтатусыОбработкиЗаказовНаЭмиссиюКодовМаркировкиИСМПТК.НеПодтвержденИСМП Тогда
		
		ПредставлениеСостояния = НСтр("ru = 'Заказ кодов был отклонён на стороне СУЗ'");
		
	ИначеЕсли Объект.Статус = Перечисления.СтатусыОбработкиЗаказовНаЭмиссиюКодовМаркировкиИСМПТК.ПодтвержденИСМП Тогда
		
		ПредставлениеСостояния = НСтр("ru = 'Заказ кодов подтверждён на стороне СУЗ'");
		
	ИначеЕсли Объект.Статус = Перечисления.СтатусыОбработкиЗаказовНаЭмиссиюКодовМаркировкиИСМПТК.КодыМаркировкиЭмитированы Тогда
		
		ПредставлениеСостояния = НСтр("ru = 'Заказ кодов исполнен на стороне СУЗ коды маркировки эмитированы'");
		
	ИначеЕсли Объект.Статус = Перечисления.СтатусыОбработкиЗаказовНаЭмиссиюКодовМаркировкиИСМПТК.Выполнен Тогда
		
		Если ЗначениеЗаполнено(Объект.ПричинаОтклонения) Тогда
			ПредставлениеСостояния = НСтр("ru = 'Заказ кодов закрыт, содержит ошибки'");
		Иначе
			ПредставлениеСостояния = НСтр("ru = 'Заказ кодов закрыт'");
		КонецЕсли;
                                  		
	Иначе
		
		Если Объект.Ссылка.Пустая() Тогда
			ПредставлениеСостояния = НСтр("ru = 'Новый документ'");
		Иначе
			ПредставлениеСостояния = НСтр("ru = 'Документ %Состояние%'");
			ПредставлениеСостояния = СтрЗаменить(ПредставлениеСостояния, "%Состояние%", НРег(Объект.Состояние));
		КонецЕсли;
		
	КонецЕсли;
	
	Элементы.ПредставлениеСостояния.ЦветТекста = ОбщегоНазначенияИСМПТККлиентСервер.ЦветСостояния(Объект.Состояние);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура СформироватьПредставлениеДокументаОснования(Форма)
	
	Если ЗначениеЗаполнено(Форма.Объект.ДокументОснование) Тогда
		Форма.ПредставлениеДокументаОснования = Форма.Объект.ДокументОснование;
		Форма.Элементы.ПредставлениеДокументаОснования.ЦветТекста = ОбщегоНазначенияИСМПТККлиентСервер.ЦветСиний();
	Иначе
		Форма.ПредставлениеДокументаОснования = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияДокументНеОтраженВУчете();
		Форма.Элементы.ПредставлениеДокументаОснования.ЦветТекста = ОбщегоНазначенияИСМПТККлиентСервер.ЦветКрасный();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросПриИзмененииВидаПродукцииПриЗавершении(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		
		Объект.СпособВводаВОборот  = Неопределено;
		Объект.ВидПродукции		   = ДополнительныеПараметры;
		Элементы.СпособВыпускаВОборот.СписокВыбора.Очистить();
		СписокЗначенийВидаОпераций = ПолучитьСписокВыбораВидаОперации(); 
		Элементы.СпособВыпускаВОборот.СписокВыбора.ЗагрузитьЗначения(СписокЗначенийВидаОпераций);
		Объект.Товары.Очистить();
		УправлениеФормой();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуВыбораСерий()
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено
		Или ТекущиеДанные.СпособФормированияСерийногоНомера <> ПредопределенноеЗначение("Перечисление.СпособыФормированияСерийногоНомераСУЗИСМПТК.Самостоятельно") Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыОтбора = Новый Структура("ИдентификаторСтроки", ТекущиеДанные.ИдентификаторСтроки);
	НайденныеСтроки = Объект.СерийныеНомера.НайтиСтроки(ПараметрыОтбора);
	
	СерийныеНомера  = Новый Массив;
	Для Каждого Строка Из НайденныеСтроки Цикл
		СерийныеНомера.Добавить(Строка.СерийныйНомер);
	КонецЦикла;
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("СерийныеНомера",             СерийныеНомера);
	ПараметрыОткрытия.Вставить("Номенклатура",               ТекущиеДанные.Номенклатура);
	ПараметрыОткрытия.Вставить("Характеристика",             ТекущиеДанные.Характеристика);
	ПараметрыОткрытия.Вставить("ТребуемоеКоличествоНомеров", ТекущиеДанные.Количество);
	ПараметрыОткрытия.Вставить("ВидПродукции",               Объект.ВидПродукции);
	
	ОткрытьФорму("Документ.ЗаказКодовМаркировкиСУЗИСМПТК.Форма.ФормаВыбораСерий", 
		ПараметрыОткрытия, ЭтотОбъект,,,,
		Новый ОписаниеОповещения("ФормаВыбораСерийЗавершение", ЭтотОбъект),
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросОбУдаленииСвязанныхСерийныхНомеровЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
	Если Результат = КодВозвратаДиалога.Нет Тогда
		ТекущиеДанные.СпособФормированияСерийногоНомера = СпособФормированияСерийногоНомера;
	Иначе
		ОчиститьСерийныеНомераПоИдентификатору(ТекущиеДанные.ИдентификаторСтроки);
		ОбновитьСтатусУказанияСерийныхНомеров();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ФормаВыбораСерийЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	ОчиститьСерийныеНомераПоИдентификатору(ТекущиеДанные.ИдентификаторСтроки);
	
	Для Каждого Элемент Из Результат Цикл
		
		НоваяСтрокаСерии = Объект.СерийныеНомера.Добавить();
		НоваяСтрокаСерии.СерийныйНомер       = Элемент;
		НоваяСтрокаСерии.ИдентификаторСтроки = ТекущиеДанные.ИдентификаторСтроки;
		
	КонецЦикла;
	
	ОбновитьСтатусУказанияСерийныхНомеров();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСтатусУказанияСерийныхНомеров()
	
	Для Каждого СтрокаТовары Из Объект.Товары Цикл
		
		Если СтрокаТовары.СпособФормированияСерийногоНомера = ПредопределенноеЗначение("Перечисление.СпособыФормированияСерийногоНомераСУЗИСМПТК.Автоматически") Тогда
			СтрокаТовары.СтатусУказанияСерии = 2;
			Продолжить;
		КонецЕсли;
		
		ПараметрыОтбора = Новый Структура("ИдентификаторСтроки", СтрокаТовары.ИдентификаторСтроки);
		НайденныеСтроки = Объект.СерийныеНомера.НайтиСтроки(ПараметрыОтбора);
		Если НайденныеСтроки.Количество() = СтрокаТовары.Количество Тогда
			СтрокаТовары.СтатусУказанияСерии = 2;
		Иначе
			СтрокаТовары.СтатусУказанияСерии = 1;
		КонецЕсли;
		
	КонецЦикла;
	
	УстановитьДоступностьКомандыВводаСерий();
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьСерийныеНомераПоИдентификатору(ИдентификаторСтроки)
	
	ПараметрыОтбора = Новый Структура("ИдентификаторСтроки", ИдентификаторСтроки);
	НайденныеСтроки = Объект.СерийныеНомера.НайтиСтроки(ПараметрыОтбора);
	
	Для Каждого СтрокаДляУдаления Из НайденныеСтроки Цикл
		Объект.СерийныеНомера.Удалить(СтрокаДляУдаления);
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция СпособФормированияСерийногоНомераПоСтатистике(Номенклатура, Характеристика)
	
	Возврат РазборИОбработкаКодовМаркировкиИСМПТКСлужебный.СпособФормированияСерийногоНомераПоСтатистике(Номенклатура, Характеристика)
	
КонецФункции

#КонецОбласти

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	Если Не Объект.Товары.Количество() = 0 Тогда
		ТекстВопроса 	   = НСтр("ru = 'Очистить табличную часть ""Товары""?'");
		ОписаниеОповещения = Новый ОписаниеОповещения("ОрганизацияПриИзмененииПриЗавершении", ЭтотОбъект);
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте 
Процедура ОрганизацияПриИзмененииПриЗавершении(Результат, Параметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	Объект.Товары.Очистить();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСлужебныеРеквизитыПоНоменклатуре()
	
	ПараметрыЗаполненияРеквизитов = Новый Структура;
	ПараметрыЗаполненияРеквизитов.Вставить("ЗаполнитьПризнакХарактеристикиИспользуются", Новый Структура("Номенклатура", "ХарактеристикиИспользуются"));
											
	СобытияФормИСМПТКПереопределяемый.ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВКоллекции(Объект.Товары, ПараметрыЗаполненияРеквизитов);
		
КонецПроцедуры

&НаСервере
Функция ЗаполнитьGTINПоНоменклатуре(Номенклатура, Упаковка, Характеристика, ХарактеристикиИспользуются, ЭтоТабак = Ложь)
	
	Если (ХарактеристикиИспользуются 
			И (Не ЗначениеЗаполнено(Номенклатура)
				ИЛИ Не ЗначениеЗаполнено(Характеристика)))
		ИЛИ (Не ЗначениеЗаполнено(Номенклатура)
				И Не ХарактеристикиИспользуются) Тогда
			
		Возврат Неопределено;
		
	КонецЕсли;
	ДанныеШтрихкодов = РаботаСДокументамиИСМПТКПереопределяемый.ПодобратьGTINДляЗаказа(Номенклатура, Упаковка, Характеристика, ХарактеристикиИспользуются, ЭтоТабак);
	
	Возврат ДанныеШтрихкодов;
	
КонецФункции

&НаКлиенте
Процедура ЗаполнитьШтрихкодыВСтроке(Штрихкоды, ТекущиеДанные) Экспорт
	
	Если Штрихкоды = Неопределено
		Или Штрихкоды.Количество() = 0 Тогда
		
		Элементы.ТоварыGTIN.РежимВыбораИзСписка = Ложь;
		Элементы.ТоварыGTIN.СписокВыбора.Очистить();
		Возврат;
		
	ИначеЕсли Штрихкоды.Количество() = 1 Тогда
		
		Элементы.ТоварыGTIN.РежимВыбораИзСписка = Ложь;
		Элементы.ТоварыGTIN.СписокВыбора.Очистить();
		ТекущиеДанные.GTIN = Штрихкоды[0];
		
	ИначеЕсли Штрихкоды.Количество() > 1 Тогда
		
		Элементы.ТоварыGTIN.РежимВыбораИзСписка = Истина;
		Элементы.ТоварыGTIN.СписокВыбора.ЗагрузитьЗначения(Штрихкоды);
				
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоGTINНаСервере()
	
	// Необходимо по введенным пользователем кодам GTIN найти соответствия в РС Штрихкоды номенклатуры 
	// и дозаполнить данные в ТЧ по номенклатуре, характеристикам, упаковкам
	ТаблицаКодовGTIN = Новый ТаблицаЗначений();
	ТаблицаКодовGTIN.Колонки.Добавить("НомерСтрокиВЗаказе");
	ТаблицаКодовGTIN.Колонки.Добавить("Штрихкод");
	ТаблицаКодовGTIN.Колонки.Добавить("Номенклатура");
	ТаблицаКодовGTIN.Колонки.Добавить("Характеристика");
	ТаблицаКодовGTIN.Колонки.Добавить("Упаковка");

	Для Каждого СтрокаТЧ Из Объект.Товары Цикл
		
		Если ЗначениеЗаполнено(СтрокаТЧ.GTIN) Тогда
			НоваяСтрока = ТаблицаКодовGTIN.Добавить();
			НоваяСтрока.НомерСтрокиВЗаказе = СтрокаТЧ.НомерСтроки;
			// В ТЧ Товары хранится GTIN, для поиска соответствия в РС нужен EAN.
			Штрихкод = РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйКлиентСервер.EANПоGTIN(СтрокаТЧ.GTIN);
			НоваяСтрока.Штрихкод = Штрихкод;
		КонецЕсли;
		
	КонецЦикла;
	
	ДанныеПоНоменклатуре = РаботаСДокументамиИСМПТКПереопределяемый.ПолучитьДанныеОНоменклатуреПоGTIN(ТаблицаКодовGTIN); 
	
	Если ДанныеПоНоменклатуре.Количество() <> 0 Тогда
		
		Для Каждого Строка Из ДанныеПоНоменклатуре Цикл
			
			ЗаполняемаяСтрока = Объект.Товары[Строка.НомерСтрокиВЗаказе-1]; 
			ЗаполняемаяСтрока.Номенклатура   = Строка.Номенклатура;
			ЗаполняемаяСтрока.Характеристика = Строка.Характеристика;
			ЗаполняемаяСтрока.Упаковка 	  	 = Строка.Упаковка;
								
			//Дополнительно проверяем GTIN на 14 символов (если по ошибке ввели EAN)
			GTINСтарый = Объект.Товары[Строка.НомерСтрокиВЗаказе-1].GTIN; 
			ЗаполняемаяСтрока.GTIN = РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйКлиентСервер.GTINПоШтрихкодуEAN(GTINСтарый);
			
			Шаблон = ИнтеграцияИСМПТКВызовСервера.ПолучитьШаблонДляНоменклатурыЗаказа(Строка.Номенклатура);
			УпаковкаНеШтучная = ОбщегоНазначенияИСМПТКПереопределяемый.УпаковкаНеШтучная(Строка.Номенклатура, Строка.Упаковка);
			
			Если Шаблон = ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗИСМПТК.ТабачнаяПачка") Тогда //Возвращается по умолчанию для Табака
				Если УпаковкаНеШтучная Тогда
					//Перезаполняем шаблон на Блок, если штрихкод зарегистрирован на групповую упаковку
					Шаблон = ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗИСМПТК.БлокТабачныхПачек");
				КонецЕсли;
			КонецЕсли;					
			
			ЗаполняемаяСтрока.Шаблон = Шаблон;
			
		КонецЦикла;
		
	КонецЕсли;
		
	ЗаполнитьПризнакИспользованияХарактеристик();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоGTINЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.ОК Тогда
		ЗаполнитьПоGTINНаСервере();
		Модифицированность = Истина;
	КонецЕсли;
		
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьКнопокИзмененияСтатуса()
	
	НеОтправлен  = Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыОбработкиЗаказовНаЭмиссиюКодовМаркировкиИСМПТК.Черновик");
				
	КодыГотовы   = (Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыОбработкиЗаказовНаЭмиссиюКодовМаркировкиИСМПТК.КодыМаркировкиЭмитированы")
						ИЛИ Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыОбработкиЗаказовНаЭмиссиюКодовМаркировкиИСМПТК.КодыМаркировкиЭмитированыЧастично"));
	ЭтоОбувь 	 = Объект.ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИСМПТК.Обувная");
	КодыПолучены = Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыОбработкиЗаказовНаЭмиссиюКодовМаркировкиИСМПТК.Выполнен");
	
	ОбщегоНазначенияИСМПТККлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ФормаДокументЗаказКодовМаркировкиСУЗИСМПТКОтправить", "Видимость", НеОтправлен);
	ОбщегоНазначенияИСМПТККлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ФормаДокументЗаказКодовМаркировкиСУЗИСМПТКОбновить",  "Видимость", Не НеОтправлен);
	ОбщегоНазначенияИСМПТККлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ФормаДокументЗаказКодовМаркировкиСУЗИСМПТКПроверить", "Видимость", НеОтправлен);
	
	Если ЗначениеЗаполнено(Объект.ПричинаОтклонения) Тогда
		ОбщегоНазначенияИСМПТККлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ФормаДокументЗаказКодовМаркировкиСУЗИСМПТКПолучитьКМ", "Видимость", Ложь); //При ошибке Получать КМ нельзя
		ОбщегоНазначенияИСМПТККлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ФормаПорционноеПолучениеКодовМаркировки", "Видимость", Ложь);
	Иначе
		ОбщегоНазначенияИСМПТККлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ФормаДокументЗаказКодовМаркировкиСУЗИСМПТКПолучитьКМ", "Видимость", КодыГотовы);
		ОбщегоНазначенияИСМПТККлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ФормаПорционноеПолучениеКодовМаркировки", "Видимость",  ЭтоОбувь И КодыГотовы);
		
		ОбщегоНазначенияИСМПТККлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГруппаСохранениеВФайл", "Видимость", ЭтоОбувь И КодыПолучены);
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ТоварыGTINИзменениеТекстаРедактирования(Элемент, Текст, СтандартнаяОбработка)
	
	ОчиститьСписокВыбораGTIN();
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьСписокВыбораGTIN()
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	БазоваяЕИ = РозничноеВыбытиеИСМПТКПереопределяемый.ПолучитьЗначениеБазовойЕИНоменклатуры(ТекущиеДанные.Номенклатура);
	ЗаполненаБазоваяЕИ = (ТекущиеДанные.Упаковка = БазоваяЕИ);
	
	Если Не ЗначениеЗаполнено(ТекущиеДанные.Номенклатура) Тогда
		Элементы.ТоварыGTIN.СписокВыбора.Очистить();
		Элементы.ТоварыGTIN.РежимВыбораИзСписка = Ложь;
	Иначе
		ЭтоТабак = (ТекущиеДанные.Шаблон = ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗИСМПТК.ТабачнаяПачка")
					ИЛИ ТекущиеДанные.Шаблон = ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗИСМПТК.БлокТабачныхПачек"));
		Штрихкоды = ЗаполнитьGTINПоНоменклатуре(ТекущиеДанные.Номенклатура, ?(ЗаполненаБазоваяЕИ, "", ТекущиеДанные.Упаковка), ТекущиеДанные.Характеристика, Элементы.Товары.ТекущиеДанные.ХарактеристикиИспользуются, ЭтоТабак);
		ЗаполнитьШтрихкодыВСтроке(Штрихкоды, ТекущиеДанные);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьДоступностьКомандыВводаСерий()
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ФлагДоступности = ?(ТекущиеДанные.СпособФормированияСерийногоНомера = ПредопределенноеЗначение("Перечисление.СпособыФормированияСерийногоНомераСУЗИСМПТК.Самостоятельно"), Истина, Ложь);
	ОбщегоНазначенияИСМПТККлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ТоварыУказатьСерийныеНомера",  "Доступность", ФлагДоступности);
		
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьКМПовторно(Команда)
	
	МассивДокументов = Новый Массив;
	МассивДокументов.Добавить(Объект.Ссылка);
	
	ИнтеграцияИСМПТККлиент.ПовторноПолучитьКМПоЗаказуНаЭмиссию(МассивДокументов, Новый Структура("ЗапускатьФоновоеЗадание", Ложь));
	
КонецПроцедуры

&НаСервере
Функция ЕстьОшибкиПолученияКМ()
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	СтатусыЗаказовИСМПТ.ЗаказНаЭмиссию КАК ЗаказНаЭмиссию,
	|	СтатусыЗаказовИСМПТ.GTIN КАК GTIN
	|ИЗ
	|	РегистрСведений.СтатусыЗаказовИСМПТК КАК СтатусыЗаказовИСМПТ
	|ГДЕ
	|	СтатусыЗаказовИСМПТ.ЗаказНаЭмиссию = &Заказ
	|	И СтатусыЗаказовИСМПТ.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыПодзаказовКодовМаркировкиСУЗИСМПТК.Запрошен)";
	
	Запрос.УстановитьПараметр("Заказ", Объект.Ссылка);
	Результат = Запрос.Выполнить();
	ЕстьОшибки = НЕ Объект.Статус = Перечисления.СтатусыОбработкиЗаказовНаЭмиссиюКодовМаркировкиИСМПТК.Выполнен И Не Результат.Пустой();
	
	Возврат ЕстьОшибки;
	
КонецФункции

&НаКлиенте
Процедура ВыгрузитьКодыМаркировкиВФайлCSV(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	
	Если Не ВыбранныеФайлы = Неопределено Тогда
		
		НовыйТекстовыйДокумент = Новый ТекстовыйДокумент;
		СписокКодов = ИнтеграцияИСМПТКВызовСервера.ПолучитьКодыМаркировкиЗаказов(Объект.Ссылка);
		
		Если Не СписокКодов = Неопределено Тогда
			
			Для Каждого СтрокаТЧ Из СписокКодов Цикл
				НовыйТекстовыйДокумент.ДобавитьСтроку(РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйКлиентСервер.Base64ВШтрихкод(СтрокаТЧ.КодМаркировки));
			КонецЦикла;
			
			НовыйТекстовыйДокумент.Записать(ВыбранныеФайлы[0]);
			ИнтеграцияИСМПТКВызовСервера.ОтметитьВыгрузкуКодовМаркировкиЗаказа(СписокКодов);
			
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьКодыМаркировкиВФайлExcel(ВыбранныеФайлы, ДополнительныеПараметрым) Экспорт
	
	Если Не ВыбранныеФайлы = Неопределено Тогда
		
		ТабличныйДокумент = Новый ТабличныйДокумент;
		СписокКодов = ИнтеграцияИСМПТКВызовСервера.ПолучитьКодыМаркировкиЗаказов(Объект.Ссылка);
		Итератор = 1;
		
		Если Не СписокКодов = Неопределено Тогда
			
			Для Каждого СтрокаТЧ Из СписокКодов Цикл
				
				КодДляЗаписи = РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйКлиентСервер.Base64ВШтрихкод(СтрокаТЧ.КодМаркировки);
				ТабличныйДокумент.Область("R" + Итератор + "C1").Текст = КодДляЗаписи;
				Итератор = Итератор + 1;
				
			КонецЦикла;
			
			ТабличныйДокумент.Записать(ВыбранныеФайлы[0], ТипФайлаТабличногоДокумента.XLS97);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьКодыМаркировки(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.ОК Тогда
		
			ДиалогВыбораФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Сохранение);
			ДиалогВыбораФайла.Заголовок = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияЗаголовокВыборФайла();
			Если ДополнительныеПараметры.ФорматФайла = "CSV" Тогда
				ДиалогВыбораФайла.Фильтр = "CSV (Comma-Separated Values)(*.csv)|*.csv";
			Иначе
				ДиалогВыбораФайла.Фильтр = "Все поддерживаемые форматы файлов(*.xls;*.xlsx;)|*.xls;*.xlsx;|Книга Excel 97 (*.xls)|*.xls|Книга Excel 2007 (*.xlsx)|*.xlsx";
			КонецЕсли;
			ДиалогВыбораФайла.ИндексФильтра = 0;
			ДиалогВыбораФайла.ПредварительныйПросмотр = Ложь;
			ДиалогВыбораФайла.ПроверятьСуществованиеФайла = Истина;
			ДиалогВыбораФайла.МножественныйВыбор = Ложь;
			
			Если ДополнительныеПараметры.ФорматФайла = "CSV" Тогда
				Оповещение = Новый ОписаниеОповещения("ВыгрузитьКодыМаркировкиВФайлCSV",   ЭтотОбъект);
			Иначе
				Оповещение = Новый ОписаниеОповещения("ВыгрузитьКодыМаркировкиВФайлExcel", ЭтотОбъект);
			КонецЕсли;
			ДиалогВыбораФайла.Показать(Оповещение);
						
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПорционноеПолучениеКодовМаркировки(Команда)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ЗаказКодов", Объект.Ссылка);
	
	ОткрытьФорму("Документ.ЗаказКодовМаркировкиСУЗИСМПТК.Форма.ФормаПолученияКодовМаркировки", ПараметрыФормы);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПризнакИспользованияХарактеристик(НомерСтроки = Неопределено)
	
	СобытияФормИСМПТКПереопределяемый.ЗаполнитьПризнакИспользованияХарактеристик(Объект.Товары);
	
КонецПроцедуры

&НаСервере
Функция ПроверитьНаличиеМаркируемогоТовара(ВыбранноеЗначение) 
	
	Возврат РаботаСДокументамиИСМПТКПереопределяемый.ПроверитьНаличиеМаркируемогоТовара(ВыбранноеЗначение);
	
КонецФункции

&НаКлиенте
Процедура ЗаполнитьПоДокументуОснованию()
	
	ДанныеДокументаОснования = ПолучитьДанныеДокументаОснованияНаСервере();
	РеквизитыШапки			 = ДанныеДокументаОснования.Реквизиты;
	ДанныеПоТоварам			 = ДанныеДокументаОснования.Товары;
	
	ЗаполнитьЗначенияСвойств(Объект, РеквизитыШапки);
	
	Объект.Товары.Очистить();
	
	ВидыПродукцииПоЗаполнениюВДокументе = Новый Массив();
	
	Для Каждого СтрокаТовар Из ДанныеПоТоварам Цикл
		
		НоваяСтрока = Объект.Товары.Добавить();
		НоваяСтрока.Номенклатура 	   = СтрокаТовар.Номенклатура;
		НоваяСтрока.Характеристика 	   = СтрокаТовар.Характеристика;
		НоваяСтрока.Упаковка	   	   = СтрокаТовар.Упаковка;
		НоваяСтрока.КоличествоУпаковок = СтрокаТовар.КоличествоУпаковок;
		
		НоваяСтрока.Количество  	   = СтрокаТовар.Количество;
		
		НоваяСтрока.GTIN 			   = СтрокаТовар.GTIN;
		
		Шаблон = ИнтеграцияИСМПТКВызовСервера.ПолучитьШаблонДляНоменклатурыЗаказа(СтрокаТовар.Номенклатура);
		Если Шаблон = ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗИСМПТК.Обувь") Тогда
			Если ВидыПродукцииПоЗаполнениюВДокументе.Найти("Обувь") = Неопределено Тогда
				ВидыПродукцииПоЗаполнениюВДокументе.Добавить("Обувь");
			КонецЕсли;
			
		ИначеЕсли Шаблон = ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗИСМПТК.МолочнаяПродукция") Тогда 
			Если ВидыПродукцииПоЗаполнениюВДокументе.Найти("Молоко") = Неопределено Тогда
				ВидыПродукцииПоЗаполнениюВДокументе.Добавить("Молоко");
			КонецЕсли;
			
		ИначеЕсли Шаблон = ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗИСМПТК.ЛекарственныеПрепараты") Тогда 
			Если ВидыПродукцииПоЗаполнениюВДокументе.Найти("Фарма") = Неопределено Тогда
				ВидыПродукцииПоЗаполнениюВДокументе.Добавить("Фарма");
			КонецЕсли;
			
		ИначеЕсли Шаблон = ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗИСМПТК.ТабачнаяПачка") 
			Или Шаблон = ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗИСМПТК.БлокТабачныхПачек") Тогда
			Если ВидыПродукцииПоЗаполнениюВДокументе.Найти("Табак") = Неопределено Тогда
				ВидыПродукцииПоЗаполнениюВДокументе.Добавить("Табак");
			КонецЕсли;
		КонецЕсли;
		НоваяСтрока.Шаблон = Шаблон;
			
		НоваяСтрока.СпособФормированияСерийногоНомера = ПредопределенноеЗначение("Перечисление.СпособыФормированияСерийногоНомераСУЗИСМПТК.Автоматически");
		НоваяСтрока.СпособВводаВОборот 				  = Объект.СпособВводаВОборот;
		
	КонецЦикла;

	Если ВидыПродукцииПоЗаполнениюВДокументе.Количество() > 1 Тогда
		ТекстПредупреждения = НСтр( "ru = 'В таблице ""Товары"" присутствует номенклатура из разных товарных групп! Заказ можно оформлять только по одному виду продукции.'") 
							+ Символы.ПС 
							+ НСтр( "ru = 'Вид продукции заполнен значением по умолчанию.'");
		ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстПредупреждения);
		Объект.ВидПродукции = ИнтеграцияИСМПТКВызовСервера.ПолучитьЗначениеПоУмолчаниюДляВидаПродукцииЗаказа();
	КонецЕсли;

	ЗаполнитьПризнакИспользованияХарактеристик();
	
КонецПроцедуры

&НаСервере
Функция ПолучитьДанныеДокументаОснованияНаСервере() Экспорт
	
	Возврат РаботаСДокументамиИСМПТКПереопределяемый.ПолучитьДанныеДокументаОснованияЗаказаКМНаСервере(Объект.ДокументОснование);

КонецФункции

&НаКлиенте
Процедура ВыборДокументаОснованияЗавершение(ВыбранныйДокумент, ДополнительныеПараметры) Экспорт
	
	Если ВыбранныйДокумент <> "" И ТипЗнч(ВыбранныйДокумент) <> Тип("Неопределено") Тогда
		
		ИмяДокумента = ВыбранныйДокумент;
		
		СтруктураОтбора = Новый Структура();
		Если ЗначениеЗаполнено(Объект.Организация) Тогда
			СтруктураОтбора.Вставить("Организация", Объект.Организация);
		КонецЕсли;
		
		ДопПараметрыДляОтбора = Новый Структура("ИмяДокумента", ИмяДокумента);
		РаботаСДокументамиИСМПТККлиентПереопределяемый.ДополнитьСтруктуруОтбораПервичногоДокумента(СтруктураОтбора, Объект, ДопПараметрыДляОтбора);
						
		СтруктураПараметров = Новый Структура("Отбор, РежимВыбора, МножественныйВыбор", СтруктураОтбора, Истина, Ложь);
		
		ИмяФормыВыбора = "Документ." + ИмяДокумента + ".ФормаВыбора"; 
		ОткрытьФорму(ИмяФормыВыбора, СтруктураПараметров , ЭтаФорма,,,,, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьДокументОснованиеЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.ОК Тогда
		
		Объект.ДокументОснование = ДополнительныеПараметры.ВыбранноеЗначение;
		СформироватьПредставлениеДокументаОснования(ЭтаФорма);
		
		Если Не ЗначениеЗаполнено(Объект.OrderID)
			И Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыОбработкиЗаказовНаЭмиссиюКодовМаркировкиИСМПТК.Черновик") Тогда 
			//Предлагаем перезаполнение
			ТекстВопроса = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияПерезаполнитьДокументПоНовомуОснованию();
			ПерезаполнитьДокументПоОснованию = Новый ОписаниеОповещения("ПерезаполнитьДокументПоОснованию", ЭтаФорма);
			ПоказатьВопрос(ПерезаполнитьДокументПоОснованию, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
			
		КонецЕсли;
		
		Модифицированность = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПерезаполнитьДокументПоОснованию(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		ЗаполнитьПоДокументуОснованию();
		Модифицированность = Истина;
		УправлениеФормой();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьСписокВыбораВидаОперации() Экспорт
	
	СписокВидовОпераций = Новый Массив();
	
	//Доступны только для ТГ Обувь или Текстиль
	Если Объект.ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИСМПТК.Обувная") 
		ИЛИ Объект.ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИСМПТК.ЛегкаяПромышленность") 
		ИЛИ НЕ ЗначениеЗаполнено(Объект.ВидПродукции) Тогда //пустой документ
		СписокВидовОпераций.Добавить(ПредопределенноеЗначение("Перечисление.СпособыВводаВОборотСУЗИСМПТК.ПринятНаКомиссию"));
		СписокВидовОпераций.Добавить(ПредопределенноеЗначение("Перечисление.СпособыВводаВОборотСУЗИСМПТК.МаркировкаОстатков"));
	КонецЕсли;
	
	//Доступны только для ТГ Обувь
	Если Объект.ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИСМПТК.Обувная") 
		ИЛИ НЕ ЗначениеЗаполнено(Объект.ВидПродукции) Тогда //пустой документ
		СписокВидовОпераций.Добавить(ПредопределенноеЗначение("Перечисление.СпособыВводаВОборотСУЗИСМПТК.Перемаркировка"));
	КонецЕсли;
	
	//Общие для всех ТГ
	СписокВидовОпераций.Добавить(ПредопределенноеЗначение("Перечисление.СпособыВводаВОборотСУЗИСМПТК.Производство"));
	СписокВидовОпераций.Добавить(ПредопределенноеЗначение("Перечисление.СпособыВводаВОборотСУЗИСМПТК.Импорт"));
			
	Возврат СписокВидовОпераций;
	
КонецФункции

&НаСервере
Процедура СформироватьСписокВыбораШаблона()
	
	Если Объект.ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИСМПТК.Табачная") Тогда
		Элементы.ТоварыШаблон.РежимВыбораИзСписка = Истина;
		Элементы.ТоварыШаблон.СписокВыбора.Очистить();
		СписокЗначенийШаблона = Новый Массив();
		СписокЗначенийШаблона.Добавить(ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗИСМПТК.ТабачнаяПачка"));
		СписокЗначенийШаблона.Добавить(ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗИСМПТК.БлокТабачныхПачек"));
		Элементы.ТоварыШаблон.СписокВыбора.ЗагрузитьЗначения(СписокЗначенийШаблона);
	Иначе
		Элементы.ТоварыШаблон.РежимВыбораИзСписка = Ложь;
	КонецЕсли;

КонецПроцедуры

&НаСервере
Функция ПроверитьВозможностьИзмененияПоРолям() 
	Возврат ПравоДоступа("Изменение", Метаданные.Документы.ЗаказКодовМаркировкиСУЗИСМПТК);
КонецФункции

#КонецОбласти

#Область НанесениеКМ

&НаСервере
Функция ПроверитьИЗаполнитьОтчетОНанесении();
	
	Запрос = Новый Запрос();
	Запрос.Текст =  "ВЫБРАТЬ
	|	НанесениеКодовМаркировкиСУЗИСМПТК.Ссылка КАК Ссылка,
	|	НанесениеКодовМаркировкиСУЗИСМПТК.Представление КАК Представление
	|ИЗ
	|	Документ.НанесениеКодовМаркировкиСУЗИСМПТК КАК НанесениеКодовМаркировкиСУЗИСМПТК
	|ГДЕ
	|	НанесениеКодовМаркировкиСУЗИСМПТК.ДокументОснование = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
	Выборка = Запрос.Выполнить().Выбрать();
	СписокДокументов = Новый СписокЗначений;	
	Пока Выборка.Следующий() Цикл
		Если Выборка.Количество() = 1 Тогда
			Возврат Выборка.Ссылка;
		Иначе
			СписокДокументов.Добавить(Выборка.Ссылка, Выборка.Представление);			
		КонецЕсли;
	КонецЦикла;
	
	Если СписокДокументов.Количество() = 0 Тогда
		Возврат ПредопределенноеЗначение("Документ.НанесениеКодовМаркировкиСУЗИСМПТК.ПустаяСсылка");
	Иначе
		Возврат СписокДокументов;
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция ПолучитьПредставлениеОтчетаОНанесении()
	
	Возврат Метаданные.Документы.НанесениеКодовМаркировкиСУЗИСМПТК.Представление();
	
КонецФункции

&НаКлиенте
Процедура ОформитьНанесениеКМ(Команда)
	
	ТекстВопроса = "";
	Если НЕ ЗначениеЗаполнено(ЭтаФорма.Параметры.Ключ) ИЛИ ЭтаФорма.Модифицированность Тогда
		ТекстВопроса = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияНельзяВводитьНовыйДокументБезЗаписиОснованияСПараметром()
					 + Символы.ПС 
					 + РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияВопросЗаписатьДокумент();
		ТекстВопроса = СтрЗаменить(ТекстВопроса, "%НаименованиеДокумента%", ПолучитьПредставлениеОтчетаОНанесении());
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекстВопроса) Тогда
		
		ДополнительныеПараметры = Новый Структура("Форма", ЭтаФорма);
		Режим = РежимДиалогаВопрос.ДаНет;
		Оповещение   = Новый ОписаниеОповещения("ПослеЗакрытияВопросаЗаписьПриСозданииНанесенияКМ", ЭтотОбъект, ДополнительныеПараметры);
		ПоказатьВопрос(Оповещение, ТекстВопроса, Режим, 0);
		
	Иначе
		
		ДанныеИзПула = ПроверитьНаличиеКодовВПуле();
		ЕстьКодыТребующиеНанесения = ДанныеИзПула.КодыПолучены;
		КоличествоКодовВПуле 	   = ДанныеИзПула.КоличествоВПуле;
		
		Если ЕстьКодыТребующиеНанесения Тогда
			Если КоличествоКодовВПуле <= 30000 Тогда //ограничение, устанавливаемое АПИ 
				ПараметрыФормы = Новый Структура;
				ПараметрыФормы.Вставить("Основание", Объект.Ссылка);
				ОткрытьФорму("Документ.НанесениеКодовМаркировкиСУЗИСМПТК.ФормаОбъекта", ПараметрыФормы);
			Иначе
				ПараметрыФормы = СформироватьГруппуНанесений();
				ИнтеграцияИСМПТККлиент.ОповеститьФормы(РаботаСДокументамиИСМПТККлиентСервер.ИмяСобытияЗаписьНанесениеКодовМаркировки(), Объект.Ссылка);
				ОткрытьФорму("Документ.НанесениеКодовМаркировкиСУЗИСМПТК.Форма.ФормаСписка", ПараметрыФормы,, Истина);
			КонецЕсли;
		Иначе
			ТекстСообщения = НСтр("ru='В пуле кодов не найдены коды, выпущенные в рамках этого Заказа и требующие нанесения!'");
			ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения, , , "Форма.Объект");
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

&НаСервере
Функция ПроверитьНаличиеКодовВПуле() 
	
	 Возврат РаботаСДокументамиИСМПТК.ПроверитьНаличиеКодовВПуле(Объект.Ссылка);
	
КонецФункции

&НаСервере
Функция СформироватьГруппуНанесений() 
	
	  Возврат РаботаСДокументамиИСМПТК.СформироватьГруппуНанесений(Объект.Ссылка);
	  
КонецФункции
 
&НаКлиенте
Процедура ПослеЗакрытияВопросаЗаписьПриСозданииНанесенияКМ(Результат, Параметры) Экспорт

	Если Результат = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	Форма = Параметры.Форма;
	
	Попытка
		
		ЕстьКодыТребующиеНанесения = ПроверитьНаличиеКодовВПуле().КодыПолучены;
		
		Если ЕстьКодыТребующиеНанесения Тогда
			//Выполняем запись документа
			ПараметрыЗаписи = Новый Структура("РежимЗаписи", РежимЗаписиДокумента.Запись);
			
			Если Форма.Записать(ПараметрыЗаписи) Тогда
				ПараметрыФормы = Новый Структура;
				ПараметрыФормы.Вставить("Основание", Объект.Ссылка);
				ОткрытьФорму("Документ.НанесениеКодовМаркировкиСУЗИСМПТК.ФормаОбъекта", ПараметрыФормы);
			КонецЕсли;
		Иначе
			ТекстСообщения = НСтр("ru='В пуле кодов не найдены коды, выпущенные в рамках этого Заказа и требующие нанесения!'");
			ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения, , , "Форма.Объект");
		КонецЕсли;
		
	Исключение
		
		ТекстСообщения = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияНеУдалосьЗаписатьДокументМаркировки();
			ТекстСообщения = ТекстСообщения
			 			   + Символы.ПС
						   + КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения, , , "Форма.Объект");
		
	КонецПопытки;

КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьПроверкуТоваров()
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
	Если Не ТекущиеДанные = Неопределено
		И ЗначениеЗаполнено(Объект.ВидПродукции) И ЗначениеЗаполнено(ТекущиеДанные.Номенклатура) Тогда
		
		ВидНоменклатуры = РозничноеВыбытиеИСМПТККлиент.ПолучитьВидПродукцииПоНоменклатуре(ТекущиеДанные.Номенклатура);
		Если Объект.ВидПродукции <> ВидНоменклатуры Тогда
			
			ТекстСообщения = НСтр("ru='Особенности учета номенклатуры %1 в строке %2 не соответствуют указанному в документе виду продукции!'");
			ТекстСообщения = ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(ТекстСообщения, ТекущиеДанные.Номенклатура, ТекущиеДанные.НомерСтроки);
			ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения, , , "Форма.Объект");
		
		КонецЕсли;
		
	КонецЕсли;
		
КонецПроцедуры

#КонецОбласти

#Область ПодключаемыеКоманды

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	
	ОбщегоНазначенияИСМПТККлиентПереопределяемый.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
	
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат) Экспорт
	
	ОбщегоНазначенияИСМПТКПереопределяемый.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	
	ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.ОбновитьКоманды(ЭтотОбъект, Объект);
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти