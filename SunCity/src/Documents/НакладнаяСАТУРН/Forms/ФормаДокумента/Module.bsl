#Область ОписаниеПеременных

&НаКлиенте
Перем КэшированныеЗначения; //используется механизмом обработки изменения реквизитов ТЧ

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьУсловноеОформление();
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	Элементы.ДокументОснование.ДоступныеТипы = Метаданные.ОпределяемыеТипы.ОснованиеНакладнаяСАТУРН.Тип;
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыИС.ПриСозданииНаСервере(ЭтотОбъект);
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ВерсионированиеОбъектов") Тогда
		МодульВерсионированиеОбъектов = ОбщегоНазначения.ОбщийМодуль("ВерсионированиеОбъектов");
		МодульВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	СобытияФормИСПереопределяемый.УстановитьСвязиПараметровВыбораСНоменклатурой(ЭтотОбъект,   "ТоварыХарактеристика");
	СобытияФормИСПереопределяемый.УстановитьСвязиПараметровВыбораСНоменклатурой(ЭтотОбъект,   "ТоварыУпаковка");
	СобытияФормИСПереопределяемый.УстановитьСвязиПараметровВыбораСНоменклатурой(ЭтотОбъект,   "ТоварыСерия");
	СобытияФормИСПереопределяемый.УстановитьСвязиПараметровВыбораСХарактеристикой(ЭтотОбъект, "ТоварыСерия");
	
	СобытияФормСАТУРН.УстановитьСвязиПараметровВыбораСПАТ(ЭтотОбъект, "ТоварыПартия");
	СобытияФормСАТУРН.УстановитьСвязиПараметровВыбораСОрганизациейМестомХранения(ЭтотОбъект, "ГрузоотправительМестоХранения", "Объект.ГрузоотправительОрганизацияСАТУРН", "");
	СобытияФормСАТУРН.УстановитьСвязиПараметровВыбораСОрганизациейМестомХранения(ЭтотОбъект, "ГрузополучательМестоХранения", "Объект.ГрузополучательОрганизацияСАТУРН", "");
	
	Если Объект.Ссылка.Пустая() Тогда
		ПриСозданииЧтенииНаСервере();
		ИнтеграцияИСПереопределяемый.ЗаполнитьСтатусыУказанияСерий(Объект, ПараметрыУказанияСерий);
	КонецЕсли;
	НастроитьЗависимыеЭлементыФормы(ЭтотОбъект);
	
	ОбщегоНазначенияСобытияФормИСПереопределяемый.ПриСозданииНаСервере(ЭтотОбъект, Отказ, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	ПриСозданииЧтенииНаСервере(Ложь);
	
	ОбщегоНазначенияСобытияФормИСПереопределяемый.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыИС.ПриЧтенииНаСервере(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаЗаписиНового(НовыйОбъект, Источник, СтандартнаяОбработка)
	
	Если НовыйОбъект = Элементы.ДокументОснование.ДоступныеТипы.ПривестиЗначение(НовыйОбъект) Тогда
		Объект.ДокументОснование = НовыйОбъект;
		Модифицированность = Истина;
		Записать();
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПриВыбореНоменклатуры", ЭтотОбъект);
	СобытияФормСАТУРНКлиентПереопределяемый.ОбработкаВыбораНоменклатуры(ОписаниеОповещения, НовыйОбъект, Источник);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	ИмяПодсистемы = ИнтеграцияСАТУРНКлиентСервер.ИмяПодсистемы();
	
	Если ИмяСобытия = ИнтеграцияИСКлиентСервер.ИмяСобытияИзмененоСостояние(ИмяПодсистемы)
		И Параметр.Ссылка = Объект.Ссылка Тогда
		
		Если Параметр.Свойство("ОбъектИзменен")
			И Параметр.ОбъектИзменен Тогда
			ОбновитьПредставленияНаФорме(Истина);
		Иначе
			ОбновитьПредставленияНаФорме(Ложь);
		КонецЕсли;
		
	КонецЕсли;
	
	Если ИмяСобытия = ИнтеграцияИСКлиентСервер.ИмяСобытияВыполненОбмен(ИмяПодсистемы)
	 И (Параметр = Неопределено
		Или (ТипЗнч(Параметр) = Тип("Структура") И Параметр.ОбновлятьСтатусВФормахДокументов)) Тогда
		
		ОбновитьПредставленияНаФорме(Истина);
		
	КонецЕсли;
	
	Если ИмяСобытия = "Закрытие_ПерейтиКСтрокеОшибки" И Источник = "Справочник.САТУРНПрисоединенныеФайлы.Форма.ФормаОшибки" Тогда
		ТекущийЭлемент = Элементы.Товары;
		Элементы.Товары.ТекущаяСтрока = Параметр;
	КонецЕсли;
	
	Если (ИмяСобытия = "Запись_КлассификаторОрганизацийСАТУРН"
		И (Параметр = Объект.ГрузоотправительОрганизацияСАТУРН Или Параметр = Объект.ГрузополучательОрганизацияСАТУРН)
		Или ИмяСобытия = "Запись_МестаХраненияСАТУРН"
			И (Параметр = Объект.ГрузоотправительМестоХранения Или Параметр = Объект.ГрузополучательМестоХранения)) Тогда
		
		ЗаполнитьГиперссылкиРеквизитов();
		
	КонецЕсли;
	
	ОбщегоНазначенияСобытияФормИСКлиентПереопределяемый.ОбработкаОповещения(ЭтотОбъект, ИмяСобытия, Параметр, Источник);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ИнтеграцияСАТУРНКлиентСервер.ЭтоВыборПартииСАТУРН(ВыбранноеЗначение) Тогда
		Отбор = Новый Структура("Партия", ВыбранноеЗначение.Партия);
		НайденныеСтроки = Объект.Товары.НайтиСтроки(Отбор);
		Если НайденныеСтроки.Количество() = 0 Тогда
			НоваяСтрока = Объект.Товары.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыбранноеЗначение);
			Если ЗначениеЗаполнено(НоваяСтрока.Номенклатура) Тогда
				ПараметрыЗаполнения = ИнтеграцияСАТУРНКлиентСервер.ПараметрыЗаполненияТабличнойЧасти();
				Если ВыбранноеЗначение.КоличествоВУпаковкеСАТУРН <> 0 Тогда
					ПараметрыЗаполнения.ПересчитатьКоличествоВУпаковкеСАТУРН = Ложь;
				КонецЕсли;
				ПараметрыЗаполнения.ПересчитатьКоличествоУпаковокПоОстаткуСАТУРН = Истина;
				ПараметрыЗаполнения.ПересчитатьКоличествоСАТУРН = Истина;
				НоменклатураПриИзменении(НоваяСтрока, ПараметрыЗаполнения);
				
				Если ЗначениеЗаполнено(ВыбранноеЗначение.ТипИзмеряемойВеличины)
					И ВыбранноеЗначение.ТипИзмеряемойВеличины <> НоваяСтрока.ТипИзмеряемойВеличиныСАТУРН Тогда
					НоваяСтрока.ТипИзмеряемойВеличиныСАТУРН = ВыбранноеЗначение.ТипИзмеряемойВеличины;
					ПриИзмененииТипаИзмеряемойВеличины(НоваяСтрока, ПараметрыЗаполнения);
				КонецЕсли;
			Иначе
				НоваяСтрока.ТипИзмеряемойВеличиныСАТУРН = ВыбранноеЗначение.ТипИзмеряемойВеличины;
			КонецЕсли;
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	СобытияФормСАТУРНКлиентПереопределяемый.ОбработкаВыбораСерии(
		ЭтотОбъект, ВыбранноеЗначение, ИсточникВыбора, ПараметрыУказанияСерий);
	
	СобытияФормСАТУРНКлиентПереопределяемый.ОбработкаВыбора(ЭтотОбъект, ВыбранноеЗначение, ИсточникВыбора);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаНавигационнойСсылки(НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СобытияФормСАТУРНКлиент.ОбработкаНавигационнойСсылкиСАТУРН(ЭтотОбъект, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка);
	Если Не СтандартнаяОбработка Тогда
		Возврат;
	КонецЕсли;
	
	СобытияФормИСКлиент.ОбработкаНавигационнойСсылки(ЭтотОбъект, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	ОбщегоНазначенияСобытияФормИСКлиентПереопределяемый.ПередЗаписью(ЭтотОбъект, Отказ, ПараметрыЗаписи);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	ИнтеграцияИСКлиент.ПослеЗаписиВФормеОбъектаДокументаИС(
		ЭтотОбъект,
		Объект,
		ИнтеграцияСАТУРНКлиентСервер.ИмяПодсистемы(),
		ПараметрыЗаписи);
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.ПодключаемыеКоманды") Тогда
		МодульПодключаемыеКомандыКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ПодключаемыеКомандыКлиент");
		МодульПодключаемыеКомандыКлиент.ПослеЗаписи(ЭтотОбъект, Объект, ПараметрыЗаписи);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	Подключаемый_ОбновитьКоманды();
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	НовыйДокумент = Не ЗначениеЗаполнено(Объект.Ссылка);
	
	ИнтеграцияСАТУРН.ЗаполнитьСопоставленныеТовары(Объект.Товары, НоменклатураДляВыбора, НовыйДокумент);
	ИнтеграцияИСПереопределяемый.ЗаполнитьСлужебныеРеквизитыВКоллекции(ЭтотОбъект, Объект.Товары);
	ИнтеграцияСАТУРН.ЗаполнитьСопоставленнуюПродукциюВДокументе(Объект.Товары, НовыйДокумент);
	
	ОбновитьПредставленияНаФорме();
	НастроитьЭлементыФормы(ЭтотОбъект);
	НастроитьЗависимыеЭлементыФормы(ЭтотОбъект);
	
	ИнтеграцияИС.ПослеЗаписиНаСервереВФормеОбъектаДокументаИС(
		ЭтотОбъект,
		ТекущийОбъект,
		ИнтеграцияСАТУРНКлиентСервер.ИмяПодсистемы(),
		ПараметрыЗаписи);
	ОбщегоНазначенияСобытияФормИСПереопределяемый.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура СтатусПредставлениеОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ОчиститьСообщения();
	
	Если (Не ЗначениеЗаполнено(Объект.Ссылка))
		Или (ДействияНавигационнойСсылкиБезПроверкиПроведения().Найти(НавигационнаяСсылкаФорматированнойСтроки) = Неопределено
			И Не Объект.Проведен) Тогда
		ОписаниеОповещенияВопрос = Новый ОписаниеОповещения("СтатусПредставлениеОбработкаНавигационнойСсылкиЗавершение",
		                                                    ЭтотОбъект,
		                                                    Новый Структура("НавигационнаяСсылкаФорматированнойСтроки", НавигационнаяСсылкаФорматированнойСтроки));
		ТекстВопроса = НСтр("ru = '""Накладная"" не проведена. Провести?'");
		ПоказатьВопрос(ОписаниеОповещенияВопрос, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		
	ИначеЕсли Модифицированность Тогда
		
		ОписаниеОповещенияВопрос = Новый ОписаниеОповещения("СтатусПредставлениеОбработкаНавигационнойСсылкиЗавершение",
		                                                    ЭтотОбъект,
		                                                    Новый Структура("НавигационнаяСсылкаФорматированнойСтроки", НавигационнаяСсылкаФорматированнойСтроки));
		
		Если ДействияНавигационнойСсылкиБезПроверкиПроведения().Найти(НавигационнаяСсылкаФорматированнойСтроки) = Неопределено Тогда
			ТекстВопроса = НСтр("ru = '""Накладная"" был изменен. Провести?'");
		Иначе
			ТекстВопроса = НСтр("ru = '""Накладная"" был изменен. Записать?'");
		КонецЕсли;
		
		ПоказатьВопрос(ОписаниеОповещенияВопрос, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		
	Иначе
		
		Отказ = Ложь;
		
		Если НавигационнаяСсылкаФорматированнойСтроки = "ПодтвердитьНакладную"
			Или НавигационнаяСсылкаФорматированнойСтроки = "ПодтвердитьВозврат"
			Или НавигационнаяСсылкаФорматированнойСтроки = "ПодтвердитьУтерюПриВозврате" Тогда
			Отказ = Не ПроверитьЗаполнение();
		ИначеЕсли (НавигационнаяСсылкаФорматированнойСтроки = "ВернутьНакладную"
				Или НавигационнаяСсылкаФорматированнойСтроки = "ПодтвердитьУтерюГруза")
			И Не ЗначениеЗаполнено(Объект.ДатаПолучения) Тогда
			ТекстСообщения = Нстр("ru = 'Не указана дата получения'");
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения,,, "Объект.ДатаПолучения", Отказ);
		КонецЕсли;
		
		Если Не Отказ Тогда
			ОбработатьНажатиеНавигационнойСсылки(НавигационнаяСсылкаФорматированнойСтроки);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДокументОснованиеПриИзменении(Элемент)
	
	НастроитьЗависимыеЭлементыФормы(ЭтотОбъект, "ДокументОснование");
	
КонецПроцедуры

&НаКлиенте
Процедура ГрузоотправительОрганизацияСАТУРННачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("РежимВыбора",   Истина);
	ПараметрыОткрытия.Вставить("Соответствует", "Организации");
	
	Если ЗначениеЗаполнено(ГрузоотправительИзОснованияДляОтбораОрганизацииСАТУРН)
		И Не ЗначениеЗаполнено(Объект.ГрузоотправительОрганизацияСАТУРН) Тогда
		
		ПараметрыОткрытия.Вставить("Контрагент", ГрузоотправительИзОснованияДляОтбораОрганизацииСАТУРН);
		
	КонецЕсли;
	
	ОткрытьФорму("Справочник.КлассификаторОрганизацийСАТУРН.ФормаСписка",
		ПараметрыОткрытия,
		Элемент,,,,,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ГрузополучательОрганизацияСАТУРННачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("РежимВыбора", Истина);
	
	Если ЗначениеЗаполнено(ГрузополучательИзОснованияДляОтбораОрганизацииСАТУРН)
		И Не ЗначениеЗаполнено(Объект.ГрузополучательОрганизацияСАТУРН) Тогда
		
		ПараметрыОткрытия.Вставить("Контрагент", ГрузополучательИзОснованияДляОтбораОрганизацииСАТУРН);
		
	Иначе
		
		ПараметрыОткрытия.Вставить("Соответствует", "Контрагенту");
		
	КонецЕсли;
	ОткрытьФорму("Справочник.КлассификаторОрганизацийСАТУРН.ФормаСписка",
		ПараметрыОткрытия,
		Элемент,,,,,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
КонецПроцедуры

&НаКлиенте
Процедура ГрузоотправительОрганизацияСАТУРНПриИзменении(Элемент)
	
	ЗаполнитьГиперссылкиРеквизитов("Грузоотправитель");
	ОбновитьПодсказкиВвода(ЭтотОбъект);
	ГрузоотправительСопоставленСОрганизацией = ИнтеграцияСАТУРНВызовСервера.ОрганизацияСАТУРНСопоставленаСОрганизациейИБ(
		Объект.ГрузоотправительОрганизацияСАТУРН).Сопоставлено;
	
	Если Не ЗначениеЗаполнено(Объект.ГрузополучательОрганизацияСАТУРН) Тогда
		ГрузоотправительСопоставленСОрганизацией = ГрузоотправительСопоставленСОрганизацией;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ГрузоотправительМестоХраненияПриИзменении(Элемент)
	ЗаполнитьГиперссылкиРеквизитов("Грузоотправитель");
КонецПроцедуры

&НаКлиенте
Процедура ГрузополучательМестоХраненияПриИзменении(Элемент)
	ЗаполнитьГиперссылкиРеквизитов("Грузополучатель");
КонецПроцедуры

&НаКлиенте
Процедура ГрузополучательОрганизацияСАТУРНПриИзменении(Элемент)
	
	ГрузополучательОрганизацияСАТУРНПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ОперацияПриИзменении(Элемент)
	
	НастроитьЗависимыеЭлементыФормы(ЭтотОбъект, "Операция");
	
КонецПроцедуры

&НаКлиенте
Процедура ТранспортноеСредствоПриИзменении(Элемент)
	
	РеквизитыТранспортногоСредства = ЗначенияРеквизитовТранспортногоСредства(Объект.ТранспортноеСредство);
	Объект.НомерТранспортногоСредства = РеквизитыТранспортногоСредства.НомерТранспортногоСредства;
	
КонецПроцедуры

&НаКлиенте
Процедура ДокументОснованиеОчистка(Элемент, СтандартнаяОбработка)
	
	Объект.ДокументОснование = Неопределено;
	ЗаполнитьОтборыПоОснованию(Неопределено, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ГосударственныйКонтрактПриИзменении(Элемент)
	
	СоответствиеРеквизитовГосКонтракта = ДанныеГосударственногоКонтракта(Объект.ГосударственныйКонтракт);
	
	ДанныеГосКонтракта = СоответствиеРеквизитовГосКонтракта[Объект.ГосударственныйКонтракт];
	Если ДанныеГосКонтракта = Неопределено Тогда
		Объект.ИдентификаторГосКонтракта  = "";
	Иначе
		Объект.ИдентификаторГосКонтракта = СтрШаблон(
			"%1 от %2",
			ДанныеГосКонтракта.НомерГосКонтракта,
			ДанныеГосКонтракта.ДатаГосКонтракта);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ГосударственныйКонтрактОчистка(Элемент, СтандартнаяОбработка)
	Объект.ИдентификаторГосКонтракта  = "";
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыТовары

&НаКлиенте
Процедура ТоварыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если РедактированиеФормыНедоступно
		И Не (РедактированиеТоваров И ПоляРедактированияТоваровВПути(Элементы).Найти(Поле.Имя) <> Неопределено)
		Или Не ПравоИзменения Тогда
		СобытияФормСАТУРНКлиент.ВыборЭлементаТабличнойЧастиОткрытьФормуЭлемента(ЭтотОбъект, Элемент, Поле);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПередУдалением(Элемент, Отказ)
	
	Если РедактированиеФормыНедоступно Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыНоменклатураНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СобытияФормИСКлиентПереопределяемый.ПриНачалеВыбораНоменклатуры(
		Элемент,
		ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.ПодконтрольнаяПродукцияСАТУРН"),
		СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыНоменклатураПриИзменении(Элемент)
	
	НоменклатураПриИзменении();
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыНоменклатураСоздание(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
	ПараметрыНоменклатуры = ИнтеграцияСАТУРНВызовСервера.ПараметрыСозданияНоменклатуры(
		ТекущиеДанные.ПАТ);
	
	СобытияФормСАТУРНКлиентПереопределяемый.ОткрытьФормуСозданияНоменклатуры(ЭтотОбъект, ПараметрыНоменклатуры);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыХарактеристикаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	СобытияФормСАТУРНКлиентПереопределяемый.ПриНачалеВыбораХарактеристики(
		Элемент, ТекущиеДанные, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыХарактеристикаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	СобытияФормСАТУРНКлиентПереопределяемый.ПриИзмененииХарактеристики(ЭтотОбъект, ТекущиеДанные, КэшированныеЗначения);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыКоличествоУпаковокПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
	ПараметрыЗаполнения = ПараметрыЗаполненияСтроки();
	
	СобытияФормСАТУРНКлиентПереопределяемый.ПриИзмененииКоличестваУпаковок(
		ЭтотОбъект, ТекущиеДанные, КэшированныеЗначения, ПараметрыЗаполнения);
		
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСерияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ИнтеграцияИСКлиент.ОткрытьПодборСерий(ЭтотОбъект,, Элемент.ТекстРедактирования, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСерияПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	СобытияФормСАТУРНКлиентПереопределяемый.ПриИзмененииСерии(
		ЭтотОбъект, ТекущиеДанные, КэшированныеЗначения, ПараметрыУказанияСерий);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыУпаковкаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	ПараметрыЗаполнения = ПараметрыЗаполненияСтроки();
	СобытияФормСАТУРНКлиентПереопределяемый.ПриИзмененииУпаковки(
		ЭтотОбъект, ТекущиеДанные, КэшированныеЗначения, ПараметрыЗаполнения);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыТипИзмеряемойВеличиныСАТУРННачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
	Данные = Новый Структура;
	Данные.Вставить("Партия",       ТекущиеДанные.Партия);
	Данные.Вставить("Номенклатура", ТекущиеДанные.Номенклатура);
	Данные.Вставить("Упаковка",     ТекущиеДанные.Упаковка);
	
	ДанныеВыбора = Новый СписокЗначений;
	ДанныеВыбора.ЗагрузитьЗначения(
		ИнтеграцияСАТУРНКлиент.ДоступныеТипыИзмеряемыхВеличин(Данные, КэшированныеЗначения));
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыТипИзмеряемойВеличиныСАТУРНПриИзменении(Элемент)
	
	ПриИзмененииТипаИзмеряемойВеличины();
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПартияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыФормы = ИнтеграцияСАТУРНКлиент.ПараметрыФормыПодбораПартий();
	ПараметрыФормы.ЗакрыватьПриВыборе = Истина;
	ЗаполнитьОтборПартийПоШапкеДокумента(ПараметрыФормы);
	ЗаполнитьОтборПартийПоСтрокеДокумента(ПараметрыФормы);
	
	ОткрытьФорму("РегистрНакопления.ОстаткиПартийСАТУРН.Форма.ФормаОстатков",
		ПараметрыФормы, Элемент,,,,, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПартияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ТипЗнч(ВыбранноеЗначение) <> Тип("СправочникСсылка.ПартииСАТУРН") Тогда 
		СтандартнаяОбработка = Ложь;
	КонецЕсли;
	
	Если ИнтеграцияСАТУРНКлиентСервер.ЭтоВыборПартииСАТУРН(ВыбранноеЗначение) Тогда
		
		ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
		
		Если ВыбранноеЗначение.КоличествоСАТУРН < ТекущиеДанные.Количество Тогда
			ОписаниеОповещения = Новый ОписаниеОповещения("ОбработатьВыборПартии", СобытияФормСАТУРНКлиент, ТекущиеДанные);
			СобытияФормСАТУРНКлиент.ОбработатьВыборПартииСНедостаткомКоличества(
				Объект.Товары, ВыбранноеЗначение, ТекущиеДанные, ОписаниеОповещения);
		Иначе
			СобытияФормСАТУРНКлиент.ОбработатьВыборПартии(ВыбранноеЗначение, ТекущиеДанные);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриАктивизацииЯчейки(Элемент)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Элемент.ТекущийЭлемент = Элементы.ТоварыПАТ Тогда
		
		Элементы.ТоварыПАТ.СписокВыбора.ЗагрузитьЗначения(ТекущиеДанные.НоменклатураДляВыбора.ВыгрузитьЗначения());
		
	КонецЕсли;
	
	Если Элемент.ТекущийЭлемент = Элементы.ТоварыНоменклатура Тогда
		
		ЗаполнитьСпискиВыбораНоменклатуры(ТекущиеДанные);
		
	КонецЕсли;
	
	Если Элемент.ТекущийЭлемент = Элементы.ТоварыХарактеристика Тогда
		
		ЗаполнитьСпискиВыбораХарактеристика(ТекущиеДанные);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПАТПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	ТекущаяСтрока.Партия = Неопределено;
	ТекущаяСтрока.ВыделеннаяПартия = Неопределено;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ПровестиДокумент(Команда)
	
	ОценкаПроизводительностиКлиент.ЗамерВремени("Документ.НакладнаяСАТУРН.Форма.ФормаДокумента.Провести",,Истина);
	
	ОчиститьСообщения();
	ПараметрыЗаписи = Новый Структура("РежимЗаписи", РежимЗаписиДокумента.Проведение);
	Записать(ПараметрыЗаписи);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьДокумент(Команда)
	
	ОценкаПроизводительностиКлиент.ЗамерВремени("Документ.НакладнаяСАТУРН.Форма.ФормаДокумента.Записать",,Истина);
	
	ОчиститьСообщения();
	Записать();
	
КонецПроцедуры

&НаКлиенте
Процедура ПровестиИЗакрыть(Команда)
	
	ОценкаПроизводительностиКлиент.ЗамерВремени("Документ.НакладнаяСАТУРН.Форма.ФормаДокумента.ПровестиИЗакрыть",,Истина);
	
	ОчиститьСообщения();
	ПараметрыЗаписи = Новый Структура("РежимЗаписи", РежимЗаписиДокумента.Проведение);
	
	Если Записать(ПараметрыЗаписи) Тогда
		Закрыть();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПерезаполнитьПоОснованию(Команда)
	ОбработчикПерезаполненияПоОснованию();
КонецПроцедуры

&НаКлиенте
Процедура АрхивироватьДокумент(Команда)
	
	ИнтеграцияИСКлиент.АрхивироватьДокументы(ЭтотОбъект, Объект.Ссылка, ИнтеграцияСАТУРНКлиент);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПодбор(Команда)
	
	// &ЗамерПроизводительности
	ОценкаПроизводительностиКлиент.ЗамерВремени("Документ.НакладнаяСАТУРН.ФормаДокумента.Команда.ОткрытьПодбор");
	
	ОписаниеОповещения = Новый ОписаниеОповещения("Подключаемый_ОбработкаРезультатаПодбораНоменклатуры", ЭтотОбъект);
	СобытияФормСАТУРНКлиентПереопределяемый.ОткрытьФормуПодбораНоменклатуры(ЭтотОбъект, ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПодборПартий(Команда)
	
	Отказ = Ложь;
	
	Если Не ЗначениеЗаполнено(Объект.ГрузоотправительОрганизацияСАТУРН) Тогда
		ТекстСообщения = НСтр("ru = 'Не заполнено поле ""Грузоотправитель""'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(
			ТекстСообщения,
			Объект.Ссылка,
			"Объект.ГрузоотправительОрганизацияСАТУРН",,
			Отказ);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.ГрузоотправительМестоХранения) Тогда
		ТекстСообщения = НСтр("ru = 'Не заполнено поле ""Склад-источник""'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(
			ТекстСообщения,
			Объект.Ссылка,
			"Объект.ГрузоотправительМестоХранения",,
			Отказ);
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = ИнтеграцияСАТУРНКлиент.ПараметрыФормыПодбораПартий();
	ЗаполнитьОтборПартийПоШапкеДокумента(ПараметрыФормы);
	
	ОткрытьФорму("РегистрНакопления.ОстаткиПартийСАТУРН.Форма.ФормаОстатков",
		ПараметрыФормы, ЭтотОбъект,,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПартииПоВыделеннымСтрокам(Команда)
	ВыполнитьКомандуЗаполнитьПартии();
КонецПроцедуры

&НаКлиенте
Процедура РазбитьСтроку(Команда)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Оповещение = Новый ОписаниеОповещения("РазбитьСтрокуЗавершение", ЭтотОбъект);
	
	ПараметрыРазбиенияСтроки = СобытияФормИСКлиент.ПараметрыРазбиенияСтроки(ТекущиеДанные.КоличествоУпаковок);
	ПараметрыРазбиенияСтроки.ИмяПоляКоличество = "КоличествоУпаковок";
	
	СобытияФормИСКлиент.РазбитьСтрокуТабличнойЧасти(Объект.Товары, Элементы.Товары, ПараметрыРазбиенияСтроки, Оповещение);
	
КонецПроцедуры

#Область ПодключаемыеКоманды

// СтандартныеПодсистемы.ПодключаемыеКоманды
//@skip-warning
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

//@skip-warning
&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат) Экспорт
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

//@skip-warning
&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	ПодключаемыеКомандыИСКлиентСервер.УправлениеВидимостьюКомандПодключенныхКОбъекту(ЭтотОбъект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

//@skip-warning
&НаКлиенте
Процедура Подключаемый_ВыполнитьПереопределяемуюКоманду(Команда)
	
	СобытияФормИСКлиентПереопределяемый.ВыполнитьПереопределяемуюКоманду(ЭтотОбъект, Команда);
	
КонецПроцедуры

//@skip-warning
&НаКлиенте
Процедура Подключаемый_ВыполнитьОбменОбработкаОжидания()
	
	ИнтеграцияСАТУРНСлужебныйКлиент.ПродолжитьВыполнениеОбмена(ЭтотОбъект, Объект.Ссылка);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриЗавершенииОперации(Результат, ДополнительныеПараметры) Экспорт

	Прочитать();

КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПослеВыбораОснования(ДанныеВыбора, ДополнительныеПараметры) Экспорт
	
	Если ДанныеВыбора = Элементы.ДокументОснование.ДоступныеТипы.ПривестиЗначение(ДанныеВыбора) Тогда
		Объект.ДокументОснование = ДанныеВыбора;
		Модифицированность       = Истина;
	КонецЕсли;
	
	ЗаполнитьТовары = (ТипЗнч(ДополнительныеПараметры) = Тип("Структура")
		И ДополнительныеПараметры.Свойство("ОбработатьПерезаполнение"));
	Если ЗаполнитьТовары Тогда
		ОбработчикПерезаполненияПоОснованию(Ложь);
	КонецЕсли;
	
	НастроитьЗависимыеЭлементыФормы(ЭтотОбъект, "ДокументОснование");
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	УсловноеОформление.Элементы.Очистить();
	
	СобытияФормИСПереопределяемый.УстановитьУсловноеОформлениеЕдиницИзмерения(ЭтотОбъект);
	СобытияФормИСПереопределяемый.УстановитьУсловноеОформлениеХарактеристикНоменклатуры(ЭтотОбъект);
	СобытияФормИСПереопределяемый.УстановитьУсловноеОформлениеСерийНоменклатуры(ЭтотОбъект);
	
	ИнтеграцияСАТУРН.УстановитьУсловноеОформлениеПоляПАТ(ЭтотОбъект);
	
	СобытияФормИС.УстановитьУсловноеОформлениеПоляНоменклатура(ЭтотОбъект);
	СобытияФормИС.УстановитьУсловноеОформлениеПоляХарактеристика(ЭтотОбъект);
	
	// ДанныеНовойПартии
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыВыделеннаяПартия.Имя);
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных(Элементы.ТоварыВыделеннаяПартия.ПутьКДанным);
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаНеТребуетВниманияГосИС);
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Текст",
		НСтр("ru = '<будет заполнена автоматически>'"));
		
КонецПроцедуры

&НаСервере
Процедура ПриСозданииЧтенииНаСервере(ОбновитьКомандыОснования = Истина)
	
	ЦветГиперссылки = ЦветаСтиля.ЦветГиперссылкиГосИС;
	ЦветТекстаПоля  = ЦветаСтиля.ЦветТекстаПоля;
	
	ПравоИзменения = ПравоДоступа("Изменение", Метаданные.Документы.НакладнаяСАТУРН);
	
	ЗаполнитьОтборыПоОснованию(Объект.ДокументОснование, ЭтотОбъект, ОбновитьКомандыОснования);
	
	НовыйДокумент = Не ЗначениеЗаполнено(Объект.Ссылка);
	
	ИнтеграцияСАТУРН.ЗаполнитьСопоставленныеТовары(Объект.Товары, НоменклатураДляВыбора, НовыйДокумент);
	ИнтеграцияИСПереопределяемый.ЗаполнитьСлужебныеРеквизитыВКоллекции(ЭтотОбъект, Объект.Товары);
	ИнтеграцияСАТУРН.ЗаполнитьСопоставленнуюПродукциюВДокументе(Объект.Товары, НовыйДокумент);
	
	ПараметрыУказанияСерий = ИнтеграцияИС.ПараметрыУказанияСерийФормыОбъекта(Объект, Документы.НакладнаяСАТУРН);
	
	ИнтеграцияИСПереопределяемый.ИспользуетсяПоддержкаПлатежейВСоответствииС275ФЗ(ГосударственныеКонтрактыИспользуются);
	
	УказываетсяТранспортноеСредство = ИнтеграцияСАТУРН.УказываетсяТранспортноеСредство();
	
	ГрузополучательСопоставленСОрганизацией = ИнтеграцияСАТУРНВызовСервера.ОрганизацияСАТУРНСопоставленаСОрганизациейИБ(
		ГрузополучательОрганизацияСАТУРН(ЭтотОбъект)).Сопоставлено;
	
	ГрузоотправительСопоставленСОрганизацией = ИнтеграцияСАТУРНВызовСервера.ОрганизацияСАТУРНСопоставленаСОрганизациейИБ(
		Объект.ГрузоотправительОрганизацияСАТУРН).Сопоставлено;
	
	УпаковкиИспользуются = ИнтеграцияИС.УпаковкиИспользуются();
	
	ЗаполнитьГиперссылкиРеквизитов();
	ОбновитьПредставленияНаФорме();
	
	СобытияФормИСКлиентСерверПереопределяемый.УстановитьПараметрыВыбораНоменклатуры(
		ЭтотОбъект,
		Перечисления.ВидыПродукцииИС.ПодконтрольнаяПродукцияСАТУРН);
	
	ЗаполнитьДоступныеОперации();
	
	НастроитьЭлементыФормы(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьПредставленияНаФорме(Прочитать = Ложь)

	Если Прочитать Тогда
		Прочитать();
	Иначе
		ОбновитьСтатусСАТУРН();
	КонецЕсли;

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура НастроитьЗависимыеЭлементыФормы(Форма, СписокРеквизитов = "")
	
	Элементы = Форма.Элементы;
	Объект   = Форма.Объект;
	
	Инициализация = ПустаяСтрока(СписокРеквизитов);
	СтруктураРеквизитов = Новый Структура(СписокРеквизитов);
	
	Если Инициализация Тогда
		
		Элементы.ДатаПолучения.АвтоОтметкаНезаполненного = Форма.РедактированиеРеквизитовПриемки;
		СтатусКВозврату = Форма.СтатусСАТУРН = ПредопределенноеЗначение("Перечисление.СтатусыОбработкиНакладнойСАТУРН.КВозврату")
			Или Форма.СтатусСАТУРН = ПредопределенноеЗначение("Перечисление.СтатусыОбработкиНакладнойСАТУРН.ПодтверждениеВозвратаОшибка")
			Или Форма.СтатусСАТУРН = ПредопределенноеЗначение("Перечисление.СтатусыОбработкиНакладнойСАТУРН.ПодтверждениеУтратыГрузаОшибка");
		СтатусВозвращен = Форма.СтатусСАТУРН = ПредопределенноеЗначение("Перечисление.СтатусыОбработкиНакладнойСАТУРН.Возвращен");
		
		Элементы.ДатаВозврата.Видимость = СтатусКВозврату Или СтатусВозвращен;
		Элементы.ДатаВозврата.АвтоОтметкаНезаполненного = СтатусКВозврату И Форма.ГрузополучательСопоставленСОрганизацией;
		
		ЭтоВходящаяНакладная = Объект.ВходящаяНакладная;
		
		Элементы.ТоварыВыделеннаяПартияУпаковочнаяЕдиница.Видимость = ЭтоВходящаяНакладная;
		Элементы.ТоварыПартия.Видимость = Не ЭтоВходящаяНакладная;
		
		Если ЭтоВходящаяНакладная Тогда
			ЗаголовокВыделеннаяПартия = Нстр("ru = 'Партия'");
		Иначе
			ЗаголовокВыделеннаяПартия = Нстр("ru = 'Выделенная партия'");
		КонецЕсли;
		Элементы.ТоварыВыделеннаяПартия.Заголовок = ЗаголовокВыделеннаяПартия;
		
		Исключения = Новый Массив;
		Исключения.Добавить(Элементы.ТоварыСортироватьСписокПоВозрастанию.Имя);
		Исключения.Добавить(Элементы.ТоварыСортироватьСписокПоУбыванию.Имя);
		Исключения.Добавить(Элементы.ТоварыПереместитьВверх.Имя);
		Исключения.Добавить(Элементы.ТоварыПереместитьВниз.Имя);
		Исключения.Добавить(Элементы.ТоварыВывестиСписок.Имя);
		
		Если Форма.РедактированиеРеквизитовПриемки Тогда
			Исключения.Добавить(Элементы.ГрузополучательМестоХранения.Имя);
			Исключения.Добавить(Элементы.ДатаПолучения.Имя);
		КонецЕсли;
		
		Если СтатусКВозврату И Форма.ГрузоотправительСопоставленСОрганизацией Тогда
			Исключения.Добавить(Элементы.ДатаВозврата.Имя);
		КонецЕсли;
		
		Если Форма.РедактированиеТоваров Тогда
			
			ИсключенияПоляТовары = ПоляРедактированияТоваровВПути(Элементы);
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(Исключения, ИсключенияПоляТовары);
			
		КонецЕсли;
		
		Если Исключения.Количество() Тогда
			ИнтеграцияИСКлиентСервер.УстановитьДоступностьЭлементовФормы(
				Форма, Исключения, Истина);
		КонецЕсли;
		
		ИнтеграцияИСКлиентСервер.УстановитьДоступностьЭлементовГруппыФормыРекурсивно(
			Элементы.СтраницаТовары, Не Форма.РедактированиеФормыНеДоступно, Исключения);
		
		ИнтеграцияИСКлиентСервер.УстановитьДоступностьЭлементовГруппыФормыРекурсивно(
			Элементы.ГруппаНередактируемыеПослеОтправкиРеквизитыОсновное, Не Форма.РедактированиеФормыНеДоступно, Исключения);
		
		Если Не Форма.РедактированиеФормыНеДоступно Тогда
			Элементы.ТоварыКоличествоСАТУРН.ТолькоПросмотр          = Форма.УпаковкиИспользуются;
			Элементы.ТоварыКоличествоВУпаковкеСАТУРН.ТолькоПросмотр = Форма.УпаковкиИспользуются;
		КонецЕсли;
		
		ОбновитьПодсказкиВвода(Форма);
		
	КонецЕсли;
	
	Если Инициализация Или СтруктураРеквизитов.Свойство("Операция") Тогда
		
		ЭтоПеревозка = (Объект.Операция = ПредопределенноеЗначение("Перечисление.ВидыОперацийСАТУРН.НакладнаяПеревозка"));
		ВидимостьГрузополучателя = ВидимостьГрузополучателя(Форма);
		
		Элементы.ГрузополучательОрганизацияСАТУРН.Видимость        = ВидимостьГрузополучателя;
		Элементы.НадписьГрузополучательОрганизацияСАТУРН.Видимость = ВидимостьГрузополучателя;
		Элементы.ГрузополучательМестоХранения.Видимость            = ЭтоПеревозка;
		Элементы.НадписьГрузополучательМестоХранения.Видимость     = ЭтоПеревозка;
		
		Элементы.ДатаПолучения.Видимость = ЭтоПеревозка И Форма.ГрузополучательСопоставленСОрганизацией;
		
		СтруктураРеквизитов.Вставить("ДокументОснование");
		
	КонецЕсли;
	
	Если Инициализация Или СтруктураРеквизитов.Свойство("ДокументОснование") Тогда
		ПодключаемыеКомандыИСКлиентСервер.УправлениеВидимостьюКомандПодключенныхКОбъекту(Форма);
		Элементы.ТоварыПерезаполнитьПоОснованию.Доступность = ЗначениеЗаполнено(Объект.ДокументОснование);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура НастроитьЭлементыФормы(Форма)
	
	Элементы = Форма.Элементы;
	
	Элементы.ГосударственныйКонтракт.Видимость  = Форма.ГосударственныеКонтрактыИспользуются;
	Элементы.ТранспортноеСредство.Видимость     = Форма.УказываетсяТранспортноеСредство;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДоступныеОперации()
	
	Элементы.Операция.СписокВыбора.Очистить();
	
	Элементы.Операция.СписокВыбора.Добавить(
		Перечисления.ВидыОперацийСАТУРН.НакладнаяПеревозка);
	Элементы.Операция.СписокВыбора.Добавить(
		Перечисления.ВидыОперацийСАТУРН.НакладнаяРозничнаяТорговля);
	Элементы.Операция.СписокВыбора.Добавить(
		Перечисления.ВидыОперацийСАТУРН.НакладнаяСписаниеВПроизводство);
	Элементы.Операция.СписокВыбора.Добавить(
		Перечисления.ВидыОперацийСАТУРН.НакладнаяУтилизация);
	Элементы.Операция.СписокВыбора.Добавить(
		Перечисления.ВидыОперацийСАТУРН.НакладнаяЭкспорт);
	
	Элементы.Операция.СписокВыбора.СортироватьПоПредставлению();
	
КонецПроцедуры

#Область ПерезаполнениеПоОснованию

&НаКлиенте
Процедура ОбработчикПерезаполненияПоОснованию(ЗадаватьВопрос = Истина)
	
	ОчиститьСообщения();
	
	Если Объект.Товары.Количество() > 0 И ЗадаватьВопрос Тогда
		
		ТекстВопроса = НСтр("ru = 'Данные документа будут перезаполнены. Продолжить?'");
		ОписаниеОповещенияОЗавершении = Новый ОписаниеОповещения("ВопросОПерезаполнениииПоОснованиюПриЗавершении", ЭтотОбъект);
		ПоказатьВопрос(ОписаниеОповещенияОЗавершении, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		
	Иначе
		
		ПерезаполнитьПоОснованиюСервер();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросОПерезаполнениииПоОснованиюПриЗавершении(Результат, Параметры) Экспорт

	Если Результат = КодВозвратаДиалога.Да Тогда
		
		ПерезаполнитьПоОснованиюСервер(, Ложь);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПерезаполнитьПоОснованиюСервер(ОбработатьТабличнуюЧасть = Истина, ОбработатьШапку = Истина)
	
	ТекущийОбъект = РеквизитФормыВЗначение("Объект");
	ТекущийОбъект.Заполнить(Объект.ДокументОснование);
	
	ЗначениеВРеквизитФормы(ТекущийОбъект, "Объект");
	
	ПриСозданииЧтенииНаСервере();
	ИнтеграцияИСПереопределяемый.ЗаполнитьСтатусыУказанияСерий(Объект, ПараметрыУказанияСерий);
	
	Модифицированность = Истина;
	
КонецПроцедуры

#КонецОбласти

#Область Статус

&НаСервере
Процедура ОбновитьСтатусСАТУРН()
	
	МенеджерОбъекта = ОбщегоНазначенияИС.МенеджерОбъектаПоСсылке(Объект.Ссылка);
	
	Реквизиты = Новый Структура;
	Реквизиты.Вставить("Операция", Объект.Операция);
	Реквизиты.Вставить("ГрузополучательОрганизацияСАТУРН", Объект.ГрузополучательОрганизацияСАТУРН);
	Реквизиты.Вставить("ГрузополучательСопоставленСОрганизацией", ГрузополучательСопоставленСОрганизацией);
	Реквизиты.Вставить("Идентификатор", Объект.Идентификатор);
	
	СтатусСАТУРН = МенеджерОбъекта.СтатусПоУмолчанию();
	
	ДальнейшееДействие = МенеджерОбъекта.ДальнейшееДействиеПоУмолчанию(Реквизиты);
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	Статусы.Статус КАК Статус,
		|	ВЫБОР
		|		КОГДА Статусы.ДальнейшееДействие1 В (&МассивДальнейшиеДействия)
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ДальнейшиеДействияПоВзаимодействиюСАТУРН.НеТребуется)
		|		ИНАЧЕ Статусы.ДальнейшееДействие1
		|	КОНЕЦ КАК ДальнейшееДействие1,
		|	ВЫБОР
		|		КОГДА Статусы.ДальнейшееДействие2 В (&МассивДальнейшиеДействия)
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ДальнейшиеДействияПоВзаимодействиюСАТУРН.НеТребуется)
		|		ИНАЧЕ Статусы.ДальнейшееДействие2
		|	КОНЕЦ КАК ДальнейшееДействие2,
		|	ВЫБОР
		|		КОГДА Статусы.ДальнейшееДействие3 В (&МассивДальнейшиеДействия)
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ДальнейшиеДействияПоВзаимодействиюСАТУРН.НеТребуется)
		|		ИНАЧЕ Статусы.ДальнейшееДействие3
		|	КОНЕЦ КАК ДальнейшееДействие3
		|ИЗ
		|	РегистрСведений.СтатусыДокументовСАТУРН КАК Статусы
		|ГДЕ
		|	Статусы.Документ = &Документ");
		
		Запрос.УстановитьПараметр("Документ",                 Объект.Ссылка);
		Запрос.УстановитьПараметр("МассивДальнейшиеДействия", ИнтеграцияСАТУРН.НеотображаемыеВДокументахДальнейшиеДействия());
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Если Выборка.Следующий() Тогда
			
			СтатусСАТУРН = Выборка.Статус;
				
			ДальнейшееДействие = Новый Массив;
			ДальнейшееДействие.Добавить(Выборка.ДальнейшееДействие1);
			ДальнейшееДействие.Добавить(Выборка.ДальнейшееДействие2);
			ДальнейшееДействие.Добавить(Выборка.ДальнейшееДействие3);
			
		КонецЕсли;
		
	КонецЕсли;

	ДопустимыеДействия = Новый Массив;
	ДопустимыеДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюСАТУРН.ПередайтеДанные);
	ДопустимыеДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюСАТУРН.ОтменитеОперацию);
	ДопустимыеДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюСАТУРН.ОтменитеПередачуДанных);
	
	СтатусПредставление = ИнтеграцияСАТУРН.ПредставлениеСтатуса(СтатусСАТУРН, ДальнейшееДействие, ДопустимыеДействия);
	
	РедактированиеФормыНеДоступно = СтатусСАТУРН <> Перечисления.СтатусыОбработкиНакладнойСАТУРН.Черновик
	                              И СтатусСАТУРН <> Перечисления.СтатусыОбработкиНакладнойСАТУРН.Ошибка;
	
	РедактированиеРеквизитовПриемки = ГрузополучательСопоставленСОрганизацией
	                                  И (СтатусСАТУРН = Перечисления.СтатусыОбработкиНакладнойСАТУРН.ВПути
	                                     Или СтатусСАТУРН = Перечисления.СтатусыОбработкиНакладнойСАТУРН.ПодтверждениеОшибка
	                                     Или СтатусСАТУРН = Перечисления.СтатусыОбработкиНакладнойСАТУРН.ВозвратОшибка
	                                     Или СтатусСАТУРН = Перечисления.СтатусыОбработкиНакладнойСАТУРН.ГрузУтраченОшибка);
	
	РедактированиеТоваров = Объект.ВходящаяНакладная
	                        И (СтатусСАТУРН = Перечисления.СтатусыОбработкиНакладнойСАТУРН.ВПути
	                           И ГрузополучательСопоставленСОрганизацией
	                           Или СтатусСАТУРН = Перечисления.СтатусыОбработкиНакладнойСАТУРН.КВозврату
	                           И ГрузоотправительСопоставленСОрганизацией);
	
КонецПроцедуры

&НаКлиенте
Процедура СтатусПредставлениеОбработкаНавигационнойСсылкиЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт

	Если Не РезультатВопроса = КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	ПроверятьОбъектПроведен = Истина;
	Если ДействияНавигационнойСсылкиБезПроверкиПроведения().Найти(ДополнительныеПараметры.НавигационнаяСсылкаФорматированнойСтроки) <> Неопределено Тогда
		Записать(Новый Структура("РежимЗаписи", РежимЗаписиДокумента.Запись));
		РазблокироватьДанныеФормыДляРедактирования();
		ПроверятьОбъектПроведен = Ложь;
	ИначеЕсли ПроверитьЗаполнение() Тогда
		Записать(Новый Структура("РежимЗаписи", РежимЗаписиДокумента.Проведение));
		РазблокироватьДанныеФормыДляРедактирования();
	КонецЕсли;

	Если Не Модифицированность Тогда
		Если Не ПроверятьОбъектПроведен ТОгда
			Если (ДополнительныеПараметры.НавигационнаяСсылкаФорматированнойСтроки = "ВернутьНакладную"
				Или ДополнительныеПараметры.НавигационнаяСсылкаФорматированнойСтроки = "ПодтвердитьУтерюГруза")
				И Не ЗначениеЗаполнено(Объект.ДатаПолучения) Тогда
				ТекстСообщения = Нстр("ru = 'Не указана дата получения'");
				ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения,,, "Объект.ДатаПолучения");
			Иначе
				ОбработатьНажатиеНавигационнойСсылки(ДополнительныеПараметры.НавигационнаяСсылкаФорматированнойСтроки);
			КонецЕсли;
		ИначеЕсли Объект.Проведен Тогда
			ОбработатьНажатиеНавигационнойСсылки(ДополнительныеПараметры.НавигационнаяСсылкаФорматированнойСтроки);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОбработатьНажатиеНавигационнойСсылки(НавигационнаяСсылкаФорматированнойСтроки)
	
	Если НавигационнаяСсылкаФорматированнойСтроки = "ПередатьДанные"
		Или НавигационнаяСсылкаФорматированнойСтроки = "ПодтвердитьВозврат"
		Или НавигационнаяСсылкаФорматированнойСтроки = "ПодтвердитьУтерюПриВозврате" Тогда
		
		ПараметрыОбработкиДокументов = ИнтеграцияСАТУРНСлужебныйКлиентСервер.ПараметрыОбработкиДокументов();
		ПараметрыОбработкиДокументов.Ссылка             = Объект.Ссылка;
		ПараметрыОбработкиДокументов.ОрганизацияСАТУРН  = Объект.ГрузоотправительОрганизацияСАТУРН;
		Если НавигационнаяСсылкаФорматированнойСтроки = "ПередатьДанные" Тогда
			ПараметрыОбработкиДокументов.ДальнейшееДействие = ПредопределенноеЗначение("Перечисление.ДальнейшиеДействияПоВзаимодействиюСАТУРН.ПередайтеДанные");
		ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "ПодтвердитьВозврат" Тогда
			ПараметрыОбработкиДокументов.ДальнейшееДействие = ПредопределенноеЗначение("Перечисление.ДальнейшиеДействияПоВзаимодействиюСАТУРН.ПодтвердитеВозврат");
		ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "ПодтвердитьУтерюПриВозврате" Тогда
			ПараметрыОбработкиДокументов.ДальнейшееДействие = ПредопределенноеЗначение("Перечисление.ДальнейшиеДействияПоВзаимодействиюСАТУРН.ПодтвердитеУтерюПриВозврате");
		КонецЕсли;
		
		ОписаниеПриЗавершении = Новый ОписаниеОповещения(
			"Подключаемый_ПриЗавершенииОперации", ЭтотОбъект, ПараметрыОбработкиДокументов);
		
		ИнтеграцияСАТУРНКлиент.ПодготовитьКПередаче(
			ЭтотОбъект,
			ПараметрыОбработкиДокументов,
			ОписаниеПриЗавершении);
			
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "ПодтвердитьНакладную"
		Или НавигационнаяСсылкаФорматированнойСтроки = "ВернутьНакладную"
		Или НавигационнаяСсылкаФорматированнойСтроки = "ПодтвердитьУтерюГруза" Тогда
		
		ПараметрыОбработкиДокументов = ИнтеграцияСАТУРНСлужебныйКлиентСервер.ПараметрыОбработкиДокументов();
		ПараметрыОбработкиДокументов.Ссылка             = Объект.Ссылка;
		ПараметрыОбработкиДокументов.ОрганизацияСАТУРН  = Объект.ГрузополучательОрганизацияСАТУРН;
		Если НавигационнаяСсылкаФорматированнойСтроки = "ПодтвердитьНакладную" Тогда
			ПараметрыОбработкиДокументов.ДальнейшееДействие = ПредопределенноеЗначение("Перечисление.ДальнейшиеДействияПоВзаимодействиюСАТУРН.ПодтвердитеНакладную");
		ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "ВернутьНакладную" Тогда
			ПараметрыОбработкиДокументов.ДальнейшееДействие = ПредопределенноеЗначение("Перечисление.ДальнейшиеДействияПоВзаимодействиюСАТУРН.ВернитеНакладную");
		ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "ПодтвердитьУтерюГруза" Тогда
			ПараметрыОбработкиДокументов.ДальнейшееДействие = ПредопределенноеЗначение("Перечисление.ДальнейшиеДействияПоВзаимодействиюСАТУРН.ПодтвердитеУтерюГруза");
		КонецЕсли;
		
		ОписаниеПриЗавершении = Новый ОписаниеОповещения(
			"Подключаемый_ПриЗавершенииОперации", ЭтотОбъект, ПараметрыОбработкиДокументов);
		
		ИнтеграцияСАТУРНКлиент.ПодготовитьКПередаче(
			ЭтотОбъект,
			ПараметрыОбработкиДокументов,
			ОписаниеПриЗавершении);
		
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "ОтменитьОперацию" Тогда
		
		ИнтеграцияСАТУРНКлиент.ОтменитьПоследнююОперацию(Объект.Ссылка);
		
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "ОтменитьПередачуДанных" Тогда
		
		ИнтеграцияСАТУРНКлиент.ОтменитьПередачу(Объект.Ссылка);
	
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "ПоказатьПричинуОшибки" Тогда
		
		ПараметрыОткрытияФормы = Новый Структура;
		ПараметрыОткрытияФормы.Вставить("Документ", Объект.Ссылка);
		
		ОткрытьФорму(
			"Справочник.САТУРНПрисоединенныеФайлы.Форма.ФормаОшибки",
			ПараметрыОткрытияФормы,
			ЭтотОбъект);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура ГрузополучательОрганизацияСАТУРНПриИзмененииНаСервере()
	
	ЗаполнитьГиперссылкиРеквизитов("Грузополучатель");
	ОбновитьПодсказкиВвода(ЭтотОбъект);
	
	ГрузополучательСопоставленСОрганизацией = ИнтеграцияСАТУРНВызовСервера.ОрганизацияСАТУРНСопоставленаСОрганизациейИБ(
		ГрузополучательОрганизацияСАТУРН(ЭтотОбъект)).Сопоставлено;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьГиперссылкиРеквизитов(ИмяХозяйствующегоСубъекта = Неопределено)
	
	ПараметрыПолученияСопоставлений = Новый Массив;
	
	Если ИмяХозяйствующегоСубъекта = Неопределено Тогда
		
		ПараметрПредставления = ИнтеграцияСАТУРН.НовыеПараметрыФормированияПредставленияСопоставлений();
		ПараметрПредставления.Префикс               = "Грузоотправитель";
		ПараметрПредставления.ОрганизацияСАТУРН     = Объект.ГрузоотправительОрганизацияСАТУРН;
		ПараметрПредставления.МестоХранения         = Объект.ГрузоотправительМестоХранения;
		ПараметрПредставления.ОрганизацияКонтрагент = ГрузоотправительИзОснованияДляОтбораОрганизацииСАТУРН;
		ПараметрПредставления.Склад                 = ГрузоотправительИзОснованияДляОтбораМестаХранения;
		
		ПараметрыПолученияСопоставлений.Добавить(ПараметрПредставления);
		
		ПараметрПредставления = ИнтеграцияСАТУРН.НовыеПараметрыФормированияПредставленияСопоставлений();
		ПараметрПредставления.Префикс           = "Грузополучатель";
		ПараметрПредставления.ОрганизацияСАТУРН = ГрузополучательОрганизацияСАТУРН(ЭтотОбъект);
		ПараметрПредставления.МестоХранения     = Объект.ГрузополучательМестоХранения;
		ПараметрПредставления.ОрганизацияСАТУРНОбязательноеЗаполнение = Истина;
		ПараметрПредставления.ОрганизацияКонтрагент = ГрузополучательИзОснованияДляОтбораОрганизацииСАТУРН;
		ПараметрПредставления.Склад                 = ГрузополучательИзОснованияДляОтбораМестаХранения;
		
		ПараметрыПолученияСопоставлений.Добавить(ПараметрПредставления);
		
	Иначе
		
		Если ИмяХозяйствующегоСубъекта = "Грузополучатель" Тогда
			ОрганизацияСАТУРН = ГрузополучательОрганизацияСАТУРН(ЭтотОбъект);
		Иначе
			ОрганизацияСАТУРН = Объект[ИмяХозяйствующегоСубъекта + "ОрганизацияСАТУРН"];
		КонецЕсли;
		
		ПараметрПредставления = ИнтеграцияСАТУРН.НовыеПараметрыФормированияПредставленияСопоставлений();
		ПараметрПредставления.Префикс           = ИмяХозяйствующегоСубъекта;
		ПараметрПредставления.ОрганизацияСАТУРН = ОрганизацияСАТУРН;
		ПараметрПредставления.МестоХранения     = Объект[ИмяХозяйствующегоСубъекта + "МестоХранения"];
		ПараметрПредставления.ОрганизацияСАТУРНОбязательноеЗаполнение = (ИмяХозяйствующегоСубъекта = "Грузополучатель");
		ПараметрПредставления.ОрганизацияКонтрагент = ЭтотОбъект[ИмяХозяйствующегоСубъекта + "ИзОснованияДляОтбораОрганизацииСАТУРН"];
		ПараметрПредставления.Склад                 = ЭтотОбъект[ИмяХозяйствующегоСубъекта + "ИзОснованияДляОтбораМестаХранения"];
		
		ПараметрыПолученияСопоставлений.Добавить(ПараметрПредставления);
		
	КонецЕсли;
	
	ДанныеПредставлений = ИнтеграцияСАТУРН.ПредставленияСопоставлений(ПараметрыПолученияСопоставлений);
	
	Для Каждого КлючИЗначение Из ДанныеПредставлений Цикл
		
		ПараметрПредставления = КлючИЗначение.Ключ;
		ДанныеПредставления   = КлючИЗначение.Значение;
		
		ЭтотОбъект["Надпись" + ПараметрПредставления.Префикс + "ОрганизацияСАТУРН"] = ДанныеПредставления.ОрганизацияКонтрагент.Представление;
		ЭтотОбъект["Надпись" + ПараметрПредставления.Префикс + "МестоХранения"]     = ДанныеПредставления.ТорговыйОбъект.Представление;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ГрузополучательОрганизацияСАТУРН(Форма)
	
	Объект = Форма.Объект;
	Если ЗначениеЗаполнено(Объект.ГрузополучательОрганизацияСАТУРН)
		Или Не ВидимостьГрузополучателя(Форма) Тогда
		Возврат Объект.ГрузополучательОрганизацияСАТУРН;
	ИначеЕсли ЗначениеЗаполнено(Форма.ГрузополучательИзОснованияДляОтбораОрганизацииСАТУРН) Тогда
		Возврат ПредопределенноеЗначение("Справочник.КлассификаторОрганизацийСАТУРН.ПустаяСсылка");
	Иначе
		Возврат Объект.ГрузоотправительОрганизацияСАТУРН;
	КонецЕсли;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ВидимостьГрузополучателя(Форма)
	
	Объект       = Форма.Объект;
	ЭтоПеревозка = (Объект.Операция = ПредопределенноеЗначение("Перечисление.ВидыОперацийСАТУРН.НакладнаяПеревозка"));
	ЭтоЭкспорт   = (Объект.Операция = ПредопределенноеЗначение("Перечисление.ВидыОперацийСАТУРН.НакладнаяЭкспорт"));
	
	Возврат (ЭтоПеревозка Или ЭтоЭкспорт);
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьПодсказкиВвода(Форма)
	
	Если ЗначениеЗаполнено(Форма.Объект.ГрузополучательОрганизацияСАТУРН)
		Или ЗначениеЗаполнено(Форма.ГрузополучательИзОснованияДляОтбораОрганизацииСАТУРН) Тогда
		Форма.Элементы.ГрузополучательОрганизацияСАТУРН.ПодсказкаВвода = "";
		Форма.Элементы.ГрузополучательОрганизацияСАТУРН.ОтметкаНезаполненного = 
			ЗначениеЗаполнено(Форма.ГрузополучательИзОснованияДляОтбораОрганизацииСАТУРН)
			И Не ЗначениеЗаполнено(Форма.Объект.ГрузополучательОрганизацияСАТУРН);
	Иначе
		Форма.Элементы.ГрузополучательОрганизацияСАТУРН.ПодсказкаВвода = Строка(Форма.Объект.ГрузоотправительОрганизацияСАТУРН);
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЗначенияРеквизитовТранспортногоСредства(ТранспортноеСредство)
	
	РеквизитыТранспортногоСредства = ИнтеграцияСАТУРН.ИнициализироватьСтруктуруРеквизитовТранспортногоСредства();
	ИнтеграцияСАТУРНПереопределяемый.ПриОпределенииРеквизитовТранспортногоСредства(РеквизитыТранспортногоСредства, ТранспортноеСредство);
	Возврат РеквизитыТранспортногоСредства;
	
КонецФункции

&НаКлиенте
Процедура Подключаемый_ОбработкаРезультатаПодбораНоменклатуры(Результат, ДополнительныеПараметры) Экспорт
	
	ОбработкаРезультатаПодбораНоменклатуры(Результат, КэшированныеЗначения);
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаРезультатаПодбораНоменклатуры(ВыбранноеЗначение, КэшированныеЗначения)
	
	ПараметрыЗаполнения = ИнтеграцияСАТУРН.ПараметрыЗаполненияТабличнойЧастиТовары();
	ПараметрыЗаполнения.Вставить("ПараметрыУказанияСерий", ПараметрыУказанияСерий);
	
	ДобавленныеСтроки = Новый Массив;
	
	СобытияФормСАТУРНПереопределяемый.ОбработкаРезультатаПодбораНоменклатуры(
		ЭтотОбъект, ВыбранноеЗначение, ПараметрыЗаполнения, КэшированныеЗначения, ДобавленныеСтроки);
	
	ИнтеграцияИСПереопределяемый.ЗаполнитьСлужебныеРеквизитыВКоллекции(ЭтотОбъект, Объект.Товары);
	ИнтеграцияИСПереопределяемый.ЗаполнитьСтатусыУказанияСерий(Объект, ПараметрыУказанияСерий);
	
	НастроитьЗависимыеЭлементыФормы(ЭтотОбъект, "ТоварыНоменклатура");
	
КонецПроцедуры

#Область Товары

&НаКлиенте
Функция ПараметрыЗаполненияСтроки()
	
	ПараметрыЗаполнения = ИнтеграцияСАТУРНКлиентСервер.ПараметрыЗаполненияТабличнойЧасти();
	ПараметрыЗаполнения.ПересчитатьКоличествоУпаковокПоСАТУРН = РедактированиеФормыНедоступно
		И (СтатусСАТУРН = ПредопределенноеЗначение("Перечисление.СтатусыОбработкиНакладнойСАТУРН.ВПути")
			Или СтатусСАТУРН = ПредопределенноеЗначение("Перечисление.СтатусыОбработкиНакладнойСАТУРН.КВозврату"));
	ПараметрыЗаполнения.ПересчитатьКоличествоСАТУРН = Не ПараметрыЗаполнения.ПересчитатьКоличествоУпаковокПоСАТУРН;
	ПараметрыЗаполнения.ПересчитатьКоличествоВУпаковкеСАТУРН = Не ПараметрыЗаполнения.ПересчитатьКоличествоУпаковокПоСАТУРН;
	
	Возврат ПараметрыЗаполнения;
	
КонецФункции

&НаКлиенте
Процедура НоменклатураПриИзменении(ТекущиеДанные = Неопределено, ПараметрыЗаполнения = Неопределено)
	
	Если ТекущиеДанные = Неопределено Тогда
		ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	КонецЕсли;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ПараметрыЗаполнения = Неопределено Тогда
		ПараметрыЗаполнения = ПараметрыЗаполненияСтроки();
	КонецЕсли;
	СобытияФормСАТУРНКлиентПереопределяемый.ПриИзмененииНоменклатуры(
		ЭтотОбъект, ТекущиеДанные, КэшированныеЗначения, ПараметрыУказанияСерий, ПараметрыЗаполнения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииТипаИзмеряемойВеличины(ТекущиеДанные = Неопределено, ПараметрыЗаполнения = Неопределено)
	
	Если ТекущиеДанные = Неопределено Тогда
		ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	КонецЕсли;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ПараметрыЗаполнения = Неопределено Тогда
		ПараметрыЗаполнения = ПараметрыЗаполненияСтроки();
	КонецЕсли;
	
	СобытияФормСАТУРНКлиентПереопределяемый.ПриИзмененииТипаИзмеряемойВеличины(
		ЭтотОбъект, ТекущиеДанные, КэшированныеЗначения, ПараметрыЗаполнения);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСпискиВыбораНоменклатуры(ТекущаяСтрока)
	
	СписокВыбораНоменклатура = Элементы.ТоварыНоменклатура.СписокВыбора;
	СписокВыбораНоменклатура.Очистить();
	
	НайденныеСтроки = НоменклатураДляВыбора.НайтиСтроки(Новый Структура("ПАТ", ТекущаяСтрока.ПАТ));
	НоменклатураКэш = Неопределено;
	Для Каждого СтрокаТЧ Из НайденныеСтроки Цикл
		Если СтрокаТЧ.Номенклатура <> НоменклатураКэш Тогда
			СписокВыбораНоменклатура.Добавить(СтрокаТЧ.Номенклатура);
			НоменклатураКэш = СтрокаТЧ.Номенклатура;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСпискиВыбораХарактеристика(ТекущаяСтрока)
	
	СписокВыбораХарактеристика = Элементы.ТоварыХарактеристика.СписокВыбора;
	СписокВыбораХарактеристика.Очистить();
	
	НайденныеСтроки = НоменклатураДляВыбора.НайтиСтроки(Новый Структура("ПАТ, Номенклатура",
		ТекущаяСтрока.ПАТ,
		ТекущаяСтрока.Номенклатура));
	Для Каждого СтрокаТЧ Из НайденныеСтроки Цикл
		СписокВыбораХарактеристика.Добавить(СтрокаТЧ.Характеристика);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПоляРедактированияТоваровВПути(Элементы)
	
	Исключения = Новый Массив;
	
	Исключения.Добавить(Элементы.ТоварыНоменклатура.Имя);
	Исключения.Добавить(Элементы.ТоварыХарактеристика.Имя);
	Исключения.Добавить(Элементы.ТоварыГруппаКолонокСерия.Имя);
	Исключения.Добавить(Элементы.ТоварыКоличествоУпаковок.Имя);
	Исключения.Добавить(Элементы.ТоварыУпаковкаЕдиницаИзмерения.Имя);
	Исключения.Добавить(Элементы.ТоварыТипИзмеряемойВеличиныСАТУРН.Имя);
	
	Возврат Исключения;
	
КонецФункции

&НаКлиенте
Процедура ПриВыбореНоменклатуры(Номенклатура, ДополнительныеПараметры) Экспорт
	
	Если Номенклатура = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные.Номенклатура = Номенклатура;
	
	НоменклатураПриИзменении(ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура РазбитьСтрокуЗавершение(НоваяСтрока, ДополнительныеПараметры) Экспорт
	
	Если НоваяСтрока <> Неопределено Тогда
		
		ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
		
		СобытияФормСАТУРНКлиентПереопределяемый.ПриИзмененииКоличестваУпаковок(
			ЭтотОбъект, ТекущиеДанные, КэшированныеЗначения);
		СобытияФормСАТУРНКлиентПереопределяемый.ПриИзмененииКоличестваУпаковок(
			ЭтотОбъект, НоваяСтрока, КэшированныеЗначения);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиЗаполненияПартий

#Область ЗаполнитьПартии

&НаКлиенте
Процедура ВыполнитьКомандуЗаполнитьПартии()
	
	ОчиститьСообщения();
	
	Отказ = Ложь;
	
	Если Не ЗначениеЗаполнено(Объект.ГрузоотправительОрганизацияСАТУРН) Тогда
		ТекстСообщения = НСтр("ru = 'Не заполнено поле ""Организация""'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(
			ТекстСообщения,
			Объект.Ссылка, 
			"Объект.ГрузоотправительОрганизацияСАТУРН",,
			Отказ);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.ГрузоотправительМестоХранения) Тогда
		ТекстСообщения = НСтр("ru = 'Не заполнено поле ""Место хранения""'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(
			ТекстСообщения,
			Объект.Ссылка,
			"Объект.ГрузоотправительМестоХранения",,
			Отказ);
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	СообщениеПользователю = ЗаполнитьПартииНаСервере();
	
	ПоказатьОповещениеПользователя(
		СообщениеПользователю.ЗаголовокСообщения,,
		СообщениеПользователю.ТекстСообщения,
		СообщениеПользователю.КартинкаСообщения);
	
КонецПроцедуры

&НаСервере
Функция ЗаполнитьПартииНаСервере()
	
	СписокСтрок = Новый Массив;
	Для каждого ИдентификаторСтроки Из Элементы.Товары.ВыделенныеСтроки Цикл
		ДанныеСтроки = Объект.Товары.НайтиПоИдентификатору(ИдентификаторСтроки);
		СписокСтрок.Добавить(ДанныеСтроки);
	КонецЦикла;
	
	РезультатЗаполнения = Документы.НакладнаяСАТУРН.ЗаполнитьПартии(Объект, СписокСтрок);
	
	Возврат РезультатЗаполнения;
	
КонецФункции

&НаКлиенте
Процедура ЗаполнитьОтборПартийПоШапкеДокумента(ПараметрыФормы)
	
	ПараметрыФормы.ОрганизацияСАТУРН = Объект.ГрузоотправительОрганизацияСАТУРН;
	ПараметрыФормы.МестоХранения = Объект.ГрузоотправительМестоХранения;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьОтборПартийПоСтрокеДокумента(ПараметрыФормы)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	Если ЗначениеЗаполнено(ТекущиеДанные.ПАТ) Тогда
		ПараметрыФормы.ПАТ = ТекущиеДанные.ПАТ;
	КонецЕсли;
	Если ЗначениеЗаполнено(ТекущиеДанные.Номенклатура) Тогда
		ПараметрыФормы.Номенклатура   = ТекущиеДанные.Номенклатура;
		ПараметрыФормы.Характеристика = ТекущиеДанные.Характеристика;
		ПараметрыФормы.Серия          = ТекущиеДанные.Серия;
		ПараметрыФормы.Упаковка       = ?(ЗначениеЗаполнено(ТекущиеДанные.Упаковка), ТекущиеДанные.Упаковка, ТекущиеДанные.ЕдиницаИзмерения);
		ПараметрыФормы.ТипИзмеряемойВеличины     = ТекущиеДанные.ТипИзмеряемойВеличиныСАТУРН;
		ПараметрыФормы.КоличествоВУпаковкеСАТУРН = ТекущиеДанные.КоличествоВУпаковкеСАТУРН;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти


#КонецОбласти
&НаКлиенте
Функция ДействияНавигационнойСсылкиБезПроверкиПроведения()
	
	Результат = Новый Массив;
	Результат.Добавить("ПоказатьПричинуОшибки");
	Результат.Добавить("ОтменитьОперацию");
	Результат.Добавить("ОтменитьПередачуДанных");
	Результат.Добавить("ВернутьНакладную");
	Результат.Добавить("ПодтвердитьУтерюГруза");
	
	Возврат Результат;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьОтборыПоОснованию(ДокументОснование, Форма, НастроитьЗависимыеЭлементыФормы = Истина)
	
	ОтборыПоОснованию = Неопределено;
	Если ДокументОснование <> Неопределено Тогда 
		ОтборыПоОснованию = ИнтеграцияСАТУРНВызовСервера.ОтборыДляРеквизитовДокументаПоОснованию(Тип("ДокументСсылка.НакладнаяСАТУРН"), ДокументОснование);
	КонецЕсли;
	
	Если ОтборыПоОснованию <> Неопределено Тогда
		Форма.ГрузоотправительИзОснованияДляОтбораОрганизацииСАТУРН = ОтборыПоОснованию.ГрузоотправительОрганизацияСАТУРН;
		Форма.ГрузоотправительИзОснованияДляОтбораМестаХранения     = ОтборыПоОснованию.ГрузоотправительМестоХранения;
		Форма.ГрузополучательИзОснованияДляОтбораОрганизацииСАТУРН  = ОтборыПоОснованию.ГрузополучательОрганизацияСАТУРН;
		Форма.ГрузополучательИзОснованияДляОтбораМестаХранения      = ОтборыПоОснованию.ГрузополучательМестоХранения;
	Иначе 
		Форма.ГрузоотправительИзОснованияДляОтбораОрганизацииСАТУРН = Неопределено;
		Форма.ГрузоотправительИзОснованияДляОтбораМестаХранения     = Неопределено;
		Форма.ГрузополучательИзОснованияДляОтбораОрганизацииСАТУРН  = Неопределено;
		Форма.ГрузополучательИзОснованияДляОтбораМестаХранения      = Неопределено;
	КонецЕсли;
	
	Если НастроитьЗависимыеЭлементыФормы Тогда
		НастроитьЗависимыеЭлементыФормы(Форма, "ДокументОснование");
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ДанныеГосударственногоКонтракта(ГосударственныйКонтракт)
	
	Результат = Новый Соответствие();
	ИнтеграцияСАТУРНПереопределяемый.ПриОпределенииРеквизитовГосКонтракта(
		ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ГосударственныйКонтракт), Результат);
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти
