#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий

Процедура ОбработкаПроведения(Отказ, Режим)
	
	ПроведениеСервер.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства, Режим);
	
	// Инициализация данных документа.
	Документы.ПриходныйКассовыйОрдер.ИнициализироватьДанныеДокумента(Ссылка, ДополнительныеСвойства);
	
	// Подготовка наборов записей
	ПроведениеСервер.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);
	
	// Движения по денежным средствам.
	ДенежныеСредстваСервер.ОтразитьДенежныеСредстваНаличные(ДополнительныеСвойства, Движения, Отказ);
	ДенежныеСредстваСервер.ОтразитьДенежныеСредстваКПоступлениюНаличные(ДополнительныеСвойства, Движения, Отказ);
	ДенежныеСредстваСервер.ОтразитьРасчетыСПоставщиками(ДополнительныеСвойства, Движения, Отказ);
	ДенежныеСредстваСервер.ОтразитьДенежныеСредстваККМ(ДополнительныеСвойства, Движения, Отказ);
	ДенежныеСредстваСервер.ОтразитьРасчетыСКлиентами(ДополнительныеСвойства, Движения, Отказ);
	
	СформироватьСписокРегистровДляКонтроля();
	
	// Запись наборов записей
	ПроведениеСервер.ЗаписатьНаборыЗаписей(ЭтотОбъект);
	ПроведениеСервер.ВыполнитьКонтрольРезультатовПроведения(ЭтотОбъект, Отказ);
	ПроведениеСервер.ОчиститьДополнительныеСвойстваДляПроведения(ДополнительныеСвойства);
	
	Если НЕ Отказ Тогда
		ОбменССайтомРТ.ЗаписатьСостояниеОплатыЗаказаПокупателя(ЗаказПокупателя, Ссылка);
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	Если ДанныеЗаполнения = Неопределено Или ДанныеЗаполнения = NULL Тогда
		ВызватьИсключение НСтр("ru='Команда не может быть выполнена для указанного объекта!
								   |Финансы -> Приходные кассовые ордера -> Создать.'");
	КонецЕсли;
	
	ТипОснования = ТипЗнч(ДанныеЗаполнения);
	Если ТипОснования = Тип("ДокументСсылка.ЗаказПокупателя")
		Или ТипОснования = Тип("ДокументСсылка.РеализацияТоваров")
		Или ТипОснования = Тип("ДокументСсылка.ЧекККМ") Тогда
		
		ТипКонтрагента = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеЗаполнения.Контрагент, "ЮрФизЛицо");
		//Если ТипКонтрагента = Перечисления.ЮрФизЛицо.ФизЛицо Тогда
		//	ТекстОшибки = НСтр("ru='Документ ""Приходный кассовый ордер"" с типом операции ""Поступление оплаты от покупателя"" 
		//		|не предназначен для работы с физическими лицами.'");
		//	ВызватьИсключение ТекстОшибки;
		//КонецЕсли;
	КонецЕсли;
	
	Если ТипОснования = Тип("Структура") И ДанныеЗаполнения.Свойство("ДокументОснования") Тогда
		ДанныеЗаполнения = ДанныеЗаполнения.ДокументОснования;
		ТипОснования = ТипЗнч(ДанныеЗаполнения);
	КонецЕсли;
	
	Если Документы.ТипВсеСсылки().СодержитТип(ТипОснования) Тогда
		
		ОбщегоНазначенияРТ.ПроверитьВозможностьВводаНаОсновании(ДанныеЗаполнения);
		
		Если ТипОснования = Тип("ДокументСсылка.ЗаказПокупателя") Тогда
			Если ДанныеЗаполнения.Статус = Перечисления.СтатусыЗаказовПокупателей.НеСогласован Тогда
				ТекстОшибки = НСтр("ru='Заказ не согласован.
				|Заполнение документа не выполнено.'");
				
				ВызватьИсключение ТекстОшибки;
			ИначеЕсли ДанныеЗаполнения.Статус = Перечисления.СтатусыЗаказовПокупателей.Закрыт Тогда
				ТекстОшибки = НСтр("ru='Заказ закрыт.
				|Заполнение документа не выполнено.'");
				
				ВызватьИсключение ТекстОшибки;
				
			КонецЕсли;
		КонецЕсли;
		
		Если ТипОснования = Тип("ДокументСсылка.РеализацияТоваров")
			ИЛИ ТипОснования = Тип("ДокументСсылка.ВозвратТоваровПоставщику") 
			ИЛИ ТипОснования = Тип("ДокументСсылка.ЧекККМ") Тогда
			
			Если ТипОснования = Тип("ДокументСсылка.ЧекККМ") Тогда
				ПроверитьВозможностьВводаНаОснованииЧекККМ(ДанныеЗаполнения);
			КонецЕсли;
			
			ЗаполнитьПоПоступлениюОплатыОтКлиентаИВозвратаДенежныхСредствОтПоставщика(
				ДанныеЗаполнения,
				ДанныеЗаполнения);
		ИначеЕсли ТипОснования = Тип("ДокументСсылка.ЗаказПокупателя") Тогда
			ЗаполнитьПоПоступлениюОплатыОтКлиентаПоЗаказуПокупателя(
				ДанныеЗаполнения,
				ДанныеЗаполнения);
		ИначеЕсли ТипОснования = Тип("ДокументСсылка.РасходныйКассовыйОрдер") Тогда
			ЗаполнитьПоРасходномуКассовомуОрдеру(
				ДанныеЗаполнения,
				ДанныеЗаполнения);
			
		ИначеЕсли ТипОснования = Тип("ДокументСсылка.ВыемкаДенежныхСредствИзКассыККМ") Тогда
			
			ЗаполнитьПоВыемкеДенежныхСредствИзКассыККМ(ДанныеЗаполнения, ДанныеЗаполнения);
			
		ИначеЕсли ТипОснования = Тип("ДокументСсылка.ОтчетКомитентуОПродажах") Тогда
			ЗаполнитьПоОтчетуКомитентуОПродажах(
			ДанныеЗаполнения,
			ДанныеЗаполнения);
			
		ИначеЕсли ТипОснования = Тип("ДокументСсылка.ЧекКоррекции") Тогда
			ЗаполнитьПоЧекуКоррекции(
			ДанныеЗаполнения,
			ДанныеЗаполнения);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("Структура") Тогда
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, ДанныеЗаполнения);
	КонецЕсли;
	
	ИнициализироватьДокумент(ДанныеЗаполнения);
	ОбщегоНазначенияРТ.ПроверитьИспользованиеОрганизации(,,Организация);
	ДенежныеСредстваСервер.ЗаполнитьПризнакСпособаРасчета(ЭтотОбъект);
	
	Документы.ПриходныйКассовыйОрдер.ЗаполнитьРеквитыПечатнойФормы(ЭтотОбъект);
	
КонецПроцедуры

// В обработчике события ОбработкаПроверкиЗаполнения документа выполняются следующие действия:
// - Устанавливает проверку заполнения реквизитов формы и табличной части "Расшифровка платежа".
// - Проверка соответствия организации документа и организации кассы ККМ.
// - При поступлении денег из банка, проверяется на соответствие организация документа и организация банковского счета.
Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	Перем МассивВсехРеквизитов;
	Перем МассивРеквизитовОперации;
	
	Документы.ПриходныйКассовыйОрдер.ЗаполнитьИменаРеквизитовПоХозяйственнойОперации(
		ХозяйственнаяОперация,
		МассивВсехРеквизитов,
		МассивРеквизитовОперации);
	
	МассивНепроверяемыхРеквизитов = Новый Массив;
	
	ОбщегоНазначенияРТКлиентСервер.ЗаполнитьМассивНепроверяемыхРеквизитов(
		МассивВсехРеквизитов,
		МассивРеквизитовОперации,
		МассивНепроверяемыхРеквизитов);
	
	Если ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПоступлениеОплатыОтКлиента
		Или ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПрочиеДоходы Тогда
		
		Если НЕ ПробиватьЧекиПоКассеККМ Тогда
			МассивНепроверяемыхРеквизитов.Добавить("КассаККМ");
		Иначе
			ДенежныеСредстваСервер.ПроверитьКассуККМ(
				ЭтотОбъект,
				Истина,
				Отказ);
		КонецЕсли;
	Иначе
		Если Не ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПоступлениеДенежныхСредствИзКассыККМ Тогда
			МассивНепроверяемыхРеквизитов.Добавить("КассаККМ");
		Иначе
			ДенежныеСредстваСервер.ПроверитьКассуККМ(
				ЭтотОбъект,
				Истина,
				Отказ);
		КонецЕсли;
	КонецЕсли;
	
	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты,МассивНепроверяемыхРеквизитов);
	
	ПродажиСервер.ПроверитьСистемуНалогообложения(ЭтотОбъект, Отказ);
	
	ДенежныеСредстваСервер.ПроверитьЗаполнениеРасшифровкиПлатежа(
		ЭтотОбъект,
		СуммаДокумента,
		ХозяйственнаяОперация,
		Отказ);
	
	ПроверитьБанковскийСчет(Отказ);
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Если РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения Тогда
		Если СменаЗакрыта 
			ИЛИ ПробитЧек Тогда
			Если СменаЗакрыта Тогда
				Текст = НСтр("ru = 'Кассовая смена закрыта. Операции над этим документом запрещены.'");
				РеквизитДокумента = "ОтчетОРозничныхПродажах"
			Иначе
				Текст = НСтр("ru = 'Пробит чек по документу. Операции над этим документом запрещены.'");
				РеквизитДокумента = "НомерЧекаККМ"
			КонецЕсли;
			
			ОбщегоНазначения.СообщитьПользователю(
				Текст,
				ЭтотОбъект,
				РеквизитДокумента,
				,
				Отказ);
		КонецЕсли;
	КонецЕсли;
	
	ПроведениеСервер.УстановитьРежимПроведения(Проведен, РежимЗаписи, РежимПроведения);
	
	ДополнительныеСвойства.Вставить("ЭтоНовый",    ЭтоНовый());
	ДополнительныеСвойства.Вставить("РежимЗаписи", РежимЗаписи);
	
	Если РасшифровкаПлатежа.Количество() > 0
		И (ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПоступлениеДенежныхСредствИзКассыККМ
		ИЛИ ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПоступлениеДенежныхСредствИзБанка
		ИЛИ ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПоступлениеДенежныхСредствИзДругойКассы
		ИЛИ ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПоступлениеДенежныхСредствИзДругойОрганизации) Тогда
		РасшифровкаПлатежа.Очистить();
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)
	
	ИнициализироватьДокумент();
	
КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)
	
	// Инициализация дополнительных свойств для проведения документа.
	ПроведениеСервер.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства);
	
	// Подготовка наборов записей
	ПроведениеСервер.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);
	
	СформироватьСписокРегистровДляКонтроля();
	
	// Запись наборов записей
	ПроведениеСервер.ЗаписатьНаборыЗаписей(ЭтотОбъект);
	
	ПроведениеСервер.ВыполнитьКонтрольРезультатовПроведения(ЭтотОбъект, Отказ);
	
	ПроведениеСервер.ОчиститьДополнительныеСвойстваДляПроведения(ДополнительныеСвойства);
	
	Если НЕ Отказ Тогда
		ОбменССайтомРТ.ЗаписатьСостояниеОплатыЗаказаПокупателя(ЗаказПокупателя, Ссылка, Ссылка);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Процедура проверяет организацию банковского счета на соответствие организации выбранной в документе.
//
Процедура ПроверитьБанковскийСчет(Отказ)
	
	Если ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПоступлениеДенежныхСредствИзБанка
	   И ЗначениеЗаполнено(Касса)
	   И ЗначениеЗаполнено(БанковскийСчет) Тогда
		
		РеквизитыСчета = Справочники.БанковскиеСчета.ПолучитьРеквизитыБанковскогоСчета(БанковскийСчет);
		Если Организация <> РеквизитыСчета.Организация Тогда
			Текст = НСтр("ru = 'Организация счета не соответствует организации документа'");
			ОбщегоНазначения.СообщитьПользователю(
				Текст,
				ЭтотОбъект,
				"БанковскийСчет",
				,
				Отказ);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура СформироватьСписокРегистровДляКонтроля()
	
	Массив = Новый Массив;
	
	ДополнительныеСвойства.ДляПроведения.Вставить("РегистрыДляКонтроля", Массив);
	
КонецПроцедуры

Процедура ЗаполнитьПоВыемкеДенежныхСредствИзКассыККМ(Знач ДокументОснование, ДанныеЗаполнения)
	
	// Заполним данные шапки документа.
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	&Касса                                                    КАК Касса,
	|	ДанныеДокумента.Организация                               КАК Организация,
	|	ДанныеДокумента.КассаККМ                                  КАК КассаККМ,
	|	ДанныеДокумента.ДоговорКонтрагента                        КАК ДоговорКонтрагента,
	|	ДанныеДокумента.Ссылка                                    КАК ДокументОснование,
	|	ЕСТЬNULL(ДенежныеСредстваКПоступлению.СуммаОстаток, 0.00) КАК СуммаДокумента,
	|	ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПоступлениеДенежныхСредствИзКассыККМ) КАК ХозяйственнаяОперация,
	|	ДанныеДокумента.КассаККМ.Магазин                          КАК Магазин
	|	
	|ИЗ
	|	Документ.ВыемкаДенежныхСредствИзКассыККМ КАК ДанныеДокумента
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрНакопления.ДенежныеСредстваКПоступлениюНаличные.Остатки(,
	|			ДокументПередачи = &Ссылка
	|		) КАК ДенежныеСредстваКПоступлению
	|	ПО
	|		ИСТИНА
	|
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &Ссылка
	|");
	Запрос.УстановитьПараметр("Ссылка", ДокументОснование);
	
	Если Касса.Владелец = ДокументОснование.Организация 
		И Касса.Магазин = ДокументОснование.КассаККМ.Магазин Тогда
		Запрос.УстановитьПараметр("Касса", Касса);
	Иначе
		Запрос.УстановитьПараметр("Касса", Неопределено);
	КонецЕсли;
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ДанныеЗаполнения = Новый Структура;
	Для Каждого Колонка Из РезультатЗапроса.Колонки Цикл
		ДанныеЗаполнения.Вставить(Колонка.Имя);
	КонецЦикла;
	
	Если РезультатЗапроса.Пустой() Тогда
		Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не требуется вводить приходный кассовый ордер на основании документа %1'"),
			ДокументОснование);
			
		ВызватьИсключение Текст;
	Иначе
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		ЗаполнитьЗначенияСвойств(ДанныеЗаполнения, Выборка);
		ДенежныеСредстваСервер.ЗаполнитьРеквизитыДокументаПоФормеОплаты(ДанныеЗаполнения, Перечисления.ФормыОплаты.Наличная);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьПоРасходномуКассовомуОрдеру(Знач ДокументОснование, ДанныеЗаполнения)
	
	Если ДокументОснование.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВыдачаДенежныхСредствВДругуюКассу
		ИЛИ ДокументОснование.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВыдачаДенежныхСредствВДругуюОрганизацию
		ИЛИ ДокументОснование.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВнутренняяПередачаДенежныхСредств Тогда
		
		// Заполним данные шапки документа.
		Запрос = Новый Запрос;
		Запрос.Текст =
			"ВЫБРАТЬ
			|	ВЫБОР
			|		КОГДА ДанныеДокумента.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВыдачаДенежныхСредствВДругуюКассу)
			|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПоступлениеДенежныхСредствИзДругойКассы)
			|		КОГДА ДанныеДокумента.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВыдачаДенежныхСредствВДругуюОрганизацию)
			|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПоступлениеДенежныхСредствИзДругойОрганизации)
			|		КОГДА ДанныеДокумента.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВнутренняяПередачаДенежныхСредств)
			|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВнутренняяПередачаДенежныхСредств)
			|	КОНЕЦ КАК ХозяйственнаяОперация,
			|	ВЫБОР
			|		КОГДА ДанныеДокумента.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВыдачаДенежныхСредствВДругуюКассу)
			|				ИЛИ ДанныеДокумента.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВыдачаДенежныхСредствВДругуюОрганизацию)
			|				ИЛИ ДанныеДокумента.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВнутренняяПередачаДенежныхСредств)
			|			ТОГДА ДенежныеСредстваКПоступлению.ДокументПередачи.КассаПолучатель
			|		ИНАЧЕ НЕОПРЕДЕЛЕНО
			|	КОНЕЦ КАК Касса,
			|	ВЫБОР
			|		КОГДА ДанныеДокумента.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВыдачаДенежныхСредствВДругуюОрганизацию)
			|				ИЛИ ДанныеДокумента.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВнутренняяПередачаДенежныхСредств)
			|			ТОГДА ДенежныеСредстваКПоступлению.ДокументПередачи.КассаПолучатель.Владелец
			|		ИНАЧЕ ДанныеДокумента.Организация
			|	КОНЕЦ КАК Организация,
			|	ДанныеДокумента.Ссылка КАК ДокументОснование,
			|	ЕСТЬNULL(ДенежныеСредстваКПоступлению.СуммаОстаток, 0) КАК СуммаДокумента,
			|	ВЫБОР
			|		КОГДА ДанныеДокумента.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВыдачаДенежныхСредствВДругуюКассу)
			|			ТОГДА ДанныеДокумента.ДоговорКонтрагента
			|		ИНАЧЕ НЕОПРЕДЕЛЕНО
			|	КОНЕЦ КАК ДоговорКонтрагента
			|ИЗ
			|	Документ.РасходныйКассовыйОрдер КАК ДанныеДокумента
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ДенежныеСредстваКПоступлениюНаличные.Остатки(, ДокументПередачи = &Ссылка) КАК ДенежныеСредстваКПоступлению
			|		ПО (ИСТИНА)
			|ГДЕ
			|	ДанныеДокумента.Ссылка = &Ссылка
			|	И ДанныеДокумента.ХозяйственнаяОперация В (ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВыдачаДенежныхСредствВДругуюКассу), ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВыдачаДенежныхСредствВДругуюОрганизацию), ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВнутренняяПередачаДенежныхСредств))
			|	И НЕ ДанныеДокумента.КассаПолучатель.КассаУправляющейСистемы";
		
		Запрос.УстановитьПараметр("Ссылка", ДокументОснование);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		ДанныеЗаполнения = Новый Структура;
		Для Каждого Колонка Из РезультатЗапроса.Колонки Цикл
			ДанныеЗаполнения.Вставить(Колонка.Имя);
		КонецЦикла;
		
		Если РезультатЗапроса.Пустой() Тогда
			Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не требуется вводить приходный кассовый ордер на основании документа %1'"),
				ДокументОснование);
			ВызватьИсключение Текст;
		Иначе
			Выборка = РезультатЗапроса.Выбрать();
			Выборка.Следующий();
			ЗаполнитьЗначенияСвойств(ДанныеЗаполнения, Выборка);
			
		КонецЕсли;
	ИначеЕсли ДокументОснование.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВыдачаДенежныхСредствВКассуККМ Тогда
		Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не требуется вводить приходный кассовый ордер на основании документа %1'"),
			ДокументОснование);
		ВызватьИсключение Текст;
	Иначе
		Если ДокументОснование.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ОплатаПоставщику Тогда
			ДанныеЗаполнения = Новый Структура();
			ДанныеЗаполнения.Вставить("Касса", ДокументОснование.Касса);
			ДанныеЗаполнения.Вставить("Организация", ДокументОснование.Организация);
			ДанныеЗаполнения.Вставить("ДокументОснование", ДокументОснование);
			ДанныеЗаполнения.Вставить("ХозяйственнаяОперация", Перечисления.ХозяйственныеОперации.ВозвратДенежныхСредствОтПоставщика);
			ДанныеЗаполнения.Вставить("Контрагент", ДокументОснование.Контрагент);
			ДанныеЗаполнения.Вставить("СуммаДокумента", ДокументОснование.РасшифровкаПлатежа.Итог("Сумма"));
			
			СтатьяДвиженияДенежныхСредств = ЗначениеНастроекПовтИсп.СтатьяДвиженияДенежныхСредств(ДанныеЗаполнения.ХозяйственнаяОперация);
			СтрокаПлатеж = РасшифровкаПлатежа.Добавить();
			СтрокаПлатеж.ДокументРасчетовСКонтрагентом = ДокументОснование;
			СтрокаПлатеж.СтатьяДвиженияДенежныхСредств = СтатьяДвиженияДенежныхСредств;
			СтрокаПлатеж.Сумма                         = ДокументОснование.РасшифровкаПлатежа.Итог("Сумма");
			
		Иначе
			Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не требуется вводить приходный кассовый ордер на основании документа %1'"),
				ДокументОснование);
			ВызватьИсключение Текст;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьПоПоступлениюОплатыОтКлиентаИВозвратаДенежныхСредствОтПоставщика(Знач ДокументОснование, ДанныеЗаполнения)
	Запрос = Новый Запрос();
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ДокументОснования.Ссылка                                КАК ДокументОснование,
	|	МАКСИМУМ(ДокументОснования.Контрагент)                  КАК Контрагент,
	|	МАКСИМУМ(ДокументОснования.Организация)                 КАК Организация,
	|	МАКСИМУМ(ДокументОснования.Магазин)                     КАК Магазин,
	|	МАКСИМУМ(ДокументОснования.СистемаНалогообложения)      КАК СистемаНалогообложения,
	|	МАКСИМУМ(ДокументОснования.ЦенаВключаетНДС)             КАК ЦенаВключаетНДС,
	|	СУММА(ЕСТЬNULL(ТоварыДокументОснования.Сумма, ДокументОснования.СуммаДокумента)) КАК Сумма,
	|	СУММА(ЕСТЬNULL(ТоварыДокументОснования.СуммаНДС, 0.00)) КАК СуммаНДС
	|ПОМЕСТИТЬ ДанныеДокумента
	|ИЗ
	|	Документ.РеализацияТоваров КАК ДокументОснования
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	Документ.РеализацияТоваров.Товары КАК ТоварыДокументОснования
	|ПО
	|	ТоварыДокументОснования.Ссылка = &Ссылка
	|ГДЕ
	|	ДокументОснования.Ссылка = &Ссылка
	|СГРУППИРОВАТЬ ПО
	|	ДокументОснования.Ссылка
	|;
	|ВЫБРАТЬ
	|	ДанныеДокумента.ДокументОснование            КАК ДокументОснование,
	|	ДанныеДокумента.Контрагент                   КАК Контрагент,
	|	ДанныеДокумента.Организация                  КАК Организация,
	|	ДанныеДокумента.Магазин                      КАК Магазин,
	|	ДанныеДокумента.СистемаНалогообложения       КАК СистемаНалогообложения,
	|	ДанныеДокумента.ЦенаВключаетНДС              КАК ЦенаВключаетНДС,
	|	&ХозяйственнаяОперация                       КАК ХозяйственнаяОперация,
	|	ВЫБОР	КОГДА ДанныеДокумента.ЦенаВключаетНДС
	|			ТОГДА ДанныеДокумента.Сумма
	|			ИНАЧЕ ДанныеДокумента.Сумма + ДанныеДокумента.СуммаНДС
	|	КОНЕЦ                                        КАК СуммаДокумента,
	|	ЕСТЬNULL(Контрагенты.Наименование, "")       КАК Наименование,
	|	ЕСТЬNULL(Контрагенты.НаименованиеПолное, "") КАК НаименованиеПолное
	|ИЗ
	|	ДанныеДокумента КАК ДанныеДокумента
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	Справочник.Контрагенты КАК Контрагенты
	|ПО
	|	Контрагенты.Ссылка = ДанныеДокумента.Контрагент
	|";
	Запрос.УстановитьПараметр("Ссылка", ДокументОснование);
	
	
	Если ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ВозвратТоваровПоставщику") Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "Документ.РеализацияТоваров", "Документ.ВозвратТоваровПоставщику");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ДокументОснования.СистемаНалогообложения", "ЗНАЧЕНИЕ(Перечисление.ТипыСистемНалогообложенияККТ.ПустаяСсылка)");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "Документ.РеализацияТоваров.Товары", "Документ.ВозвратТоваровПоставщику.Товары");
		Запрос.УстановитьПараметр("ХозяйственнаяОперация", Перечисления.ХозяйственныеОперации.ВозвратДенежныхСредствОтПоставщика);
	Иначе
		Если ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ЧекККМ") Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "Документ.РеализацияТоваров", "Документ.ЧекККМ");
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "Документ.РеализацияТоваров.Товары", "Документ.ЧекККМ.Товары");
			ЗаказПокупателя = ДокументОснование.ЗаказПокупателя;
		ИначеЕсли ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.РеализацияТоваров") Тогда
			ЗаказПокупателя = ДокументОснование.ЗаказПокупателя;
		КонецЕсли;
		Запрос.УстановитьПараметр("ХозяйственнаяОперация", Перечисления.ХозяйственныеОперации.ПоступлениеОплатыОтКлиента);
	КонецЕсли;
	
	РезультатЗапроса = Запрос.ВыполнитьПакет()[1];
	ДанныеЗаполнения = Новый Структура();
	
	Для Каждого РеквизитЗаполнения Из РезультатЗапроса.Колонки Цикл
		ДанныеЗаполнения.Вставить(РеквизитЗаполнения.Имя);
	КонецЦикла;
	ВыборкаДанныхЗаполнения = РезультатЗапроса.Выбрать();
	ВыборкаДанныхЗаполнения.Следующий();
	ЗаполнитьЗначенияСвойств(ДанныеЗаполнения, ВыборкаДанныхЗаполнения);
	
	СуммаДокументаОснования = ВыборкаДанныхЗаполнения.СуммаДокумента;
	
	Если Не ЗначениеЗаполнено(Касса) Тогда
		ДанныеЗаполнения.Вставить("Касса");
		ДенежныеСредстваСервер.ЗаполнитьРеквизитыДокументаПоФормеОплаты(ДанныеЗаполнения, Перечисления.ФормыОплаты.Наличная);
	КонецЕсли;
	
	СтатьяДвиженияДенежныхСредств = ЗначениеНастроекПовтИсп.СтатьяДвиженияДенежныхСредств(ДанныеЗаполнения.ХозяйственнаяОперация);
	
	СтрокаПлатеж = РасшифровкаПлатежа.Добавить();
	СтрокаПлатеж.СтатьяДвиженияДенежныхСредств = СтатьяДвиженияДенежныхСредств;
	СтрокаПлатеж.ДокументРасчетовСКонтрагентом = ДокументОснование;
	СтрокаПлатеж.Сумма                         = СуммаДокументаОснования;
	
КонецПроцедуры

Процедура ЗаполнитьПоПоступлениюОплатыОтКлиентаПоЗаказуПокупателя(Знач ДокументОснование, ДанныеЗаполнения)
	
	ДанныеЗаполнения = Новый Структура();
	ФинансыСервер.ЗаполнениеРасшифровкиПлатежаПоЗаказуПокупателя(ЭтотОбъект, ДокументОснование, ДанныеЗаполнения);
	
	Если Не ЗначениеЗаполнено(Касса) Тогда
		ДанныеЗаполнения.Вставить("Касса");
		ДенежныеСредстваСервер.ЗаполнитьРеквизитыДокументаПоФормеОплаты(ДанныеЗаполнения, Перечисления.ФормыОплаты.Наличная);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьПоОтчетуКомитентуОПродажах(Знач ДокументОснование, ДанныеЗаполнения)
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ
	|	ДокументОснования.Ссылка КАК ДокументОснование,
	|	МАКСИМУМ(ДокументОснования.Контрагент) КАК Контрагент,
	|	МАКСИМУМ(ДокументОснования.Организация) КАК Организация,
	|	МАКСИМУМ(ДокументОснования.Магазин) КАК Магазин,
	|	МАКСИМУМ(ДокументОснования.ЦенаВключаетНДС) КАК ЦенаВключаетНДС,
	|	МАКСИМУМ(ЕСТЬNULL(ДокументОснования.СуммаВознаграждения, 0)) КАК Сумма,
	|	МАКСИМУМ(ЕСТЬNULL(ДокументОснования.СуммаНДСВознаграждения, 0)) КАК СуммаНДС
	|ПОМЕСТИТЬ ДанныеДокумента
	|ИЗ
	|	Документ.ОтчетКомитентуОПродажах КАК ДокументОснования
	|ГДЕ
	|	ДокументОснования.Ссылка = &Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	ДокументОснования.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеДокумента.ДокументОснование КАК ДокументОснование,
	|	ДанныеДокумента.Контрагент КАК Контрагент,
	|	ДанныеДокумента.Организация КАК Организация,
	|	ДанныеДокумента.Магазин КАК Магазин,
	|	ДанныеДокумента.ЦенаВключаетНДС КАК ЦенаВключаетНДС,
	|	&ХозяйственнаяОперация КАК ХозяйственнаяОперация,
	|	ВЫБОР
	|		КОГДА ДанныеДокумента.ЦенаВключаетНДС
	|			ТОГДА ДанныеДокумента.Сумма
	|		ИНАЧЕ ДанныеДокумента.Сумма + ДанныеДокумента.СуммаНДС
	|	КОНЕЦ КАК СуммаДокумента,
	|	ЕСТЬNULL(Контрагенты.Наименование, "")               КАК Наименование,
	|	            ЕСТЬNULL(Контрагенты.НаименованиеПолное, "") КАК НаименованиеПолное
	|ИЗ
	|	ДанныеДокумента КАК ДанныеДокумента
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Контрагенты КАК Контрагенты
	|		ПО (Контрагенты.Ссылка = ДанныеДокумента.Контрагент)";
	
	Запрос.УстановитьПараметр("Ссылка", ДокументОснование);	
	Запрос.УстановитьПараметр("ХозяйственнаяОперация", Перечисления.ХозяйственныеОперации.ВознаграждениеОтКомитента);
	
	
	РезультатЗапроса = Запрос.ВыполнитьПакет()[1];
	ДанныеЗаполнения = Новый Структура();
	
	Для Каждого РеквизитЗаполнения Из РезультатЗапроса.Колонки Цикл
		ДанныеЗаполнения.Вставить(РеквизитЗаполнения.Имя);
	КонецЦикла;
	ВыборкаДанныхЗаполнения = РезультатЗапроса.Выбрать();
	ВыборкаДанныхЗаполнения.Следующий();
	ЗаполнитьЗначенияСвойств(ДанныеЗаполнения, ВыборкаДанныхЗаполнения);
	
	СуммаДокументаОснования = ВыборкаДанныхЗаполнения.СуммаДокумента;
	
	Если Не ЗначениеЗаполнено(Касса) Тогда
		ДанныеЗаполнения.Вставить("Касса");
		ДенежныеСредстваСервер.ЗаполнитьРеквизитыДокументаПоФормеОплаты(ДанныеЗаполнения, Перечисления.ФормыОплаты.Наличная);
	КонецЕсли;
	
	СтатьяДвиженияДенежныхСредств = ЗначениеНастроекПовтИсп.СтатьяДвиженияДенежныхСредств(ДанныеЗаполнения.ХозяйственнаяОперация);
	
	СтрокаПлатеж = РасшифровкаПлатежа.Добавить();
	СтрокаПлатеж.СтатьяДвиженияДенежныхСредств = СтатьяДвиженияДенежныхСредств;
	СтрокаПлатеж.ДокументРасчетовСКонтрагентом = ДокументОснование;
	СтрокаПлатеж.ПризнакСпособаРасчета         = Перечисления.ПризнакиСпособаРасчета.ОплатаКредита;
	СтрокаПлатеж.Сумма                         = СуммаДокументаОснования;
	
КонецПроцедуры

Процедура ЗаполнитьПоЧекуКоррекции(Знач ДокументОснование, ДанныеЗаполнения)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЧекКоррекции.Организация КАК Организация,
	|	ЧекКоррекции.СистемаНалогообложения КАК СистемаНалогообложения,
	|	ЧекКоррекции.ДокументОснование КАК ДокументОснование,
	|	СУММА(ЧекКоррекцииОплаты.Сумма) КАК Сумма
	|ИЗ
	|	Документ.ЧекКоррекции КАК ЧекКоррекции
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЧекКоррекции.Оплата КАК ЧекКоррекцииОплаты
	|		ПО (ЧекКоррекцииОплаты.Ссылка = ЧекКоррекции.Ссылка)
	|ГДЕ
	|	ЧекКоррекции.Ссылка = &Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	ЧекКоррекции.Организация,
	|	ЧекКоррекции.СистемаНалогообложения,
	|	ЧекКоррекции.ДокументОснование";
	
	Запрос.УстановитьПараметр("Ссылка", ДокументОснование);
	
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	
	Выборка.Следующий();
	
	ДанныеЗаполнения = Новый Структура();
	ДанныеЗаполнения.Вставить("Касса", Справочники.Кассы.КассаПоУмолчанию(Выборка.Организация));
	ДанныеЗаполнения.Вставить("Организация", Выборка.Организация);
	ДанныеЗаполнения.Вставить("ДокументОснование", Выборка.ДокументОснование);
	ДанныеЗаполнения.Вставить("ХозяйственнаяОперация", Перечисления.ХозяйственныеОперации.КорректировкаВыручки);
	ДанныеЗаполнения.Вставить("СуммаДокумента", Выборка.Сумма);
	ДанныеЗаполнения.Вставить("СистемаНалогообложения", Выборка.СистемаНалогообложения);
	
КонецПроцедуры

Процедура ИнициализироватьДокумент(ДанныеЗаполнения = Неопределено)
	
	// Определим Магазин.
	Магазин = Неопределено;
	Если ТипЗнч(ДанныеЗаполнения) = Тип("Структура") Тогда
		ДанныеЗаполнения.Свойство("Магазин", Магазин);
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(Магазин) Тогда
		Документы.ПриходныйКассовыйОрдер.ЗаполнитьМагазин(ЭтотОбъект, Магазин);
	КонецЕсли;
	
	// Заполним реквизиты, не подлежащие копированию.
	ПробитЧек               = Ложь;
	СменаЗакрыта            = Ложь;
	НомерЧекаККМ            = 0;
	ОтчетОРозничныхПродажах = Документы.ОтчетОРозничныхПродажах.ПустаяСсылка();
	Ответственный           = Пользователи.ТекущийПользователь();
	
	// Заполним реквизиты значениями по умолчанию (при необходимости).
	Магазин     = ЗначениеНастроекПовтИсп.МагазинПоУмолчанию(Магазин);
	Организация = ЗначениеНастроекПовтИсп.ОрганизацияПоУмолчанию(Организация, Ответственный);
	Касса       = ЗначениеНастроекПовтИсп.КассаОрганизацииПоУмолчанию(Организация, , Касса, Магазин, Ответственный);
	Если ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПоступлениеДенежныхСредствИзБанка Тогда
		БанковскийСчет = ЗначениеНастроекПовтИсп.БанковскийСчетОрганизацииПоУмолчанию(
			Организация,
			Перечисления.ФормыОплаты.Безналичная,
			БанковскийСчет);
	ИначеЕсли ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПоступлениеДенежныхСредствИзКассыККМ Тогда
		КассаККМ = ЗначениеНастроекПовтИсп.КассаККМПоУмолчанию(Организация, Магазин, КассаККМ, Ответственный);
	КонецЕсли;
	
	ДенежныеСредстваСервер.ЗаполнитьСистемуНалогообложения(ЭтотОбъект);
	
КонецПроцедуры

Процедура ПроверитьВозможностьВводаНаОснованииЧекККМ(ДанныеЗаполнения);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ЧекККМОплата.ВидОплаты
	|ИЗ
	|	Документ.ЧекККМ.Оплата КАК ЧекККМОплата
	|ГДЕ
	|	ЧекККМОплата.Ссылка = &Ссылка
	|	И ЧекККМОплата.ВидОплаты.ТипОплаты = &ТипОплаты";
	
	Запрос.УстановитьПараметр("Ссылка"   , ДанныеЗаполнения);
	Запрос.УстановитьПараметр("ТипОплаты", Перечисления.ТипыОплатЧекаККМ.ВРассрочку);
	
	Если Запрос.Выполнить().Пустой() Тогда
		
		ТекстИсключения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
														НСтр("ru = 'По чеку %1 отсутствуют оплаты в рассрочку.'"), ДанныеЗаполнения);
		
		ВызватьИсключение ТекстИсключения;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли
