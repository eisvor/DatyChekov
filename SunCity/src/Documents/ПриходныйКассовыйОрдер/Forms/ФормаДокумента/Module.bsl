#Область ОписаниеПеременных

// Используется механизмом обработки изменения реквизитов ТЧ.
&НаКлиенте
Перем КэшированныеЗначения;

&НаКлиенте
Перем ПредыдущиеЗначения; // Используется для отслеживания изменения ключевых реквизитов.

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.ДатыЗапретаИзменения
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменения
	
	ОбщегоНазначенияРТКлиентСервер.ОбновитьСостояниеДокумента(Объект, Элементы.КартинкаСостоянияДокумента.Подсказка,
		КартинкаСостоянияДокумента, РазрешеноПроведение);
	
	
	ВходитВКассовуюКнигу = ФинансыСервер.ОпределитьВхождениеВКассовуюКнигу(Объект.Ссылка);
	
	УстановитьДоступностьЭлементовПоСтатусуСервер();
	
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	// Пропускаем инициализацию, чтобы гарантировать получение формы при передаче параметра "АвтоТест".
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	ОбщегоНазначенияРТ.ЗаполнитьШапкуДокумента(Объект, КартинкаСостоянияДокумента,
		Элементы.КартинкаСостоянияДокумента.Подсказка, РазрешеноПроведение);
	
	// Инициализация реквизитов формы.
	ИспользоватьПодключаемоеОборудование = ЗначениеНастроекВызовСервера.ИспользоватьПодключаемоеОборудование();
	
	ЭтоФискальнаяОперация = Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПоступлениеОплатыОтКлиента
		ИЛИ Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПрочиеДоходы
		ИЛИ Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВознаграждениеОтКомитента;
	
	СтатьяДвиженияДенежныхСредств = ЗначениеНастроекПовтИсп.СтатьяДвиженияДенежныхСредств(Объект.ХозяйственнаяОперация);
	
	Документы.ПриходныйКассовыйОрдер.ЗаполнитьМагазин(Объект, Магазин);
	
	ЗаполнитьСписокТелефоновКонтрагента();
	
	ДобавитьСтрокуВРасшифровкуПриНеобходимости();
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ОпределитьРучноеИзменениеРеквизитовПечатнойФормы();
	Иначе
		Если ЗначениеЗаполнено(Объект.Касса) Тогда
			КассаПриИзмененииСервер();
		КонецЕсли;
	КонецЕсли;
	
	УстановитьСНОРасшифровкиНаСервере();
	
	// Установим визуальное представление.
	УправлениеЭлементамиФормы();
	УправлениеЭлементамиРасшифровкиПлатежа(ЭтотОбъект);
	
	//ИИН/БИН в чеке
	Если ЗначениеЗаполнено(Объект.Контрагент) И Не ЗначениеЗаполнено(Объект.ИИН) 
		И Объект.Ссылка.Пустая() Тогда   //при вводе на основании
		
		Если Объект.Контрагент.ЮрФизЛицо = ПредопределенноеЗначение("Перечисление.ЮрФизЛицо.ФизЛицо") Тогда
			Объект.ИИН = Объект.Контрагент.ФизЛицо.ИНН;
		Иначе
			Объект.ИИН = Объект.Контрагент.ИНН;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	ПредыдущиеЗначения = Новый Структура(
		"Контрагент,
		|Организация,
		|Касса");
	ЗаполнитьЗначенияСвойств(ПредыдущиеЗначения, Объект);
	ПредыдущиеЗначения.Вставить("Магазин", Магазин);
	
	Если ЗначениеЗаполнено(Объект.КассаККМ) И НомерДокументаКассыККМ[Объект.КассаККМ] = Неопределено Тогда
		ОбщегоНазначенияРТКлиент.ЗаполнитьНомерДокументаКассыККМ(Объект.КассаККМ);
	КонецЕсли;
	
	ПроверитьСНО();
	
	ПредставитьТелефонИEmailКлиент();
	
	УправлениеЭлементомДокументРасчета();
	
	УправлениеЭлементомКассаККМ();
	
	УправлениеЭлементамиЗаказПокупателя();
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	// &ЗамерПроизводительности	
    Замер = ОценкаПроизводительностиРТКлиент.НачатьЗамер(Ложь, 
	                                            "Документ.ПриходныйКассовыйОрдер.ФормаДокумента.Запись",
                                                          Ложь);
	
	ПараметрыЗаписи.Вставить("Замер", Замер);	
	
	Если Модифицированность Тогда
		ФинансыКлиент.ПересчетСуммыДокументаПоРасшифровкеПлатежа(Объект, ЭтаФорма, Отказ, ПараметрыЗаписи);
	КонецЕсли;
	
	Если ОтправлятьЧек = "НеОтправлять" Тогда
		Объект.Телефон = "";
		Объект.АдресЭП = "";
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	Если ТекущийОбъект.Ответственный.Пустая() Тогда
		ТекущийОбъект.Ответственный = Пользователи.ТекущийПользователь()
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	УстановитьДоступностьЭлементовПоСтатусуСервер();
	
	УстановитьСНОРасшифровкиНаСервере();
	
	УстановитьДоступностьЭлементовИФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	ОбщегоНазначенияРТКлиентСервер.ОбновитьСостояниеДокумента(
		Объект,
		Элементы.КартинкаСостоянияДокумента.Подсказка,
		КартинкаСостоянияДокумента,
		РазрешеноПроведение);
	
	Оповестить("ЗаписанПриходныйКассовыйОрдер");
	
	Если ЗначениеЗаполнено(Объект.ЗаказПокупателя) Тогда
		Оповестить("ЗаказПокупателя_Состояния", Объект.ЗаказПокупателя);
	КонецЕсли;
	
	// &ЗамерПроизводительности						
	ОценкаПроизводительностиРТКлиент.ЗакончитьЗамер(ПараметрыЗаписи.Замер);
																
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	
	ДатаПриИзмененииНаСервере();
	ПроверитьСНО();
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	ПриИзмененииКлючевыхРеквизитов("Организация", Объект.Организация);
	
КонецПроцедуры

&НаКлиенте
Процедура КассаПриИзменении(Элемент)
	
	ПриИзмененииКлючевыхРеквизитов("Касса", Объект.Касса);
	
КонецПроцедуры

&НаКлиенте
Процедура НастройтеПечатьЧекаНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ОповещениеОЗакрытииФормыКассы = Новый ОписаниеОповещения("ОповещениеОЗакрытииФормыКассы", ЭтотОбъект);
	ПараметрыФормы = Новый Структура("Ключ", Объект.Касса);
	ОткрытьФорму("Справочник.Кассы.Форма.ФормаЭлемента", ПараметрыФормы,,,,, ОповещениеОЗакрытииФормыКассы);
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияНесоответствиеСНОНажатие(Элемент)
	
	ПроверитьСНО(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура СуммаДокументаПриИзменении(Элемент)
	
	ФинансыКлиент.ПересчетСуммыВСтрокеРасшифровкиПлатежа(Объект, Объект.СуммаДокумента);
	
	СуммаУстановленаВручную = Объект.СуммаДокумента <> 0;
	
	СуммаДокументаПриИзмененииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура СуммаДокументаПриИзмененииНаСервере()
	ДенежныеСредстваСервер.ЗаполнитьПризнакСпособаРасчета(Объект);
	Документы.ПриходныйКассовыйОрдер.ЗаполнитьРеквитыПечатнойФормы(Объект, Новый Структура("ВТомЧислеНДС"));
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентПриИзменении(Элемент)
	
	КонтрагентПриИзмененииКлиент();
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентПрочийДоходПриИзменении(Элемент)
	
	КонтрагентПриИзмененииКлиент();
	
КонецПроцедуры

&НаКлиенте
Функция ДокументОснованиеПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.ДокументОснование) Тогда
		ЗаполнитьДокументНаОснованииДокументаОснование();
	Иначе
		Если Объект.ХозяйственнаяОперация = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ПоступлениеДенежныхСредствИзКассыККМ") Тогда
			Объект.КассаККМ = ПредопределенноеЗначение("Справочник.КассыККМ.ПустаяСсылка");
		КонецЕсли;
		
		УстановитьСвязьПараметровВыбораДокументаОснованияПоХозОперации();
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура ДекорацияОтчетОРозничныхПродажахНажатие(Элемент)
	
	Если ЗначениеЗаполнено(Объект.ОтчетОРозничныхПродажах) Тогда
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Ключ", Объект.ОтчетОРозничныхПродажах);
		ПараметрыФормы.Вставить("ТекущийЭлемент", "ПрочаяВыручка");
		
		ПараметрыТекущейСтроки = Новый Структура;
		ПараметрыТекущейСтроки.Вставить("Контрагент", Объект.Контрагент);
		ПараметрыТекущейСтроки.Вставить("ХозяйственнаяОперация", Объект.ХозяйственнаяОперация);
		ПараметрыТекущейСтроки.Вставить("ВидОплаты", ПредопределенноеЗначение("Справочник.ВидыОплатЧекаККМ.Наличные"));
		
		ПараметрыФормы.Вставить("ТекущаяСтрока", ПараметрыТекущейСтроки);
		ПараметрыФормы.Вставить("ТекущийРеквизитОбъекта", "ПрочаяВыручка");
		
		ОткрытьФорму("Документ.ОтчетОРозничныхПродажах.ФормаОбъекта", ПараметрыФормы);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправлятьЧекПриИзменении(Элемент)
	
	ОтправлятьЧекПриИзмененииКлиент();
	
КонецПроцедуры

&НаКлиенте
Процедура ТелефонСтрокойПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(ТелефонСтрокой) Тогда
		ТелефонСтрокой = СтрЗаменить(ТелефонСтрокой, " ", 0);
		Объект.Телефон = ПодключаемоеОборудованиеРТКлиент.ПреобразоватьТелефонИзСтрокиМаски(ТелефонСтрокой);
		Объект.АдресЭП = "";
	Иначе
		Объект.Телефон = "";
		ТелефонСтрокой = "";
		Объект.АдресЭП = "";
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура АдресЭППриИзменении(Элемент)
	
	Если НЕ ШтрихкодированиеРТКлиентСервер.ЕмаилКорректен(Объект.АдресЭП) Тогда
	
		ТекстСообщения = НСтр("ru = 'Введён некорректный E-mail'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения,,"Объект.АдресЭП");
	
	КонецЕсли;
	
	ТелефонСтрокой = "";
	Объект.Телефон = "";
	
КонецПроцедуры

&НаКлиенте
Процедура ОснованиеПриИзменении(Элемент)
	ОснованиеУстановленоВручную = Истина;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыРасшифровкаПлатежа

&НаКлиенте
Процедура РасшифровкаПлатежаДокументРасчетовСКонтрагентомПриИзменении(Элемент)
	
	СтрокаТаблицы = Объект.РасшифровкаПлатежа[0];
	
	РасшифровкаПлатежаДокументРасчетовСКонтрагентомПриИзмененииСервер(СтрокаТаблицы.ПолучитьИдентификатор());
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура НапечататьЧек(Команда)
	
	Если Объект.ПробитЧек Тогда
		ТекстСообщения = НСтр("ru = 'Чек уже пробит на фискальном регистраторе!'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	Если ОтправлятьЧек = "НаЕмаил" 
		И НЕ ШтрихкодированиеРТКлиентСервер.ЕмаилКорректен(Объект.АдресЭП) Тогда
		
		ТекстСообщения = НСтр("ru = 'Введён некорректный E-mail'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения,,"Объект.АдресЭП");
		Возврат;
		
	КонецЕсли;
	
	ОповещениеЗавершенияПроверки = Новый ОписаниеОповещения("ПроверитьВозможностьПечатиЧекаЗавершение", ЭтотОбъект);
	ФинансыКлиент.ПроверитьВозможностьПечатиЧека(ОповещениеЗавершенияПроверки, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьРеквитыПечатнойФормы(Команда)
	ЗаполнитьРеквитыПечатнойФормыСервер();
КонецПроцедуры

&НаКлиенте
Процедура Изменить(Команда)
	УстановитьДоступностьЭлементовПоСтатусуСервер(Истина);
КонецПроцедуры

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат) Экспорт
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

&НаКлиенте
Процедура РазбитьПлатеж(Команда)
	
	ОткрытьФормуРасшифровкиПлатежа();
	
КонецПроцедуры

&НаКлиенте
Процедура НадписьСуммаДокументаНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОткрытьФормуРасшифровкиПлатежа();
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьЗаказПокупателя(Команда)
	ПоказатьЗначение(, Объект.ЗаказПокупателя);
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьЗаказПокупателя(Команда)
	
	Если НЕ ПроверитьЗаполнениеКлючевыхРеквизитов() Тогда
		Возврат;
	КонецЕсли;
	
	Если Объект.РасшифровкаПлатежа.Количество() > 1 ИЛИ Объект.СуммаДокумента > 0 Тогда
		ТекстВопроса = НСтр("ru='Список ""Расшифровка платежа"" будет перезаполнен остатками по заказу. Продолжить?'");
		
		ОбработчикОповещения = Новый ОписаниеОповещения("ПоказатьВопросВыбратьЗаказПокупателяЗавершение", ЭтотОбъект);
		ПоказатьВопрос(ОбработчикОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	Иначе
		ОткрытьФормуВыбораЗаказаПокупателя();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьЗаказПокупателя(Команда)
	
	Объект.ЗаказПокупателя = Неопределено;
	УправлениеЭлементамиЗаказПокупателя();
	
КонецПроцедуры

&НаКлиенте
Процедура ПодобратьФизЛицо(Команда)
	Оповещение = Новый ОписаниеОповещения("ВыборФизЛицаЗавершение", ЭтотОбъект);
	ФормаВыбора = ОткрытьФорму("Справочник.ФизическиеЛица.ФормаВыбора", , ЭтотОбъект,,,, Оповещение);
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область УправлениеФормой

// В процедуре выполняется установка свойств элементов формы.
//
&НаСервере
Процедура УправлениеЭлементамиФормы()
	
	Если ЗначениеЗаполнено(Объект.ОтчетОРозничныхПродажах) Тогда
		
		ТекстДекорации = НСтр("ru = '%1'");
		РеквизитыОтчета = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект.ОтчетОРозничныхПродажах, "Номер, Дата");
		
		ТекстДекорации = СтрЗаменить(ТекстДекорации, "%1", 
			ФормированиеПечатныхФормСервер.СформироватьЗаголовокДокумента(РеквизитыОтчета, НСтр("ru = 'Отчет о розничных продажах'"), "ДФ=dd.MM.yy"));
		
		Элементы.ДекорацияОтчетОРозничныхПродажах.Заголовок = ТекстДекорации;
		
	Иначе
		
		Элементы.ДекорацияОтчетОРозничныхПродажах.Видимость = Ложь;
		
	КонецЕсли;
	
	НастройтеПечатьЧека = НСтр("ru = 'Настройте печать чека по выбранной кассе'");
	
	Элементы.ДекорацияВнесенВКассовуюКнигу.Видимость = ВходитВКассовуюКнигу;
	
	УправлениеПользователями.УстановитьТолькоПросмотрДляРеквизитовТабличнойЧасти(Элементы.Дата.ТолькоПросмотр, 
		ПланыВидовХарактеристик.ПраваПользователей.ИзменятьДату);
	
	УстановитьСвязьПараметровВыбораДокументаОснованияПоХозОперации();
	УправлениеЭлементамиРасшифровкиПлатежа(ЭтотОбъект);
	
	УстановитьДоступностьБанковскогоСчета();
	
	УстановитьСвойстваЭлементовФормыПоХозяйственнойОперации();
	УстановитьДоступностьЭлементовИФормы();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьДоступностьЭлементовИФормы()
	
	ЭтотОбъект.ТолькоПросмотр = ЭтотОбъект.ТолькоПросмотр 
								ИЛИ Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.КонвертацияВалюты 
								ИЛИ Объект.ПробитЧек
								ИЛИ Объект.СменаЗакрыта;
	
	Элементы.ЗаполнитьРеквитыПечатнойФормы.Доступность = НЕ ЭтотОбъект.ТолькоПросмотр;
	
	УправлениеЭлементамиФискализации();
	
КонецПроцедуры

&НаСервере
Процедура УправлениеЭлементамиФискализации()
	
	Если ЗначениеЗаполнено(Объект.КассаККМ) Тогда
		ПодключаемоеОборудование = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.КассаККМ, "ПодключаемоеОборудование");
		ВозможностьЭлектронногоПлатежа = ПодключаемоеОборудованиеРТ.ВозможностьЭлектронногоПлатежа(ПодключаемоеОборудование);
	Иначе
		ВозможностьЭлектронногоПлатежа = Ложь;
	КонецЕсли;
	
	Элементы.ГруппаЧекККМ.Видимость       = ЭтоФискальнаяОперация И Объект.ПробиватьЧекиПоКассеККМ;
	Элементы.ГруппаОтправкаЧека.Видимость = ВозможностьЭлектронногоПлатежа;
	Элементы.ОтправлятьЧек.ТолькоПросмотр = ТолькоПросмотр;
	
	Элементы.КассаККМ.Видимость           = Элементы.КассаККМ.Видимость И НЕ ЭтоФискальнаяОперация;
	
	Элементы.РасшифровкаПлатежаПризнакСпособаРасчета.Видимость = Элементы.РасшифровкаПлатежаПризнакСпособаРасчета.Видимость И ЭтоФискальнаяОперация;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы, "ОбщаяКомандаФискальныеОперации", "Видимость", Объект.ПробитЧек);
		
	ДоступностьПечатиЧека = Объект.Проведен И НЕ ТолькоПросмотр И Объект.ПробиватьЧекиПоКассеККМ;
	ОбщегоНазначенияРТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,
		"НапечататьЧек",
		"Доступность", 
		ДоступностьПечатиЧека);
		
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеЭлементамиРасшифровкиПлатежа(Форма)
	
	Объект = Форма.Объект;
	Элементы = Форма.Элементы;
	
	ОднострочныйРежим = Объект.РасшифровкаПлатежа.Количество() <= 1;
	
	Если НЕ ОднострочныйРежим Тогда
		ПараметрыПредметаИсчисления = НСтр("ru = 'строка, строки, строк'");
		Форма.НадписьСуммаДокумента = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = '%1 %2 (%3)'"),
			Формат(Объект.СуммаДокумента, "ЧЦ=15; ЧДЦ=2; ЧН="),
			ОбщегоНазначенияРТКлиентСервер.Валюта(),
			СтроковыеФункцииКлиентСервер.ЧислоЦифрамиПредметИсчисленияПрописью(Объект.РасшифровкаПлатежа.Количество(), ПараметрыПредметаИсчисления));
	КонецЕсли;
	
	Элементы.ГруппаОдинПлатеж.Видимость        = ОднострочныйРежим;
	Элементы.ГруппаНесколькоПлатежей.Видимость = НЕ ОднострочныйРежим;
	
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура ОповещениеОЗакрытииФормыКассы(РезультатОткрытияФормы, ДополнительныеПараметры) Экспорт
	
	ПриИзмененииКлючевыхРеквизитов("Касса", Объект.Касса);
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// Управление свойствами элементов формы.

&НаСервере
Процедура УстановитьСвязьПараметровВыбораДокументаОснованияПоХозОперации()
	
	ЭтоОрганизацияИзНастроекПользователя = ?(Параметры.Свойство("Основание") И ТипЗнч(Параметры.Основание) = Тип("Структура"), Параметры.Основание.Свойство("ОрганизацияИзНастроекПользователя"), Ложь);
	ДенежныеСредстваСервер.УстановитьПараметрыВыбораКассы(Объект, Элементы.Касса, ЭтоОрганизацияИзНастроекПользователя);
	Если Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПоступлениеДенежныхСредствИзДругойКассы Тогда
		
		МассивПараметров = Новый Массив;
		МассивПараметров.Добавить(Новый СвязьПараметраВыбора("Отбор.Организация", "Объект.Организация"));
		МассивПараметров.Добавить(Новый СвязьПараметраВыбора("Отбор.КассаПолучатель", "Объект.Касса"));
		Элементы.ДокументОснование.СвязиПараметровВыбора = Новый ФиксированныйМассив(МассивПараметров);
		
		МассивПараметров = Новый Массив;
		МассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.ХозяйственнаяОперация", Перечисления.ХозяйственныеОперации.ВыдачаДенежныхСредствВДругуюКассу));
		Элементы.ДокументОснование.ПараметрыВыбора = Новый ФиксированныйМассив(МассивПараметров);
		
	ИначеЕсли Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВнутренняяПередачаДенежныхСредств Тогда
		
		МассивПараметров = Новый Массив;
		МассивПараметров.Добавить(Новый СвязьПараметраВыбора("Отбор.КассаПолучатель", "Объект.Касса"));
		Элементы.ДокументОснование.СвязиПараметровВыбора = Новый ФиксированныйМассив(МассивПараметров);
		
		МассивПараметров = Новый Массив;
		МассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.ХозяйственнаяОперация", Перечисления.ХозяйственныеОперации.ВнутренняяПередачаДенежныхСредств));
		Элементы.ДокументОснование.ПараметрыВыбора = Новый ФиксированныйМассив(МассивПараметров);
		
	ИначеЕсли Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПоступлениеДенежныхСредствИзДругойОрганизации Тогда
		
		МассивПараметров = Новый Массив;
		МассивПараметров.Добавить(Новый СвязьПараметраВыбора("Отбор.КассаПолучатель", "Объект.Касса"));
		Элементы.ДокументОснование.СвязиПараметровВыбора = Новый ФиксированныйМассив(МассивПараметров);
		
		МассивПараметров = Новый Массив;
		МассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.ХозяйственнаяОперация", Перечисления.ХозяйственныеОперации.ВыдачаДенежныхСредствВДругуюОрганизацию));
		Элементы.ДокументОснование.ПараметрыВыбора = Новый ФиксированныйМассив(МассивПараметров);
		
	ИначеЕсли Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПоступлениеДенежныхСредствИзКассыККМ Тогда
		
		МассивПараметров = Новый Массив;
		МассивПараметров.Добавить(Новый СвязьПараметраВыбора("Отбор.Организация", "Объект.Организация", РежимИзмененияСвязанногоЗначения.Очищать));
		Элементы.ДокументОснование.СвязиПараметровВыбора = Новый ФиксированныйМассив(МассивПараметров);
		
		МассивПараметров = Новый Массив();
		МассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.Организация", "Объект.Организация"));
		НовыеПараметры = Новый ФиксированныйМассив(МассивПараметров);
		Элементы.ДокументОснование.ПараметрыВыбора = НовыеПараметры;
		
		Если ЗначениеЗаполнено(Магазин) Тогда
			
			МассивПараметров = Новый Массив();
			МассивПараметров.Добавить(Новый СвязьПараметраВыбора("Отбор.Магазин" , "Магазин"           , РежимИзмененияСвязанногоЗначения.Очищать));
			МассивПараметров.Добавить(Новый СвязьПараметраВыбора("Отбор.Владелец", "Объект.Организация", РежимИзмененияСвязанногоЗначения.Очищать));
			Элементы.Касса.СвязиПараметровВыбора = Новый ФиксированныйМассив(МассивПараметров);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьСвойстваЭлементовФормыПоХозяйственнойОперации()
	
	УстановитьВидимостьЭлементамПоХозяйственнойОперации();
	УстановитьОграничениеТипаПоХозяйственнойОперации();
	УстановитьПараметрыВыбораКонтрагента();
	
КонецПроцедуры

// Процедура ограничивает выбора типа для элементов формы
// РасшифровкаПлатежаДокументРасчетовСКонтрагентом
// ДокументОснование.
&НаСервере
Процедура УстановитьОграничениеТипаПоХозяйственнойОперации()
	
	// Ограничим тип документа расчетов в зависимости от хоз. операции.
	ДоступныеТипы = ДенежныеСредстваКлиентСервер.ДоступныеТипыДокументовРасчета(Объект.ХозяйственнаяОперация, ТипЗнч(Объект.Ссылка));
	Если ДоступныеТипы.Количество() > 0 Тогда
		Элементы.РасшифровкаПлатежаДокументРасчетовСКонтрагентом.ВыбиратьТип = ДоступныеТипы.Количество() > 1;
		Элементы.РасшифровкаПлатежаДокументРасчетовСКонтрагентом.ОграничениеТипа = Новый ОписаниеТипов(ДоступныеТипы);
	КонецЕсли;
	
	МассивТиповОграниченийДокументРасходаИзКассы = Документы.ПриходныйКассовыйОрдер.ОграничениеТипаДокументаОснованияРасходаИзКассы(Объект.ХозяйственнаяОперация);
	Если МассивТиповОграниченийДокументРасходаИзКассы.Количество() > 0 Тогда
		Элементы.ДокументОснование.ВыбиратьТип = МассивТиповОграниченийДокументРасходаИзКассы.Количество() > 1;
		Элементы.ДокументОснование.ОграничениеТипа = Новый ОписаниеТипов(МассивТиповОграниченийДокументРасходаИзКассы);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьПараметрыВыбораКонтрагента()
	
	МассивПараметров = Новый Массив();
	ПараметрВыбораТипаКонтрагента    = Неопределено;
	ПараметрВыбораСтатусаКонтрагента = Неопределено;
	
	Если Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПоступлениеОплатыОтКлиента Тогда
		ПараметрВыбораТипаКонтрагента = Новый ПараметрВыбора("Отбор.Покупатель", Истина);
		
		МассивПравовыхСтатусов = Новый Массив;
		МассивПравовыхСтатусов.Добавить(Перечисления.ЮрФизЛицо.ИндивидуальныйПредприниматель);
		МассивПравовыхСтатусов.Добавить(Перечисления.ЮрФизЛицо.ЮрЛицо);
		МассивПравовыхСтатусов.Добавить(Перечисления.ЮрФизЛицо.ЮрЛицоНеРезидент);
		МассивПравовыхСтатусов.Добавить(Перечисления.ЮрФизЛицо.ФизЛицо);
		ПараметрВыбораСтатусаКонтрагента = Новый ПараметрВыбора("Отбор.ЮрФизЛицо", МассивПравовыхСтатусов);
		
	ИначеЕсли Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратДенежныхСредствОтПоставщика
		ИЛИ Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВознаграждениеОтКомитента Тогда
		ПараметрВыбораТипаКонтрагента = Новый ПараметрВыбора("Отбор.Поставщик", Истина);
	КонецЕсли;
	
	Если ПараметрВыбораТипаКонтрагента <> Неопределено Тогда 
		МассивПараметров.Добавить(ПараметрВыбораТипаКонтрагента);
	КонецЕсли;
	
	Если ПараметрВыбораСтатусаКонтрагента <> Неопределено Тогда 
		МассивПараметров.Добавить(ПараметрВыбораСтатусаКонтрагента);
	КонецЕсли;
	
	Если МассивПараметров.Количество() > 0 Тогда 
		ПараметрыВыбораМассив = Новый ФиксированныйМассив(МассивПараметров);
		Элементы.Контрагент.ПараметрыВыбора = ПараметрыВыбораМассив;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьЭлементамПоХозяйственнойОперации()

	Перем МассивВсехРеквизитов;
	Перем МассивРеквизитовОперации;
	
	Документы.ПриходныйКассовыйОрдер.ЗаполнитьИменаРеквизитовПоХозяйственнойОперации(
		Объект.ХозяйственнаяОперация,
		МассивВсехРеквизитов,
		МассивРеквизитовОперации);

	ОбщегоНазначенияРТ.УстановитьВидимостьЭлементовПоМассиву(
		Элементы,
		МассивВсехРеквизитов,
		МассивРеквизитовОперации);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьДоступностьБанковскогоСчета()
	
	Если Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПоступлениеДенежныхСредствИзБанка Тогда
		Элементы.БанковскийСчет.ТолькоПросмотр = НЕ ЗначениеЗаполнено(Объект.Организация);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьДоступностьЭлементовПоСтатусуСервер(РазрешитьРедактирование = Ложь)
	
	Если НЕ ВходитВКассовуюКнигу Тогда
		Элементы.ФормаИзменить.Видимость = Ложь;
		Возврат;
	Иначе
		Элементы.ФормаИзменить.Видимость = Истина;
	КонецЕсли;
	
	ТолькоПросмотрЭлементов = ВходитВКассовуюКнигу И Объект.Проведен;
	
	Элементы.ФормаИзменить.Доступность = ТолькоПросмотрЭлементов;
	
	Если РазрешитьРедактирование Тогда
		ТолькоПросмотрЭлементов = Ложь;
	КонецЕсли;
	
	МассивЭлементов = Новый Массив;
	
	// Элементы управления шапки
		
	МассивЭлементов.Добавить("Дата");
	МассивЭлементов.Добавить("БанковскийСчет");
	МассивЭлементов.Добавить("Контрагент");
	МассивЭлементов.Добавить("КонтрагентПрочийДоход");
	МассивЭлементов.Добавить("ДокументОснование");
	МассивЭлементов.Добавить("Касса");
	МассивЭлементов.Добавить("СуммаДокумента");
	
	МассивЭлементов.Добавить("РасшифровкаПлатежа");
	
	ОбщегоНазначенияРТКлиентСервер.УстановитьСвойствоЭлементовФормы(
		Элементы, МассивЭлементов, "ТолькоПросмотр", ТолькоПросмотрЭлементов);
	
	МассивЭлементов = Новый Массив;
	
	МассивЭлементов.Добавить("РасшифровкаПлатежаПодобратьНеоплаченные");
	
	ОбщегоНазначенияРТКлиентСервер.УстановитьСвойствоЭлементовФормы(
		Элементы, МассивЭлементов, "Доступность", Не ТолькоПросмотрЭлементов);
	ОбщегоНазначенияРТКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы, "ФормаИзменить", "Доступность", ТолькоПросмотрЭлементов);
	
КонецПроцедуры


///////////////////////////////////////////////////////////////////////////////
// Обработчики изменений реквизитов.

&НаСервере
Процедура ДатаПриИзмененииНаСервере()
	
	ЗаполнитьСистемуНалогообложения();
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// Обработчики изменений реквизитов.

&НаКлиенте
Процедура КонтрагентПриИзмененииКлиент()
	
	ПриИзмененииКлючевыхРеквизитов("Контрагент", Объект.Контрагент);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДокументНаОснованииДокументаОснование()
	
	ДокументОбъект = РеквизитФормыВЗначение("Объект");
	ДокументОбъект.Заполнить(Объект.ДокументОснование);
	ЗначениеВРеквизитФормы(ДокументОбъект, "Объект");
	
	Документы.ПриходныйКассовыйОрдер.ЗаполнитьМагазин(Объект, Магазин);
	
	УстановитьСвязьПараметровВыбораДокументаОснованияПоХозОперации();
КонецПроцедуры

&НаСервере
Процедура ОрганизацияПриИзмененииСервер()
	
	ВладелецТекущейКассы = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Касса, "Владелец");
	Если ВладелецТекущейКассы <> Объект.Организация Тогда
		Объект.Касса = Справочники.Кассы.КассаПоУмолчанию(Объект.Организация);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура КассаПриИзмененииСервер()
	
	Если ЗначениеЗаполнено(Объект.Касса) Тогда
		
		ДанныеКассы = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект.Касса, "Магазин, ПробиватьЧекиПоКассеККМ, КассаККМ");
		Если ЭтотОбъект.ЭтоФискальнаяОперация Тогда
			Объект.ПробиватьЧекиПоКассеККМ = ДанныеКассы.ПробиватьЧекиПоКассеККМ;
			Объект.КассаККМ                = ДанныеКассы.КассаККМ;
		КонецЕсли;
		Магазин = ДанныеКассы.Магазин;
		
		Если Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПоступлениеДенежныхСредствИзКассыККМ Тогда
			Если ЗначениеЗаполнено(Объект.ДокументОснование) Тогда
				ДанныеОснования = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект.ДокументОснование, "Организация, Магазин");
				Если Объект.Организация <> ДанныеОснования.Организация
					ИЛИ ДанныеКассы.Магазин <> ДанныеОснования.Магазин Тогда
					Объект.ДокументОснование = Документы.ВыемкаДенежныхСредствИзКассыККМ.ПустаяСсылка();
				КонецЕсли;
			КонецЕсли;
		ИначеЕсли Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПоступлениеДенежныхСредствИзБанка Тогда
			Если ЗначениеЗаполнено(Объект.Организация) Тогда
				РеквизитыБанковскогоСчета = Справочники.БанковскиеСчета.ПолучитьРеквизитыБанковскогоСчета(Объект.БанковскийСчет);
				Если РеквизитыБанковскогоСчета.Организация <> Объект.Организация Тогда
					Объект.БанковскийСчет = ЗначениеНастроекПовтИсп.БанковскийСчетОрганизацииПоУмолчанию(
							Объект.Организация,
							Перечисления.ФормыОплаты.Безналичная);
				КонецЕсли;
			Иначе
				Объект.БанковскийСчет = Справочники.БанковскиеСчета.ПустаяСсылка();
			КонецЕсли;
		КонецЕсли;
		
	Иначе
		
		Магазин = ПредопределенноеЗначение("Справочник.Магазины.ПустаяСсылка");
		Если Объект.ХозяйственнаяОперация = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ПоступлениеДенежныхСредствИзКассыККМ") Тогда
			Объект.ДокументОснование = ПредопределенноеЗначение("Документ.ВыемкаДенежныхСредствИзКассыККМ.ПустаяСсылка");
		ИначеЕсли Объект.ХозяйственнаяОперация = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ПоступлениеДенежныхСредствИзБанка") Тогда
			Объект.БанковскийСчет = ПредопределенноеЗначение("Справочник.БанковскиеСчета.ПустаяСсылка");
		КонецЕсли;
		
		Объект.КассаККМ                = ПредопределенноеЗначение("Справочник.КассыККМ.ПустаяСсылка");
		Объект.ПробиватьЧекиПоКассеККМ = Ложь;
		
	КонецЕсли;
	
	УстановитьДоступностьБанковскогоСчета();
	
	ЗаполнитьСистемуНалогообложения();
	
	УправлениеЭлементамиФискализации();
	
	ДенежныеСредстваСервер.ЗаполнитьПризнакСпособаРасчета(Объект);
	
	УстановитьСНОРасшифровкиНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура КонтрагентПриИзмененииНаСервере()
	
	ЗаполнитьСписокТелефоновКонтрагента();
	ДенежныеСредстваСервер.ЗаполнитьПризнакСпособаРасчета(Объект);
	
	Если НЕ ОснованиеУстановленоВручную Тогда
		Документы.ПриходныйКассовыйОрдер.ЗаполнитьРеквитыПечатнойФормы(Объект, Новый Структура("Основание"));
	КонецЕсли;
	
	//ИИН/БИН в чеке
	Если ЗначениеЗаполнено(Объект.Контрагент) Тогда
		Если Объект.Контрагент.ЮрФизЛицо = ПредопределенноеЗначение("Перечисление.ЮрФизЛицо.ФизЛицо") Тогда
			Объект.ИИН = Объект.Контрагент.ФизЛицо.ИНН;
		Иначе
			Объект.ИИН = Объект.Контрагент.ИНН;
		КонецЕсли;
	Иначе
		Объект.ИИН = "";
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПоместитьВХранилищеРасшифровкуПлатежа()

	РасшифровкаПлатежа = Объект.РасшифровкаПлатежа.Выгрузить();
	
	Адрес = ПоместитьВоВременноеХранилище(РасшифровкаПлатежа, УникальныйИдентификатор);
	
	Возврат Адрес;

КонецФункции

&НаКлиенте
Процедура МагазинПриИзмененииКлиент()
	
	Для Каждого Строка Из Объект.РасшифровкаПлатежа Цикл 
		
		Строка.ДокументРасчетовСКонтрагентом = Неопределено;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ВходящиеДанныеДляФРСервер(РаспределениеВыручкиПоСекциям, НомерЧека)
	
	Возврат Документы.ПриходныйКассовыйОрдер.ПодготовитьДанныеДляПробитияЧека(Объект.Ссылка, РаспределениеВыручкиПоСекциям, НомерЧека);
	
КонецФункции 

&НаКлиенте
Процедура ПроверитьВозможностьПечатиЧекаЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат Тогда
		НапечататьЧекКлиент();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НапечататьЧекКлиент()
	
	Перем Отказ, ИдентификаторУстройства, ИспользоватьКассуБезПодключенияОборудования, РаспределениеВыручкиПоСекциям;
	
	ПодготовитьИПроверитьПечатьЧека(Отказ, ИдентификаторУстройства, ИспользоватьКассуБезПодключенияОборудования, РаспределениеВыручкиПоСекциям);
	
	Если Отказ Тогда
		Возврат
	КонецЕсли;
	
	Если НЕ ИспользоватьПодключаемоеОборудование ИЛИ ИспользоватьКассуБезПодключенияОборудования Тогда
		
		Если НомерДокументаКассыККМ[Объект.КассаККМ] <> Неопределено Тогда
			Объект.НомерЧекаККМ  = НомерДокументаКассыККМ[Объект.КассаККМ];
		Иначе
			Объект.НомерЧекаККМ  = ПорядковыйНомерПродажи;
		КонецЕсли;
		Объект.ПробитЧек     = Истина;
		
		Модифицированность = Истина;
		РезультатЗаписи = Записать(Новый Структура("РежимЗаписи", РежимЗаписиДокумента.Проведение));
		
		Если РезультатЗаписи = Истина Тогда
			НомерДокументаКассыККМ[Объект.КассаККМ] = Объект.НомерЧекаККМ +	1;
			ПорядковыйНомерПродажи = ПорядковыйНомерПродажи + 1;
		КонецЕсли;
		
		Возврат;
		
	КонецЕсли;
	
	Если ИдентификаторУстройства <> Неопределено Тогда
        
        // &ЗамерПроизводительности 
        Замер = ОценкаПроизводительностиРТКлиент.НачатьЗамер(Ложь, 
                                                    "Документ.ПриходныйКассовыйОрдер.Форма.ФормаДокумента.Команда.ПробитьЧек",
                                                               Ложь);
        
        // Готовим данные
		НомерЧека = НомерДокументаКассыККМ[Объект.КассаККМ] + 1;
		ОбщиеПараметры  = ВходящиеДанныеДляФРСервер(РаспределениеВыручкиПоСекциям, НомерЧека);
		
		ЭтаФорма.Доступность = Ложь;
		
		Контекст = Новый Структура("ИдентификаторУстройства, Замер", ИдентификаторУстройства, Замер);
		
		Оповещение = Новый ОписаниеОповещения("НапечататьЧекКлиентЗавершение", ЭтотОбъект, Контекст);
		
		ПодключенноеОборудование = Новый Структура("Терминал, ФискальныеУстройства");
		ПодключенноеОборудование.ФискальныеУстройства = Новый Массив; 
		ПодключенноеОборудование.ФискальныеУстройства.Добавить(ИдентификаторУстройства);
		
		ПараметрыОперации = Новый Структура;
		ПараметрыОперации.Вставить("ДокументСсылка", Объект.Ссылка);
		ПараметрыОперации.Вставить("Организация", Объект.Организация);
		ПараметрыОперации.Вставить("Партнер", Объект.Контрагент);
		ПараметрыОперации.Вставить("ПодключенноеОборудование", ПодключенноеОборудование);
		ПараметрыОперации.Вставить("ТорговыйОбъект", Неопределено);
		
		ОткрытьФорму(
			"Обработка.ПечатьЧека.Форма",
			ПараметрыОперации,
			ЭтотОбъект,,,,
			Оповещение);
		
	КонецЕсли;
	
	ОбменССайтомРТВызовСервера.ЗаписатьСостояниеОплатыЗаказаПокупателя(Объект.ЗаказПокупателя, Объект.Ссылка);
	
КонецПроцедуры

&НаКлиенте
Процедура НапечататьЧекКлиентЗавершение(РезультатВыполнения, ПараметрыОперации) Экспорт
	
	Если РезультатВыполнения = КодВозвратаДиалога.Отмена ИЛИ РезультатВыполнения = Неопределено Тогда
		// Отмена в форме печати чека
		ЭтаФорма.Доступность = Истина;
	ИначеЕсли РезультатВыполнения.Свойство("Результат") И РезультатВыполнения.Результат Тогда
		// Установить полученное значение номера чека реквизиту документа.
		Если ЗначениеЗаполнено(РезультатВыполнения.ВыходныеПараметры[1]) Тогда
			Объект.НомерЧекаККМ = РезультатВыполнения.ВыходныеПараметры[1];
		Иначе
			Объект.НомерЧекаККМ = НомерДокументаКассыККМ[Объект.КассаККМ];
		КонецЕсли; 
		
		РезультатЗаписи = Записать(Новый Структура("РежимЗаписи", РежимЗаписиДокумента.Проведение));
		
		Если РезультатЗаписи = Истина Тогда
			НомерДокументаКассыККМ[Объект.КассаККМ] = Объект.НомерЧекаККМ +	1;
			ПорядковыйНомерПродажи = ПорядковыйНомерПродажи + 1;
		КонецЕсли;
		
		ПараметрыОперации.Вставить("ТипИнкассации", 0);
		ПараметрыОперации.Вставить("Сумма"        , Объект.СуммаДокумента);
		
		Оповещение = Новый ОписаниеОповещения("НапечататьЧекКлиентИнкассацияЗавершение", ЭтотОбъект, ПараметрыОперации);
		МенеджерОборудованияКлиент.НачатьИнкассациюНаФискальномУстройстве(Оповещение, УникальныйИдентификатор, ПараметрыОперации, ПараметрыОперации.ИдентификаторУстройства);
		
	Иначе
		ЭтаФорма.Доступность = Истина;
		ТекстСообщения = НСтр("ru = 'При печати чека произошла ошибка.
									|Чек не напечатан на фискальном устройстве.
									|Дополнительное описание: %ДополнительноеОписание%'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ДополнительноеОписание%", РезультатВыполнения.ОписаниеОшибки);
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
    // &ЗамерПроизводительности 
	ОценкаПроизводительностиРТКлиент.ЗакончитьЗамер(ПараметрыОперации.Замер);
	
КонецПроцедуры

&НаКлиенте
Процедура НапечататьЧекКлиентИнкассацияЗавершение(РезультатВыполнения, ПараметрыОперации) Экспорт
	
	ЭтаФорма.Доступность = Истина;
	
	Если НЕ РезультатВыполнения.Результат Тогда
		ТекстСообщения = НСтр("ru = 'При операции внесения/выемки произошла ошибка.
									|Дополнительное описание: %ДополнительноеОписание%'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ДополнительноеОписание%", РезультатВыполнения.ОписаниеОшибки);
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
	Иначе
		Объект.ПробитЧек    = Истина;
		Модифицированность  = Истина;
		РезультатЗаписи = Записать(Новый Структура("РежимЗаписи", РежимЗаписиДокумента.Проведение));
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПодготовитьИПроверитьПечатьЧека(Отказаться, 
										  ИдентификаторУстройства, 
										  ИспользоватьКассуБезПодключенияОборудования,
										  РаспределениеВыручкиПоСекциям)
	
	Отказаться = Ложь;
	
	Если ЗначениеЗаполнено(Объект.КассаККМ)  Тогда
		ПараметрыКассыККМ       = ЗначениеНастроекВызовСервера.ПараметрыКассыККМ(Объект.КассаККМ);
		ИдентификаторУстройства = ПараметрыКассыККМ.ИдентификаторУстройства;
		
		РаспределениеВыручкиПоСекциям = ПараметрыКассыККМ.РаспределениеВыручкиПоСекциям;
		ИспользоватьКассуБезПодключенияОборудования = ПараметрыКассыККМ.ИспользоватьБезПодключенияОборудования;
		
		СтруктураСостояниеКассовойСмены = РозничныеПродажиСервер.ПолучитьСостояниеКассовойСмены(Объект.КассаККМ);
		
		КассоваяСмена = СтруктураСостояниеКассовойСмены.КассоваяСмена;
		
		ТекстОшибки = НСтр("ru='Кассовая смена не открыта!'");
		Если НЕ РозничныеПродажиСервер.СменаОткрыта(КассоваяСмена, Объект.Дата, ТекстОшибки) Тогда
			
			ОбщегоНазначения.СообщитьПользователю(
				ТекстОшибки,
				,
				"Объект.КассаККМ",
				,
				Отказаться);
			
		КонецЕсли;
	Иначе
		ТекстОшибки = НСтр("ru='Не выбрана касса ККМ!'");
		ОбщегоНазначения.СообщитьПользователю(
			ТекстОшибки,
			,
			"Объект.КассаККМ",
			,
			Отказаться);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура РасшифровкаПлатежаДокументРасчетовСКонтрагентомПриИзмененииСервер(ИдентификаторСтроки)
	
	ТекущаяСтрока = Объект.РасшифровкаПлатежа.НайтиПоИдентификатору(ИдентификаторСтроки);
	
	Документы.ПриходныйКассовыйОрдер.РасшифровкаПлатежаДокументРасчетовСКонтрагентомПриИзменении(ЭтотОбъект, ТекущаяСтрока);
	
	ДенежныеСредстваСервер.ЗаполнитьПризнакСпособаРасчета(Объект, ТекущаяСтрока);
	
	Действия = Новый Структура;
	Действия.Вставить("ВТомЧислеНДС");
	Если НЕ ОснованиеУстановленоВручную Тогда
		Действия.Вставить("Основание");
	КонецЕсли;
	
	Документы.ПриходныйКассовыйОрдер.ЗаполнитьРеквитыПечатнойФормы(Объект, Действия);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьСНОРасшифровкиНаСервере()
	
	Если Объект.РасшифровкаПлатежа.Количество() = 0
		ИЛИ Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПрочиеДоходы 
		ИЛИ НЕ ЭтоФискальнаяОперация И Объект.ПробиватьЧекиПоКассеККМ Тогда
		Возврат;
	КонецЕсли;
	
	ДенежныеСредстваСервер.ЗаполнитьСистемуНалогообложенияЭлементаФормы(Объект.РасшифровкаПлатежа);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьСНО(ВыводитьСообщения = Ложь)
	
	Если ЭтоФискальнаяОперация И Объект.ПробиватьЧекиПоКассеККМ Тогда
		
		ШаблонСообщений = НСтр("ru='В строке №%1 в документе расчетов с контрагентом система налогообложения отличается от системы налогообложения документа.'");
		ТекстСообщения = "";
		Для каждого СтрокаРасшифровки Из Объект.РасшифровкаПлатежа Цикл
			
			Если ЗначениеЗаполнено(СтрокаРасшифровки.СистемаНалогообложения) И 
				СтрокаРасшифровки.СистемаНалогообложения <> Объект.СистемаНалогообложения Тогда
				
				ЕстьНеСоответствиеСНО = Истина;
				
				Если ВыводитьСообщения Тогда
					ТекстСообщения = ТекстСообщения + СтрШаблон(ШаблонСообщений, СтрокаРасшифровки.НомерСтроки) + Символы.ПС;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
		Если ЕстьНеСоответствиеСНО Тогда
			
			Элементы.ДекорацияНесоответствиеСНО.Видимость = Истина;
			
			Если ВыводитьСообщения Тогда
				ТекстСообщения = СокрЛП(ТекстСообщения);
				ОбщегоНазначенияКлиент.СообщитьПользователю(
						ТекстСообщения,,"НадписьСуммаДокумента");
			КонецЕсли;
			
		Иначе
			
			Элементы.ДекорацияНесоответствиеСНО.Видимость = Ложь;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСистемуНалогообложения()
	
	Если ЭтоФискальнаяОперация И Объект.ПробиватьЧекиПоКассеККМ Тогда
		ДенежныеСредстваСервер.ЗаполнитьСистемуНалогообложения(Объект);
	Иначе
		Объект.СистемаНалогообложения = Перечисления.ТипыСистемНалогообложенияККТ.ПустаяСсылка();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокТелефоновКонтрагента()
	
	Элементы.ТелефонСтрокой.КнопкаВыпадающегоСписка = Ложь;
	Элементы.ТелефонСтрокой.СписокВыбора.Очистить();
	
	Если НЕ ЗначениеЗаполнено(Объект.Контрагент) Тогда
		Возврат;
	КонецЕсли;
	
	СписокТелефонов = ПодключаемоеОборудованиеРТ.ТелефоныОбъектаДляЧека(Объект.Контрагент);
	
	Если СписокТелефонов.Количество() > 0 Тогда
		
		Элементы.ТелефонСтрокой.КнопкаВыпадающегоСписка = Истина;
		Элементы.ТелефонСтрокой.ОтображениеКнопкиВыбора = ОтображениеКнопкиВыбора.ОтображатьВВыпадающемСписке;
		
		Для каждого НомерТелефона Из СписокТелефонов Цикл
			Элементы.ТелефонСтрокой.СписокВыбора.Добавить(НомерТелефона.Значение, НомерТелефона.Представление);
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПредставитьТелефонИEmailКлиент()
	
	Если ЗначениеЗаполнено(Объект.Телефон) Тогда
		Если ЗначениеЗаполнено(Объект.Телефон) Тогда
			СохраненныйТелефон = Число(Объект.Телефон);
		Иначе
			СохраненныйТелефон = 0;
		КонецЕсли;
		Телефон = 0;
		ПодключаемоеОборудованиеРТКлиент.ПреобразоватьТелефонКПользовательскомуВиду(СохраненныйТелефон, Телефон, ТелефонСтрокой);
		ДанныеSMSИлиEmail = ТелефонСтрокой;
		ОтправлятьЧек = "НаТелефон";
	ИначеЕсли ЗначениеЗаполнено(Объект.АдресЭП) Тогда
		ДанныеSMSИлиEmail = Объект.АдресЭП;
		ОтправлятьЧек = "НаЕмаил";
	Иначе
		ОтправлятьЧек = "НеОтправлять";
	КонецЕсли;
	
	ОтправлятьЧекПриИзмененииКлиент();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправлятьЧекПриИзмененииКлиент()
	
	Элементы.АдресЭП.Видимость 			= ОтправлятьЧек = "НаЕмаил";
	Элементы.ТелефонСтрокой.Видимость 	= ОтправлятьЧек = "НаТелефон";
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуРасшифровкиПлатежа()
	
	// Проверим, чтобы ключевые поля документы были заполнены, чтобы в дополнительной форме отборы работали корректно.
	Если НЕ ПроверитьЗаполнениеКлючевыхРеквизитов() Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура("Ссылка, Дата, ХозяйственнаяОперация, Организация, Контрагент,
		| СистемаНалогообложения, КассаККМ, ЗаказПокупателя");
	ЗаполнитьЗначенияСвойств(ПараметрыФормы, Объект);
	
	ПараметрыФормы.Вставить("Магазин",                       Магазин);
	ПараметрыФормы.Вставить("СтатьяДвиженияДенежныхСредств", СтатьяДвиженияДенежныхСредств);
	ПараметрыФормы.Вставить("ЭтоФискальнаяОперация",         Объект.ПробиватьЧекиПоКассеККМ И ЭтоФискальнаяОперация);
	ПараметрыФормы.Вставить("ФормаОплаты",                   ПредопределенноеЗначение("Перечисление.ФормыОплаты.Наличная"));
	
	АдресХранилищаРасшифровкаПлатежа = ПоместитьВХранилищеРасшифровкуПлатежа();
	ПараметрыФормы.Вставить("АдресХранилищаРасшифровкаПлатежа", АдресХранилищаРасшифровкаПлатежа);
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ПараметрыФормы", ПараметрыФормы);
	СтруктураПараметров.Вставить("ТолькоПросмотр", ТолькоПросмотр);
	
	Оповещение = Новый ОписаниеОповещения("ОткрытьФормуРасшифровкиЗавершение", ЭтотОбъект);
	
	ОткрытьФорму("ОбщаяФорма.РасшифровкаПлатежа", СтруктураПараметров, ЭтотОбъект,,,,Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуРасшифровкиЗавершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Если РезультатЗакрытия = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, РезультатЗакрытия);
	ЗаполнитьЗначенияСвойств(Объект,     РезультатЗакрытия, "СистемаНалогообложения");
	
	ПолучитьРасшифровкаПлатежаИзВременногоХранилищаНаСервере(РезультатЗакрытия.АдресХранилищаРасшифровкаПлатежа);
	
	Объект.СуммаДокумента = ОбработкаТабличнойЧастиТоварыКлиентСервер.СуммаДокумента(Объект.РасшифровкаПлатежа, Истина);
	
	ПроверитьСНО();
	
	Если Объект.РасшифровкаПлатежа.Количество() > 1 Тогда
		СуммаУстановленаВручную = Ложь;
	КонецЕсли;
	
	УправлениеЭлементамиРасшифровкиПлатежа(ЭтотОбъект);
	
	ОткрытьФормуРасшифровкиЗавершениеНаСервере();
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьРасшифровкаПлатежаИзВременногоХранилищаНаСервере(АдресХранилищаРасшифровкаПлатежа)
	
	РасшифровкаПлатежа = ПолучитьИзВременногоХранилища(АдресХранилищаРасшифровкаПлатежа);
	Объект.РасшифровкаПлатежа.Загрузить(РасшифровкаПлатежа);
	
	ДобавитьСтрокуВРасшифровкуПриНеобходимости();
	
КонецПроцедуры

&НаКлиенте
Процедура УправлениеЭлементомДокументРасчета()
	
	Если Объект.РасшифровкаПлатежа.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.Организация) И ЗначениеЗаполнено(Объект.Контрагент) Тогда
	
		Элементы.РасшифровкаПлатежаДокументРасчетовСКонтрагентом.ТолькоПросмотр = Ложь;
		Элементы.РасшифровкаПлатежаДокументРасчетовСКонтрагентом.ПодсказкаВвода = "";
		
	Иначе
	
		Элементы.РасшифровкаПлатежаДокументРасчетовСКонтрагентом.ТолькоПросмотр = Истина;
		Элементы.РасшифровкаПлатежаДокументРасчетовСКонтрагентом.ПодсказкаВвода = 
			НСтр("ru = 'Выберите организацию и контрагента'");
	
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьСтрокуВРасшифровкуПриНеобходимости()
	
	Если Объект.РасшифровкаПлатежа.Количество() > 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПоступлениеОплатыОтКлиента
		ИЛИ Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратДенежныхСредствОтПоставщика 
		ИЛИ Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВознаграждениеОтКомитента 
		ИЛИ Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПрочиеДоходы Тогда
		
		НоваяСтрока = Объект.РасшифровкаПлатежа.Добавить();
		НоваяСтрока.СтатьяДвиженияДенежныхСредств = СтатьяДвиженияДенежныхСредств;
		
		ДенежныеСредстваСервер.ЗаполнитьПризнакСпособаРасчета(Объект, НоваяСтрока);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КассаПриИзмененииКлиент()
	
	КонтрольРасшифровкиПлатежа();
	
	КассаПриИзмененииСервер();
	
	ПриИзмененииКлючевыхРеквизитов("Магазин", Магазин);
	
	ПроверитьСНО();
	
	УправлениеЭлементомКассаККМ();
	
КонецПроцедуры

&НаКлиенте
Процедура УправлениеЭлементомКассаККМ()
	
	Если ЗначениеЗаполнено(Объект.Касса) Тогда
		НастройтеПечатьЧека = НСтр("ru = 'Настройте печать чека по выбранной кассе'");
	Иначе
		НастройтеПечатьЧека = "";
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.КассаККМ) И НомерДокументаКассыККМ[Объект.КассаККМ] = Неопределено Тогда
		ОбщегоНазначенияРТКлиент.ЗаполнитьНомерДокументаКассыККМ(Объект.КассаККМ);
	КонецЕсли;
	
	Элементы.НастройтеПечатьЧека.Видимость 				= ЭтоФискальнаяОперация И НЕ Объект.ПробиватьЧекиПоКассеККМ;
	Элементы.КассаККМДляФискальныхОпераций.Видимость 	= ЭтоФискальнаяОперация И Объект.ПробиватьЧекиПоКассеККМ;
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрольРасшифровкиПлатежа()
	
	Если Объект.РасшифровкаПлатежа.Количество() > 0 Тогда
		
		ПрошлаяОрганизация = ПредыдущиеЗначения["Организация"];
		ПрошлыйКонтрагент  = ПредыдущиеЗначения["Контрагент"];
		ПрошлаяКасса       = ПредыдущиеЗначения["Касса"];
		
		Если ПрошлаяОрганизация <> Объект.Организация
			ИЛИ ПрошлыйКонтрагент <> Объект.Контрагент
			ИЛИ ПрошлаяКасса <> Объект.Касса Тогда
			
			Объект.РасшифровкаПлатежа.Очистить();
			
			НоваяСтрока = Объект.РасшифровкаПлатежа.Добавить();
			НоваяСтрока.СтатьяДвиженияДенежныхСредств = СтатьяДвиженияДенежныхСредств;
			
			УправлениеЭлементамиРасшифровкиПлатежа(ЭтотОбъект);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьРеквитыПечатнойФормыСервер()
	
	Документы.ПриходныйКассовыйОрдер.ЗаполнитьРеквитыПечатнойФормы(Объект);
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Функция ПроверитьЗаполнениеКлючевыхРеквизитов()
	
	Отказ = Ложь;
	
	Если НЕ ЗначениеЗаполнено(Объект.Дата) Тогда
		ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения("Поле", "Заполнение", НСтр("ru = 'Дата'"));
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, "Дата", "Объект", Отказ);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.Организация) Тогда
		ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения("Поле", "Заполнение", НСтр("ru = 'Организация'"));
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, "Организация", "Объект", Отказ);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.Касса) Тогда
		ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения("Поле", "Заполнение", НСтр("ru = 'Касса'"));
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, "Касса", "Объект", Отказ);
	КонецЕсли;
	
	Если Объект.ХозяйственнаяОперация <> ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ПрочиеДоходы") 
		И НЕ ЗначениеЗаполнено(Объект.Контрагент) Тогда
		ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения("Поле", "Заполнение", НСтр("ru = 'Контрагент'"));
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, "Контрагент", "Объект", Отказ);
	КонецЕсли;
	
	Возврат НЕ Отказ;
	
КонецФункции

&НаКлиенте
Процедура ПриИзмененииКлючевыхРеквизитов(Источник, Значение)
	
	Если ПредыдущиеЗначения[Источник] = Значение Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.ЗаказПокупателя) И НЕ Источник = "Касса" Тогда
		Объект.ЗаказПокупателя = Неопределено;
		УправлениеЭлементамиЗаказПокупателя();
	КонецЕсли;
	
	Если Источник = "Организация" Тогда
		ОрганизацияПриИзмененииСервер();
		УправлениеЭлементомДокументРасчета();
		ПриИзмененииКлючевыхРеквизитов("Касса", Объект.Касса);
	ИначеЕсли Источник = "Контрагент" Тогда
		КонтрагентПриИзмененииНаСервере();
		КонтрольРасшифровкиПлатежа();
		УправлениеЭлементомДокументРасчета();
	ИначеЕсли Источник = "Касса" Тогда
		КассаПриИзмененииКлиент();
	ИначеЕсли Источник = "Магазин" Тогда
		МагазинПриИзмененииКлиент();
	КонецЕсли;
	
	ПредыдущиеЗначения.Вставить(Источник, Значение);
	
КонецПроцедуры

#Область ЗаказПокупателя

&НаКлиенте
Процедура ПоказатьВопросВыбратьЗаказПокупателяЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		ОткрытьФормуВыбораЗаказаПокупателя();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуВыбораЗаказаПокупателя()
	
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("Организация", Объект.Организация);
	ПараметрыОтбора.Вставить("Контрагент",  Объект.Контрагент);
	ПараметрыОтбора.Вставить("Магазин",     Магазин);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Отбор", ПараметрыОтбора);
	
	ОткрытьФорму("Документ.ЗаказПокупателя.ФормаВыбора",
		ПараметрыФормы,
		ЭтотОбъект,,,,
		Новый ОписаниеОповещения("ВыборЗаказаПокупателяЗавершение", ЭтотОбъект),
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыборЗаказаПокупателяЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Объект.ЗаказПокупателя = Результат;
	УправлениеЭлементамиЗаказПокупателя();
	ЗаполнитьПоЗаказуПокупателя();
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьВопросЗаполнитьПоЗаказуЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		ЗаполнитьПоЗаказуПокупателя();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоЗаказуПокупателя()
	
	ЗаполнитьПоЗаказуПокупателяНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоЗаказуПокупателяНаСервере()
	
	ДанныеЗаполненияПрочие = Новый Структура;
	Если ЗначениеЗаполнено(СтатьяДвиженияДенежныхСредств) Тогда
		ДанныеЗаполненияПрочие.Вставить("СтатьяДвиженияДенежныхСредств", СтатьяДвиженияДенежныхСредств);
	КонецЕсли;
	
	ФинансыСервер.ЗаполнениеРасшифровкиПлатежаПоЗаказуПокупателя(Объект, Объект.ЗаказПокупателя, ДанныеЗаполненияПрочие);
	
	УстановитьСНОРасшифровкиНаСервере();
	ЗаполнитьСистемуНалогообложения();
	ДенежныеСредстваСервер.ЗаполнитьПризнакСпособаРасчета(Объект);
	Документы.ПриходныйКассовыйОрдер.ЗаполнитьРеквитыПечатнойФормы(Объект);
	
	УправлениеЭлементамиРасшифровкиПлатежа(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура УправлениеЭлементамиЗаказПокупателя()
	
	Если НЕ Объект.ХозяйственнаяОперация = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ПоступлениеОплатыОтКлиента") Тогда
		Возврат;
	КонецЕсли;
	
	ПродажаПоЗаказу = ЗначениеЗаполнено(Объект.ЗаказПокупателя);
	
	Элементы.ОткрытьЗаказПокупателя.Заголовок = Строка(Объект.ЗаказПокупателя);
	
	// Установим параметры выбора документа расчетов.
	ПараметрыВыбораДокументРасчетов = Новый Массив;
	Если ПродажаПоЗаказу Тогда
		ПараметрыВыбораДокументРасчетов.Добавить(Новый ПараметрВыбора("Отбор.ЗаказПокупателя", Объект.ЗаказПокупателя));
	КонецЕсли;
	Элементы.РасшифровкаПлатежаДокументРасчетовСКонтрагентом.ПараметрыВыбора = Новый ФиксированныйМассив(ПараметрыВыбораДокументРасчетов);
	
	// Установим видимость.
	Элементы.ВыбратьЗаказПокупателя.Видимость  = НЕ ПродажаПоЗаказу;
	Элементы.ОткрытьЗаказПокупателя.Видимость  = ПродажаПоЗаказу;
	Элементы.ОчиститьЗаказПокупателя.Видимость = ПродажаПоЗаказу;
	
КонецПроцедуры

#КонецОбласти

&НаСервере
Процедура ОткрытьФормуРасшифровкиЗавершениеНаСервере()
	
	Действия = Новый Структура;
	Действия.Вставить("ВТомЧислеНДС");
	Если НЕ ОснованиеУстановленоВручную Тогда
		Действия.Вставить("Основание");
	КонецЕсли;
	
	Документы.ПриходныйКассовыйОрдер.ЗаполнитьРеквитыПечатнойФормы(Объект, Действия);
КонецПроцедуры

&НаСервере
Процедура ОпределитьРучноеИзменениеРеквизитовПечатнойФормы()
	
	Если ЗначениеЗаполнено(Объект.Основание) Тогда
		Основание = Объект.Основание;
		Документы.ПриходныйКассовыйОрдер.ЗаполнитьРеквитыПечатнойФормы(Объект, Новый Структура("Основание"));
		ОснованиеУстановленоВручную = НЕ Основание = Объект.Основание;
		Объект.Основание = Основание;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыборФизЛицаЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ВыборФизЛицаЗавершениеНаСервере(Результат);
	
КонецПроцедуры

&НаСервере
Процедура ВыборФизЛицаЗавершениеНаСервере(Результат)
	Документы.ПриходныйКассовыйОрдер.ЗаполнитьРеквитыПечатнойФормы(Объект, Новый Структура("ПринятоОт", Результат));
КонецПроцедуры

&НаСервереБезКонтекста
Функция ДополнительныеПараметрыККМ(Организация, Дата, КассаККМ)
	
	Возврат ИнтеграцияWebKassaВызовСервераПереопределяемый.ПолучитьСведенияОбОрганизацииИКассеККМ(Организация, Дата, КассаККМ);
	
КонецФункции 

#КонецОбласти