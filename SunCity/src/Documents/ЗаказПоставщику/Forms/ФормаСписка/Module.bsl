
#Область ОбработчикиСобытийФормы

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	ПараметрыОповещенияЭДО = ОбменСКонтрагентамиКлиент.ПараметрыОповещенияЭДО_ФормаСписка();
	ПараметрыОповещенияЭДО.Форма = ЭтотОбъект;
	ПараметрыОповещенияЭДО.ИмяДинамическогоСписка = "Список";
	ОбменСКонтрагентамиКлиент.ОбработкаОповещения_ФормаСписка(ИмяСобытия, Параметр, Источник, ПараметрыОповещенияЭДО);
	// Конец ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	
	// ЭлектронноеВзаимодействие.БизнесСеть
	БизнесСетьКлиент.ОбновитьИнформациюОНовыхДокументахВСервисе(ЭтотОбъект, ИмяСобытия);
	// Конец ЭлектронноеВзаимодействие.БизнесСеть
	
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Пропускаем инициализацию, чтобы гарантировать получение формы при передаче параметра "АвтоТест".
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПараметрыРазмещения = ПодключаемыеКоманды.ПараметрыРазмещения();
	ПараметрыРазмещения.КоманднаяПанель = Элементы.КоманднаяПанельФормы;
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект, ПараметрыРазмещения);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	Если Не ПравоДоступа("Добавление", Метаданные.Документы.ПоступлениеТоваров) Тогда 
		Элементы.ФормаДокументПоступлениеТоваровСоздатьНаОснованииТТН.Видимость = Ложь;	
	КонецЕсли;
	
	ДатаОбновленияСостоянияОплатыИПоступления = Константы.ДатаОбновленияСостоянияОплатыИПоступления.Получить();
	Если НачалоДня(ТекущаяДатаСеанса()) > НачалоДня(ДатаОбновленияСостоянияОплатыИПоступления) Тогда
		Элементы.ГруппаПодвал.Видимость = Истина;
	Иначе
		Элементы.ГруппаПодвал.Видимость = Ложь;
	КонецЕсли;
	
	ОбщегоНазначенияРТ.УстановитьУсловноеОформлениеПоляДата(ЭтотОбъект, "Список", "Дата");
	
#Область Новости
	// ИнтернетПоддержкаПользователей.Новости, код для ПриСозданииНаСервере, можно размещать в конце процедуры
	НастройкиОтображенияНовостей = Новый Структура();
	НастройкиОтображенияНовостей.Вставить("ЭлементФормыДляРазмещенияКомандыНовостей", Элементы.ПанельКонтекстныхНовостей);
	НастройкиОтображенияНовостей.Вставить("ТипЗначенияКомандыНовостей", Тип("ГруппаФормы"));
	
	ОбработкаНовостей.КонтекстныеНовости_ПриСозданииНаСервере(
		ЭтаФорма,
		"Документ.ЗаказПоставщику",
		"ФормаСписка",
		НастройкиОтображенияНовостей,
		,
		Ложь,
		Новый Структура("ПолучатьНовостиНаСервере, ХранитьМассивНовостейТолькоНаСервере",
			Истина,
			Ложь),
		"ПриОткрытии");
	// Конец ИнтернетПоддержкаПользователей.Новости
#КонецОбласти
	
	// ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	ПараметрыПриСозданииНаСервере = ОбменСКонтрагентами.ПараметрыПриСозданииНаСервере_ФормаСписка();
	ПараметрыПриСозданииНаСервере.Форма = ЭтотОбъект;
	ПараметрыПриСозданииНаСервере.МестоРазмещенияКоманд = Элементы.КомандыЭДО;
	ОбменСКонтрагентами.ПриСозданииНаСервере_ФормаСписка(ПараметрыПриСозданииНаСервере);
	// Конец ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	
	// ЭлектронноеВзаимодействие.ТорговыеПредложения
	ТорговыеПредложения.ПриСозданииПодсказокФормы(ЭтотОбъект, Элементы.ПодсказкиБизнесСеть);
	// Конец ЭлектронноеВзаимодействие.ТорговыеПредложения
	
	// ЭлектронноеВзаимодействие.БизнесСеть
	БизнесСеть.ПодключитьОповещениеОНовыхДокументахВСервисе(ЭтотОбъект, 
		ОбменСКонтрагентамиРТ.ВидыЭДПоИмениОбъекта(ЭтотОбъект.Список.ОсновнаяТаблица));
	// Конец ЭлектронноеВзаимодействие.БизнесСеть
	
	//ИнтеграцияИСМПТК
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ФормаИСМПТК", "Видимость", Ложь);
	//Конец ИнтеграцияИСМПТК
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// &ЗамерПроизводительности
	ОценкаПроизводительностиРТКлиент.НачатьЗамер(
		Истина, "Документ.ЗаказПоставщику.Форма.ФормаСписка.Открытие");
	
	УстановитьДоступностьСклада();
	
	// ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	ОбменСКонтрагентамиКлиент.ПриОткрытии(ЭтотОбъект);
	// Конец ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	
	// ЭлектронноеВзаимодействие.ТорговыеПредложения
	ТорговыеПредложенияКлиент.ОбновитьПодсказкуФормы(ЭтотОбъект);
	// Конец ЭлектронноеВзаимодействие.ТорговыеПредложения
	
	// ЭлектронноеВзаимодействие.БизнесСеть
	БизнесСетьКлиент.ОбновитьИнформациюОНовыхДокументахВСервисе(ЭтотОбъект);
	// Конец ЭлектронноеВзаимодействие.БизнесСеть
	
#Область Новости
	// ИнтернетПоддержкаПользователей.Новости, код для ПриОткрытии, можно размещать в конце процедуры
	ОбработкаНовостейКлиент.КонтекстныеНовости_ПриОткрытии(ЭтаФорма);
	// Конец ИнтернетПоддержкаПользователей.Новости
#КонецОбласти
	
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоОрганизаций") Тогда
		Организация = Настройки.Получить("Организация");
	Иначе
		Организация = Справочники.Организации.ПустаяСсылка();
	КонецЕсли;
	
	Магазин       = Настройки.Получить("Магазин");
	Склад         = Настройки.Получить("Склад");
	Контрагент    = Настройки.Получить("Контрагент");
	УстановитьОтборДинамическогоСписка("Магазин");
	УстановитьОтборДинамическогоСписка("Склад");
	УстановитьОтборДинамическогоСписка("Контрагент");
	УстановитьОтборДинамическогоСписка("Организация");
	
КонецПроцедуры

&НаКлиенте
Процедура СписокВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
             
    // &ЗамерПроизводительности
	ОценкаПроизводительностиРТКлиент.НачатьЗамер(
		     Истина, "Документ.ЗаказПоставщику.Форма.ФормаДокумента.Открытие");

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ОтборСкладПриИзменении(Элемент)
	
	УстановитьОтборДинамическогоСписка("Склад");
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборМагазинПриИзменении(Элемент)
	
	УстановитьОтборДинамическогоСписка("Магазин");
	УстановитьОтборДинамическогоСписка("Склад");
	
	УстановитьДоступностьСклада();

КонецПроцедуры

&НаКлиенте
Процедура ОтборКонтрагентПриИзменении(Элемент)
	
	УстановитьОтборДинамическогоСписка("Контрагент");
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборОрганизацияПриИзменении(Элемент)
	
	УстановитьОтборДинамическогоСписка("Организация");
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСписок

&НаКлиенте
Процедура СписокПриАктивизацииСтроки(Элемент)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
    
    // &ЗамерПроизводительности
    ОценкаПроизводительностиРТКлиент.НачатьЗамер(
             Истина, "Документ.ЗаказПоставщику.Форма.ФормаДокумента.СозданиеНового");

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ИзменитьВыделенные(Команда)
	
	ГрупповоеИзменениеОбъектовКлиент.ИзменитьВыделенные(Элементы.Список);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоступлениеТоваровНаОснованииТТН(Команда)
	
	ТекущиеДанные = Элементы.Список.ТекущиеДанные;
	
	Если НЕ ТекущиеДанные = Неопределено Тогда
		
		ЗаказПоставщику = ТекущиеДанные.Ссылка;
		
		ПараметрыФормы = Новый Структура;
		ТекстСообщения = "";
		Если НЕ ВозможностьВводаПоступленияНаОснованииТТН(ЗаказПоставщику, ПараметрыФормы, ТекстСообщения) Тогда
			ОбщегоНазначенияКлиент.СообщитьПользователю(
				ТекстСообщения,
				Список,
				,);
			Возврат
		КонецЕсли;
        
        ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("ЗаказПоставщику", ЗаказПоставщику);
		
		Режим = РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс;
		ОбработчикОповещения = Новый ОписаниеОповещения("ОповещениеОткрытьФормуВыбораТТН", ЭтотОбъект, ДополнительныеПараметры);
		ОткрытьФорму("Документ.ТТНВходящаяЕГАИС.ФормаВыбора", ПараметрыФормы, ЭтотОбъект, УникальныйИдентификатор,,, ОбработчикОповещения, Режим);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСостояниеОплатыИПоступления(Команда)
	
	ОбновитьСостояниеОплатыИПоступленияСервер();
	
	ПоказатьОповещениеПользователя(
			,
			,
			НСтр("ru='Статусы просрочки поступления и оплаты успешно обновлены'"),
			БиблиотекаКартинок.Информация32);
	Элементы.ГруппаПодвал.Видимость = Ложь;
	
КонецПроцедуры

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Элементы.Список);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат) Экспорт
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Элементы.Список, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Элементы.Список);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

// ЭлектронноеВзаимодействие.БизнесСеть
&НаКлиенте
Процедура Подключаемый_ПодобратьДокументыИзСервисаБизнесСеть(Команда)
	
	БизнесСетьКлиент.ПодобратьДокументыИзСервисаБизнесСеть(ЭтотОбъект);
	
КонецПроцедуры
// Конец ЭлектронноеВзаимодействие.БизнесСеть

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура ОповещениеОткрытьФормуВыбораТТН(РезультатОткрытияФормы, ДополнительныеПараметры) Экспорт
	Если НЕ РезультатОткрытияФормы = Неопределено Тогда
		ПоступлениеТоваровПриСоздании = СоздатьНайтиПоступлениеНаСервере(РезультатОткрытияФормы, Ложь, ДополнительныеПараметры.ЗаказПоставщику);
		ПодключитьОбработчикОжидания("ОткрытьФормуПоступленияТоваровПриСоздании", 0.1, Истина);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуПоступленияТоваровПриСоздании()
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Ключ", ПоступлениеТоваровПриСоздании);
	
	ОткрытьФорму("Документ.ПоступлениеТоваров.ФормаОбъекта", ПараметрыФормы);
КонецПроцедуры

// Процедура устанавливает отбор динамических списка формы.
//
&НаСервере
Процедура УстановитьОтборДинамическогоСписка(ИмяРеквизита)
	
	ОтборыСписковКлиентСервер.ИзменитьЭлементОтбораСписка(
		Список, 
		ИмяРеквизита, 
		ЭтотОбъект[ИмяРеквизита], 
		ЗначениеЗаполнено(ЭтотОбъект[ИмяРеквизита]));
		
КонецПроцедуры

&НаКлиенте
Процедура УстановитьДоступностьСклада()

	Элементы.ОтборСклад.ТолькоПросмотр = НЕ ЗначениеЗаполнено(Магазин);

КонецПроцедуры

&НаСервере
Процедура ОбновитьСостояниеОплатыИПоступленияСервер()
	ЗакупкиСервер.ОбновлениеСостоянияОплатыИПоступления();
КонецПроцедуры

&НаСервере
Функция ВозможностьВводаПоступленияНаОснованииТТН(ЗаказПоставщику, ПараметрыФормы, ТекстСообщения)
	
	Возврат ИнтеграцияЕГАИСРТ.ВозможностьВводаПоступленияНаОснованииТТН(ЗаказПоставщику, ПараметрыФормы, ТекстСообщения);
	
КонецФункции // ВозможностьВводаТТН()

&НаСервере
Функция СоздатьНайтиПоступлениеНаСервере(ТТН, ТолькоПоиск, ЗаказПоставщику)
	
	ПоступлениеТоваров = ИнтеграцияЕГАИСРТ.СоздатьНайтиПоступление(ТТН, ТолькоПоиск, ЗаказПоставщику);
	
	Возврат ПоступлениеТоваров;
	
КонецФункции

// ЭлектронноеВзаимодействие.ОбменСКонтрагентами

&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуЭДО(Команда)
	
	ЭлектронноеВзаимодействиеКлиент.ВыполнитьПодключаемуюКомандуЭДО(Команда, ЭтотОбъект, Элементы.Список);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбработчикОжиданияЭДО()
	
	ОбменСКонтрагентамиКлиент.ОбработчикОжиданияЭДО(ЭтотОбъект);
	
КонецПроцедуры

// Конец ЭлектронноеВзаимодействие.ОбменСКонтрагентами

// ЭлектронноеВзаимодействие.ТорговыеПредложения
&НаКлиенте
Процедура Подключаемый_ПодсказкиБизнесСетьНажатие(Команда)
	
	ТорговыеПредложенияКлиент.ОткрытьФормуПодсказок(ЭтаФорма);
	
КонецПроцедуры
// Конец ЭлектронноеВзаимодействие.ТорговыеПредложения

// ЭлектронноеВзаимодействие.БизнесСеть
&НаКлиенте
Процедура ОбновитьИнформациюОНовыхДокументахВСервисе()
	
	БизнесСетьКлиент.ОбновитьИнформациюОНовыхДокументахВСервисе(ЭтотОбъект);
	
КонецПроцедуры
// Конец ЭлектронноеВзаимодействие.БизнесСеть

#КонецОбласти

#Область Новости

// ИнтернетПоддержкаПользователей.Новости, Процедуры и функции для работы с подсистемой новостей
////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ РАБОТЫ С ПОДСИСТЕМОЙ КОНТЕКСТНЫХ НОВОСТЕЙ
//

&НаКлиенте
// Процедура показывает новости, требующие прочтения (важные и очень важные)
//
// Параметры:
//  Нет
//
Процедура Подключаемый_ПоказатьНовостиТребующиеПрочтенияПриОткрытии()
	ИдентификаторыСобытийПриОткрытии = "ПриОткрытии";
	ОбработкаНовостейКлиент.КонтекстныеНовости_ПоказатьНовостиТребующиеПрочтенияПриОткрытии(ЭтаФорма, ИдентификаторыСобытийПриОткрытии);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбработкаНовости(Команда)
	ОбработкаНовостейКлиент.КонтекстныеНовости_ОбработкаКомандыНовости(
	ЭтаФорма,
	Команда
	);
КонецПроцедуры

&НаКлиенте
Процедура КомандаСкрытьТекстНовости(Команда)
	Если Элементы.Найти("ГруппаТекстНовости") <> Неопределено Тогда
		Элементы.ГруппаТекстНовости.Видимость = Ложь;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ТекстНовостиХТМЛПриНажатии(Элемент, ДанныеСобытия, СтандартнаяОбработка)
	
	Если ДанныеСобытия.Свойство("Href") Тогда
		СтандартнаяОбработка = Ложь;
		Если ЗначениеЗаполнено(ДанныеСобытия.Href) Тогда
			ФайловаяСистемаКлиент.ОткрытьНавигационнуюСсылку(ДанныеСобытия.Href);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры
// Конец ИнтернетПоддержкаПользователей.Новости

#КонецОбласти
