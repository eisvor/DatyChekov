&НаКлиенте
Перем КэшированныеЗначения;

// Используется для передачи текущей строки в обработчик ожидания.
&НаКлиенте
Перем ТекущиеДанныеИдентификатор;

#Область ПрограммныйИнтерфейс

#Область ОбработчикиСобытийПодключаемогоОборудования

&НаКлиенте
Процедура ОповещениеПоискаПоШтрихкоду(Штрихкод, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если НЕ ПустаяСтрока(Штрихкод) Тогда
		Если НЕ(КэшированныеЗначения <> Неопределено
			И КэшированныеЗначения.Свойство("Номенклатура")) Тогда
			ОбработкаТабличнойЧастиТоварыКлиент.ОбновитьКэшированныеЗначенияДляУчетаСерий(
				ЭтотОбъект.Элементы.Товары,
				КэшированныеЗначения,
				ПараметрыУказанияСерий);
		КонецЕсли;
		СтруктураПараметровКлиента = ПолученШтрихкодИзСШК(Штрихкод);
		ОбработатьДанныеПоКодуКлиент(СтруктураПараметровКлиента);
		ОбновитьИтоговыеПоказатели(ЭтотОбъект);
		ПриИзмененииЭлементаГосИС();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеПоискаПоМагнитномуКоду(ТекКод, ДополнительныеПараметры) Экспорт
	
	Если НЕ ПустаяСтрока(ТекКод) Тогда
		СтруктураПараметровКлиента = ПолученМагнитныйКод(ТекКод);
		ОбработатьДанныеПоКодуКлиент(СтруктураПараметровКлиента);
		ОбновитьИтоговыеПоказатели(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеОткрытьФормуВыбораДанныхПоиска(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено Тогда
		ПродолжитьОбработатьДанныеПоКодуКлиент(Результат);
		ОбработатьДанныеПоКодуКлиент(Результат)
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ПолученМагнитныйКод(МагнитныйКод) Экспорт 
	
	СтруктураРезультат = ДанныеПоискаПоМагнитномуКодуСервер(МагнитныйКод);
	Возврат ПодключаемоеОборудованиеРТКлиент.ПолученМагнитныйКод(ЭтотОбъект, СтруктураРезультат);
	
КонецФункции

&НаКлиенте
Функция ПолученШтрихкодИзСШК(Штрихкод) Экспорт
	
	СтруктураРезультат = ДанныеПоискаПоШтрихкодуСервер(Штрихкод);
	Возврат ПодключаемоеОборудованиеРТКлиент.ПолученШтрихкодИзСШК(ЭтотОбъект, СтруктураРезультат);
	
КонецФункции

&НаКлиенте
Процедура ОбработатьДанныеПоКодуКлиент(СтруктураПараметровКлиента) Экспорт
	
	ОткрытаБлокирующаяФорма = Ложь;
	
	Если СтруктураПараметровКлиента.Свойство("НеобходимостьВводаАкцизнойМарки")
		И СтруктураПараметровКлиента.Свойство("АктивизироватьСтроку") Тогда
		
		ПриИзмененииЭлементаГосИС();
		
	Иначе
		
		ПодключаемоеОборудованиеРТКлиент.ОбработатьДанныеПоКоду(ЭтотОбъект, СтруктураПараметровКлиента, ОткрытаБлокирующаяФорма);
		
	КонецЕсли;
	
	Если НЕ ОткрытаБлокирующаяФорма Тогда
		ЗавершитьОбработкуДанныхПоКодуКлиент(СтруктураПараметровКлиента);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ДобавитьНайденныеПозицииТоваров(СтруктураПараметров, ДополнительныеПараметры = Неопределено) Экспорт
	
	Возврат ДобавитьНайденныеПозицииТоваровСервер(СтруктураПараметров, ДополнительныеПараметры);
	
КонецФункции

&НаКлиенте
Процедура ПолучитьВесЗавершение(Результат, Параметры) Экспорт
	
	Если Результат Тогда
		ТоварыКоличествоУпаковокПриИзменении(ЭтотОбъект);
		ОбновитьИтоговыеПоказатели(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеОткрытьФормуВводаАкцизнойМарки(Результат, ДополнительныеПараметры) Экспорт
	
	СтрокаТЧ = Объект.Товары.НайтиПоИдентификатору(ДополнительныеПараметры.ИдентификаторСтроки);
	
	Если СтрокаТЧ = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ИзмененоКоличествоУпаковок = Ложь;
	Если Результат <> Неопределено Тогда
		
		Если ТипЗнч(Результат) = Тип("Строка") Тогда
		
			СтруктураПоиска = Новый Структура;
			СтруктураПоиска.Вставить("КлючСвязи", ДополнительныеПараметры.ТекущийКлючСвязи);
			
			МассивАкцизныхМарок = Объект.АкцизныеМарки.НайтиСтроки(СтруктураПоиска);
			
			Для Каждого СтрокаАкцизнаяМарка Из МассивАкцизныхМарок Цикл
				Объект.АкцизныеМарки.Удалить(СтрокаАкцизнаяМарка);
			КонецЦикла;
			
			СтруктураШтрихкодУпаковки = ОбщегоНазначенияРТКлиентСервер.СтруктураШтрихкодУпаковки();
			СтруктураШтрихкодУпаковки.Организация    = Объект.Организация;
			СтруктураШтрихкодУпаковки.Магазин        = Объект.Магазин;
			СтруктураШтрихкодУпаковки.Штрихкод       = Результат;
			СтруктураШтрихкодУпаковки.КлючСвязи      = ДополнительныеПараметры.ТекущийКлючСвязи;
			СтруктураШтрихкодУпаковки.Номенклатура   = СтрокаТЧ.Номенклатура;
			СтруктураШтрихкодУпаковки.Характеристика = СтрокаТЧ.Характеристика;
			
			ДанныеШтрихкодаУпаковки = ИнтеграцияЕГАИСРТВызовСервера.СформироватьДанныеПоАкцизнымМаркам(СтруктураШтрихкодУпаковки);
			
			СтрокаАкцизнаяМарка = Объект.АкцизныеМарки.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаАкцизнаяМарка, ДанныеШтрихкодаУпаковки);
			
			Если СтрокаТЧ.Количество <> 1 Тогда
				
				СтрокаТЧ.Упаковка = ПредопределенноеЗначение("Справочник.УпаковкиНоменклатуры.ПустаяСсылка");
				СтрокаТЧ.КоличествоУпаковок = 1;
				СтрокаТЧ.Количество = 0;
				ИзмененоКоличествоУпаковок = Истина;
				НуженПересчетСкидок = Истина;
			КонецЕсли;
			Модифицированность = Истина;
		КонецЕсли;
		
		Если СтрокаТЧ <> Неопределено И ИзмененоКоличествоУпаковок Тогда
			Если СтрокаТЧ.СтатусУказанияСерий <> 0 Тогда
				УказатьСерии("КоличествоУпаковок");
			Иначе
				ТоварыУпаковкаПриИзменении(СтрокаТЧ);
				ПриИзмененииТоварыКоличестваУпаковок(СтрокаТЧ);
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ДополнительныеПараметры.Свойство("СтруктураПараметровКлиента")
		И СтрокаТЧ <> Неопределено Тогда
		ЗавершитьОбработкуДанныхПоКодуКлиент(ДополнительныеПараметры.СтруктураПараметровКлиента);
	КонецЕсли;
	
	// Интерфейс ЕГАИС
	Если СтрокаТЧ <> Неопределено Тогда
		ИнтеграцияЕГАИСРТКлиент.ЗаполнитьКолонкуАкцизныеМаркиВСтроке(СтрокаТЧ, Объект.АкцизныеМарки, ОперацияОтражаетсяВЕГАИС);
	КонецЕсли;
	
КонецПроцедуры


&НаКлиенте
Процедура ОбработатьСозданиеИВыборНовойХарактеристики(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущаяСтрока = Объект.Товары.НайтиПоИдентификатору(ДополнительныеПараметры.ИдентификаторТекущейСтроки);
	ТекущаяСтрока.Характеристика = Результат;
	ТоварыХарактеристикаПриИзменении(Неопределено);

КонецПроцедуры

&НаСервере
Функция ДанныеПоискаПоМагнитномуКодуСервер(МагнитныйКод)
	
	Возврат ПодключаемоеОборудованиеРТ.ДанныеПоискаПоМагнитномуКоду(МагнитныйКод, ЭтотОбъект);
	
КонецФункции

&НаСервере
Функция ДанныеПоискаПоШтрихкодуСервер(Штрихкод)
	
	Возврат ПодключаемоеОборудованиеРТ.ДанныеПоискаПоШтрихкоду(Штрихкод, ЭтотОбъект);
	
КонецФункции

&НаКлиенте
Процедура ОповещениеОбработатьДанныеПоКоду(СтруктураРезультат, ДополнительныеПараметры) Экспорт
	
	ПродолжитьОбработатьДанныеПоКодуКлиент(СтруктураРезультат);
	
КонецПроцедуры

&НаКлиенте
Процедура ПродолжитьОбработатьДанныеПоКодуКлиент(СтруктураРезультат) Экспорт
	
	ИдентификаторСтроки = Неопределено;
	СтрокаРезультата = СтруктураРезультат.ЗначенияПоиска[0];
	
	Если СтрокаРезультата.Свойство("Карта") Тогда
		
		ПодключаемоеОборудованиеРТКлиент.ВставитьПредупреждениеОНевозможностиОбработкиКарт(СтруктураРезультат, СтрокаРезультата);
		
	ИначеЕсли СтрокаРезультата.Свойство("СерийныйНомер") Тогда
		
		ИдентификаторСтроки = ПодключаемоеОборудованиеРТКлиент.ДобавитьНайденныеСерийныеНомера(ЭтотОбъект, СтрокаРезультата);
		
	Иначе // Номенклатура.
		
		ИдентификаторСтроки = ДобавитьНайденныеПозицииТоваровСервер(СтрокаРезультата);
		
	КонецЕсли;

	Если СтрокаРезультата.Свойство("ТекстПредупреждения") Тогда
		СтруктураРезультат.Вставить("ТекстПредупреждения", СтрокаРезультата.ТекстПредупреждения);
	КонецЕсли;
	
	Если ИдентификаторСтроки <> Неопределено Тогда
		СтруктураРезультат.Вставить("АктивизироватьСтроку", ИдентификаторСтроки);
	КонецЕсли;
		
	Если СтрокаРезультата.Свойство("НеобходимостьВводаАкцизнойМарки") Тогда
		СтруктураРезультат.Вставить("НеобходимостьВводаАкцизнойМарки", СтрокаРезультата.НеобходимостьВводаАкцизнойМарки);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ОбработатьДанныеИзТСДКлиент(СтруктураПараметров, ДополнительныеПараметры) Экспорт
	
	Результат = ПодключаемоеОборудованиеРТКлиент.ОбработатьДанныеПоНоменклатуреИзТСДКлиент(ЭтотОбъект, СтруктураПараметров);
	
	Если Не ДополнительныеПараметры = Неопределено Тогда 
		Если ДополнительныеПараметры.Свойство("ОбработатьПослеЗагрузки") И ДополнительныеПараметры.ОбработатьПослеЗагрузки Тогда 
			ОбработатьДанныеПослеЗагрузкиИзТСД(СтруктураПараметров, Неопределено);
		КонецЕсли;
	КонецЕсли;
	
	ПодключаемоеОборудованиеРТКлиент.СообщитьТекстПредупреждения(СтруктураПараметров);
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ДобавитьНайденныеПозицииТоваровСервер(СтруктураПараметров, ДополнительныеПараметры = Неопределено)
	
	Если Не ДополнительныеПараметры = Неопределено Тогда
		СтруктураПараметров = ДополнительныеПараметры;
		ИдентификаторСтроки = СтруктураПараметров;
	Иначе
		ИдентификаторСтроки = Неопределено;
	КонецЕсли;
	
	ОбработатьБезМаркировки = Ложь;
	Если СтруктураПараметров.Свойство("ОбработатьБезМаркировки")
		И СтруктураПараметров.ОбработатьБезМаркировки Тогда
		ОбработатьБезМаркировки = Истина;
	КонецЕсли;
	
	ДобавленаСтрока = Ложь;
	Если СтруктураПараметров.Свойство("ДобавленаСтрока") Тогда
		ДобавленаСтрока = СтруктураПараметров.ДобавленаСтрока;
	КонецЕсли;
	
	СтруктураДействий = Новый Структура;
	Если СтруктураПараметров.Свойство("ТекущаяСтрока") Тогда
		ТекущаяСтрока = СтруктураПараметров.ТекущаяСтрока;
		СтруктураДействий.Вставить("ПересчитатьКоличествоУпаковок");
	Иначе
		ТекущаяСтрока = ИнициализацияСтрокиТоваров(ЭтотОбъект, СтруктураПараметров, ДобавленаСтрока);
		СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
	КонецЕсли;
	
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ЗаполнитьКлючСвязи(Объект.Товары, ТекущаяСтрока, "КлючСвязи");
	
	Если Объект.ФиксироватьНомераГТД Тогда
		УчетПрослеживаемыхТоваровКлиентСерверРТ.ДополнитьОписаниеНастроекПересчетаРеквизитовТабличнойЧасти(
			Объект,
			СтруктураДействий,
			"СкладПолучатель");
	КонецЕсли;
		
	Если ДобавленаСтрока Тогда
		ОбработкаТабличнойЧастиТоварыКлиентСервер.ДополнитьСтруктуруДействиямиПриИзмененииЭлемента(Объект, СтруктураДействий, "Номенклатура");
		
		СтруктураДействий.Вставить("ЗаполнитьЦенуПродажи", СтруктураЗаполненияЦеныСервер());
		СтруктураСправки = Новый Структура;
		СтруктураСправки.Вставить("Дата", Объект.Дата);
		СтруктураДействий.Вставить("ПроверитьНеобходимостьВводаСправкиНаАлкоголь", СтруктураСправки);
		СтруктураДействий.Вставить("ПроверитьНеобходимостьВводаМаркируемойПродукцииГосИС", ПараметрыПроверкиМаркируемойПродукции(ЭтотОбъект));
		
		СтруктураМарки = Новый Структура;
		СтруктураМарки.Вставить("Дата", Объект.Дата);
		СтруктураМарки.Вставить("ОперацияОтражаетсяВЕГАИС", ОперацияОтражаетсяВЕГАИС);
		СтруктураДействий.Вставить("ПроверитьНеобходимостьВводаАкцизнойМарки", СтруктураМарки);
		
		
	КонецЕсли;
	
	СтруктураДействий.Вставить("ПересчитатьСумму");
	
	ИдентификаторСтроки = ПодключаемоеОборудованиеРТ.ЗавершениеОбработкиСтрокиТоваров(ЭтотОбъект, ТекущаяСтрока, СтруктураДействий);
	
	Если Не ЕстьАлкогольнаяПродукцияЕГАИС И ТекущаяСтрока.НеобходимостьВводаСправкиНаАлкоголь Тогда
		ЕстьАлкогольнаяПродукцияЕГАИС = Истина;
		УстановитьВидимостьИДоступностьЕГАИС(ЭтотОбъект);
	КонецЕсли;
	
	Если ИдентификаторСтроки <> Неопределено Тогда
		Если ТекущаяСтрока.НеобходимостьВводаАкцизнойМарки Тогда
			ИнтеграцияЕГАИСРТ.ОбработатьНеобходимостьВводаАкцизнойМарки(СтруктураПараметров, Объект, ТекущаяСтрока, "МагазинОтправитель");
		КонецЕсли;
	КонецЕсли;
	
	Если Не ДополнительныеПараметры = Неопределено Тогда
		СтруктураПараметров = ИдентификаторСтроки;
		Возврат СтруктураПараметров;
	Иначе
		Возврат ИдентификаторСтроки;
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Функция ОбработатьДанныеПослеЗагрузкиИзТСД(СтруктураПараметров, ДополнительныеПараметры) Экспорт
	
	ПриИзмененииЭлементаГосИС();
	
КонецФункции

#КонецОбласти

&НаКлиенте
Процедура ОповещениеПоискаПоНаименованию(Результат, ДополнительныеПараметры) Экспорт
		
	Если Результат <> Неопределено Тогда
		ПродолжитьОбработатьДанныеПоКодуКлиент(Результат);
		ЗавершитьОбработкуДанныхПоКодуКлиент(Результат);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьНаОснованииЧекЕГАИСПодтверждениеЗаписи(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса <> КодВозвратаДиалога.ОК Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ Записать() Тогда
		Возврат;
	КонецЕсли;
	
	СоздатьЧекЕГАИСПослеЗаписиДокумента();
	
КонецПроцедуры

&НаСервере
Функция Подключаемый_ОбработатьВводШтрихкода(ДанныеШтрихкода, КэшированныеЗначения, ПараметрыСканирования = Неопределено)
	
	РезультатОбработкиШтрихкода = ШтрихкодированиеОбщегоНазначенияИС.ОбработатьВводШтрихкода(ЭтотОбъект, ДанныеШтрихкода, КэшированныеЗначения, ПараметрыСканирования);
	
	ПослеОбработкиШтрихкодов(
		РезультатОбработкиШтрихкода,
		КэшированныеЗначения);
	
	РезультатОбработкиШтрихкода.ИзмененныеСтроки  = Неопределено;
	РезультатОбработкиШтрихкода.ДобавленныеСтроки = Неопределено;
	
	Возврат РезультатОбработкиШтрихкода;
	
КонецФункции

// Обработка выборка характеристики, после обработки ШК.
//
// Параметры:
//  Результат - Структура - структура с повторяющимися штрихкодами.
//  Параметры - Структура - структура дополнительных параметров.
//
&НаКлиенте
Процедура ОбработатьСериюНоменклатурыПослеВыбораХарактеристики(Результат, Параметры) Экспорт
	
	Если ЗначениеЗаполнено(Результат) Тогда
		Параметры.Вставить("Характеристика", Результат);
		ПодключаемоеОборудованиеРТКлиент.ЗаполнениеСерииНоменклатуры(ЭтотОбъект, Параметры);
		ПодключаемоеОборудованиеРТКлиент.ЗаполнениеНоменклатурыИХарактеристики(ЭтотОбъект, Параметры);
		ПодключаемоеОборудованиеРТКлиент.ЗапуститьОбработкуДействийСерий(ЭтотОбъект, Параметры);
	КонецЕсли;
	
КонецПроцедуры

//Обработать изменение строки
&НаКлиенте
Процедура ОбработатьИзменениеСтроки(ИдентификаторСтроки, Действие) Экспорт
	
	ТекущаяСтрока = Объект.Товары.НайтиПоИдентификатору(ИдентификаторСтроки);
	
	Если Действие = "ИзмененоКоличество" Тогда
		ПриИзмененииТоварыКоличестваУпаковок(ТекущаяСтрока);
	ИначеЕсли Действие = "ИзмененыНоменклатураХарактеристика" Тогда
		ПриИзмененииТоварыНоменклатура(ТекущаяСтрока);
		ЗаполнитьСтатусыУказанияСерийПриОкончанииРедактированияСтрокиТЧ(ИдентификаторСтроки, КэшированныеЗначения);
		ОбработкаТабличнойЧастиТоварыКлиент.ОбновитьСтатусСерийИПодарочныхСертификатов(ТекущаяСтрока);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Пропускаем инициализацию, чтобы гарантировать получение формы при передаче параметра "АвтоТест".
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	РаботаСоШтрихкодамиПереопределяемый.ОпределитьФильтрПоискаШтрихкода(ЭтотОбъект);
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ЗаполнитьДокументПоТипуПеремещения();
	КонецЕсли;
	
	УстановитьУсловноеОформление();
	
	УстановитьДоступностьКомандБуфераОбмена();
	
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	
	Если Не ПравоДоступа("Добавление", Метаданные.Документы.ТТНИсходящаяЕГАИС) Тогда 
		Элементы.ФормаСоздатьНаОснованииТТНИсходящаяЕГАИС.Видимость = Ложь;	
	КонецЕсли;
	
	УстановитьВидимостьКоличестваРНПТ();
	
	ДополнительныеКолонкиНоменклатуры = ЗначениеНастроекПовтИсп.ПолучитьЗначениеКонстанты("ДополнительнаяКолонкаПриОтображенииНоменклатуры");
	
	ОбщегоНазначенияРТ.ЗаполнитьШапкуДокумента(Объект,КартинкаСостоянияДокумента,Элементы.КартинкаСостоянияДокумента.Подсказка,РазрешеноПроведение);
	ПараметрыУказанияСерий = Новый ФиксированнаяСтруктура(Документы.ПеремещениеТоваров.ПараметрыУказанияСерий(Объект));
	
	Если НЕ ЗначениеЗаполнено(Объект.ДокументОснование) Тогда
		Элементы.ДокументОснование.Видимость = Ложь;
		Элементы.ПредставлениеДокументаОснования.Видимость = Ложь;
	Иначе
		
		ОснованиеОбъект = Объект.ДокументОснование.ПолучитьОбъект();
		
		Если ОснованиеОбъект = Неопределено Тогда
			Элементы.ДокументОснование.Видимость = Ложь;
		Иначе
			Элементы.ПредставлениеДокументаОснования.Видимость = Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		ТипУслуга = Перечисления.ТипыНоменклатуры.Услуга;
		
		ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьТипНоменклатурыВТЧСервер(Объект.Товары);
		ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьПризнакИспользованияХарактеристик(Объект.Товары);
		ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьИспользоватьСерийныеНомераВТЧСервер(Объект.Товары);
		ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьСтатусыУказанияСерий(Объект,ПараметрыУказанияСерий);
		
		УстановитьСостояниеОтклонениеПриПеремещении();
		ОбработкаТабличнойЧастиТоварыКлиентСервер.ОбновитьСтатусыСерийИПодарочныхСертификатов(Объект.Товары);
		ОбновитьИтоговыеПоказатели(ЭтотОбъект);
		
		// ИнтеграцияЕГАИС - отключенный функционал
		//ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьНеобходимостьВводаСправкиНаАлкоголь(Объект.Товары);
		
		ЕстьАлкогольнаяПродукцияЕГАИС = Ложь;
		Для Каждого СтрокаТовары Из Объект.Товары Цикл
			Если Ложь И СтрокаТовары.НеобходимостьВводаСправкиНаАлкоголь Тогда
				ЕстьАлкогольнаяПродукцияЕГАИС = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		// Конец ИнтеграцияЕГАИС
		
		УправлениеЭлементамиФормыНаСервере();
		
		СобытияФормРТ.ПриЧтенииНаСервере(ЭтотОбъект, ЭтотОбъект.Объект);
		
	КонецЕсли;
	
	ИспользоватьПередачиТоваровМеждуОрганизациями = ЗначениеНастроекПовтИсп.ПолучитьЗначениеКонстанты("ИспользоватьПередачиТоваровМеждуОрганизациями") 
		И ЗначениеЗаполнено(Объект.ДокументОснование)
		И ТипЗнч(Объект.ДокументОснование) = Тип("ДокументСсылка.ПередачаТоваровМеждуОрганизациями");
		
	
	ПодключаемоеОборудованиеРТ.НастроитьПодключаемоеОборудование(ЭтотОбъект);
	НастроитьФормуПоДополнительнымПравам();
	
	УстановитьВидимостьСтатусыСерийИПодарочныхСертификатов();
	
	ОбщегоНазначенияРТКлиентСервер.УстановитьКартинкуДляКомментария(Элементы.СтраницаКомментарий, Объект.Комментарий);
	
	// ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	ПараметрыЭДОПриСоздании= ОбменСКонтрагентами.ПараметрыПриСозданииНаСервере_ФормаДокумента();
	ПараметрыЭДОПриСоздании.Форма = ЭтотОбъект;
	ПараметрыЭДОПриСоздании.ДокументСсылка = Объект.Ссылка;
	ПараметрыЭДОПриСоздании.КонтроллерСостояниеЭДО = Элементы.ДекорацияСостояниеЭДО;
	ПараметрыЭДОПриСоздании.ГруппаСостояниеЭДО = Элементы.ГруппаСостояниеЭДО;
	НаправленияЭДО = ОбменСКонтрагентами.НаправленияДокументов();
	ПараметрыЭДОПриСоздании.Направление = НаправленияЭДО.Исходящий;
	
	ОбменСКонтрагентами.ПриСозданииНаСервере_ФормаДокумента(ПараметрыЭДОПриСоздании);
	// Конец ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	
	// Интерфейс ГосИС - отключенный функционалС
	ВестиУчетАлкогольнойПродукции = Ложь; // ИнтеграцияЕГАИСРТ.НужноРаботатьСЕГАИС(Объект.Дата);
	ВестиУчетМаркируемойПродукцииИСМП = Ложь; //ПолучитьФункциональнуюОпцию("ВестиУчетМаркируемойПродукцииИСМП");
	МаркировкаВключена = Ложь; //ВестиУчетАлкогольнойПродукции Или ВестиУчетМаркируемойПродукцииИСМП;
	Элементы.ГруппаВыбытиеМаркированныхТоваров.Видимость = МаркировкаВключена;
	ВыбытиеМаркированныхТоваров = Ложь; // ЗначениеЗаполнено(Объект.СведенияОВыбытииМаркированныхТоваров);
	Элементы.СведенияОВыбытииМаркированныхТоваров.Видимость = ВыбытиеМаркированныхТоваров;
	// Конец Интерфейс ГосИС
	
	//ИнтеграцияИСМПТК
	//ИСЦЭДМ
	РаботаСДокументамиИСМПТКПереопределяемый.ОбновитьРеквизитыИСЦЭДМ(ЭтаФорма);
	//Конец ИнтеграцияИСМПТК
	
	СобытияФормРТ.ПриСозданииНаСервере(ЭтотОбъект, Отказ, СтандартнаяОбработка);
	ПерезаполнитьПризнакиМаркировки();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// ПодключаемоеОборудование
	МенеджерОборудованияКлиент.НачатьПодключениеОборудованиеПриОткрытииФормы(Неопределено, ЭтотОбъект, "СканерШтрихкода, СчитывательМагнитныхКарт");
	// Конец ПодключаемоеОборудование
	
	Если Не Объект.Ссылка.Пустая() Тогда
		ПроверитьВыводНапоминанияЕГАИС();
	КонецЕсли;
	
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	ОбменСКонтрагентамиКлиент.ПриОткрытии(ЭтотОбъект);
	// Конец ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	// ПодключаемоеОборудование
	МенеджерОборудованияКлиент.НачатьОтключениеОборудованиеПриЗакрытииФормы(Неопределено, ЭтотОбъект);
	// Конец ПодключаемоеОборудование
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ИсточникВыбора.ИмяФормы = "Обработка.ПодборТоваров.Форма.Форма" Тогда
		ОбработкаВыбораПодборНаСервере(ВыбранноеЗначение);
	ИначеЕсли ИсточникВыбора.ИмяФормы = "Документ.СчетФактураВыданный.Форма.ФормаДокумента"
		ИЛИ ИсточникВыбора.ИмяФормы = "Документ.СчетФактураВыданный.Форма.ФормаСписка" Тогда
		НастроитьОтображениеРеквизитовСчетаФактуры(ЭтаФорма, ВыбранноеЗначение,,ОрганизацииОднородны);
		УправлениеЭлементамиФормыНаСервере();
		ПриИзмененииЭлементаГосИС();
	ИначеЕсли ИсточникВыбора.ИмяФормы = "Документ.СчетФактураПолученный.Форма.ФормаДокумента"
		ИЛИ ИсточникВыбора.ИмяФормы = "Документ.СчетФактураПолученный.Форма.ФормаСписка" Тогда
		
		Если Не ВыбранноеЗначение.ТекстСчетФактура = "Создать счет-фактуру" Тогда
			ВыбранноеЗначение.ТекстСчетФактура = НСтр("ru='Счет-фактура полученный '") + ВыбранноеЗначение.ТекстСчетФактура;
		КонецЕсли;
		НастроитьОтображениеРеквизитовСчетаФактуры(ЭтаФорма, ВыбранноеЗначение, "Полученный",ОрганизацииОднородны);
	КонецЕсли;
	
	Если Окно <> Неопределено Тогда
		Окно.Активизировать();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ВнешнееСобытие(Источник, Событие, Данные)
	
	Если ВводДоступен() И Не ТолькоПросмотр Тогда
		//Если (Событие = "Штрихкод" Или Событие = "ПолученШтрихкод") И НЕ ЕстьПереданныеЧекиЕГАИС Тогда
		//	ДанныеСоСканераСтруктура = СобытияФормИСКлиент.ВнешнееСобытиеПреобразоватьДанныеСоСканераВСтруктуру(
		//		ЭтотОбъект, 
		//		Источник, 
		//		Событие, 
		//		Данные);
		//		
		//	Если ДанныеСоСканераСтруктура = Неопределено Тогда
		//		Возврат;
		//	КонецЕсли;
		//	ОбработатьКодМаркировки(ДанныеСоСканераСтруктура);
		//Иначе
			ПодключаемоеОборудованиеРТКлиент.ВнешнееСобытиеОборудования(ЭтотОбъект, Источник, Событие, Данные);
		//КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)

	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	ТипУслуга = Перечисления.ТипыНоменклатуры.Услуга;
	ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьПризнакИспользованияХарактеристик(Объект.Товары);
	ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьИспользоватьСерийныеНомераВТЧСервер(Объект.Товары);
	ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьТипНоменклатурыВТЧСервер(Объект.Товары);
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	
	СтруктураСправки = Новый Структура;
	СтруктураСправки.Вставить("Дата", Объект.Дата);
	ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьНеобходимостьВводаСправкиНаАлкоголь(Объект.Товары, СтруктураСправки);
	
	УправлениеЭлементамиФормыНаСервере();
	
	ОбщегоНазначенияРТКлиентСервер.ОбновитьСостояниеДокумента(Объект, Элементы.КартинкаСостоянияДокумента.Подсказка, КартинкаСостоянияДокумента, РазрешеноПроведение);
	УстановитьСостояниеОтклонениеПриПеремещении();
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ОбновитьСтатусыСерийИПодарочныхСертификатов(Объект.Товары);
	ОбновитьИтоговыеПоказатели(ЭтотОбъект);
	
	ДанныеТранспортногоРаздела = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Ссылка, "ДанныеТранспортногоРаздела").Получить();
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// ЭлектронноеВзаимодействие.ОбменСКонтрагентами.
	ПараметрыЭДОПриСоздании = ОбменСКонтрагентами.ПараметрыПриЧтенииНаСервере_ФормаДокумента();
	ПараметрыЭДОПриСоздании.Форма = ЭтотОбъект;
	ПараметрыЭДОПриСоздании.ДокументСсылка = Объект.Ссылка;
	ПараметрыЭДОПриСоздании.КонтроллерСостояниеЭДО = Элементы.ДекорацияСостояниеЭДО;
	ПараметрыЭДОПриСоздании.ГруппаСостояниеЭДО = Элементы.ГруппаСостояниеЭДО;
	ОбменСКонтрагентами.ПриЧтенииНаСервере_ФормаДокумента(ПараметрыЭДОПриСоздании);
	// ЭлектронноеВзаимодействие.ОбменСКонтрагентами.
	
	//ИнтеграцияИСМПТК
	//ИСЦЭДМ
	РаботаСДокументамиИСМПТКПереопределяемый.ОбновитьРеквизитыИСЦЭДМ(ЭтаФорма);
	//Конец ИнтеграцияИСМПТК
	
	СобытияФормРТ.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	ТекущийОбъект.ДанныеТранспортногоРаздела = Новый ХранилищеЗначения(ДанныеТранспортногоРаздела);
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)

	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьТипНоменклатурыВТЧСервер(Объект.Товары);
	ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьПризнакИспользованияХарактеристик(Объект.Товары);
	ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьИспользоватьСерийныеНомераВТЧСервер(Объект.Товары);
	УстановитьСостояниеОтклонениеПриПеремещении();
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ОбновитьСтатусыСерийИПодарочныхСертификатов(Объект.Товары);
	ОбновитьИтоговыеПоказатели(ЭтотОбъект);
	
	ДанныеТранспортногоРаздела = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Ссылка, "ДанныеТранспортногоРаздела").Получить();
	
	// ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	ПараметрыПослеЗаписи = ОбменСКонтрагентами.ПараметрыПослеЗаписиНаСервере();
	ПараметрыПослеЗаписи.Форма = ЭтотОбъект;
	ПараметрыПослеЗаписи.ДокументСсылка = Объект.Ссылка;
	ПараметрыПослеЗаписи.КонтроллерСостояниеЭДО = Элементы.ДекорацияСостояниеЭДО;
	ПараметрыПослеЗаписи.ГруппаСостояниеЭДО = Элементы.ГруппаСостояниеЭДО;
	
	ОбменСКонтрагентами.ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи, ПараметрыПослеЗаписи);
	// Конец ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	
	// ГосИС
	СобытияФормРТ.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец ГосИС
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	ОбщегоНазначенияРТКлиентСервер.ОбновитьСостояниеДокумента(Объект, Элементы.КартинкаСостоянияДокумента.Подсказка, КартинкаСостоянияДокумента, РазрешеноПроведение);
	
	ОбменСКонтрагентамиКлиент.ПослеЗаписи_ФормаДокумента(ЭтаФорма, ПараметрыЗаписи);
	
	СобытияФормРТКлиент.ПослеЗаписи(ЭтотОбъект, ПараметрыЗаписи);
	
	// &ЗамерПроизводительности
	ОценкаПроизводительностиРТКлиент.ЗакончитьЗамер(ПараметрыЗаписи.Замер);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "КопированиеСтрокВБуферОбмена" Или ИмяСобытия = "ВставкаСтрокИзБуфераОбмена" Тогда
		УстановитьДоступностьКомандБуфераОбмена();
	КонецЕсли;
	
	// ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	ПараметрыОповещения = ОбменСКонтрагентамиКлиент.ПараметрыОповещенияЭДО_ФормаДокумента();
	ПараметрыОповещения.Форма = ЭтотОбъект;
	ПараметрыОповещения.ДокументСсылка = Объект.Ссылка;
	ПараметрыОповещения.КонтроллерСостояниеЭДО = Элементы.ДекорацияСостояниеЭДО;
	ПараметрыОповещения.ГруппаСостояниеЭДО = Элементы.ГруппаСостояниеЭДО;
	
	ОбменСКонтрагентамиКлиент.ОбработкаОповещения_ФормаДокумента(ИмяСобытия, Параметр, Источник, ПараметрыОповещения);
	// Конец ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("КэшированныеЗначения",    КэшированныеЗначения);
	ДополнительныеПараметры.Вставить("СтандартнаяОбработка",    Истина);
	ДополнительныеПараметры.Вставить("ТребуетсяСерверныйВызов", Ложь);
	
	СобытияФормРТКлиент.ОбработкаОповещения(ЭтотОбъект, ИмяСобытия, Параметр, Источник, ДополнительныеПараметры);
	
	Если ДополнительныеПараметры.ТребуетсяСерверныйВызов Тогда
		ОбработкаОповещенияНаСервере(ИмяСобытия, Параметр, Источник);
	КонецЕсли;
	
	//ИнтеграцияИСМПТК
	Если ИмяСобытия = "Запись_АктВнутреннегоПеремещенияИСЦЭДМ" Тогда 
		//ИСЦЭДМ
		ОбработкаОповещенияЗаписиИСЦЭДМНаСервере();
	КонецЕсли;
	//Конец ИнтеграцияИСМПТК
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	// &ЗамерПроизводительности
	Замер = ОценкаПроизводительностиРТКлиент.НачатьЗамер(Ложь, 
		"Документ.ПеремещениеТоваров.ФормаДокумента.Запись",
		Ложь);
	СобытияФормРТКлиент.ПередЗаписью(ЭтотОбъект, Отказ, ПараметрыЗаписи);
	
	ПараметрыЗаписи.Вставить("Замер", Замер);

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаНавигационнойСсылки(НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СобытияФормИСКлиент.ОбработкаНавигационнойСсылки(ЭтотОбъект, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка);
	
КонецПроцедуры


#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура МагазинОтправительПриИзменении(Элемент)
	
	ПриИзмененииМагазина("Отправитель");
	
КонецПроцедуры

&НаКлиенте
Процедура МагазинПолучательПриИзменении(Элемент)
	
	ПриИзмененииМагазина("Получатель");
	
КонецПроцедуры

&НаКлиенте
Процедура СкладОтправительПриИзменении(Элемент)
	
	ПриИзмененииСклада("Отправитель");
	
	ПроверитьВыводНапоминанияЕГАИС();
	
КонецПроцедуры

&НаКлиенте
Процедура СкладПолучательПриИзменении(Элемент)
	
	ПриИзмененииСклада("Получатель");
	
	ПроверитьВыводНапоминанияЕГАИС();
	
КонецПроцедуры

&НаКлиенте
Процедура КомментарийПриИзменении(Элемент)
	ПодключитьОбработчикОжидания("Подключаемый_УстановитьКартинкуДляКомментария", 0.5, Истина);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_УстановитьКартинкуДляКомментария()
	ОбщегоНазначенияРТКлиентСервер.УстановитьКартинкуДляКомментария(Элементы.СтраницаКомментарий, Объект.Комментарий);
КонецПроцедуры

&НаКлиенте
Процедура ТТНИсходящаяЕГАИСНажатие(Элемент, СтандартнаяОбработка)
	Если ЗначениеЗаполнено(Объект.ТТНИсходящаяЕГАИС) Тогда
		ПоказатьЗначение(, Объект.ТТНИсходящаяЕГАИС);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ТТНВходящаяЕГАИСНажатие(Элемент, СтандартнаяОбработка)
	Если ЗначениеЗаполнено(Объект.ТТНВходящаяЕГАИС) Тогда
		ПоказатьЗначение(, Объект.ТТНВходящаяЕГАИС);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияЭДОНажатие(Элемент, СтандартнаяОбработка)
	
	// ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	ОбменСКонтрагентамиКлиент.СостояниеЭДОНажатие_ФормаДокумента(ЭтотОбъект, СтандартнаяОбработка);
	// Конец ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	
КонецПроцедуры

&НаКлиенте
Процедура ТекстСчетФактураПолученныйНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ЗакупкиКлиент.ВвестиСчетФактуру(ЭтаФорма, Объект.ОрганизацияПолучатель, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	ОрганизацияПриИзмененииСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПолучательПриИзменении(Элемент)
	
	ОрганизацияПолучательПриИзмененииСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура ВестиУчетПоГТДПриИзменении(Элемент)
	
	УстановитьВидимостьКоличестваРНПТ();
	ПересчитатьКоличествоРНПТ();
	
	УправлениеЭлементамиФормыНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ТекстСчетФактураНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПродажиКлиент.ВвестиСчетФактуру(ЭтаФорма, Объект, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура СписокСчетовФактурНажатие(Элемент)
    
    // &ЗамерПроизводительности
	ОценкаПроизводительностиРТКлиент.НачатьЗамер(
		     Истина, "Документ.СчетФактураВыданный.Форма.ФормаСписка.Открытие");
             
	СтруктураОтбор = Новый Структура("ДокументОснование, Организация, ПометкаУдаления", Объект.Ссылка, Объект.Организация, Ложь);
	
	ОткрытьФорму(
		"Документ.СчетФактураВыданный.ФормаСписка",
		Новый Структура("Отбор", СтруктураОтбор),
		ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура ВвестиИсправлениеСчетаФактуры(Команда)
	ПродажиКлиент.ВвестиСчетФактуру(ЭтаФорма, Объект, Ложь, Истина);
КонецПроцедуры

&НаКлиенте
Процедура ВвестиИсправлениеСчетаФактурыПолученный(Команда)
	ЗакупкиКлиент.ВвестиСчетФактуру(ЭтаФорма, Объект.ОрганизацияПолучатель, Ложь, Истина);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТабличнойЧастиТовары

&НаКлиенте
Процедура ТоварыПередНачаломИзменения(Элемент, Отказ)
	
	Если Элемент.ТекущийЭлемент = Элементы.ТоварыКоличествоУпаковок Тогда
		ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
		
		Если НЕ ТекущиеДанные = Неопределено И (ТекущиеДанные.ИспользоватьСерийныеНомера ИЛИ НЕ ТекущиеДанные.СтатусУказанияСерий = 0) Тогда
			Отказ = Истина;
			Если ТекущиеДанные.ИспользоватьСерийныеНомера Тогда
				ВвестиПодарочныеСертификаты();
			Иначе
				УказатьСерии("КоличествоУпаковок");
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли Элемент.ТекущийЭлемент = Элементы.ТоварыУпаковка 
		ИЛИ Элемент.ТекущийЭлемент = Элементы.ТоварыНоменклатураЕдиницаИзмерения Тогда
		
		ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
		
		Если НЕ ТекущиеДанные = Неопределено И НЕ ТекущиеДанные.СтатусУказанияСерий = 0 Тогда
			Отказ = Истина;
			УказатьСерии("Упаковка");
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыНоменклатураПриИзменении(Элемент)
	
	ПриИзмененииТоварыНоменклатура();
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыХарактеристикаПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ЗаполнитьЦенуПродажи" , СтруктураЗаполненияЦеныКлиент());
	СтруктураДействий.Вставить("ПересчитатьСумму");
	
	ОбработкаТабличнойЧастиТоварыКлиент.ПриИзмененииРеквизитовВТЧКлиент(Объект.Товары, ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыХарактеристикаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОбработкаТабличнойЧастиТоварыКлиент.ВыбратьХарактеристикуНоменклатуры(ЭтотОбъект, Элемент, СтандартнаяОбработка, Элементы.Товары.ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыХарактеристикаСоздание(Элемент, СтандартнаяОбработка)
	
	ОбработкаТабличнойЧастиТоварыКлиент.СоздатьХарактеристикуНоменклатуры(ЭтотОбъект, Элемент, СтандартнаяОбработка, Элементы.Товары.ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыУпаковкаПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
		
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
	Если ТекущаяСтрока.Количество > 0 Тогда
		СтруктураДействий.Вставить("ПересчитатьЦенуЗаУпаковку", ТекущаяСтрока.Количество);
	Иначе
		СтруктураДействий.Вставить("ЗаполнитьЦенуПродажи" , СтруктураЗаполненияЦеныКлиент());
	КонецЕсли;
		
	СтруктураДействий.Вставить("ПересчитатьСумму");
	
	Если Объект.ФиксироватьНомераГТД Тогда
		УчетПрослеживаемыхТоваровКлиентСерверРТ.ДополнитьОписаниеНастроекПересчетаРеквизитовТабличнойЧасти(
			Объект,
			СтруктураДействий,
			"СкладПолучатель");
	КонецЕсли;
	ОбработкаТабличнойЧастиТоварыКлиент.ПриИзмененииРеквизитовВТЧКлиент(Объект.Товары, ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
		
	// Интерфейс ЕГАИС
	ПриИзмененииЭлементаГосИС();
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыУпаковкаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОбработкаТабличнойЧастиТоварыКлиент.ВыбратьУпаковкуНоменклатуры(ДанныеВыбора, СтандартнаяОбработка, Элементы.Товары.ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыКоличествоУпаковокПриИзменении(Элемент)
	
	ПриИзмененииТоварыКоличестваУпаковок();
	
	// Интерфейс ЕГАИС
	ПриИзмененииЭлементаГосИС();
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыЦенаПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
			
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьСумму");
	
	ОбработкаТабличнойЧастиТоварыКлиент.ПриИзмененииРеквизитовВТЧКлиент(Объект.Товары, ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСуммаПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьЦенуПоСуммеВЗакупках");
	
	ОбработкаТабличнойЧастиТоварыКлиент.ПриИзмененииРеквизитовВТЧКлиент(Объект.Товары, ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПередУдалением(Элемент, Отказ)
	
	ОбработкаТабличнойЧастиТоварыКлиент.ОбновитьКэшированныеЗначенияДляУчетаСерий(
				Элемент,КэшированныеЗначения,ПараметрыУказанияСерий);
	
	УдаляемыйКлючСвязи = Элементы.Товары.ТекущиеДанные.КлючСвязи;
	
	ДополнительныеРеквизиты = Новый Структура("ПередУдалением");
	СобытияФормИСКлиент.ПриИзмененииЭлемента(ЭтотОбъект, "Товары", ДополнительныеРеквизиты);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если Копирование Тогда
		
		ТекущаяСтрока                          = Элементы.Товары.ТекущиеДанные;
		ТекущаяСтрока.КлючСвязиСерийныхНомеров = 0;
		
		Если ТекущаяСтрока.ИспользоватьСерийныеНомера Тогда
			ТекущаяСтрока.КоличествоУпаковок = 0;
			ТекущаяСтрока.Количество = 0;
		КонецЕсли;
		
		ТекущаяСтрока.КлючСвязи = 0;
		
		ОбработкаТабличнойЧастиТоварыКлиентСервер.ЗаполнитьКлючСвязи(Объект.Товары, ТекущаяСтрока, "КлючСвязи");
		
	КонецЕсли;
	
	ОбработкаТабличнойЧастиТоварыКлиент.ОбновитьКэшированныеЗначенияДляУчетаСерий(
				Элемент,КэшированныеЗначения,ПараметрыУказанияСерий, Копирование);
	
	РедактированиеТЧТовары = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
	Если ОбработкаТабличнойЧастиТоварыКлиент.НеобходимоОбновитьСтатусыСерий(
		Элемент,КэшированныеЗначения,ПараметрыУказанияСерий) Тогда
		
		ТекущаяСтрокаИдентификатор = ТекущиеДанные.ПолучитьИдентификатор();
		
		ЗаполнитьСтатусыУказанияСерийПриОкончанииРедактированияСтрокиТЧ(ТекущаяСтрокаИдентификатор, КэшированныеЗначения);
		ОбработкаТабличнойЧастиТоварыКлиент.ОбновитьКэшированныеЗначенияДляУчетаСерий(Элемент,КэшированныеЗначения,ПараметрыУказанияСерий);
		
	КонецЕсли;
	
	ОбработкаТабличнойЧастиТоварыКлиент.ОбновитьСтатусСерийИПодарочныхСертификатов(ТекущиеДанные);
	
	РедактированиеТЧТовары = Ложь;
	
	Если НоваяСтрока Тогда
		ПроверитьВыводНапоминанияЕГАИС();
	КонецЕсли;
	
	ПриИзмененииЭлементаГосИС();
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПослеУдаления(Элемент)
	
	Если ОбработкаТабличнойЧастиТоварыКлиент.НеобходимоОбновитьСтатусыСерий(
		Элемент,КэшированныеЗначения,ПараметрыУказанияСерий,Истина) Тогда
		
		ЗаполнитьСтатусыУказанияСерийПриОкончанииРедактированияСтрокиТЧ(Неопределено, КэшированныеЗначения);
		ОбработкаТабличнойЧастиТоварыКлиент.ОбновитьКэшированныеЗначенияДляУчетаСерий(
					Элемент,КэшированныеЗначения,ПараметрыУказанияСерий);
		
	КонецЕсли;
	
	ТоварыПослеУдаленияСервер();
	
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ОбновитьСтатусыСерийИПодарочныхСертификатов(Объект.Товары);
	
	ПриИзмененииЭлементаГосИС();
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриАктивизацииЯчейки(Элемент)
	
	Если РедактированиеТЧТовары Тогда
		Если Элемент.ТекущийЭлемент = Элементы.ТоварыКоличествоУпаковок Тогда
			ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
			Если НЕ ТекущиеДанные = Неопределено И (ТекущиеДанные.ИспользоватьСерийныеНомера ИЛИ НЕ ТекущиеДанные.СтатусУказанияСерий = 0) Тогда
				Элементы.Товары.ЗакончитьРедактированиеСтроки(Ложь);
				Если ТекущиеДанные.ИспользоватьСерийныеНомера Тогда
					ВвестиПодарочныеСертификаты();
				Иначе
					УказатьСерии("КоличествоУпаковок");
				КонецЕсли;
			КонецЕсли;
			
		ИначеЕсли Элемент.ТекущийЭлемент = Элементы.ТоварыУпаковка 
			ИЛИ Элемент.ТекущийЭлемент = Элементы.ТоварыНоменклатураЕдиницаИзмерения Тогда
			
			ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
			
			Если НЕ ТекущиеДанные = Неопределено И НЕ ТекущиеДанные.СтатусУказанияСерий = 0 Тогда
				Элементы.Товары.ЗакончитьРедактированиеСтроки(Ложь);
				УказатьСерии("Упаковка");
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриИзменении(Элемент)
	
	ОбновитьИтоговыеПоказатели(ЭтотОбъект);
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ВыбытиеМаркированныхТоваровПриИзменении(Элемент)
	
	Элементы.СведенияОВыбытииМаркированныхТоваров.Видимость = ВыбытиеМаркированныхТоваров;
	Если НЕ ВыбытиеМаркированныхТоваров Тогда
		Объект.СведенияОВыбытииМаркированныхТоваров = "";
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы


#Область ОбработчикиКомандПодключаемогоОборудования

&НаКлиенте
Процедура ВыгрузитьДанныеВТСД(Команда)
	
	ПодключаемоеОборудованиеРТКлиент.ВыгрузитьДокументВТСД(ЭтотОбъект, Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьДанныеИзТСД(Команда)
	
	ПодключаемоеОборудованиеРТКлиент.ПолучитьДанныеИзТСД(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоискПоМагнитномуКоду(Команда)
	
	ОбработкаТабличнойЧастиТоварыКлиент.ВвестиМагнитныйКод(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоискПоШтрихкоду(Команда)
	
	ОчиститьСообщения();
	ШтрихкодированиеИСКлиент.ПоказатьВводШтрихкода(ОписаниеОповещенияОбработкиКодаМаркировки());
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьВес(Команда)
	
	ОповещенияПриПолученииВеса = Новый ОписаниеОповещения("ПолучитьВесЗавершение", ЭтотОбъект);
	ПодключаемоеОборудованиеРТКлиент.ПолучениеВесаСЭлектронныхВесовДляТабличнойЧасти(ОповещенияПриПолученииВеса, ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура ПоискПоНаименованию(Команда)
	
	ПараметрыПоиска = Новый Структура;
	ПараметрыПоиска.Вставить("Магазин",Объект.МагазинОтправитель);
	РаботаСПравиламиИменованияКлиент.ПоискПоНаименованию(ЭтаФорма,ПараметрыПоиска);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьЦеныПоРозничнымЦенам(Команда)
	
	Если Объект.Товары.Количество() = 0 Тогда
		
		ТекстПредупреждения = НСтр("ru='В документе не заполнена таблица %ПредставлениеТабличнойЧасти%. Цены не могут быть заполнены'");
		ТекстПредупреждения = СтрЗаменить(ТекстПредупреждения, "%ПредставлениеТабличнойЧасти%", "Товары");
		ПоказатьПредупреждение(,ТекстПредупреждения);
		
	Иначе
		
		Если ЗначениеЗаполнено(Объект.МагазинОтправитель) Тогда
			
			ЦеныРассчитаны = ЗаполнитьЦеныВыделенныхСтрокПоРозничнымЦенамСервер();
			ЗапасыКлиент.ОповеститьОбОкончанииЗаполненияЦенПоРозничнымЦенам(ЦеныРассчитаны, Объект.МагазинОтправитель);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьЦеныПоВидуЦен(Команда)
	
	Если Объект.Товары.Количество() = 0 Тогда
		
		ТекстПредупреждения = НСтр("ru='В документе не заполнена таблица %ПредставлениеТабличнойЧасти%. Цены не могут быть заполнены'");
		ТекстПредупреждения = СтрЗаменить(ТекстПредупреждения, "%ПредставлениеТабличнойЧасти%", "Товары");
		ПоказатьПредупреждение(,ТекстПредупреждения);
		Возврат;
	Иначе
		
		СтруктураПараметров = Новый Структура;
		СтруктураОтбора     = Новый Структура;
		Если ИспользоватьПередачиТоваровМеждуОрганизациями Тогда
			СтруктураОтбора.Вставить("ИспользоватьПриПередачеМеждуОрганизациями", Истина);
		КонецЕсли;
		
		СтруктураПараметров.Вставить("МножественныйВыбор", Ложь);
		СтруктураПараметров.Вставить("Отбор", СтруктураОтбора);
		
		Обработчик = Новый ОписаниеОповещения("ОбработчикЗаполнитьЦеныПоВидуЦен", ЭтотОбъект);
		Режим = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
		ОткрытьФорму("Справочник.ВидыЦен.Форма.ФормаВыбора", СтруктураПараметров, ЭтотОбъект,,,, Обработчик, Режим);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПодбор(Команда)
	
	Отказ = Ложь;
	Если Не ЗначениеЗаполнено(Объект.МагазинОтправитель) Тогда
		ОчиститьСообщения();
		СообщитьОбОшибкахОткрытияПодбора(Отказ);
	КонецЕсли;
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрЗаголовок = НСтр("ru = 'Подбор товаров в %Документ%'");
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ПараметрЗаголовок = СтрЗаменить(ПараметрЗаголовок, "%Документ%", Объект.Ссылка);
	Иначе
		ПараметрЗаголовок = СтрЗаменить(ПараметрЗаголовок, "%Документ%", НСтр("ru = 'перемещение товаров'"));
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Магазин",    Объект.МагазинОтправитель);
	ПараметрыФормы.Вставить("РежимПодбораБезУслуг", Ложь);
	ПараметрыФормы.Вставить("ИспользоватьОтборПоТипамНоменклатуры", Истина);
	ПараметрыФормы.Вставить("Склад", Объект.СкладОтправитель);
	ПараметрыФормы.Вставить("Заголовок", ПараметрЗаголовок);
	ПараметрыФормы.Вставить("Дата", Объект.Дата);
	
	Если НЕ ЕстьПравоИзменятьЦену() Тогда
		ПараметрыФормы.Вставить("РежимПодбораБезСуммовыхПараметров", Истина);
		ПараметрыФормы.Вставить("ЗаголовокКнопкиЗапрашиватьКоличествоИЦену",НСтр("ru = 'Запрашивать количество'"));
	КонецЕсли;
	
	ОткрытьФорму("Обработка.ПодборТоваров.Форма", ПараметрыФормы, ЭтотОбъект, УникальныйИдентификатор);
	
КонецПроцедуры

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат) Экспорт
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры

#Область КомандыЕГАИС

&НаКлиенте
Процедура СоздатьНаОснованииТТНИсходящаяЕГАИС(Команда)
	
	ОповещениеПродолжения = Новый ОписаниеОповещения("СоздатьНаОснованииТТНИсходящаяЕГАИСПослеЗаписиПеремещенияТоваров", ЭтотОбъект);
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) ИЛИ Модифицированность Тогда
		ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Данные еще не записаны.
				|Выполнение действия ""%1"" возможно только после записи данных.
				|Данные будут записаны.'"),
			НСтр("ru='Товарно-транспортная накладная ЕГАИС (исходящая): создать на основании'"));
			
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("ОповещениеПродолжения", ОповещениеПродолжения);
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ЗаписатьПеремещениеТоваровПодтверждениеЗаписи", ЭтотОбъект, ДополнительныеПараметры);
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ОКОтмена);
		Возврат;
	КонецЕсли;
	
	ВыполнитьОбработкуОповещения(ОповещениеПродолжения);
	
КонецПроцедуры

#КонецОбласти
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

&НаКлиенте
Процедура РедактироватьДанныеТранспортногоРаздела(Команда)
	
	ОповещениеПродолжения = Новый ОписаниеОповещения("РедактироватьДанныеТранспортногоРазделаПослеЗаписиПеремещенияТоваров", ЭтотОбъект);
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) ИЛИ Модифицированность Тогда
		ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Данные еще не записаны.
				|Выполнение действия ""%1"" возможно только после записи данных.
				|Данные будут записаны.'"),
			НСтр("ru='Редактирование транспортного раздела'"));
			
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("ОповещениеПродолжения", ОповещениеПродолжения);
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ЗаписатьПеремещениеТоваровПодтверждениеЗаписи", ЭтотОбъект, ДополнительныеПараметры);
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ОКОтмена);
		Возврат;
	КонецЕсли;
	
	ВыполнитьОбработкуОповещения(ОповещениеПродолжения);
	
КонецПроцедуры

&НаКлиенте
Процедура ВставитьСтроки(Команда)
	
	КоличествоТоваровДоВставки = Объект.Товары.Количество();
	ПолучитьСтрокиИзБуфераОбмена();
	КоличествоВставленных = Объект.Товары.Количество()- КоличествоТоваровДоВставки;
	КопированиеСтрокКлиент.ОповеститьПользователяОВставкеСтрок(КоличествоВставленных);
	ПриИзмененииЭлементаГосИС();
	
КонецПроцедуры

&НаКлиенте
Процедура СкопироватьСтроки(Команда)
	
	Если КопированиеСтрокКлиент.ВозможноКопированиеСтрок(Элементы.Товары.ТекущаяСтрока) Тогда
		СкопироватьСтрокиНаСервере("Товары");
		КопированиеСтрокКлиент.ОповеститьПользователяОКопированииСтрок(Элементы.Товары.ВыделенныеСтроки.Количество());
	КонецЕсли;
	
КонецПроцедуры

// ЭлектронноеВзаимодействие.ОбменСКонтрагентами

&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуЭДО(Команда)
	
	ЭлектронноеВзаимодействиеКлиент.ВыполнитьПодключаемуюКомандуЭДО(Команда, ЭтотОбъект, Объект);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбработчикОжиданияЭДО()
	
	ОбменСКонтрагентамиКлиент.ОбработчикОжиданияЭДО(ЭтотОбъект);
	
КонецПроцедуры

// Конец ЭлектронноеВзаимодействие.ОбменСКонтрагентами

&НаКлиенте
Процедура Подключаемый_ВыполнитьПереопределяемуюКоманду(Команда)
	
	СобытияФормИСКлиент.ВыполнитьПереопределяемуюКоманду(ЭтотОбъект, Команда, Неопределено);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиентеНаСервереБезКонтекста
Процедура НастроитьОтображениеРеквизитовСчетаФактуры(Форма, ПараметрыПредставления, Вид = "Выданный", ОрганизацииОднородны = Ложь)
	
	//Отключенный функционал
	Если Вид = "Выданный" Тогда
		Если НЕ ОрганизацииОднородны Тогда
			Форма.ТекстСчетФактура = 
			?(ПустаяСтрока(ПараметрыПредставления.ТекстСписок)
			, ПараметрыПредставления.ТекстСчетФактура
			, ПараметрыПредставления.ТекстСписок);
			Форма.Элементы.ТекстСчетФактура.Гиперссылка = ПараметрыПредставления.ГиперссылкаСчетФактура;
			Форма.Элементы.ГруппаСчетФактура.Видимость = Ложь;
		Иначе
			Форма.Элементы.ГруппаСчетФактура.Видимость = Ложь;
		КонецЕсли;
	ИначеЕсли Вид = "Полученный" Тогда
		СчетаФактураВыданный = ПродажиВызовСервера.СчетФактураДокумента(Форма.Объект.Ссылка, Форма.Объект.Организация);
		Если ЗначениеЗаполнено(СчетаФактураВыданный) И НЕ ОрганизацииОднородны Тогда
			Форма.ТекстСчетФактураПолученный = ПараметрыПредставления.ТекстСчетФактура;
			Форма.Элементы.ТекстСчетФактураПолученный.Гиперссылка = ПараметрыПредставления.ГиперссылкаСчетФактура;
			Форма.Элементы.ГруппаСчетФактураПолученный.Видимость = Ложь;
		Иначе
			Форма.Элементы.ГруппаСчетФактураПолученный.Видимость = Ложь;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработчикЗаполнитьЦеныПоВидуЦен(ВидЦены, ДополнительныеПараметры) Экспорт
	
	Если ЗначениеЗаполнено(ВидЦены) Тогда
		
		ЦеныРассчитаны = ЗаполнитьЦеныВыделенныхСтрокПоВидуЦенСервер(ВидЦены);
		ЗапасыКлиент.ОповеститьОбОкончанииЗаполненияЦенПоВидуЦен(ЦеныРассчитаны, ВидЦены);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьКоличестваРНПТ()
	
	Элементы.ТоварыГруппаГТД.Видимость 				= Объект.ФиксироватьНомераГТД;
	Элементы.ТоварыГруппаРНПТ.Видимость 			= Объект.ФиксироватьНомераГТД;
	
	Если Объект.ФиксироватьНомераГТД Тогда
		УчетПрослеживаемыхТоваровРТ.УстановитьВидимостьКоличестваРНПТ(ЭтаФорма, Объект.Дата, "ТоварыГруппаРНПТ");
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьСтатусыСерийИПодарочныхСертификатов()
	
	Если НЕ ПараметрыУказанияСерий.ИспользоватьСерииНоменклатуры И НЕ Справочники.Номенклатура.ИспользуютсяПодарочныеСертификаты() Тогда
		Элементы.ТоварыСтатусыСерийИПодарочныхСертификатов.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВвестиПодарочныеСертификаты()
	
	ОбработкаТабличнойЧастиТоварыКлиент.ВвестиСерийныеНомераНоменклатурыВТЧ(ЭтотОбъект, Объект.СерийныеНомера, Элементы.Товары.ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеПодбораПодарочныхСертификатов(НовыеСерийныеНомера, ДополнительныеПараметры) Экспорт
	
	ОбработкаТабличнойЧастиТоварыКлиент.ПослеВводаНомеровПодарочныхСертификатов(НовыеСерийныеНомера, ДополнительныеПараметры);
	
	ПересчетКоличества = ДополнительныеПараметры.ПересчетКоличества;
	
	Если ПересчетКоличества Тогда
		ПриИзмененииТоварыКоличестваУпаковок();
		ОбновитьИтоговыеПоказатели(ЭтотОбъект);
	КонецЕсли
	
КонецПроцедуры

&НаКлиенте
Процедура УказатьСерии(ТекущееПоле)
	
	ВводСерийРазрешен = Истина;
	ОбработкаТабличнойЧастиТоварыКлиент.ПроверитьВозможностьУказанияСерий(ЭтотОбъект, ПараметрыУказанияСерий, ВводСерийРазрешен);
	Если НЕ ВводСерийРазрешен Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанныеИдентификатор = Элементы.Товары.ТекущиеДанные.ПолучитьИдентификатор();
	ПараметрыФормыУказанияСерий = ПараметрыФормыУказанияСерий(ТекущиеДанныеИдентификатор);
	ПараметрыФормыУказанияСерий.Вставить("ТекущееПоле", ТекущееПоле);
	ПараметрыФормыУказанияСерий.Вставить("КоличествоЕдиницДоПересчета");
	
	ОбработчикУказанияСерий = Новый ОписаниеОповещения("ОбработатьУказаниеСерий", ЭтотОбъект, ПараметрыФормыУказанияСерий);
	РежимБлокировки = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
	
	ОткрытьФорму(ПараметрыФормыУказанияСерий.ИмяФормы, ПараметрыФормыУказанияСерий, ЭтотОбъект,,,, ОбработчикУказанияСерий, РежимБлокировки);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьУказаниеСерий(ЗначениеВозврата, ПараметрыФормыУказанияСерий) Экспорт
	
	Если ЗначениеВозврата <> Неопределено Тогда
		ПараметрыФормыУказанияСерий.Вставить("ЗначениеВозврата", ЗначениеВозврата);
		ОбработатьУказаниеСерийСервер(ПараметрыФормыУказанияСерий);
	КонецЕсли;
	
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ОбновитьСтатусыСерийИПодарочныхСертификатов(Объект.Товары);
	
	// Интерфейс ЕГАИС
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	Если Не ТекущаяСтрока = Неопределено Тогда
		ПриИзмененииЭлементаГосИС();
	КонецЕсли;
	
КонецПроцедуры

// Функция заполняет цену выделенных строк по розничным ценам в ТЧ Товары.
// Возвращаемое значение - Булево - Цены рассчитаны.
&НаСервере
Функция ЗаполнитьЦеныВыделенныхСтрокПоРозничнымЦенамСервер()
	
	СтруктураПараметров                           = ЗапасыСервер.СтруктураПараметровЗаполненияПоРозничнымЦенам();
	СтруктураПараметров.Объект                    = Объект;
	СтруктураПараметров.ИмяТабличнойЧасти         = "Товары";
	СтруктураПараметров.Магазин                   = Объект.МагазинОтправитель;
	СтруктураПараметров.ВыделенныеСтроки          = Элементы.Товары.ВыделенныеСтроки;
	СтруктураПараметров.Дата                      = ЗапасыСервер.ДатаДляЦенообразованияДляДокумента(Объект);
	СтруктураПараметров.ЕстьНДС                   = Ложь;
	
	ЦеныРассчитаны = ЗапасыСервер.ЗаполнитьЦеныВыделенныхСтрокПоРозничнымЦенам(СтруктураПараметров);
	
	Возврат ЦеныРассчитаны;
	
КонецФункции

// Функция заполняет цену выделенных строк по виду цен в ТЧ Товары.
// Возвращаемое значение - Булево - Цены рассчитаны.
&НаСервере
Функция ЗаполнитьЦеныВыделенныхСтрокПоВидуЦенСервер(ВидЦены)
	
	СтруктураПараметров                   = ЗапасыСервер.СтруктураПараметровЗаполненияПоВидуЦен();
	СтруктураПараметров.Объект            = Объект;
	СтруктураПараметров.ИмяТабличнойЧасти = "Товары";
	СтруктураПараметров.ВидЦен            = ВидЦены;
	СтруктураПараметров.ВыделенныеСтроки  = Элементы.Товары.ВыделенныеСтроки;
	СтруктураПараметров.Дата              = ЗапасыСервер.ДатаДляЦенообразованияДляДокумента(Объект);
	СтруктураПараметров.ЕстьНДС           = Ложь;
	
	ЦеныРассчитаны = ЗапасыСервер.ЗаполнитьЦеныВыделенныхСтрокПоВидуЦен(СтруктураПараметров);
	
	Возврат ЦеныРассчитаны;
	
КонецФункции

// Процедура сообщает о необходимости заполнения реквизитов документа при вызове подбора.
// Параметры:
//	Отказ - Булево
&НаКлиенте
Процедура СообщитьОбОшибкахОткрытияПодбора(Отказ)
	
	Если НЕ ЗначениеЗаполнено(Объект.МагазинОтправитель) Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Поле ""Магазин отправитель"" не заполнено'"), Объект, "Объект.МагазинОтправитель",,Отказ);
	КонецЕсли;
		
КонецПроцедуры

// Процедура заполняет товары из подбора.
// Параметры: 
//	ВыбранноеЗначение - Структура
&НаСервере
Процедура ОбработкаВыбораПодборНаСервере(ВыбранноеЗначение)
	
	ТаблицаТоваров = ПолучитьИзВременногоХранилища(ВыбранноеЗначение.АдресТоваровВХранилище);
	ТаблицаСерийныхНомеров = ПолучитьИзВременногоХранилища(ВыбранноеЗначение.АдресСерийныхНомеровВХранилище);
	ЕстьСерийныеНомера = ТаблицаСерийныхНомеров.Количество() > 0;
	
	Для каждого СтрокаТовара Из ТаблицаТоваров Цикл
		
		ТекущаяСтрока = Объект.Товары.Добавить();
		ЗаполнитьЗначенияСвойств(ТекущаяСтрока, СтрокаТовара, "Номенклатура,
															  |Характеристика,
															  |Упаковка,
															  |Цена,
															  |КоличествоУпаковок,
															  |ХарактеристикиИспользуются,
															  |ИспользоватьСерийныеНомера");
		Если ЕстьСерийныеНомера Тогда
			МассивСерийныхНомеров = ОбработкаТабличнойЧастиТоварыКлиентСервер.МассивСерийныхНомеровДляСтрокиТоваров(СтрокаТовара.КлючСвязиСерийныхНомеров , ТаблицаСерийныхНомеров);
			ТекущаяСтрока.КлючСвязиСерийныхНомеров = ОбработкаТабличнойЧастиТоварыСервер.ДобавитьСерийныеНомераВТабличнуюЧасть(Объект.СерийныеНомера, МассивСерийныхНомеров, 0);
		КонецЕсли;
		Если СтрокаТовара.ИспользоватьСерийныеНомера Тогда
			Если ЕстьСерийныеНомера Тогда
				ТекущаяСтрока.КоличествоУпаковок = МассивСерийныхНомеров.Количество();
			Иначе
				ТекущаяСтрока.КоличествоУпаковок = 0;
			КонецЕсли;
		КонецЕсли;
		СтруктураДействий = Новый Структура;
		СтруктураДействий.Вставить("ПересчитатьСумму");
		СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
		
		СтруктураСправки = Новый Структура;
		СтруктураСправки.Вставить("Дата", Объект.Дата);
		СтруктураДействий.Вставить("ПроверитьНеобходимостьВводаСправкиНаАлкоголь", СтруктураСправки);
		СтруктураДействий.Вставить("ПроверитьНеобходимостьВводаМаркируемойПродукцииГосИС", ПараметрыПроверкиМаркируемойПродукции(ЭтотОбъект));
		
		СтруктураМарки = Новый Структура;
		СтруктураМарки.Вставить("ОперацияОтражаетсяВЕГАИС", ОперацияОтражаетсяВЕГАИС);
		СтруктураДействий.Вставить("ПроверитьНеобходимостьВводаАкцизнойМарки", СтруктураМарки);
		
		Если Объект.ФиксироватьНомераГТД Тогда
			УчетПрослеживаемыхТоваровКлиентСерверРТ.ДополнитьОписаниеНастроекПересчетаРеквизитовТабличнойЧасти(
				Объект,
				СтруктураДействий,
				"СкладПолучатель");
		КонецЕсли;
		
		КэшированныеЗначения = ОбработкаТабличнойЧастиТоварыКлиентСервер.СтруктураКэшируемыхЗначений();
		ОбработкаТабличнойЧастиТоварыСервер.ОбработатьСтрокуТЧСервер(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
		ОбработкаТабличнойЧастиТоварыКлиентСервер.ЗаполнитьКлючСвязи(Объект.Товары, ТекущаяСтрока, "КлючСвязи");
		
	КонецЦикла;
	
	ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьПризнакИспользованияХарактеристик(Объект.Товары);
	ЗаполнитьСтатусыУказанияСерийСервер();
	ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьИспользоватьСерийныеНомераВТЧСервер(Объект.Товары);
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ОбновитьСтатусыСерийИПодарочныхСертификатов(Объект.Товары);
	ОбновитьИтоговыеПоказатели(ЭтотОбъект);
	
	Если Не ЕстьАлкогольнаяПродукцияЕГАИС Тогда
		ЕстьАлкогольнаяПродукцияЕГАИС = Ложь;
		Для Каждого СтрокаТовары Из Объект.Товары Цикл
			Если СтрокаТовары.НеобходимостьВводаСправкиНаАлкоголь Тогда
				ЕстьАлкогольнаяПродукцияЕГАИС = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		УстановитьВидимостьИДоступностьЕГАИС(ЭтотОбъект);
	КонецЕсли;
	
	СобытияФормРТ.ПриИзмененииЭлемента(ЭтотОбъект, "Товары");
	
КонецПроцедуры

&НаСервере
Процедура НастроитьФормуПоДополнительнымПравам()

	УправлениеПользователями.УстановитьТолькоПросмотрДляРеквизитовТабличнойЧасти(Элементы.ТоварыЦена.ТолькоПросмотр, 
																				 ПланыВидовХарактеристик.ПраваПользователей.ИзменятьЦену);

	УправлениеПользователями.УстановитьТолькоПросмотрДляРеквизитовТабличнойЧасти(Элементы.ТоварыСумма.ТолькоПросмотр, 
																				 ПланыВидовХарактеристик.ПраваПользователей.ИзменятьЦену);

	УправлениеПользователями.УстановитьТолькоПросмотрДляРеквизитовТабличнойЧасти(Элементы.Дата.ТолькоПросмотр, 
																				 ПланыВидовХарактеристик.ПраваПользователей.ИзменятьДату);

КонецПроцедуры

// Процедура управляет видимостью и доступностью элементов формы на сервере.
//
&НаСервере
Процедура УправлениеЭлементамиФормыНаСервере()
	
	Если Объект.МагазинОтправитель.СкладУправляющейСистемы Тогда
		Элементы.СкладОтправитель.ТолькоПросмотр = Истина;
		Элементы.СкладОтправитель.КнопкаВыбора = Ложь;
	Иначе
		Элементы.СкладОтправитель.КнопкаВыбора = Истина;
		ОбщегоНазначенияРТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "СкладОтправитель", "ТолькоПросмотр", НЕ ЗначениеЗаполнено(Объект.МагазинОтправитель));
		
	КонецЕсли;
	
	Если Объект.МагазинПолучатель.СкладУправляющейСистемы Тогда
		Элементы.СкладПолучатель.ТолькоПросмотр = Истина;
		Элементы.СкладПолучатель.КнопкаВыбора = Ложь;
	Иначе
		Элементы.СкладПолучатель.КнопкаВыбора = Истина;
		ОбщегоНазначенияРТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "СкладПолучатель", "ТолькоПросмотр", НЕ ЗначениеЗаполнено(Объект.МагазинПолучатель));
	КонецЕсли;
	
	УстановитьВидимостьИДоступностьЕГАИС(ЭтотОбъект);
	
	ОрганизацииОднородны = ОбщегоНазначенияРТВызовСервера.ОрганизацииОднородны(Объект.Организация, Объект.ОрганизацияПолучатель);
	ОперацияОтражаетсяВЕГАИС = Документы.ПеремещениеТоваров.ОперацияОтражаетсяВЕГАИС(Объект);
	ОперацияОтражаетсяВИСМП  = НЕ Объект.Организация = Объект.ОрганизацияПолучатель;
	
	НастроитьОтображениеРеквизитовСчетаФактуры(
		ЭтаФорма,
		ПродажиСервер.ПараметрыПредставленияСчетаФактуры(Объект.Ссылка, Объект.Организация, Ложь, Истина, Истина), "Выданный", ОрганизацииОднородны);
		
	НастроитьОтображениеРеквизитовСчетаФактуры(
			ЭтаФорма,
			ЗакупкиСервер.ПараметрыПредставленияСчетаФактуры(Объект.Ссылка, Объект.ОрганизацияПолучатель, Ложь, Истина, Истина), "Полученный", ОрганизацииОднородны);
			
	ЭлементЭДО = Элементы.Найти("ФормаКоманднаяПанельКомандыЭДО");
	Если Не ЭлементЭДО = Неопределено Тогда
		ЭлементЭДО.Видимость = Не ОрганизацииОднородны;
		Элементы.ДекорацияСостояниеЭДО.Видимость = Не ОрганизацииОднородны;
	КонецЕсли;
	
	СобытияФормРТ.ПриИзмененииЭлемента(ЭтотОбъект, "Товары");
	
	МожноВестиУчетПоГТД = Объект.МагазинОтправитель.СкладУправляющейСистемы 
		ИЛИ Объект.Организация <> Объект.ОрганизацияПолучатель;
	Если МожноВестиУчетПоГТД Тогда
		Элементы.ВестиУчетПоГТД.Видимость = Истина;
	Иначе
		Элементы.ВестиУчетПоГТД.Видимость = Ложь;
		Объект.ФиксироватьНомераГТД = Ложь;
		УстановитьВидимостьКоличестваРНПТ();
		ПересчитатьКоличествоРНПТ();
	КонецЕсли;
	
КонецПроцедуры

// Процедура заполняет склад при изменении магазина.
// Параметры:
// ИмяРеквизита - Тип: Строка, "Отправитель" или "Получатель".
&НаСервере
Процедура ПриИзмененииМагазина(ИмяРеквизита)
	
	ЗаполнитьДанныеОтправителяПолучателя(ИмяРеквизита);
	
	Если ЗначениеЗаполнено(Объект["Магазин" + ИмяРеквизита]) Тогда
		Объект["Склад" + ИмяРеквизита] = ЗначениеНастроекПовтИсп.СкладПродажиПоУмолчанию(Объект["Магазин" + ИмяРеквизита],,, Пользователи.ТекущийПользователь());
	Иначе
		Объект["Склад" + ИмяРеквизита] = Справочники.Склады.ПустаяСсылка();
	КонецЕсли;
	ПриИзмененииСклада(ИмяРеквизита);
	
	УправлениеЭлементамиФормыНаСервере();
	
	ПараметрыУказанияСерий = Новый ФиксированнаяСтруктура(Документы.ПеремещениеТоваров.ПараметрыУказанияСерий(Объект));
	ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьСтатусыУказанияСерий(Объект,ПараметрыУказанияСерий);
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ОбновитьСтатусыСерийИПодарочныхСертификатов(Объект.Товары);
	
	СтруктураВозврата = ОпределитьОтправителяИПолучателя(Объект.МагазинОтправитель, Объект.МагазинПолучатель);
	
	ЭтоУзелОтправитель = СтруктураВозврата.ЭтоУзелОтправитель;
	ЭтоУзелПолучатель = СтруктураВозврата.ЭтоУзелПолучатель;
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииСклада(ИмяРеквизита)
	
	ЗаполнитьДанныеОтправителяПолучателя(ИмяРеквизита);
	
	Склад = Объект["Склад" + ИмяРеквизита];
	Если ЗначениеЗаполнено(Склад) Тогда
		Организация = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Склад, "Организация");
	Иначе
		Организация = Справочники.Организации.ПустаяСсылка();
	КонецЕсли;
	
	Если ИмяРеквизита = "Отправитель" Тогда
		Объект.Организация = Организация;
		ОрганизацияПриИзмененииСервер();
	Иначе
		Объект.ОрганизацияПолучатель = Организация;
		ОрганизацияПолучательПриИзмененииСервер();
	КонецЕсли;
	
	СобытияФормРТ.ПриИзмененииЭлемента(ЭтотОбъект, "Товары");
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииТоварыНоменклатура(ТекущаяСтрока = Неопределено)
	
	Если ТекущаяСтрока = Неопределено Тогда
		ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	КонецЕсли;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ЗаполнитьТипНоменклатуры");
	СтруктураДействий.Вставить("ПроверитьСерийныеНомераПоВладельцу",
	ОбработкаТабличнойЧастиТоварыКлиент.СтруктураПроверкиСерийныхНомеровПоВладельцу(ТекущаяСтрока, Объект.СерийныеНомера));
	СтруктураДействий.Вставить("ПроверитьХарактеристикуПоВладельцу", ТекущаяСтрока.Характеристика);
	СтруктураДействий.Вставить("ПроверитьЗаполнитьУпаковкуПоВладельцу"      , ТекущаяСтрока.Упаковка);
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
	СтруктураДействий.Вставить("ЗаполнитьЦенуПродажи", СтруктураЗаполненияЦеныКлиент());
	СтруктураДействий.Вставить("ПересчитатьСумму");
	
	СтруктураМарки = Новый Структура;
	СтруктураМарки.Вставить("ОперацияОтражаетсяВЕГАИС", ОперацияОтражаетсяВЕГАИС);
	СтруктураДействий.Вставить("ПроверитьНеобходимостьВводаАкцизнойМарки", СтруктураМарки);
	
	СтруктураСправки = Новый Структура;
	СтруктураСправки.Вставить("Дата", Объект.Дата);
	СтруктураДействий.Вставить("ПроверитьНеобходимостьВводаСправкиНаАлкоголь", СтруктураСправки);
	
	СтруктураДействий.Вставить("ПроверитьНеобходимостьВводаМаркируемойПродукцииГосИС", ПараметрыПроверкиМаркируемойПродукции(ЭтотОбъект));
	
	Если Объект.ФиксироватьНомераГТД Тогда
		УчетПрослеживаемыхТоваровКлиентСерверРТ.ДополнитьОписаниеНастроекПересчетаРеквизитовТабличнойЧасти(
			Объект,
			СтруктураДействий,
			"СкладПолучатель");
	КонецЕсли;	
	
	ОбработкаТабличнойЧастиТоварыКлиент.ПриИзмененииРеквизитовВТЧКлиент(Объект.Товары, ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	Если ОбработкаТабличнойЧастиТоварыКлиент.НеобходимоОбновитьСтатусыСерий(
		Элементы.Товары, КэшированныеЗначения, ПараметрыУказанияСерий) Тогда
		
		ТекущаяСтрокаИдентификатор = ТекущаяСтрока.ПолучитьИдентификатор();
		
		ЗаполнитьСтатусыУказанияСерийПриОкончанииРедактированияСтрокиТЧ(ТекущаяСтрокаИдентификатор, КэшированныеЗначения);
		ОбработкаТабличнойЧастиТоварыКлиент.ОбновитьКэшированныеЗначенияДляУчетаСерий(Элементы.Товары, КэшированныеЗначения,ПараметрыУказанияСерий);
		
	КонецЕсли;
	
	ОбработкаТабличнойЧастиТоварыКлиент.ОбновитьСтатусСерийИПодарочныхСертификатов(ТекущаяСтрока);
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ЗаполнитьКлючСвязи(Объект.Товары, ТекущаяСтрока, "КлючСвязи");
	
	Если Не ЕстьАлкогольнаяПродукцияЕГАИС И ТекущаяСтрока.НеобходимостьВводаСправкиНаАлкоголь Тогда
		ЕстьАлкогольнаяПродукцияЕГАИС = Истина;
		УстановитьВидимостьИДоступностьЕГАИС(ЭтотОбъект);
	КонецЕсли;
	
	ПриИзмененииЭлементаГосИС();
	
КонецПроцедуры

// Обрабатывает изменение количества упаковок.
//
// Параметры:
//  Нет;
//
&НаКлиенте
Процедура ПриИзмененииТоварыКоличестваУпаковок(СтрокаТЧ = Неопределено)
	
	Если СтрокаТЧ = Неопределено Тогда
		ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	Иначе
		ТекущаяСтрока = СтрокаТЧ;
	КонецЕсли; 
	
	СтруктураДействий = Новый Структура;
	ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(СтруктураДействий, Объект);
	
	ОбработкаТабличнойЧастиТоварыКлиент.ПриИзмененииРеквизитовВТЧКлиент(Объект.Товары, ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
КонецПроцедуры

&НаСервере
Функция ЕстьПравоИзменятьЦену()
	
	Возврат УправлениеПользователями.ПолучитьБулевоЗначениеПраваПользователя(ПланыВидовХарактеристик.ПраваПользователей.ИзменятьЦену);
	
КонецФункции

&НаСервере
Процедура УстановитьСостояниеОтклонениеПриПеремещении()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТоварыКОтгрузкеОстаткиИОбороты.ДокументОснование,
	|	ТоварыКОтгрузкеОстаткиИОбороты.Номенклатура,
	|	ТоварыКОтгрузкеОстаткиИОбороты.Характеристика,
	|	ТоварыКОтгрузкеОстаткиИОбороты.КоличествоПриход КАК КОтгрузке,
	|	ТоварыКОтгрузкеОстаткиИОбороты.КоличествоРасход КАК Отгружено,
	|	ВЫБОР
	|		КОГДА ТоварыКОтгрузкеОстаткиИОбороты.КоличествоКонечныйОстаток > 0
	|			ТОГДА ТоварыКОтгрузкеОстаткиИОбороты.КоличествоКонечныйОстаток
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК Недорасход,
	|	ВЫБОР
	|		КОГДА ТоварыКОтгрузкеОстаткиИОбороты.КоличествоКонечныйОстаток < 0
	|			ТОГДА -ТоварыКОтгрузкеОстаткиИОбороты.КоличествоКонечныйОстаток
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК Перерасход
	|ПОМЕСТИТЬ ТоварыКОтгрузке
	|ИЗ
	|	РегистрНакопления.ТоварыКОтгрузке.ОстаткиИОбороты(, , , , ДокументОснование = &ДокументОснование) КАК ТоварыКОтгрузкеОстаткиИОбороты
	|ГДЕ
	|	НЕ ТоварыКОтгрузкеОстаткиИОбороты.КоличествоОборот = 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТоварыКПоступлениюОстаткиИОбороты.ДокументОснование,
	|	ТоварыКПоступлениюОстаткиИОбороты.Номенклатура,
	|	ТоварыКПоступлениюОстаткиИОбороты.Характеристика,
	|	ТоварыКПоступлениюОстаткиИОбороты.КоличествоПриход КАК КПоступлению,
	|	ТоварыКПоступлениюОстаткиИОбороты.КоличествоРасход КАК Поступило,
	|	ВЫБОР
	|		КОГДА ТоварыКПоступлениюОстаткиИОбороты.КоличествоКонечныйОстаток > 0
	|			ТОГДА ТоварыКПоступлениюОстаткиИОбороты.КоличествоКонечныйОстаток
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК Недопоставка,
	|	ВЫБОР
	|		КОГДА ТоварыКПоступлениюОстаткиИОбороты.КоличествоКонечныйОстаток < 0
	|			ТОГДА -ТоварыКПоступлениюОстаткиИОбороты.КоличествоКонечныйОстаток
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК Перепоставка
	|ПОМЕСТИТЬ ТоварыКПриемке
	|ИЗ
	|	РегистрНакопления.ТоварыКПоступлению.ОстаткиИОбороты(, , , , ДокументОснование = &ДокументОснование) КАК ТоварыКПоступлениюОстаткиИОбороты
	|ГДЕ
	|	НЕ ТоварыКПоступлениюОстаткиИОбороты.КоличествоОборот = 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ЕСТЬNULL(ТоварыКОтгрузке.ДокументОснование, ТоварыКПриемке.ДокументОснование) КАК ДокументОснование,
	|	ЕСТЬNULL(ТоварыКОтгрузке.Номенклатура, ТоварыКПриемке.Номенклатура) КАК Номенклатура,
	|	ЕСТЬNULL(ТоварыКОтгрузке.Характеристика, ТоварыКПриемке.Характеристика) КАК Характеристика,
	|	ТоварыКОтгрузке.КОтгрузке,
	|	ТоварыКОтгрузке.Отгружено,
	|	ТоварыКОтгрузке.Недорасход,
	|	ТоварыКОтгрузке.Перерасход,
	|	ТоварыКПриемке.КПоступлению,
	|	ТоварыКПриемке.Поступило,
	|	ТоварыКПриемке.Недопоставка,
	|	ТоварыКПриемке.Перепоставка
	|ИЗ
	|	ТоварыКПриемке КАК ТоварыКПриемке
	|		ПОЛНОЕ СОЕДИНЕНИЕ ТоварыКОтгрузке КАК ТоварыКОтгрузке
	|		ПО ТоварыКПриемке.ДокументОснование = ТоварыКОтгрузке.ДокументОснование
	|			И ТоварыКПриемке.Номенклатура = ТоварыКОтгрузке.Номенклатура
	|			И ТоварыКПриемке.Характеристика = ТоварыКОтгрузке.Характеристика";
	
	Запрос.УстановитьПараметр("ДокументОснование", Объект.Ссылка);
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		КартинкаСостоянияОтклонениеПриПеремещении = 1;
	Иначе
		КартинкаСостоянияОтклонениеПриПеремещении = 0;
	КонецЕсли;
	
	Элементы.КартинкаСостоянияОтклонениеПриПеремещении.Видимость = КартинкаСостоянияОтклонениеПриПеремещении = 0;
	
КонецПроцедуры

#Область Серии

&НаСервере
Процедура ОбработатьУказаниеСерийСервер(ПараметрыФормыУказанияСерий)
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ОбновлятьКоличествоТоваровПриРегистрацииСерий", Истина);
	СтруктураДействий.Вставить("ПересчитатьЦенуЗаУпаковку");
	ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(СтруктураДействий, Объект);
	
	ОбработкаТабличнойЧастиТоварыСервер.ОбработатьУказаниеСерий(Объект,ПараметрыУказанияСерий,ПараметрыФормыУказанияСерий,СтруктураДействий);

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСтатусыУказанияСерийПриОкончанииРедактированияСтрокиТЧ(ТекущаяСтрокаИдентификатор, КэшированныеЗначения)
	
	ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьСтатусыУказанияСерийПриОкончанииРедактированияСтрокиТЧ(Объект, 
				ПараметрыУказанияСерий, ТекущаяСтрокаИдентификатор, КэшированныеЗначения);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСтатусыУказанияСерийСервер()
	
	ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьСтатусыУказанияСерий(Объект,ПараметрыУказанияСерий);
	
КонецПроцедуры

&НаСервере
Процедура ПересчитатьКоличествоРНПТ()
	
	Если Объект.ФиксироватьНомераГТД
		И ЗначениеЗаполнено(Объект.СкладПолучатель)
		И ЗначениеЗаполнено(Объект.ОрганизацияПолучатель) Тогда
		
		СтруктураДействий = Новый Структура;
		СтруктураДействий.Вставить("НеобходимоОбработатьВсюТЧ");
		
		УчетПрослеживаемыхТоваровКлиентСерверРТ.ДополнитьОписаниеНастроекПересчетаРеквизитовТабличнойЧасти(
			Объект,
			СтруктураДействий,
			"СкладПолучатель");
			
		СтруктураТЧ = Новый Структура;
		СтруктураТЧ.Вставить("СтрокиТЧ" , Объект.Товары);
		
		ОбработкаТабличнойЧастиТоварыСервер.ПриИзмененииРеквизитовВТЧСервер(СтруктураТЧ, СтруктураДействий, Неопределено);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПараметрыФормыУказанияСерий(ТекущиеДанныеИдентификатор)
	
	Возврат ОбработкаТабличнойЧастиТоварыСервер.ПоместитьСерииВХранилище(Объект, ПараметрыУказанияСерий, ТекущиеДанныеИдентификатор, ЭтотОбъект);
	
КонецФункции

#КонецОбласти

#Область Прочее

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьИтоговыеПоказатели(Форма)
	
	ТоварыСумма = 0;
	УслугиСумма = 0;
	
	Для Каждого Строка Из Форма.Объект.Товары Цикл
		
		Если Не ЗначениеЗаполнено(Строка.ТипНоменклатуры) И ЗначениеЗаполнено(Строка.Номенклатура) Тогда 	
			Строка.ТипНоменклатуры = ПолучитьТипНоменклатуры(Строка.Номенклатура);	
		КонецЕсли;
		
		Если Строка.ТипНоменклатуры = Форма.ТипУслуга Тогда
			УслугиСумма = УслугиСумма + Строка.Сумма;
		Иначе
			ТоварыСумма = ТоварыСумма + Строка.Сумма;
		КонецЕсли;
		
	КонецЦикла;
	
	Форма.СуммаТоваров = ТоварыСумма;
	Форма.СуммаУслуг = УслугиСумма;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьТипНоменклатуры(Номенклатура)
	
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Номенклатура, "ТипНоменклатуры");
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(СтруктураДействий, Объект)
	
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
	СтруктураДействий.Вставить("ПересчитатьСумму");
	
	Если Объект.ФиксироватьНомераГТД Тогда
		УчетПрослеживаемыхТоваровКлиентСерверРТ.ДополнитьОписаниеНастроекПересчетаРеквизитовТабличнойЧасти(
			Объект,
			СтруктураДействий,
			"СкладПолучатель");
	КонецЕсли;
		
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Функция СтруктураЗаполненияЦеныКлиент()
	СтруктураЗаполненияЦены = Новый Структура;
	СтруктураЗаполненияЦены.Вставить("Дата", Объект.Дата);
	СтруктураЗаполненияЦены.Вставить("ОбъектЦенообразования", Объект.МагазинОтправитель);
	СтруктураЗаполненияЦены.Вставить("ПриводитьКМинимальнойЦене", Ложь);
	Возврат СтруктураЗаполненияЦены;
КонецФункции // СтруктураЗаполненияЦены()

&НаСервере
Функция СтруктураЗаполненияЦеныСервер()
	СтруктураЗаполненияЦены = Новый Структура;
	СтруктураЗаполненияЦены.Вставить("Дата", Объект.Дата);
	СтруктураЗаполненияЦены.Вставить("ОбъектЦенообразования", Объект.МагазинОтправитель);
	СтруктураЗаполненияЦены.Вставить("ПриводитьКМинимальнойЦене", Ложь);
	Возврат СтруктураЗаполненияЦены;
КонецФункции // СтруктураЗаполненияЦены()

&НаКлиенте
Процедура РазвернутьСвернутьТЧ(Команда)
	РазвернутьСвернутьТЧНаСервере();
КонецПроцедуры

&НаСервере
Процедура РазвернутьСвернутьТЧНаСервере()
	
	РазвернутаТЧ = НЕ РазвернутаТЧ;
	
	ВидимостьЭлементов = НЕ РазвернутаТЧ;
	
	ПоложениеКоманднойПанели               = ?(ВидимостьЭлементов, ПоложениеКоманднойПанелиФормы.Авто, ПоложениеКоманднойПанелиФормы.Нет);
	Элементы.ГруппаОснование.Видимость     = ВидимостьЭлементов;
	Элементы.Шапка.Видимость               = ВидимостьЭлементов;
	Элементы.ГруппаОтветственный.Видимость = ВидимостьЭлементов;
	Элементы.РазвернутьСвернутьТЧ.Картинка = ?(ВидимостьЭлементов, БиблиотекаКартинок.РазвернутьТабличнуюЧасть, БиблиотекаКартинок.СвернутьТабличнуюЧасть);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершитьОбработкуДанныхПоКодуКлиент(СтруктураПараметровКлиента)
	
	ИдентификаторСтроки = ПодключаемоеОборудованиеРТКлиент.ЗавершитьОбработкуДанныхПоКодуКлиент(ЭтотОбъект, СтруктураПараметровКлиента);
	
КонецПроцедуры

&НаСервере
Процедура ТоварыПослеУдаленияСервер()
	
	ОбработкаТабличнойЧастиТоварыСервер.УдалитьНесвязанныеСерийныеНомера(ЭтотОбъект);
	
	СтруктураПоиска = Новый Структура;
	СтруктураПоиска.Вставить("КлючСвязи", УдаляемыйКлючСвязи);
	
	ЕстьУдаляемыеСтроки = УдаляемыйКлючСвязи > 0;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	// Справки 1 и 2
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("ТоварыСправка2НомерСправки1");
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("ТоварыСправка2");
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.НеобходимостьВводаСправкиНаАлкоголь");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет);
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<только для алкогольной продукции>'"));
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	
КонецПроцедуры

&НаСервере
Функция ИнициализацияСтрокиТоваров(Форма, СтруктураПараметров, ДобавленаСтрока) Экспорт
	
	ДанныеПолученыИзМаркировки = Ложь;
	Если СтруктураПараметров.Свойство("СтрокаОбработана") Тогда 
		КоличествоУпаковок = 0;
		ДанныеПолученыИзМаркировки = Истина;
	ИначеЕсли СтруктураПараметров.Свойство("Количество") Тогда
		КоличествоУпаковок = СтруктураПараметров.Количество;
	ИначеЕсли СтруктураПараметров.Свойство("КоличествоИзменено") Тогда
		КоличествоУпаковок = СтруктураПараметров.КоличествоИзменено;
		ДанныеПолученыИзМаркировки = Истина;
	Иначе
		КоличествоУпаковок = 1;
	КонецЕсли;
	
	ОбновитьКоличество = Ложь;
	Если СтруктураПараметров.Свойство("ОбновитьКоличество") Тогда
		ОбновитьКоличество = Истина;
	КонецЕсли;
	
	Если СтруктураПараметров.Свойство("УчетУпаковок") Тогда
		УчетУпаковок = СтруктураПараметров.УчетУпаковок;
	Иначе
		УчетУпаковок = Истина;
	КонецЕсли; 
	
	Если СтруктураПараметров.Свойство("СворачиватьПоСтрокеПоиска") Тогда
		СворачиватьПоСтрокеПоиска = СтруктураПараметров.СворачиватьПоСтрокеПоиска;
	Иначе
		СворачиватьПоСтрокеПоиска = Истина;
	КонецЕсли; 
	
	СтруктураПоиска = Новый Структура;
	
	Если НЕ СворачиватьПоСтрокеПоиска Тогда
		МассивСтрок = Новый Массив;
	ИначеЕсли Форма.Объект.Товары.Количество() > 0 Тогда
		СтруктураПоиска.Вставить("Номенклатура", СтруктураПараметров.Номенклатура);
		СтруктураПоиска.Вставить("Характеристика", СтруктураПараметров.Характеристика);
		Если УчетУпаковок Тогда
			СтруктураПоиска.Вставить("Упаковка", СтруктураПараметров.Упаковка);
		КонецЕсли;
		
		Если СтруктураПараметров.Свойство("ОбработатьБезМаркировки")
			И СтруктураПараметров.ОбработатьБезМаркировки Тогда 
			
			СтруктураПоиска.Вставить("МаркируемаяПродукция", Ложь);
		КонецЕсли;
		
		МассивСтрок = Форма.Объект.Товары.НайтиСтроки(СтруктураПоиска);
		
	Иначе
		МассивСтрок = Новый Массив;
		
	КонецЕсли;
	
	Если МассивСтрок.Количество() > 0 Тогда 
		
		ДобавленаСтрока = Ложь;
		ТекущаяСтрока = МассивСтрок[0];
		
		Если СтруктураПараметров.Свойство("СтруктураОтбораРедактируемыхСтрок") Тогда
			РедактируемыеСтроки = Форма.Объект.Товары.НайтиСтроки(СтруктураПараметров.СтруктураОтбораРедактируемыхСтрок);
			Если РедактируемыеСтроки.Найти(ТекущаяСтрока) = Неопределено Тогда
				Возврат ТекущаяСтрока;
			КонецЕсли;
		КонецЕсли;
		
		Если ТекущаяСтрока.Свойство("ИспользоватьСерийныеНомера") Тогда
			УстановитьКоличество = ОбновитьКоличество И НЕ ТекущаяСтрока.ИспользоватьСерийныеНомера;
		Иначе
			УстановитьКоличество = ОбновитьКоличество;
		КонецЕсли;
		
		Если ДанныеПолученыИзМаркировки Тогда 
			
			Если СтруктураПараметров.Свойство("ОбработатьБезМаркировки") И 
				СтруктураПараметров.ОбработатьБезМаркировки
				Или СтруктураПараметров.Свойство("СтрокаОбработана") Тогда 
				
				ТекущаяСтрока.КоличествоУпаковок = ТекущаяСтрока.КоличествоУпаковок;
			ИначеЕсли СтруктураПараметров.Свойство("КоличествоИзменено") Тогда 
				ТекущаяСтрока.КоличествоУпаковок = КоличествоУпаковок;
			Иначе
				ТекущаяСтрока.КоличествоУпаковок = ТекущаяСтрока.КоличествоУпаковок + КоличествоУпаковок;
			КонецЕсли;
			
		ИначеЕсли УстановитьКоличество Тогда
			
			Если УчетУпаковок Тогда
				ТекущаяСтрока.КоличествоУпаковок = КоличествоУпаковок;
			Иначе
				ТекущаяСтрока.Количество = КоличествоУпаковок;
			КонецЕсли;
			
		ИначеЕсли УчетУпаковок Тогда
			
			Если СтруктураПараметров.Упаковка = ТекущаяСтрока.Упаковка Тогда
				КоэффициентПересчета = 1;
			Иначе
				КоэффициентУпаковкиПоиска = 1;
				Если ЗначениеЗаполнено(СтруктураПараметров.Упаковка) Тогда
					КоэффициентУпаковкиПоиска = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтруктураПараметров.Упаковка, "Коэффициент");
					Если КоэффициентУпаковкиПоиска <= 0 Тогда
						КоэффициентУпаковкиПоиска = 1;
					КонецЕсли;
				КонецЕсли;
				
				КоэффициентУпаковкиСтроки = 1;
				Если ЗначениеЗаполнено(ТекущаяСтрока.Упаковка) Тогда
					КоэффициентУпаковкиПоиска = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТекущаяСтрока.Упаковка, "Коэффициент");
					Если КоэффициентУпаковкиСтроки <= 0 Тогда
						КоэффициентУпаковкиСтроки = 1;
					КонецЕсли;
				КонецЕсли;
			
				КоэффициентПересчета = КоэффициентУпаковкиПоиска / КоэффициентУпаковкиСтроки;
			КонецЕсли;
			
			ТекущаяСтрока.КоличествоУпаковок = ТекущаяСтрока.КоличествоУпаковок + КоличествоУпаковок * КоэффициентПересчета;
		Иначе
			ТекущаяСтрока.Количество = ТекущаяСтрока.Количество + КоличествоУпаковок;
		КонецЕсли;
		
	Иначе
		
		ДобавленаСтрока = Истина;
		ТекущаяСтрока = Форма.Объект.Товары.Добавить();
		ТекущаяСтрока.Номенклатура = СтруктураПараметров.Номенклатура;
		ТекущаяСтрока.Характеристика = СтруктураПараметров.Характеристика;
		Если УчетУпаковок Тогда
			ТекущаяСтрока.Упаковка = СтруктураПараметров.Упаковка;
		КонецЕсли;
		Если ТекущаяСтрока.Свойство("ИспользоватьСерийныеНомера") Тогда
			ТекущаяСтрока.ИспользоватьСерийныеНомера = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтруктураПараметров.Номенклатура, "ИспользоватьСерийныеНомера");
		КонецЕсли;
		Если ТекущаяСтрока.Свойство("Штрихкод")
			И СтруктураПараметров.Свойство("Штрихкод") Тогда
			Если СтруктураПараметров.Свойство("ШтрихкодУпаковки") Тогда
				Если НЕ ЗначениеЗаполнено(СтруктураПараметров.ШтрихкодУпаковки) Тогда
					ТекущаяСтрока.Штрихкод = СтруктураПараметров.Штрихкод;
				КонецЕсли;
			Иначе
				ТекущаяСтрока.Штрихкод = СтруктураПараметров.Штрихкод;
			КонецЕсли;
		КонецЕсли;
		Если УчетУпаковок Тогда
			ТекущаяСтрока.КоличествоУпаковок = КоличествоУпаковок;
		Иначе
			ТекущаяСтрока.Количество = КоличествоУпаковок
		КонецЕсли; 
		
	КонецЕсли;
	
	Если ТекущаяСтрока.Свойство("ИспользоватьСерийныеНомера")
		И ТекущаяСтрока.ИспользоватьСерийныеНомера
		И НЕ СтруктураПараметров.Свойство("ДобавитьКоличество") Тогда
		МассивСерийныхНомеров = ОбработкаТабличнойЧастиТоварыКлиентСервер.МассивСерийныхНомеровДляСтрокиТоваров(
									ТекущаяСтрока.КлючСвязиСерийныхНомеров,
									Форма.Объект.СерийныеНомера);
		Если УчетУпаковок Тогда
			ТекущаяСтрока.КоличествоУпаковок = МассивСерийныхНомеров.Количество();
		Иначе
			ТекущаяСтрока.Количество = МассивСерийныхНомеров.Количество();
		КонецЕсли;
	КонецЕсли;
	
	Возврат ТекущаяСтрока;
	
КонецФункции

#Область Штрихкодирование

&НаКлиенте
Процедура ОбработатьКодМаркировки(ИсходныеДанные, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если ИсходныеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыСканирования = ШтрихкодированиеОбщегоНазначенияИСКлиент.ПараметрыСканирования(ЭтотОбъект);
	
	ШтрихкодированиеОбщегоНазначенияИСКлиентСервер.ЗакодироватьШтрихкодДанныхBase64(ИсходныеДанные);
	
	РезультатОбработки = ОбработатьВводШтрихкода(ИсходныеДанные, Неопределено, ПараметрыСканирования);
	
	ПараметрыЗавершенияВводаШтрихкода = ПараметрыЗавершенияВводаШтрихкода(ИсходныеДанные, РезультатОбработки, ПараметрыСканирования);
	ШтрихкодированиеОбщегоНазначенияИСКлиент.ЗавершитьОбработкуШтрихкода(ПараметрыЗавершенияВводаШтрихкода);
	
КонецПроцедуры

&НаСервере
Функция ОбработатьВводШтрихкода(ДанныеШтрихкода, КэшированныеЗначения, ПараметрыСканирования = Неопределено)
	
	РезультатОбработкиШтрихкода =
		ШтрихкодированиеОбщегоНазначенияИС.ОбработатьВводШтрихкода(ЭтотОбъект, ДанныеШтрихкода, КэшированныеЗначения, ПараметрыСканирования);
	
	ПослеОбработкиШтрихкодов(РезультатОбработкиШтрихкода, КэшированныеЗначения);
	
	Возврат РезультатОбработкиШтрихкода;
	
КонецФункции

&НаКлиенте
Функция ПараметрыЗавершенияВводаШтрихкода(ИсходныеДанные, РезультатОбработки, ПараметрыСканирования)
	
	ПараметрыЗавершенияВводаШтрихкода = ШтрихкодированиеОбщегоНазначенияИСКлиент.ПараметрыЗавершенияОбработкиШтрихкода();
	ПараметрыЗавершенияВводаШтрихкода.РезультатОбработкиШтрихкода = РезультатОбработки;
	ПараметрыЗавершенияВводаШтрихкода.Форма                       = ЭтотОбъект;
	ПараметрыЗавершенияВводаШтрихкода.ПараметрыСканирования       = ПараметрыСканирования;
	ПараметрыЗавершенияВводаШтрихкода.ДанныеШтрихкода             = ИсходныеДанные;
	ПараметрыЗавершенияВводаШтрихкода.ОбработатьШтрихкод          = "ОбработатьКодМаркировки";
	ПараметрыЗавершенияВводаШтрихкода.ВыполнитьДействие           = "ОбработкаКодаМаркировкиВыполнитьДействие";
	ПараметрыЗавершенияВводаШтрихкода.ЗавершениеОбработки         = "ОповещениеЗавершениеОбработкиКодаМаркировки";;
	
	Возврат ПараметрыЗавершенияВводаШтрихкода;
	
КонецФункции

&НаКлиенте
Процедура ОповещениеЗавершениеОбработкиКодаМаркировки(Результат, ДополнительныеПараметры) Экспорт 
	
	Если Результат = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Если Результат.ТребуетсяОбработкаШтрихкода Тогда
		Штрихкод = Неопределено;
		Если ЗначениеЗаполнено(Результат.Штрихкод) Тогда
			Штрихкод = Результат.Штрихкод;
		ИначеЕсли ТипЗнч(Результат.ИсходныеДанные) = Тип("Структура") И Результат.ИсходныеДанные.Свойство("Штрихкод") Тогда
			Штрихкод = Результат.ИсходныеДанные.Штрихкод;
		ИначеЕсли ТипЗнч(Результат.ДанныеШтрихкода) = Тип("Структура") И Результат.ДанныеШтрихкода.Свойство("Штрихкод") Тогда
			Штрихкод = Результат.ДанныеШтрихкода.Штрихкод;
		ИначеЕсли ТипЗнч(Результат.ДанныеШтрихкода) = Тип("Строка") Тогда
			Штрихкод = Результат.ДанныеШтрихкода;
		КонецЕсли;
		
		// Обработаем штрихкод средствами РТ.
		Если ЗначениеЗаполнено(Штрихкод) Тогда
			ОповещениеПоискаПоШтрихкоду(Штрихкод);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПослеОбработкиШтрихкодов(РезультатОбработкиШтрихкода, КэшированныеЗначения)
	
	Если Не РезультатОбработкиШтрихкода.ТребуетсяОбработкаШтрихкода Тогда
		
		ОбработатьСтрокиТЧ(
			РезультатОбработкиШтрихкода.ДобавленныеСтроки,
			РезультатОбработкиШтрихкода.ИзмененныеСтроки,
			КэшированныеЗначения,
			РезультатОбработкиШтрихкода.ОбработкаШтрихкодаБезМарки);
			
		РезультатОбработкиШтрихкода.ИзмененныеСтроки = Неопределено;
		РезультатОбработкиШтрихкода.ДобавленныеСтроки = Неопределено;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьСтрокиТЧ(ДобавленныеСтроки, ИзмененныеСтроки, КэшированныеЗначения = Неопределено, ОбработатьБезМаркировки = Ложь) Экспорт
	
	Для Каждого Строка Из ДобавленныеСтроки Цикл
		СтруктураПараметров = ШтрихкодированиеИСРТ.ДанныеШтрихкодаДляОбработки();
		СтруктураПараметров.Вставить("ТекущаяСтрока", Строка);
		СтруктураПараметров.Вставить("ДобавленаСтрока", Истина);
		СтруктураПараметров.ОбработатьБезМаркировки = ОбработатьБезМаркировки;
		
		ДобавитьНайденныеПозицииТоваровСервер(СтруктураПараметров);
	КонецЦикла;
	
	Для Каждого Строка Из ИзмененныеСтроки Цикл 
		СтруктураПараметров = ШтрихкодированиеИСРТ.ДанныеШтрихкодаДляОбработки();
		СтруктураПараметров.Вставить("ТекущаяСтрока", Строка);
		СтруктураПараметров.ОбработатьБезМаркировки = ОбработатьБезМаркировки;
		
		ДобавитьНайденныеПозицииТоваровСервер(СтруктураПараметров);
	КонецЦикла;
	
	Если ДобавленныеСтроки.Количество()>0 Или ИзмененныеСтроки.Количество()>0 Тогда
		СобытияФормИС.ПриИзмененииЭлемента(ЭтотОбъект, "Товары", Неопределено);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ОписаниеОповещенияОбработкиКодаМаркировки()
	
	Возврат Новый ОписаниеОповещения("ОбработатьКодМаркировки", ЭтотОбъект);
	
КонецФункции

&НаКлиенте
Функция ОбработкаКодаМаркировкиВыполнитьДействие(ДанныеДляВыполненияДействия, ДополнительныеПараметры) Экспорт
	
	РезультатВыбора             = ДанныеДляВыполненияДействия.РезультатВыбора;
	РезультатОбработкиШтрихкода = ДанныеДляВыполненияДействия.РезультатОбработкиШтрихкода;
	КэшированныеЗначения        = ДанныеДляВыполненияДействия.КэшированныеЗначения;
	ПараметрыСканирования       = ДанныеДляВыполненияДействия.ПараметрыСканирования;
	
	Действие = ДанныеДляВыполненияДействия.Действие;
	РезультатОбработкиШтрихкода = ОбработкаКодаМаркировкиВыполнитьДействиеСервер(Действие, РезультатВыбора, РезультатОбработкиШтрихкода, ПараметрыСканирования, КэшированныеЗначения);
	
	ПараметрыЗавершенияВводаШтрихкода = ПараметрыЗавершенияВводаШтрихкода(
		ДанныеДляВыполненияДействия.ИсходныеДанные, РезультатОбработкиШтрихкода, ДанныеДляВыполненияДействия.ПараметрыСканирования);
	ШтрихкодированиеОбщегоНазначенияИСКлиент.ЗавершитьОбработкуШтрихкода(ПараметрыЗавершенияВводаШтрихкода);
	
КонецФункции

&НаСервере
Функция ОбработкаКодаМаркировкиВыполнитьДействиеСервер(Действие, РезультатВыбора, РезультатОбработкиШтрихкода, ПараметрыСканирования, КэшированныеЗначения)
	
	ПараметрыОбработкиВыбора    = ШтрихкодированиеОбщегоНазначенияИС.ИнициализироватьПараметрыОбработкиВыбора(РезультатВыбора, РезультатОбработкиШтрихкода, КэшированныеЗначения);
	РезультатОбработкиШтрихкода = ШтрихкодированиеИС.ВыполнитьДействие(ЭтотОбъект, Действие, ПараметрыОбработкиВыбора);
	
	ПослеОбработкиШтрихкодов(РезультатОбработкиШтрихкода, КэшированныеЗначения);
	
	РезультатОбработкиШтрихкода.ИзмененныеСтроки  = Неопределено;
	РезультатОбработкиШтрихкода.ДобавленныеСтроки = Неопределено;
	
	Возврат РезультатОбработкиШтрихкода;
	
КонецФункции

&НаКлиенте
Процедура Подключаемый_ОткрытьФормуУточненияДанных()
	
	СобытияФормРТКлиент.ПриИзмененииЭлемента(ЭтотОбъект, "Подключаемый_ОткрытьФормуУточненияДанных");
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеЕГАИС

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьВидимостьИДоступностьЕГАИС(Форма)
	
	ПараметрыВидимости = ПараметрыВидимостиЭлементовЕГАИС(Форма.Объект.Дата, Форма.Объект.МагазинОтправитель, Форма.Объект.МагазинПолучатель);
	
	УчетАлкоголя = ПараметрыВидимости.НужноРаботатьСЕГАИС И Форма.ЕстьАлкогольнаяПродукцияЕГАИС;
	
	Форма.ЭтоУзелОтправитель = ПараметрыВидимости.ЭтоУзелОтправитель;
	Форма.ЭтоУзелПолучатель = ПараметрыВидимости.ЭтоУзелПолучатель;
	
	Форма.Элементы.ТТНВходящаяЕГАИС.Видимость = УчетАлкоголя
		И Форма.ЭтоУзелПолучатель
		И ЗначениеЗаполнено(Форма.Объект.ТТНВходящаяЕГАИС);
		
	Форма.Элементы.ТТНИсходящаяЕГАИС.Видимость = УчетАлкоголя
		И Форма.ЭтоУзелОтправитель
		И ЗначениеЗаполнено(Форма.Объект.ТТНИсходящаяЕГАИС);
	
КонецПроцедуры

&НаСервере
Процедура СохранитьВременныеДанныеТранспортногоРаздела(РезультатОповещения)
	
	ДанныеТранспортногоРаздела = ОбщегоНазначенияКлиентСервер.СкопироватьРекурсивно(РезультатОповещения);
	
	РезультатЗаписи = Ложь;
	Попытка
		РезультатЗаписи = Записать(Новый Структура("РежимЗаписи", РежимЗаписиДокумента.Запись));
	Исключение
		СтрокаОшибки = ИнформацияОбОшибке();
		ТекстСообщения = НСтр("ru = 'Не удалось сохранить транспортный раздел ТТН по причине:'") + Символы.ПС + СтрокаОшибки.Описание;
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
	КонецПопытки;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВыводНапоминанияЕГАИС()
	
	Если НапоминаниеЕГАИСВыведено < ОбщегоНазначенияКлиент.ДатаСеанса() - 3*60 Тогда
		ПодключитьОбработчикОжидания("ПроверитьВыводНапоминанияЕГАИСОбработчикОжидания", 3, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВыводНапоминанияЕГАИСОбработчикОжидания()
	
	ТекстНапоминания = ПолучитьТекстНапоминания();
	
	Если ЗначениеЗаполнено(ТекстНапоминания) Тогда
		ПоказатьОповещениеПользователя("Обмен данными с ЕГАИС:",, ТекстНапоминания, БиблиотекаКартинок.Изменить);
		НапоминаниеЕГАИСВыведено = ОбщегоНазначенияКлиент.ДатаСеанса();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьТекстНапоминания()
	
	Возврат ИнтеграцияЕГАИСРТ.ПолучитьНапоминаниеЕГАИС(Объект);
	
КонецФункции

&НаКлиенте
Процедура ТоварыСправка2НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	Если ТекущаяСтрока <> Неопределено
		И ЗначениеЗаполнено(ТекущаяСтрока.Номенклатура) Тогда
        
        ПараметрыОткрытия = Новый Структура;
		ПараметрыОткрытия.Вставить("Номенклатура", ТекущаяСтрока.Номенклатура);
		ПараметрыОткрытия.Вставить("Характеристика", ТекущаяСтрока.Характеристика);
		ОткрытьФорму("Справочник.Справки2ЕГАИС.ФормаВыбора",
			ПараметрыОткрытия,
			Элемент,
			,
			,
			,
			,
			РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	КонецЕсли;
КонецПроцедуры

&НаСервереБезКонтекста
Функция ОпределитьОтправителяИПолучателя(МагазинОтправитель, МагазинПолучатель)
	
	Результат = Новый Структура;
	Результат.Вставить("ЭтоУзелОтправитель", Ложь);
	Результат.Вставить("ЭтоУзелПолучатель", Ложь);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	""Отправитель"" КАК ТипТочки
	|ИЗ
	|	РегистрСведений.НастройкиОбменаЕГАИС КАК НастройкиОбменаЕГАИС
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КлассификаторОрганизацийЕГАИС КАК КлассификаторОрганизацийЕГАИС
	|		ПО НастройкиОбменаЕГАИС.ИдентификаторФСРАР = КлассификаторОрганизацийЕГАИС.Код
	|ГДЕ
	|	КлассификаторОрганизацийЕГАИС.ТорговыйОбъект = &МагазинОтправитель
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	""Получатель""
	|ИЗ
	|	РегистрСведений.НастройкиОбменаЕГАИС КАК НастройкиОбменаЕГАИС
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КлассификаторОрганизацийЕГАИС КАК КлассификаторОрганизацийЕГАИС
	|		ПО НастройкиОбменаЕГАИС.ИдентификаторФСРАР = КлассификаторОрганизацийЕГАИС.Код
	|ГДЕ
	|	КлассификаторОрганизацийЕГАИС.ТорговыйОбъект = &МагазинПолучатель";
	Запрос.УстановитьПараметр("МагазинОтправитель", МагазинОтправитель);
	Запрос.УстановитьПараметр("МагазинПолучатель", МагазинПолучатель);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Если Выборка.ТипТочки = "Отправитель" Тогда
			Результат.ЭтоУзелОтправитель = Истина;
		ИначеЕсли Выборка.ТипТочки = "Получатель" Тогда
			Результат.ЭтоУзелПолучатель = Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПараметрыВидимостиЭлементовЕГАИС(Дата, МагазинОтправитель, МагазинПолучатель)
	
	Результат = Новый Структура;
	Результат.Вставить("НужноРаботатьСЕГАИС"          , Ложь);
	Результат.Вставить("ЭтоУзелОтправитель"           , Ложь);
	Результат.Вставить("ЭтоУзелПолучатель"            , Ложь);
	Результат.Вставить("ОтправительУправляющаяСистема", Ложь);
	
	Результат.НужноРаботатьСЕГАИС = ИнтеграцияЕГАИСРТ.НужноРаботатьСЕГАИС(Дата);
	
	СтруктураВозврата = ОпределитьОтправителяИПолучателя(МагазинОтправитель, МагазинПолучатель);
	ЗаполнитьЗначенияСвойств(Результат, СтруктураВозврата);
	
	Если ЗначениеЗаполнено(МагазинОтправитель) Тогда
		Результат.ОтправительУправляющаяСистема = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(МагазинОтправитель, "СкладУправляющейСистемы");
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура ПроверитьВозможностьВводаНаОснованииТТНИсходящая(ДокументОснование)

	Если НЕ ПроверитьВозможностьВводаНаОсновании(Объект.Ссылка) Тогда
		ВызватьИсключение НСтр("ru='На основании перемещения товаров существуют созданные документы ЕГАИС'");
	КонецЕсли;
	
	ЭтоОрганизацияЕГАИС = ЗначениеЗаполнено(Справочники.КлассификаторОрганизацийЕГАИС.ОрганизацияЕГАИСПоОрганизацииИТорговомуОбъекту(Объект.ОрганизацияПолучатель, 
																																	 Объект.МагазинПолучатель,,Ложь));
																																	 
	Если НЕ ЭтоОрганизацияЕГАИС Тогда
		
		Текст = НСтр("ru = 'Получатель не является участником ЕГАИС. В этом случае нужно использовать Чек ЕГАИС.'"); 
		ВызватьИсключение Текст;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьВозможностьВводаНаОснованииЧекЕГАИС(ДокументОснование)

	Если НЕ ПроверитьВозможностьВводаНаОсновании(ДокументОснование) Тогда
		ВызватьИсключение НСтр("ru='На основании перемещения товаров существуют созданные документы ЕГАИС'");
	КонецЕсли;
	
	ОрганизацияЕГАИС = Справочники.КлассификаторОрганизацийЕГАИС.ОрганизацияЕГАИСПоОрганизацииИТорговомуОбъекту(ДокументОснование.ОрганизацияПолучатель, 
																												ДокументОснование.МагазинПолучатель,,Ложь);
	ЭтоОрганизацияЕГАИС = ЗначениеЗаполнено(ОрганизацияЕГАИС);
	
	Если ЭтоОрганизацияЕГАИС Тогда
		
		Текст = НСтр("ru = 'Получатель является участником ЕГАИС. В этом случае нужно использовать Товарно-транспортную накладнаую ЕГАИС (исходящая).'"); 
		ВызватьИсключение Текст;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПроверитьВозможностьВводаНаОсновании(ДокументОснование)
	
	ОбщегоНазначенияРТ.ПроверитьВозможностьВводаНаОсновании(ДокументОснование);
	
	ОрганизацияЕГАИС = Справочники.КлассификаторОрганизацийЕГАИС.ОрганизацияЕГАИСПоОрганизацииИТорговомуОбъекту(ДокументОснование.Организация, 
																												ДокументОснование.МагазинОтправитель,,Ложь);
	ЭтоОрганизацияЕГАИС = ЗначениеЗаполнено(ОрганизацияЕГАИС);
	
	Если НЕ ЭтоОрганизацияЕГАИС Тогда
		
		Текст = НСтр("ru = 'Отправитель не является участником ЕГАИС.'"); 
		ВызватьИсключение Текст;
		
	КонецЕсли;

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументОснование", ДокументОснование);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЧекЕГАИС.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.ЧекЕГАИС КАК ЧекЕГАИС
	|ГДЕ
	|	ЧекЕГАИС.ДокументОснование = &ДокументОснование
	|	И НЕ ЧекЕГАИС.ПометкаУдаления
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТТНИсходящаяЕГАИС.Ссылка
	|ИЗ
	|	Документ.ТТНИсходящаяЕГАИС КАК ТТНИсходящаяЕГАИС
	|ГДЕ
	|	ТТНИсходящаяЕГАИС.ДокументОснование = &ДокументОснование
	|	И НЕ ТТНИсходящаяЕГАИС.ПометкаУдаления";
	
	Возврат Запрос.Выполнить().Пустой();
	
КонецФункции

&НаКлиенте
Процедура ЗаписатьПеремещениеТоваровПодтверждениеЗаписи(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса <> КодВозвратаДиалога.ОК Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ Записать() Тогда
		Возврат;
	КонецЕсли;
	
	ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеПродолжения);
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьНаОснованииТТНИсходящаяЕГАИСПослеЗаписиПеремещенияТоваров(РезультатОповещения, ДополнительныеПараметры) Экспорт
	
	ПроверитьВозможностьВводаНаОснованииТТНИсходящая(Объект.Ссылка);
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Основание", Объект.Ссылка);
	
	ОткрытьФорму("Документ.ТТНИсходящаяЕГАИС.Форма.ФормаДокумента", ПараметрыФормы, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура РедактироватьДанныеТранспортногоРазделаЗавершение(РезультатОповещения, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(РезультатОповещения) = Тип("Структура") Тогда
		
		ЕстьИзменения = Ложь;
		
		Если ТипЗнч(ДанныеТранспортногоРаздела) = Тип("Структура") Тогда
			Для Каждого КлючЗначение Из РезультатОповещения Цикл
				Если ДанныеТранспортногоРаздела.Свойство(КлючЗначение.Ключ) И СокрЛП(ДанныеТранспортногоРаздела[КлючЗначение.Ключ]) <> СокрЛП(КлючЗначение.Значение) Тогда
					ЕстьИзменения = Истина;
				КонецЕсли;
			КонецЦикла;
		Иначе
			ЕстьИзменения = Истина;
		КонецЕсли;
		
		Если ЕстьИзменения Тогда
			СохранитьВременныеДанныеТранспортногоРаздела(РезультатОповещения);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьЧекЕГАИСПослеЗаписиДокумента()
	
	Если НЕ ПроверитьВозможностьВводаНаОсновании(Объект.Ссылка) Тогда
		ВызватьИсключение НСтр("ru='На основании документа существуют созданные чеки ЕГАИС'");
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Основание", Объект.Ссылка);
	
	ОткрытьФорму("Документ.ЧекЕГАИС.Форма.ФормаДокумента", ПараметрыФормы, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура РедактироватьДанныеТранспортногоРазделаПослеЗаписиПеремещенияТоваров(РезультатОповещения, ДополнительныеПараметры) Экспорт
    
    // &ЗамерПроизводительности
    ОценкаПроизводительностиРТКлиент.НачатьЗамер(
             Истина, "Обработка.ПечатьТТН.Форма.Форма.Открытие");
             
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Документ", Объект.Ссылка);
	ПараметрыФормы.Вставить("Редактирование", Истина);
	
	ОткрытьФорму("Обработка.ПечатьТТН.Форма",
				ПараметрыФормы,
				ЭтотОбъект,
				УникальныйИдентификатор,,,
				Новый ОписаниеОповещения("РедактироватьДанныеТранспортногоРазделаЗавершение", ЭтотОбъект),
				РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

#КонецОбласти

#Область РаботаСБуферомОбмена

&НаСервере
Процедура ПолучитьСтрокиИзБуфераОбмена()
		
	ТаблицаТоваров = КопированиеСтрокСервер.СтрокиИзБуфераОбмена();
	
	ПараметрыСерий = Документы.ПеремещениеТоваров.ПараметрыУказанияСерий(Объект);
	ПараметрыСерий.ИспользоватьСерииНоменклатуры = ПолучитьФункциональнуюОпцию("ИспользоватьСерииНоменклатуры");
	
	Для каждого СтрокаТовара Из ТаблицаТоваров Цикл
		
		ТекущаяСтрока = Объект.Товары.Добавить();
		ЗаполнитьЗначенияСвойств(ТекущаяСтрока, СтрокаТовара);
		
		СтруктураДействий = Новый Структура;
		СтруктураДействий.Вставить("ПроверитьСерийныеНомераПоВладельцу",
			ОбработкаТабличнойЧастиТоварыКлиентСервер.СтруктураПроверкиСерийныхНомеровПоВладельцу(ТекущаяСтрока, Объект.СерийныеНомера));
		СтруктураДействий.Вставить("ПроверитьХарактеристикуПоВладельцу", ТекущаяСтрока.Характеристика);
		СтруктураДействий.Вставить("ПроверитьЗаполнитьУпаковкуПоВладельцу"      , ТекущаяСтрока.Упаковка);
		СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
		СтруктураДействий.Вставить("ПересчитатьСумму");
		
		СтруктураСправки = Новый Структура;
		СтруктураСправки.Вставить("Дата", Объект.Дата);
		СтруктураДействий.Вставить("ПроверитьНеобходимостьВводаСправкиНаАлкоголь", СтруктураСправки);
		СтруктураДействий.Вставить("ПроверитьНеобходимостьВводаМаркируемойПродукцииГосИС", ПараметрыПроверкиМаркируемойПродукции(ЭтотОбъект));
		
		Если Объект.ФиксироватьНомераГТД Тогда
			УчетПрослеживаемыхТоваровКлиентСерверРТ.ДополнитьОписаниеНастроекПересчетаРеквизитовТабличнойЧасти(
				Объект,
				СтруктураДействий,
				"СкладПолучатель");
		КонецЕсли;
		
		КэшированныеЗначения = ОбработкаТабличнойЧастиТоварыКлиентСервер.СтруктураКэшируемыхЗначений();
		ОбработкаТабличнойЧастиТоварыКлиентСервер.ОбновитьКэшированныеЗначенияДляУчетаСерий(ТекущаяСтрока, КэшированныеЗначения, ПараметрыСерий, Ложь);
		ОбработкаТабличнойЧастиТоварыСервер.ОбработатьСтрокуТЧСервер(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);		
		
		ТекущаяСтрокаИдентификатор = ТекущаяСтрока.ПолучитьИдентификатор();
		
		ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьСтатусыУказанияСерийПриОкончанииРедактированияСтрокиТЧ(Объект, 
			ПараметрыСерий, ТекущаяСтрокаИдентификатор, КэшированныеЗначения);
		ОбработкаТабличнойЧастиТоварыКлиентСервер.ОбновитьКэшированныеЗначенияДляУчетаСерий(ТекущаяСтрока,
			КэшированныеЗначения,ПараметрыСерий,Ложь);
		
		ОбработкаТабличнойЧастиТоварыКлиентСервер.ОбновитьСтатусыСерийИПодарочныхСертификатовВСтроке(ТекущаяСтрока);
		ОбработкаТабличнойЧастиТоварыКлиентСервер.ЗаполнитьКлючСвязи(Объект.Товары, ТекущаяСтрока, "КлючСвязи");
		
		ДополнитьСтруктуруДействиямиНДС(СтруктураДействий, ВестиУчетМаркируемойПродукцииИСМП);
		ДополнитьСтруктуруДействиямиГосИС(СтруктураДействий, Ложь, МаркировкаВключена);
		
	КонецЦикла;
	
	КопированиеСтрокСервер.ОчиститьБуферОбмена();
	
КонецПроцедуры

&НаСервере
Процедура СкопироватьСтрокиНаСервере(ИмяТабличнойЧасти)
	
	КопированиеСтрокСервер.ПоместитьВыделенныеСтрокиВБуферОбмена(Элементы[ИмяТабличнойЧасти].ВыделенныеСтроки, Объект[ИмяТабличнойЧасти]);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьДоступностьКомандБуфераОбмена()
	
	МассивЭлементов = Новый Массив();
	МассивЭлементов.Добавить("ТоварыВставитьСтроки");
	
	ОбщегоНазначенияРТКлиентСервер.УстановитьСвойствоЭлементовФормы(Элементы, МассивЭлементов, "Доступность", 
		НЕ ОбщегоНазначения.ПустойБуферОбмена("Строки"));
		
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДокументПоТипуПеремещения()
	
	Документы.ПеремещениеТоваров.ЗаполнитьДанныеОтправителяПолучателя(Объект.МагазинОтправитель,
																	  Объект.СкладОтправитель,
																	  Объект.Организация);
	
	ЕдинственныеЗначения = Документы.ПеремещениеТоваров.ЕдинственныеЗначения(Объект.МагазинОтправитель);
	
	Если ЕдинственныеЗначения.ЕдинственныйМагазин Тогда
		Объект.МагазинПолучатель = Объект.МагазинОтправитель;
		Если ЕдинственныеЗначения.ЕдинственныйСклад Тогда
			Объект.СкладПолучатель = Объект.СкладОтправитель;
		КонецЕсли;
	КонецЕсли;
	
	Документы.ПеремещениеТоваров.ЗаполнитьДанныеОтправителяПолучателя(Объект.МагазинПолучатель,
																	  Объект.СкладПолучатель,
																	  Объект.ОрганизацияПолучатель,
																	  "Получатель");
	
КонецПроцедуры

&НаСервере
Процедура ОрганизацияПолучательПриИзмененииСервер()
	
	ПересчитатьКоличествоРНПТ();
	
	УправлениеЭлементамиФормыНаСервере();
	ПерезаполнитьПризнакиМаркировки();
	
КонецПроцедуры

&НаСервере
Процедура ОрганизацияПриИзмененииСервер()
	
	ПараметрыУказанияСерий = Новый ФиксированнаяСтруктура(Документы.ПеремещениеТоваров.ПараметрыУказанияСерий(Объект));
	ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьСтатусыУказанияСерий(Объект,ПараметрыУказанияСерий);
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ОбновитьСтатусыСерийИПодарочныхСертификатов(Объект.Товары);
	ЕдинственныеЗначения = Документы.ПеремещениеТоваров.ЕдинственныеЗначения(Объект.МагазинОтправитель);
	Если ЕдинственныеЗначения.ЕдинственнаяОрганизация Тогда
		Объект.ОрганизацияПолучатель = ЕдинственныеЗначения.Организация;
	КонецЕсли;
	
	ПересчитатьКоличествоРНПТ();
	
	УправлениеЭлементамиФормыНаСервере();
	ПерезаполнитьПризнакиМаркировки();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДанныеОтправителяПолучателя(ИмяРеквизита)
	
	Если ИмяРеквизита = "Отправитель" Тогда
		Документы.ПеремещениеТоваров.ЗаполнитьДанныеОтправителяПолучателя(Объект.МагазинОтправитель,
																		  Объект.СкладОтправитель,
																		  Объект.Организация);
	Иначе
		ЕдинственныеЗначения = Документы.ПеремещениеТоваров.ЕдинственныеЗначения(Объект.МагазинОтправитель);
		
		Если ЕдинственныеЗначения.ЕдинственныйМагазин Тогда
			Объект.МагазинПолучатель = Объект.МагазинОтправитель;
			Если ЕдинственныеЗначения.ЕдинственныйСклад Тогда
				Объект.СкладПолучатель = Объект.СкладОтправитель;
			КонецЕсли;
		КонецЕсли;
		
		Документы.ПеремещениеТоваров.ЗаполнитьДанныеОтправителяПолучателя(Объект.МагазинПолучатель,
																		  Объект.СкладПолучатель,
																		  Объект.ОрганизацияПолучатель,
																		  "Получатель");
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Маркировка

&НаКлиентеНаСервереБезКонтекста
Процедура ДополнитьСтруктуруДействиямиНДС(СтруктураДействий, ВестиУчетМаркируемойПродукцииИСМП)
	
	ИнтеграцияИСРТКлиентСервер.ДополнитьСтруктуруДействиямиНДС(СтруктураДействий, ВестиУчетМаркируемойПродукцииИСМП);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ДополнитьСтруктуруДействиямиГосИС(СтруктураДействий, ЭтоОперацияСДС, МаркировкаВключена, БезМаркировки = Ложь)
	
	ИнтеграцияИСРТКлиентСервер.ДополнитьСтруктуруДействиямиГосИС(СтруктураДействий, ЭтоОперацияСДС, МаркировкаВключена, БезМаркировки);
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаОповещенияНаСервере(ИмяСобытия, Параметр, Источник)

	ДополнительныеПараметры = Новый Структура("ИмяСобытия, Параметр, Источник", ИмяСобытия, Параметр, Источник);
	СобытияФормИС.ПриИзмененииЭлемента(ЭтотОбъект, "Событие", ДополнительныеПараметры);

КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииЭлементаГосИС()
	
	ДополнительныеПараметры = Новый Структура;
	СобытияФормИСКлиент.ПриИзмененииЭлемента(ЭтотОбъект, "Товары", ДополнительныеПараметры);
	Если ДополнительныеПараметры.Свойство("ТребуетсяСерверныйВызов") Тогда
		ТоварыПриОкончанииРедактированияНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ТоварыПриОкончанииРедактированияНаСервере()
	
	СобытияФормИС.ПриИзмененииЭлемента(ЭтотОбъект, "Товары", Неопределено);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПараметрыПроверкиМаркируемойПродукции(Форма)
	
	Если Форма.ОперацияОтражаетсяВИСМП ИЛИ Форма.ОперацияОтражаетсяВЕГАИС Тогда
		ПараметрыПроверкиМаркируемойПродукции = Неопределено;
	Иначе
		ПараметрыПроверкиМаркируемойПродукции = Новый Структура;
		ПараметрыПроверкиМаркируемойПродукции.Вставить("БезМаркировки", Истина);
	КонецЕсли;
	
	Возврат ПараметрыПроверкиМаркируемойПродукции;
	
КонецФункции

&НаСервере
Процедура ПерезаполнитьПризнакиМаркировки()
	
	//Отключенный функционал
	Если Ложь И МаркировкаВключена Тогда 
		СтруктураДействий = Новый Структура;
		СтруктураДействий.Вставить("НеобходимоОбработатьВсюТЧ");
		
		ПараметрыПроверкиАкцизнойМарки = Новый Структура;
		ПараметрыПроверкиАкцизнойМарки.Вставить("ОперацияОтражаетсяВЕГАИС", ОперацияОтражаетсяВЕГАИС);
		СтруктураДействий.Вставить("ПроверитьНеобходимостьВводаАкцизнойМарки", ПараметрыПроверкиАкцизнойМарки);
		СтруктураДействий.Вставить("ПроверитьНеобходимостьВводаМаркируемойПродукцииГосИС", ПараметрыПроверкиМаркируемойПродукции(ЭтотОбъект));
		
		СтруктураТЧ = Новый Структура;
		СтруктураТЧ.Вставить("СтрокиТЧ" , Объект.Товары);
		
		ОбработкаТабличнойЧастиТоварыСервер.ПриИзмененииРеквизитовВТЧСервер(СтруктураТЧ, СтруктураДействий, Неопределено);
		
		СобытияФормРТ.ПриИзмененииЭлемента(ЭтотОбъект, "Товары");
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

&НаКлиенте
Процедура СоздатьНаОснованииЧекЕГАИС(Команда)
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) ИЛИ Модифицированность Тогда
		ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Данные еще не записаны.
				|Выполнение действия ""%1"" возможно только после записи данных.
				|Данные будут записаны.'"),
			НСтр("ru='Чек ЕГАИС: создать на основании'"));
			
		ОписаниеОповещения = Новый ОписаниеОповещения("СоздатьНаОснованииЧекЕГАИСПодтверждениеЗаписи", ЭтотОбъект);
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ОКОтмена);
		Возврат;
	КонецЕсли;
	
	ПроверитьВозможностьВводаНаОснованииЧекЕГАИС(Объект.Ссылка);
	
	СоздатьЧекЕГАИСПослеЗаписиДокумента();
	
КонецПроцедуры

//ИнтеграцияИСМПТК
#Область ИСЦЭДМ

&НаКлиенте
Процедура НадписьИСЦЭДМНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	РаботаСДокументамиИСМПТККлиент.ОткрытьДокументИСЦЭДМ_ДокументОснование(ЭтаФорма, ЭтаФорма.ДанныеДокументаИСЦЭДМ);
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаОповещенияЗаписиИСЦЭДМНаСервере()

	ЭтаФорма.ДокументИСЦЭДМСсылка = Неопределено;
	РаботаСДокументамиИСМПТКПереопределяемый.ОбновитьРеквизитыИСЦЭДМ(ЭтаФорма);

КонецПроцедуры

#КонецОбласти
//Конец ИнтеграцияИСМПТК
