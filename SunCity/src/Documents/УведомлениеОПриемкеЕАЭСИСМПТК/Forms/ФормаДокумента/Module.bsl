
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	Если Параметры.Ключ.Пустая() Тогда
		Объект.Направление = ПредопределенноеЗначение("Перечисление.НаправленияДокументовИСМПТК.Исходящий");
		ИнтерфейсИСМПТК.УстановитьЗаголовокФормыДокумента(, Объект.Ссылка, ЭтаФорма);
	КонецЕсли;
	
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("ПрефиксыЭлементовФормы", "Марки");
	СобытияФормИСМПТКПереопределяемый.ПриСозданииНаСервере_НастроитьПодключаемоеОборудование(ЭтаФорма, ДополнительныеПараметры);
	
	Если ИспользоватьПодключаемоеОборудование Тогда
		ИспользуютсяСканерыШтрихкода = (ОбщегоНазначенияИСМПТКВызовСервераПереопределяемый.ОборудованиеПоПараметрам("СканерШтрихкода").Количество() > 0);
	Иначе
		ИспользуютсяСканерыШтрихкода = Ложь;
	КонецЕсли;
	
	РежимМассовойПриемки = 3; //выполнение самостоятельной сверки
	
	СобытияФормИСМПТКПереопределяемый.ПриСозданииНаСервере(ЭтотОбъект, Отказ, СтандартнаяОбработка);
	УправлениеФормой();

КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	ИнтерфейсИСМПТК.УстановитьЗаголовокФормыДокумента(, Объект.Ссылка, ЭтаФорма);
	Если ИспользоватьПодключаемоеОборудование Тогда
		ИспользуютсяСканерыШтрихкода = (ОбщегоНазначенияИСМПТКВызовСервераПереопределяемый.ОборудованиеПоПараметрам("СканерШтрихкода").Количество() > 0);
	Иначе
		ИспользуютсяСканерыШтрихкода = Ложь;
	КонецЕсли;
	
	СобытияФормИСМПТКПереопределяемый.ПриЧтенииНаСервере(ТекущийОбъект, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	СобытияФормИСМПТККлиентПереопределяемый.ПриОткрытии(ЭтотОбъект, Отказ);
	
	ЗаполнитьСведенияОСвязанныхДокументах();
	
	ОбщегоНазначенияИСМПТККлиентПереопределяемый.НачатьОбновлениеКоманд(ЭтотОбъект);
	ОбщегоНазначенияИСМПТККлиентПереопределяемый.НачатьПодключениеОборудованиеПриОткрытииФормы(ЭтаФорма, "СканерШтрихкода");
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	Если НЕ ЗавершениеРаботы И ИспользуютсяСканерыШтрихкода Тогда
		ОбщегоНазначенияИСМПТККлиентПереопределяемый.НачатьОтключениеОборудованиеПриЗакрытииФормы(Неопределено, ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	НайденныеСтрокиПроверка = Объект.Марки.НайтиСтроки(Новый Структура("СтатусПриемки", Истина));
	Объект.ОтклонитьВсеТовары = НайденныеСтрокиПроверка.Количество() = 0;
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	СобытияФормИСМПТККлиентПереопределяемый.ПослеЗаписи(ЭтаФорма, ПараметрыЗаписи);
	
	МассивДокумент = Новый Массив();
	МассивДокумент.Добавить(Объект.Идентификатор);
	ИнтеграцияИСМПТККлиент.ОповеститьФормы(РаботаСДокументамиИСМПТККлиентСервер.ИмяСобытияЗаписьУведомлениеОПриемкеЕАЭС(), МассивДокумент);
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	УправлениеФормой();
	ИнтерфейсИСМПТК.УстановитьЗаголовокФормыДокумента(, Объект.Ссылка, ЭтаФорма);
    СобытияФормИСМПТКПереопределяемый.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	СобытияФормИСМПТКПереопределяемый.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = РаботаСДокументамиИСМПТККлиентСервер.ИмяСобытияЗаписьУведомлениеОПриемкеЕАЭС() Тогда
			
		Если Не Объект.Ссылка.Пустая() Тогда
			ЭтаФорма.Прочитать();	
		КонецЕсли;
		ЗаполнитьСведенияОСвязанныхДокументах();
		
	ИначеЕсли ИмяСобытия = РаботаСДокументамиИСМПТККлиентСервер.ИмяСобытияЗаписьУведомлениеОбОтгрузкеЕАЭС() Тогда
		ЗаполнитьСведенияОСвязанныхДокументах();
		
	ИначеЕсли Источник = "ПодключаемоеОборудование" И ВводДоступен() Тогда
		Если ИмяСобытия = "ScanData" Тогда
			ОбработкаСобытияСканераОбщая(Параметр);
		КонецЕсли;
		
	Иначе			
		РаботаСДокументамиИСМПТККлиентПереопределяемый.ОбработкаОповещенияДокументыИСМПТ(ЭтаФорма, Объект.Ссылка, ИмяСобытия, Параметр, Источник);		
	КонецЕсли;
	
	СобытияФормИСМПТККлиентПереопределяемый.ОбработкаОповещения(ЭтотОбъект, ИмяСобытия, Параметр, Источник);
	УправлениеФормой();

КонецПроцедуры

&НаКлиенте
Процедура ВнешнееСобытие(Источник, Событие, Данные)
	
	Если Не СобытияФормИСМПТККлиентПереопределяемый.ОбрабатыватьВнешнееСобытиеТО() Тогда
		Возврат;
	КонецЕсли;
	
	Параметр = Новый Массив;
	Параметр.Добавить(Данные);
	Параметр.Добавить(Неопределено);
	
	Если ВводДоступен() Тогда
		Если Событие = "Штрихкод" ИЛИ Событие = "ПолученШтрихкод" Тогда
			ОбработкаСобытияСканераОбщая(Параметр);
		КонецЕсли;
	Иначе			
		РаботаСДокументамиИСМПТККлиентПереопределяемый.ОбработкаОповещенияДокументыИСМПТ(ЭтаФорма, Объект.Ссылка, Событие, Параметр, Источник);		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементов

&НаКлиенте
Процедура ПолучательПриИзменении(Элемент)
	
	Объект.Организация = Объект.Получатель;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоставщикПриИзменении(Элемент)
	
	Объект.Контрагент = Объект.Поставщик;
	
КонецПроцедуры

#Область СостояниеДокумента

&НаСервере
Процедура СформироватьПредставлениеСостояния()
	
	Если Объект.Состояние = Перечисления.СостоянияДокументовИСМПТК.ОбрабатываетсяСервером Тогда
		
		ПредставлениеСостояния = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияДокументОбрабатываетсяСерверомИСМПТ();
		
	ИначеЕсли Объект.Состояние = Перечисления.СостоянияДокументовИСМПТК.ОтклоненСервером Тогда
		
		ПредставлениеСостояния = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияДокументОтклоненСерверомИСМПТ();
		
	ИначеЕсли Объект.Состояние = Перечисления.СостоянияДокументовИСМПТК.ПодтвержденПолучателем Тогда
		
		ПредставлениеСостояния = НСтр("ru = 'Документ принят'");
		
	ИначеЕсли Объект.Состояние = Перечисления.СостоянияДокументовИСМПТК.ДоставленПолучателю Тогда
		
		ПредставлениеСостояния = НСтр("ru = 'Документ ожидает приемку'");
		
	Иначе
		
		Если Объект.Ссылка.Пустая() Тогда
			ПредставлениеСостояния = НСтр("ru = 'Новый документ'");
		Иначе
			ПредставлениеСостояния = НСтр("ru = 'Документ %Состояние%'");
			ПредставлениеСостояния = СтрЗаменить(ПредставлениеСостояния, "%Состояние%", НРег(Объект.Состояние));
		КонецЕсли;
		
	КонецЕсли;
	
	Элементы.ПредставлениеСостояния.ЦветТекста = ОбщегоНазначенияИСМПТККлиентСервер.ЦветСостояния(Объект.Состояние);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеСостоянияНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ПоказатьПредупреждение(, ПредставлениеСостояния);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьНаСервереЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.ОК Тогда
		Если ИнтеграцияИСМПТККлиент.ОбъектЗаписан(ЭтаФорма) Тогда
			МассивУведомлений = Новый Массив;
			МассивУведомлений.Добавить(Объект.Ссылка);
			ИнтеграцияИСМПТККлиент.ОбновитьДокументыИзИСМПТ(МассивУведомлений, Новый Структура("ЗапускатьФоновоеЗадание, ТолькоОбновитьСтатус", Ложь, Истина));
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьПолучателюЗаписьФормы(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.ОК Тогда
		Если Объект.Ссылка.Пустая() ИЛИ ЭтаФорма.Модифицированность Тогда
			ОтправитьПолучателюЗавершение = Новый ОписаниеОповещения("ОтправитьПолучателюЗавершение", ЭтаФорма);	
			ИнтеграцияИСМПТККлиент.ВопросЗаписатьОбъектПередВыполнением(ОтправитьПолучателюЗавершение);
		Иначе
			ОтправитьПолучателюЗавершение(КодВозвратаДиалога.ОК, Неопределено);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьПолучателюЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.ОК Тогда
		Если ИнтеграцияИСМПТККлиент.ОбъектЗаписан(ЭтаФорма) Тогда
			МассивУведомлений = Новый Массив;
			МассивУведомлений.Добавить(Объект.Ссылка);
			ИнтеграцияИСМПТККлиент.ОтправитьИсходящиеДокументыИСМПТ(МассивУведомлений, Новый Структура("ЗапускатьФоновоеЗадание", Ложь));
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура КомментарийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СобытияФормИСМПТККлиентПереопределяемый.ПоказатьФормуРедактированияКомментария(Элемент.ТекстРедактирования, ЭтотОбъект, "Объект.Комментарий");

КонецПроцедуры

&НаКлиенте
Процедура МаркиНеучтенныеПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Отказ = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура РежимМассовойПриемкиПриИзменении(Элемент)
	
	ТекстВопроса = НСтр("ru = 'Смена режима приемки: возможно будут изменены текущие статусы приемки кодов в таблице марок. Продолжить?'");
	СменаРежимаПриемкиКодов = Новый ОписаниеОповещения("СменаРежимаПриемкиКодов", ЭтаФорма);
	ПоказатьВопрос(СменаРежимаПриемкиКодов, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры

&НаКлиенте
Процедура МаркиНеучтенныеПередУдалением(Элемент, Отказ)
	
	Если Не Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыДокументовИСМПТК.НеОпределен") Тогда
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура МаркиСтатусПриемкиПриИзменении(Элемент)
	
	РежимМассовойПриемки = 3;
	
КонецПроцедуры

&НаКлиенте
Процедура МаркиНеучтенныеПослеУдаления(Элемент)
	
	УправлениеФормой();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

#Область ВыгрузитьВExcel

&НаКлиенте
Процедура ВыгрузитьДанныеВExcelПодтвержден(Команда)
	 
	ВыгрузитьДанныеВExcelОбщая("Марки");
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьДанныеВExcelНеПодтвержден(Команда)
	
	ВыгрузитьДанныеВExcelОбщая("МаркиНеучтенные");
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьДанныеВExcelОбщая(ИмяТаблицы)
	
	ОчиститьСообщения();
	ДиалогВыбораФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Сохранение);
	ДиалогВыбораФайла.Заголовок = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияЗаголовокВыборФайла();
	ДиалогВыбораФайла.Фильтр 	= "Все поддерживаемые форматы файлов(*.xls;*.xlsx;)|*.xls;*.xlsx;|Книга Excel 97 (*.xls)|*.xls|Книга Excel 2007 (*.xlsx)|*.xlsx";
	ДиалогВыбораФайла.ИндексФильтра = 0;
	ДиалогВыбораФайла.ПредварительныйПросмотр = Ложь;
	ДиалогВыбораФайла.ПроверятьСуществованиеФайла = Истина;
	ДиалогВыбораФайла.МножественныйВыбор = Ложь;
	
	Оповещение = Новый ОписаниеОповещения("СоздатьФайлXLS", ЭтотОбъект, Новый Структура("ИмяТЧ", ИмяТаблицы));
	ДиалогВыбораФайла.Показать(Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьФайлXLS(ВыбранныеФайлы, ДополнительныеПараметрым) Экспорт
	
	ИмяТаблицы = ДополнительныеПараметрым.ИмяТЧ;
	
	Если Не ВыбранныеФайлы = Неопределено Тогда
		
		ТабличныйДокумент = Новый ТабличныйДокумент;
		
		Итератор = 1;
		Для Каждого СтрокаТЧ Из Объект[ИмяТаблицы] Цикл
			КодДляЗаписи = СтрокаТЧ.КодИдентификации;
			ТабличныйДокумент.Область("R" + Формат(Итератор,"ЧГ=0") + "C1").Текст = КодДляЗаписи;
			Итератор = Итератор + 1;
		КонецЦикла;
		
		ТабличныйДокумент.Записать(ВыбранныеФайлы[0], ТипФайлаТабличногоДокумента.XLS97);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ВыгрузитьВCSV

&НаКлиенте
Процедура ВыгрузитьКодыМаркировкиВФайлПодтвержден(Команда)
	
	ВыгрузитьКодыМаркировкиВФайлОбщая("Марки");
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьКодыМаркировкиВФайлНеПодтвержден(Команда)
	
	ВыгрузитьКодыМаркировкиВФайлОбщая("МаркиНеучтенные");
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьКодыМаркировкиВФайлОбщая(ИмяТаблицы)
	
	ОчиститьСообщения();
	ДиалогВыбораФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Сохранение);
	ДиалогВыбораФайла.Заголовок = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияЗаголовокВыборФайла();
	ДиалогВыбораФайла.Фильтр 	= "CSV (Comma-Separated Values)(*.csv)|*.csv";
	ДиалогВыбораФайла.ИндексФильтра = 0;
	ДиалогВыбораФайла.ПредварительныйПросмотр = Ложь;
	ДиалогВыбораФайла.ПроверятьСуществованиеФайла = Истина;
	ДиалогВыбораФайла.МножественныйВыбор = Ложь;
	
	Оповещение = Новый ОписаниеОповещения("ВыгрузитьКодыМаркировкиИзФайлаЗавершение", ЭтотОбъект, Новый Структура("ИмяТЧ", ИмяТаблицы));
	ДиалогВыбораФайла.Показать(Оповещение);
		
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьКодыМаркировкиИзФайлаЗавершение(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	
	ИмяТаблицы = ДополнительныеПараметры.ИмяТЧ;
	
	Если Не ВыбранныеФайлы = Неопределено Тогда
		
		НовыйТекстовыйДокумент = Новый ТекстовыйДокумент;
		
		Для Каждого СтрокаТЧ Из Объект[ИмяТаблицы] Цикл
			НовыйТекстовыйДокумент.ДобавитьСтроку(СтрокаТЧ.КодИдентификации);
		КонецЦикла;
		
		НовыйТекстовыйДокумент.Записать(ВыбранныеФайлы[0]);
				
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ЗагрузитьИзCSV

&НаКлиенте
Процедура ЗагрузитьКодыМаркировкиИзФайла(Команда)
	
	Если Не Объект.МаркиНеучтенные.Количество() = 0 Тогда
		Оповещение = Новый ОписаниеОповещения("ЗагрузитьКодыМаркировкиИзФайлаОбработкаОтвета", ЭтотОбъект);
		ТекстВопроса = НСтр("ru = 'Выполнить предварительную очистку таблицы не отраженных в отгрузке марок?'");
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	Иначе
		ЗагрузитьКодыМаркировкиИзФайлаПослеВопроса();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьКодыМаркировкиИзФайлаОбработкаОтвета(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		Объект.МаркиНеучтенные.Очистить();
	КонецЕсли;
	
	ЗагрузитьКодыМаркировкиИзФайлаПослеВопроса();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьКодыМаркировкиИзФайлаПослеВопроса()
		
	ОчиститьСообщения();
	ДиалогВыбораФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	ДиалогВыбораФайла.Заголовок 	= РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияЗаголовокВыборФайла();
	ДиалогВыбораФайла.Фильтр 		= "CSV (Comma-Separated Values)(*.csv)|*.csv";
	ДиалогВыбораФайла.ИндексФильтра = 0;
	ДиалогВыбораФайла.ПредварительныйПросмотр 	  = Ложь;
	ДиалогВыбораФайла.ПроверятьСуществованиеФайла = Истина;
	ДиалогВыбораФайла.МножественныйВыбор 		  = Истина;
	
	Оповещение = Новый ОписаниеОповещения("ВыборФайлаCSVЗавершение", ЭтотОбъект);
	ДиалогВыбораФайла.Показать(Оповещение);
		
КонецПроцедуры

&НаКлиенте
Процедура ВыборФайлаCSVЗавершение(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	
	Если Не ВыбранныеФайлы = Неопределено Тогда
		
		Для Каждого ВыбранныйФайл Из ВыбранныеФайлы Цикл
			
			ПрочитанныйФайл = Новый ТекстовыйДокумент;
			ПрочитанныйФайл.Прочитать(ВыбранныйФайл);
			
			МассивКодовМаркировки = Новый Массив;
			
			Для НомерСтроки = 1 По ПрочитанныйФайл.КоличествоСтрок() Цикл
				Штрихкод = ПрочитанныйФайл.ПолучитьСтроку(НомерСтроки);
				ДанныеШтрихкода = Новый Структура("ШтрихКод, ФорматBase64, Количество", Штрихкод, Ложь, 1);
				РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйКлиентСервер.ЗакодироватьШтрихкодДанныхBase64(ДанныеШтрихкода);
				Если Не РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйКлиентСервер.ПроверкаФорматаТранспортногоКодаПройденаУспешно(ДанныеШтрихкода, Истина) Тогда
					Продолжить;
				КонецЕсли;
				МассивКодовМаркировки.Добавить(ДанныеШтрихкода);
			КонецЦикла;
			
			ЗагрузитьКодыМаркировкиИзФайлаЗавершение(МассивКодовМаркировки);
			
		КонецЦикла;
	КонецЕсли;

КонецПроцедуры

&Насервере
Процедура ЗагрузитьКодыМаркировкиИзФайлаЗавершение(ДанныеДляРазбора) Экспорт
	
	//Данные предыдущей проверки обнуляем
	ТаблицаМарок = Объект.Марки.Выгрузить();
	ТаблицаМарок.ЗаполнитьЗначения(Ложь, "СтатусПриемки");
	Объект.Марки.Загрузить(ТаблицаМарок);
		
	НастройкиРазбораКодаМаркировки = РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйПовтИсп.НастройкиРазбораКодаМаркировки();
	МассивОшибок = Новый Массив;
	
	Для Каждого КодМаркировкиBase64 Из ДанныеДляРазбора Цикл
		
		ДанныеРазбора = РазборИОбработкаКодовМаркировкиИСМПТКСлужебный.РазобратьКодМаркировки(КодМаркировкиBase64, НастройкиРазбораКодаМаркировки.ДоступныеВидыПродукции, , НастройкиРазбораКодаМаркировки);
		
		Если ДанныеРазбора = Неопределено Тогда 
			Если Не ЗначениеЗаполнено(КодМаркировкиBase64.ШтрихКод) Тогда
				ТекстОшибки     = НСтр("ru = 'В файле найдена пустая строка: №%1.'");
				ТекстОшибки     = ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(ТекстОшибки, ДанныеДляРазбора.Найти(КодМаркировкиBase64)+1);
			Иначе
				ТекстОшибки     = НСтр("ru = 'Не удалось разобрать код маркировки %1'") + Символы.ПС + НСтр("ru = 'в строке №%2. Он не был обработан.'");
				НеКорректныйКод = РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйКлиентСервер.Base64ВШтрихкод(КодМаркировкиBase64.ШтрихКод);
				НеКорректныйКод = СтрЗаменить(НеКорректныйКод, Символ(29), "");
				ТекстОшибки     = ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(ТекстОшибки, НеКорректныйКод, ДанныеДляРазбора.Найти(КодМаркировкиBase64)+1);
			КонецЕсли;
			МассивОшибок.Добавить(ТекстОшибки);
			Продолжить;
		КонецЕсли;
		
		СтруктураКодовМаркировки = ИнтеграцияИСМПТКВызовСервера.ПолучитьКодыМаркировки(КодМаркировкиBase64); 
		
		Если ТипЗнч(СтруктураКодовМаркировки) = Тип("Строка") Тогда
			ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(СтруктураКодовМаркировки);
			Продолжить;
		КонецЕсли;
		
		СтрокаДляПриемки = Объект.Марки.НайтиСтроки(Новый Структура("КодИдентификации", СтруктураКодовМаркировки.КодИдентификации));
		Если СтрокаДляПриемки.Количество() = 0 Тогда
			
			//Проверяем наличие кода в таблице
			НайденныеСтроки = Объект.МаркиНеучтенные.НайтиСтроки(Новый Структура("КодИдентификации", СтруктураКодовМаркировки.КодИдентификации)); 
			Если Не НайденныеСтроки.Количество() = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			ДанныеНоменклатуры = ПолучитьНоменклатуруПоШтрихкоду(СтруктураКодовМаркировки.EAN);
			Если ТипЗнч(ДанныеНоменклатуры) = Тип("Структура") Тогда
				Номенклатура = ДанныеНоменклатуры.Номенклатура;
			Иначе
				Номенклатура = ДанныеНоменклатуры;
			КонецЕсли;
			
			//Заполняем код как неучтенный
			НоваяСтрокаТЧ = Объект.МаркиНеучтенные.Добавить();
			НоваяСтрокаТЧ.КодИдентификации 	 = СтруктураКодовМаркировки.КодИдентификации;
			НоваяСтрокаТЧ.ВидУпаковки		 = СтруктураКодовМаркировки.ВидУпаковки;
			НоваяСтрокаТЧ.EAN 				 = СтруктураКодовМаркировки.EAN;
			НоваяСтрокаТЧ.Номенклатура 		 = Номенклатура;
			НоваяСтрокаТЧ.ВидПродукции  	 = СтруктураКодовМаркировки.ВидПродукции;
			НоваяСтрокаТЧ.GTINВерхнегоУровня = СтруктураКодовМаркировки.GTINВерхнегоУровня;
			
			//Оповещаем
			ТекстОшибки = НСтр("ru = 'Код маркировки %1 в строке №%2 не был обнаружен в сведениях об отгрузке товаров. Код добавлен в таблицу неучтенных марок.'");
			ТекстОшибки = ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(ТекстОшибки, СтруктураКодовМаркировки.КодИдентификации, ДанныеДляРазбора.Найти(КодМаркировкиBase64)+1);
			МассивОшибок.Добавить(ТекстОшибки);
			
		Иначе
			
			СтрокаДляПриемки[0].СтатусПриемки = Истина;
			ТекстОшибки = НСтр("ru = 'Код маркировки %1 в строке №%2 принят.'");
			ТекстОшибки = ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(ТекстОшибки, СтруктураКодовМаркировки.КодИдентификации, ДанныеДляРазбора.Найти(КодМаркировкиBase64)+1);
			МассивОшибок.Добавить(ТекстОшибки);
			
		КонецЕсли;		
	КонецЦикла;
	
	Для Каждого Ошибка Из МассивОшибок Цикл
		ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(Ошибка);
	КонецЦикла;
	
	РежимМассовойПриемки = 3;
	Модифицированность   = Истина;
	УправлениеФормой();
	
КонецПроцедуры

#КонецОбласти

#Область ЗагрузитьИзТСД

&НаКлиенте
Процедура ЗагрузитьДанныеИзТСД(Команда)
	
	ОчиститьСообщения();
	ОбщегоНазначенияИСМПТККлиентПереопределяемый.НачатьЗагрузкуДанныеИзТСД(Новый ОписаниеОповещения("ЗагрузитьИзТСДЗавершение", ЭтотОбъект), УникальныйИдентификатор);
		
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьИзТСДЗавершение(РезультатВыполнения, ДополнительныеПараметры) Экспорт
	
	СобытияФормИСМПТККлиентПереопределяемый.ПриПолученииДанныхИзТСД(Новый ОписаниеОповещения("Подключаемый_ПолученыДанныеИзТСД", ЭтотОбъект), ЭтотОбъект, РезультатВыполнения);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПолученыДанныеИзТСД(Штрихкоды, АвторизацияЗапрашивалась = Неопределено) Экспорт
	
	Если Штрихкоды.Количество() = 0 Тогда
		ПоказатьПредупреждение( ,РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияВДанныхИзТСДНетИнформацииОКодахМаркировки());
		Возврат;
	КонецЕсли;
	
	СобытияФормИСМПТККлиент.ОповеститьОНачалеОбработкиДанныхТСД();
	ПараметрыСканирования = РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйКлиент.ПараметрыСканирования(ЭтотОбъект);
	СобытияФормИСМПТККлиент.ПреобразоватьШтрихкодыТСДВBase64(Штрихкоды);
	ЗагрузкаДанныхТСД = ОбработатьПолученныеДанныеТСДНаСервере(Штрихкоды, ПараметрыСканирования, Неопределено);
	
	ОбработатьПолученныеДанныеТСД();
	
КонецПроцедуры

&НаСервере
Функция ОбработатьПолученныеДанныеТСДНаСервере(ШтрихкодыТСД, ПараметрыСканирования, КэшированныеЗначения)
	
	Результат = РаботаСДокументамиИСМПТК.ОбработатьПолученныеДанныеТСДВДокументе(ЭтотОбъект, ШтрихкодыТСД, ПараметрыСканирования);
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ОбработатьПолученныеДанныеТСД()
	
	Если ЗагрузкаДанныхТСД = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	МассивКодовМаркировки = Новый Массив;
	
	Для НомерСтроки = 0 По ЗагрузкаДанныхТСД.Всего - 1 Цикл
		Штрихкод = ЗагрузкаДанныхТСД.ШтрихкодыТСД[НомерСтроки];
		ДанныеШтрихкода = Новый Структура("ШтрихКод, ФорматBase64, Количество", Штрихкод.Штрихкод, Ложь, 1);
		РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйКлиентСервер.ЗакодироватьШтрихкодДанныхBase64(ДанныеШтрихкода);
		Если Не РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйКлиентСервер.ПроверкаФорматаТранспортногоКодаПройденаУспешно(ДанныеШтрихкода, Истина) Тогда
			Продолжить;
		КонецЕсли;
		МассивКодовМаркировки.Добавить(ДанныеШтрихкода);
	КонецЦикла;
	
	Если Объект.МаркиНеучтенные.Количество() = 0 Тогда
		ЗагрузитьКодыМаркировкиИзФайлаЗавершение(МассивКодовМаркировки);
	Иначе
		Оповещение = Новый ОписаниеОповещения("ЗагрузитьКодыМаркировкиИзФайлаЗавершениеПослеВопроса", ЭтотОбъект, Новый Структура("МассивКодовМаркировки", МассивКодовМаркировки));
		ТекстВопроса = НСтр("ru = 'Выполнить предварительную очистку таблицы не отраженных в отгрузке марок?'");
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	КонецЕсли;
		
КонецПроцедуры

#КонецОбласти

#Область ЗагрузитьИзМобильногоприложения

&НаКлиенте
Процедура МобильноеПриложениеЗагрузитьТовары(Команда)
	
	ОчиститьСообщения();
	
	ОповещениеПослеВыбораЭлемента = Новый ОписаниеОповещения("МобильноеПриложениеЗагрузитьТоварыОбработкаВыбора", ЭтотОбъект);
	Список = РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйВызовСервера.МобильноеПриложениеЗагрузитьТоварыНаСервере();
	Список.ПоказатьОтметкуЭлементов(ОповещениеПослеВыбораЭлемента, РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияВыборДокументаДляЗагрузки());
	
КонецПроцедуры

&НаКлиенте
Процедура МобильноеПриложениеЗагрузитьТоварыОбработкаВыбора(Элемент, Параметры) Экспорт
	
	РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйКлиент.МобильноеПриложениеЗагрузитьТоварыОбработкаВыбораОбщая(ЭтотОбъект, Элемент, Параметры);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура ПолучитьКлючАвторизации(СобытиеПослеАвторизации, ОповещениеПриОшибке = Ложь) Экспорт
	
	ИнтерфейсИСМПТККлиент.ПолучитьКлючАвторизацииОбщая(СобытиеПослеАвторизации, Объект.Организация, ОповещениеПриОшибке);
	
КонецПроцедуры

&НаСервере
Процедура УправлениеФормой()
	
	НеОтправлен = Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыДокументовИСМПТК.НеОпределен");
	
	ОбщегоНазначенияИСМПТККлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "Ошибки", "Видимость", Не Объект.Ошибки.Количество() = 0);
	
	ОбщегоНазначенияИСМПТККлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "МаркиНеучтенные", "Видимость", Не Объект.МаркиНеучтенные.Количество() = 0);
	
	ОбщегоНазначенияИСМПТККлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "РежимМассовойПриемки", "Доступность", НеОтправлен);
	
	ОбщегоНазначенияИСМПТККлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "КомандыЗагрузкиТЧ",  "Видимость", НеОтправлен); 
	ОбщегоНазначенияИСМПТККлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "МаркиГруппаЭкспорт", "Видимость", Не Объект.МаркиНеучтенные.Количество() = 0); 
	
	ОбщегоНазначенияИСМПТККлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "СвязанноеУведомлениеОбОтгрузке",
																	   "Видимость", ЗначениеЗаполнено(ПредставлениеУведОбОтгрузке)); 
	
	СформироватьПредставлениеСостояния();                                 
	ИзменитьКоманднуюПанельДокумента();
	
КонецПроцедуры

&НаКлиенте
Процедура СменаРежимаПриемкиКодов(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		Для Каждого Строка Из Объект.Марки Цикл
			
			Если РежимМассовойПриемки = 3 Тогда //сверить вручную
				
				ТекстСообщения = НСтр("ru = 'Выбран режим самостоятельной сверки. Начните сканирование или воспользуйтесь командами загрузки данных.'");
								
			ИначеЕсли РежимМассовойПриемки = 1 Тогда //принять все
				
				Строка.СтатусПриемки = Истина;
				Объект.ОтклонитьВсеТовары = Ложь;
				ТекстСообщения = НСтр("ru = 'Все коды маркировки приняты.'");
				
			Иначе //отклонить все
				
				Строка.СтатусПриемки = Ложь;
				Объект.ОтклонитьВсеТовары = Истина;
				ТекстСообщения = НСтр("ru = 'Все коды маркировки отклонены.'");
				
			КонецЕсли;
		КонецЦикла;
		
		Модифицированность = Истина;
		УправлениеФормой();
	КонецЕсли;
	
	ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
	
КонецПроцедуры

#Область Штрихкодирование

&НаКлиенте
Процедура ОбработкаСобытияСканераОбщая(Параметр)
	
	ОчиститьСообщения();
	
	Если НЕ Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыДокументовИСМПТК.НеОпределен") Тогда
		ТекстСообщения = НСтр("ru = 'Принятие кодов маркировки возможно только в документе со статусом Черновик.'");
		ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);	
	Иначе
		РежимМассовойПриемки = 3;
		Если Не РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйКлиентСервер.ПроверкаФорматаТранспортногоКодаПройденаУспешно(РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйКлиент.ПреобразоватьДанныеСоСканераВСтруктуру(Параметр)) Тогда
			Возврат;
		КонецЕсли;
		ОбработатьКодМаркировки(РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйКлиент.ПреобразоватьДанныеСоСканераВСтруктуру(Параметр));
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьКодМаркировки(ИсходныеДанные, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если ИсходныеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;

	//Для передачи на сервер КМ, в составе которого есть символы GS (29), требуется дополнительное кодирование
	РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйКлиентСервер.ЗакодироватьШтрихкодДанныхBase64(ИсходныеДанные);
	ИсходныеДанные.Вставить("ФорматBase64", Истина);
	СтруктураКодовМаркировки = ИнтеграцияИСМПТКВызовСервера.ПолучитьКодыМаркировки(ИсходныеДанные);   
	
	//Если удалось разобрать код, вернется структура. Если нет - текст сообщения об ошибке.
	Если ТипЗнч(СтруктураКодовМаркировки) = Тип("Строка") Тогда
		ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(СтруктураКодовМаркировки);
		Возврат;
	КонецЕсли;
	
	НайденныеСтрокиВТЧ = НайтиПоКодуИдентификации(СтруктураКодовМаркировки.КодИдентификации);
	Если Не НайденныеСтрокиВТЧ = Неопределено Тогда 
		
		//Если код найден в ТЧ - проверяем его статус приемки
		Если НайденныеСтрокиВТЧ[0].СтатусПриемки Тогда
			//Уточняем про снятие признака
			ТекстВопроса = НСтр("ru = 'Код маркировки %1 уже отмечен как принятый. Отменить приемку?'");
			ТекстВопроса = ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(ТекстВопроса, СтруктураКодовМаркировки.КодИдентификации);
			ОтменитьПриемкуКода = Новый ОписаниеОповещения("ОтменитьПриемкуКода", ЭтаФорма, Новый Структура("КодИдентификации", СтруктураКодовМаркировки.КодИдентификации));
			ПоказатьВопрос(ОтменитьПриемкуКода, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		Иначе
			НайденныеСтрокиВТЧ[0].СтатусПриемки = Истина;
			ТекстСообщения = НСтр("ru = 'Код маркировки %1 принят.'");
			ТекстСообщения = ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(ТекстСообщения, СтруктураКодовМаркировки.КодИдентификации);
			ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;			
	Иначе
		
		ОтказатьВДобавлении = Ложь;
		Если Не Объект.МаркиНеучтенные.НайтиСтроки(Новый Структура("КодИдентификации", СтруктураКодовМаркировки.КодИдентификации)).Количество() = 0 Тогда 
			
			ОтказатьВДобавлении = Истина;
			
		ИначеЕсли ОбщегоНазначенияИСМПТК.ПроверитьЗначениеКонстанты("ПоддержкаДвойногоФорматаТранспортныхКодовИСМПТК")
			И СтруктураКодовМаркировки.ВидУпаковки = ПредопределенноеЗначение("Перечисление.ВидыУпаковокИСМПТК.Логистическая") Тогда
			
			//В этом случае в таблице документа может находиться уже преобразованный SSCC, соответствующий обрабатываемому в данный момент штрихкоду,
			//т.е. нужна специфическая проверка на дублирование данных кода
			ОтказатьВДобавлении = ПроверитьНаличиеSSCCВДокументе(СтруктураКодовМаркировки.КодИдентификации);
			
		КонецЕсли;
		
		Если ОтказатьВДобавлении Тогда
			Возврат;
		КонецЕсли;
		
		ТекстСообщения = НСтр("ru = 'Код маркировки %1 не найден в списке отгруженных товаров. Код был добавлен в таблицу неподтвержденных товаров.'");
		ТекстСообщения = ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(ТекстСообщения, СтруктураКодовМаркировки.КодИдентификации);
		ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
		
		ДанныеНоменклатуры = ПолучитьНоменклатуруПоШтрихкоду(СтруктураКодовМаркировки.EAN);
		Если ТипЗнч(ДанныеНоменклатуры) = Тип("Структура") Тогда
			Номенклатура = ДанныеНоменклатуры.Номенклатура;
		Иначе
			Номенклатура = ДанныеНоменклатуры;
		КонецЕсли;

		НоваяСтрока = Объект.МаркиНеучтенные.Добавить();
		НоваяСтрока.КодИдентификации 	= СтруктураКодовМаркировки.КодИдентификации;
		НоваяСтрока.ВидУпаковки			= СтруктураКодовМаркировки.ВидУпаковки;
		НоваяСтрока.EAN 				= СтруктураКодовМаркировки.EAN;
		НоваяСтрока.Номенклатура 		= Номенклатура;
		НоваяСтрока.ВидПродукции		= СтруктураКодовМаркировки.ВидПродукции;
		НоваяСтрока.GTINВерхнегоУровня 	= СтруктураКодовМаркировки.GTINВерхнегоУровня;
		
	КонецЕсли;
	
	Модифицированность = Истина;
	УправлениеФормой();
	
КонецПроцедуры

&НаКлиенте
Функция НайтиПоКодуИдентификации(КодИдентификации)
	
	СтруктураПоиска = Новый Структура("КодИдентификации", КодИдентификации);
	НайденныеСтроки = Объект.Марки.НайтиСтроки(СтруктураПоиска);
	
	Если НайденныеСтроки.Количество() > 0 Тогда
		Возврат НайденныеСтроки;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

&НаСервере
функция ПолучитьНоменклатуруПоШтрихкоду(EAN, СообщенияОбОшибках = Неопределено)
	
	Если СообщенияОбОшибках = Неопределено Тогда
		СообщенияОбОшибках = Новый Соответствие();
	КонецЕсли;
	
	Возврат ОбщегоНазначенияИСМПТКПереопределяемый.ПолучитьДанныеНоменклатурыИзРегистраШтрихкодовПоШтрихкоду(, EAN,,СообщенияОбОшибках);
		
КонецФункции

&НаКлиенте
Процедура ОтменитьПриемкуКода(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		НайеннаяСтрока = Объект.Марки.НайтиСтроки(Новый Структура("КодИдентификации", ДополнительныеПараметры.КодИдентификации));
		НайеннаяСтрока[0].СтатусПриемки = Ложь;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура ОповеститьОПроблемеЗапросаВалидностиКМ() Экспорт
	
	//Если по какой-то причине не удалось выполнить получение Токена, то и запрос на проверку статуса КМ не выполнялся,
	//об этом нужно предупредить и отметить непроверенные коды.
	Если ТокенАвторизацииВрем = Неопределено Тогда 
		СообщитьОНевозможностиВыполнитьПроверкуСтатусаКМ("Фоновый");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СообщитьОНевозможностиВыполнитьПроверкуСтатусаКМ(РежимЗапроса) Экспорт

	Если РежимЗапроса = "Ручной" Тогда
		ТекстСообщения = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияНевозможноВыполнитьПроверкуСтатусаКМ_Вручную();
	Иначе	
		ТекстСообщения = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияНевозможноВыполнитьПроверкуСтатусаКМ_ВФоне();
	КонецЕсли;
	ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьПроцедуруФоновоВыполнено(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияОперацияОтменена());
		Возврат;
	ИначеЕсли Результат.Статус = "Ошибка" Тогда
		ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(Результат.ПодробноеПредставлениеОшибки);
	ИначеЕсли Результат.Статус = "Выполнено" Тогда
		
		// обрабатываем результат
		Модифицированность = Истина;
		
		Если ОбработатьРезультатЗагрузкиКодов(Результат.АдресРезультата) Тогда 
			ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияОперацияЗагрузкиКМЗавершена());
			
			Если ИнтеграцияИСМПТКВызовСервера.ИспользоватьАвтоПроверкаВалидностиКодаИСМПТК() Тогда 
				
				ТокенАвторизацииВрем = Неопределено;
				ЗавершениеПроверитьСостояниеКодовНаСервере = Новый ОписаниеОповещения("ЗавершениеПроверитьСостояниеКодовНаСервере", ЭтаФорма);
				ПолучитьКлючАвторизации(ЗавершениеПроверитьСостояниеКодовНаСервере, Истина);

			КонецЕсли;
			РежимМассовойПриемки = 3;
			Модифицированность   = Истина;
		КонецЕсли;
	КонецЕсли;
	УправлениеФормой();
	
КонецПроцедуры

//Выполнить запрос состояния КМ с сервера списком.
//Используется из команд ручной проверки статусов, загрузки из файла, ТСД и Мобильного приложения.
&НаСервере
Процедура ЗавершениеПроверитьСостояниеКодовНаСервере(РезультатВыполнения, Параметры) Экспорт
			
	ТокенАвторизацииВрем = ?(ЗначениеЗаполнено(РезультатВыполнения), РезультатВыполнения, Неопределено);
	
	//Если по какой-то причине не удалось выполнить получение Токена, то и запрос на проверку статуса КМ не выполнялся,
	//об этом нужно предупредить и отметить непроверенные коды.
	Если ТокенАвторизацииВрем = Неопределено Тогда 
		ТекстСообщения = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияНевозможноВыполнитьПроверкуСтатусаКМ_ВФоне();
		ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	ЗапроситьДанныеОСостоянииКодовСписком(ТокенАвторизацииВрем);
	
КонецПроцедуры

&НаСервере
Процедура ЗапроситьДанныеОСостоянииКодовСписком(ТокенАвторизации = Неопределено)
	
	МассивКМ = Новый Массив();
	Для Каждого СтрокаМарка Из Объект.Марки Цикл
		МассивКМ.Добавить(СтрокаМарка.КодИдентификации);	
	КонецЦикла;
	
	ОтветСервераСостояниеКМ = ИнтеграцияИСМПТК.ЗапроситьДанныеОСостоянииКМ(МассивКМ, Объект.Организация, ТокенАвторизации);
	ОбработатьОтветСервераПоСостояниюКМ(МассивКМ, ОтветСервераСостояниеКМ);	
	
КонецПроцедуры

Процедура ОбработатьОтветСервераПоСостояниюКМ(МассивКМ, ОтветСервераСостояниеКМ)
	
	НовоеСоответствиеСтатусов = Неопределено;
	ИнтеграцияИСМПТК.ОбработатьОтветСервераПоСостояниюКМ_Общая(ЭтаФорма, МассивКМ, ОтветСервераСостояниеКМ, "УведОбЭкспортеЕАЭС", НовоеСоответствиеСтатусов);
				
КонецПроцедуры

&НаСервере
Функция ОбработатьРезультатЗагрузкиКодов(АдресРезультата)
	
	РезультатЗадания = ПолучитьИзВременногоХранилища(АдресРезультата);
	МассивОшибок = Новый Массив();
	
	Если РезультатЗадания.Свойство("МассивОшибок") И Не РезультатЗадания.МассивОшибок.Количество() = 0 Тогда
		Для Каждого ТекстОшибки Из РезультатЗадания.МассивОшибок Цикл 
			ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстОшибки);
		КонецЦикла;
	КонецЕсли;
	
	Если РезультатЗадания.Успешно И НЕ РезультатЗадания.ТаблицаПолученныхКодов.Количество() = 0 Тогда
		Для Каждого Строка Из РезультатЗадания.ТаблицаПолученныхКодов Цикл
			//Если код найден в таблице марок - выставляем отметку о подтверждении
			НайденныеСтроки = Объект.Марки.НайтиСтроки(Новый Структура("КодИдентификации", Строка.КодИдентификации));
			Если Не НайденныеСтроки.Количество() = 0 Тогда
				
				НайденныеСтроки[0].СтатусПриемки = Истина;
				ТекстОшибки = НСтр("ru = 'Код маркировки %1 принят.'");
				ТекстОшибки = ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(ТекстОшибки, Строка.КодИдентификации);
				МассивОшибок.Добавить(ТекстОшибки);
				
			Иначе
				
				ОтказатьВДобавлении = Ложь;
				Если Не Объект.МаркиНеучтенные.НайтиСтроки(Новый Структура("КодИдентификации", Строка.КодИдентификации)).Количество() = 0 Тогда 
					
					ОтказатьВДобавлении = Истина;
					
				ИначеЕсли ОбщегоНазначенияИСМПТК.ПроверитьЗначениеКонстанты("ПоддержкаДвойногоФорматаТранспортныхКодовИСМПТК")
					И Строка.ВидУпаковки = ПредопределенноеЗначение("Перечисление.ВидыУпаковокИСМПТК.Логистическая") Тогда
					
					//В этом случае в таблице документа может находиться уже преобразованный SSCC, соответствующий обрабатываемому в данный момент штрихкоду,
					//т.е. нужна специфическая проверка на дублирование данных кода
					ОтказатьВДобавлении = ПроверитьНаличиеSSCCВДокументе(Строка.КодИдентификации);
					
				КонецЕсли;
				
				Если ОтказатьВДобавлении Тогда
					//Если код уже присутствует в ТЧ - игнорируем его
					ТекстОшибки = НСтр("ru = 'Код маркировки %1 уже присутствует в таблице неучтенных марок.'");
					ТекстОшибки = ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(ТекстОшибки, Строка.КодИдентификации);
					МассивОшибок.Добавить(ТекстОшибки);
					Продолжить;
				КонецЕсли;
							
				//Заполняем код как неучтенный
				НоваяСтрокаТЧ = Объект.МаркиНеучтенные.Добавить();
				НоваяСтрокаТЧ.КодИдентификации 	 = Строка.КодИдентификации;
				НоваяСтрокаТЧ.ВидУпаковки		 = Строка.ВидУпаковки;
				НоваяСтрокаТЧ.EAN 				 = Строка.EAN;
				НоваяСтрокаТЧ.Номенклатура 		 = Строка.Номенклатура;
				НоваяСтрокаТЧ.ВидПродукции  	 = Строка.ВидПродукции;
				НоваяСтрокаТЧ.GTINВерхнегоУровня = Строка.GTINВерхнегоУровня;
				
				//Оповещаем
				ТекстОшибки = НСтр("ru = 'Код маркировки %1 не был обнаружен в сведениях об отгрузке товаров. Код добавлен в таблицу неучтенных марок.'");
				ТекстОшибки = ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(ТекстОшибки, Строка.КодИдентификации);
				МассивОшибок.Добавить(ТекстОшибки);
				
			КонецЕсли;
		КонецЦикла;

		Для Каждого Ошибка Из МассивОшибок Цикл
			ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(Ошибка);
		КонецЦикла;
			
		Возврат Истина;
	Иначе 
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция ПроверитьНаличиеSSCCВДокументе(КодИдентификации)
	
	ТаблицаМарок = Объект.МаркиНеучтенные.Выгрузить();
	Возврат Не РазборИОбработкаКодовМаркировкиИСМПТКСлужебный.ВыполнитьПроверкуТранспортногоКодаПоДокументу(КодИдентификации, ТаблицаМарок); 
	
КонецФункции

&НаСервере
Процедура ИзменитьКоманднуюПанельДокумента()
	
	////ПРОВЕРКИ////
	МожноОтправить = Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыДокументовИСМПТК.НеОпределен");
	////////////////
	
	//Действия по АПИ
	ОбщегоНазначенияИСМПТККлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ФормаДокументУведомлениеОПриемкеЕАЭСИСМПТКОтправить", 
																"Видимость", МожноОтправить);
	
КонецПроцедуры

#КонецОбласти

#Область СвязьСУведомлениемОбОтгрузке

&НаКлиенте
Процедура ЗаполнитьСведенияОСвязанныхДокументах()
	
	ЭтаФорма.ПредставлениеУведОбОтгрузке = Неопределено;
	
	Если ЗначениеЗаполнено(Объект.ИдентификаторДокументаОтгрузки) Тогда
		СсылкаУведОбОтгрузке = НайтиДокументПоИдентификатору(ОбщегоНазначенияИСМПТКВызовСервера.ИмяДокументаУведомлениеОбОтгрузкеЕАЭСИСМПТК(), Объект.ИдентификаторДокументаОтгрузки);
	Иначе
		СсылкаУведОбОтгрузке = НайтиДокументПоИдентификаторуОтОбратного();
	КонецЕсли;
	СформироватьПредставлениеСвязанногоДокумента(ЭтаФорма, СсылкаУведОбОтгрузке, "ПредставлениеУведОбОтгрузке");
	
	УправлениеФормой();
	
КонецПроцедуры

&НаСервере
Функция НайтиДокументПоИдентификатору(ИмяДокумента, ИдентификаторДокумента)
	
	Возврат РаботаСДокументамиИСМПТК.НайтиДокументПоИдентификаторуДляУстановкиСвязи(ИмяДокумента, ИдентификаторДокумента);
	
КонецФункции 

&НаСервере
Функция НайтиДокументПоИдентификаторуОтОбратного()
	
	СтруктураДанныхДляПоиска = РаботаСДокументамиИСМПТК.ПолучитьПустуюСтруктураДляПоискаДокументаПоИдентификаторуОтОбратного();
	
	СтруктураДанныхДляПоиска.ИдентификаторДокумента = Объект.Идентификатор;
	СтруктураДанныхДляПоиска.ИмяДокументаДляЗапроса = ОбщегоНазначенияИСМПТКВызовСервера.ИмяДокументаУведомлениеОбОтгрузкеЕАЭСИСМПТК();
	СтруктураДанныхДляПоиска.ОтборПоВидуДокумента   = Ложь;
	СтруктураДанныхДляПоиска.ИмяРеквизитаИдентификатора 	= "ИдентификаторУведОПриемке";
	СтруктураДанныхДляПоиска.НаправлениеДокументаДляЗапроса = ПредопределенноеЗначение("Перечисление.НаправленияДокументовИСМПТК.Входящий");

	Возврат РаботаСДокументамиИСМПТК.НайтиСвязанныйДокументПоИдентификаторуОтОбратного(СтруктураДанныхДляПоиска);
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура СформироватьПредставлениеСвязанногоДокумента(Форма, СсылкаДокумент, ИмяЭлемента)
	
	Если ЗначениеЗаполнено(СсылкаДокумент) Тогда
		Форма[ИмяЭлемента] = СсылкаДокумент;
		Форма.Элементы[ИмяЭлемента].ЦветТекста = ОбщегоНазначенияИСМПТККлиентСервер.ЦветСиний();
	Иначе
		Форма[ИмяЭлемента] = РаботаСТекстамиИСМПТККлиентСервер.ПредставлениеНеНайден();
		Форма.Элементы[ИмяЭлемента].ЦветТекста = ОбщегоНазначенияИСМПТККлиентСервер.ЦветКрасный();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеУведОбОтгрузкеНажатие(Элемент, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(ПредставлениеУведОбОтгрузке) Тогда
		СтандартнаяОбработка = Ложь;
		ПоказатьЗначение(, СсылкаУведОбОтгрузке);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ПодключаемыеКоманды

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	
	ОбщегоНазначенияИСМПТККлиентПереопределяемый.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
	
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат) Экспорт
	
	ОбщегоНазначенияИСМПТКПереопределяемый.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	
	ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.ОбновитьКоманды(ЭтотОбъект, Объект);
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти