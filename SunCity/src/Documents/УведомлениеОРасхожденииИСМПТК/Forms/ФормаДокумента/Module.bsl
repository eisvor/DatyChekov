
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	СобытияФормИСМПТКПереопределяемый.ПриСозданииНаСервере_НастроитьПодключаемоеОборудование(ЭтаФорма);
    СобытияФормИСМПТКПереопределяемый.ПриСозданииНаСервере(ЭтотОбъект, Отказ, СтандартнаяОбработка);
	
	Если Параметры.Ключ.Пустая() Тогда
		ПодготовитьФормуНаСервере();
		ИнтерфейсИСМПТК.УстановитьЗаголовокФормыДокумента(Строка(Объект.ВидОперации), Объект.Ссылка, ЭтаФорма);
		Объект.НомерИСМПТ = "";
	КонецЕсли;
		
	УправлениеФормой();

КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	СформироватьДеревоКодовМаркировки();
	ЗаполнитьСведенияОСвязанныхДокументах();
	УправлениеФормой();
	
	СобытияФормИСМПТККлиентПереопределяемый.ПриОткрытии(ЭтотОбъект, Отказ);
	
	ОбщегоНазначенияИСМПТККлиентПереопределяемый.НачатьОбновлениеКоманд(ЭтотОбъект);
	ОбщегоНазначенияИСМПТККлиентПереопределяемый.НачатьПодключениеОборудованиеПриОткрытииФормы(ЭтаФорма, "СканерШтрихкода");
		
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	Если НЕ ЗавершениеРаботы И ИспользуютсяСканерыШтрихкода Тогда
		ОбщегоНазначенияИСМПТККлиентПереопределяемый.НачатьОтключениеОборудованиеПриЗакрытииФормы(Неопределено, ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	СобытияФормИСМПТКПереопределяемый.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	ПодготовитьФормуНаСервере();
	ИнтерфейсИСМПТК.УстановитьЗаголовокФормыДокумента(Строка(Объект.ВидОперации), Объект.Ссылка, ЭтаФорма);
	СобытияФормИСМПТКПереопределяемый.ПриЧтенииНаСервере(ТекущийОбъект, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	СобытияФормИСМПТККлиентПереопределяемый.ПослеЗаписи(ЭтаФорма, ПараметрыЗаписи);
	ИнтеграцияИСМПТККлиент.ОповеститьФормы(РаботаСДокументамиИСМПТККлиентСервер.ИмяСобытияЗаписьУведомлениеОРасхождении());
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	УправлениеФормой();
	ИнтерфейсИСМПТК.УстановитьЗаголовокФормыДокумента(Строка(Объект.ВидОперации), Объект.Ссылка, ЭтаФорма);
	СобытияФормИСМПТКПереопределяемый.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = РаботаСДокументамиИСМПТККлиентСервер.ИмяСобытияЗаписьУведомлениеОРасхождении() Тогда
		
		Если Не Объект.Ссылка.Пустая() Тогда
			ЭтаФорма.Прочитать();
		КонецЕсли;
		СформироватьДеревоКодовМаркировки();
		ЗаполнитьСведенияОСвязанныхДокументах();
		
	ИначеЕсли ИмяСобытия = РаботаСДокументамиИСМПТККлиентСервер.ИмяСобытияЗаписьАктПриемаПередачи() Тогда
		
		Если Не Объект.Ссылка.Пустая() Тогда
			ЭтаФорма.Прочитать();
		КонецЕсли;
		ЗаполнитьСведенияОСвязанныхДокументах();
				
	ИначеЕсли Источник = "ПодключаемоеОборудование" И ВводДоступен() Тогда
		Если ИмяСобытия = "ScanData" Тогда
			ОбработкаСобытияСканераОбщая();
		КонецЕсли;
		
	ИначеЕсли ИмяСобытия = "Отвязать_УОР" Тогда
		ЭтаФорма.Прочитать();
		
	Иначе			
		РаботаСДокументамиИСМПТККлиентПереопределяемый.ОбработкаОповещенияДокументыИСМПТ(ЭтаФорма, Объект.Ссылка, ИмяСобытия, Параметр, Источник);		
	КонецЕсли;
	
	СобытияФормИСМПТККлиентПереопределяемый.ОбработкаОповещения(ЭтотОбъект, ИмяСобытия, Параметр, Источник);
	УправлениеФормой();
	
КонецПроцедуры

&НаКлиенте
Процедура ВнешнееСобытие(Источник, Событие, Данные)
	
	Если Не СобытияФормИСМПТККлиентПереопределяемый.ОбрабатыватьВнешнееСобытиеТО() Тогда 
		Возврат;
	КонецЕсли;
	
	Параметр = Новый Массив;
	Параметр.Добавить(Данные);
	Параметр.Добавить(Неопределено);
	
	Если ВводДоступен() Тогда
		Если Событие = "Штрихкод" ИЛИ Событие = "ПолученШтрихкод" Тогда
			ОбработкаСобытияСканераОбщая();
		КонецЕсли;
	Иначе
		РаботаСДокументамиИСМПТККлиентПереопределяемый.ОбработкаОповещенияДокументыИСМПТ(ЭтаФорма, Объект.Ссылка, Событие, Параметр, Источник);		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаСобытияСканераОбщая()
	
	Если Объект.Направление = ПредопределенноеЗначение("Перечисление.НаправленияДокументовИСМПТК.Исходящий") Тогда 
		ТекстСообщения = НСтр("ru = 'Корректировка кодов идентификации в Уведомлении невозможна! Воспользуйтесь формой сверки во входящем Акте.'");
		ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
	Иначе
		ТекстСообщения = НСтр("ru = 'Корректировка кодов идентификации во входящем документе невозможна.'");
		ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

#Область СостояниеДокумента

&НаСервере
Процедура СформироватьПредставлениеСостояния()
	
	Если Объект.Направление = Перечисления.НаправленияДокументовИСМПТК.Исходящий
		И Объект.Состояние = Перечисления.СостоянияДокументовИСМПТК.Сформирован Тогда
		
		ПредставлениеСостояния = НСтр("ru = 'Документ готов к отправке получателю через ИС МПТ'");
		
	ИначеЕсли Объект.Направление = Перечисления.НаправленияДокументовИСМПТК.Исходящий
		И (Объект.Состояние = Перечисления.СостоянияДокументовИСМПТК.ПринятСервером
		ИЛИ Объект.Состояние = Перечисления.СостоянияДокументовИСМПТК.ДоставленПолучателю)Тогда
		
		ПредставлениеСостояния = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияДокументУспешноПринятСерверомИСМПТ();
		
	ИначеЕсли Объект.Состояние = Перечисления.СостоянияДокументовИСМПТК.ОбрабатываетсяСервером Тогда
		
		ПредставлениеСостояния = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияДокументОбрабатываетсяСерверомИСМПТ();
		
	ИначеЕсли Объект.Состояние = Перечисления.СостоянияДокументовИСМПТК.ОтклоненСервером Тогда
		
		ПредставлениеСостояния = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияДокументОтклоненСерверомИСМПТ();
		
	ИначеЕсли Объект.Состояние = Перечисления.СостоянияДокументовИСМПТК.Отозван
		ИЛИ Объект.Состояние = Перечисления.СостоянияДокументовИСМПТК.Аннулирован Тогда
		
		ПредставлениеСостояния = НСтр("ru = 'Документ %Состояние%'");
		ПредставлениеСостояния = СтрЗаменить(ПредставлениеСостояния, "%Состояние%", НРег(Объект.Состояние));
	
	Иначе
		
		Если Объект.Ссылка.Пустая() Тогда
			ПредставлениеСостояния = НСтр("ru = 'Новый документ'");
		Иначе
			ПредставлениеСостояния = НСтр("ru = 'Документ %Состояние%'");
			ПредставлениеСостояния = СтрЗаменить(ПредставлениеСостояния, "%Состояние%", НРег(Объект.Состояние));
		КонецЕсли;
		
	КонецЕсли;
	
	Элементы.ПредставлениеСостояния.ЦветТекста = ОбщегоНазначенияИСМПТККлиентСервер.ЦветСостояния(Объект.Состояние);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеСостоянияНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если Объект.Направление = ПредопределенноеЗначение("Перечисление.НаправленияДокументовИСМПТК.Исходящий")
		И Объект.Состояние = ПредопределенноеЗначение("Перечисление.СостоянияДокументовИСМПТК.Сформирован") Тогда
		
		ОтправитьПолучателюЗаписьФормы = Новый ОписаниеОповещения("ОтправитьПолучателюЗаписьФормы", ЭтаФорма);
		ТекстВопроса = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияВопросОтправитьДокументПолучателю();
		ПоказатьВопрос(ОтправитьПолучателюЗаписьФормы, ТекстВопроса, РежимДиалогаВопрос.ОКОтмена);
		
	ИначеЕсли Объект.Состояние = ПредопределенноеЗначение("Перечисление.СостоянияДокументовИСМПТК.ОбрабатываетсяСервером") Тогда	
		
		ОбновитьНаСервереЗавершение = Новый ОписаниеОповещения("ОбновитьНаСервереЗавершение", ЭтаФорма);
		ПоказатьВопрос(ОбновитьНаСервереЗавершение, РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияВопросПолучитьРезультатОбработкиДокументаССервераИСМПТ(), РежимДиалогаВопрос.ОКОтмена);
		
	Иначе
		
		ПоказатьПредупреждение(, ПредставлениеСостояния);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьПолучателюЗаписьФормы(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.ОК Тогда
		Если Объект.Ссылка.Пустая() ИЛИ ЭтаФорма.Модифицированность Тогда
			ОтправитьПолучателюЗавершение = Новый ОписаниеОповещения("ОтправитьПолучателюЗавершение", ЭтаФорма);	
			ИнтеграцияИСМПТККлиент.ВопросЗаписатьОбъектПередВыполнением(ОтправитьПолучателюЗавершение);
		Иначе
			ОтправитьПолучателюЗавершение(КодВозвратаДиалога.ОК, Неопределено);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьПолучателюЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.ОК Тогда
		Если ИнтеграцияИСМПТККлиент.ОбъектЗаписан(ЭтаФорма) Тогда
			МассивУОР = Новый Массив;
			МассивУОР.Добавить(Объект.Ссылка);
			ИнтеграцияИСМПТККлиент.ОтправитьИсходящиеДокументыИСМПТ(МассивУОР, Новый Структура("ЗапускатьФоновоеЗадание", Ложь));
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьНаСервереЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.ОК Тогда
		Если ИнтеграцияИСМПТККлиент.ОбъектЗаписан(ЭтаФорма) Тогда
			МассивУОР = Новый Массив;
			МассивУОР.Добавить(Объект.Ссылка);
			ИнтеграцияИСМПТККлиент.ОбновитьДокументыИзИСМПТ(МассивУОР, Новый Структура("ЗапускатьФоновоеЗадание, ТолькоОбновитьСтатус", Ложь, Истина));
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура КомментарийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СобытияФормИСМПТККлиентПереопределяемый.ПоказатьФормуРедактированияКомментария(Элемент.ТекстРедактирования, ЭтотОбъект, "Объект.Комментарий");

КонецПроцедуры

&НаКлиенте
Процедура ВидОперацииПриИзменении(Элемент)
	
	УправлениеФормой();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьЗначенияПоОрганизации()
	
	Если Объект.Направление = ПредопределенноеЗначение("Перечисление.НаправленияДокументовИСМПТК.Входящий") Тогда
		
		Объект.Получатель = Объект.Организация;
		СтруктураДанных = ПолучитьРеквизитыОрганизацииКонтрагента(Объект.Получатель, "Получатель");
		ЗаполнитьЗначенияСвойств(Объект, СтруктураДанных, "ПолучательИдентификационныйНомер, ПолучательНаименование");
				
	ИначеЕсли Объект.Направление = ПредопределенноеЗначение("Перечисление.НаправленияДокументовИСМПТК.Исходящий") Тогда
		
		Объект.Поставщик = Объект.Организация;
		СтруктураДанных = ПолучитьРеквизитыОрганизацииКонтрагента(Объект.Поставщик, "Поставщик");
		ЗаполнитьЗначенияСвойств(Объект, СтруктураДанных, "ПоставщикИдентификационныйНомер, ПоставщикНаименование");
				
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.Направление) Тогда
		ЗаполнитьЗначенияПоОрганизации();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоставщикПриИзменении(Элемент)
	
	Если Объект.Направление = ПредопределенноеЗначение("Перечисление.НаправленияДокументовИСМПТК.Входящий")
		И Не ЗначениеЗаполнено(Объект.Поставщик) Тогда 
		Объект.Контрагент = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучательПриИзменении(Элемент)
	
	Если Объект.Направление = ПредопределенноеЗначение("Перечисление.НаправленияДокументовИСМПТК.Исходящий")
		И Не ЗначениеЗаполнено(Объект.Получатель) Тогда 
		Объект.Контрагент = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицФормы

#Область Марки

&НаКлиенте
Процедура ДеревоМаркированнойПродукцииПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Отказ = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоМаркировкиПередУдалением(Элемент, Отказ)
	
	Отказ = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоМаркированнойПродукцииНачалоПеретаскивания(Элемент, ПараметрыПеретаскивания, Выполнение)
	
	Выполнение = Ложь;
	
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура СвернутьВсеДерево(Команда)
	
	СвернутьРазвернутьДеревоКодов(ДеревоМаркированнойПродукции.ПолучитьЭлементы(), Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура РазвернутьВсеДерево(Команда)
	
	СвернутьРазвернутьДеревоКодов(ДеревоМаркированнойПродукции.ПолучитьЭлементы(), Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура СвернутьРазвернутьДеревоКодов(ДервероЭлементов, Развернуть)
	
	Для Каждого Элемент Из ДервероЭлементов Цикл
		
		ВложенныеЭлементы = Элемент.ПолучитьЭлементы();
		
        Если ВложенныеЭлементы.Количество() > 0 Тогда
			
			СвернутьРазвернутьДеревоКодов(ВложенныеЭлементы, Развернуть);

            Если Развернуть = Истина Тогда
                Элементы.ДеревоМаркированнойПродукции.Развернуть(Элемент.ПолучитьИдентификатор());
            Иначе
                Элементы.ДеревоМаркированнойПродукции.Свернуть(Элемент.ПолучитьИдентификатор());
			КонецЕсли;
			
        КонецЕсли;
    КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаСервере
Функция ПолучитьПредставлениеАктаПриемаПередачи() 
	
	Возврат Метаданные.Документы.АктПриемаПередачиИСМПТК.Представление();
	
КонецФункции

&НаКлиенте
Процедура ДокументОснованиеСоздать(Команда)
	
	ТекстВопроса = "";
	Если НЕ ЗначениеЗаполнено(ЭтаФорма.Параметры.Ключ) ИЛИ ЭтаФорма.Модифицированность Тогда
		ТекстВопроса = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияНельзяВводитьНовыйДокументБезЗаписиОснованияСПараметром()
					 + Символы.ПС 
					 + РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияВопросЗаписатьДокумент();
		ТекстВопроса = СтрЗаменить(ТекстВопроса, "%НаименованиеДокумента%", ПолучитьПредставлениеАктаПриемаПередачи());
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекстВопроса) Тогда
		ДополнительныеПараметры = Новый Структура("Форма", ЭтаФорма);
		Режим 	   = РежимДиалогаВопрос.ДаНет;
		Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВопросаЗаписьПриСозданииАПП", ЭтотОбъект, ДополнительныеПараметры);
		ПоказатьВопрос(Оповещение, ТекстВопроса, Режим, 0);
	Иначе
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Основание", Объект.Ссылка);
		ОткрытьФорму("Документ.АктПриемаПередачиИСМПТК.ФормаОбъекта", ПараметрыФормы);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияВопросаЗаписьПриСозданииАПП(Результат, Параметры) Экспорт

	Если Результат = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	Форма = Параметры.Форма;
	
	Попытка
		ПараметрыЗаписи = Новый Структура("РежимЗаписи", РежимЗаписиДокумента.Запись);
		Если Форма.Записать(ПараметрыЗаписи) Тогда
			ПараметрыФормы = Новый Структура;
			ПараметрыФормы.Вставить("Основание", Объект.Ссылка);
			ОткрытьФорму("Документ.АктПриемаПередачиИСМПТК.ФормаОбъекта", ПараметрыФормы);
		КонецЕсли;
	Исключение
		
		ТекстСообщения = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияНеУдалосьЗаписатьДокументМаркировки();
			ТекстСообщения = ТекстСообщения
			 			   + Символы.ПС
						   + КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения, , , "Форма.Объект");
		
	КонецПопытки;                          

КонецПроцедуры

&НаКлиенте
Процедура ПоискПоШтрихкодуВыполнить(Команда)
	
	ОчиститьСообщения();
	Оповещение = Новый ОписаниеОповещения("ПоискПоШтрихкодуЗавершение", ЭтотОбъект);
	СобытияФормИСМПТККлиент.ПоказатьВводШтрихкода(Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьДанныеПоКоличествуГрупповыхУпаковок(Команда)
	
	ЗавершениеПолучитьДанныеПоГрупповымКодамМаркировки = Новый ОписаниеОповещения("ЗавершениеПолучитьДанныеПоГрупповымКодамМаркировки", ЭтаФорма);
	ПолучитьКлючАвторизации(ЗавершениеПолучитьДанныеПоГрупповымКодамМаркировки);
	
КонецПроцедуры

&НаСервере
Процедура ЗавершениеПолучитьДанныеПоГрупповымКодамМаркировки(РезультатВыполнения, Параметры) Экспорт
	
	НеОтправлен = Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыДокументовИСМПТК.Черновик");
	ИнтеграцияИСМПТК.ЗавершениеПолучитьДанныеПоГрупповымКодамМаркировки_Общая(ЭтаФорма, РезультатВыполнения, Объект.Направление, НеОтправлен);
		
КонецПроцедуры

&НаКлиенте
Процедура ПоискПоШтрихкодуЗавершение(ДанныеШтрихкода, ДополнительныеПараметры) Экспорт
	
	Если Не РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйКлиентСервер.ПроверкаФорматаТранспортногоКодаПройденаУспешно(ДанныеШтрихкода) Тогда
		Возврат;
	КонецЕсли;
	
	ОбработатьКодМаркировки(ДанныеШтрихкода);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьКодыМаркировкиИзФайла(Команда)
	
	ДиалогВыбораФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	ДиалогВыбораФайла.Заголовок = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияЗаголовокВыборФайла();
	ДиалогВыбораФайла.Фильтр	= "CSV (Comma-Separated Values)(*.csv)|*.csv";
	ДиалогВыбораФайла.ИндексФильтра = 0;
	ДиалогВыбораФайла.ПредварительныйПросмотр = Ложь;
	ДиалогВыбораФайла.ПроверятьСуществованиеФайла = Истина;
	ДиалогВыбораФайла.МножественныйВыбор = Ложь;
	
	Оповещение = Новый ОписаниеОповещения("ЗагрузитьКодыМаркировкиИзФайлаЗавершение", ЭтотОбъект);
	ДиалогВыбораФайла.Показать(Оповещение);
		
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьКодыМаркировкиВФайл(Команда)
	
	ДиалогВыбораФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Сохранение);
	ДиалогВыбораФайла.Заголовок = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияЗаголовокВыборФайла();
	ДиалогВыбораФайла.Фильтр 	= "CSV (Comma-Separated Values)(*.csv)|*.csv";
	ДиалогВыбораФайла.ИндексФильтра = 0;
	ДиалогВыбораФайла.ПредварительныйПросмотр = Ложь;
	ДиалогВыбораФайла.ПроверятьСуществованиеФайла = Истина;
	ДиалогВыбораФайла.МножественныйВыбор = Ложь;
	
	Оповещение = Новый ОписаниеОповещения("ВыгрузитьКодыМаркировкиИзФайлаЗавершение", ЭтотОбъект);
	ДиалогВыбораФайла.Показать(Оповещение);
		
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьДанныеВExcel(Команда)
	
	ДиалогВыбораФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Сохранение);
	ДиалогВыбораФайла.Заголовок 	= РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияЗаголовокВыборФайла();
	ДиалогВыбораФайла.Фильтр 		= "Все поддерживаемые форматы файлов(*.xls;*.xlsx;)|*.xls;*.xlsx;|Книга Excel 97 (*.xls)|*.xls|Книга Excel 2007 (*.xlsx)|*.xlsx";
	ДиалогВыбораФайла.ИндексФильтра = 0;
	ДиалогВыбораФайла.ПредварительныйПросмотр 	  = Ложь;
	ДиалогВыбораФайла.ПроверятьСуществованиеФайла = Истина;
	ДиалогВыбораФайла.МножественныйВыбор 		  = Ложь;
	
	Оповещение = Новый ОписаниеОповещения("СоздатьФайлXLS", ЭтотОбъект);
	ДиалогВыбораФайла.Показать(Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьФайлXLS(ВыбранныеФайлы, ДополнительныеПараметрым) Экспорт
	
	Если Не ВыбранныеФайлы = Неопределено Тогда
		
		ТабличныйДокумент = Новый ТабличныйДокумент;
		
		Итератор = 1;
		Для Каждого СтрокаТЧ Из Объект.Марки Цикл
			
			Если Объект.Направление = ПредопределенноеЗначение("Перечисление.НаправленияДокументовИСМПТК.Входящий")
				Или Не ЗначениеЗаполнено(СтрокаТЧ.КодМаркировки) Тогда 
				КодДляЗаписи = СтрокаТЧ.КодИдентификации;
			Иначе 
				КодДляЗаписи = РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйКлиентСервер.Base64ВШтрихкод(СтрокаТЧ.КодМаркировки);
			КонецЕсли;
			
			ТабличныйДокумент.Область("R" + Формат(Итератор,"ЧГ=0") + "C1").Текст = КодДляЗаписи;
			Итератор = Итератор + 1;
		КонецЦикла;
		
		ТабличныйДокумент.Записать(ВыбранныеФайлы[0], ТипФайлаТабличногоДокумента.XLS97);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура УправлениеФормой()
	
	НеОтправлен = Объект.Статус 	 = ПредопределенноеЗначение("Перечисление.СтатусыДокументовИСМПТК.Черновик");
	Исходящий   = Объект.Направление = ПредопределенноеЗначение("Перечисление.НаправленияДокументовИСМПТК.Исходящий");
	Входящий 	= Объект.Направление = ПредопределенноеЗначение("Перечисление.НаправленияДокументовИСМПТК.Входящий");
	
	ОбщегоНазначенияИСМПТККлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "Ошибки", "Видимость", ?(Объект.Ошибки.Количество() = 0, Ложь, Истина));
	
	ОбщегоНазначенияИСМПТККлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ДеревоМаркированнойПродукцииКоличествоПодобранно", "ТолькоПросмотр", Входящий);
				
	ОбщегоНазначенияИСМПТККлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ДеревоМаркированнойПродукцииЗаполнитьДанныеПоКоличествуГрупповыхУпаковок", 
																	   "Доступность", Исходящий И НеОтправлен);
	
	СформироватьПредставлениеСостояния();
	ИзменитьКоманднуюПанельДокумента();
	
КонецПроцедуры

&НаСервере
Процедура ПодготовитьФормуНаСервере()
			
	Если Объект.Направление.Пустая() Тогда
		Объект.Направление = ПредопределенноеЗначение("Перечисление.НаправленияДокументовИСМПТК.Исходящий");
	КонецЕсли;
	
	Если Объект.ВидОперации.Пустая() Тогда
		Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперацииИСМПТК.Реализация");
	КонецЕсли;
	
	Если Объект.Статус.Пустая() Тогда
		Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыДокументовИСМПТК.Черновик");
	КонецЕсли;

	Если ИспользоватьПодключаемоеОборудование Тогда
		ИспользуютсяСканерыШтрихкода = (ОбщегоНазначенияИСМПТКВызовСервераПереопределяемый.ОборудованиеПоПараметрам("СканерШтрихкода").Количество() > 0);
	Иначе
		ИспользуютсяСканерыШтрихкода = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьРеквизитыОрганизацииКонтрагента(Ссылка, Реквизит) Экспорт
	
	Возврат ИнтеграцияИСМПТКПереопределяемый.ПолучитьРеквизитыОрганизацииКонтрагента(Ссылка, Реквизит);
	
КонецФункции

&НаСервере
Функция СформироватьДеревоКодовМаркировки() Экспорт
	
	//Добавим группы номенклатуры
	ПустаСтруктураКМ = ПолучитьСтруктуруКодовМаркировки();
	ОчиститьДеревоКодовМаркировки();
	
	//Для Каждого ГруппаНом Из Объект.Товары Цикл
	//	ПустаСтруктураКМ.КоличествоИсточник = ГруппаНом.КоличествоИсточник;
	//	ДобавитьКодМаркировкиВДерево(ГруппаНом.Номенклатура, ПустаСтруктураКМ);
	//КонецЦикла;                                                  -
	
	СообщенияОбОшибках = Новый Соответствие();
	Для Каждого СтрокаТЧ Из Объект.Марки Цикл
		Если ЗначениеЗаполнено(СтрокаТЧ.КодИдентификации) Тогда
			
			Номенклатура = ИнтеграцияИСМПТКПереопределяемый.ПолучитьПустуюСсылкуНоменклатура();
			
			Если СтрокаТЧ.ВидУпаковки = ПредопределенноеЗначение("Перечисление.ВидыУпаковокИСМПТК.Групповая") Тогда
				//Для групповых поиск по регистру не выполняем, т.к. EAN в стркое относится к вложенному товару, а номенклатура для групповых 
				//должна заполняться по верхнему уровню, т.е. по реквизиту GTINВерхнегоУровня.
				EANВерхнегоУровня  = РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйКлиентСервер.EANПоGTIN(СтрокаТЧ.GTINВерхнегоУровня);
				ДанныеНоменклатуры = ПолучитьНоменклатуруПоШтрихкоду(EANВерхнегоУровня, СообщенияОбОшибках);
			Иначе
				ДанныеНоменклатуры = ПолучитьНоменклатуруПоШтрихкоду(СтрокаТЧ.EAN, СообщенияОбОшибках);
			КонецЕсли;
			
			Если ТипЗнч(ДанныеНоменклатуры) = Тип("Структура") Тогда
				Номенклатура = ДанныеНоменклатуры.Номенклатура;
			Иначе
				Номенклатура = ДанныеНоменклатуры;
			КонецЕсли;
			
			//Если Номенклатура не нашлась в ТЧ Товары и в регистре Штрихкоды, 
			//возможно, она была назначена в форме рдактирования транспортных упаковок без регистрации ШК.
			//Проверяем этот случай по данным строки 
			Если НЕ ЗначениеЗаполнено(Номенклатура) И ЗначениеЗаполнено(СтрокаТЧ.Номенклатура) Тогда
				Номенклатура = СтрокаТЧ.Номенклатура;
			КонецЕсли;
			
			ДобавитьКодМаркировкиВДерево(СтрокаТЧ.Номенклатура, СтрокаТЧ);
		КонецЕсли;
	КонецЦикла;
	Если Не СообщенияОбОшибках.Количество() = 0 Тогда
		Для Каждого СообщениеОшибка Из СообщенияОбОшибках Цикл 
			ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(СообщениеОшибка.Значение);
		КонецЦикла;
	КонецЕсли;
	
	Элементы.ДеревоМаркированнойПродукции.НачальноеОтображениеДерева = НачальноеОтображениеДерева.РаскрыватьВсеУровни;
	
КонецФункции

&НаСервере
Процедура ИзменитьКоличествоКодовМаркировки(КодИд, Количество) 
	
	СтрокаКИ = Объект.Марки.НайтиСтроки(Новый Структура("КодИдентификации", КодИд));
	Если Не СтрокаКИ.Количество() = 0 Тогда 
		СтрокаКИ[0].Количество = Количество;
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ИзменитьКоманднуюПанельДокумента()

	////ПРОВЕРКИ////
	МожноОтправить = Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыДокументовИСМПТК.Черновик");
	МожноОтклонить = Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыДокументовИСМПТК.ОжидаетПриемку")
				 Или Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыДокументовИСМПТК.Новое");
	////////////////
	
	Если Объект.Направление = ПредопределенноеЗначение("Перечисление.НаправленияДокументовИСМПТК.Исходящий") Тогда
		//Действия по АПИ
		ОбщегоНазначенияИСМПТККлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ФормаДокументУведомлениеОРасхожденииИСМПТКОтправить", 
																		   "Видимость", МожноОтправить);
		ОбщегоНазначенияИСМПТККлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ФормаДокументУведомлениеОРасхожденииИСМПТКОтклонить", 
																		   "Видимость", Ложь);
		//Внутренние действия
		ОбщегоНазначенияИСМПТККлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ФормаОбщаяКомандаПроверитьИСМПТК", 
																		   "Видимость", МожноОтправить);
		ОбщегоНазначенияИСМПТККлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ФормаОбщаяКомандаПерезаполнитьПоПервичномуДокументуИСМПТК",
																		   "Видимость", МожноОтправить);
		ОбщегоНазначенияИСМПТККлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ФормаАктКорректировкаСоздать", 
																	  	   "Видимость", Ложь);
	Иначе
		//Действия по АПИ
		ОбщегоНазначенияИСМПТККлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ФормаДокументУведомлениеОРасхожденииИСМПТКОтправить", 
																		   "Видимость", Ложь);
		ОбщегоНазначенияИСМПТККлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ФормаДокументУведомлениеОРасхожденииИСМПТКОтклонить", 
																		   "Видимость", МожноОтклонить);
		//Внутренние действия
		ОбщегоНазначенияИСМПТККлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ФормаОбщаяКомандаПроверитьИСМПТК", 
																		   "Видимость", Ложь);
		ОбщегоНазначенияИСМПТККлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ФормаОбщаяКомандаПерезаполнитьПоПервичномуДокументуИСМПТК",
																		   "Видимость", Ложь);
		ОбщегоНазначенияИСМПТККлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ФормаАктКорректировкаСоздать", 
																	  	   "Видимость", МожноОтклонить И Не ЗначениеЗаполнено(Объект.ИдентификаторАППИсправленный));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьКлючАвторизации(СобытиеПослеАвторизации) Экспорт
	
	ИнтерфейсИСМПТККлиент.ПолучитьКлючАвторизацииОбщая(СобытиеПослеАвторизации, Объект.Организация);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьКодыМаркировкиИзФайлаЗавершение(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	
	Если Не ВыбранныеФайлы = Неопределено Тогда
		
		ПрочитанныйФайл = Новый ТекстовыйДокумент;
		ПрочитанныйФайл.Прочитать(ВыбранныеФайлы[0]);
		
		СтруктураКода = Новый Структура("Штрихкод, Количество", "", 1);
		
		Для НомерСтроки = 1 По ПрочитанныйФайл.КоличествоСтрок() Цикл
			Штрихкод = ПрочитанныйФайл.ПолучитьСтроку(НомерСтроки);
			//Удалим нечитаемый символ который не может сериализироваться в XML 
			СтруктураКода.Штрихкод = СтрЗаменить(Штрихкод, Символ(29), "");
			ДобавитьКодМаркировкиИзФайла(СтруктураКода);
		КонецЦикла;
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьКодыМаркировкиИзФайлаЗавершение(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	
	Если Не ВыбранныеФайлы = Неопределено Тогда
		
		НовыйТекстовыйДокумент = Новый ТекстовыйДокумент;
		
		Для Каждого СтрокаТЧ Из Объект.Марки Цикл
			НовыйТекстовыйДокумент.ДобавитьСтроку(СтрокаТЧ.КодИдентификации);
		КонецЦикла;
		
		НовыйТекстовыйДокумент.Записать(ВыбранныеФайлы[0]);
		
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ДеревоМаркированнойПродукцииКоличествоПодобранноПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ДеревоМаркированнойПродукции.ТекущиеДанные;
	ИзменитьКоличествоКодовМаркировки(ТекущиеДанные.КодИдентификации, ТекущиеДанные.КоличествоПодобранно);
	
КонецПроцедуры

#КонецОбласти

#Область Штрихкодирование

&НаСервере
Процедура ОчиститьДеревокодовМаркировки() 
	
	Дерево = РеквизитФормыВЗначение("ДеревоМаркированнойПродукции");
	Дерево.Строки.Очистить();
	ЗначениеВРеквизитФормы(Дерево, "ДеревоМаркированнойПродукции");
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьНовуюНоменклатуру(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.ОК Тогда
		
		Если Не ДополнительныеПараметры.СтруктураКодовМаркировки.ВидУпаковки = ПредопределенноеЗначение("Перечисление.ВидыУпаковокИСМПТК.Потребительская") Тогда 
			
			ПараметрыОткрытияФормы = Новый Структура("Номенклатура, СтруктураКодовМаркировки, Организация, ИнФСистема", 
													 ДополнительныеПараметры.Номенклатура, 
													 ДополнительныеПараметры.СтруктураКодовМаркировки, 
													 Объект.Организация, 
													 "ИСМПТ");
			
			ОткрытьФорму(
			"ОбщаяФорма.ФормаУточненияДанныхИСМПТК",
			ПараметрыОткрытияФормы, ЭтотОбъект,,,,
			Новый ОписаниеОповещения("ЗавершитьДобавлениеКодаМаркировки", ЭтотОбъект), РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
			
		Иначе 
			
			СтруктураКодовМаркировки = ДополнительныеПараметры.СтруктураКодовМаркировки;
			Номенклатура			 = ДополнительныеПараметры.Номенклатура;
			ДобавитьКодМаркировкиВДерево(Номенклатура, СтруктураКодовМаркировки);
			
			НоваяСтрока = Объект.Марки.Добавить();
			НоваяСтрока.КодМаркировки 	 = СтруктураКодовМаркировки.КодМаркировки;
			НоваяСтрока.КодИдентификации = СтруктураКодовМаркировки.КодИдентификации;
			НоваяСтрока.GTIN 			 = СтруктураКодовМаркировки.GTIN;
			Если СтруктураКодовМаркировки.ВидУпаковки = ПредопределенноеЗначение("Перечисление.ВидыУпаковокИСМПТК.Групповая") Тогда 
				НоваяСтрока.GTINВерхнегоУровня 	= СтруктураКодовМаркировки.GTINВерхнегоУровня;
			КонецЕсли;
			НоваяСтрока.EAN 		 = СтруктураКодовМаркировки.EAN;
			НоваяСтрока.Номенклатура = Номенклатура;
			НоваяСтрока.Количество 	 = СтруктураКодовМаркировки.Количество;
			НоваяСтрока.ВидУпаковки	 = СтруктураКодовМаркировки.ВидУпаковки;
			НоваяСтрока.ВидПродукции = СтруктураКодовМаркировки.ВидПродукции;
			
			Для Каждого Строка ИЗ ДеревоМаркированнойПродукции.ПолучитьЭлементы() Цикл
				Элементы.ДеревоМаркированнойПродукции.Развернуть(Строка.ПолучитьИдентификатор(), Истина);
			КонецЦикла;
			
			Модифицированность = Истина;
			
		КонецЕсли;
	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьКодМаркировки(ИсходныеДанные, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если ИсходныеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	//Для передачи на сервер КМ, в составе которого есть символы GS (29), требуется дополнительное кодирование
	РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйКлиентСервер.ЗакодироватьШтрихкодДанныхBase64(ИсходныеДанные);
	ИсходныеДанные.Вставить("ФорматBase64", Истина);
	СтруктураКодовМаркировки = ИнтеграцияИСМПТКВызовСервера.ПолучитьКодыМаркировки(ИсходныеДанные);   
	
	//Если удалось разобрать код, вернется структура. Если нет - текст сообщения об ошибке.
	Если ТипЗнч(СтруктураКодовМаркировки) = Тип("Строка") Тогда
		ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(СтруктураКодовМаркировки);
		Возврат;
	КонецЕсли;
	
	Если Не НайтиПоКодуИдентификации(СтруктураКодовМаркировки.КодИдентификации) = Неопределено Тогда 
		
		ПараметрыОткрытия = СобытияФормИСМПТККлиент.ПараметрыОткрытияФормыНевозможностиДобавленияОтсканированного();
		ПараметрыОткрытия.Штрихкод    = ИсходныеДанные.Штрихкод;
		ПараметрыОткрытия.ТекстОшибки = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияКодМаркировкиУказанВДокументе();
		ОткрытьФорму(ОбщегоНазначенияИСМПТККлиент.ПолучитьИмяФормыИнформацияОНевозможностиДобавленияКМ(), ПараметрыОткрытия, ЭтаФорма);
		Возврат;
		
	КонецЕсли;
	
	Если Не СтруктураКодовМаркировки = Неопределено Тогда
		Если Не СтруктураКодовМаркировки.ВидУпаковки = ПредопределенноеЗначение("Перечисление.ВидыУпаковокИСМПТК.Потребительская") Тогда 
			//Проверяем, включено ли автоматическое получение данных с сервера по групповым упаковкам
			Если ИнтеграцияИСМПТКВызовСервера.ИспользоватьАвтоОпределениеЛогистическихКодовИСМПТК() Тогда
				ДобавитьНовыйЛогистическийКод(СтруктураКодовМаркировки); //Заполняем автоматически с сервера
			Иначе
				//Даем возможность указать данные вручную
				ПараметрыОткрытияФормы = Новый Структура("Номенклатура, СтруктураКодовМаркировки, Организация, ИнФСистема", 
														 ИнтеграцияИСМПТКПереопределяемый.ПолучитьПустуюСсылкуНоменклатура(), 
														 СтруктураКодовМаркировки, 
														 Объект.Организация, 
														 "ИСМПТ");
				ОткрытьФорму("ОбщаяФорма.ФормаУточненияДанныхИСМПТК", ПараметрыОткрытияФормы, ЭтотОбъект,,,, Новый ОписаниеОповещения("ЗавершитьДобавлениеКодаМаркировки", ЭтотОбъект), РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
			КонецЕсли;
		Иначе
			//Для потребительских заполняем напрямую
			ДобавитьНовыйКод(СтруктураКодовМаркировки);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция НайтиПоКодуИдентификации(КодИдентификации)
	
	СтруктураПоиска = Новый Структура("КодИдентификации", КодИдентификации);
	
	НайденныеСтроки = Объект.Марки.НайтиСтроки(СтруктураПоиска);
	
	Если НайденныеСтроки.Количество() > 0 Тогда
		Возврат НайденныеСтроки;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура ДобавитьНовыйКод(СтруктураКодовМаркировки)
	
	СообщенияОбОшибках = Новый Соответствие();
	ДанныеНоменклатуры = ПолучитьНоменклатуруПоШтрихкоду(СтруктураКодовМаркировки.EAN, СообщенияОбОшибках);
	Если ТипЗнч(ДанныеНоменклатуры) = Тип("Структура") Тогда
		Номенклатура = ДанныеНоменклатуры.Номенклатура;
	Иначе
		Номенклатура = ДанныеНоменклатуры;
	КонецЕсли;
	Если Не СообщенияОбОшибках.Количество() = 0 Тогда
		Для Каждого СообщениеОшибка Из СообщенияОбОшибках Цикл 
			ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(СообщениеОшибка.Значение);
		КонецЦикла;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Номенклатура) Тогда
		
		ТекстОшибки = НСтр("ru = 'Не найден элемент справочника Номенклатура, соответствующий введённому штрихкоду.'");
		ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстОшибки,,, "ДеревоМаркированнойПродукции");
		Возврат;
		
	ИначеЕсли Объект.Марки.НайтиСтроки(Новый Структура("Номенклатура", Номенклатура)).Количество() = 0 Тогда 
		
		ТекстВопроса = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияЭтогоТовараНетВДокументеОснования()
					 + Символы.ПС
					 + РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияВопросДобавитьКМВДокумент();
		ТекстВопроса = ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(ТекстВопроса, Номенклатура);
		
		ИзменитьДокументОснованиеЗавершение = Новый ОписаниеОповещения("ДобавитьНовуюНоменклатуру", ЭтаФорма, Новый Структура("СтруктураКодовМаркировки, Номенклатура", СтруктураКодовМаркировки, Номенклатура));
		ПоказатьВопрос(ИзменитьДокументОснованиеЗавершение, ТекстВопроса, РежимДиалогаВопрос.ОКОтмена);
		
		Возврат;
		
	Иначе
		
		СтруктураКодовМаркировки.Вставить("Номенклатура", Номенклатура);
		ЗавершитьДобавлениеКодаМаркировки(СтруктураКодовМаркировки);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьНовыйЛогистическийКод(СтруктураКодовМаркировки)
	
	ЗавершениеПолучитьДанныеПоГрупповомуКодуМаркировки = Новый ОписаниеОповещения("ЗавершениеПолучитьДанныеПоГрупповомуКодуМаркировки", ЭтаФорма, СтруктураКодовМаркировки);
	ПолучитьКлючАвторизации(ЗавершениеПолучитьДанныеПоГрупповомуКодуМаркировки);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершениеПолучитьДанныеПоГрупповомуКодуМаркировки(РезультатВыполнения, Параметры) Экспорт
	
	ИнтеграцияИСМПТККлиент.ЗавершениеПолучитьДанныеПоГрупповомуКодуМаркировки_Общая(ЭтаФорма, РезультатВыполнения, Параметры);
		
КонецПроцедуры

&НаКлиенте
Процедура ЗавершитьДобавлениеКодаМаркировки(СтруктураКодовМаркировки = Неопределено, ПараметрКоманды = Неопределено) Экспорт
	
	Если Не СтруктураКодовМаркировки = Неопределено Тогда 
		
		ДобавитьКодМаркировкиВДерево(СтруктураКодовМаркировки.Номенклатура, СтруктураКодовМаркировки);
		
		НоваяСтрока = Объект.Марки.Добавить();
		НоваяСтрока.КодМаркировки 	 = СтруктураКодовМаркировки.КодМаркировки;
		НоваяСтрока.КодИдентификации = СтруктураКодовМаркировки.КодИдентификации;
		НоваяСтрока.GTIN 			 = СтруктураКодовМаркировки.GTIN;
		Если СтруктураКодовМаркировки.ВидУпаковки = ПредопределенноеЗначение("Перечисление.ВидыУпаковокИСМПТК.Групповая") Тогда 
			НоваяСтрока.GTINВерхнегоУровня = СтруктураКодовМаркировки.GTINВерхнегоУровня;
		КонецЕсли;
		НоваяСтрока.EAN 		 = СтруктураКодовМаркировки.EAN;
		НоваяСтрока.Номенклатура = СтруктураКодовМаркировки.Номенклатура;
		НоваяСтрока.Количество 	 = СтруктураКодовМаркировки.Количество;
		НоваяСтрока.ВидУпаковки	 = СтруктураКодовМаркировки.ВидУпаковки;
		НоваяСтрока.ВидПродукции = СтруктураКодовМаркировки.ВидПродукции;
				
		Для Каждого Строка ИЗ ДеревоМаркированнойПродукции.ПолучитьЭлементы() Цикл
			Элементы.ДеревоМаркированнойПродукции.Развернуть(Строка.ПолучитьИдентификатор(), Истина);
		КонецЦикла;
		
		Модифицированность = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
функция ПолучитьНоменклатуруПоШтрихкоду(EAN, СообщенияОбОшибках = Неопределено)
	
	Если СообщенияОбОшибках = Неопределено Тогда
		СообщенияОбОшибках = Новый Соответствие();
	КонецЕсли;
	
	Возврат ОбщегоНазначенияИСМПТКПереопределяемый.ПолучитьДанныеНоменклатурыИзРегистраШтрихкодовПоШтрихкоду(, EAN,,СообщенияОбОшибках);
	
КонецФункции

&НаСервере
Процедура ДобавитьКодМаркировкиВДерево(Номенклатура, СтруктураКодовМаркировки) Экспорт
	
	Если Номенклатура = Неопределено Тогда
		//Нужен ссылочный тип, чтобы дерево построилось корректно
		Номенклатура = ОбщегоНазначенияИСМПТКПереопределяемый.ПолучитьПустуюСсылкуНоменклатура();
	КонецЕсли;
	
	НайденнаяСтрока = НайтиЗначениеЭлементаДереваПоНоменклатуре(Номенклатура, ДеревоМаркированнойПродукции);
	
	Если Не НайденнаяСтрока = Неопределено Тогда
		
		Если СтруктураКодовМаркировки.ВидУпаковки = Перечисления.ВидыУпаковокИСМПТК.Потребительская Тогда 
			КоличествоПодобранно = 1;
		Иначе 
			КоличествоПодобранно = СтруктураКодовМаркировки.Количество;
		КонецЕсли;
		
		НоваяСтрокаКод = НайденнаяСтрока.ПолучитьЭлементы().Добавить();
		НоваяСтрокаКод.КодМаркировки 	= СтруктураКодовМаркировки.КодМаркировки;
		НоваяСтрокаКод.КодИдентификации	= СтруктураКодовМаркировки.КодИдентификации;
		НоваяСтрокаКод.GTIN 			= СтруктураКодовМаркировки.GTIN;
		Если СтруктураКодовМаркировки.ВидУпаковки = ПредопределенноеЗначение("Перечисление.ВидыУпаковокИСМПТК.Групповая") Тогда 
			НоваяСтрокаКод.GTINВерхнегоУровня = СтруктураКодовМаркировки.GTINВерхнегоУровня;
		КонецЕсли;
		НоваяСтрокаКод.Количество			 = 0;
		НоваяСтрокаКод.КоличествоПодобранно	 = КоличествоПодобранно;
		НоваяСтрокаКод.КоличествоПодобранно	 = КоличествоПодобранно;
		
		НайденнаяСтрока.КоличествоПодобранно = НайденнаяСтрока.КоличествоПодобранно + НоваяСтрокаКод.КоличествоПодобранно;
		НоваяСтрокаКод.СтатусСверкиКода 	 = СтруктураКодовМаркировки.СтатусСверкиКода;
		
		НоваяСтрокаКод.ВидУпаковки 	= СтруктураКодовМаркировки.ВидУпаковки;
		НоваяСтрокаКод.ВидПродукции = СтруктураКодовМаркировки.ВидПродукции;
				
	Иначе
		
		ЭлементыДерева = ДеревоМаркированнойПродукции.ПолучитьЭлементы();
		
		НоваяСтрокаНоменклатура = ЭлементыДерева.Добавить();
		НоваяСтрокаНоменклатура.Номенклатура = Номенклатура;
		
		Если ЗначениеЗаполнено(СтруктураКодовМаркировки.КодИдентификации) Тогда 
			НоваяСтрокаКод = НоваяСтрокаНоменклатура.ПолучитьЭлементы().Добавить();
			НоваяСтрокаКод.КодМаркировки 	= СтруктураКодовМаркировки.КодМаркировки;
			НоваяСтрокаКод.КодИдентификации = СтруктураКодовМаркировки.КодИдентификации;
			НоваяСтрокаКод.GTIN 			= СтруктураКодовМаркировки.GTIN;
			Если СтруктураКодовМаркировки.ВидУпаковки = ПредопределенноеЗначение("Перечисление.ВидыУпаковокИСМПТК.Групповая") Тогда 
				НоваяСтрокаКод.GTINВерхнегоУровня = СтруктураКодовМаркировки.GTINВерхнегоУровня;
			КонецЕсли;
			НоваяСтрокаКод.СтатусСверкиКода = СтруктураКодовМаркировки.СтатусСверкиКода;
			
			Если Не ЗначениеЗаполнено(СтруктураКодовМаркировки.Количество) Тогда 
				НоваяСтрокаКод.КоличествоПодобранно	= ?(СтруктураКодовМаркировки.ВидУпаковки = Перечисления.ВидыУпаковокИСМПТК.Потребительская, 1, 0);
			Иначе 
				НоваяСтрокаКод.КоличествоПодобранно	= СтруктураКодовМаркировки.Количество;
			КонецЕсли;
			
			НоваяСтрокаНоменклатура.КоличествоПодобранно = НоваяСтрокаКод.КоличествоПодобранно;
			
			НоваяСтрокаКод.ВидУпаковки 	= СтруктураКодовМаркировки.ВидУпаковки;
			НоваяСтрокаКод.ВидПродукции = СтруктураКодовМаркировки.ВидПродукции;
			
		КонецЕсли;
		
		НоваяСтрокаНоменклатура.ВидУпаковки = Перечисления.ВидыУпаковокИСМПТК.ПустаяСсылка();
		
		Если СтруктураКодовМаркировки.Свойство("КоличествоИсточник") Тогда 
			НоваяСтрокаНоменклатура.Количество	= СтруктураКодовМаркировки.КоличествоИсточник;
		Иначе 
			НоваяСтрокаКод.Количество = 0;
		КонецЕсли;
		ИнтерфейсИСМПТККлиентСервер.УстановитьИндексКартинкиТипаУпаковки(НоваяСтрокаНоменклатура);
		
	КонецЕсли;
	
	Если Не НоваяСтрокаКод = Неопределено Тогда
		ИнтерфейсИСМПТККлиентСервер.УстановитьИндексКартинкиТипаУпаковки(НоваяСтрокаКод);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция НайтиЗначениеЭлементаДереваПоНоменклатуре(Номенклатура, Дерево)
	
	НайденныйЭлемент = Неопределено;
	
	ЭлементыВетвиДерева = Дерево.ПолучитьЭлементы();
	Для Каждого ЭлементДерева Из ЭлементыВетвиДерева Цикл
		Если ЭлементДерева.Номенклатура = Номенклатура Тогда
			НайденныйЭлемент = ЭлементДерева;
		КонецЕсли;
	КонецЦикла;
	
	Возврат НайденныйЭлемент;
	
КонецФункции

&НаКлиенте
Процедура ДобавитьКодМаркировкиИзФайла(ИсходныеДанные)
	
	//Для передачи на сервер КМ, в составе которого есть символы GS (29), требуется дополнительное кодирование
	РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйКлиентСервер.ЗакодироватьШтрихкодДанныхBase64(ИсходныеДанные);
	СтруктураКодовМаркировки = ИнтеграцияИСМПТКВызовСервера.ПолучитьКодыМаркировки(ИсходныеДанные);  
	
	//Если удалось разобрать код, вернется структура. Если нет - текст сообщения об ошибке.
	Если ТипЗнч(СтруктураКодовМаркировки) = Тип("Строка") Тогда
		ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(СтруктураКодовМаркировки);
		Возврат;
	КонецЕсли;
	
	Если СтруктураКодовМаркировки.ВидУпаковки = ПредопределенноеЗначение("Перечисление.ВидыУпаковокИСМПТК.Групповая") Тогда
		//Определяем ном-ру для блоков по верхнему уровню. Если ведется учет через одну ном-ру и упаковки, товар будет тот же, что для нижнего уровня.
		//Но если это разные ном-ры (блок и пачка), то подобрать нужно именно блок.
		EANВерхнегоУровня  = РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйКлиентСервер.EANПоGTIN(СтруктураКодовМаркировки.GTINВерхнегоУровня);
		ДанныеНоменклатуры = ПолучитьНоменклатуруПоШтрихкоду(EANВерхнегоУровня);
	Иначе
		ДанныеНоменклатуры = ПолучитьНоменклатуруПоШтрихкоду(СтруктураКодовМаркировки.EAN);
	КонецЕсли;
	
	Если ТипЗнч(ДанныеНоменклатуры) = Тип("Структура") Тогда
		Номенклатура = ДанныеНоменклатуры.Номенклатура;
	Иначе
		Номенклатура = ДанныеНоменклатуры;
	КонецЕсли;
	
	ТекстОшибки = "";
	
	Если Не НайтиПоКодуИдентификации(СтруктураКодовМаркировки.КодИдентификации) = Неопределено Тогда	
		
		ТекстОшибки = НСтр("ru = 'Код маркировки %1 не был добавлен, поскольку уже присутствует в документе!'");
		ТекстОшибки = ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(ТекстОшибки, СтруктураКодовМаркировки.КодИдентификации);
		ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстОшибки,,, "ДеревоМаркированнойПродукции");
		
	ИначеЕсли Номенклатура = Неопределено Тогда 
		
		ТекстОшибки = НСтр("ru = 'Не найден элемент справочника Номенклатура, соответствующий коду маркировки %1.'");
		ТекстОшибки = ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(ТекстОшибки, СтруктураКодовМаркировки.КодИдентификации);
		ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстОшибки,,, "ДеревоМаркированнойПродукции");
		
	Иначе
		
		СтруктураКодовМаркировки.Вставить("Номенклатура", Номенклатура);
		ЗавершитьДобавлениеКодаМаркировки(СтруктураКодовМаркировки);
		
	КонецЕсли;

КонецПроцедуры

&НаСервере
Функция ПолучитьСтруктуруКодовМаркировки()
	
	СтруктураКодовМаркировки = Новый Структура;
	СтруктураКодовМаркировки.Вставить("КодМаркировки", "");
	СтруктураКодовМаркировки.Вставить("КодИдентификации", "");
	СтруктураКодовМаркировки.Вставить("GTIN", "");
	СтруктураКодовМаркировки.Вставить("КоличествоИсточник", 0);
	СтруктураКодовМаркировки.Вставить("Количество", 0);
	СтруктураКодовМаркировки.Вставить("СтатусСверкиКода", Перечисления.СтатусыСверкиКодаИСМПТК.ПустаяСсылка());
	СтруктураКодовМаркировки.Вставить("ВидУпаковки", Перечисления.ВидыУпаковокИСМПТК.ПустаяСсылка());
	
	Возврат СтруктураКодовМаркировки;
	
КонецФункции

#КонецОбласти

#Область СвязьСАктамиПриемаПередачи

&НаКлиенте
Процедура ЗаполнитьСведенияОСвязанныхДокументах()
	
	ЭтаФорма.ПредставлениеАктИсходный 	   = Неопределено;
	ЭтаФорма.ПредставлениеАктКорректировка = Неопределено;
	
	// Искать корректировочный документ имеет смысл только если текущий уже отправлен на сервер
	Если ЗначениеЗаполнено(Объект.Идентификатор) Тогда
		Если ЗначениеЗаполнено(Объект.ИдентификаторАППИсправленный) Тогда
			// Этим способом ищем связанный документ, когда в текущем документе у нас заполнен его идентификатор.
			СсылкаИсправленныйАПП = НайтиДокументПоИдентификатору(ОбщегоНазначенияИСМПТКВызовСервера.ИмяДокументаАктПриемаПередачиИСМПТК(), Объект.ИдентификаторАППИсправленный);
		Иначе
			// Этим способом ищем связанный документ, когда в текущем документе его идентификатор не заполнен, 
			// т.к. связанный документ его еще не получил (он создан в базе, но не отправлен на сервер).
			// При этом искать корректировку имеет смысл только для уже зарегситрированного АПП исходного.
			СсылкаИсправленныйАПП = НайтиДокументПоИдентификаторуОтОбратного("ИдентификаторАППИсправленный");
		КонецЕсли;
		Если Не ЗначениеЗаполнено(СсылкаИсправленныйАПП) Тогда
			СтруктураПоиска = Новый Структура("ИмяДокумента, ИмяПараметра, ВидДокумента", 
											  ОбщегоНазначенияИСМПТКВызовСервера.ИмяДокументаАктПриемаПередачиИСМПТК(),
											  "НомерИСМПТ",
											  ПредопределенноеЗначение("Перечисление.ВидыДокументаИСМПТК.Исправленный")); 
			СсылкаИсправленныйАПП = НайтиДокументПоНомеру(СтруктураПоиска);
		КонецЕсли;
		СформироватьПредставлениеСвязанногоДокумента(ЭтаФорма, СсылкаИсправленныйАПП, "ПредставлениеАктКорректировка");
	КонецЕсли;
		
	Если ЗначениеЗаполнено(Объект.ИдентификаторАПППервичный) Тогда
		СсылкаИсходныйАПП = НайтиДокументПоИдентификатору(ОбщегоНазначенияИСМПТКВызовСервера.ИмяДокументаАктПриемаПередачиИСМПТК(), Объект.ИдентификаторАПППервичный);
	Иначе
		СсылкаИсходныйАПП = НайтиДокументПоИдентификаторуОтОбратного("ИдентификаторАПППервичный");
	КонецЕсли;
	Если Не ЗначениеЗаполнено(СсылкаИсходныйАПП) Тогда
		СтруктураПоиска = Новый Структура("ИмяДокумента, ИмяПараметра, ВидДокумента", 
										  ОбщегоНазначенияИСМПТКВызовСервера.ИмяДокументаАктПриемаПередачиИСМПТК(),
										  "НомерИСМПТ",
										  ПредопределенноеЗначение("Перечисление.ВидыДокументаИСМПТК.Исходный")); 
		СсылкаИсходныйАПП = НайтиДокументПоНомеру(СтруктураПоиска);
	КонецЕсли;		
	СформироватьПредставлениеСвязанногоДокумента(ЭтаФорма, СсылкаИсходныйАПП, "ПредставлениеАктИсходный");
	
	УправлениеФормой();
	
КонецПроцедуры

&НаСервере
Функция НайтиДокументПоИдентификатору(ИмяДокумента, ИдентификаторДокумента)
	
	Возврат РаботаСДокументамиИСМПТК.НайтиДокументПоИдентификаторуДляУстановкиСвязи(ИмяДокумента, ИдентификаторДокумента);
	
КонецФункции

&НаСервере
Функция НайтиДокументПоИдентификаторуОтОбратного(ИмяРеквизитаИдентификатора)
	
	СтруктураДанныхДляПоиска = РаботаСДокументамиИСМПТК.ПолучитьПустуюСтруктураДляПоискаДокументаПоИдентификаторуОтОбратного();
	
	СтруктураДанныхДляПоиска.ОтборПоВидуДокумента		= Истина;
	СтруктураДанныхДляПоиска.ИмяДокументаДляЗапроса		= ОбщегоНазначенияИСМПТКВызовСервера.ИмяДокументаАктПриемаПередачиИСМПТК();
	СтруктураДанныхДляПоиска.ИдентификаторДокумента		= Объект.Идентификатор;
	СтруктураДанныхДляПоиска.ИмяРеквизитаИдентификатора = "ИдентификаторУведОРасхождениях";
	СтруктураДанныхДляПоиска.ИмяРеквизитаВидДокумента	= "ТипАкта";
	Если Объект.Направление = ПредопределенноеЗначение("Перечисление.НаправленияДокументовИСМПТК.Исходящий") Тогда
		СтруктураДанныхДляПоиска.НаправлениеДокументаДляЗапроса = ПредопределенноеЗначение("Перечисление.НаправленияДокументовИСМПТК.Входящий");
	Иначе
		СтруктураДанныхДляПоиска.НаправлениеДокументаДляЗапроса = ПредопределенноеЗначение("Перечисление.НаправленияДокументовИСМПТК.Исходящий");
	КонецЕсли;
	
	Если ИмяРеквизитаИдентификатора = "ИдентификаторАППИсправленный" Тогда
		СтруктураДанныхДляПоиска.ВидДокументаДляЗапроса = ПредопределенноеЗначение("Перечисление.ВидыДокументаИСМПТК.Исправленный");
	Иначе
		СтруктураДанныхДляПоиска.ВидДокументаДляЗапроса = ПредопределенноеЗначение("Перечисление.ВидыДокументаИСМПТК.Исходный");
	КонецЕсли;

	Возврат РаботаСДокументамиИСМПТК.НайтиСвязанныйДокументПоИдентификаторуОтОбратного(СтруктураДанныхДляПоиска);
	
КонецФункции

&НаСервере
Функция НайтиДокументПоНомеру(СтруктураПоиска)
	
	Возврат РаботаСДокументамиИСМПТК.НайтиДокументИСПоНомеру(Объект.РегистрационныйНомерСвязанногоАкта, СтруктураПоиска);
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура СформироватьПредставлениеСвязанногоДокумента(Форма, СсылкаДокумент, ИмяЭлемента)
	
	Если ЗначениеЗаполнено(СсылкаДокумент) Тогда
		Форма[ИмяЭлемента] = СсылкаДокумент;
		Если ОбщегоНазначенияИСМПТКВызовСервера.ЗначениеРеквизитаОбъекта(СсылкаДокумент, "ПометкаУдаления") Тогда
			Форма.Элементы[ИмяЭлемента].ЦветТекста = ОбщегоНазначенияИСМПТККлиентСервер.ЦветКрасный();
		Иначе
			Форма.Элементы[ИмяЭлемента].ЦветТекста = ОбщегоНазначенияИСМПТККлиентСервер.ЦветСиний();
		КонецЕсли;
		
		Если ИмяЭлемента = "ПредставлениеАктКорректировка" Тогда
			Форма.АктКорректировкаНомерИСМПТ = ИнтеграцияИСМПТКПереопределяемый.ЗначениеРеквизитаОбъекта(СсылкаДокумент, "НомерИСМПТ"); 
		КонецЕсли;
	Иначе
		Форма[ИмяЭлемента] = РаботаСТекстамиИСМПТККлиентСервер.ПредставлениеНеНайден();
		Форма.Элементы[ИмяЭлемента].ЦветТекста = ОбщегоНазначенияИСМПТККлиентСервер.ЦветКрасный();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеАктИсходныйНажатие(Элемент, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(ПредставлениеАктИсходный) Тогда
		СтандартнаяОбработка = Ложь;
		ПоказатьЗначение(, СсылкаИсходныйАПП);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеАктКорректировкаНажатие(Элемент, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(ПредставлениеАктКорректировка) Тогда
		СтандартнаяОбработка = Ложь;
		ПоказатьЗначение(, СсылкаИсправленныйАПП);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ПодключаемыеКоманды

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	
	ОбщегоНазначенияИСМПТККлиентПереопределяемый.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
	
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат) Экспорт
	
	ОбщегоНазначенияИСМПТКПереопределяемый.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	
	ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.ОбновитьКоманды(ЭтотОбъект, Объект);
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти