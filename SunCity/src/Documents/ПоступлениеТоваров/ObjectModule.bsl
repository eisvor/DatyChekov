#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Заполняет количество в тч Товары по фактически принятому.
Процедура ЗаполнитьТоварыПоФактическойПриемке() Экспорт
	
	ДокументОснование = ?(ЗначениеЗаполнено(ЗаказПоставщику), ЗаказПоставщику, Ссылка);
	
	ТаблицаТовары = Товары.Выгрузить();
	
	Товары.Очистить();
	СерийныеНомера.Очистить();
	
	ТЗТовары = Товары.Выгрузить();
	ТЗСерийныеНомера = СерийныеНомера.Выгрузить();
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументОснование", ДокументОснование);
	Запрос.УстановитьПараметр("ТаблицаТовары", ТаблицаТовары);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПриходныйОрдерНаТоварыТовары.Ссылка КАК Ссылка,
	|	ПриходныйОрдерНаТоварыТовары.Номенклатура КАК Номенклатура,
	|	ПриходныйОрдерНаТоварыТовары.Характеристика КАК Характеристика,
	|	ПриходныйОрдерНаТоварыТовары.Количество КАК Количество,
	|	ПриходныйОрдерНаТоварыТовары.Упаковка КАК Упаковка,
	|	ПриходныйОрдерНаТоварыТовары.КоличествоУпаковок КАК КоличествоУпаковок,
	|	ПриходныйОрдерНаТоварыТовары.КлючСвязиСерийныхНомеров КАК КлючСвязиСерийныхНомеров,
	|	ПриходныйОрдерНаТоварыТовары.Цена КАК Цена
	|ИЗ
	|	Документ.ПриходныйОрдерНаТовары.Товары КАК ПриходныйОрдерНаТоварыТовары
	|ГДЕ
	|	ПриходныйОрдерНаТоварыТовары.Ссылка.Проведен
	|	И ПриходныйОрдерНаТоварыТовары.Ссылка.ДокументОснование = &ДокументОснование
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПриходныйОрдерНаТоварыСерийныеНомера.Ссылка КАК Ссылка,
	|	ПриходныйОрдерНаТоварыСерийныеНомера.СерийныйНомер КАК СерийныйНомер,
	|	ПриходныйОрдерНаТоварыСерийныеНомера.КлючСвязиСерийныхНомеров КАК КлючСвязиСерийныхНомеров
	|ИЗ
	|	Документ.ПриходныйОрдерНаТовары.СерийныеНомера КАК ПриходныйОрдерНаТоварыСерийныеНомера
	|ГДЕ
	|	ПриходныйОрдерНаТоварыСерийныеНомера.Ссылка.ДокументОснование = &ДокументОснование
	|	И ПриходныйОрдерНаТоварыСерийныеНомера.Ссылка.Проведен
	|ИТОГИ ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаТовары.Номенклатура
	|ПОМЕСТИТЬ ТаблицаНоменклатур
	|	ИЗ &ТаблицаТовары КАК ТаблицаТовары
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаНоменклатур.Номенклатура
	|ИЗ
	|	ТаблицаНоменклатур КАК ТаблицаНоменклатур
	|ГДЕ
	|	ТаблицаНоменклатур.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Услуга)";
	
	Результат = Запрос.ВыполнитьПакет();
	
	ТоварыПоОрдерам = Результат[0].Выгрузить();
	ТоварыПоОрдерам.Колонки.Добавить("НоменклатураДобавлена");
	ТоварыПоОрдерам.ЗаполнитьЗначения( Ложь, "НоменклатураДобавлена");
	
	ВыборкаСерийныеНомера = Результат[1].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	ВыборкаУслуг = Результат[3].Выбрать();
	
	КлючСвязи = 1;
	
	Для Каждого СтрокаТовары Из ТаблицаТовары Цикл
		
		ВыборкаУслуг.Сбросить();
		Если ВыборкаУслуг.НайтиСледующий(СтрокаТовары.Номенклатура, "Номенклатура") Тогда
			НоваяСтрокаТовары = ТЗТовары.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрокаТовары, СтрокаТовары);
			Продолжить;
		КонецЕсли;
		
		СтруктураПоиска = Новый Структура(
		"Номенклатура,Характеристика,НоменклатураДобавлена",
		СтрокаТовары.Номенклатура,
		СтрокаТовары.Характеристика, Ложь);
		
		СтрокиТаблицыПоОрдерам = ТоварыПоОрдерам.НайтиСтроки(СтруктураПоиска);
		
		Если СтрокиТаблицыПоОрдерам.Количество() > 0 Тогда
			СтрокаТаблицыПоОрдерам = СтрокиТаблицыПоОрдерам[0];
			СтрокаТаблицыПоОрдерам.НоменклатураДобавлена = Истина;
			ДобавитьСтрокуПоОрдеру(ТЗТовары, ТЗСерийныеНомера, ВыборкаСерийныеНомера, СтрокаТаблицыПоОрдерам, КлючСвязи);
		КонецЕсли;
		
	КонецЦикла;
	
	СтруктураПоиска = Новый Структура("НоменклатураДобавлена", Ложь);
	НеДобавленныеСтрокиТаблицыПоОрдерам = ТоварыПоОрдерам.НайтиСтроки(СтруктураПоиска);
	
	Для Каждого СтрокаТаблицыПоОрдерам Из НеДобавленныеСтрокиТаблицыПоОрдерам Цикл
		СтрокаТаблицыПоОрдерам.НоменклатураДобавлена = Истина;
		ДобавитьСтрокуПоОрдеру(ТЗТовары, ТЗСерийныеНомера, ВыборкаСерийныеНомера, СтрокаТаблицыПоОрдерам, КлючСвязи);
	КонецЦикла;
	
	Товары.Загрузить(ТЗТовары);
	СерийныеНомера.Загрузить(ТЗСерийныеНомера);
	
	ЗапасыСервер.ЗаполнитьЦеныПоПроизвольнойТаблицеЦен(ЭтотОбъект, "Товары", ТаблицаТовары, Ложь, Ложь);
	ЗапасыСервер.ЗаполнитьЦеныПоПроизвольнойТаблицеЦен(ЭтотОбъект, "Товары", ТоварыПоОрдерам, Ложь, Ложь, Ложь);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытий

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	ПроведениеСервер.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства, РежимПроведения);
	
	Документы.ПоступлениеТоваров.ИнициализироватьДанныеДокумента(Ссылка, ДополнительныеСвойства);
	
	ПроведениеСервер.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);
	
	ЗапасыСервер.ОтразитьТоварыНаСкладах(ДополнительныеСвойства, Движения, Отказ);
	ЗапасыСервер.ОтразитьТоварыОрганизаций(ДополнительныеСвойства, Движения, Отказ);
	ЗапасыСервер.ОтразитьТоварыКПоступлению(ДополнительныеСвойства, Движения, Отказ);
	ЗапасыСервер.ОтразитьДвиженияСебестоимостьНоменклатуры(ДополнительныеСвойства, Движения, Отказ);
	ЗапасыСервер.ОтразитьДвиженияСерийныхНомеров(ДополнительныеСвойства, Движения, Отказ);
	ЗапасыСервер.ОтразитьДвиженияНоменклатураПоставщиков(ДополнительныеСвойства, Движения, Отказ);
	ЗапасыСервер.ОтразитьДвиженияСерийТоваров(ДополнительныеСвойства, Движения, Отказ);
	ЗапасыСервер.ОтразитьДвиженияСебестоимостьПоставкиТоваров(ДополнительныеСвойства, Движения, Отказ);
	ЗакупкиСервер.ОтразитьЗаказыТоваров(ДополнительныеСвойства, Движения, Отказ);
	ЗакупкиСервер.ОтразитьЗакупкиТоваров(ДополнительныеСвойства, Движения, Отказ);
	ДенежныеСредстваСервер.ОтразитьРасчетыСПоставщиками(ДополнительныеСвойства, Движения, Отказ);
	СформироватьСписокРегистровДляКонтроля();
	ПроведениеСервер.ЗаписатьНаборыЗаписей(ЭтотОбъект);
	ПроведениеСервер.ВыполнитьКонтрольРезультатовПроведения(ЭтотОбъект, Отказ);
	ПроведениеСервер.ОчиститьДополнительныеСвойстваДляПроведения(ДополнительныеСвойства);
	
	ДополнительныеСвойства.Вставить("Отказ", Отказ);
	
	Если ЗначениеЗаполнено(ЗаказПоставщику) Тогда
		ЗакупкиСервер.ОбновитьСостояниеОплатыПоступления(ЗаказПоставщику);
	Иначе
		ЗакупкиСервер.ОбновитьСостояниеОплатыПоступления(Ссылка);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Справочники.СерийныеНомера.ОчиститьВДокументеНеиспользуемыеСерийныеНомера(Товары, СерийныеНомера);
	
	ПроведениеСервер.УстановитьРежимПроведения(Проведен, РежимЗаписи, РежимПроведения);
	ОбщегоНазначенияРТ.УдалитьНеиспользуемыеСтрокиСерий(ЭтотОбъект,Документы.ПоступлениеТоваров.ПараметрыУказанияСерий(ЭтотОбъект));
	
	ДополнительныеСвойства.Вставить("ЭтоНовый",    ЭтоНовый());
	ДополнительныеСвойства.Вставить("РежимЗаписи", РежимЗаписи);
	
	ОбщегоНазначенияРТ.УстановитьНовоеЗначениеРеквизита(
		ЭтотОбъект,
		ОбработкаТабличнойЧастиТоварыКлиентСервер.СуммаДокумента(Товары, ЦенаВключаетНДС),
		"СуммаДокумента");
		
	Если ПолучитьФункциональнуюОпцию("ИспользоватьПодборЗаказовПоставщику")
		И ЭтоНовый()
		И Не ЗначениеЗаполнено(ЗаказПоставщику) Тогда
		
		ПодобратьЗаказПоставщику();
	КонецЕсли;
		
	Если РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		УстановитьСтатусЗаказаПоставщикуЗакрыт(Истина);
		Если Не ЗначениеЗаполнено(ЗаказПоставщику) Тогда
			Если ЭтотОбъект.ЭтапыОплат.Количество() = 0 Тогда
				
				ПараметрыЭтаповОплат = Новый Структура();
				ПараметрыЭтаповОплат.Вставить("ЭтапыОплат",      ЭтотОбъект.ЭтапыОплат);
				ПараметрыЭтаповОплат.Вставить("Результат",       ЭтотОбъект.Контрагент);
				ПараметрыЭтаповОплат.Вставить("ДатаПоступления", ЭтотОбъект.Дата);
				ПараметрыЭтаповОплат.Вставить("СуммаДокумента",  ЭтотОбъект.СуммаДокумента); 
				
				ЗакупкиСервер.ДобавитьЭтапОплаты(ПараметрыЭтаповОплат);
				
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения Тогда
		УстановитьСтатусЗаказаПоставщикуЗакрыт(Ложь);
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, ИнтеграцияГИСМРТ.ЗаполнитьПризнакиЕстьМаркируемаяПродукцияИЕстьКиЗ(ЭтотОбъект, "Товары"));
	
	// ИнтеграцияЕГАИС - отключенный функционал
	Если ПолучитьФункциональнуюОпцию("ОтключенныйФункционал") Тогда
	НачатьТранзакцию();
	
	Попытка
		БлокировкаДанных = Новый БлокировкаДанных;
		ЭлементБлокировкиДанных = БлокировкаДанных.Добавить("Документ.ТТНВходящаяЕГАИС");
		ЭлементБлокировкиДанных.Режим = РежимБлокировкиДанных.Исключительный;
		БлокировкаДанных.Заблокировать();
		
		Если ЗначениеЗаполнено(ТТНВходящаяЕГАИС) Тогда
			Если Ссылка.Пустая() Тогда
				ОснованиеТТН = Документы.ПоступлениеТоваров.ПолучитьСсылку();
				УстановитьСсылкуНового(ОснованиеТТН);
			Иначе
				ОснованиеТТН = Ссылка;
			КонецЕсли;
			
			УстановитьПривилегированныйРежим(Истина);
			
			Если ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТТНВходящаяЕГАИС, "ДокументОснование") <> ОснованиеТТН Тогда
				ТТН = ТТНВходящаяЕГАИС.ПолучитьОбъект();
				Если ТТН <> Неопределено Тогда
					ТТН.ОбменДанными.Загрузка = Истина;
					ТТН.ДокументОснование = ОснованиеТТН;
					ТТН.Записать();
				КонецЕсли;
			КонецЕсли;
			
			УстановитьПривилегированныйРежим(Ложь);
		КонецЕсли;
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
	КонецПопытки;
	КонецЕсли;
	// Конец ИнтеграцияЕГАИС
	
КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)
	
	ПроведениеСервер.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства);
	
	ПроведениеСервер.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);
	
	ПроведениеСервер.ЗаписатьНаборыЗаписей(ЭтотОбъект);
	
	ЗакупкиСервер.ОбновитьСостояниеОплатыПоступления(Ссылка);
	
КонецПроцедуры

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	ТипДанныхЗаполнения = ТипЗнч(ДанныеЗаполнения);
	
	Если ТипДанныхЗаполнения = Тип("ДокументСсылка.ЗаказПоставщику") Тогда
		
		ОбщегоНазначенияРТ.ПроверитьВозможностьВводаНаОсновании(ДанныеЗаполнения);
		
		ЗаказПоставщику = ДанныеЗаполнения;
		
		ЕстьПоступление = Ложь;
		ПроверитьСуществованиеПоступленийПоЗаказу(ЕстьПоступление, Истина);
		
		Если ЕстьПоступление Тогда
			
			ТекстОшибки = НСтр("ru='По документу %1 уже существуют документы поступления товаров. Ввод на основании документа невозможен'");
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибки, ЗаказПоставщику);
			ВызватьИсключение ТекстОшибки;
			
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(
			ЭтотОбъект,
			ДанныеЗаполнения, 
			"Склад, Магазин, Контрагент, УчитыватьНДС, ЦенаВключаетНДС, Организация, ХозяйственнаяОперация, Договор");
					
		ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ДанныеЗаполнения.Товары, Товары);
		
		УчетНДС.СкорректироватьНДСВТЧДокумента(ЭтотОбъект, Товары);
		
	ИначеЕсли ТипДанныхЗаполнения = Тип("ДокументСсылка.ТТНВходящаяЕГАИС") Тогда
		
		ОбщегоНазначенияРТ.ПроверитьВозможностьВводаНаОсновании(ДанныеЗаполнения);
		
		ТТНВходящаяЕГАИС = ДанныеЗаполнения;
		
		СтатусОбработки = СтатусОбработкиТТНВходящейЕГАИС(ТТНВходящаяЕГАИС);
		Если СтатусОбработки = Перечисления.СтатусыОбработкиТТНВходящейЕГАИС.АктОтказаКПередаче
			ИЛИ СтатусОбработки = Перечисления.СтатусыОбработкиТТНВходящейЕГАИС.АктОтказаОбрабатываетсяЕГАИС
			ИЛИ СтатусОбработки = Перечисления.СтатусыОбработкиТТНВходящейЕГАИС.АктОтказаОшибка
			ИЛИ СтатусОбработки = Перечисления.СтатусыОбработкиТТНВходящейЕГАИС.АктОтказаПереданВУТМ Тогда
			ТекстОшибки = НСтр("ru='Поступление товаров для данной ТТН ЕГАИС не требуется.'");
			ВызватьИсключение ТекстОшибки;
		КонецЕсли;
		
		ЕстьПоступление = Ложь;
		ПроверитьСуществованиеПоступленийПоТТН(ЕстьПоступление, Истина);
		
		Если ЕстьПоступление Тогда
			
			ТекстОшибки = НСтр("ru='По документу %1 уже существуют документы поступления товаров. Ввод на основании документа невозможен'");
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибки, ТТНВходящаяЕГАИС);
			ВызватьИсключение ТекстОшибки;
			
		КонецЕсли;
		
		ЗаполнитьПоступлениеПоТТН();
		
	ИначеЕсли ТипДанныхЗаполнения = Тип("ДокументСсылка.ВходящаяТранспортнаяОперацияВЕТИС") Тогда
		ИнтеграцияВЕТИСРТ.ЗаполнитьПоступлениеТоваровНаОснованииВходящейТранспортнойОперацииВЕТИС(ЭтотОбъект, ДанныеЗаполнения,, СтандартнаяОбработка);
	ИначеЕсли ТипДанныхЗаполнения = Тип("ДокументСсылка.ПриемкаТоваровИСМП") Тогда
		ИнтеграцияИСМПРТ.ЗаполнитьПоступлениеТоваровНаОснованииПриемкиТовароИСМП(ЭтотОбъект, ДанныеЗаполнения);
	КонецЕсли;
	
	ИнициализироватьДокумент(ДанныеЗаполнения);
	ОбщегоНазначенияРТ.ПроверитьИспользованиеОрганизации(,,Организация);
	
КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)
	
	ЗаказПоставщику = Документы.ЗаказПоставщику.ПустаяСсылка();
	
	ТТНВходящаяЕГАИС = Документы.ТТНВходящаяЕГАИС.ПустаяСсылка();
	
	МассивСтрокДляУдаления = Новый Массив();
	Для Каждого СтрокаТовары Из Товары Цикл
		Если Не СтрокаТовары.АлкогольнаяПродукция.Пустая() или СтрокаТовары.Номенклатура.АлкогольнаяПродукция Тогда
			МассивСтрокДляУдаления.Добавить(СтрокаТовары);
		КонецЕсли;
	КонецЦикла;
	Для Каждого СтрокаУдаления Из МассивСтрокДляУдаления Цикл
		Товары.Удалить(СтрокаУдаления);
	КонецЦикла;
	
	Серии.Очистить();
	ЭтапыОплат.Очистить();
	СерийныеНомера.Очистить();
	ТоварыПоДаннымПоставщика.Очистить();
	ШтрихкодыУпаковок.Очистить();
	
	УчетНДС.СкорректироватьНДСВТЧДокумента(ЭтотОбъект, Товары);
	
	ЕстьРасхождения = Ложь;
	
	КоличествоТоваров = Товары.Количество();
	Если НЕ КоличествоТоваров = 0 Тогда
		Товары.ЗагрузитьКолонку(Новый Массив(Товары.Количество()), "КлючСвязиСерийныхНомеров");
	КонецЕсли;
	
	ПредъявленСчетФактура = Ложь;
	НомерСчетаФактуры = "";
	ДатаСчетаФактуры = Неопределено;
	ЕстьКиЗГИСМ      = Ложь;
	
	ИнициализироватьДокумент();
	
	АссортиментСервер.ПроверитьАссортиментТаблицыТоваровДокументаЗакупки(Магазин, Товары, Дата);
	
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	ПроверитьСуществованиеПоступленийПоЗаказу(Отказ);
	МассивНепроверяемыхРеквизитов = Новый Массив;
	Если Магазин.СкладУправляющейСистемы Тогда
		МассивНепроверяемыхРеквизитов.Добавить("Склад");
	КонецЕсли;
	
	Если Не ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПриемНаКомиссию Тогда
		МассивНепроверяемыхРеквизитов.Добавить("Договор");
	КонецЕсли;
	ЗапасыСервер.ПроверитьУказаниеГТДДляКиЗ(ЭтотОбъект, Отказ);
	
	ОбработкаТабличнойЧастиТоварыСервер.ПроверитьЗаполнениеХарактеристик(ЭтотОбъект,МассивНепроверяемыхРеквизитов,Отказ);
	
	ПараметрыПроверки = Новый Структура;
	ПараметрыПроверки.Вставить("ИмяТЧ","ТоварыПоДаннымПоставщика");
	ОбработкаТабличнойЧастиТоварыСервер.ПроверитьЗаполнениеХарактеристик(ЭтотОбъект,МассивНепроверяемыхРеквизитов,Отказ,ПараметрыПроверки);
	ОбработкаТабличнойЧастиТоварыСервер.ПроверитьЗаполнениеСерий(ЭтотОбъект,Документы.ПоступлениеТоваров.ПараметрыУказанияСерий(ЭтотОбъект),Отказ);
	
	Если НЕ ПредъявленСчетФактура Тогда
		МассивНепроверяемыхРеквизитов.Добавить("НомерСчетаФактуры");
		МассивНепроверяемыхРеквизитов.Добавить("ДатаСчетаФактуры");
	КонецЕсли;
	
	МассивНепроверяемыхРеквизитов.Добавить("ЭтапыОплат.ВидПлатежа");
	МассивНепроверяемыхРеквизитов.Добавить("ЭтапыОплат.ДатаПлатежа");
	МассивНепроверяемыхРеквизитов.Добавить("ЭтапыОплат.ДокументВзаимозачета");
	МассивНепроверяемыхРеквизитов.Добавить("Товары.Сумма");
	
	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты,МассивНепроверяемыхРеквизитов);
	
	ОбработкаТабличнойЧастиТоварыСервер.ПроверитьЗаполнениеТЧПриНаличииОбменаСУправлениемТорговлей(
		ЭтотОбъект,
		Отказ);
	
	МаркетинговыеАкцииСервер.ПроверитьЗаполнениеТабличнойЧастиСерийныеНомера(
		ЭтотОбъект,
		"Товары",
		"СерийныеНомера",
		Отказ);
	
	МаркетинговыеАкцииСервер.ПроверитьДвиженияСерийныхНомеров(
		ЭтотОбъект,
		"Товары",
		"СерийныеНомера",
		Отказ);
	
	Если Не ЗначениеЗаполнено(ЗаказПоставщику) Тогда
		ЗакупкиСервер.СортироватьТабличнуюЧастьЭтапыОплат(ЭтотОбъект, Отказ);
		ЗакупкиСервер.ПроверитьТабличнуюЧастьЭтапыОплат(ЭтотОбъект, Отказ);
	КонецЕсли;
	
	ЭтоПрослеживаемыйДокумент = УчетПрослеживаемыхТоваровРТ.ЭтоПрослеживаемыйДокумент(Товары, Дата);
	
	Если ЭтоПрослеживаемыйДокумент Тогда
		ЗапасыСервер.ПроверитьЗаполнениеНомеровГТД(ЭтотОбъект, Отказ);
	КонецЕсли;
	УчетПрослеживаемыхТоваровРТ.ПроверитьЗаполнениеКоличестваПоРНПТ(ЭтотОбъект, Отказ, Неопределено);
	
	ПроверитьЗаполнениеСуммы(Отказ);
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Процедура проверяет существование документа "Поступление товаров" по заказу поставщику.
// 
// Параметры:
//  Отказ                     - флаг отказа в проведении,
//
Процедура ПроверитьСуществованиеПоступленийПоЗаказу(Отказ, ТолькоРезультат = Ложь)
	
	Если ЗначениеЗаполнено(ЗаказПоставщику) Тогда
		
		Запрос = Новый Запрос("ВЫБРАТЬ
		|	ПРЕДСТАВЛЕНИЕ(ПоступлениеТоваров.Ссылка) КАК ПоступлениеТоваров
		|ИЗ
		|	Документ.ПоступлениеТоваров КАК ПоступлениеТоваров
		|ГДЕ
		|	ПоступлениеТоваров.ЗаказПоставщику = &ЗаказПоставщику
		|	И ПоступлениеТоваров.Ссылка <> &ПоступлениеТоваров
		|	И ПоступлениеТоваров.Проведен");
		
		Запрос.УстановитьПараметр("ЗаказПоставщику", ЗаказПоставщику);
		Запрос.УстановитьПараметр("ПоступлениеТоваров", Ссылка);
		
		РезультатЗапросаПроверкаЗаказа = Запрос.Выполнить();
		
		Если НЕ РезультатЗапросаПроверкаЗаказа.Пустой() Тогда
			
			Если ТолькоРезультат Тогда
				
				Отказ = Истина;
				
			Иначе
				
				ТекстСообщения = НСтр("ru = 'Существуют документы поступления, оформленные по документу %ЗаказПоставщику% :'");
				ТекстСообщения = СтрЗаменить(ТекстСообщения,"%ЗаказПоставщику%",ЗаказПоставщику);
				
				ВыборкаРезультатаПроверкаЗаказа = РезультатЗапросаПроверкаЗаказа.Выбрать();
				
				Пока ВыборкаРезультатаПроверкаЗаказа.Следующий() Цикл
					
					ТекстСообщения = ТекстСообщения + Символы.ПС + "%ПоступлениеТоваров%";
					ТекстСообщения = СтрЗаменить(ТекстСообщения,"%ПоступлениеТоваров%",
												ВыборкаРезультатаПроверкаЗаказа.ПоступлениеТоваров);
					
				КонецЦикла;
				
				ОбщегоНазначения.СообщитьПользователю(
					ТекстСообщения,
					ЭтотОбъект,
					"ЗаказПоставщику",
					,
					Отказ);
				
			КонецЕсли;
				
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура проверяет существование документа "Поступление товаров" по входящей ТТН.
// 
Процедура ПроверитьСуществованиеПоступленийПоТТН(Отказ, ТолькоРезультат = Ложь)
	
	Если ЗначениеЗаполнено(ТТНВходящаяЕГАИС) Тогда
		
		Запрос = Новый Запрос("ВЫБРАТЬ
		|	ПРЕДСТАВЛЕНИЕ(ПоступлениеТоваров.Ссылка) КАК ПоступлениеТоваров
		|ИЗ
		|	Документ.ПоступлениеТоваров КАК ПоступлениеТоваров
		|ГДЕ
		|	ПоступлениеТоваров.ТТНВходящаяЕГАИС = &ТТНВходящаяЕГАИС
		|	И ПоступлениеТоваров.Ссылка <> &ПоступлениеТоваров
		|	И НЕ ПоступлениеТоваров.ПометкаУдаления");
		
		Запрос.УстановитьПараметр("ТТНВходящаяЕГАИС", ТТНВходящаяЕГАИС);
		Запрос.УстановитьПараметр("ПоступлениеТоваров", Ссылка);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		Если НЕ РезультатЗапроса.Пустой() Тогда
			
			Если ТолькоРезультат Тогда
				
				Отказ = Истина;
				
			Иначе
				
				ТекстСообщения = НСтр("ru = 'Существуют документы поступления, оформленные по документу %ТТН% :'");
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ТТН%", ТТНВходящаяЕГАИС);
				
				Выборка = РезультатЗапроса.Выбрать();
				
				Пока Выборка.Следующий() Цикл
					
					ТекстСообщения = ТекстСообщения + Символы.ПС + "%ПоступлениеТоваров%";
					ТекстСообщения = СтрЗаменить(ТекстСообщения,"%ПоступлениеТоваров%",
												Выборка.ПоступлениеТоваров);
					
				КонецЦикла;
				
				ОбщегоНазначения.СообщитьПользователю(
					ТекстСообщения,
					ЭтотОбъект,
					"ТТНВходящаяЕГАИС",
					,
					Отказ);
				
			КонецЕсли;
				
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Проверяет заполнение реквизита "Сумма" в табличной части "Товары"
//
// Параметры:
//  Отказ  - Булево - флаг отказа в проведении
//
Процедура ПроверитьЗаполнениеСуммы(Отказ)

	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаТоваров.НомерСтроки,
	|	ТаблицаТоваров.Сумма
	|ПОМЕСТИТЬ ТаблицаТоваров
	|ИЗ
	|	&ТаблицаТоваров КАК ТаблицаТоваров
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаТоваров.НомерСтроки,
	|	ТаблицаТоваров.Сумма
	|ИЗ
	|	ТаблицаТоваров КАК ТаблицаТоваров
	|ГДЕ
	|	ТаблицаТоваров.Сумма = 0";
	
	ТаблицаТоваров = ЭтотОбъект.Товары.Выгрузить(, "НомерСтроки,Сумма");
	
	Запрос.УстановитьПараметр("ТаблицаТоваров", ТаблицаТоваров);
	
	ШаблонСообщения = НСтр("ru='Не заполнена колонка ""%ПредставлениеРеквизита%"" в строке %НомерСтроки% списка ""Товары""'");
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		ТекстСообщения = СтрЗаменить(ШаблонСообщения, "%НомерСтроки%", Выборка.НомерСтроки);
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ПредставлениеРеквизита%", ?(ЭтотОбъект.УчитыватьНДС, НСтр("ru = 'Всего'"), НСтр("ru = 'Сумма'")));
		
		ОбщегоНазначения.СообщитьПользователю(
			ТекстСообщения,
			ЭтотОбъект,
			ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Товары", Выборка.НомерСтроки, "Сумма"),
			"Объект",
			Отказ);
			
	КонецЦикла;

КонецПроцедуры // ПроверитьЗаполнениеСуммы()

// Инициализирует документ
//
Процедура ИнициализироватьДокумент(ДанныеЗаполнения = Неопределено)

	Если ТипЗнч(ДанныеЗаполнения) = Тип("Структура") Тогда
		
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, ДанныеЗаполнения);
		
		Если ДанныеЗаполнения.Свойство("Склад")
			И НЕ ЗначениеЗаполнено(Склад) Тогда
			Если ЗначениеЗаполнено(Магазин) Тогда
				Если НЕ Справочники.Склады.ПроверитьПринадлежностьСкладаМагазину(Магазин, ДанныеЗаполнения.Склад) Тогда
					ДанныеЗаполнения.Склад = Справочники.Склады.ПустаяСсылка();
				КонецЕсли;
			Иначе
				Магазин = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеЗаполнения.Склад, "Магазин");
			КонецЕсли;
		КонецЕсли;
		Если ДанныеЗаполнения.Свойство("Организация")
			И НЕ ЗначениеЗаполнено(Организация) Тогда
			БанковскийСчетОрганизации = ЗначениеНастроекПовтИсп.БанковскийСчетОрганизацииПоУмолчанию(ДанныеЗаполнения.Организация,,БанковскийСчетОрганизации);
		КонецЕсли;
	КонецЕсли;
	
	Ответственный = Пользователи.ТекущийПользователь();
	Магазин       = ЗначениеНастроекПовтИсп.МагазинПоУмолчанию(Магазин);
	Организация   = ЗначениеНастроекПовтИсп.ОрганизацияПоУмолчанию(Организация,Ответственный);
	Склад         = ЗначениеНастроекПовтИсп.СкладПоступленияПоУмолчанию(Магазин,,Склад, Ответственный);
	Контрагент    = ЗначениеНастроекПовтИсп.ПоставщикПоУмолчанию(Ответственный, Контрагент);
	БанковскийСчетОрганизации = ЗначениеНастроекПовтИсп.БанковскийСчетОрганизацииПоУмолчанию(Организация,,БанковскийСчетОрганизации);
	БанковскийСчетКонтрагента = ЗначениеНастроекПовтИсп.БанковскийСчетКонтрагентаПоУмолчанию(Контрагент);
	
КонецПроцедуры

// Устанавливает статус "Закрыт" заказа поставщику.
//
Процедура УстановитьСтатусЗаказаПоставщикуЗакрыт(ЗначениеСтатуса)
	
	Если ЗначениеЗаполнено(ЗаказПоставщику) И НЕ ЗаказПоставщику.Закрыт = ЗначениеСтатуса Тогда
		
		ЗаказПоставщикуОбъект = ЗаказПоставщику.ПолучитьОбъект();
		ЗаказПоставщикуОбъект.Закрыт = ЗначениеСтатуса;
		Если ЗаказПоставщику.Проведен Тогда
			ЗаказПоставщикуОбъект.Записать(РежимЗаписиДокумента.Проведение);
		Иначе
			ЗаказПоставщикуОбъект.Записать(РежимЗаписиДокумента.Запись);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура СформироватьСписокРегистровДляКонтроля()
	
	Массив = Новый Массив;
	
	Если ДополнительныеСвойства.РежимЗаписи = РежимЗаписиДокумента.Проведение И НЕ ЗначениеЗаполнено(ЭтотОбъект.ЗаказПоставщику) Тогда
		
		Массив.Добавить(Движения.РасчетыСПоставщиками);
		
	КонецЕсли;
	
	ДополнительныеСвойства.ДляПроведения.Вставить("РегистрыДляКонтроля", Массив);
	
КонецПроцедуры

// Заполняет текущий документ "Поступление товаров" по данным документа "ТТН (входящая)".
//
Процедура ЗаполнитьПоступлениеПоТТН()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТТНВходящаяЕГАИС.НомерТТН КАК НомерВходящегоДокумента,
	|	ТТНВходящаяЕГАИС.ДатаТТН КАК ДатаВходящегоДокумента,
	|	ТТНВходящаяЕГАИС.Ссылка КАК ТТНВходящаяЕГАИС,
	|	ТТНВходящаяЕГАИС.Грузополучатель.ТорговыйОбъект КАК Магазин,
	|	ТТНВходящаяЕГАИС.Грузополучатель.Контрагент КАК Организация,
	|	ВЫБОР
	|		КОГДА ТТНВходящаяЕГАИС.Поставщик = &ПустаяСсылкаПоставщика
	|			ТОГДА ТТНВходящаяЕГАИС.Грузоотправитель
	|		ИНАЧЕ ТТНВходящаяЕГАИС.Поставщик
	|	КОНЕЦ КАК Поставщик
	|ПОМЕСТИТЬ ТаблицаВЗапросе
	|ИЗ
	|	Документ.ТТНВходящаяЕГАИС КАК ТТНВходящаяЕГАИС
	|ГДЕ
	|	ТТНВходящаяЕГАИС.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаВЗапросе.НомерВходящегоДокумента,
	|	ТаблицаВЗапросе.ДатаВходящегоДокумента,
	|	ТаблицаВЗапросе.ТТНВходящаяЕГАИС,
	|	ТаблицаВЗапросе.Магазин,
	|	ТаблицаВЗапросе.Организация,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(КлассификаторОрганизацийЕГАИС.Сопоставлено, ЛОЖЬ)
	|				И НЕ КлассификаторОрганизацийЕГАИС.СоответствуетОрганизации
	|			ТОГДА КлассификаторОрганизацийЕГАИС.Контрагент
	|		ИНАЧЕ &КонтрагентЗаказа
	|	КОНЕЦ КАК Контрагент
	|ИЗ
	|	ТаблицаВЗапросе КАК ТаблицаВЗапросе
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КлассификаторОрганизацийЕГАИС КАК КлассификаторОрганизацийЕГАИС
	|		ПО ТаблицаВЗапросе.Поставщик = КлассификаторОрганизацийЕГАИС.Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", ТТНВходящаяЕГАИС);
	Запрос.УстановитьПараметр("ПустаяСсылкаПоставщика", Справочники.КлассификаторОрганизацийЕГАИС.ПустаяСсылка());
	
	Если ЗначениеЗаполнено(ЗаказПоставщику) Тогда
		Запрос.УстановитьПараметр("КонтрагентЗаказа", ЗаказПоставщику.Контрагент);
	Иначе
		Запрос.УстановитьПараметр("КонтрагентЗаказа", Справочники.Контрагенты.ПустаяСсылка());
	КонецЕсли;
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Если Выборка.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, Выборка);
	КонецЕсли;
	
	Ответственный             = Пользователи.ТекущийПользователь();
	Склад                     = ЗначениеНастроекПовтИсп.СкладПоступленияПоУмолчанию(Магазин,,, Ответственный);
	БанковскийСчетОрганизации = ЗначениеНастроекПовтИсп.БанковскийСчетОрганизацииПоУмолчанию(Организация,,);
	Контрагент                = ЗначениеНастроекПовтИсп.ПоставщикПоУмолчанию(Ответственный, Контрагент);
	БанковскийСчетКонтрагента = ЗначениеНастроекПовтИсп.БанковскийСчетКонтрагентаПоУмолчанию(Контрагент);
	
	УчитыватьНДС    = Истина;
	ЦенаВключаетНДС = Истина;
	ЗаказПоставщику = ЗаказПоставщику;
	
	ЗаполнитьТоварыПоступленияПоТТН();
	
КонецПроцедуры

Процедура ЗаполнитьТоварыПоступленияПоТТН() Экспорт
	
	ВыгрузкаТовары = Товары.Выгрузить();
	Товары.Очистить();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТТНВходящаяЕГАИСТовары.АлкогольнаяПродукция КАК АлкогольнаяПродукция,
	|	ТТНВходящаяЕГАИСТовары.КоличествоФакт КАК Количество,
	|	ТТНВходящаяЕГАИСТовары.КоличествоФакт КАК КоличествоУпаковок,
	|	ТТНВходящаяЕГАИСТовары.Сумма КАК Сумма,
	|	ТТНВходящаяЕГАИСТовары.Серия КАК Серия,
	|	ТТНВходящаяЕГАИСТовары.Цена КАК Цена,
	|	ТТНВходящаяЕГАИСТовары.ИдентификаторУпаковки КАК ИдентификаторУпаковки,
	|	ТТНВходящаяЕГАИСТовары.ИдентификаторСтроки КАК ИдентификаторСтроки,
	|	ТТНВходящаяЕГАИСТовары.НомерСтроки КАК Порядок,
	|	ТТНВходящаяЕГАИСТовары.Номенклатура КАК Номенклатура,
	|	ТТНВходящаяЕГАИСТовары.Характеристика КАК Характеристика
	|ПОМЕСТИТЬ ТаблицаЕГАИС
	|ИЗ
	|	Документ.ТТНВходящаяЕГАИС.Товары КАК ТТНВходящаяЕГАИСТовары
	|ГДЕ
	|	ТТНВходящаяЕГАИСТовары.Ссылка = &Ссылка
	|	И НЕ ТТНВходящаяЕГАИСТовары.КоличествоФакт = 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаЕГАИС.АлкогольнаяПродукция КАК АлкогольнаяПродукция,
	|	ТаблицаЕГАИС.Количество / ВЫБОР
	|		КОГДА НЕ СпрНоменклатура.Ссылка ЕСТЬ NULL
	|			ТОГДА ВЫБОР
	|					КОГДА ТаблицаЕГАИС.АлкогольнаяПродукция.ТипПродукции = ЗНАЧЕНИЕ(Перечисление.ТипыПродукцииЕГАИС.Неупакованная)
	|							И СпрНоменклатура.ОбъемДАЛ <> 0
	|						ТОГДА СпрНоменклатура.ОбъемДАЛ
	|					ИНАЧЕ 1
	|				КОНЕЦ
	|		ИНАЧЕ 1
	|	КОНЕЦ КАК Количество,
	|	ТаблицаЕГАИС.КоличествоУпаковок / ВЫБОР
	|		КОГДА НЕ СпрНоменклатура.Ссылка ЕСТЬ NULL
	|			ТОГДА ВЫБОР
	|					КОГДА ТаблицаЕГАИС.АлкогольнаяПродукция.ТипПродукции = ЗНАЧЕНИЕ(Перечисление.ТипыПродукцииЕГАИС.Неупакованная)
	|							И СпрНоменклатура.ОбъемДАЛ <> 0
	|						ТОГДА СпрНоменклатура.ОбъемДАЛ
	|					ИНАЧЕ 1
	|				КОНЕЦ
	|		ИНАЧЕ 1
	|	КОНЕЦ КАК КоличествоУпаковок,
	|	ТаблицаЕГАИС.Серия КАК Серия,
	|	ТаблицаЕГАИС.Сумма КАК Сумма,
	|	ТаблицаЕГАИС.Цена * ВЫБОР
	|		КОГДА НЕ СпрНоменклатура.Ссылка ЕСТЬ NULL
	|			ТОГДА ВЫБОР
	|					КОГДА ТаблицаЕГАИС.АлкогольнаяПродукция.ТипПродукции = ЗНАЧЕНИЕ(Перечисление.ТипыПродукцииЕГАИС.Неупакованная)
	|							И СпрНоменклатура.ОбъемДАЛ <> 0
	|						ТОГДА СпрНоменклатура.ОбъемДАЛ
	|					ИНАЧЕ 1
	|				КОНЕЦ
	|		ИНАЧЕ 1
	|	КОНЕЦ КАК Цена,
	|	ТаблицаЕГАИС.ИдентификаторУпаковки КАК ИдентификаторУпаковки,
	|	ТаблицаЕГАИС.ИдентификаторСтроки КАК ИдентификаторСтроки,
	|	ТаблицаЕГАИС.Номенклатура КАК Номенклатура,
	|	ТаблицаЕГАИС.Характеристика КАК Характеристика,
	|	ТаблицаЕГАИС.Порядок КАК Порядок
	|ИЗ
	|	ТаблицаЕГАИС КАК ТаблицаЕГАИС
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СпрНоменклатура
	|		ПО ТаблицаЕГАИС.Номенклатура = СпрНоменклатура.Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", ТТНВходящаяЕГАИС);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	ИспользоватьСерииНоменклатуры = ПолучитьФункциональнуюОпцию("ИспользоватьСерииНоменклатуры");
	
	Пока Выборка.Следующий() Цикл
		СтрокаТаблицы = Товары.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТаблицы, Выборка);
		Если ИспользоватьСерииНоменклатуры И ЗначениеЗаполнено(Выборка.Серия) Тогда
				НоваяСтрокаСерии = Серии.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрокаСерии, Выборка);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого СтрокаТовары Из ВыгрузкаТовары Цикл
		Если СтрокаТовары.АлкогольнаяПродукция.Пустая() И НЕ ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрокаТовары.Номенклатура, "АлкогольнаяПродукция") Тогда
			ЗаполнитьЗначенияСвойств(Товары.Добавить(), СтрокаТовары);
		КонецЕсли;
	КонецЦикла;
	
	ПараметрыУказанияСерий = Новый ФиксированнаяСтруктура(Документы.ПоступлениеТоваров.ПараметрыУказанияСерий(ЭтотОбъект));
	
	СтруктураДействий = Новый Структура;
	СтруктураПересчетаСуммыНДСВТЧ = ОбработкаТабличнойЧастиТоварыКлиентСервер.СтруктураПересчетаСуммыНДСВСтрокеТЧ(ЭтотОбъект);
	
	СтруктураДействий.Вставить("ЗаполнитьСтавкуНДС",  ОбработкаТабличнойЧастиТоварыКлиентСервер.СтруктураПараметровСтавкиНДСУчитыватьНДС(ЭтотОбъект));
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", ОбработкаТабличнойЧастиТоварыКлиентСервер.СтруктураПересчетаСуммыНДСВТЧ(ЭтотОбъект));
	СтруктураДействий.Вставить("ПересчитатьЦенуПоСуммеВЗакупках", СтруктураПересчетаСуммыНДСВТЧ);
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
	
	СтруктураТЧ = Новый Структура;
	СтруктураТЧ.Вставить("СтрокиТЧ" , Товары);
	ОбработкаТабличнойЧастиТоварыСервер.ПриИзмененииРеквизитовВТЧСервер(СтруктураТЧ, СтруктураДействий, Неопределено);
	
КонецПроцедуры

// Добавляет строку в тч Товары
Процедура ДобавитьСтрокуПоОрдеру(ТЗТовары, ТЗСерийныеНомера, ВыборкаСерийныеНомера, СтрокаТаблицыПоОрдерам, КлючСвязи)
	
	НоваяСтрокаТовары = ТЗТовары.Добавить();
	ЗаполнитьЗначенияСвойств(НоваяСтрокаТовары, СтрокаТаблицыПоОрдерам,, "Цена");
	
	Если ЗначениеЗаполнено(СтрокаТаблицыПоОрдерам.КлючСвязиСерийныхНомеров) Тогда
		НоваяСтрокаТовары.КлючСвязиСерийныхНомеров = КлючСвязи;
		
		ВыборкаСерийныеНомера.Сбросить();
		Если ВыборкаСерийныеНомера.НайтиСледующий(СтрокаТаблицыПоОрдерам.Ссылка, "Ссылка") Тогда
			ВыборкаСерийныеНомераДетальная = ВыборкаСерийныеНомера.Выбрать();
			
			Пока ВыборкаСерийныеНомераДетальная.НайтиСледующий(СтрокаТаблицыПоОрдерам.КлючСвязиСерийныхНомеров, "КлючСвязиСерийныхНомеров") Цикл
				СтрокаСерийныеНомера = ТЗСерийныеНомера.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаСерийныеНомера, ВыборкаСерийныеНомераДетальная);
				СтрокаСерийныеНомера.КлючСвязиСерийныхНомеров = КлючСвязи;
			КонецЦикла;
			
		КонецЕсли;
		КлючСвязи = КлючСвязи + 1;
	КонецЕсли;
	
КонецПроцедуры

Функция СтатусОбработкиТТНВходящейЕГАИС(ТТН)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Документ", ТТН);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СтатусыДокументовЕГАИС.Статус КАК Статус
	|ИЗ
	|	РегистрСведений.СтатусыДокументовЕГАИС КАК СтатусыДокументовЕГАИС
	|ГДЕ
	|	СтатусыДокументовЕГАИС.Документ = &Документ";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		Возврат РезультатЗапроса.Выгрузить()[0].Статус;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

Процедура ПодобратьЗаказПоставщику()
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ЗаказПоставщику.Ссылка КАК Заказ
	|ИЗ
	|	Документ.ЗаказПоставщику КАК ЗаказПоставщику
	|ГДЕ
	|	ЗаказПоставщику.ДатаПоступления = &ДатаПоступления
	|	И ЗаказПоставщику.Контрагент = &Контрагент
	|	И ЗаказПоставщику.Организация = &Организация
	|	И НЕ ЗаказПоставщику.Закрыт";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("ДатаПоступления", НачалоДня(Дата));
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("Контрагент", Контрагент);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Количество() = 1 И Выборка.Следующий() Тогда
		ЗаказПоставщику = Выборка.Заказ;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли
