#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОписаниеПеременных

Перем РежимРМК Экспорт; // Переменная, указывающая что проведение чека производится из режима регистрации продаж.

Перем КонтролироватьОстаткиТоваровПриЗакрытииЧека Экспорт;// Переменная хранит признак контроля остатков при закрытии
                                                          // чека.

Перем мЗакрытиеСмены Экспорт;// Переменная определяет режим в котором происходит запись документа.

#КонецОбласти

#Область ОбработчикиСобытий

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	СоздатьЧекПродажи = Ложь;
	Если ТипЗнч(ДанныеЗаполнения) = Тип("Структура") Тогда
		Если ДанныеЗаполнения.Свойство("ДанныеЗаполнения") Тогда
			СоздатьЧекПродажи = ДанныеЗаполнения.Свойство("СоздатьЧекПродажи");
			ДанныеЗаполнения  = ДанныеЗаполнения.ДанныеЗаполнения;
		КонецЕсли;
	КонецЕсли;
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.ЧекККМ") Тогда
		Если ДанныеЗаполнения.ВидОперации = Перечисления.ВидыОперацийЧекККМ.Продажа Тогда
			
			ОбщегоНазначенияРТ.ПроверитьВозможностьВводаНаОсновании(ДанныеЗаполнения);
			ПроверитьВозможностьВводаНаОснованииЧекаККМ(ДанныеЗаполнения);
			
			Если СоздатьЧекПродажи Тогда
				ПроверитьВозможностьВводаНаОснованииЧекаККМПродажи(ДанныеЗаполнения);
				Если ДанныеЗаполнения.ОперацияСДенежнымиСредствами
					И ЗначениеЗаполнено(ДанныеЗаполнения.ДокументРасчета) Тогда
						ВызватьИсключение СтрШаблон(НСтр("ru = 'По документу %1 не требуется вводить чек ККМ.'"), ДанныеЗаполнения);
				КонецЕсли;
				
				ДокументРасчета = ДанныеЗаполнения;
				ОперацияСДенежнымиСредствами = НЕ ДанныеЗаполнения.ОперацияСДенежнымиСредствами;
				
				Если НЕ ЗначениеЗаполнено(ДанныеЗаполнения.ДокументРасчета) И ДанныеЗаполнения.ОперацияСДенежнымиСредствами Тогда
					ЗаполнитьЗачетАванса();
				КонецЕсли;
				
				СписокСвойств = "ВладелецДисконтнойКарты, ДисконтнаяКарта, КассаККМ, Организация, СуммаДокумента, Магазин,
					|Продавец, ЦенаВключаетНДС, ЗаказПокупателя, СистемаНалогообложения, Контрагент";
				ЗаполнитьЗначенияСвойств(ЭтотОбъект, ДанныеЗаполнения, СписокСвойств);
				
				ЧекККМПродажа = Документы.ЧекККМ.ПустаяСсылка();
				ВидОперации = Перечисления.ВидыОперацийЧекККМ.Продажа;
				
				ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ДанныеЗаполнения.Товары, Товары);
				ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ДанныеЗаполнения.Подарки, Подарки);
				ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ДанныеЗаполнения.Серии, Серии);
				ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ДанныеЗаполнения.СерииПодарков, СерииПодарков);
				ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ДанныеЗаполнения.СкидкиНаценки, СкидкиНаценки);
				
				ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьДоговорПлатежногоАгентаВТЧСервер(Товары);
			Иначе
				Если ДанныеЗаполнения.ОперацияСДенежнымиСредствами Тогда
					Если НЕ ЗначениеЗаполнено(ДанныеЗаполнения.ДокументРасчета) Тогда
						// Аванс
						ДокументРасчета = ДанныеЗаполнения;
					Иначе
						// Постоплата
						ДокументРасчета = ДанныеЗаполнения.ДокументРасчета;
					КонецЕсли;
					ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ДанныеЗаполнения.СкидкиНаценки, СкидкиНаценки);
				КонецЕсли;
				
				ЧекККМПродажа = ДанныеЗаполнения;
				
				Если ЗначениеЗаполнено(ЧекККМПродажа.СсылкаЯндексКассы) Тогда
					ТекстИсключения = СтрШаблон(
							НСтр("ru = 'Невозможно осуществить возврат продажи по документу %1 оплаченному с помощью ЮKassa.'"),
							ДанныеЗаполнения);
						
						ВызватьИсключение ТекстИсключения;
				КонецЕсли;
				
				ОперацияСДенежнымиСредствами = ДанныеЗаполнения.ОперацияСДенежнымиСредствами;
				
				СтрокаЗаполнения =
					"ВладелецДисконтнойКарты,
					|ДисконтнаяКарта,
					|КассаККМ,
					|Организация,
					|СуммаДокумента,
					|Магазин,
					|Продавец,
					|ЦенаВключаетНДС,
					|ЗаказПокупателя,
					|Контрагент,
					|ДоговорКонтрагента";
				
				ЗаполнитьЗначенияСвойств(ЭтотОбъект, ДанныеЗаполнения, СтрокаЗаполнения);
				
				ВидОперации = Перечисления.ВидыОперацийЧекККМ.Возврат;
				ДисконтнаяКарта = ДанныеЗаполнения.ДисконтнаяКарта;
				ВладелецДисконтнойКарты = ДанныеЗаполнения.ВладелецДисконтнойКарты;
				
				ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ДанныеЗаполнения.Товары, Товары);
				ЗапасыСервер.УдалитьПодарочныеСертификаты(Товары);
				ОбработкаТабличнойЧастиТоварыКлиентСервер.УдалитьСтрокиАгентскогоВознаграждения(Товары);
				
				ВедетсяУчетМРЦ = ИнтеграцияИСМПКлиентСерверПовтИсп.УчитыватьМРЦ();
				Если ВедетсяУчетМРЦ Тогда
					ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьЦенуМРЦВТЧ(Товары);
				КонецЕсли;
				
				ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ДанныеЗаполнения.Подарки, Подарки);
				ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ДанныеЗаполнения.Серии, Серии);
				ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ДанныеЗаполнения.СерииПодарков, СерииПодарков);
				
				Если НЕ ОперацияСДенежнымиСредствами Тогда
					Запрос = Новый Запрос(
					"ВЫБРАТЬ
					|	ЧекККМОплата.ВидОплаты КАК ВидОплаты,
					|	ЧекККМОплата.ЭквайринговыйТерминал КАК ЭквайринговыйТерминал,
					|	СУММА(ЧекККМОплата.Сумма) КАК Сумма,
					|	ЧекККМОплата.ПроцентКомиссии КАК ПроцентКомиссии,
					|	СУММА(ЧекККМОплата.СуммаКомиссии) КАК СуммаКомиссии,
					|	ЧекККМОплата.СсылочныйНомер КАК СсылочныйНомер,
					|	ЧекККМОплата.НомерЧекаЭТ КАК НомерЧекаЭТ,
					|	ЧекККМОплата.НомерПлатежнойКарты КАК НомерПлатежнойКарты,
					|	ЛОЖЬ КАК ДанныеПереданыВБанк
					|ПОМЕСТИТЬ ТаблицаОплатЧекаПродаж
					|ИЗ
					|	Документ.ЧекККМ.Оплата КАК ЧекККМОплата
					|ГДЕ
					|	ЧекККМОплата.Ссылка = &Ссылка
					|	И ЧекККМОплата.ВидОплаты.ТипОплаты В (ЗНАЧЕНИЕ(Перечисление.ТипыОплатЧекаККМ.ПлатежнаяКарта),
					|		ЗНАЧЕНИЕ(Перечисление.ТипыОплатЧекаККМ.ПлатежнаяСистема))
					|
					|СГРУППИРОВАТЬ ПО
					|	ЧекККМОплата.ВидОплаты,
					|	ЧекККМОплата.ЭквайринговыйТерминал,
					|	ЧекККМОплата.ПроцентКомиссии,
					|	ЧекККМОплата.СсылочныйНомер,
					|	ЧекККМОплата.НомерЧекаЭТ,
					|	ЧекККМОплата.НомерПлатежнойКарты
					|;
					|
					|////////////////////////////////////////////////////////////////////////////////
					|ВЫБРАТЬ РАЗЛИЧНЫЕ
					|	ТаблицаОплатЧекаПродаж.ВидОплаты КАК ВидОплаты,
					|	ТаблицаОплатЧекаПродаж.ЭквайринговыйТерминал КАК ЭквайринговыйТерминал
					|ПОМЕСТИТЬ ТаблицаВидовОплат
					|ИЗ
					|	ТаблицаОплатЧекаПродаж КАК ТаблицаОплатЧекаПродаж
					|;
					|
					|////////////////////////////////////////////////////////////////////////////////
					|ВЫБРАТЬ
					|	ТаблицаВидовОплат.ВидОплаты КАК ВидОплаты,
					|	ТаблицаВидовОплат.ЭквайринговыйТерминал КАК ЭквайринговыйТерминал,
					|	ЭквайринговыеТерминалыТарифыЗаРасчетноеОбслуживание.ПроцентКомиссииПриОтмене КАК ПроцентКомиссииПриОтмене
					|ПОМЕСТИТЬ ТаблицаПроцентовКомиссииПриОтмене
					|ИЗ
					|	ТаблицаВидовОплат КАК ТаблицаВидовОплат
					|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ЭквайринговыеТерминалы.ТарифыЗаРасчетноеОбслуживание КАК ЭквайринговыеТерминалыТарифыЗаРасчетноеОбслуживание
					|		ПО ТаблицаВидовОплат.ЭквайринговыйТерминал = ЭквайринговыеТерминалыТарифыЗаРасчетноеОбслуживание.Ссылка
					|			И ТаблицаВидовОплат.ВидОплаты = ЭквайринговыеТерминалыТарифыЗаРасчетноеОбслуживание.ВидОплаты
					|;
					|
					|////////////////////////////////////////////////////////////////////////////////
					|ВЫБРАТЬ
					|	ТаблицаОплатЧекаПродаж.ВидОплаты КАК ВидОплаты,
					|	ТаблицаОплатЧекаПродаж.ЭквайринговыйТерминал КАК ЭквайринговыйТерминал,
					|	ТаблицаОплатЧекаПродаж.Сумма КАК Сумма,
					|	ВЫБОР
					|		КОГДА ТаблицаПроцентовКомиссииПриОтмене.ВидОплаты ЕСТЬ NULL
					|			ТОГДА -ТаблицаОплатЧекаПродаж.ПроцентКомиссии
					|		ИНАЧЕ ТаблицаПроцентовКомиссииПриОтмене.ПроцентКомиссииПриОтмене
					|	КОНЕЦ КАК ПроцентКомиссии,
					|	ВЫБОР
					|		КОГДА ТаблицаПроцентовКомиссииПриОтмене.ВидОплаты ЕСТЬ NULL
					|			ТОГДА -ТаблицаОплатЧекаПродаж.СуммаКомиссии
					|		ИНАЧЕ ТаблицаПроцентовКомиссииПриОтмене.ПроцентКомиссииПриОтмене * ТаблицаОплатЧекаПродаж.Сумма / 100
					|	КОНЕЦ КАК СуммаКомиссии,
					|	ТаблицаОплатЧекаПродаж.СсылочныйНомер КАК СсылочныйНомер,
					|	ТаблицаОплатЧекаПродаж.НомерЧекаЭТ КАК НомерЧекаЭТ,
					|	ТаблицаОплатЧекаПродаж.НомерПлатежнойКарты КАК НомерПлатежнойКарты,
					|	ТаблицаОплатЧекаПродаж.ДанныеПереданыВБанк КАК ДанныеПереданыВБанк
					|ИЗ
					|	ТаблицаОплатЧекаПродаж КАК ТаблицаОплатЧекаПродаж
					|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаПроцентовКомиссииПриОтмене КАК ТаблицаПроцентовКомиссииПриОтмене
					|		ПО ТаблицаОплатЧекаПродаж.ВидОплаты = ТаблицаПроцентовКомиссииПриОтмене.ВидОплаты
					|			И ТаблицаОплатЧекаПродаж.ЭквайринговыйТерминал = ТаблицаПроцентовКомиссииПриОтмене.ЭквайринговыйТерминал");
					
					Запрос.УстановитьПараметр("Ссылка", ДанныеЗаполнения);
					
					Результат = Запрос.Выполнить();
					
					Если Не Результат.Пустой() Тогда
						Оплата.Загрузить(Результат.Выгрузить());
					КонецЕсли;
					
				Иначе
					Запрос = Новый Запрос("ВЫБРАТЬ
					|	ЧекККМОплата.ВидОплаты КАК ВидОплаты,
					|	ЧекККМОплата.ЭквайринговыйТерминал КАК ЭквайринговыйТерминал,
					|	ЧекККМОплата.Сумма КАК Сумма,
					|	ЧекККМОплата.ПроцентКомиссии КАК ПроцентКомиссии,
					|	ЧекККМОплата.СуммаКомиссии КАК СуммаКомиссии,
					|	ЧекККМОплата.СсылочныйНомер КАК СсылочныйНомер,
					|	ЧекККМОплата.НомерЧекаЭТ КАК НомерЧекаЭТ,
					|	ЧекККМОплата.НомерПлатежнойКарты КАК НомерПлатежнойКарты,
					|	ЧекККМОплата.ДанныеПереданыВБанк КАК ДанныеПереданыВБанк,
					|	ЧекККМОплата.СуммаБонусовВСкидках КАК СуммаБонусовВСкидках,
					|	ЧекККМОплата.КоличествоБонусов КАК КоличествоБонусов,
					|	ЧекККМОплата.КоличествоБонусовВСкидках КАК КоличествоБонусовВСкидках,
					|	ЧекККМОплата.БонуснаяПрограммаЛояльности КАК БонуснаяПрограммаЛояльности,
					|	ЧекККМОплата.ДоговорКонтрагента КАК ДоговорКонтрагента,
					|	ЧекККМОплата.КлючСвязиОплаты КАК КлючСвязиОплаты
					|ИЗ
					|	Документ.ЧекККМ.Оплата КАК ЧекККМОплата
					|ГДЕ
					|	ЧекККМОплата.Ссылка = &Ссылка
					|	И ЧекККМОплата.ВидОплаты.ТипОплаты = ЗНАЧЕНИЕ(Перечисление.ТипыОплатЧекаККМ.ВРассрочку)");
					
					Запрос.УстановитьПараметр("Ссылка", ДанныеЗаполнения);
					
					Результат = Запрос.Выполнить();
					Если Не Результат.Пустой() Тогда
						Оплата.Загрузить(Результат.Выгрузить());
					КонецЕсли;
				КонецЕсли;
				
				Если ЗначениеЗаполнено(ЧекККМПродажа) Тогда
					РаботаСПодарочнымиСертификатами.ДополнитьТоварыОстаткамиПодарочнхСертификатов(ЭтотОбъект, ЧекККМПродажа);
				КонецЕсли;
			КонецЕсли;
		Иначе
			
			ВызватьИсключение СтрШаблон(НСтр("ru = 'По документу %1 нельзя создать чек ККМ.'"), ДанныеЗаполнения);
			
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.ЗаказПокупателя") Тогда
		
		ОбщегоНазначенияРТ.ПроверитьВозможностьВводаНаОсновании(ДанныеЗаполнения);
		
		Если ДанныеЗаполнения.Статус = Перечисления.СтатусыЗаказовПокупателей.НеСогласован Тогда
			ТекстОшибки = НСтр("ru='Заказ не согласован.
			|Заполнение документа не выполнено.'");
			
			ВызватьИсключение ТекстОшибки;
		ИначеЕсли ДанныеЗаполнения.Статус = Перечисления.СтатусыЗаказовПокупателей.Закрыт Тогда
			ТекстОшибки = НСтр("ru='Заказ закрыт.
			|Заполнение документа не выполнено.'");
			
			ВызватьИсключение ТекстОшибки;
			
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, ДанныеЗаполнения, "Магазин, ДисконтнаяКарта, ЦенаВключаетНДС, ВладелецДисконтнойКарты, Организация, Продавец, Контрагент");
		
		ЗаказПокупателя = ДанныеЗаполнения.Ссылка;
		ВидОперации     = Перечисления.ВидыОперацийЧекККМ.Продажа;
		
		РозничныеПродажиСервер.ЗаполнитьПоОстаткамЗаказа(ЭтотОбъект, ЗаказПокупателя);
		
	ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("Структура") Тогда
		
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, ДанныеЗаполнения);
		
	ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.ПриходныйКассовыйОрдер") 
		ИЛИ ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.ОплатаОтПокупателяПлатежнойКартой")
		ИЛИ ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.РегистрацияБезналичнойОплаты") Тогда
		
		Если НЕ ДанныеЗаполнения.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПоступлениеОплатыОтКлиента Тогда
			ТекстОшибки = НСтр("ru='Чек можно создать только на основании поступления оплаты от клиента'");
			
			ВызватьИсключение ТекстОшибки;
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, ДанныеЗаполнения, "КассаККМ, Организация, СистемаНалогообложения, Контрагент");
		
		Если ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.РегистрацияБезналичнойОплаты") Тогда
			Если ТипЗнч(ДанныеЗаполнения.ДокументОснование) = Тип("ДокументСсылка.ЗаказПокупателя") Тогда
				ЗаказПокупателя = ДанныеЗаполнения.ДокументОснование;
			КонецЕсли;
		Иначе
			ЗаказПокупателя = ДанныеЗаполнения.ЗаказПокупателя;
		КонецЕсли;
		
		ДокументРасчета = ДанныеЗаполнения;
		Магазин = КассаККМ.Магазин;
		
		Если НЕ ЗначениеЗаполнено(Магазин) Тогда
			
			Если ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.ПриходныйКассовыйОрдер") Тогда 
				Магазин = ДанныеЗаполнения.Касса.Магазин;
			Иначе
				Магазин = ДанныеЗаполнения.Магазин;
			КонецЕсли;
			
		КонецЕсли;
		
		ЗаполнитьЗачетАванса();
		
	ИначеЕсли НЕ ДанныеЗаполнения = Неопределено Тогда
		
		ИспользоватьЗаказыПокупателей = ПолучитьФункциональнуюОпцию("ИспользоватьЗаказыПокупателей");
		
		Если ИспользоватьЗаказыПокупателей Тогда
			ТекстОшибки = НСтр("ru='Ввод на основании осуществляется для оформления возврата по чеку ККМ или для оформления продажи по заказу покупателя.
				|Заполнение документа не выполнено.'");
		Иначе
			ТекстОшибки = НСтр("ru='Ввод на основании осуществляется для оформления возврата по чеку ККМ.
				|Заполнение документа не выполнено.'");
		КонецЕсли;
			
		ВызватьИсключение ТекстОшибки;
			
		
	КонецЕсли;
	
	ИнициализироватьДокумент(ДанныеЗаполнения);
	ОбщегоНазначенияРТ.ПроверитьИспользованиеОрганизации(,,Организация);
	
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	// &ЗамерПроизводительности
	ВремяНачалаЗамера = ОценкаПроизводительности.НачатьЗамерВремени();

	ПродажиСервер.ПроверитьЗаполнениеТабличнойЧастиОплата(ЭтотОбъект, Отказ);
	
	ТипКассы = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(КассаККМ, "ТипКассы");
	Если мЗакрытиеСмены Тогда
		ПроведениеСервер.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства, РежимПроведения);
		ПроведениеСервер.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);
		Если НЕ Отказ Тогда
			ОбменССайтомРТ.ЗаписатьСостояниеОплатыЗаказаПокупателя(ЗаказПокупателя, Ссылка);
			ОбменССайтомРТ.ЗаписатьСостояниеДоставкиЗаказаПокупателя(ЗаказПокупателя, Ссылка);
		КонецЕсли;
		Возврат;
	ИначеЕсли ДополнительныеСвойства.Свойство("ЗагрузкаДанныхИзРабочегоМеста") Тогда
		Если НЕ ТипКассы = Перечисления.ТипыКассККМ.ККМED
			И (СтатусЧекаККМ = Перечисления.СтатусыЧековККМ.Архивный
			ИЛИ СтатусЧекаККМ = Перечисления.СтатусыЧековККМ.Аннулированный) Тогда
			ПроведениеСервер.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства, РежимПроведения);
			ПроведениеСервер.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);
			ЭтоАнулированный = СтатусЧекаККМ = Перечисления.СтатусыЧековККМ.Аннулированный;
			Если ЭтоАнулированный Тогда
				ОбменССайтомРТ.ЗаписатьСостояниеОплатыЗаказаПокупателя(ЗаказПокупателя, Ссылка, Ссылка);
				ОбменССайтомРТ.ЗаписатьСостояниеДоставкиЗаказаПокупателя(ЗаказПокупателя, Ссылка, Истина);
			Иначе
				ОбменССайтомРТ.ЗаписатьСостояниеОплатыЗаказаПокупателя(ЗаказПокупателя, Ссылка);
				ОбменССайтомРТ.ЗаписатьСостояниеДоставкиЗаказаПокупателя(ЗаказПокупателя, Ссылка);
			КонецЕсли;
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ПроведениеСервер.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства, РежимПроведения);
	
	ИспользуетсяКомиссионнаяТорговля = ДополнительныеСвойства.ИспользуетсяКомиссионнаяТорговля;
	ИспользуетсяУчетИмпортныхТоваров = ДополнительныеСвойства.ИспользуетсяУчетИмпортныхТоваров;
	
	Документы.ЧекККМ.ИнициализироватьДанныеДокумента(Ссылка, ДополнительныеСвойства);
	
	ПроведениеСервер.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);
	
	ПродажиСервер.ОтразитьПродажи(ДополнительныеСвойства, Движения, Отказ);
	ПродажиСервер.ОтразитьПродажиПоДисконтнымКартам(ДополнительныеСвойства, Движения, Отказ);
	ПродажиСервер.ОтразитьПродажиПоПлатежнымКартам(ДополнительныеСвойства, Движения, Отказ);
	ЗапасыСервер.ОтразитьТоварыНаСкладах(ДополнительныеСвойства, Движения, Отказ);
	
	Если ИспользуетсяКомиссионнаяТорговля 
		ИЛИ ИспользуетсяУчетИмпортныхТоваров Тогда
		ЗапасыСервер.ОтразитьТоварыОрганизаций(ДополнительныеСвойства, Движения, Отказ);
	КонецЕсли;
	
	ЗапасыСервер.ОтразитьДвиженияСерийныхНомеров(ДополнительныеСвойства, Движения, Отказ);
	ЗапасыСервер.ОтразитьДвиженияПодарочныхСертификатов(ДополнительныеСвойства, Движения, Отказ);
	ЗапасыСервер.ОтразитьДвиженияСерийТоваров(ДополнительныеСвойства, Движения, Отказ);
	ДенежныеСредстваСервер.ОтразитьДенежныеСредстваККМ(ДополнительныеСвойства, Движения, Отказ);
	ПродажиСервер.ОтразитьЗаказыПокупателей(ДополнительныеСвойства, Движения, Отказ);
	БонусныеБаллыСервер.ОтразитьБонусныеБаллы(ДополнительныеСвойства, Движения, Отказ);
	ДенежныеСредстваСервер.ОтразитьРасчетыСКлиентами(ДополнительныеСвойства, Движения, Отказ);
	РегистрыНакопления.ОстаткиАлкогольнойПродукцииЕГАИС.ОтразитьДвижения(ДополнительныеСвойства, Движения, Отказ);
	
	СформироватьСписокРегистровДляКонтроля(ДополнительныеСвойства);
	
	// Запись наборов записей
	ПроведениеСервер.ЗаписатьНаборыЗаписей(ЭтотОбъект);

	ПроведениеСервер.ВыполнитьКонтрольРезультатовПроведения(ЭтотОбъект, Отказ);

	ПроведениеСервер.ОчиститьДополнительныеСвойстваДляПроведения(ДополнительныеСвойства);
	
	ДополнительныеСвойства.Вставить("Отказ", Отказ);
	
	ОценкаПроизводительности.ЗакончитьЗамерВремени("ЧекККМПроведение",ВремяНачалаЗамера,Товары.Количество(), НСтр("ru = 'Вес по табличной части ""Товары""'"));
	
	Если НЕ Отказ Тогда
		ОбменССайтомРТ.ЗаписатьСостояниеОплатыЗаказаПокупателя(ЗаказПокупателя, Ссылка);
		ОбменССайтомРТ.ЗаписатьСостояниеДоставкиЗаказаПокупателя(ЗаказПокупателя, Ссылка);
		Если ДополнительныеСвойства.Свойство("СкорректироватьРегистрСведенийБонусныеБаллыКСписанию") Тогда
			СерверЛояльностиПоставщикДанных.СкорректироватьРегистрСведенийБонусныеБаллыКСписанию(ЭтотОбъект);
		КонецЕсли;
		Если ДополнительныеСвойства.Свойство("СкорректироватьРегистрСведенийПодарочныеСертификатыКСписанию") Тогда
			СерверЛояльностиПоставщикДанных.СкорректироватьРегистрСведенийПодарочныеСертификатыКСписанию(ЭтотОбъект);
		КонецЕсли;
		Если ТипКассы = Перечисления.ТипыКассККМ.ККМED Или ТипКассы = Перечисления.ТипыКассККМ.ККМOffline Тогда
			Документы.ЧекККМ.ПриИзмененииСтатусаЧека(Ссылка, Перечисления.СтатусыИнформированияЕГАИС.КПередаче,
				Перечисления.СтатусыИнформированияЕГАИС.ПереданВУТМ, Новый Структура);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	ОбработкаТабличнойЧастиТоварыСервер.ПроверитьЗаполнениеКоличества(ЭтотОбъект, ПроверяемыеРеквизиты, Отказ);
	
	ОбработкаТабличнойЧастиТоварыСервер.ПроверитьЗаполнениеКоличества(ЭтотОбъект, ПроверяемыеРеквизиты, Отказ, "Подарки");
	
	МассивНепроверяемыхРеквизитов = Новый Массив;
	МассивНепроверяемыхРеквизитов.Добавить("Товары.Склад");
	
	ОбработкаТабличнойЧастиТоварыСервер.ПроверитьЗаполнениеХарактеристик(ЭтотОбъект,МассивНепроверяемыхРеквизитов,Отказ);
	ОбработкаТабличнойЧастиТоварыСервер.ПроверитьЗаполнениеХарактеристик(ЭтотОбъект,МассивНепроверяемыхРеквизитов,Отказ,Новый Структура("ИмяТЧ","Подарки"));
	
	ПараметрыУказанияСерий = Документы.ЧекККМ.ПараметрыУказанияСерий(ЭтотОбъект);
	ОбработкаТабличнойЧастиТоварыСервер.ПроверитьЗаполнениеСерий(ЭтотОбъект, ПараметрыУказанияСерий, Отказ);
	
	ПараметрыУказанияСерий.Вставить("ИмяТЧТовары", "Подарки");
	ПараметрыУказанияСерий.Вставить("ИмяТЧСерии", "СерииПодарков");
	
	ОбработкаТабличнойЧастиТоварыСервер.ПроверитьЗаполнениеСерий(ЭтотОбъект, ПараметрыУказанияСерий, Отказ);
	
	ТипКассы = Неопределено;
	Если ЗначениеЗаполнено(КассаККМ) Тогда
		
		ТипКассы = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(КассаККМ, "ТипКассы");
		
		СтруктураСостояниеКассовойСмены = РозничныеПродажиСервер.ПолучитьСостояниеКассовойСмены(КассаККМ);
		
		КассоваяСмена = СтруктураСостояниеКассовойСмены.КассоваяСмена;
		
		ТекстОшибки = НСтр("ru='Кассовая смена не открыта.'");
		Если НЕ ТипКассы = Перечисления.ТипыКассККМ.ККМED
			И НЕ РозничныеПродажиСервер.СменаОткрыта(КассоваяСмена, Дата, ТекстОшибки) Тогда
			
			ОбщегоНазначения.СообщитьПользователю(
				ТекстОшибки,
				ЭтотОбъект,
				"КассаККМ",
				,
				Отказ);
			
		КонецЕсли;
		
	КонецЕсли;
	
	УчетПродукцииЕГАИС = ИнтеграцияЕГАИСВызовСервера.ИспользуетсяРегистрацияРозничныхПродажВЕГАИС(Организация, Магазин, Дата);
	УчетПродукцииИСМП = ИнтеграцияИСМПКлиентСерверПовтИсп.ВестиУчетМаркируемойПродукции();
	
	Если ВидОперации = Перечисления.ВидыОперацийЧекККМ.Возврат Тогда
		
		ПроверятьАкцизныеМарки = НЕ ТипКассы = Перечисления.ТипыКассККМ.ККМED
			И (УчетПродукцииЕГАИС ИЛИ УчетПродукцииИСМП);
		
		МаркетинговыеАкцииСервер.ПроверитьЧтоНетОплатыПодарочнымСертификатом(
			ЭтотОбъект,
			"Оплата",
			Отказ);
		
		ПродажиСервер.ПроверитьВозможностьВозвратаПоЧекуККМ(
			ЭтотОбъект,
			Отказ,,,,,
			ПроверятьАкцизныеМарки);
		
	Иначе
		
		ПродажиСервер.ПроверитьЗаполнениеСклада(
			ЭтотОбъект,
			"Товары",
			Отказ);
		
		МаркетинговыеАкцииСервер.ПроверитьЦеныСертификатов(
			ЭтотОбъект,
			"Товары",
			Отказ);
		
		Если НЕ ЗначениеЗаполнено(ЗаказПокупателя) Тогда
			МаркетинговыеАкцииСервер.ПроверитьЗаполнениеТабличнойЧастиСерийныеНомера(
				ЭтотОбъект,
				"Товары",
				"СерийныеНомера",
				Отказ);
		КонецЕсли;
		
		МаркетинговыеАкцииСервер.ПроверитьЗаполнениеТабличнойЧастиПогашениеПодарочныхСертификатов(
			ЭтотОбъект,
			"ПогашениеПодарочныхСертификатов",
			Отказ);
			
		Если НЕ ОперацияСДенежнымиСредствами
			И НЕ ТипКассы = Перечисления.ТипыКассККМ.ККМED
			И (СтатусЧекаККМ = Перечисления.СтатусыЧековККМ.Отложенный
			ИЛИ НЕ ЗначениеЗаполнено(СтатусЧекаККМ)) Тогда
			МаркетинговыеАкцииСервер.ПроверитьДвиженияСерийныхНомеров(
				ЭтотОбъект,
				"Товары",
				"СерийныеНомера",
				Отказ);
			
			// ЕГАИС.
			Если УчетПродукцииЕГАИС Тогда
				ИнтеграцияЕГАИСРТ.ПроверитьЗаполнениеДокумента(ЭтотОбъект, Отказ);
			КонецЕсли;
			
			// ИСМП.
			Если УчетПродукцииИСМП Тогда
				ИнтеграцияИСРТ.ПроверитьЗаполнениеАкцизныхМарок(ЭтотОбъект, Отказ);
			КонецЕсли;
			
		КонецЕсли;
		
		МаркетинговыеАкцииСервер.ПроверитьОкончаниеАбсолютныхСроковДействияСертификатов(
			ЭтотОбъект,
			"Товары",
			Отказ);
		
		МаркетинговыеАкцииСервер.ПроверитьДвиженияСерийныхНомеровДляПогашения(
			ЭтотОбъект,
			"ПогашениеПодарочныхСертификатов",
			Отказ);
			
		Если НЕ ЗначениеЗаполнено(ЗаказПокупателя) Тогда
			АссортиментСервер.ПроверитьАссортиментТаблицыТоваровДокументаПродажи(
				ЭтотОбъект,
				Отказ,
				Истина);
		КонецЕсли;
		
		СкидкиНаценкиСерверПереопределяемый.ПроверитьЗапретРозничнойПродажиТаблицыТоваров(
			ЭтотОбъект,
			"Товары",
			Отказ);
		
		МассивНепроверяемыхРеквизитов.Добавить("ЧекККМПродажа");
		МассивНепроверяемыхРеквизитов.Добавить("АналитикаХозяйственнойОперации");
		
	КонецЕсли;
	
	ТипОборудования = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(КассаККМ, "ПодключаемоеОборудование.ТипОборудования");
	Если ТипОборудования = Перечисления.ТипыПодключаемогоОборудования.ККТ Тогда
		ПродажиСервер.ПроверитьОтсутствиеРазличныхРежимовНалогообложения(ЭтотОбъект, Отказ);
	КонецЕсли;
	
	Если Документы.ЧекККМ.ВозможностьПустойТЧТовары(ЭтотОбъект) Тогда
		МассивНепроверяемыхРеквизитов.Добавить("Товары");
	КонецЕсли;
	
	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов);
	
	// В погашении только подарочные сертификаты.
	ПродажиСервер.ПроверитьЗаполнениеТабличнойЧастиОплата(
		ЭтотОбъект,
		Отказ);
		
	ПродажиСервер.ПроверитьСистемуНалогообложения(ЭтотОбъект, Отказ);
		
	// В погашении только подарочные сертификаты.
	МаркетинговыеАкцииСервер.ПроверитьТабличнуюЧастьПогашения(
		ЭтотОбъект,
		Отказ);
	
	МаркетинговыеАкцииСервер.ПроверитьЧтоНетПодарочныхСертификатов(
		ЭтотОбъект,
		"Подарки",
		Отказ);
	
КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)
	
	ПроведениеСервер.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства);
	
	ПроведениеСервер.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);
	
	ПроведениеСервер.ЗаписатьНаборыЗаписей(ЭтотОбъект);
	
	Если НЕ Отказ Тогда
		ОбменССайтомРТ.ЗаписатьСостояниеОплатыЗаказаПокупателя(ЗаказПокупателя, Ссылка, Ссылка);
		ОбменССайтомРТ.ЗаписатьСостояниеДоставкиЗаказаПокупателя(ЗаказПокупателя, Ссылка, Истина);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	ТипКассыККМ = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(КассаККМ, "ТипКассы");
	
	ПроведениеСервер.УстановитьРежимПроведения(Проведен, РежимЗаписи, РежимПроведения);
	
	ДополнительныеСвойства.Вставить("ЭтоНовый",    ЭтоНовый());
	ДополнительныеСвойства.Вставить("РежимЗаписи", РежимЗаписи);
	
	Если ТипКассыККМ = Перечисления.ТипыКассККМ.ККМED И ПолучитьФункциональнуюОпцию("ИспользоватьСерверЛояльностиПоставщикДанных") Тогда 
		СконвертироватьСуммуОплатыБонусамиВКоличествоБаллов();
		ПроверитьОплатуПодарочнымиСертификатами();
	КонецЕсли;
	
	СтатусЧекаККМПоСсылке = СтатусЧекаККМПоСсылке(Ссылка);
	
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ПеренестиДоговорКотрагентаВТЧ(ЭтотОбъект);
	
	КонтрагентРозничныйПокупатель = Константы.КонтрагентРозничныйПокупатель.Получить();
	Если НЕ Контрагент = КонтрагентРозничныйПокупатель И ЗначениеЗаполнено(Контрагент) И Контрагент.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ФизЛицо
		И НЕ ЗначениеЗаполнено(СтатусЧекаККМ)
		И РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		
		ЕстьОшибка = Ложь;
		ФизЛицо = Контрагент.ФизЛицо;
		
		Если НЕ ЗначениеЗаполнено(ФизЛицо) Тогда
			ЕстьОшибка = Истина;
			Текст = НСтр("ru='У контрагента не указано физ.лицо.'");
		ИначеЕсли ЗащитаПерсональныхДанных.ЭтоОбъектСоСкрытымиПерсональнымиДанными(ФизЛицо) Тогда
			ЕстьОшибка = Истина;
			Текст = НСтр("ru='Контрагент - физ.лицо со скрытыми персональными данными.'");
		КонецЕсли;
		
		Если ЕстьОшибка Тогда
			ОбщегоНазначения.СообщитьПользователю(
					Текст,
					ЭтотОбъект,
					,
					,
					Отказ);
		КонецЕсли;
		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Контрагент) Тогда
		Контрагент = КонтрагентРозничныйПокупатель;
	КонецЕсли;
	
	Если Не СтатусЧекаККМ = Перечисления.СтатусыЧековККМ.Пробитый 
		И Не РежимРМК
		И СтатусЧекаККМПоСсылке = Перечисления.СтатусыЧековККМ.Отложенный
		И НЕ ДополнительныеСвойства.Свойство("ЗагрузкаДанныхИзРабочегоМеста") Тогда
		
		СтатусЧекаККМ = Перечисления.СтатусыЧековККМ.ПустаяСсылка();
		
	КонецЕсли;
	
	Если ((СтатусЧекаККМПоСсылке = Перечисления.СтатусыЧековККМ.Пробитый
	 И Не мЗакрытиеСмены)
	 ИЛИ СтатусЧекаККМПоСсылке = Перечисления.СтатусыЧековККМ.Архивный) 
	 И (НЕ ДополнительныеСвойства.Свойство("ЗагрузкаДанныхИзРабочегоМеста")) Тогда
	    	
		Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Чек имеет статус ""%1"". Операции над этим документом запрещены.'"),
			СтатусЧекаККМ
		);
		
		ОбщегоНазначения.СообщитьПользователю(
			Текст,
			ЭтотОбъект,
			,
			,
			Отказ
		);
		
	КонецЕсли;
	
	// Очистим заказ покупателя в табличной части при необходимости.
	Если НЕ ЗначениеЗаполнено(ЗаказПокупателя) Тогда
		Для Каждого Строка Из Товары Цикл
			Строка.ЗаказПокупателя = ЗаказПокупателя;
			Строка.КодСтроки       = Неопределено;
			Строка.Резервировать   = Ложь;
		КонецЦикла;
	КонецЕсли;
	
	ОбщегоНазначенияРТ.УдалитьНеиспользуемыеСтрокиСерий(ЭтотОбъект,Документы.ЧекККМ.ПараметрыУказанияСерий(ЭтотОбъект));
	Если НЕ Отказ Тогда
		Если Товары.Количество() > 0 Тогда
			ОбщегоНазначенияРТ.УстановитьНовоеЗначениеРеквизита(
				ЭтотОбъект,
				ОбработкаТабличнойЧастиТоварыКлиентСервер.СуммаДокумента(Товары, ЦенаВключаетНДС),
				"СуммаДокумента");
		Иначе
			ОбщегоНазначенияРТ.УстановитьНовоеЗначениеРеквизита(
				ЭтотОбъект,
				Оплата.Итог("Сумма"),
				"СуммаДокумента");
		КонецЕсли;
		
		РаспределитьОплатуАгентскихПлатежей();
		
	КонецЕсли;
	
	ДополнительныеСвойства.Вставить("Отказ", Отказ);
	
	Если ЭтоНовый() И НЕ ЗначениеЗаполнено(Номер) Тогда
		УстановитьНовыйНомер();
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(УникальныйИдентификаторПлатежа) Тогда
		УникальныйИдентификаторПлатежа = ОнлайнОплатыРТ.ПолучитьУникальныйИдентификаторПлатежа(ЭтотОбъект);
	КонецЕсли;
	
	ВыручкаНаличными = ВыручкаНаличными();
	
	Если ТипКассыККМ = Перечисления.ТипыКассККМ.ККМED Или ТипКассыККМ = Перечисления.ТипыКассККМ.ККМOffline Тогда
		ЗаполнитьСправки2ЕГАИС();
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриЗаписи(Отказ)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)
	
	СтатусЧекаККМ           = Перечисления.СтатусыЧековККМ.ПустаяСсылка();
	ОтчетОРозничныхПродажах = Документы.ОтчетОРозничныхПродажах.ПустаяСсылка();
	ЗаказПокупателя         = Документы.ЗаказПокупателя.ПустаяСсылка();
	
	Оплачивается = Ложь;
	НомерСменыККМ = 0;
	НомерЧекаККМ  = 0;
	АдресЧекаЕГАИС = "";
	ПодписьЧекаЕГАИС = "";
	ИдентификаторЧекаВОчереди = "";
	
	Подарки.Очистить();
	Оплата.Очистить();
	ПогашениеПодарочныхСертификатов.Очистить();
	СерийныеНомера.Очистить();
	АкцизныеМарки.Очистить();
	Серии.Очистить();
	СерииПодарков.Очистить();
	БонусныеБаллыКНачислению.Очистить();
	ПредъявленныеКодыОднократныхСкидок.Очистить();
	СкидкиНаценкиСерверПереопределяемый.ОчиститьТоварыОтПодарков(ЭтотОбъект);
	
	//ИнтеграцияИСМПТК
	КодыМаркировкиИСМПТК.Очистить();
	//Конец ИнтеграцияИСМПТК
	
	ОчиститьОплатуБонусамиВТоварах();
	СкидкиРассчитаны = Ложь;
	СкидкиНаценкиСервер.ОтменитьСкидки(ЭтотОбъект, "Товары", "СуммаСкидкиОплатыБонусом");
	
	Если ЗначениеЗаполнено(ЧекККМПродажа)
		И ВидОперации = Перечисления.ВидыОперацийЧекККМ.Возврат Тогда
		
		ЧекККМПродажа = Документы.ЧекККМ.ПустаяСсылка();
		
	КонецЕсли;
	
	УчетНДС.СкорректироватьНДСВТЧДокумента(ЭтотОбъект, Товары);
	
	ИнициализироватьДокумент();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Процедура выполняет проверку возможности ввода чека на основании.
//
// Параметры:
//  ДанныеЗаполнения - данные заполнения на основании.
Процедура ПроверитьВозможностьВводаНаОснованииЧекаККМ(ДанныеЗаполнения)

	// Проверить возможность ввода чека на возврат на основании чека ККМ.
	
	СтатусЧекаККМЗнач = ДанныеЗаполнения.СтатусЧекаККМ;
	Если СтатусЧекаККМЗнач = Перечисления.СтатусыЧековККМ.Аннулированный
		 ИЛИ СтатусЧекаККМЗнач = Перечисления.СтатусыЧековККМ.Отложенный Тогда
			ТекстИсключения = НСтр("ru='Ввод чека на основании чека со статусом: ""%СтатусЧекаККМ%"" не допускается.'");
			ТекстИсключения = СтрЗаменить(ТекстИсключения, "%СтатусЧекаККМ%", СтатусЧекаККМЗнач);
			ВызватьИсключение ТекстИсключения;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьВозможностьВводаНаОснованииЧекаККМПродажи(ДанныеЗаполнения)
	
	Если НЕ ДанныеЗаполнения.ОперацияСДенежнымиСредствами 
		И ДанныеЗаполнения.ВидОперации = Перечисления.ВидыОперацийЧекККМ.Продажа Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЧекККМ.СуммаДокумента КАК СуммаДокумента
		|ПОМЕСТИТЬ ТаблицаСумма
		|ИЗ
		|	Документ.ЧекККМ КАК ЧекККМ
		|ГДЕ
		|	ЧекККМ.Ссылка = &Ссылка
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	-ЧекККМОплата.Сумма
		|ИЗ
		|	Документ.ЧекККМ.Оплата КАК ЧекККМОплата
		|ГДЕ
		|	ЧекККМОплата.Ссылка = &Ссылка
		|	И ЧекККМОплата.ВидОплаты.ТипОплаты <> &ТипОплатыВРассрочку
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СУММА(ТаблицаСумма.СуммаДокумента) КАК Сумма
		|ИЗ
		|	ТаблицаСумма КАК ТаблицаСумма";
		
		Запрос.УстановитьПараметр("Ссылка", ДанныеЗаполнения);
		Запрос.УстановитьПараметр("ТипОплатыВРассрочку", Перечисления.ТипыОплатЧекаККМ.ВРассрочку);
		
		Результат = Запрос.Выполнить();
		Выборка = Результат.Выбрать();
		
		Если Выборка.Следующий() Тогда
			Если Выборка.Сумма = 0 Тогда
				ТекстИсключения = НСтр("ru='Товар уже отгружен и оплачен полностью'");
				ВызватьИсключение ТекстИсключения;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

// Инициализирует документ
//
Процедура ИнициализироватьДокумент(ДанныеЗаполнения = Неопределено)

	Ответственный = Пользователи.ТекущийПользователь();
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("Структура") Тогда
		ЗаполнитьЗначенияСвойств(ЭтотОбъект,ДанныеЗаполнения);
		Если ДанныеЗаполнения.Свойство("КассаККМ") Тогда
			КассаККМ      = ДанныеЗаполнения.КассаККМ;
			Магазин       = КассаККМ.Магазин;
			Организация   = КассаККМ.Владелец;
		Иначе
			Магазин       = ЗначениеНастроекПовтИсп.МагазинПоУмолчанию(Магазин);
			Организация   = ЗначениеНастроекПовтИсп.ОрганизацияПоУмолчанию(Организация, Ответственный);
			КассаККМ      = ЗначениеНастроекПовтИсп.КассаККМПоУмолчанию(Организация, Магазин, КассаККМ, Ответственный);
		КонецЕсли;
	КонецЕсли;
	
	Продавец = ЗначениеНастроекПовтИсп.ПродавецПоУмолчанию(Ответственный, Продавец);
	
	Если НЕ ВидОперации = Перечисления.ВидыОперацийЧекККМ.Возврат Тогда
		ЦенаВключаетНДС = ОбщегоНазначенияРТ.ЗначениеРеквизитаВПривилегированномРежиме(Магазин.ПравилоЦенообразования, "ЦенаВключаетНДС");
	КонецЕсли; 
	
	
	Если ВидОперации = Перечисления.ВидыОперацийЧекККМ.Возврат Тогда
		АналитикаХозяйственнойОперации = ЗначениеНастроекПовтИсп.АналитикаХозяйственнойОперацииПоУмолчанию(АналитикаХозяйственнойОперации, Перечисления.ХозяйственныеОперации.ВозвратОтПокупателя);
	Иначе
		АналитикаХозяйственнойОперации = Справочники.АналитикаХозяйственныхОпераций.РеализацияТоваров;
	КонецЕсли;
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("Структура") Тогда
		Если ДанныеЗаполнения.Свойство("КассаККМ")
			И НЕ ЗначениеЗаполнено(КассаККМ) Тогда
			Если ЗначениеЗаполнено(Организация) Тогда
				Если ДанныеЗаполнения.КассаККМ.Владелец <> Организация Тогда
					ДанныеЗаполнения.КассаККМ = Справочники.КассыККМ.ПустаяСсылка();	
				КонецЕсли
			Иначе
				Организация = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеЗаполнения.КассаККМ, "Владелец");
			КонецЕсли;
			
			Магазин = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеЗаполнения.КассаККМ, "Магазин");
			
		КонецЕсли;
	КонецЕсли;
	
	Если ДанныеЗаполнения = Неопределено Тогда
		ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьДоговорПлатежногоАгентаВТЧСервер(Товары);
	Иначе
		ОбработкаТабличнойЧастиТоварыКлиентСервер.ПеренестиДоговорКотрагентаВТЧ(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

Процедура СформироватьСписокРегистровДляКонтроля(ДополнительныеСвойства)

	Массив = Новый Массив;
	
	ИспользуетсяКомиссионнаяТорговля = ДополнительныеСвойства.ИспользуетсяКомиссионнаяТорговля;
	ИспользуетсяУчетИмпортныхТоваров = ДополнительныеСвойства.ИспользуетсяУчетИмпортныхТоваров;
	ИспользоватьУчетПрослеживаемыхИмпортныхТоваров 	= ПолучитьФункциональнуюОпцию("ИспользоватьУчетПрослеживаемыхИмпортныхТоваров");
	ТребуетсяКонтрольПрослеживаемыхТоваров 			= УправлениеПользователями.ПолучитьБулевоЗначениеПраваПользователя(
														ПланыВидовХарактеристик.ПраваПользователей.КонтролироватьОстатокПрослеживаемогоТовараПриПроведении, Ложь);
	
	Если НЕ РежимРМК = Истина Тогда // Иногда может быть НЕОПРЕДЕЛЕНО.
		
		// При проведении выполняется контроль превышения остатков на складах.
		Если ДополнительныеСвойства.РежимЗаписи = РежимЗаписиДокумента.Проведение 
			И НЕ ДополнительныеСвойства.Свойство("ЗагрузкаДанныхИзРабочегоМеста") Тогда
			
			Массив.Добавить(Движения.ТоварыНаСкладах);
			Массив.Добавить(Движения.ДвиженияСерийныхНомеров);
			Массив.Добавить(Движения.ПодарочныеСертификаты);
			Массив.Добавить(Движения.ЗаказыПокупателей);
			Если ВидОперации = Перечисления.ВидыОперацийЧекККМ.Возврат Тогда
				Массив.Добавить(Движения.ДенежныеСредстваККМ);
			КонецЕсли;
			
			Если ИспользоватьУчетПрослеживаемыхИмпортныхТоваров И ТребуетсяКонтрольПрослеживаемыхТоваров Тогда
				Если УчетПрослеживаемыхТоваровРТ.ЭтоПрослеживаемыйДокумент(Товары, Дата) Тогда
					Массив.Добавить(Движения.ТоварыОрганизаций);
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	ДополнительныеСвойства.ДляПроведения.Вставить("РегистрыДляКонтроля", Массив);

КонецПроцедуры

Процедура РаспределитьОплатуАгентскихПлатежей()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЧекККМТовары.НомерСтроки КАК НомерСтроки,
		|	ВЫРАЗИТЬ(ЧекККМТовары.Номенклатура КАК Справочник.Номенклатура) КАК Номенклатура,
		|	ВЫБОР
		|		КОГДА &ДоговорКонтрагентаШапка = ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)
		|			ТОГДА ЧекККМТовары.ДоговорКонтрагента
		|		ИНАЧЕ &ДоговорКонтрагентаШапка
		|	КОНЕЦ КАК ДоговорКонтрагента,
		|	ЧекККМТовары.Сумма КАК Сумма
		|ПОМЕСТИТЬ Товары
		|ИЗ
		|	&Товары КАК ЧекККМТовары
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВЫРАЗИТЬ(ЧекККМОплата.ВидОплаты КАК Справочник.ВидыОплатЧекаККМ) КАК ВидОплаты,
		|	ЧекККМОплата.ЭквайринговыйТерминал КАК ЭквайринговыйТерминал,
		|	ЧекККМОплата.ИдентификаторПлатежнойСистемы КАК ИдентификаторПлатежнойСистемы,
		|	ЧекККМОплата.Сумма КАК Сумма,
		|	ЧекККМОплата.ПроцентКомиссии КАК ПроцентКомиссии,
		|	ЧекККМОплата.СуммаКомиссии КАК СуммаКомиссии,
		|	ЧекККМОплата.СсылочныйНомер КАК СсылочныйНомер,
		|	ЧекККМОплата.НомерЧекаЭТ КАК НомерЧекаЭТ,
		|	ЧекККМОплата.НомерПлатежнойКарты КАК НомерПлатежнойКарты,
		|	ЧекККМОплата.ДанныеПереданыВБанк КАК ДанныеПереданыВБанк,
		|	ЧекККМОплата.СуммаБонусовВСкидках КАК СуммаБонусовВСкидках,
		|	ЧекККМОплата.КоличествоБонусов КАК КоличествоБонусов,
		|	ЧекККМОплата.КоличествоБонусовВСкидках КАК КоличествоБонусовВСкидках,
		|	ЧекККМОплата.БонуснаяПрограммаЛояльности КАК БонуснаяПрограммаЛояльности
		|ПОМЕСТИТЬ Оплата
		|ИЗ
		|	&Оплата КАК ЧекККМОплата
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Оплата.ВидОплаты КАК ВидОплаты,
		|	Оплата.ЭквайринговыйТерминал КАК ЭквайринговыйТерминал,
		|	Оплата.ИдентификаторПлатежнойСистемы КАК ИдентификаторПлатежнойСистемы,
		|	СУММА(Оплата.Сумма) КАК Сумма,
		|	Оплата.ПроцентКомиссии КАК ПроцентКомиссии,
		|	СУММА(Оплата.СуммаКомиссии) КАК СуммаКомиссии,
		|	Оплата.СсылочныйНомер КАК СсылочныйНомер,
		|	Оплата.НомерЧекаЭТ КАК НомерЧекаЭТ,
		|	Оплата.НомерПлатежнойКарты КАК НомерПлатежнойКарты,
		|	Оплата.ДанныеПереданыВБанк КАК ДанныеПереданыВБанк,
		|	СУММА(Оплата.СуммаБонусовВСкидках) КАК СуммаБонусовВСкидках,
		|	СУММА(Оплата.КоличествоБонусов) КАК КоличествоБонусов,
		|	СУММА(Оплата.КоличествоБонусовВСкидках) КАК КоличествоБонусовВСкидках,
		|	Оплата.БонуснаяПрограммаЛояльности КАК БонуснаяПрограммаЛояльности
		|ПОМЕСТИТЬ ОплатаИтоговая
		|ИЗ
		|	Оплата КАК Оплата
		|
		|СГРУППИРОВАТЬ ПО
		|	Оплата.ВидОплаты,
		|	Оплата.ЭквайринговыйТерминал,
		|	Оплата.ИдентификаторПлатежнойСистемы,
		|	Оплата.ПроцентКомиссии,
		|	Оплата.СсылочныйНомер,
		|	Оплата.НомерЧекаЭТ,
		|	Оплата.НомерПлатежнойКарты,
		|	Оплата.ДанныеПереданыВБанк,
		|	Оплата.БонуснаяПрограммаЛояльности
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВЫБОР
		|		КОГДА Оплата.ВидОплаты.ТипОплаты = &ПлатежнаяКарта
		|			ТОГДА 1
		|		КОГДА Оплата.ВидОплаты.ТипОплаты = &Наличные
		|			ТОГДА 2
		|		ИНАЧЕ 3
		|	КОНЕЦ КАК ПриоритетОплаты,
		|	Оплата.ВидОплаты.ТипОплаты КАК ТипОплаты,
		|	Оплата.ВидОплаты КАК ВидОплаты,
		|	Оплата.ЭквайринговыйТерминал КАК ЭквайринговыйТерминал,
		|	Оплата.ИдентификаторПлатежнойСистемы КАК ИдентификаторПлатежнойСистемы,
		|	Оплата.ПроцентКомиссии КАК ПроцентКомиссии,
		|	Оплата.СсылочныйНомер КАК СсылочныйНомер,
		|	Оплата.НомерЧекаЭТ КАК НомерЧекаЭТ,
		|	Оплата.НомерПлатежнойКарты КАК НомерПлатежнойКарты,
		|	Оплата.ДанныеПереданыВБанк КАК ДанныеПереданыВБанк,
		|	Оплата.БонуснаяПрограммаЛояльности КАК БонуснаяПрограммаЛояльности,
		|	&ПустойДоговор КАК ДоговорКонтрагента,
		|	СУММА(Оплата.СуммаКомиссии) КАК СуммаКомиссии,
		|	СУММА(Оплата.Сумма) КАК Сумма,
		|	СУММА(Оплата.СуммаБонусовВСкидках) КАК СуммаБонусовВСкидках,
		|	СУММА(Оплата.КоличествоБонусов) КАК КоличествоБонусов,
		|	СУММА(Оплата.КоличествоБонусовВСкидках) КАК КоличествоБонусовВСкидках
		|ИЗ
		|	Оплата КАК Оплата
		|
		|СГРУППИРОВАТЬ ПО
		|	ВЫБОР
		|		КОГДА Оплата.ВидОплаты.ТипОплаты = &Наличные
		|			ТОГДА 1
		|		КОГДА Оплата.ВидОплаты.ТипОплаты = &ПлатежнаяКарта
		|			ТОГДА 2
		|		ИНАЧЕ 3
		|	КОНЕЦ,
		|	Оплата.ВидОплаты.ТипОплаты,
		|	Оплата.ВидОплаты,
		|	Оплата.ЭквайринговыйТерминал,
		|	Оплата.ИдентификаторПлатежнойСистемы,
		|	Оплата.ПроцентКомиссии,
		|	Оплата.СсылочныйНомер,
		|	Оплата.НомерЧекаЭТ,
		|	Оплата.НомерПлатежнойКарты,
		|	Оплата.ДанныеПереданыВБанк,
		|	Оплата.БонуснаяПрограммаЛояльности,
		|	ВЫБОР
		|		КОГДА Оплата.ВидОплаты.ТипОплаты = &ПлатежнаяКарта
		|			ТОГДА 1
		|		КОГДА Оплата.ВидОплаты.ТипОплаты = &Наличные
		|			ТОГДА 2
		|		ИНАЧЕ 3
		|	КОНЕЦ
		|
		|УПОРЯДОЧИТЬ ПО
		|	ПриоритетОплаты
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Товары.ДоговорКонтрагента КАК ДоговорКонтрагента,
		|	СУММА(Товары.Сумма) КАК Сумма
		|ИЗ
		|	Товары КАК Товары
		|ГДЕ
		|	Товары.ДоговорКонтрагента <> &ПустойДоговор
		|
		|СГРУППИРОВАТЬ ПО
		|	Товары.ДоговорКонтрагента
		|
		|УПОРЯДОЧИТЬ ПО
		|	Товары.ДоговорКонтрагента";
	
	Запрос.УстановитьПараметр("Товары", Товары.Выгрузить());
	Запрос.УстановитьПараметр("Оплата", Оплата.Выгрузить());
	Запрос.УстановитьПараметр("Наличные", Перечисления.ТипыОплатЧекаККМ.Наличные);
	Запрос.УстановитьПараметр("ПлатежнаяКарта", Перечисления.ТипыОплатЧекаККМ.ПлатежнаяКарта);
	Запрос.УстановитьПараметр("ПустойДоговор", Справочники.ДоговорыКонтрагентов.ПустаяСсылка());
	Запрос.УстановитьПараметр("ДоговорКонтрагентаШапка", ДоговорКонтрагента);
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	ТаблицаОплат = РезультатЗапроса[3].Выгрузить();
	НоваяТаблицаОплат = ТаблицаОплат.СкопироватьКолонки();
	ТаблицаАгентскихПлатежей = РезультатЗапроса[4].Выгрузить();
	
	Оплата.Очистить();
	
	Для Каждого АгентскаяСтрока Из ТаблицаАгентскихПлатежей Цикл
		Если АгентскаяСтрока.Сумма > 0 Тогда
			МассивУдаляемыхСтрок = Новый Массив;
			Для Каждого СтрокаОплаты Из ТаблицаОплат Цикл
				Если СтрокаОплаты.Сумма <= 0
					ИЛИ СтрокаОплаты.ТипОплаты = Перечисления.ТипыОплатЧекаККМ.Бонусы
					ИЛИ ЗначениеЗаполнено(СтрокаОплаты.ДоговорКонтрагента) Тогда
					Продолжить;
				КонецЕсли;
				Если СтрокаОплаты.Сумма > АгентскаяСтрока.Сумма Тогда
					НоваяСтрока = НоваяТаблицаОплат.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаОплаты);
					НоваяСтрока.ДоговорКонтрагента = АгентскаяСтрока.ДоговорКонтрагента;
					НоваяСтрока.Сумма = АгентскаяСтрока.Сумма;
					СтрокаОплаты.Сумма = СтрокаОплаты.Сумма - АгентскаяСтрока.Сумма;
					АгентскаяСтрока.Сумма = 0;
					Прервать;
				Иначе
					НоваяСтрока = НоваяТаблицаОплат.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаОплаты);
					НоваяСтрока.ДоговорКонтрагента = АгентскаяСтрока.ДоговорКонтрагента;
					НоваяСтрока.Сумма = СтрокаОплаты.Сумма;
					АгентскаяСтрока.Сумма = АгентскаяСтрока.Сумма - СтрокаОплаты.Сумма;
					СтрокаОплаты.Сумма = 0;
					МассивУдаляемыхСтрок.Добавить(СтрокаОплаты);
					Если АгентскаяСтрока.Сумма = 0 Тогда
						Прервать;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			Для Каждого УдаляемаяСтрока Из МассивУдаляемыхСтрок Цикл
				ТаблицаОплат.Удалить(УдаляемаяСтрока);
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	Для Каждого СтрокаОплаты Из НоваяТаблицаОплат Цикл
		НоваяСтрока = ТаблицаОплат.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаОплаты);
	КонецЦикла;
	
	Оплата.Загрузить(ТаблицаОплат);
	
КонецПроцедуры

Процедура ОчиститьОплатуБонусамиВТоварах()
	Для Каждого СтрокаТовара Из Товары Цикл
		СтрокаТовара.КодСтроки = 0;
		Если СтрокаТовара.СуммаСкидкиОплатыБонусом <> 0 Тогда
			СтрокаТовара.Сумма = СтрокаТовара.Сумма + СтрокаТовара.СуммаСкидкиОплатыБонусом;
			СтрокаТовара.СуммаСкидкиОплатыБонусом = 0;
			СтрокаТовара.СуммаНДС = ОбработкаТабличнойЧастиТоварыКлиентСервер.СуммаНДС(СтрокаТовара.Сумма,
																							СтрокаТовара.СтавкаНДС,
																							ЦенаВключаетНДС);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

Функция СтатусЧекаККМПоСсылке(ДокументСсылка)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ЧекККМ.СтатусЧекаККМ
	|ИЗ
	|	Документ.ЧекККМ КАК ЧекККМ
	|ГДЕ
	|	ЧекККМ.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат ВыБорка.СтатусЧекаККМ
	Иначе
		Возврат Перечисления.СтатусыЧековККМ.ПустаяСсылка()
	КонецЕсли;
	
КонецФункции

Процедура ЗаполнитьЗачетАванса()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	РасчетыСКлиентамиОстатки.ДокументРасчета,
	|	РасчетыСКлиентамиОстатки.СуммаОстаток КАК Сумма
	|ИЗ
	|	РегистрНакопления.РасчетыСКлиентами.Остатки(, ДокументРасчета = &ДокументРасчета) КАК РасчетыСКлиентамиОстатки
	|ГДЕ
	|	РасчетыСКлиентамиОстатки.СуммаОстаток > 0";
	
	Запрос.УстановитьПараметр("ДокументРасчета", ДокументРасчета);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Если Выборка.Следующий() Тогда
		
		СтрокаОплаты = Оплата.Добавить();
		
		Если ТипЗнч(ДокументРасчета) = Тип("ДокументСсылка.РегистрацияБезналичнойОплаты")
			И НЕ ФинансыСервер.ПробитЧекНаБезналичныйПлатеж(Ссылка, ДокументРасчета) Тогда
			СтрокаОплаты.ВидОплаты = Справочники.ВидыОплатЧекаККМ.БанковскийПлатеж;
		Иначе
			СтрокаОплаты.ВидОплаты = Справочники.ВидыОплатЧекаККМ.ЗачетАванса;
		КонецЕсли;
		СтрокаОплаты.Сумма = Выборка.Сумма;
		
	КонецЕсли;
	
КонецПроцедуры

Функция ВыручкаНаличными()
	
	ЭтоАванс = Товары.Количество() = 0;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаОплат.ВидОплаты КАК ВидОплаты,
	|	ТаблицаОплат.Сумма КАК Сумма
	|ПОМЕСТИТЬ ВременнаяТаблица
	|ИЗ
	|	&ТаблицаОплат КАК ТаблицаОплат;
	|////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СУММА(ВЫБОР
	|			КОГДА ВременнаяТаблица.ВидОплаты.ТипОплаты = ЗНАЧЕНИЕ(Перечисление.ТипыОплатЧекаККМ.Наличные)
	|				ТОГДА ВременнаяТаблица.Сумма
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК СуммаНаличных,
	|	СУММА(ВЫБОР
	|			КОГДА ВременнаяТаблица.ВидОплаты.ТипОплаты = ЗНАЧЕНИЕ(Перечисление.ТипыОплатЧекаККМ.Бонусы)
	|				ТОГДА ВременнаяТаблица.Сумма
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК СуммаБонусов,
	|	СУММА(ВременнаяТаблица.Сумма) КАК Сумма
	|ИЗ
	|	ВременнаяТаблица КАК ВременнаяТаблица";
		
	Запрос.УстановитьПараметр("ТаблицаОплат", ЭтотОбъект.Оплата);
			Результат = Запрос.Выполнить();
	
	СуммаНаличных    = 0;
	СуммаБонусов     = 0;
	СуммаОбщая       = 0;
	СуммаБезналичных = 0;
	
	Если НЕ Результат.Пустой() Тогда
		
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		
		СуммаНаличных = Выборка.СуммаНаличных;
		Если НЕ ЗначениеЗаполнено(СуммаНаличных) Тогда
			СуммаНаличных = 0;
		КонецЕсли;
		СуммаБонусов = Выборка.СуммаБонусов;
		Если НЕ ЗначениеЗаполнено(СуммаБонусов) Тогда
			СуммаБонусов = 0;
		КонецЕсли;
		СуммаОбщая = Выборка.Сумма;
		
		Если НЕ ЗначениеЗаполнено(СуммаОбщая) Тогда
			СуммаОбщая = 0;
		КонецЕсли;
		СуммаБезналичных = СуммаОбщая - СуммаНаличных - СуммаБонусов;
		
	КонецЕсли;
	
	Если НЕ ЭтоАванс Тогда
		СуммаНаличных = Мин(ЭтотОбъект.СуммаДокумента - СуммаБезналичных, СуммаНаличных);
	КонецЕсли;
	
	Возврат СуммаНаличных;
	
КонецФункции

Процедура СконвертироватьСуммуОплатыБонусамиВКоличествоБаллов()

	Для каждого СтрокаОплаты Из Оплата Цикл
		Если СтрокаОплаты.СуммаБонусовВСкидках <> 0 
			И СтрокаОплаты.КоличествоБонусовВСкидках = 0 Тогда 
			
			Если Не ЗначениеЗаполнено(СтрокаОплаты.БонуснаяПрограммаЛояльности) Тогда 
				СтрокаОплаты.БонуснаяПрограммаЛояльности = ДисконтнаяКарта.БонуснаяПрограммаЛояльности;
			КонецЕсли;
			
			Если Не ЗначениеЗаполнено(СтрокаОплаты.БонуснаяПрограммаЛояльности) Тогда 
				Продолжить;
			КонецЕсли;
			
			КурсКонвертацииБонусовВВалюту = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрокаОплаты.БонуснаяПрограммаЛояльности, "КурсКонвертацииБонусовВВалюту");
			
			Если КурсКонвертацииБонусовВВалюту = 0 Тогда 
				Продолжить;
			КонецЕсли;
			
			СтрокаОплаты.КоличествоБонусовВСкидках = СтрокаОплаты.СуммаБонусовВСкидках / КурсКонвертацииБонусовВВалюту; 
			ДополнительныеСвойства.Вставить("СкорректироватьРегистрСведенийБонусныеБаллыКСписанию", Истина);
			
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

Процедура ПроверитьОплатуПодарочнымиСертификатами()
	
	ОтборПоВидуОплаты = Новый Структура("ВидОплаты", Справочники.ВидыОплатЧекаККМ.ОплатаПодарочнымСертификатом);
	СтрокиОплатыПодарочнымиСертификатами = Оплата.НайтиСтроки(ОтборПоВидуОплаты);
	Если СтрокиОплатыПодарочнымиСертификатами.Количество() > 0 Тогда 
		ДополнительныеСвойства.Вставить("СкорректироватьРегистрСведенийПодарочныеСертификатыКСписанию", Истина);
	КонецЕсли;

КонецПроцедуры

Процедура ЗаполнитьСправки2ЕГАИС()
	
	ШтрихкодыУпаковок = Новый Массив;
	Для Каждого СтрокаАкцизныхМарок Из АкцизныеМарки Цикл
		Если ЗначениеЗаполнено(СтрокаАкцизныхМарок.АкцизнаяМарка)
			И НЕ ЗначениеЗаполнено(СтрокаАкцизныхМарок.Справка2) Тогда
			ШтрихкодыУпаковок.Добавить(СтрокаАкцизныхМарок.АкцизнаяМарка);
		КонецЕсли;
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ШтрихкодыУпаковок", ШтрихкодыУпаковок);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ШтрихкодыУпаковокТоваров.Ссылка КАК АкцизнаяМарка,
	|	Справки2ЕГАИС.Ссылка КАК Справка2
	|ИЗ
	|	Справочник.ШтрихкодыУпаковокТоваров КАК ШтрихкодыУпаковокТоваров
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
	|		ПО ШтрихкодыУпаковокТоваров.Номенклатура = СправочникНоменклатура.Ссылка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.АкцизныеМаркиЕГАИС КАК АкцизныеМаркиЕГАИС
	|		ПО ШтрихкодыУпаковокТоваров.Ссылка = АкцизныеМаркиЕГАИС.АкцизнаяМарка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Справки2ЕГАИС КАК Справки2ЕГАИС
	|		ПО (АкцизныеМаркиЕГАИС.Справка2 = Справки2ЕГАИС.Ссылка)
	|ГДЕ
	|	ШтрихкодыУпаковокТоваров.Ссылка В(&ШтрихкодыУпаковок)
	|	И СправочникНоменклатура.АлкогольнаяПродукция";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		СтрокаАкцизныхМарок = АкцизныеМарки.Найти(Выборка.АкцизнаяМарка, "АкцизнаяМарка");
		СтрокаАкцизныхМарок.Справка2 = Выборка.Справка2;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ОсновнойБлок

РежимРМК = Ложь;
КонтролироватьОстаткиТоваровПриЗакрытииЧека = Ложь;
мЗакрытиеСмены = Ложь;

#КонецОбласти

#КонецЕсли
