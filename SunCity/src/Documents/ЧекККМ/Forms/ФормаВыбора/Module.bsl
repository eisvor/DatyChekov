#Область ПрограммныйИнтерфейс

#Область ОбработчикиСобытийПодключаемогоОборудования

&НаКлиенте
Процедура ОповещениеПоискаПоШтрихкоду(Штрихкод, ДополнительныеПараметры) Экспорт
	
	Если НЕ ПустаяСтрока(Штрихкод) Тогда
		СтруктураПараметровКлиента = ПолученШтрихкодИзСШК(Штрихкод);
		ОбработатьДанныеПоКодуКлиент(СтруктураПараметровКлиента);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеПоискаПоМагнитномуКоду(ТекКод, ДополнительныеПараметры) Экспорт
	
	Если НЕ ПустаяСтрока(ТекКод) Тогда
		СтруктураПараметровКлиента = ПолученМагнитныйКод(ТекКод);
		ОбработатьДанныеПоКодуКлиент(СтруктураПараметровКлиента);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеОткрытьФормуВыбораДанныхПоиска(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено Тогда
		ОбработатьДанныеПоКодуКлиент(Результат);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ПолученМагнитныйКод(МагнитныйКод) Экспорт
	
	СтруктураРезультат = ДанныеПоискаПоМагнитномуКодуСервер(МагнитныйКод);
	
	Возврат ПодключаемоеОборудованиеРТКлиент.ПолученМагнитныйКод(ЭтотОбъект, СтруктураРезультат);
	
КонецФункции

&НаСервере
Функция ДанныеПоискаПоМагнитномуКодуСервер(МагнитныйКод)
	
	Возврат ПодключаемоеОборудованиеРТ.ДанныеПоискаПоМагнитномуКоду(МагнитныйКод, ЭтотОбъект);
	
КонецФункции

&НаКлиенте
Функция ПолученШтрихкодИзСШК(Штрихкод) Экспорт
	
	СтруктураРезультат = ДанныеПоискаПоШтрихкодуСервер(Штрихкод);
	
	Возврат ПодключаемоеОборудованиеРТКлиент.ПолученШтрихкодИзСШК(ЭтотОбъект, СтруктураРезультат);
	
КонецФункции

&НаСервере
Функция ДанныеПоискаПоШтрихкодуСервер(Штрихкод)
	
	ДанныеПоискаПоШтрихкоду = Неопределено;
	
	Возврат ДанныеПоискаПоШтрихкоду;
	
КонецФункции

&НаКлиенте
Процедура ОповещениеОбработатьДанныеПоКоду(СтруктураРезультат, ДополнительныеПараметры) Экспорт
	
	ОбработатьДанныеПоКодуКлиент(СтруктураРезультат);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Перем ПараметрыОтбора;
	
	// Пропускаем инициализацию, чтобы гарантировать получение формы при передаче параметра "АвтоТест".
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПараметрыРазмещения = ПодключаемыеКоманды.ПараметрыРазмещения();
	ПараметрыРазмещения.КоманднаяПанель = ЭтотОбъект.КоманднаяПанель;
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект, ПараметрыРазмещения);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	Если Параметры.Свойство("СтруктураПараметрыОтбора", ПараметрыОтбора) Тогда
		
		ДанныеВыбора = СписокЧековДляВыбора(ПараметрыОтбора);
		
		ОтборыСписковКлиентСервер.ИзменитьЭлементОтбораСписка(
			Список,
			"Ссылка",
			ДанныеВыбора,
			Истина,
			ВидСравненияКомпоновкиДанных.ВСписке);
		
	КонецЕсли;
	
	// ПодключаемоеОборудование
	ПодключаемоеОборудованиеРТ.НастроитьПодключаемоеОборудование(ЭтотОбъект, Новый Массив());
	// Конец ПодключаемоеОборудование
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// ПодключаемоеОборудование
	МенеджерОборудованияКлиент.НачатьПодключениеОборудованиеПриОткрытииФормы(
		Неопределено,
		ЭтотОбъект,
		"СканерШтрихкода, СчитывательМагнитныхКарт");
	// Конец ПодключаемоеОборудование
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	// ПодключаемоеОборудование
	МенеджерОборудованияКлиент.НачатьОтключениеОборудованиеПриЗакрытииФормы(Неопределено, ЭтотОбъект);
	// Конец ПодключаемоеОборудование
	
КонецПроцедуры

&НаКлиенте
Процедура ВнешнееСобытие(Источник, Событие, Данные)
	
	Если ВводДоступен() Тогда
		ПодключаемоеОборудованиеРТКлиент.ВнешнееСобытиеОборудованияРМК(ЭтотОбъект, Источник, Событие, Данные);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Элементы.Список);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат) Экспорт
	
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Элементы.Список, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Элементы.Список);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура ОбработатьДанныеПоКодуКлиент(СтруктураРезультат)
	
	СтрокаРезультата = СтруктураРезультат.ЗначенияПоиска[0];
	
	Если СтрокаРезультата.Свойство("Карта") Тогда
		
		Если СтрокаРезультата.ЭтоРегистрационнаяКарта Тогда
			ПодключаемоеОборудованиеРТКлиент.ВставитьПредупреждениеОНевозможностиОбработкиКарт(
				СтруктураРезультат,
				СтрокаРезультата);
		Иначе
			ДисконтнаяКарта = СтрокаРезультата.Карта;
			ОтборыСписковКлиентСервер.ИзменитьЭлементОтбораСписка(
				Список,
				"ДисконтнаяКарта",
				ДисконтнаяКарта,
				ВидСравненияКомпоновкиДанных.Равно);
		КонецЕсли;
		
	ИначеЕсли СтрокаРезультата.Свойство("ЧекПоФискальнымДанным") Тогда
		
		ЧекПоФискальнымДанным = СтрокаРезультата.ЧекПоФискальнымДанным;
		ОтборыСписковКлиентСервер.ИзменитьЭлементОтбораСписка(
			Список,
			"Ссылка",
			ЧекПоФискальнымДанным,
			Истина,
			ВидСравненияКомпоновкиДанных.Равно);
			
	КонецЕсли;
		
	Если СтрокаРезультата.Свойство("ТекстПредупреждения") Тогда
		
		ОбщегоНазначенияКлиент.СообщитьПользователю(СтрокаРезультата.ТекстПредупреждения);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция СписокЧековДляВыбора(СтруктураПараметров)

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Магазин", СтруктураПараметров.Магазин);
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ЧекККМТовары.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.ЧекККМ.Товары КАК ЧекККМТовары
	|ГДЕ
	|	ЧекККМТовары.Ссылка.СтатусЧекаККМ = ЗНАЧЕНИЕ(Перечисление.СтатусыЧековККМ.Архивный)
	|	И ЧекККМТовары.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийЧекККМ.Продажа)
	|	И ЧекККМТовары.Ссылка.Магазин = &Магазин";
	
	ТекстУсловий = "";
	
	Если СтруктураПараметров.Свойство("ДисконтнаяКарта") Тогда
		Запрос.УстановитьПараметр("ДисконтнаяКарта", СтруктураПараметров.ДисконтнаяКарта);
		ТекстУсловий = ТекстУсловий + "И ЧекККМТовары.Ссылка.ДисконтнаяКарта = &ДисконтнаяКарта" + Символы.ПС;
	КонецЕсли;
	
	Если СтруктураПараметров.Свойство("Номенклатура") Тогда
		Запрос.УстановитьПараметр("Номенклатура", СтруктураПараметров.Номенклатура);
		ТекстУсловий = ТекстУсловий + "И ЧекККМТовары.Номенклатура = &Номенклатура" + Символы.ПС;
	КонецЕсли;
	
	Если СтруктураПараметров.Свойство("Характеристика") Тогда
		Запрос.УстановитьПараметр("Характеристика", СтруктураПараметров.Характеристика);
		ТекстУсловий = ТекстУсловий + "И ЧекККМТовары.Характеристика = &Характеристика" + Символы.ПС;
	КонецЕсли;
	
	Если СтруктураПараметров.Свойство("Номер") Тогда
		Запрос.УстановитьПараметр("Номер", СтруктураПараметров.Номер);
		ТекстУсловий = ТекстУсловий + "И ЧекККМТовары.Ссылка.НомерЧекаККМ = &Номер" + Символы.ПС;
	КонецЕсли;
	
	Если СтруктураПараметров.Свойство("Дата") Тогда
		Запрос.УстановитьПараметр("Дата", СтруктураПараметров.Дата);
		ТекстУсловий = ТекстУсловий + "И ЧекККМТовары.Ссылка.Дата >= НАЧАЛОПЕРИОДА(&Дата, ДЕНЬ)
			|И ЧекККМТовары.Ссылка.Дата <= КОНЕЦПЕРИОДА(&Дата, ДЕНЬ)" + Символы.ПС;
	КонецЕсли;
	
	Если СтруктураПараметров.Свойство("ЦенаВключаетНДС") Тогда
		Запрос.УстановитьПараметр("ЦенаВключаетНДС", СтруктураПараметров.ЦенаВключаетНДС);
		ТекстУсловий = ТекстУсловий + "И ЧекККМТовары.Ссылка.ЦенаВключаетНДС = &ЦенаВключаетНДС" + Символы.ПС;
	КонецЕсли;
	
	Если СтруктураПараметров.Свойство("ОперацияСДенежнымиСредствами") Тогда
		Запрос.УстановитьПараметр("ОперацияСДенежнымиСредствами", СтруктураПараметров.ОперацияСДенежнымиСредствами);
		ТекстУсловий =
			ТекстУсловий + "И ЧекККМТовары.Ссылка.ОперацияСДенежнымиСредствами = &ОперацияСДенежнымиСредствами" + Символы.ПС;
	КонецЕсли;
	
	Запрос.Текст = ТекстЗапроса + " " + ТекстУсловий;
	
	ДанныеВыбора = Новый СписокЗначений;
	ДанныеВыбора.ЗагрузитьЗначения(Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка"));
	
	Возврат ДанныеВыбора;
	
КонецФункции

#КонецОбласти