
#Область ПрограммныйИнтерфейс

&НаКлиенте
Процедура ОповещениеВопросВнесениеДенегВКассуККМ(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если Не РезультатВопроса = "Да" Тогда
		Возврат;
	КонецЕсли;
	
	ЗавершитьВнесениеДенегВКассуККМ(ДополнительныеПараметры.ПараметрДействия)
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеОткрытьФормуЗакрытияКассовойСмены(РезультатОткрытияФормы, ДополнительныеПараметры) Экспорт
	
	УстановитьДоступностьКомандСозданияДокументов();
	
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеОткрытьФормуПроверкиНепробитыхЧеков(РезультатОткрытияФормы, ДополнительныеПараметры) Экспорт
	
	Если РезультатОткрытияФормы = НСтр("ru = 'Закрытие смены'") Тогда
		ПродолжитьОткрытиеОбработкиЗакрытияКассовойСмены();
	Иначе
		ТекстОшибки = НСтр("ru = 'Закрытие кассовой смены прервано пользователем.'");
		ОбщегоНазначенияРТКлиент.ВывестиИнформациюДляРМКУправляемой(ТекстОшибки);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеОткрытьФормуВводаСуммыФактическойВыемки(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Если РезультатЗакрытия = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЗавершитьОткрытиеОбработкиЗакрытияКассовойСмены(РезультатЗакрытия.ПараметрыВыемки, РезультатЗакрытия.ВведенноеЧисло);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтчетБезГашенияЗавершение(РезультатВыполнения, Параметры) Экспорт
	
	Доступность = Истина;
	ТекстСообщения = "";
	ТекстОшибки = "";
	
	Если РезультатВыполнения.Результат Тогда
		ТекстСообщения = НСтр("ru='Отчет без гашения успешно напечатан.'");
	Иначе
		ТекстСообщения = НСтр("ru='Отчет без гашения не напечатан.'");
		ТекстОшибки = РезультатВыполнения.ОписаниеОшибки;
	КонецЕсли;
	
	ОбщегоНазначенияРТКлиент.ВывестиИнформациюДляРМКУправляемой(ТекстСообщения, ТекстОшибки);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытьКассовуюСменуЗавершение(РезультатОткрытияФормы, ДополнительныеПараметры) Экспорт
	
	Если Не РезультатОткрытияФормы = "Да" Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ВозможностьЗакрытияСмены() Тогда
		УстановитьДоступностьКомандСозданияДокументов();
		Возврат;
	КонецЕсли;
	
	ОбработчикОповещения = Новый ОписаниеОповещения("ОповещениеОткрытьФормуПроверкиНепробитыхЧеков", ЭтотОбъект);
	ПройденаПроверкаНепробитыхЧеков =
		РозничныеПродажиКлиент.ПройденаПроверкаНепробитыхЧеков(КассаККМ, ОбработчикОповещения);
	
	Если ПройденаПроверкаНепробитыхЧеков Тогда
		ПродолжитьОткрытиеОбработкиЗакрытияКассовойСмены();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеОткрытьФормуВводаЧислаВвестиВыемкаДенегЗавершение(РезультатОперации, ПараметрыОперации) Экспорт;
	
	Если РезультатОперации = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если РезультатОперации.Результат Тогда
		ТекстСообщения = НСтр("ru = 'Выполнена выемка денежных средств из %1 на сумму %2'");
	Иначе
		ТекстСообщения = НСтр("ru = 'Не удалось произвести выемку денежных средств из %1 на сумму %2'");
	КонецЕсли;
	
	ТекстСообщения = СтрШаблон(
		ТекстСообщения,
		Строка(РезультатОперации.КассаККМ),
		Формат(РезультатОперации.ИзымаемаяСумма, "ЧЦ=15; ЧДЦ=2"));
	
	ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
	
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеОткрытьФормуВводаЧислаВвестиВыемкаДенег(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Если НЕ РезультатЗакрытия = Неопределено Тогда
		
		Если ЗначениеЗаполнено(РезультатЗакрытия.ВведенноеЧисло) Тогда
			
			ДополнительныеПараметрыВыемки = Новый Структура;
			ДополнительныеПараметрыВыемки.Вставить("ДоговорКонтрагента", РезультатЗакрытия.ПараметрыВыемки.ДоговорКонтрагента);
			
			ПараметрыВыполнения = ДенежныеСредстваКлиент.ПараметрыВыполненияОперацииВыемкаДенег();
			ПараметрыВыполнения.ИзымаемаяСумма = РезультатЗакрытия.ВведенноеЧисло;
			ПараметрыВыполнения.КассаККМ = КассаККМ;
			ПараметрыВыполнения.УникальныйИдентификатор = УникальныйИдентификатор;
			ПараметрыВыполнения.ДополнительныеПараметры = ДополнительныеПараметрыВыемки;
			
			Оповещение = Новый ОписаниеОповещения("ОповещениеОткрытьФормуВводаЧислаВвестиВыемкаДенегЗавершение", ЭтотОбъект);
			ДенежныеСредстваКлиент.НачатьВыемкуДенег(Оповещение, ПараметрыВыполнения);
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеОбработатьВыборЭквайринговогоТерминала(РезультатВыполнения, Параметры) Экспорт
	
	Если ЗначениеЗаполнено(РезультатВыполнения) Тогда
		ВыполнитьОперациюНаЭквайринговомТерминале(Параметры.Операция, РезультатВыполнения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеВыполнитьЭквайринговуюОперациюЗавершение(РезультатВыполнения, Параметры) Экспорт
	
	Доступность = Истина;
	
	Если РезультатВыполнения.Результат Тогда
		ТекстСообщения = НСтр("ru = 'Операция выполнена успешно.'");
	Иначе
		ТекстСообщения = РезультатВыполнения.ОписаниеОшибки;
	КонецЕсли;
	
	ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
	
КонецПроцедуры

#Область ОбработчикиСобытийПодключаемогоОборудования

&НаКлиенте
Процедура ОповещениеПоискаПоШтрихкоду(Штрихкод, ДополнительныеПараметры) Экспорт
	
	Если НЕ ПустаяСтрока(Штрихкод) Тогда
		СтруктураПараметровКлиента = ПолученШтрихкодИзСШК(Штрихкод);
		ОбработатьДанныеПоКодуКлиент(СтруктураПараметровКлиента);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеПоискаПоМагнитномуКоду(ТекКод, ДополнительныеПараметры) Экспорт
	
	Если НЕ ПустаяСтрока(ТекКод) Тогда
		СтруктураПараметровКлиента = ПолученМагнитныйКод(ТекКод);
		ОбработатьДанныеПоКодуКлиент(СтруктураПараметровКлиента);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеОткрытьФормуВыбораДанныхПоиска(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено Тогда
		ОбработатьДанныеПоКодуКлиент(Результат);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ПолученМагнитныйКод(МагнитныйКод) Экспорт
	
	СтруктураРезультат = ДанныеПоискаПоМагнитномуКодуСервер(МагнитныйКод);
	
	Возврат ПодключаемоеОборудованиеРТКлиент.ПолученМагнитныйКод(ЭтотОбъект, СтруктураРезультат);
	
КонецФункции

&НаСервере
Функция ДанныеПоискаПоМагнитномуКодуСервер(МагнитныйКод)
	
	Возврат ПодключаемоеОборудованиеРТ.ДанныеПоискаПоМагнитномуКоду(МагнитныйКод, ЭтотОбъект);
	
КонецФункции

&НаКлиенте
Функция ПолученШтрихкодИзСШК(Штрихкод) Экспорт
	
	СтруктураРезультат = ДанныеПоискаПоШтрихкодуСервер(Штрихкод);
	
	Возврат ПодключаемоеОборудованиеРТКлиент.ПолученШтрихкодИзСШК(ЭтотОбъект, СтруктураРезультат);
	
КонецФункции

&НаСервере
Функция ДанныеПоискаПоШтрихкодуСервер(Штрихкод)
	
	ДанныеПоискаПоШтрихкоду = Неопределено;
	
	Возврат ДанныеПоискаПоШтрихкоду;
	
КонецФункции

&НаКлиенте
Процедура ОповещениеОбработатьДанныеПоКоду(СтруктураРезультат, ДополнительныеПараметры) Экспорт
	
	ОбработатьДанныеПоКодуКлиент(СтруктураРезультат);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Пропускаем инициализацию, чтобы гарантировать получение формы при передаче параметра "АвтоТест".
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПараметрыРазмещения = ПодключаемыеКоманды.ПараметрыРазмещения();
	ПараметрыРазмещения.КоманднаяПанель = Элементы.КоманднаяПанельФормы;
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект, ПараметрыРазмещения);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	ИспользоватьАгентскиеПлатежи = ПолучитьФункциональнуюОпцию("ИспользоватьАгентскиеПлатежиИРазделениеВыручки");
	
	// ПодключаемоеОборудование
	ПодключаемоеОборудованиеРТ.НастроитьПодключаемоеОборудование(ЭтотОбъект, Новый Массив());
	// Конец ПодключаемоеОборудование
	
	Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоОрганизаций") Тогда
		Организация = Справочники.Организации.ПолучитьОрганизациюПоУмолчанию();
	КонецЕсли;

	УстановитьОтборДинамическихСписковПриИзмененииСервер();
	
	ОбщегоНазначенияРТ.УстановитьУсловноеОформлениеПоляДата(ЭтотОбъект, "Список", "Дата");
	ОбщегоНазначенияРТ.УстановитьУсловноеОформлениеПоляДата(
		ЭтотОбъект,
		"СписокРасходныеОрдераКВнесениюДенег",
		"СписокРасходныеОрдераКВнесениюДенегДата");
	
	Элементы.ФормаЧекККМ.Видимость = ПравоДоступа("Добавление", Метаданные.Документы.ЧекККМ);
	
	//НСПК
	Если ПолучитьФункциональнуюОпцию("ИспользоватьУчетТоваровФСС") Тогда
		Элемент = УсловноеОформление.Элементы.Добавить();
		ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СтатусЧекаККМ.Имя);
		
		ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Список.ОшибкаОтправкиНСПК");
		ОтборЭлемента.ВидСравнения  = ВидСравненияКомпоновкиДанных.Равно;
		ОтборЭлемента.ПравоеЗначение = Истина;
		
		Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru='Ошибка отправки ФЭС НСПК'"));
		
		Если Параметры.Свойство("ОшибкиОтправкиНСПК") Тогда
			ОтборыСписковКлиентСервер.УстановитьЭлементОтбораСписка(Список, "ОшибкаОтправкиНСПК", Истина);
		КонецЕсли;
	КонецЕсли;
	
	//ИнтеграцияИСМПТК_РозничноеВыбытие
	ВедетсяУчетМаркировкиИСМПТК = Константы.ВестиУчетМаркируемойПродукцииИСМПТК.Получить();
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ФормаПросмотрКодовМаркировкиИСМПТК", "Видимость", ВедетсяУчетМаркировкиИСМПТК);
	//Конец ИнтеграцияИСМПТК_РозничноеВыбытие
		
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	УстановитьДоступностьКомандСозданияДокументов();
	УстановитьДоступностьКассы();
	
	// ПодключаемоеОборудование
	МенеджерОборудованияКлиент.НачатьПодключениеОборудованиеПриОткрытииФормы(
		Неопределено,
		ЭтотОбъект,
		"СканерШтрихкода, СчитывательМагнитныхКарт");
	// Конец ПодключаемоеОборудование
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	// ПодключаемоеОборудование
	МенеджерОборудованияКлиент.НачатьОтключениеОборудованиеПриЗакрытииФормы(Неопределено, ЭтотОбъект);
	// Конец ПодключаемоеОборудование
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ИзменениеСостоянияКассовойСмены" И КассаККМ = Параметр Тогда
		УстановитьДоступностьКомандСозданияДокументов();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВнешнееСобытие(Источник, Событие, Данные)
	
	Если ВводДоступен() Тогда
		ПодключаемоеОборудованиеРТКлиент.ВнешнееСобытиеОборудованияРМК(ЭтотОбъект, Источник, Событие, Данные);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	
	КассаККМ = Настройки.Получить("КассаККМ");
	Магазин  = Настройки.Получить("Магазин");
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоОрганизаций") Тогда
		Организация = Настройки.Получить("Организация");
	Иначе
		Организация = Справочники.Организации.ПолучитьОрганизациюПоУмолчанию();
		
		Если НЕ ЗначениеЗаполнено(Организация) Тогда
			КассаККМ = Справочники.КассыККМ.ПустаяСсылка();
		КонецЕсли;
		
	КонецЕсли;
	
	УстановитьОтборДинамическихСписковПриИзмененииСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура СписокВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	// &ЗамерПроизводительности
	ОценкаПроизводительностиРТКлиент.НачатьЗамер(
		Истина,
		"Документ.ЧекККМ.Форма.ФормаДокумента.Открытие");
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ОтборМагазинПриИзменении(Элемент)
	
	УстановитьОтборДинамическихСписковПриИзмененииКлиент();
	УстановитьДоступностьКомандСозданияДокументов();
	УстановитьДоступностьКассы();
КонецПроцедуры

&НаКлиенте
Процедура ОтборОрганизацияПриИзменении(Элемент)
	
	УстановитьОтборДинамическихСписковПриИзмененииКлиент();
	УстановитьДоступностьКомандСозданияДокументов();
	УстановитьДоступностьКассы();
КонецПроцедуры

&НаКлиенте
Процедура ОтборКассаККМПриИзменении(Элемент)
	
	УстановитьОтборДинамическихСписковПриИзмененииКлиент();
	УстановитьДоступностьКомандСозданияДокументов();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСписок

&НаКлиенте
Процедура СписокПриАктивизацииСтроки(Элемент)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	// &ЗамерПроизводительности
	ОценкаПроизводительностиРТКлиент.НачатьЗамер(
		Истина,
		"Документ.ЧекККМ.Форма.ФормаДокумента.СозданиеНового");
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСписокРасходныеОрдераКВнесениюДенег

&НаКлиенте
Процедура СписокРасходныеОрдераКВнесениюДенегВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ВыполнитьВнесениеДенегВКассуККМКлиент();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ЗакрытьКассовуюСмену(Команда)
	
	ОчиститьСообщения();
	
	Если НЕ ЗначениеЗаполнено(КассаККМ) Тогда
		ТекстОшибки = НСтр("ru='Выберите кассу ККМ.'");
		ОбщегоНазначенияРТКлиент.ВывестиИнформациюДляРМКУправляемой(ТекстОшибки);
		Возврат;
	КонецЕсли;
	
	ОбработчикОповещения = Новый ОписаниеОповещения("ЗакрытьКассовуюСменуЗавершение", ЭтотОбъект);
	ОбщегоНазначенияРТКлиент.ВывестиВопросДляРМКУправляемой(
		НСтр("ru = 'Закрыть кассовую смену?'"),
		,
		,
		ОбработчикОповещения,
		ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтчетБезГашения(Команда)
	
	ОчиститьСообщения();
	
	Если НЕ ЗначениеЗаполнено(КассаККМ) Тогда
		ТекстОшибки = НСтр("ru='Выберите кассу ККМ.'");
		ОбщегоНазначенияРТКлиент.ВывестиИнформациюДляРМКУправляемой(ТекстОшибки);
		Возврат;
	КонецЕсли;
	
	ПараметрыКассыККМ = ЗначениеНастроекВызовСервера.ПараметрыКассыККМ(КассаККМ);
	ИдентификаторУстройства = ПараметрыКассыККМ.ИдентификаторУстройства;
	
	ИспользоватьКассуККМБезПодключенияОборудования = ПараметрыКассыККМ.ИспользоватьБезПодключенияОборудования;
	
	Если ИспользоватьПодключаемоеОборудование И НЕ ИспользоватьКассуККМБезПодключенияОборудования Тогда
		
		Доступность = Ложь;
		
		ПараметрыОперации = МенеджерОборудованияКлиентСервер.ПараметрыВыполненияОперации();
		Кассир = "";
		СтандартнаяОбработка = Истина;
		МенеджерОборудованияКлиентСерверПереопределяемый.ОбработкаЗаполненияИмяКассира(Кассир, СтандартнаяОбработка); 
		ПараметрыОперации.Кассир = ?(Не СтандартнаяОбработка, Кассир, НСтр("ru='Администратор'")); 
		
		ОповещениеПриЗавершении = Новый ОписаниеОповещения("ОтчетБезГашенияЗавершение", ЭтотОбъект);
		МенеджерОборудованияКлиент.НачатьФормированиеОтчетаБезГашения(ОповещениеПриЗавершении, 
																	УникальныйИдентификатор, 
																	ПараметрыОперации, 
																	ИдентификаторУстройства);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьВыделенные(Команда)
	
	ГрупповоеИзменениеОбъектовКлиент.ИзменитьВыделенные(Элементы.Список);
	
КонецПроцедуры

&НаКлиенте
Процедура ВернутьсяКСпискуЧековККМ(Команда)
	
	УстановитьТекущуюСтраницуФормы(Элементы.ГруппаСписокЧековККМ);
	
КонецПроцедуры

&НаКлиенте
Процедура ВнесениеДенегВКассу(Команда)
	
	ОчиститьСообщения();
	
	ОтборыСписковКлиентСервер.УстановитьПараметрДинамическогоСписка(
		СписокРасходныеОрдераКВнесениюДенег,
		"Организация",
		Организация);
	ОтборыСписковКлиентСервер.УстановитьПараметрДинамическогоСписка(
		СписокРасходныеОрдераКВнесениюДенег,
		"КассаККМ",
		КассаККМ);
		
	УстановитьТекущуюСтраницуФормы(Элементы.ГруппаВнесениеДенег);
	
КонецПроцедуры

// Процедура вызывается при нажатии на кнопку "Выемка денег".
//
&НаКлиенте
Процедура ВыемкаДенег(Команда)
	
	ОчиститьСообщения();
	
	ПараметрыВыемки = РозничныеПродажиКлиентСервер.ПараметрыВыемкиИзКассы();
	ПараметрыВыемки.КассаККМ = КассаККМ;
	// По умолчанию производим выемку собственных средств.
	ПараметрыВыемки.ДоговорКонтрагента = ПредопределенноеЗначение("Справочник.ДоговорыКонтрагентов.ПустаяСсылка");
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Заголовок", НСтр("ru = 'Сумма выемки'"));
	ПараметрыФормы.Вставить("Отрицательное", Ложь);
	ПараметрыФормы.Вставить("ПараметрыВыемки", ПараметрыВыемки);
	
	ОбработчикОповещения = Новый ОписаниеОповещения("ОповещениеОткрытьФормуВводаЧислаВвестиВыемкаДенег", ЭтотОбъект);
	
	ОткрытьФорму("Обработка.РМКУправляемыйРежим.Форма.ФормаВводаЧисла",
		ПараметрыФормы,
		,
		,
		,
		,
		ОбработчикОповещения,
		РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьСверкуИтогов(Команда)
	
	НачатьВыполнениеОперацииНаЭквайринговомТерминале("СверкаИтогов");
	
КонецПроцедуры

&НаКлиенте
Процедура НапечататьПоследнийСлипЧек(Команда)
	
	ВыполнитьОперациюНаЭквайринговомТерминале("ПечатьПоследнегоСлипЧека", ПредопределенноеЗначение("Справочник.ЭквайринговыеТерминалы.ПустаяСсылка"));
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьДокументВнесениеДенежныхСредствВКассу(Команда)
	
	ВыполнитьВнесениеДенегВКассуККМКлиент();
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьДокументЧекККМ(Команда)
	
	ЧекККМСсылка = Элементы.Список.ТекущаяСтрока;
	
	Если ЗначениеЗаполнено(ЧекККМСсылка) Тогда
		
		СтруктураОснования = Новый Структура;
		СтруктураОснования.Вставить("ДанныеЗаполнения", ЧекККМСсылка);
		СтруктураОснования.Вставить("СоздатьЧекПродажи");
		
		ОткрытьФорму("Документ.ЧекККМ.Форма.ФормаДокумента", Новый Структура("Основание", СтруктураОснования));
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаказыНаДоставку(Команда)
	
	ОчиститьСообщения();
	СервисДоставкиКлиент.ОткрытьФормуСпискаЗаказовНаДоставку();
КонецПроцедуры

&НаКлиенте
Процедура ТрекерЗаказов(Команда)
	
	ОчиститьСообщения();
	СервисДоставкиКлиент.ОткрытьФормуОтслеживанияЗаказа();
КонецПроцедуры

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Элементы.Список);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат) Экспорт
	
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Элементы.Список, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Элементы.Список);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервереБезКонтекста
Процедура ПроверитьИспользованиеПодключаемогоОборудования(ИспользоватьПодключаемоеОборудование)
	
	ТипыПодключенногоОборудования = МенеджерОборудованияСерверПовтИсп.ТипыПодключенногоОборудования();
	ИспользоватьПодключаемоеОборудование = ОбщегоНазначенияРТ.ИспользоватьПодключаемоеОборудование(ТипыПодключенногоОборудования);
	
КонецПроцедуры

// Процедура создания документа внесение денежных средств в кассу ККМ.
//
&НаКлиенте
Процедура ВыполнитьВнесениеДенегВКассуККМКлиент()
	
	Перем ПараметрСуммаВнесения;
	
	ТекущиеДанные = Элементы.СписокРасходныеОрдераКВнесениюДенег.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрДействия = Новый Структура;
	
	ПараметрДействия.Вставить("СуммаВнесения",ТекущиеДанные.СуммаВнесения);
	ПараметрДействия.Вставить("Ссылка",ТекущиеДанные.Ссылка);
	ПараметрДействия.Вставить("КассаККМ",ТекущиеДанные.КассаККМ);
	
	Если ТекущиеДанные.Свойство("СуммаВнесения", ПараметрСуммаВнесения) И ПараметрСуммаВнесения <= 0.00 Тогда
		Текст = НСтр("ru = 'По выбранному документу не требуется выполнять внесение денежных средств в кассу ККМ'");
		ОбщегоНазначенияРТКлиент.ВывестиИнформациюДляРМКУправляемой(Текст);
		Возврат;
	Иначе
		ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Будет выполнено внесение денежных средств в кассу %1 на сумму %2 тг. по документу %3.
				|Продолжить?'"),
			ТекущиеДанные.КассаККМ,
			Формат(ТекущиеДанные.СуммаВнесения, "ЧЦ=15; ЧДЦ=2"),
			Строка(ТекущиеДанные.Ссылка));
		
		ДополнительныеПараметры = Новый Структура; 
		ДополнительныеПараметры.Вставить("ПараметрДействия", ПараметрДействия);
		ОбработчикОповещения =
			Новый ОписаниеОповещения("ОповещениеВопросВнесениеДенегВКассуККМ", ЭтотОбъект, ДополнительныеПараметры);
		ОбщегоНазначенияРТКлиент.ВывестиВопросДляРМКУправляемой(
			ТекстВопроса,
			НСтр("ru = 'Внесение денежных средств в кассу по документу'") + " " + Строка(ТекущиеДанные.Ссылка),
			,
			ОбработчикОповещения,
			ЭтотОбъект);
		
	КонецЕсли;
	
КонецПроцедуры

// Завершает на клиенте внесение денег в кассу ККМ.
//
&НаКлиенте
Процедура ЗавершитьВнесениеДенегВКассуККМ(ПараметрДействия)
	
	ПараметрыВыполнения = ДенежныеСредстваКлиент.ПараметрыВыполненияОперацииВнесениеДенег();
	ПараметрыВыполнения.СуммаВнесения = ПараметрДействия.СуммаВнесения; 
	ПараметрыВыполнения.РКО = ПараметрДействия.Ссылка; 
	ПараметрыВыполнения.КассаККМ = ПараметрДействия.КассаККМ;
	ПараметрыВыполнения.УникальныйИдентификатор = УникальныйИдентификатор;
	
	СведенияОрганизацияКассаККМ = ИнтеграцияWebKassaВызовСервераПереопределяемый.ПолучитьСведенияОбОрганизацииИКассеККМ(ЭтотОбъект.Организация, ТекущаяДата(), ЭтотОбъект.КассаККМ);
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Кассир", СведенияОрганизацияКассаККМ.Кассир);
	ДополнительныеПараметры.Вставить("Организация", СведенияОрганизацияКассаККМ.ПолноеНаименование);
	ДополнительныеПараметры.Вставить("ИИН", СведенияОрганизацияКассаККМ.ИНН);
	ДополнительныеПараметры.Вставить("СерийныйНомерККМ", СведенияОрганизацияКассаККМ.СерийныйНомер);
	ДополнительныеПараметры.Вставить("РегистрационныйНомерККМ", СведенияОрганизацияКассаККМ.РегистрационныйНомер);
	ДополнительныеПараметры.Вставить("СерияСвидетельстваПоНДС", СведенияОрганизацияКассаККМ.СерияСвидетельстваПоНДС);
	ДополнительныеПараметры.Вставить("НомерСвидетельстваПоНДС", СведенияОрганизацияКассаККМ.НомерСвидетельстваПоНДС);
	ДополнительныеПараметры.Вставить("ОрганизацияСсылка", Организация);
	ПараметрыВыполнения.Вставить("ДополнительныеПараметры",ДополнительныеПараметры);
	
	Оповещение = Новый ОписаниеОповещения("ЗавершитьВнесениеДенегВКассуККМЗавершение", ЭтотОбъект, ПараметрыВыполнения);
	ДенежныеСредстваКлиент.НачатьВнесениеДенег(Оповещение, ПараметрыВыполнения); 
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершитьВнесениеДенегВКассуККМЗавершение(РезультатВыполнения, ПараметрыВыполнения) Экспорт
	
	Если РезультатВыполнения.Результат Тогда
		ВернутьсяКСпискуЧековККМ(Команды.ВернутьсяКСпискуЧековККМ);
	КонецЕсли;

КонецПроцедуры

// Процедура - обработчик команды "ОткрытьКассовуюСмену".
//
&НаКлиенте
Процедура ОткрытьКассовуюСмену(Команда)
	
	ОчиститьСообщения();
	
	Если ОбщегоНазначенияРТВызовСервера.ФизЛицоПользователяСоСкрытымиПерсональнымиДанными() Тогда
		ТекстОшибки = НСтр("ru='У физлица текущего пользователя скрыты персональные данные.'");
		ОбщегоНазначенияРТКлиент.ВывестиИнформациюДляРМКУправляемой(ТекстОшибки);
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(КассаККМ) Тогда
		ТекстОшибки = НСтр("ru='Выберите кассу ККМ.'");
		ОбщегоНазначенияРТКлиент.ВывестиИнформациюДляРМКУправляемой(ТекстОшибки);
		Возврат;
	КонецЕсли;
	
	ОписаниеОшибки = "";
	ТекстПереходящегоОстатка = "";
	
	ПараметрыКассыККМ = ЗначениеНастроекВызовСервера.ПараметрыКассыККМ(КассаККМ);
	ИдентификаторУстройства = ПараметрыКассыККМ.ИдентификаторУстройства;
	ИспользоватьКассуККМБезПодключенияОборудования = ПараметрыКассыККМ.ИспользоватьБезПодключенияОборудования;
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("КассаККМ", КассаККМ);
	ДополнительныеПараметры.Вставить("Магазин", ПараметрыКассыККМ.Магазин);
	ДополнительныеПараметры.Вставить("Организация", ПараметрыКассыККМ.Организация);
	
	ПараметрыВыполнения = Новый Структура;
	ПараметрыВыполнения.Вставить("ОрганизацияСсылка",Организация);
	
	ПроверитьИспользованиеПодключаемогоОборудования(ИспользоватьПодключаемоеОборудование);
	
	Если ИспользоватьПодключаемоеОборудование И НЕ ИспользоватьКассуККМБезПодключенияОборудования И ЗначениеЗаполнено(ИдентификаторУстройства) Тогда
		ЭтаФорма.Доступность = Ложь;
		
		ПараметрыОперации = МенеджерОборудованияКлиентСервер.ПараметрыОткрытияЗакрытияСмены();
		ФИОКассира = ОбщегоНазначенияРТВызовСервера.ФИОФизЛицаПользователяСУчетомИзмененныхПрав();
		Если Не ФИОКассира = "" Тогда
			ПараметрыОперации.Кассир = ФИОКассира;
		Иначе
			ПараметрыОперации.Кассир = НСтр("ru='Администратор'");
		КонецЕсли;
		
		Оповещение = Новый ОписаниеОповещения("ОткрытьКассовуюСменуЗавершение", ЭтотОбъект, ПараметрыВыполнения);
		МенеджерОборудованияКлиент.НачатьОткрытиеСменыНаФискальномУстройстве(Оповещение, УникальныйИдентификатор, ПараметрыОперации, ИдентификаторУстройства, , ДополнительныеПараметры);
	Иначе
		Результат = ОткрытьКассовуюСменуНаСервереБезКонтекста(КассаККМ, ОписаниеОшибки, ТекстПереходящегоОстатка);
		Если Не Результат Тогда
			ТекстСообщения = НСтр("ru = 'При открытии смены произошла ошибка.
			                            |Смена не открыта.
			                            |Дополнительное описание:
			                            |%ДополнительноеОписание%'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ДополнительноеОписание%", ОписаниеОшибки);
			ОбщегоНазначенияРТКлиент.ВывестиИнформациюДляРМКУправляемой(ТекстСообщения, ОписаниеОшибки);
		ИначеЕсли ЗначениеЗаполнено(ТекстПереходящегоОстатка) Тогда
			ОбщегоНазначенияРТКлиент.ВывестиИнформациюДляРМКУправляемой(ТекстПереходящегоОстатка, ОписаниеОшибки);
		КонецЕсли;
		УстановитьДоступностьКомандСозданияДокументов();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьКассовуюСменуЗавершение(РезультатВыполнения, Параметры) Экспорт
	
	ЭтаФорма.Доступность = Истина;
	
	Если РезультатВыполнения.Результат Тогда 
		ОписаниеОшибки = "";
		ТекстПереходящегоОстатка = "";
		Результат = ОткрытьКассовуюСменуНаСервереБезКонтекста(КассаККМ, ОписаниеОшибки, ТекстПереходящегоОстатка);
		Если Не Результат Тогда
			ЗаголовокИнформации = НСтр("ru = 'Ошибка открытия смены'");
			ТекстСообщения = СтрШаблон(НСтр("ru = 'При открытии смены произошла ошибка.
				|Смена не открыта.
				|Дополнительное описание:
				|%1'"), ОписаниеОшибки);
			
			ОбщегоНазначенияРТКлиент.ВывестиИнформациюДляРМКУправляемой(ЗаголовокИнформации, ТекстСообщения);
			
		ИначеЕсли ЗначениеЗаполнено(ТекстПереходящегоОстатка) Тогда
			ЗаголовокИнформации = НСтр("ru = 'Кассовая смена в системе открыта'");
			ОбщегоНазначенияРТКлиент.ВывестиИнформациюДляРМКУправляемой(ЗаголовокИнформации, ТекстПереходящегоОстатка);
		КонецЕсли;
		
		УстановитьДоступностьКомандСозданияДокументов();
	Иначе
		ЗаголовокИнформации = НСтр("ru = 'Ошибка открытия смены'");
		ТекстСообщения = СтрШаблон(НСтр("ru = 'При открытии смены произошла ошибка.
				|Смена не открыта.
				|Дополнительное описание:
				|%1'"), РезультатВыполнения.ОписаниеОшибки);
		
		ОбщегоНазначенияРТКлиент.ВывестиИнформациюДляРМКУправляемой(ЗаголовокИнформации, ТекстСообщения);
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ОткрытьКассовуюСменуНаСервереБезКонтекста(КассаККМ, ОписаниеОшибки = "", ТекстПереходящегоОстатка = "")
	
	Возврат РозничныеПродажиСервер.ОткрытьКассовуюСмену(КассаККМ, ОписаниеОшибки, ТекстПереходящегоОстатка);
	
КонецФункции

&НаСервере
Функция ВозможностьЗакрытияСмены()
	
	СтруктураСостояниеКассовойСмены = РозничныеПродажиСервер.ПолучитьСостояниеКассовойСмены(КассаККМ);
	
	Если НЕ СтруктураСостояниеКассовойСмены.СменаОткрыта Тогда
		
		ТекстОшибки = НСтр("ru='Кассовая смена не открыта.'");
		ОбщегоНазначения.СообщитьПользователю(ТекстОшибки);		
		Возврат Ложь;
		
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Процедура УстановитьДоступностьКомандСозданияДокументов()
	
	ДоступностьЭлемента = ЗначениеЗаполнено(КассаККМ);
	
	СведеньяОКассеККМ = ПолучитьСведеньяОКассеККМ(КассаККМ);
	
	СостояниеКассовойСмены = СведеньяОКассеККМ.СостояниеСмены;
	ЕстьВозможностьОплатыПлатежнойКартой = СведеньяОКассеККМ.ЕстьВозможностьОплатыПлатежнойКартой;
	ИспользоватьОплатуПлатежнымиКартами = СведеньяОКассеККМ.ИспользоватьОплатуПлатежнымиКартами;
	ЭквайринговыйТерминалПоУмолчанию = СведеньяОКассеККМ.ЭквайринговыйТерминалПоУмолчанию;
	
	СменаОткрыта = СостояниеКассовойСмены.СменаОткрыта;
	
	ОбщегоНазначенияРТКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ВнесениеДенег",
		"Доступность",
		ДоступностьЭлемента И СменаОткрыта);
		
	ОбщегоНазначенияРТКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ВыемкаДенег",
		"Доступность",
		ДоступностьЭлемента И СменаОткрыта);
		
	ОбщегоНазначенияРТКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ОткрытьКассовуюСмену",
		"Доступность",
		ДоступностьЭлемента И НЕ СменаОткрыта);
		
	ОбщегоНазначенияРТКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"СнятьZОтчет",
		"Доступность",
		ДоступностьЭлемента И СменаОткрыта);
		
	ОбщегоНазначенияРТКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ОтчетБезГашения",
		"Доступность",
		ДоступностьЭлемента);
		
	ОбщегоНазначенияРТКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ГруппаЭквайринг",
		"Видимость",
		ИспользоватьОплатуПлатежнымиКартами);
		
	ОбщегоНазначенияРТКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ВыполнитьСверкуИтогов",
		"Доступность",
		ДоступностьЭлемента И ЕстьВозможностьОплатыПлатежнойКартой);
		
	ОбщегоНазначенияРТКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"НапечататьПоследнийСлипЧек",
		"Доступность",
		ДоступностьЭлемента И ЕстьВозможностьОплатыПлатежнойКартой);
		
КонецПроцедуры

&НаКлиенте
Процедура УстановитьОтборДинамическихСписковПриИзмененииКлиент()
	
	УстановитьОтборДинамическихСписковПриИзмененииСервер();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьОтборДинамическихСписковПриИзмененииСервер()
	
	УстановитьОтборДинамическихСписков("Магазин");
	УстановитьОтборДинамическихСписков("Организация");
	УстановитьОтборДинамическихСписков("КассаККМ");
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьТекущуюСтраницуФормы(ТекущаяСтраница)
	
	Элементы.ГруппаСписок.ТекущаяСтраница = ТекущаяСтраница;
	
КонецПроцедуры

&НаКлиенте
Процедура ПродолжитьОткрытиеОбработкиЗакрытияКассовойСмены()
	
	ПараметрыВыемки = РозничныеПродажиКлиентСервер.ПараметрыВыемкиИзКассы();
	ПараметрыВыемки.КассаККМ = КассаККМ;
	
	// Инициализируем параметры.
	ИнициализироватьПараметрыВыемкиИзКассы(ПараметрыВыемки);
	
	Если НЕ ПараметрыВыемки.ЗапрашиватьСуммуВыемки
		ИЛИ ПараметрыВыемки.СуммаОстаток - ПараметрыВыемки.СуммаОстатокАгентские = 0 Тогда
		// Закроем смену без запроса суммы выемки.
		СуммаВыемки = ?(ПараметрыВыемки.ПроизводитьВыемку, ПараметрыВыемки.СуммаОстаток, 0);
		ЗавершитьОткрытиеОбработкиЗакрытияКассовойСмены(ПараметрыВыемки, СуммаВыемки);
	Иначе
		// Откроем форму выемки.
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Заголовок", НСтр("ru = 'Сумма выемки'"));
		ПараметрыФормы.Вставить("Отрицательное", Ложь);
		ПараметрыФормы.Вставить("ПараметрыВыемки", ПараметрыВыемки);
		
		ОбработчикОповещения = Новый ОписаниеОповещения("ОповещениеОткрытьФормуВводаСуммыФактическойВыемки", ЭтотОбъект);
		
		ОткрытьФорму("Обработка.РМКУправляемыйРежим.Форма.ФормаВводаЧисла",
			ПараметрыФормы,
			УникальныйИдентификатор,
			,
			,
			,
			ОбработчикОповещения,
			РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершитьОткрытиеОбработкиЗакрытияКассовойСмены(ПараметрыВыемки, СуммаФактическойВыемки)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ПараметрыВыемки", ПараметрыВыемки);
	ПараметрыФормы.Вставить("СуммаФактическойВыемки", СуммаФактическойВыемки);
	
	ОбработчикОповещения = Новый ОписаниеОповещения("ОповещениеОткрытьФормуЗакрытияКассовойСмены", ЭтотОбъект);
	ОткрытьФорму("Обработка.ЗакрытиеКассовойСмены.Форма.Форма",
		ПараметрыФормы,ЭтотОбъект,
		,
		,
		,
		ОбработчикОповещения,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
	УстановитьДоступностьКомандСозданияДокументов();
	
КонецПроцедуры

&НаКлиенте
Процедура НачатьВыполнениеОперацииНаЭквайринговомТерминале(Операция)
	
	ОчиститьСообщения();
	
	Если ЗначениеЗаполнено(ЭквайринговыйТерминалПоУмолчанию) Тогда
		ВыполнитьОперациюНаЭквайринговомТерминале(Операция, ЭквайринговыйТерминалПоУмолчанию);
	Иначе
		ДополнительныеПараметры = Новый Структура("Операция", Операция);
		ОповещениеОВыборе = Новый ОписаниеОповещения("ОповещениеОбработатьВыборЭквайринговогоТерминала", ЭтотОбъект, ДополнительныеПараметры);
		
		СтруктураОтбора = Новый Структура("Касса, ИспользоватьБезПодключенияОборудования", КассаККМ, Ложь);
		ПараметрыОтбора = Новый Структура("Отбор", СтруктураОтбора);
		ОткрытьФорму("Справочник.ЭквайринговыеТерминалы.ФормаВыбора",
					ПараметрыОтбора,
					ЭтаФорма,,,,
					ОповещениеОВыборе,
					РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьОперациюНаЭквайринговомТерминале(Операция, ЭквайринговыйТерминал)
	
	СтруктураОборудования = ПолучитьПодключаемоеОборудованиеЭквайринговогоТерминалаИКассыККМ(ЭквайринговыйТерминал, КассаККМ);
	ЭквайринговыйТерминал = СтруктураОборудования.ЭквайринговыйТерминал;
	ПечатающееУстройство = СтруктураОборудования.ПечатающееУстройство;
	
	Если Операция = "СверкаИтогов" Тогда
		Доступность = Ложь;
		ОписаниеОповещения = Новый ОписаниеОповещения("ОповещениеВыполнитьЭквайринговуюОперациюЗавершение", ЭтотОбъект);
		МенеджерОборудованияКлиент.НачатьВыполнениеСверкиИтоговНаЭквайринговомТерминале(ОписаниеОповещения, УникальныйИдентификатор, ЭквайринговыйТерминал, ПечатающееУстройство);
	ИначеЕсли Операция = "ПечатьПоследнегоСлипЧека" Тогда
		ПоследнийСлипЧек = глПодключаемоеОборудование.ПоследнийСлипЧек;
		Если Не ПустаяСтрока(ПоследнийСлипЧек) Тогда
			Доступность = Ложь;
			ПараметрыОперации = Новый Структура("СтрокиТекста", ПоследнийСлипЧек);
			Оповещение = Новый ОписаниеОповещения("ОповещениеВыполнитьЭквайринговуюОперациюЗавершение", ЭтотОбъект);
			МенеджерОборудованияКлиент.НачатьПечатьТекста(Оповещение, УникальныйИдентификатор, ПечатающееУстройство, ПараметрыОперации);
		Иначе
			ТекстСообщения = НСтр("ru = 'Отсутствует последний слип чек.'");
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьПодключаемоеОборудованиеЭквайринговогоТерминалаИКассыККМ(ЭквайринговыйТерминал, КассаККМ)
	
	Результат = Новый Структура;
	Результат.Вставить("ЭквайринговыйТерминал", ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЭквайринговыйТерминал, "ПодключаемоеОборудование"));
	Результат.Вставить("ПечатающееУстройство", ОбщегоНазначения.ЗначениеРеквизитаОбъекта(КассаККМ, "ПодключаемоеОборудование"));
	
	Возврат Результат;
	
КонецФункции

#Область Прочее

&НаСервере
Процедура УстановитьОтборДинамическихСписков(ИмяРеквизита)
	
	ОтборыСписковКлиентСервер.ИзменитьЭлементОтбораСписка(
		Список,
		ИмяРеквизита,
		ЭтотОбъект[ИмяРеквизита],
		ЗначениеЗаполнено(ЭтотОбъект[ИмяРеквизита]));
	
	ОтборыСписковКлиентСервер.ИзменитьЭлементОтбораСписка(
		СписокРасходныеОрдераКВнесениюДенег,
		ИмяРеквизита,
		ЭтотОбъект[ИмяРеквизита],
		ЗначениеЗаполнено(ЭтотОбъект[ИмяРеквизита]));
	
	ОтборыСписковКлиентСервер.УстановитьПараметрДинамическогоСписка(
		СписокРасходныеОрдераКВнесениюДенег,
		ИмяРеквизита,
		ЭтотОбъект[ИмяРеквизита]);
КонецПроцедуры

&НаКлиенте
Процедура УстановитьДоступностьКассы()
	
	Если ЗначениеЗаполнено(Организация) Тогда
		Элементы.ОтборКассаККМ.ТолькоПросмотр = Ложь;
	Иначе
		Элементы.ОтборКассаККМ.ТолькоПросмотр = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьСведеньяОКассеККМ(КассаККМ)
	
	Результат = Новый Структура;
	Результат.Вставить("СостояниеСмены", РозничныеПродажиСервер.ПолучитьСостояниеКассовойСмены(КассаККМ));
	
	ЕстьВозможностьОплатыПлатежнойКартой = Ложь;
	Если ЗначениеЗаполнено(КассаККМ) Тогда
		МассивКассККМ = Новый Массив;
		МассивКассККМ.Добавить(КассаККМ);
		ЕстьВозможностьОплатыПлатежнойКартой = ПродажиСервер.ЕстьВозможностьОплатыПлатежнойКартой(МассивКассККМ, Истина);
	КонецЕсли;
	Результат.Вставить("ЕстьВозможностьОплатыПлатежнойКартой", ЕстьВозможностьОплатыПлатежнойКартой);
	Результат.Вставить("ИспользоватьОплатуПлатежнымиКартами", ПолучитьФункциональнуюОпцию("ИспользоватьОплатуПлатежнымиКартами"));
	Результат.Вставить("ЭквайринговыйТерминалПоУмолчанию", Справочники.ЭквайринговыеТерминалы.ЭквайринговыйТерминалПоУмолчанию(КассаККМ,,,, Ложь));
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура ИнициализироватьПараметрыВыемкиИзКассы(ПараметрыВыемки)
	
	РозничныеПродажиСервер.ИнициализироватьПараметрыВыемкиИзКассы(ПараметрыВыемки);
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьДанныеПоКодуКлиент(СтруктураРезультат)
	
	СтрокаРезультата = СтруктураРезультат.ЗначенияПоиска[0];
	
	Если СтрокаРезультата.Свойство("Карта") Тогда
		
		Если СтрокаРезультата.ЭтоРегистрационнаяКарта Тогда
			ПодключаемоеОборудованиеРТКлиент.ВставитьПредупреждениеОНевозможностиОбработкиКарт(
				СтруктураРезультат,
				СтрокаРезультата);
		Иначе
			ДисконтнаяКарта = СтрокаРезультата.Карта;
			ОтборыСписковКлиентСервер.ИзменитьЭлементОтбораСписка(
				Список,
				"ДисконтнаяКарта",
				ДисконтнаяКарта,
				ВидСравненияКомпоновкиДанных.Равно);
		КонецЕсли;
		
	ИначеЕсли СтрокаРезультата.Свойство("ЧекПоФискальнымДанным") Тогда
		
		ЧекПоФискальнымДанным = СтрокаРезультата.ЧекПоФискальнымДанным;
		ОтборыСписковКлиентСервер.ИзменитьЭлементОтбораСписка(
			Список,
			"Ссылка",
			ЧекПоФискальнымДанным,
			Истина,
			ВидСравненияКомпоновкиДанных.Равно);
			
	КонецЕсли;
		
	Если СтрокаРезультата.Свойство("ТекстПредупреждения") Тогда
		
		ОбщегоНазначенияКлиент.СообщитьПользователю(СтрокаРезультата.ТекстПредупреждения);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти
