#Область ОписаниеПеременных

&НаКлиенте
Перем ПараметрыПредставления;

// СтандартныеПодсистемы.РаботаСКонтрагентами
&НаКлиенте
Перем ПроверкаКонтрагентовПараметрыОбработчикаОжидания Экспорт;

&НаКлиенте
Перем ФормаДлительнойОперации Экспорт;
// Конец СтандартныеПодсистемы.РаботаСКонтрагентами

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Пропускаем инициализацию, чтобы гарантировать получение формы при передаче параметра "АвтоТест".
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		ПриЧтенииСозданииНаСервере();
		ТипСсылки = ТипЗнч(ДокументОснование);
		
		Если ТипСсылки = Тип("ДокументСсылка.РеализацияТоваров") 
			ИЛИ ТипСсылки = Тип("ДокументСсылка.ВозвратТоваровПоставщику") Тогда
			Объект.Контрагент = ДокументОснование.Контрагент;
		ИначеЕсли ТипСсылки = Тип("ДокументСсылка.ПередачаТоваровМеждуОрганизациями") 
			ИЛИ ТипСсылки = Тип("ДокументСсылка.ПеремещениеТоваров") Тогда
			Объект.Контрагент = ДокументОснование.Организация;
		КонецЕсли;
		
	КонецЕсли;
	
	КонтрагентНашаОрганизация = ТипЗнч(Объект.Контрагент) = Тип("СправочникСсылка.Организации");
	
	Если НЕ КонтрагентНашаОрганизация Тогда
		// СтандартныеПодсистемы.РаботаСКонтрагентами
		ПроверкаКонтрагентов.ПриСозданииНаСервереДокумент(ЭтотОбъект, Параметры);
		// Конец СтандартныеПодсистемы.РаботаСКонтрагентами
	КонецЕсли;
	
	ОбщегоНазначенияРТ.ЗаполнитьШапкуДокумента(Объект,КартинкаСостоянияДокумента,Элементы.КартинкаСостоянияДокумента.Подсказка,РазрешеноПроведение);
	
	// ЭлектронноеВзаимодействие.ОбменСКонтрагентами.
	ПараметрыЭДОПриСоздании = ОбменСКонтрагентами.ПараметрыПриСозданииНаСервере_ФормаДокумента();
	ПараметрыЭДОПриСоздании.Форма = ЭтотОбъект;
	ПараметрыЭДОПриСоздании.ДокументСсылка = Объект.Ссылка;
	ПараметрыЭДОПриСоздании.КонтроллерСостояниеЭДО = Элементы.ДекорацияСостояниеЭДО;
	ПараметрыЭДОПриСоздании.ГруппаСостояниеЭДО = Элементы.ГруппаСостояниеЭДО;
	ПараметрыЭДОПриСоздании.МестоРазмещенияКоманд = Элементы.ПодменюЭДО;
	НаправленияЭДО = ОбменСКонтрагентами.НаправленияДокументов();
	ПараметрыЭДОПриСоздании.Направление = НаправленияЭДО.Входящий;
	
	ОбменСКонтрагентами.ПриСозданииНаСервере_ФормаДокумента(ПараметрыЭДОПриСоздании);
	// Конец ЭлектронноеВзаимодействие.ОбменСКонтрагентами.
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	Если НЕ КонтрагентНашаОрганизация Тогда
		// СтандартныеПодсистемы.РаботаСКонтрагентами
		ПроверкаКонтрагентовКлиент.ПриОткрытииДокумент(ЭтотОбъект);
		// Конец СтандартныеПодсистемы.РаботаСКонтрагентами
	КонецЕсли;
	
	// ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	ПараметрыПриОткрытии = ОбменСКонтрагентамиКлиент.ПараметрыПриОткрытии();
	ПараметрыПриОткрытии.Форма = ЭтотОбъект;
	ОбменСКонтрагентамиКлиент.ПриОткрытии(ПараметрыПриОткрытии);
	// Конец ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	Если ВозвращатьПараметрыПредставления Тогда
		ПараметрыПредставления = Новый Структура;
		ПараметрыПредставления.Вставить("ТекстСчетФактура", ТекстСчетФактура);
		ПараметрыПредставления.Вставить("ТекстСписок", ТекстСписок);
		ПараметрыПредставления.Вставить("ГиперссылкаСчетФактура", ГиперссылкаСчетФактура);
		ПараметрыПредставления.Вставить("РазрешенВводНового", РазрешенВводНового);
		ПараметрыПредставления.Вставить("РазрешеныИсправления", РазрешеныИсправления);
		
		ОповеститьОВыборе(ПараметрыПредставления);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ИсточникВыбора.ИмяФормы = "Документ.СчетФактураПолученный.Форма.ФормаДокументыОснования"
	 И ТипЗнч(ВыбранноеЗначение) = Тип("СписокЗначений") Тогда
		
		Объект.ДокументыОснования.Очистить();
		Для Каждого СтрокаСписка Из ВыбранноеЗначение Цикл
			Если СтрокаСписка.Значение.Пустая() Тогда
				Продолжить;
			КонецЕсли; 
			СтрокаТаблицы = Объект.ДокументыОснования.Добавить();
			СтрокаТаблицы.ДокументОснование = СтрокаСписка.Значение;
		КонецЦикла;
		
		УправлениеЭлементамиФормы(ЭтаФорма);
		
	ИначеЕсли ТипЗнч(ВыбранноеЗначение) = Тип("Структура") Тогда
		
		ЗаполнитьЗначенияСвойств(Объект, ВыбранноеЗначение);
		
		УправлениеЭлементамиФормы(ЭтаФорма);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// Подсистема "ЭлектронныеДокументы"
	Если ИмяСобытия = "ОбновитьДокументИБПослеЗаполнения" Тогда
		ЭтотОбъект.Прочитать();
	КонецЕсли;
	// Конец подсистема "ЭлектронныеДокументы"
	
	// Конец подсистема "ЭлектронныеДокументы"
		
	Если НЕ КонтрагентНашаОрганизация Тогда
		// СтандартныеПодсистемы.РаботаСКонтрагентами
		ПроверкаКонтрагентовКлиент.ОбработкаОповещения(ЭтотОбъект, ИмяСобытия, Параметр, Источник);
		// Конец СтандартныеПодсистемы.РаботаСКонтрагентами
	КонецЕсли;
	
	// ЭлектронноеВзаимодействие.ОбменСКонтрагентами.
	ПараметрыОповещения = ОбменСКонтрагентамиКлиент.ПараметрыОповещенияЭДО_ФормаДокумента();
	ПараметрыОповещения.Форма = ЭтотОбъект;
	ПараметрыОповещения.ДокументСсылка = Объект.Ссылка;
	ПараметрыОповещения.КонтроллерСостояниеЭДО = Элементы.ДекорацияСостояниеЭДО;
	ПараметрыОповещения.ГруппаСостояниеЭДО = Элементы.ГруппаСостояниеЭДО;
	ПараметрыОповещения.МестоРазмещенияКоманд = Элементы.ПодменюЭДО;
	
	ОбменСКонтрагентамиКлиент.ОбработкаОповещения_ФормаДокумента(ИмяСобытия, Параметр, Источник, ПараметрыОповещения);
	// Конец ЭлектронноеВзаимодействие.ОбменСКонтрагентами.
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// Обработчик механизма "ДатыЗапретаИзменения".
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	
	ПриЧтенииСозданииНаСервере();
	
	ОбщегоНазначенияРТКлиентСервер.ОбновитьСостояниеДокумента(Объект, Элементы.КартинкаСостоянияДокумента.Подсказка, КартинкаСостоянияДокумента, РазрешеноПроведение);
	
	// ЭлектронноеВзаимодействие.ОбменСКонтрагентами.
	ПараметрыЭДОПриСоздании = ОбменСКонтрагентами.ПараметрыПриЧтенииНаСервере_ФормаДокумента();
	ПараметрыЭДОПриСоздании.Форма = ЭтотОбъект;
	ПараметрыЭДОПриСоздании.ДокументСсылка = Объект.Ссылка;
	ПараметрыЭДОПриСоздании.КонтроллерСостояниеЭДО = Элементы.ДекорацияСостояниеЭДО;
	ПараметрыЭДОПриСоздании.ГруппаСостояниеЭДО = Элементы.ГруппаСостояниеЭДО;
	ОбменСКонтрагентами.ПриЧтенииНаСервере_ФормаДокумента(ПараметрыЭДОПриСоздании);
	// ЭлектронноеВзаимодействие.ОбменСКонтрагентами.
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	Если НЕ КонтрагентНашаОрганизация Тогда
		// СтандартныеПодсистемы.РаботаСКонтрагентами
		ПроверкаКонтрагентов.ПередЗаписьюНаСервереДокумент(ЭтотОбъект, ТекущийОбъект);
		// Конец СтандартныеПодсистемы.РаботаСКонтрагентами
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	Если НЕ КонтрагентНашаОрганизация Тогда
		// СтандартныеПодсистемы.РаботаСКонтрагентами
		ПроверкаКонтрагентов.ПриЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект);
		// Конец СтандартныеПодсистемы.РаботаСКонтрагентами
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	Если ВозвращатьПараметрыПредставления Тогда
		ПараметрыПредставления = ЗакупкиСервер.ПараметрыПредставленияСчетаФактуры(ТекущийДокументОснование, Объект.Организация);
		ТекстСчетФактура       = ПараметрыПредставления.ТекстСчетФактура;
		ТекстСписок            = ПараметрыПредставления.ТекстСписок;
		ГиперссылкаСчетФактура = ПараметрыПредставления.ГиперссылкаСчетФактура;
		РазрешенВводНового	   = ПараметрыПредставления.РазрешенВводНового;
		РазрешеныИсправления   = ПараметрыПредставления.РазрешеныИсправления;
	КонецЕсли;
	
	Если НЕ КонтрагентНашаОрганизация Тогда
		// СтандартныеПодсистемы.РаботаСКонтрагентами
		ПроверкаКонтрагентов.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект);
		// Конец СтандартныеПодсистемы.РаботаСКонтрагентами
	КонецЕсли;
	
	// ЭлектронноеВзаимодействие.ОбменСКонтрагентами.
	ПараметрыПослеЗаписи = ОбменСКонтрагентами.ПараметрыПослеЗаписиНаСервере();
	ПараметрыПослеЗаписи.Форма = ЭтотОбъект;
	ПараметрыПослеЗаписи.ДокументСсылка = Объект.Ссылка;
	ПараметрыПослеЗаписи.КонтроллерСостояниеЭДО = Элементы.ДекорацияСостояниеЭДО;
	ПараметрыПослеЗаписи.ГруппаСостояниеЭДО = Элементы.ГруппаСостояниеЭДО;
	
	ОбменСКонтрагентами.ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи, ПараметрыПослеЗаписи);
	// Конец ЭлектронноеВзаимодействие.ОбменСКонтрагентами.
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	ОбщегоНазначенияРТКлиентСервер.ОбновитьСостояниеДокумента(Объект, Элементы.КартинкаСостоянияДокумента.Подсказка, КартинкаСостоянияДокумента, РазрешеноПроведение);
	
	// &ЗамерПроизводительности 
	ОценкаПроизводительностиРТКлиент.ЗакончитьЗамер(ПараметрыЗаписи.Замер);
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	// &ЗамерПроизводительности 
	Замер = ОценкаПроизводительностиРТКлиент.НачатьЗамер(Ложь, 
	                                            "Документ.СчетФактураПолученный.ФормаДокумента.Запись",
                                                           Ложь);
	
	ПараметрыЗаписи.Вставить("Замер", Замер);

КонецПроцедуры

&НаКлиенте
Процедура СчетФактураОснованиеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если ЗначениеЗаполнено(Объект.ДокументыОснования) Тогда
		СтруктураОтбор = Новый Структура("ДокументОснование, Организация, ПометкаУдаления, ЭтоИсправление",
			Объект.ДокументыОснования[0].ДокументОснование, Объект.Организация, Ложь, Объект.Исправление);
		
		ОткрытьФорму(
		"Документ.СчетФактураПолученный.ФормаВыбора",
		Новый Структура("Отбор", СтруктураОтбор),
		Элемент);
	Иначе
		ПоказатьПредупреждение(,"Сначала необходимо заполнить документы основания");
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура НадписьДобавитьДокументОснованиеНажатие(Элемент)
	
	ОткрытьСписокДокументовОснований();
	
КонецПроцедуры

&НаКлиенте
Процедура ТекстДокументыОснованияНажатие(Элемент, СтандартнаяОбработка)
	
	ОткрытьСписокДокументовОснований(СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура НадписьДокументОснованиеНеУказанГиперссылкаНажатие(Элемент)
	
	ОткрытьСписокДокументовОснований();
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаСоставленияПриИзменении(Элемент)
	
	НастроитьВидимостьВалютыКодаОперации(ЭтаФорма);
	ЗаполнитьДатуПолучения();
	
	Если НЕ КонтрагентНашаОрганизация Тогда
		// СтандартныеПодсистемы.РаботаСКонтрагентами
		ПроверкаКонтрагентовКлиент.ЗапуститьПроверкуКонтрагентовВДокументе(ЭтотОбъект, Объект.ДатаСоставления);
		// Конец СтандартныеПодсистемы.РаботаСКонтрагентами
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаИсправленияПриИзменении(Элемент)
	
	ЗаполнитьДатуПолучения();
	
КонецПроцедуры

&НаКлиенте
Процедура ТипСчетаФактурыПриИзменении(Элемент)
	
	УправлениеЭлементамиФормы(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура КодВидаОперацииНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыбратьЭлементСписка", ЭтотОбъект);
	СписокКодовВидовОпераций.ПоказатьВыборЭлемента(ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияЭДОНажатие(Элемент, СтандартнаяОбработка)
	
	// ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	ОбменСКонтрагентамиКлиент.СостояниеЭДОНажатие_ФормаДокумента(ЭтотОбъект, СтандартнаяОбработка);
	// Конец ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ПроверитьКонтрагента(Команда)
	
	Если НЕ КонтрагентНашаОрганизация Тогда
		// СтандартныеПодсистемы.РаботаСКонтрагентами
		ПроверкаКонтрагентовКлиент.ПроверитьКонтрагентовВДокументеПоКнопке(ЭтотОбъект);
		// Конец СтандартныеПодсистемы.РаботаСКонтрагентами
	КонецЕсли;
	
КонецПроцедуры

// ЭлектронноеВзаимодействие.ОбменСКонтрагентами.
&НаКлиенте
Процедура Подключаемый_ОбработчикОжиданияЭДО()

	// Подсистема «Обмен с контрагентами»
	ОбменСКонтрагентамиКлиент.ОбработчикОжиданияЭДО(ЭтотОбъект);
	// Конец Подсистема «Обмен с контрагентами»

КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуЭДО(Команда)

	// Подсистема «Обмен с контрагентами»
	ЭлектронноеВзаимодействиеКлиент.ВыполнитьПодключаемуюКомандуЭДО(Команда, ЭтотОбъект, Объект);
	// Конец Подсистема «Обмен с контрагентами»

КонецПроцедуры
// Конец ЭлектронноеВзаимодействие.ОбменСКонтрагентами.

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область Прочее

&НаКлиенте
Процедура ВыбратьЭлементСписка(ВыбранныйЭлемент, Параметры) Экспорт
	
	Если ВыбранныйЭлемент <> Неопределено Тогда
		Объект.КодВидаОперации = ВыбранныйЭлемент.Значение;
	КонецЕсли;
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииСозданииНаСервере()
	
	Перем РеквизитыСчетаФактуры;
	
	Если Параметры.Свойство("ДокументОснование") Тогда
		ТекущийДокументОснование = Параметры.ДокументОснование;
		ДокументОснование        = Параметры.ДокументОснование;
	КонецЕсли;
	
	Если Параметры.Свойство("ВозвращатьПараметрыПредставления") Тогда
		ВозвращатьПараметрыПредставления = Параметры.ВозвращатьПараметрыПредставления;
	КонецЕсли;
	
	Если ВозвращатьПараметрыПредставления Тогда
		ПараметрыПредставления = ЗакупкиСервер.ПараметрыПредставленияСчетаФактуры(ТекущийДокументОснование, Объект.Организация);
		ТекстСчетФактура       = ПараметрыПредставления.ТекстСчетФактура;
		ТекстСписок            = ПараметрыПредставления.ТекстСписок;
		ГиперссылкаСчетФактура = ПараметрыПредставления.ГиперссылкаСчетФактура;
		РазрешенВводНового	   = ПараметрыПредставления.РазрешенВводНового;
		РазрешеныИсправления   = ПараметрыПредставления.РазрешеныИсправления;
	КонецЕсли;
	
	ДатаНачалаПримененияПостановления1137 = Константы.ДатаНачалаПримененияПостановления1137.Получить();
	
	УправлениеЭлементамиФормы(ЭтаФорма);
	НастроитьВидимостьВалютыКодаОперации(ЭтаФорма);
	
	Документы.СчетФактураПолученный.СчетаФактурыПоОснованию(ДокументОснование, Объект.Организация, РеквизитыСчетаФактуры, Ложь);
	
	СписокКодовВидовОпераций = Документы.СчетФактураПолученный.СписокКодовВидовОпераций();
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеЭлементамиФормы(Форма)
	
	Если Форма.Объект.Исправление Тогда
		Форма.Элементы.ГруппаСтраницыНомерДата.ТекущаяСтраница = Форма.Элементы.ГруппаНомерДатаПриИсправлении;
		Форма.Элементы.ГруппаСтраницыИсправлениеКорректировка.ТекущаяСтраница = Форма.Элементы.ГруппаИсправление;
	Иначе
		Форма.Элементы.ГруппаСтраницыНомерДата.ТекущаяСтраница = Форма.Элементы.ГруппаНомерДата;
		Если Форма.Объект.Корректировочный Тогда
			Форма.Элементы.ГруппаСтраницыИсправлениеКорректировка.ТекущаяСтраница = Форма.Элементы.ГруппаКорректировочный;
		Иначе
			Форма.Элементы.ГруппаСтраницыИсправлениеКорректировка.Видимость = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	МассивИменЭлементов = Новый Массив;
	МассивИменЭлементов.Добавить("Исправление");
	ОбщегоНазначенияРТКлиентСервер.УстановитьСвойствоЭлементовФормы(Форма.Элементы, МассивИменЭлементов, "ТолькоПросмотр", Форма.Объект.Исправление);
	
	МассивИменЭлементов = Новый Массив;
	МассивИменЭлементов.Добавить("Корректировочный");
	ОбщегоНазначенияРТКлиентСервер.УстановитьСвойствоЭлементовФормы(Форма.Элементы, МассивИменЭлементов, "ТолькоПросмотр", Форма.Объект.Корректировочный);
	
	// ГруппаДокументыОснования
	Если Форма.Объект.ДокументыОснования.Количество() = 0 Тогда
		Форма.Элементы.СтраницыДокументыОснования.ТекущаяСтраница = Форма.Элементы.СтраницаДокументОснованиеНеУказан;
		Форма.ДокументОснование = Неопределено;
	ИначеЕсли Форма.Объект.ДокументыОснования.Количество() > 1 Тогда
		Форма.Элементы.СтраницыДокументыОснования.ТекущаяСтраница = Форма.Элементы.СтраницаДокументыОснования;
		Форма.ТекстДокументыОснования = "";
		Для Каждого СтрокаТаблицы Из Форма.Объект.ДокументыОснования Цикл
			Форма.ТекстДокументыОснования = Форма.ТекстДокументыОснования + ?(Форма.ТекстДокументыОснования="","",", ") + СтрокаТаблицы.ДокументОснование;
		КонецЦикла;
	Иначе
		Форма.Элементы.СтраницыДокументыОснования.ТекущаяСтраница = Форма.Элементы.СтраницаДокументОснование;
		Если Форма.Объект.ДокументыОснования.Количество() > 0 Тогда
			Форма.ДокументОснование = Форма.Объект.ДокументыОснования[0].ДокументОснование;
		Иначе
			Форма.ДокументОснование = Неопределено;
		КонецЕсли;
	КонецЕсли;
	
	ЭтоНовый = НЕ ЗначениеЗаполнено(Форма.Объект.Ссылка);
	
	МассивИменЭлементов = Новый Массив;
	МассивИменЭлементов.Добавить("Номер");
	МассивИменЭлементов.Добавить("ДатаСоставления");
	МассивИменЭлементов.Добавить("НомерПриИсправлении");
	МассивИменЭлементов.Добавить("ДатаПриИсправлении");
	МассивИменЭлементов.Добавить("НомерИсправленияПриИсправлении");
	МассивИменЭлементов.Добавить("ДатаСоставленияПриИсправлении");
	МассивИменЭлементов.Добавить("КодВидаОперации");
	ОбщегоНазначенияРТКлиентСервер.УстановитьСвойствоЭлементовФормы(Форма.Элементы, МассивИменЭлементов, "ТолькоПросмотр", НЕ ЭтоНовый);
	
	ОбщегоНазначенияРТКлиентСервер.УстановитьСвойствоЭлементаФормы(Форма.Элементы, "Дата", "ТолькоПросмотр", Форма.Объект.ПолученВЭлектронномВиде);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьДатуПолучения()
	
	Если ЗначениеЗаполнено(Объект.Дата) Тогда
		Возврат;
	КонецЕсли;
	
	Если Объект.Исправление И ЗначениеЗаполнено(Объект.ДатаИсправления) Тогда
		Объект.Дата = Объект.ДатаИсправления;
	ИначеЕсли ЗначениеЗаполнено(Объект.ДатаСоставления) Тогда
		Объект.Дата = Объект.ДатаСоставления;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура НастроитьВидимостьВалютыКодаОперации(Форма)
	
	Если ЗначениеЗаполнено(Форма.Объект.ДатаСоставления) И Форма.Объект.ДатаСоставления < Форма.ДатаНачалаПримененияПостановления1137 Тогда
		Форма.Элементы.Валюта.АвтоОтметкаНезаполненного = Ложь;
		Форма.Элементы.Валюта.ОтметкаНезаполненного = Ложь;
		Форма.Элементы.КодВидаОперации.АвтоОтметкаНезаполненного = Ложь;
		Форма.Элементы.КодВидаОперации.ОтметкаНезаполненного = Ложь;
	Иначе
		Форма.Элементы.Валюта.АвтоОтметкаНезаполненного = Истина;
		Форма.Элементы.КодВидаОперации.АвтоОтметкаНезаполненного = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьСписокДокументовОснований(СтандартнаяОбработка = Ложь)
	
	СтандартнаяОбработка = Ложь;
	
	Отказ = Ложь;
	
	Если НЕ ЗначениеЗаполнено(Объект.Организация) Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(
			НСтр("ru='Поле ""Организация"" не заполнено'"),
			,
			"Организация",
			"Объект",
			Отказ);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.Контрагент) Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(
			НСтр("ru='Поле ""Контрагент"" не заполнено'"),
			,
			"Контрагент",
			"Объект",
			Отказ);
	КонецЕсли;
	
	Если НЕ Отказ Тогда
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Организация", Объект.Организация);
		ПараметрыФормы.Вставить("Контрагент", Объект.Контрагент);
		ПараметрыФормы.Вставить("СписокДокументовОснований", Новый СписокЗначений);
		Для Каждого СтрокаТаблицы Из Объект.ДокументыОснования Цикл
			ПараметрыФормы.СписокДокументовОснований.Добавить(СтрокаТаблицы.ДокументОснование)
		КонецЦикла;
		
		Модифицированность = Истина;
		
		ОткрытьФорму("Документ.СчетФактураПолученный.Форма.ФормаДокументыОснования",
			ПараметрыФормы,
			ЭтаФорма);
		
	КонецЕсли;
	
КонецПроцедуры

// СтандартныеПодсистемы.РаботаСКонтрагентами
&НаКлиенте
Процедура Подключаемый_ПоказатьПредложениеИспользоватьПроверкуКонтрагентов()
	ПроверкаКонтрагентовКлиент.ПредложитьВключитьПроверкуКонтрагентов(ЭтотОбъект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.РаботаСКонтрагентами

// СтандартныеПодсистемы.РаботаСКонтрагентами
&НаКлиенте
Процедура Подключаемый_ОбработатьРезультатПроверкиКонтрагентов()
	ПроверкаКонтрагентовКлиент.ОбработатьРезультатПроверкиКонтрагентовВДокументе(ЭтотОбъект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.РаботаСКонтрагентами

// СтандартныеПодсистемы.РаботаСКонтрагентами
&НаСервере
Процедура ОтобразитьРезультатПроверкиКонтрагента() Экспорт
	ПроверкаКонтрагентов.ОтобразитьРезультатПроверкиКонтрагентаВДокументе(ЭтотОбъект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.РаботаСКонтрагентами

// СтандартныеПодсистемы.РаботаСКонтрагентами
&НаСервере
Процедура ПроверитьКонтрагентовФоновоеЗадание(ПараметрыФоновогоЗадания) Экспорт	
	ПроверкаКонтрагентов.ПроверитьКонтрагентовВДокументеФоновоеЗадание(ЭтотОбъект, ПараметрыФоновогоЗадания);
КонецПроцедуры
// Конец СтандартныеПодсистемы.РаботаСКонтрагентами

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат) Экспорт
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти

#КонецОбласти
