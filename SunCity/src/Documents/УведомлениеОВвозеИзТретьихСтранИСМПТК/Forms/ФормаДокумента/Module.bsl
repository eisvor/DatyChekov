
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.РегНомерНаБумажномНосителе) 
		ИЛИ Объект.ДатаВыпискиНаБумажномНосителе <> '00010101000000' Тогда
		ВыпискаБумажногоУведомления = Истина;
	Иначе
		ВыпискаБумажногоУведомления = Ложь;
	КонецЕсли;

	//Заполнение по отборам в форме списка
	Если Параметры.Ключ.Пустая() Тогда
		Если Параметры.ЗначенияЗаполнения.Свойство("Организация") Тогда
			СтруктураДанных = ПолучитьРеквизитыОрганизацииКонтрагента(Параметры.ЗначенияЗаполнения.Организация, "Получатель");
			Объект.Организация = Параметры.ЗначенияЗаполнения.Организация;
			Объект.Получатель  = Параметры.ЗначенияЗаполнения.Организация;
			ЗаполнитьЗначенияСвойств(Объект, СтруктураДанных); 
		КонецЕсли;
	КонецЕсли;
	
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("ПрефиксыЭлементовФормы", "ДеревоМаркированнойПродукции");
	СобытияФормИСМПТКПереопределяемый.ПриСозданииНаСервере_НастроитьПодключаемоеОборудование(ЭтаФорма, ДополнительныеПараметры);

	Если Параметры.Ключ.Пустая() Тогда
		ПодготовитьФормуНаСервере();
		ИнтерфейсИСМПТК.УстановитьЗаголовокФормыДокумента(, Объект.Ссылка, ЭтаФорма);
		Объект.НомерИСМПТ = "";
	КонецЕсли;
	
	ИнициализироватьДокументыСоответствия();
	
	СобытияФормИСМПТКПереопределяемый.УстановитьУсловноеОформлениеХарактеристикНоменклатуры(ЭтаФорма);
	ЗаполнитьСлужебныеРеквизитыПоНоменклатуре();
	ЗаполнитьПризнакИспользованияХарактеристик();
	
	СобытияФормИСМПТКПереопределяемый.ПриСозданииНаСервере(ЭтотОбъект, Отказ, СтандартнаяОбработка);
	
	УправлениеФормой();

КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	УправлениеФормой();
	СформироватьДеревоКодовМаркировки();
	ЗапретитьРедактированиеПолей();
	
	СобытияФормИСМПТККлиентПереопределяемый.ПриОткрытии(ЭтотОбъект, Отказ);
	
	ОбщегоНазначенияИСМПТККлиентПереопределяемый.НачатьОбновлениеКоманд(ЭтотОбъект);
	ОбщегоНазначенияИСМПТККлиентПереопределяемый.НачатьПодключениеОборудованиеПриОткрытииФормы(ЭтаФорма, "СканерШтрихкода");
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	Если НЕ ЗавершениеРаботы И ИспользуютсяСканерыШтрихкода Тогда
		ОбщегоНазначенияИСМПТККлиентПереопределяемый.НачатьОтключениеОборудованиеПриЗакрытииФормы(Неопределено, ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	ПодготовитьФормуНаСервере();
	ИнициализироватьДокументыСоответствия();
	ЗаполнитьПризнакИспользованияХарактеристик();
	ИнтерфейсИСМПТК.УстановитьЗаголовокФормыДокумента(, Объект.Ссылка, ЭтаФорма);
	СобытияФормИСМПТКПереопределяемый.ПриЧтенииНаСервере(ТекущийОбъект, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)

	УправлениеФормой();
	СобытияФормИСМПТККлиентПереопределяемый.ПослеЗаписи(ЭтаФорма, ПараметрыЗаписи);
	ИнтеграцияИСМПТККлиент.ОповеститьФормы(РаботаСДокументамиИСМПТККлиентСервер.ИмяСобытияЗаписьУведомлениеОВвозеИзТретьихСтран());
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	ЗаполнитьСлужебныеРеквизитыПоНоменклатуре();
	ЗаполнитьПризнакИспользованияХарактеристик();
	ИнтерфейсИСМПТК.УстановитьЗаголовокФормыДокумента(, Объект.Ссылка, ЭтаФорма);
	СобытияФормИСМПТКПереопределяемый.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	СобытияФормИСМПТКПереопределяемый.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	ИзменитьДокументОснование = Ложь;
	
	//Сначала проверяем, если ли в выбранном основании товары, по которым необходимо заполнять документ
	ЕстьМаркируемыйТовар = ПроверитьНаличиеМаркируемогоТовара(ВыбранноеЗначение);
	
	Если Не ЕстьМаркируемыйТовар Тогда
		//Если в выбранном основании нет маркируемого товара, то заполнять документ ИСМПТ по нему не имеет смысла. 
		//Сообщаем пользователю, отменяем выбор.
		ТекстСообщения = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияВДокументеОтсутствуетМаркируемаяпродукция();
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ДокументОснование%", ВыбранноеЗначение);
		Сообщить(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(ВыбранноеЗначение) <> Тип("Структура") Тогда
		
		Если ЗначениеЗаполнено(Объект.ДокументОснование)
			И Объект.ДокументОснование <> ВыбранноеЗначение 
			И СтрНайти(ИсточникВыбора.ИмяФормы, "ФормаВыбораИзКлассификатора") = 0 Тогда
			
			ТекстВопроса = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияДокументУжеОтраженВУчетеНужноОтразитьПовторно();
			ТекстВопроса = СтрЗаменить(ТекстВопроса, "%СтарыйДокументОснование%", Объект.ДокументОснование);
			
			ИзменитьДокументОснованиеЗавершение = Новый ОписаниеОповещения("ИзменитьДокументОснованиеЗавершение", ЭтаФорма, Новый Структура("ВыбранноеЗначение", ВыбранноеЗначение));
			ПоказатьВопрос(ИзменитьДокументОснованиеЗавершение, ТекстВопроса, РежимДиалогаВопрос.ОКОтмена);
			
		Иначе
			
			ИзменитьДокументОснование = Истина;
			
		КонецЕсли;
		
		Если ИзменитьДокументОснование Тогда
				
			Структура_СвязанноеУведомление = ПроверитьСвязанноеУведомление(ВыбранноеЗначение);
						
			Если Структура_СвязанноеУведомление = Неопределено Тогда
				//Если у выбранного документа-основания нет связанного уведомления, заполняем его без вопросов
				Объект.ДокументОснование = ВыбранноеЗначение;
				СформироватьПредставлениеДокументаОснования(ЭтаФорма);
				
				Если Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыДокументовИСМПТК.НеОпределен") Тогда
					ТекстВопроса = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияПерезаполнитьДокументПоНовомуОснованию();
					ПерезаполнитьДокументПоОснованию = Новый ОписаниеОповещения("ПерезаполнитьДокументПоОснованию", ЭтаФорма);
					ПоказатьВопрос(ПерезаполнитьДокументПоОснованию, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
				КонецЕсли;
				
				Модифицированность = Истина;				
			Иначе
				//Если связанный документ ИСМПТ есть, предупреждаем об этом пользователя и даем возможность отказаться от выбора
				ТекстВопроса = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияЕстьСвязанныйДокументМаркировкиПривязатьЕщеОдин();
				ТекстВопроса = СтрЗаменить(ТекстВопроса, "%ДокументОснование%", ВыбранноеЗначение);
				
				ПродолжитьЗаполнениеДокументаОснования = Новый ОписаниеОповещения("ПродолжитьЗаполнениеДокументаОснования", ЭтаФорма, Новый Структура("ВыбранноеЗначение", ВыбранноеЗначение));
				ПоказатьВопрос(ПродолжитьЗаполнениеДокументаОснования, ТекстВопроса, РежимДиалогаВопрос.ОКОтмена);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = РаботаСДокументамиИСМПТККлиентСервер.ИмяСобытияЗаписьУведомлениеОВвозеИзТретьихСтран() Тогда		
		
		Если Не Объект.Ссылка.Пустая() Тогда
			ЭтаФорма.Прочитать();	
		КонецЕсли;
		
		СформироватьДеревоКодовМаркировки();
		ЗапретитьРедактированиеПолей();
		
	ИначеЕсли Источник = "ПодключаемоеОборудование" И ВводДоступен() Тогда
		Если ИмяСобытия = "ScanData" Тогда
			ОбработкаСобытияСканераОбщая(Параметр);	
		КонецЕсли;
	Иначе			
		РаботаСДокументамиИСМПТККлиентПереопределяемый.ОбработкаОповещенияДокументыИСМПТ(ЭтаФорма, Объект.Ссылка, ИмяСобытия, Параметр, Источник);		
	КонецЕсли;
	
	СобытияФормИСМПТККлиентПереопределяемый.ОбработкаОповещения(ЭтотОбъект, ИмяСобытия, Параметр, Источник);
	УправлениеФормой();	
	
КонецПроцедуры

&НаКлиенте
Процедура ВнешнееСобытие(Источник, Событие, Данные)
	
	Если Не СобытияФормИСМПТККлиентПереопределяемый.ОбрабатыватьВнешнееСобытиеТО() Тогда 
		Возврат;
	КонецЕсли;
	
	Параметр = Новый Массив;
	Параметр.Добавить(Данные);
	Параметр.Добавить(Неопределено);
	
	Если ВводДоступен() Тогда
		Если Событие = "Штрихкод" ИЛИ Событие = "ПолученШтрихкод" Тогда
			ОбработкаСобытияСканераОбщая(Параметр);
		КонецЕсли;
	Иначе
		РаботаСДокументамиИСМПТККлиентПереопределяемый.ОбработкаОповещенияДокументыИСМПТ(ЭтаФорма, Объект.Ссылка, Событие, Параметр, Источник);		
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
		
	Если ВыпискаБумажногоУведомления И Не ЗначениеЗаполнено(Объект.ДатаВыпискиНаБумажномНосителе) Тогда
		ТекстСообщения = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияНеУказанаДатаДокументаВыписанногоНаБумаге();
		ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
	Если ВыпискаБумажногоУведомления И Не ЗначениеЗаполнено(Объект.РегНомерНаБумажномНосителе) 
		И Объект.ДатаВыпискиНаБумажномНосителе = '00010101000000' Тогда
		ТекстСообщения = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияНеУказанНомерДокументаВыписанногоНаБумаге();
		ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаСобытияСканераОбщая(Параметр)
	
	ОчиститьСообщения();
	Если НЕ Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыДокументовИСМПТК.НеОпределен") Тогда
		ТекстСообщения = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияУказаниеКМТолькоВЧерновике("ИСМПТ");
		ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);	
	Иначе
		Если ИнтеграцияИСМПТКВызовСервера.ИспользоватьАвтоПроверкаВалидностиКодаИСМПТК() 
			И Не ЗначениеЗаполнено(Объект.Организация) Тогда
			ТекстСообщения = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияВключенАвтозапросНужнаОрганизацияДляВыполнения("АвтоПроверкаВалидностиКодаИСМПТК");
			ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
			Возврат;
		КонецЕсли;
		Если Не РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйКлиентСервер.ПроверкаФорматаТранспортногоКодаПройденаУспешно(РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйКлиент.ПреобразоватьДанныеСоСканераВСтруктуру(Параметр)) Тогда
			Возврат;
		КонецЕсли;
		ОбработатьКодМаркировки(РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйКлиент.ПреобразоватьДанныеСоСканераВСтруктуру(Параметр));
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

#Область ОтражениеВУчете

&НаКлиенте
Процедура ПредставлениеДокументаОснованияНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если ЗначениеЗаполнено(Объект.ДокументОснование) Тогда
		ПоказатьЗначение(, Объект.ДокументОснование);
	Иначе
		Кнопки = Новый СписокЗначений;
		Кнопки.Добавить("Создать", РаботаСТекстамиИСМПТККлиентСервер.ТекстКомандыСоздать());
		Кнопки.Добавить("Выбрать", РаботаСТекстамиИСМПТККлиентСервер.ТекстКомандыВыбрать());
		Кнопки.Добавить("Отмена", РаботаСТекстамиИСМПТККлиентСервер.ТекстКомандыОтмена());
		ОтразитьДокументВУчетеЗавершение = Новый ОписаниеОповещения("ОтразитьДокументВУчетеЗавершение", ЭтаФорма);
		Если Модифицированность Тогда
			ПоказатьВопрос(ОтразитьДокументВУчетеЗавершение, РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияВопросОтразитьДокументВУчетеСпредварительнойЗаписью(), Кнопки);
		Иначе
			ПоказатьВопрос(ОтразитьДокументВУчетеЗавершение, РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияВопросОтразитьДокументВУчете(), Кнопки);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтразитьДокументВУчетеЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если Модифицированность Тогда
		Попытка
			ЭтотОбъект.Записать();
		Исключение 
			
			Если Объект.Ссылка.Пустая() Тогда
				ПредставлениеПолное = ОбщегоНазначенияИСМПТКВызовСервера.ПолучитьИмяИПредставлениеПоСсылке(Объект.Ссылка).Синоним;
			Иначе
				ПредставлениеПолное = Объект.Ссылка;
			КонецЕсли;
			
			ТекстОшибки = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияОшибкаПриЗаписиДокументаСПараметромСмотриЖурналРегистрации();
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ДанныеДокумента%", ПредставлениеПолное);
			
			ИмяСобытия  = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияИмяСобытияЗаписьДокумента();
			ИмяСобытия  = СтрЗаменить(ИмяСобытия, "%ЗаписываемыйДокумент%", ПредставлениеПолное);
			ОбщегоНазначенияИСМПТКВызовСервера.СоздатьЗаписьЖурналаРегистрации(ИмяСобытия, "Ошибка",,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
			ВызватьИсключение ТекстОшибки;
		КонецПопытки;
	КонецЕсли;
	
	Если РезультатВопроса = "Выбрать" Тогда
		ВыбратьДокументОснование();
	ИначеЕсли РезультатВопроса = "Создать" Тогда
		СоздатьДокументОснованиеНаКлиентеПослеЗаписи(КодВозвратаДиалога.ОК, Неопределено);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДокументОснованиеСоздать(Команда)
	
	Если Объект.Ссылка.Пустая() ИЛИ ЭтаФорма.Модифицированность Тогда
		
		СоздатьДокументОснованиеНаКлиентеПослеЗаписи = Новый ОписаниеОповещения("СоздатьДокументОснованиеНаКлиентеПослеЗаписи", ЭтаФорма);	
		ИнтеграцияИСМПТККлиент.ВопросЗаписатьОбъектПередВыполнением(СоздатьДокументОснованиеНаКлиентеПослеЗаписи);
		
	Иначе
		
		СоздатьДокументОснованиеНаКлиентеПослеЗаписи(КодВозвратаДиалога.ОК, Неопределено);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьДокументОснованиеНаКлиентеПослеЗаписи(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.ОК Тогда
		
		ДокументыВыбора = РаботаСДокументамиИСМПТККлиентСерверПереопределяемый.ПолучитьСписокДокументовОснованияУведомленияОВвозеИСМПТ();
		
		Если ДокументыВыбора.Количество() > 1 Тогда
			
			ПараметрыФормы = Новый Структура();
			ПараметрыФормы.Вставить("ДокументыВыбора", ДокументыВыбора);
			
			Оповещение = Новый ОписаниеОповещения("СозданиеДокументаОснованияЗавершение", ЭтотОбъект);
			ОткрытьФорму("ОбщаяФорма.ФормаВыбораДокументаОснованияИСМПТК", ПараметрыФормы,,,,,Оповещение, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
			
		ИначеЕсли ДокументыВыбора.Количество() = 1 Тогда
			
			ВыбранныйДокумент = ДокументыВыбора[0].Значение;
			СозданиеДокументаОснованияЗавершение(ВыбранныйДокумент, Неопределено);
			
		КонецЕсли;
	КонецЕсли;
			
КонецПроцедуры

&НаКлиенте
Процедура СозданиеДокументаОснованияЗавершение(ВыбранныйДокумент, ДополнительныеПараметры) Экспорт
	
	Если Не ВыбранныйДокумент = Неопределено Тогда
		Массив = Новый Массив;
		Массив.Добавить(Объект.Ссылка);
		
		ДанныеДляСоздания = Новый Структура();
		ДанныеДляСоздания.Вставить("ИсходныйДокумент", 	  Массив);
		ДанныеДляСоздания.Вставить("СоздаваемыйДокумент", ВыбранныйДокумент);

		РаботаСДокументамиИСМПТККлиент.СоздатьПервичныйДокумент(ДанныеДляСоздания);
		СформироватьПредставлениеДокументаОснования(ЭтаФорма);
		Модифицированность = Истина;
		
	КонецЕсли;
			
КонецПроцедуры

&НаКлиенте
Процедура ДокументОснованиеВыбрать(Команда)
	
	ВыбратьДокументОснование();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьДокументОснование()
	
	Если Объект.Направление = ПредопределенноеЗначение("Перечисление.НаправленияДокументовИСМПТК.ПустаяСсылка") Тогда
		ПоказатьПредупреждение(, РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияНеУказаноНаправлениеДокумента());
		Возврат;
	КонецЕсли;
	
	ДокументыВыбора = РаботаСДокументамиИСМПТККлиентСерверПереопределяемый.ПолучитьСписокДокументовОснованияУведомленияОВвозеИСМПТ();
	
	Если ДокументыВыбора.Количество() > 1 Тогда
		
		ПараметрыФормы = Новый Структура();
		ПараметрыФормы.Вставить("ДокументыВыбора", ДокументыВыбора);
					
		Оповещение = Новый ОписаниеОповещения("ВыборДокументаОснованияЗавершение", ЭтотОбъект);
		ОткрытьФорму("ОбщаяФорма.ФормаВыбораДокументаОснованияИСМПТК", ПараметрыФормы,,,,,Оповещение,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	ИначеЕсли ДокументыВыбора.Количество() = 1 Тогда
		
		ВыбранныйДокумент = ДокументыВыбора[0].Значение;
		ВыборДокументаОснованияЗавершение(ВыбранныйДокумент, Неопределено);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыборДокументаОснованияЗавершение(ВыбранныйДокумент, ДополнительныеПараметры) Экспорт
	
	Если ВыбранныйДокумент <> "" И ТипЗнч(ВыбранныйДокумент) <> Тип("Неопределено") Тогда
		
		ИмяДокумента = ВыбранныйДокумент;
		
		СтруктураОтбора = Новый Структура();
		Если ЗначениеЗаполнено(Объект.Организация) Тогда
			СтруктураОтбора.Вставить("Организация", Объект.Организация);
		КонецЕсли;
		
		ДопПараметрыДляОтбора = Новый Структура("ИмяДокумента", ИмяДокумента);
		РаботаСДокументамиИСМПТККлиентПереопределяемый.ДополнитьСтруктуруОтбораПервичногоДокумента(СтруктураОтбора, Объект, ДопПараметрыДляОтбора);
				
		СтруктураПараметров = Новый Структура("Отбор, РежимВыбора, МножественныйВыбор", СтруктураОтбора, Истина, Ложь);
		
		ИмяФормыВыбора = "Документ." + ИмяДокумента + ".ФормаВыбора"; 
		ОткрытьФорму(ИмяФормыВыбора, СтруктураПараметров , ЭтаФорма);
		
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьДокументОснование(Команда)
	
	Если ЗначениеЗаполнено(Объект.ДокументОснование) Тогда
		ПоказатьЗначение(, Объект.ДокументОснование);
	Иначе
		Действие = РаботаСДокументамиИСМПТККлиентСервер.ДействиеОткрыть();
		ПоказатьПредупреждение(, РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияОтказДокументНеОтраженВУчете(Действие));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтсоединитьДокументОснование(Команда)
	
	Если ЗначениеЗаполнено(Объект.ДокументОснование) Тогда
		Объект.ДокументОснование = Неопределено;
		СформироватьПредставлениеДокументаОснования(ЭтаФорма);
		Модифицированность = Истина;
	Иначе
		Действие = РаботаСДокументамиИСМПТККлиентСервер.ДействиеОтсоединить();
		ПоказатьПредупреждение(, РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияОтказДокументНеОтраженВУчете(Действие));
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СостояниеДокумента

&НаСервере
Процедура СформироватьПредставлениеСостояния()
	
	Если Объект.Направление = Перечисления.НаправленияДокументовИСМПТК.Исходящий
		И Объект.Состояние = Перечисления.СостоянияДокументовИСМПТК.Сформирован Тогда
		
		ПредставлениеСостояния = РаботаСТекстамиИСМПТККлиентСервер.ТекстСоообщенияДокументГотовКОтправкеИСМПТ();
		
	ИначеЕсли Объект.Направление = Перечисления.НаправленияДокументовИСМПТК.Исходящий
		И Объект.Состояние = Перечисления.СостоянияДокументовИСМПТК.ПринятСервером Тогда
		
		ПредставлениеСостояния = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияДокументУспешноПринятСерверомИСМПТ();
		
	ИначеЕсли Объект.Состояние = Перечисления.СостоянияДокументовИСМПТК.ОбрабатываетсяСервером Тогда
		
		ПредставлениеСостояния = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияДокументОбрабатываетсяСерверомИСМПТ();
		
	ИначеЕсли Объект.Состояние = Перечисления.СостоянияДокументовИСМПТК.ОтклоненСервером
		ИЛИ Объект.Состояние = Перечисления.СостоянияДокументовИСМПТК.ОшибкаДанных Тогда
		
		ПредставлениеСостояния = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияДокументОтклоненСерверомИСМПТ();
		
	Иначе
		
		Если Объект.Ссылка.Пустая() Тогда
			ПредставлениеСостояния = НСтр("ru = 'Новый документ'");
		Иначе
			ПредставлениеСостояния = НСтр("ru = 'Документ %Состояние%'");
			ПредставлениеСостояния = СтрЗаменить(ПредставлениеСостояния, "%Состояние%", НРег(Объект.Состояние));
		КонецЕсли;
		
	КонецЕсли;
	
	Элементы.ПредставлениеСостояния.ЦветТекста = ОбщегоНазначенияИСМПТККлиентСервер.ЦветСостояния(Объект.Состояние);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеСостоянияНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	//Требуется доработка Состояние и статусы Уведомления о ввозе
	
	Если Объект.Состояние = ПредопределенноеЗначение("Перечисление.СостоянияДокументовИСМПТК.Сформирован") Тогда
		
		ОтправитьПолучателюЗаписьФормы = Новый ОписаниеОповещения("ОтправитьПолучателюЗаписьФормы", ЭтаФорма);
		ТекстВопроса = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияВопросОтправитьДокументПолучателю();
		ПоказатьВопрос(ОтправитьПолучателюЗаписьФормы, ТекстВопроса, РежимДиалогаВопрос.ОКОтмена);
		
	ИначеЕсли Объект.Состояние = ПредопределенноеЗначение("Перечисление.СостоянияДокументовИСМПТК.ОбрабатываетсяСервером") Тогда	
		
		ОбновитьНаСервереЗавершение = Новый ОписаниеОповещения("ОбновитьНаСервереЗавершение", ЭтаФорма);
		ПоказатьВопрос(ОбновитьНаСервереЗавершение, РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияВопросПолучитьРезультатОбработкиДокументаССервераИСМПТ(), РежимДиалогаВопрос.ОКОтмена);
		
	Иначе
		
		ПоказатьПредупреждение(, ПредставлениеСостояния);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьНаСервереЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.ОК Тогда
		Если ИнтеграцияИСМПТККлиент.ОбъектЗаписан(ЭтаФорма) Тогда
			МассивУведомлений = Новый Массив;
			МассивУведомлений.Добавить(Объект.Ссылка);
			ИнтеграцияИСМПТККлиент.ОбновитьДокументыИзИСМПТ(МассивУведомлений, Новый Структура("ЗапускатьФоновоеЗадание, ТолькоОбновитьСтатус", Ложь, Истина));
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьПолучателюЗаписьФормы(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.ОК Тогда
		Если Объект.Ссылка.Пустая() ИЛИ ЭтаФорма.Модифицированность Тогда
			ОтправитьПолучателюЗавершение = Новый ОписаниеОповещения("ОтправитьПолучателюЗавершение", ЭтаФорма);	
			ИнтеграцияИСМПТККлиент.ВопросЗаписатьОбъектПередВыполнением(ОтправитьПолучателюЗавершение);
		Иначе
			ОтправитьПолучателюЗавершение(КодВозвратаДиалога.ОК, Неопределено);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьПолучателюЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.ОК Тогда
		Если ИнтеграцияИСМПТККлиент.ОбъектЗаписан(ЭтаФорма) Тогда
			МассивУведомлений = Новый Массив;
			МассивУведомлений.Добавить(Объект.Ссылка);
			ИнтеграцияИСМПТККлиент.ОтправитьИсходящиеДокументыИСМПТ(МассивУведомлений, Новый Структура("ЗапускатьФоновоеЗадание", Ложь));
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура КомментарийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СобытияФормИСМПТККлиентПереопределяемый.ПоказатьФормуРедактированияКомментария(Элемент.ТекстРедактирования, ЭтотОбъект, "Объект.Комментарий");

КонецПроцедуры

#Область Общее

&НаКлиенте
Процедура ВыпискаБумажногоУведомленияПриИзменении(Элемент)
	
	Если Не ВыпискаБумажногоУведомления Тогда
		Объект.РегНомерНаБумажномНосителе = "";
		Объект.ДатаВыпискиНаБумажномНосителе = '00010101000000';
	КонецЕсли;
	
	УправлениеФормой();
	
КонецПроцедуры

#КонецОбласти

#Область Получатель

&НаСервере
Процедура ПолучательПриИзмененииНаСервере()
	
	Если Не ЗначениеЗаполнено(Объект.НомерИСМПТ) Тогда
		СтруктураДанных = ПолучитьРеквизитыОрганизацииКонтрагента(Объект.Получатель, "Получатель");
		ЗаполнитьЗначенияСвойств(Объект, СтруктураДанных, "ПолучательИдентификационныйНомер, ПолучательНаименование");
	КонецЕсли;
		
	Объект.Организация = Объект.Получатель;
		
КонецПроцедуры

&НаКлиенте
Процедура ПолучательПриИзменении(Элемент)
	
	ПолучательПриИзмененииНаСервере();
	
КонецПроцедуры

#КонецОбласти

#Область Прочее

&НаСервере
Процедура ЗаполнитьЗначенияПоОрганизации()
	
	Объект.Получатель = Объект.Организация;
	Если Не ЗначениеЗаполнено(Объект.НомерИСМПТ) Тогда
		СтруктураДанных = ПолучитьРеквизитыОрганизацииКонтрагента(Объект.Получатель, "Получатель");
		ЗаполнитьЗначенияСвойств(Объект, СтруктураДанных, "ПолучательИдентификационныйНомер, ПолучательНаименование");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.Направление) Тогда
		ЗаполнитьЗначенияПоОрганизации();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицФормы

#Область Товары

&НаКлиенте
Процедура ДеревоМаркированнойПродукцииНачалоПеретаскивания(Элемент, ПараметрыПеретаскивания, Выполнение)
	
	Выполнение = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПередУдалением(Элемент, Отказ)
	Отказ = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	Отказ = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ТоварыНоменклатураПриИзменении(Элемент)
	
	ТекДанные = Элементы.Товары.ТекущиеДанные;
	Если Не ТекДанные = Неопределено Тогда
		
		ЗаполнитьСлужебныеРеквизитыПоНоменклатуре();
		ЗаполнитьПризнакИспользованияХарактеристик();

		ПроверитьШтрихкодыНоменклатуры();
		
		Если Не ЗначениеЗаполнено(ТекДанные.ТНВЭД)
			И ЗначениеЗаполнено(ТекДанные.Номенклатура) Тогда
			ТекДанные.ТНВЭД = РаботаСДокументамиИСМПТКПереопределяемый.ПолучитьКодТНВЭДПоНоменклатуре(ТекДанные.Номенклатура)
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ОбработчикиКомандФормы

#Область ЗапросСоставаУпаковокССервера

&НаКлиенте
Процедура ЗаполнитьДанныеПоКоличествуГрупповыхУпаковок(Команда)
	
	Если Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыДокументовИСМПТК.НеОпределен") Тогда
		//У не отправленного документа команда работает в полном функционале и без уточнения у пользователя
		ЗаполнитьДанныеПоКоличествуГрупповыхУпаковокПродолжить();
	Иначе
		//У отправленного - предварительно предупреждаем, что будут внесены программные изменения в документ, откатить которые нельзя, т.к. документ уже заблокирован.
		ТекстВопроса = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияЗапросСоставаУпаковокВОтправленномДокументе(); 
		ЗаполнитьДанныеПоКоличествуГрупповыхУпаковокПослеВопроса = Новый ОписаниеОповещения("ЗаполнитьДанныеПоКоличествуГрупповыхУпаковокПослеВопроса", ЭтаФорма);
		ПоказатьВопрос(ЗаполнитьДанныеПоКоличествуГрупповыхУпаковокПослеВопроса, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьДанныеПоКоличествуГрупповыхУпаковокПослеВопроса(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		ЗаполнитьДанныеПоКоличествуГрупповыхУпаковокПродолжить();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьДанныеПоКоличествуГрупповыхУпаковокПродолжить()
	
	ЗавершениеПолучитьДанныеПоГрупповымКодамМаркировки = Новый ОписаниеОповещения("ЗавершениеПолучитьДанныеПоГрупповымКодамМаркировки", ЭтаФорма);
	ПолучитьКлючАвторизации(ЗавершениеПолучитьДанныеПоГрупповымКодамМаркировки);
	
КонецПроцедуры

&НаСервере
Процедура ЗавершениеПолучитьДанныеПоГрупповымКодамМаркировки(РезультатВыполнения, Параметры) Экспорт
	
	НеОтправлен = Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыДокументовИСМПТК.НеОпределен");
	ИнтеграцияИСМПТК.ЗавершениеПолучитьДанныеПоГрупповымКодамМаркировки_Общая(ЭтаФорма, РезультатВыполнения, Объект.Направление, НеОтправлен);
		
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура ПоискПоШтрихкодуВыполнить(Команда)
	
	ОчиститьСообщения();
	Если ИнтеграцияИСМПТКВызовСервера.ИспользоватьАвтоПроверкаВалидностиКодаИСМПТК() 
		И Не ЗначениеЗаполнено(Объект.Организация) Тогда
		ТекстСообщения = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияВключенАвтозапросНужнаОрганизацияДляВыполнения("АвтоПроверкаВалидностиКодаИСМПТК");
		ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	Оповещение = Новый ОписаниеОповещения("ПоискПоШтрихкодуЗавершение", ЭтотОбъект);
	СобытияФормИСМПТККлиент.ПоказатьВводШтрихкода(Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоискПоШтрихкодуЗавершение(ДанныеШтрихкода, ДополнительныеПараметры) Экспорт
	
	Если Не РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйКлиентСервер.ПроверкаФорматаТранспортногоКодаПройденаУспешно(ДанныеШтрихкода) Тогда
		Возврат;
	КонецЕсли;
	
	ОбработатьКодМаркировки(ДанныеШтрихкода);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьКодыМаркировкиИзФайла(Команда)
	
	ОчиститьСообщения();
	Если ИнтеграцияИСМПТКВызовСервера.ИспользоватьАвтоПроверкаВалидностиКодаИСМПТК() 
		И Не ЗначениеЗаполнено(Объект.Организация) Тогда
		ТекстСообщения = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияВключенАвтозапросНужнаОрганизацияДляВыполнения("АвтоПроверкаВалидностиКодаИСМПТК");
		ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	Если Не Объект.Марки.Количество() = 0 Тогда
		ЗагрузитьКодыМаркировкиИзФайлаПослеВопроса = Новый ОписаниеОповещения("ЗагрузитьКодыМаркировкиИзФайлаПослеВопроса", ЭтаФорма);
		ТекстВопроса = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияВыполнитьОчисткуДанныхВТаблице();
		ПоказатьВопрос(ЗагрузитьКодыМаркировкиИзФайлаПослеВопроса, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	Иначе
		ИнтеграцияИСМПТККлиент.ЗагрузитьКодыМаркировкиИзФайла(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьКодыМаркировкиИзФайлаПослеВопроса(Результат, Параметры) Экспорт

	Если Результат = КодВозвратаДиалога.Да Тогда
		Объект.Марки.Очистить();
		СформироватьДеревоКодовМаркировки();		
	КонецЕсли;
	ИнтеграцияИСМПТККлиент.ЗагрузитьКодыМаркировкиИзФайла(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьКодыМаркировкиВФайл(Команда)
	
	ДиалогВыбораФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Сохранение);
	ДиалогВыбораФайла.Заголовок = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияЗаголовокВыборФайла();
	ДиалогВыбораФайла.Фильтр 	= "CSV (Comma-Separated Values)(*.csv)|*.csv";
	ДиалогВыбораФайла.ИндексФильтра = 0;
	ДиалогВыбораФайла.ПредварительныйПросмотр = Ложь;
	ДиалогВыбораФайла.ПроверятьСуществованиеФайла = Истина;
	ДиалогВыбораФайла.МножественныйВыбор = Ложь;
	
	Оповещение = Новый ОписаниеОповещения("ВыгрузитьКодыМаркировкиИзФайлаЗавершение", ЭтотОбъект);
	ДиалогВыбораФайла.Показать(Оповещение);
		
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьДанныеИзТСД(Команда)
	
	ОчиститьСообщения();
	Если ИнтеграцияИСМПТКВызовСервера.ИспользоватьАвтоПроверкаВалидностиКодаИСМПТК() 
		И Не ЗначениеЗаполнено(Объект.Организация) Тогда
		ТекстСообщения = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияВключенАвтозапросНужнаОрганизацияДляВыполнения("АвтоПроверкаВалидностиКодаИСМПТК");
		ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	Если ИнтеграцияИСМПТКВызовСервера.ИспользоватьАвтоОпределениеЛогистическихКодовИСМПТК() Тогда 
		ПолучитьТокенДляЗакгрузкиИзТСД = Новый ОписаниеОповещения("ЗагрузитьИзТСДЗавершениеТокен", ЭтаФорма);
		ПолучитьКлючАвторизации(ПолучитьТокенДляЗакгрузкиИзТСД);
	Иначе
		ОбщегоНазначенияИСМПТККлиентПереопределяемый.НачатьЗагрузкуДанныеИзТСД(Новый ОписаниеОповещения("ЗагрузитьИзТСДЗавершение", ЭтотОбъект), УникальныйИдентификатор);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗарегистрироватьНовыйGTIN(Команда)
	
	Если Элементы.Товары.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Номенклатура 	 = Элементы.Товары.ТекущиеДанные.Номенклатура;
	GTIN 			 = Элементы.Товары.ТекущиеДанные.GTIN;
	Характеристика 	 = Элементы.Товары.ТекущиеДанные.Характеристика;
	EAN 			 = РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйКлиентСервер.EANПоGTIN(Элементы.Товары.ТекущиеДанные.GTIN);
	
	Если Не ЗначениеЗаполнено(Номенклатура) Тогда
		ТекстСообщения = НСтр("ru = 'Не заполнена Номенклатура!'");
		ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Характеристика) 
		И ИнтеграцияИСМПТКПереопределяемый.ПроверитьВедениеУчетаПоХарактеристикамУНоменклатуры(Номенклатура)
		И ИнтеграцияИСМПТКПереопределяемый.ПроверитьИспользованиеХарактеристик() Тогда
		ТекстСообщения = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообещнияНеЗаполненаХарактеристика();
		ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
	 	Возврат;
	КонецЕсли;
		
	ТекстВопроса = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияВопросДобавитьНовыйШтрихкодНоменклатуре();
	
	Дополнительныепараметры = Новый Структура();
	
	ДополнительныеПараметры.Вставить("Номенклатура",     Номенклатура);
	ДополнительныеПараметры.Вставить("EAN", 		     EAN);
	ДополнительныеПараметры.Вставить("GTIN", 		     GTIN);
	ДополнительныеПараметры.Вставить("Характеристика", 	 Характеристика);
	
	Режим = РежимДиалогаВопрос.ДаНет;
	Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВопросаЗаписатьШтрихкодНоменклатуры", ЭтотОбъект, ДополнительныеПараметры);
	ПоказатьВопрос(Оповещение, ТекстВопроса, Режим, 0);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьДанныеВExcel(Команда)
	
	ДиалогВыбораФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Сохранение);
	ДиалогВыбораФайла.Заголовок = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияЗаголовокВыборФайла();
	ДиалогВыбораФайла.Фильтр 	= "Все поддерживаемые форматы файлов(*.xls;*.xlsx;)|*.xls;*.xlsx;|Книга Excel 97 (*.xls)|*.xls|Книга Excel 2007 (*.xlsx)|*.xlsx";
	ДиалогВыбораФайла.ИндексФильтра = 0;
	ДиалогВыбораФайла.ПредварительныйПросмотр = Ложь;
	ДиалогВыбораФайла.ПроверятьСуществованиеФайла = Истина;
	ДиалогВыбораФайла.МножественныйВыбор = Ложь;
	
	Оповещение = Новый ОписаниеОповещения("СоздатьФайлXLS", ЭтотОбъект);
	ДиалогВыбораФайла.Показать(Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьФайлXLS(ВыбранныеФайлы, ДополнительныеПараметрым) Экспорт
	
	Если Не ВыбранныеФайлы = Неопределено Тогда
		
		ТабличныйДокумент = Новый ТабличныйДокумент;
		
		Итератор = 1;
		Для Каждого СтрокаТЧ Из Объект.Марки Цикл
			
			Если Объект.Направление = ПредопределенноеЗначение("Перечисление.НаправленияДокументовИСМПТК.Входящий")
				Или Не ЗначениеЗаполнено(СтрокаТЧ.КодМаркировки) Тогда 
				КодДляЗаписи = СтрокаТЧ.КодИдентификации;
			Иначе 
				КодДляЗаписи = РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйКлиентСервер.Base64ВШтрихкод(СтрокаТЧ.КодМаркировки);
			КонецЕсли;
			
			ТабличныйДокумент.Область("R" + Формат(Итератор,"ЧГ=0") + "C1").Текст = КодДляЗаписи;
			Итератор = Итератор + 1;
		КонецЦикла;
		
		ТабличныйДокумент.Записать(ВыбранныеФайлы[0], ТипФайлаТабличногоДокумента.XLS97);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьИтогиПоМаркам(Команда)
	
	Если Объект.Марки.Количество() = 0 Тогда
		Объект.Товары.Очистить();
		ТекстСообщения = НСтр("ru = 'Не заполнена таблица ""Марки""! Расчёт итогов невозможен.'");
		ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;		
	
	ТекстПроМарки  = НСтр("ru = 'Рассчет итогов следует выполнять только после полного завершения редактирования таблицы ""Марки"".'");
	ТекстПроТовары = ?(Объект.Товары.Количество() = 0, "", Символы.ПС + НСтр("ru = 'При этом будет предварительно очищена таблица ""Товары"".'"));
		
	ТекстВопроса = ТекстПроМарки + ТекстПроТовары
				 + Символы.ПС
				 + НСтр("ru = 'Выполнить рассчет?'");
				 
	Режим = РежимДиалогаВопрос.ДаНет;
	Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВопросаРассчитатьИтогиПоМаркам", ЭтотОбъект);
	ПоказатьВопрос(Оповещение, ТекстВопроса, Режим, 0);
		
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСтрануПроизводства(Команда)
	
	Если Не Элементы.Товары.ВыделенныеСтроки.Количество() = 0 Тогда
		
		МассивИдентификаторовСтрок = Элементы.Товары.ВыделенныеСтроки;
		ПараметрыЗаполнения = Новый Структура();
		ПараметрыЗаполнения.Вставить("МассивИдентификаторовСтрок", МассивИдентификаторовСтрок);
		Оповещение = Новый ОписаниеОповещения("ОбработкаВыбораСтраныПроизводства", ЭтотОбъект, ПараметрыЗаполнения);
		
		ИмяФормыВыбора = РаботаСДокументамиИСМПТККлиентПереопределяемый.ПолучитьИмяФормыВыбораСтраны();
		ПараметрыОткрытияФормыВыбора = РаботаСДокументамиИСМПТККлиентПереопределяемый.ПолучитьПараметрыОткрытияФормыВыбора(ИмяФормыВыбора);
		ОткрытьФорму(ИмяФормыВыбора, ПараметрыОткрытияФормыВыбора, ЭтотОбъект, Истина,,, Оповещение,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	Иначе
		ТекстСообщения = НСтр("ru = 'В таблице ""Товары"" нет выделенных строк для заполнения.'");
		ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура ЗагрузитьИзТСДЗавершение(РезультатВыполнения, ДополнительныеПараметры) Экспорт
	
	СобытияФормИСМПТККлиентПереопределяемый.ПриПолученииДанныхИзТСД(Новый ОписаниеОповещения("Подключаемый_ПолученыДанныеИзТСД", ЭтотОбъект), ЭтотОбъект, РезультатВыполнения);
	
	Если ИнтеграцияИСМПТКВызовСервера.ИспользоватьАвтоПроверкаВалидностиКодаИСМПТК() Тогда 
		
		ТокенАвторизацииВрем = Неопределено;
		ЗавершениеПроверитьСостояниеКодовНаСервере = Новый ОписаниеОповещения("ЗавершениеПроверитьСостояниеКодовНаСервере", ЭтаФорма);
		ПолучитьКлючАвторизации(ЗавершениеПроверитьСостояниеКодовНаСервере, Истина);
		
	КонецЕсли;
	
КонецПроцедуры 

&НаКлиенте
Процедура ЗагрузитьИзТСДЗавершениеТокен(РезультатВыполнения, ДополнительныеПараметры) Экспорт
	
	ОбщегоНазначенияИСМПТККлиентПереопределяемый.НачатьЗагрузкуДанныеИзТСД(Новый ОписаниеОповещения("ЗагрузитьИзТСДЗавершение", ЭтотОбъект), УникальныйИдентификатор);
		
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьКлючАвторизации(СобытиеПослеАвторизации, ОповещениеПриОшибке = Ложь) Экспорт
	
	ИнтерфейсИСМПТККлиент.ПолучитьКлючАвторизацииОбщая(СобытиеПослеАвторизации, Объект.Организация, ОповещениеПриОшибке);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьПроцедуруФоновоВыполнено(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияОперацияОтменена());
		Возврат;
	ИначеЕсли Результат.Статус = "Ошибка" Тогда
		ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(Результат.ПодробноеПредставлениеОшибки);
	ИначеЕсли Результат.Статус = "Выполнено" Тогда
		
		// обрабатываем результат
		Модифицированность = Истина;
		
		Если ОбработатьРезультатЗагрузкиКодов(Результат.АдресРезультата) Тогда 
			ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияОперацияЗагрузкиКМЗавершена());
			
			Если ИнтеграцияИСМПТКВызовСервера.ИспользоватьАвтоПроверкаВалидностиКодаИСМПТК() Тогда 
				
				ТокенАвторизацииВрем = Неопределено;
				ЗавершениеПроверитьСостояниеКодовНаСервере = Новый ОписаниеОповещения("ЗавершениеПроверитьСостояниеКодовНаСервере", ЭтаФорма);
				ПолучитьКлючАвторизации(ЗавершениеПроверитьСостояниеКодовНаСервере, Истина);

			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	УправлениеФормой();
	
КонецПроцедуры

&НаСервере
Функция ОбработатьРезультатЗагрузкиКодов(АдресРезультата)
	
	РезультатЗадания = ПолучитьИзВременногоХранилища(АдресРезультата);
	
	Если РезультатЗадания.Свойство("МассивОшибок") И Не РезультатЗадания.МассивОшибок.Количество() = 0 Тогда
		Для Каждого ТекстОшибки Из РезультатЗадания.МассивОшибок Цикл 
			ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстОшибки);
		КонецЦикла;
	КонецЕсли;
	
	Если РезультатЗадания.Успешно И НЕ РезультатЗадания.ТаблицаПолученныхКодов.Количество() = 0 Тогда
		Для Каждого Строка Из РезультатЗадания.ТаблицаПолученныхКодов Цикл
			
			Если Не ЗначениеЗаполнено(Строка.Номенклатура)
				И Не Строка.ВидУпаковки = ПредопределенноеЗначение("Перечисление.ВидыУпаковокИСМПТК.Логистическая") Тогда
				// Если не смогли определить номенклатуру - КМ добавляем, но обращаем внимание пользователя на проблему с ним.
				ТекстСообщения = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияОбработкаСпискаКМНеНайденаНоменклатура();
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ШтрихкодЕАН%", Строка.EAN);
				ТекстСообщения = ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(ТекстСообщения, Строка.КодИдентификации);
				ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
				
				ТекстСообщенияВЖурнал = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияОбработкаСпискаКМНеНайденаНоменклатураВЖурнал();
				ТекстСообщенияВЖурнал = СтрЗаменить(ТекстСообщенияВЖурнал, "%СсылкаДокументМаркировки%", ?(Не Объект.Ссылка.Пустая(), Объект.Ссылка, ""));
				ТекстСообщенияВЖурнал = СтрЗаменить(ТекстСообщенияВЖурнал, "%ШтрихкодЕАН%", Строка.EAN);
				ИмяСобытия = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияЗаголовокЗагрузкаКМВДокументахСервиса();
				ОбщегоНазначенияИСМПТКВызовСервера.СоздатьЗаписьЖурналаРегистрации(ИмяСобытия, "Предупреждение",,, ТекстСообщенияВЖурнал);
			КонецЕсли;
					
			Если ЗначениеЗаполнено(Строка.Номенклатура)
				И Не ЗначениеЗаполнено(Строка.ВидПродукции) Тогда
				
				//Если товар определили, но не смогли понять товарную группу - добавляем, но предупреждаем.
				ТекстСообщения = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияОбработкаСпискаКМНеОпределенВидНоменклатуры();
				ТекстСообщения = ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(ТекстСообщения, Строка.КодИдентификации, Строка.Номенклатура);
				ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
				
				ТекстСообщенияВЖурнал = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияОбработкаСпискаКМНеОпределенВидНоменклатурыВЖурнал();
				ТекстСообщенияВЖурнал = СтрЗаменить(ТекстСообщенияВЖурнал, "%СсылкаДокументМаркировки%", ?(Не Объект.Ссылка.Пустая(), Объект.Ссылка, ""));
				ТекстСообщенияВЖурнал = СтрЗаменить(ТекстСообщенияВЖурнал, "%ШтрихкодЕАН%", 	   Строка.EAN);
				ТекстСообщенияВЖурнал = СтрЗаменить(ТекстСообщенияВЖурнал, "%НаименованиеТовара%", Строка.Номенклатура);
				ИмяСобытия = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияЗаголовокЗагрузкаКМВДокументахСервиса();
				ОбщегоНазначенияИСМПТКВызовСервера.СоздатьЗаписьЖурналаРегистрации(ИмяСобытия, "Предупреждение",,, ТекстСообщенияВЖурнал);
				
			ИначеЕсли ЗначениеЗаполнено(Строка.Номенклатура)
				И Строка.ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИСМПТК.ЛекарственныеПрепараты") Тогда
				
				//Если товар определили, но он не подходит этому документу - сообщаем и код не добавляем.
				ТекстСообщения = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияОбработкаСпискаКМНеСоответствуетВидуПродукцииДокумента(); 
				ТекстСообщения = ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(
								 ТекстСообщения,
								 Строка.КодИдентификации,
								 Строка.Номенклатура,
								 Строка.ВидПродукции);
				ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
				Продолжить;
				
			КонецЕсли;
			
			НайденныеСтроки = Объект.Марки.НайтиСтроки(Новый Структура("КодИдентификации", Строка.КодИдентификации));
			Если НайденныеСтроки.Количество() = 0 Тогда
				ЗаполнитьЗначенияСвойств(Объект.Марки.Добавить(), Строка);
			КонецЕсли;
		КонецЦикла;
		ИнтеграцияИСМПТК.ПроверитьНаличиеУпаковокПоКоторымНеПолучилосьВыполнитьЗапросСостава(ЭтаФорма);
		СформироватьДеревоКодовМаркировки();
		Возврат Истина;
	Иначе 
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура ВыгрузитьКодыМаркировкиИзФайлаЗавершение(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	
	Если Не ВыбранныеФайлы = Неопределено Тогда
		
		НовыйТекстовыйДокумент = Новый ТекстовыйДокумент;
		
		Для Каждого СтрокаТЧ Из Объект.Марки Цикл
			КодДляЗаписи = ?(ЗначениеЗаполнено(СтрокаТЧ.КодМаркировки), 
									РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйКлиентСервер.Base64ВШтрихкод(СтрокаТЧ.КодМаркировки), СтрокаТЧ.КодИдентификации);
			НовыйТекстовыйДокумент.ДобавитьСтроку(КодДляЗаписи);
		КонецЦикла;
		
		НовыйТекстовыйДокумент.Записать(ВыбранныеФайлы[0]);
		
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура УправлениеФормой()
	
	НеОтправлен = Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыДокументовИСМПТК.НеОпределен");
	
	//Начальная страница документов соответствия
	Элементы.СтраницыДокСоотв.ТекущаяСтраница = Элементы.ГруппаДокСоотв;
	//Реквизиты бумажного документа
	ОбщегоНазначенияИСМПТККлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГруппаБумажныйДокумент", "Видимость", ВыпискаБумажногоУведомления);
	//ТЧ ошибки
	ОбщегоНазначенияИСМПТККлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "Ошибки", "Видимость", ?(Объект.Ошибки.Количество() = 0, Ложь, Истина));
	//Ручной ввод ШК	
	ОбщегоНазначенияИСМПТККлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ТоварыПоискПоШтрихкоду", "Видимость", НеОтправлен);
	//Команды редактирования строк
	ОбщегоНазначенияИСМПТККлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ДеревоМаркированнойПродукцииРедактироватьСтрокиТранспортныеКоды", 
																	   "Видимость", НеОтправлен);
	ОбщегоНазначенияИСМПТККлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ДеревоМаркированнойПродукцииПолучитьДанныеПоКоличеству", 
																	   "Видимость", НеОтправлен);
	//Команды загрузки 
	ОбщегоНазначенияИСМПТККлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "КомандыЗагрузкиТЧ", "Видимость", НеОтправлен);
	
	//Мобильное приложение
	Если ПравоДоступа("Просмотр", Метаданные.РегистрыСведений.НастройкиПодключенияМобильноеПриложениеИСМПТК) Тогда 
		ИспользоватьПриложение = Константы.ИспользоватьМобильноеПриложениеИСМПТК.Получить();
		ОбщегоНазначенияИСМПТККлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ДеревоМаркированнойПродукцииЗагрузитьКодыМаркировкиИзМобильногоПриложения", 
																		   "Видимость", НеОтправлен И ИспользоватьПриложение);
	Иначе
		ОбщегоНазначенияИСМПТККлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ДеревоМаркированнойПродукцииЗагрузитьКодыМаркировкиИзМобильногоПриложения", 
																		   "Видимость", Ложь);
	КонецЕсли;
	
	//Отражение в учете
	ДокументМожноОтразитьВБазе = РаботаСДокументамиИСМПТКПереопределяемый.ПроверитьВозможностьОтраженияДокументаВУчете(ОбщегоНазначенияИСМПТКВызовСервера.ИмяДокументаУведомлениеОВвозеИзТретьихСтранИСМПТК());
	ОбщегоНазначенияИСМПТККлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ФормаГруппаОтражение", "Видимость", ДокументМожноОтразитьВБазе);
	ОбщегоНазначенияИСМПТККлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ПредставлениеДокументаОснования", "Видимость", ДокументМожноОтразитьВБазе);
    
	//Характеристики в ТЧ Товары
	ХарактеристикиИспользуются = ИнтеграцияИСМПТКПереопределяемый.ПроверитьИспользованиеХарактеристик();
	ОбщегоНазначенияИСМПТККлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ТоварыХарактеристика", "Видимость", ХарактеристикиИспользуются);
	
	ОбщегоНазначенияИСМПТККлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ДокументыСоответствия", "ТолькоПросмотр", НЕ НеОтправлен);
	ОбщегоНазначенияИСМПТККлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГруппаДокСоответствия", "ТолькоПросмотр", НЕ НеОтправлен);
	ОбщегоНазначенияИСМПТККлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "Товары", "ТолькоПросмотр", НЕ НеОтправлен);
	ОбщегоНазначенияИСМПТККлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ТоварыРассчитатьИтогиПоМаркам", "Доступность", НеОтправлен);
	ОбщегоНазначенияИСМПТККлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ТоварыРедактированиеДанных", 
																	   "Доступность", НеОтправлен И Объект.Товары.Количество()>0);
	
	//Команда проверки статуса и владельца кода по данным сервера актуальна только при заполнении исходящего Акта до его отправки
	ОбщегоНазначенияИСМПТККлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ДеревоМаркированнойПродукцииПроверитьСостояниеКодовНаСервере", 
																	   "Видимость", НеОтправлен);
	
	ИзменитьКоманднуюПанельДокумента();
	СформироватьПредставлениеДокументаОснования(ЭтаФорма);                      
	СформироватьПредставлениеСостояния();                                 
			
КонецПроцедуры

&НаСервере
Процедура ПодготовитьФормуНаСервере()
	
	Если Объект.Направление.Пустая() Тогда
		Объект.Направление = ПредопределенноеЗначение("Перечисление.НаправленияДокументовИСМПТК.Исходящий");
	КонецЕсли;
	
	Если Объект.Статус.Пустая() Тогда
		Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыДокументовИСМПТК.НеОпределен");
	КонецЕсли;

	Если ИспользоватьПодключаемоеОборудование Тогда
		ИспользуютсяСканерыШтрихкода = (ОбщегоНазначенияИСМПТКВызовСервераПереопределяемый.ОборудованиеПоПараметрам("СканерШтрихкода").Количество() > 0);
	Иначе
		ИспользуютсяСканерыШтрихкода = Ложь;
	КонецЕсли;
	
	УправлениеФормой();
	
КонецПроцедуры

&НаСервере
Функция ПолучитьРеквизитыОрганизацииКонтрагента(Ссылка, Реквизит) Экспорт
	
	Возврат ИнтеграцияИСМПТКПереопределяемый.ПолучитьРеквизитыОрганизацииКонтрагента(Ссылка, Реквизит);
	
КонецФункции

&НаКлиенте
Процедура ИзменитьДокументОснованиеЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.ОК Тогда
		Объект.ДокументОснование = ДополнительныеПараметры.ВыбранноеЗначение;
		СформироватьПредставлениеДокументаОснования(ЭтаФорма);
		Если Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыДокументовИСМПТК.НеОпределен") Тогда
			ТекстВопроса = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияПерезаполнитьДокументПоНовомуОснованию();
			ПерезаполнитьДокументПоОснованию = Новый ОписаниеОповещения("ПерезаполнитьДокументПоОснованию", ЭтаФорма);
			ПоказатьВопрос(ПерезаполнитьДокументПоОснованию, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		КонецЕсли;
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьНовуюНоменклатуру(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.ОК Тогда
		
		Если Не ДополнительныеПараметры.СтруктураКодовМаркировки.ВидУпаковки = ПредопределенноеЗначение("Перечисление.ВидыУпаковокИСМПТК.Потребительская") Тогда 
			
			ПараметрыОткрытияФормы = Новый Структура("Номенклатура, СтруктураКодовМаркировки, Организация, ИнФСистема", 
													ДополнительныеПараметры.Номенклатура, 
													ДополнительныеПараметры.СтруктураКодовМаркировки, 
													Объект.Организация, 
													"ИСМПТ");
			
			ОткрытьФорму(
			"ОбщаяФорма.ФормаУточненияДанныхИСМПТК",
			ПараметрыОткрытияФормы, ЭтотОбъект,,,,
			Новый ОписаниеОповещения("ЗавершитьДобавлениеКодаМаркировки", ЭтотОбъект), РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
			
		Иначе 
			
			СтруктураКодовМаркировки = ДополнительныеПараметры.СтруктураКодовМаркировки;
			Номенклатура			 = ДополнительныеПараметры.Номенклатура;
			ДобавитьКодМаркировкиВДерево(Номенклатура, СтруктураКодовМаркировки);
			
			НоваяСтрока = Объект.Марки.Добавить();
			НоваяСтрока.КодМаркировки 	 = СтруктураКодовМаркировки.КодМаркировки;
			НоваяСтрока.КодИдентификации = СтруктураКодовМаркировки.КодИдентификации;
			НоваяСтрока.GTIN 			 = СтруктураКодовМаркировки.GTIN;
			Если СтруктураКодовМаркировки.ВидУпаковки = ПредопределенноеЗначение("Перечисление.ВидыУпаковокИСМПТК.Групповая") Тогда
				НоваяСтрока.GTINВерхнегоУровня 	= СтруктураКодовМаркировки.GTINВерхнегоУровня;
			КонецЕсли;
			НоваяСтрока.EAN 		 = СтруктураКодовМаркировки.EAN;
			НоваяСтрока.Номенклатура = Номенклатура;
			НоваяСтрока.Количество 	 = СтруктураКодовМаркировки.Количество;
			НоваяСтрока.ВидУпаковки	 = СтруктураКодовМаркировки.ВидУпаковки;
			НоваяСтрока.ВидПродукции = СтруктураКодовМаркировки.ВидПродукции;
			
			Для Каждого Строка ИЗ ДеревоМаркированнойПродукции.ПолучитьЭлементы() Цикл
				Элементы.ДеревоМаркированнойПродукции.Развернуть(Строка.ПолучитьИдентификатор(), Истина);
			КонецЦикла;
			
			Модифицированность = Истина;
			
		КонецЕсли;
	
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьОбновитьДанныеПоТоварам(ЗаполнитьСтрануПриПересчете = Ложь)
	
	Объект.Товары.Очистить();
	Для Каждого СтрокаТЧ Из Объект.Марки Цикл
		
		ДополнительныеСведения = ИнтеграцияИСМПТКПереопределяемый.ПолучитьДополнительныеСведенияОНоменклатуреДляИмпорта(СтрокаТЧ.Номенклатура, СтрокаТЧ.EAN);
		Характеристика = ДополнительныеСведения.Характеристика;
		ТНВЭД = ДополнительныеСведения.ТНВЭД;
		
		//Ищем в Товарах строку, совпадающую по коду товара
		ПараметрыОтбора = Новый Структура();
		ПараметрыОтбора.Вставить("GTIN", СтрокаТЧ.GTIN);
		МассивНайденныхСтрок = Объект.Товары.НайтиСтроки(ПараметрыОтбора);
		
		СтранаЭкспорта = Объект.СтранаОтправления;
		
		Если МассивНайденныхСтрок.Количество() <> 0 Тогда
			//Строка найдена. Требуется увеличить количество кодов в строке.
			МассивНайденныхСтрок[0].КоличествоКМ = МассивНайденныхСтрок[0].КоличествоКМ + 1;
		Иначе
			//Строка не найдена. Требуется добавить новую.
			НоваяСтрока = Объект.Товары.Добавить();
			НоваяСтрока.Номенклатура   = СтрокаТЧ.Номенклатура;
			НоваяСтрока.Характеристика = Характеристика;
			НоваяСтрока.EAN 		   = СтрокаТЧ.EAN;
			НоваяСтрока.ВидПродукции   = СтрокаТЧ.ВидПродукции;
			НоваяСтрока.GTIN 		   = СтрокаТЧ.GTIN; 
			НоваяСтрока.КоличествоКМ   = 1;
			НоваяСтрока.ТНВЭД		   = ТНВЭД;
			Если ЗаполнитьСтрануПриПересчете Тогда
				НоваяСтрока.СтранаПроизводства = СтранаЭкспорта;
			КонецЕсли;				
			ЗаполнитьСлужебныеРеквизитыПоНоменклатуре();
			ЗаполнитьПризнакИспользованияХарактеристик();

		КонецЕсли;	
		
	КонецЦикла;	
	
КонецПроцедуры

&НаКлиенте
Процедура ПродолжитьЗаполнениеДокументаОснования(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.ОК Тогда
		Объект.ДокументОснование = ДополнительныеПараметры.ВыбранноеЗначение;
		СформироватьПредставлениеДокументаОснования(ЭтаФорма);
		
		Если Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыДокументовИСМПТК.НеОпределен") Тогда
			ТекстВопроса = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияПерезаполнитьДокументПоНовомуОснованию();
			ПерезаполнитьДокументПоОснованию = Новый ОписаниеОповещения("ПерезаполнитьДокументПоОснованию", ЭтаФорма);
			ПоказатьВопрос(ПерезаполнитьДокументПоОснованию, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		КонецЕсли;
		
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПерезаполнитьДокументПоОснованию(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		ЗаполнитьПоДокументуОснованию();
		Модифицированность = Истина;
		УправлениеФормой();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура СформироватьПредставлениеДокументаОснования(Форма)
	
	Если ЗначениеЗаполнено(Форма.Объект.ДокументОснование) Тогда
		Форма.ПредставлениеДокументаОснования = Форма.Объект.ДокументОснование;
		Форма.Элементы.ПредставлениеДокументаОснования.ЦветТекста = ОбщегоНазначенияИСМПТККлиентСервер.ЦветСиний();
	Иначе
		Форма.ПредставлениеДокументаОснования = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияДокументНеОтраженВУчете();
		Форма.Элементы.ПредставлениеДокументаОснования.ЦветТекста = ОбщегоНазначенияИСМПТККлиентСервер.ЦветКрасный();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПроверитьСвязанноеУведомление(ВыбранноеЗначение)
	
	Возврат РаботаСДокументамиИСМПТК.ПроверитьНаличиеСвязанного_Общий(ВыбранноеЗначение, Истина, "", ОбщегоНазначенияИСМПТКВызовСервера.ИмяДокументаУведомлениеОВвозеИзТретьихСтранИСМПТК());
	
КонецФункции

&НаСервере
Функция ПроверитьНаличиеМаркируемогоТовара(ВыбранноеЗначение) 
	
	Возврат РаботаСДокументамиИСМПТКПереопределяемый.ПроверитьНаличиеМаркируемогоТовара(ВыбранноеЗначение);
	
КонецФункции

&НаКлиенте
Процедура ЗаполнитьПоДокументуОснованию()
	
	ДанныеДокументаОснования = ПолучитьДанныеДокументаОснованияНаСервере();
	
	РеквизитыШапки  = ДанныеДокументаОснования.Реквизиты;
	ДанныеПоТоварам = ДанныеДокументаОснования.Товары;
	
	ЗаполнитьЗначенияСвойств(Объект, РеквизитыШапки);
	Объект.Товары.Очистить();
	СформироватьДеревоКодовМаркировки();
	
КонецПроцедуры

&НаСервере
Процедура ОчиститьДеревоКодов()
	
	Дерево = РеквизитФормыВЗначение("ДеревоМаркированнойПродукции");
	Дерево.Строки.Очистить();
	ЗначениеВРеквизитФормы(Дерево, "ДеревоМаркированнойПродукции");
	
КонецПроцедуры

&НаСервере
Функция ПолучитьДанныеДокументаОснованияНаСервере() Экспорт
	
	Возврат РаботаСДокументамиИСМПТКПереопределяемый.ПолучитьДанныеДокументаОснованияДляПерезаполненияИСМПТ_Общий(Объект.ДокументОснование, ОбщегоНазначенияИСМПТКВызовСервера.ИмяДокументаУведомлениеОВвозеИзТретьихСтранИСМПТК());
	
КонецФункции

&НаСервере
Функция СформироватьДеревоКодовМаркировки() Экспорт
	
	//Добавим группы номенклатуры
	ПустаяСтруктураКМ = ПолучитьСтруктуруКодовМаркировки();
	ОчиститьДеревоКодовМаркировки();
	
	СообщенияОбОшибках = Новый Соответствие();
	Для Каждого СтрокаТЧ Из Объект.Марки Цикл
		Если ЗначениеЗаполнено(СтрокаТЧ.КодИдентификации) Тогда
			
			Номенклатура = ИнтеграцияИСМПТКПереопределяемый.ПолучитьПустуюСсылкуНоменклатура();
			
			Если СтрокаТЧ.ВидУпаковки = ПредопределенноеЗначение("Перечисление.ВидыУпаковокИСМПТК.Групповая") Тогда
				//Для групповых поиск по регистру не выполняем, т.к. EAN в стркое относится к вложенному товару, а номенклатура для групповых 
				//должна заполняться по верхнему уровню, т.е. по реквизиту GTINВерхнегоУровня.
				EANВерхнегоУровня = РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйКлиентСервер.EANПоGTIN(СтрокаТЧ.GTINВерхнегоУровня);
				ДанныеНоменклатуры = ПолучитьНоменклатуруПоШтрихкоду(EANВерхнегоУровня, СообщенияОбОшибках);
			Иначе
				ДанныеНоменклатуры = ПолучитьНоменклатуруПоШтрихкоду(СтрокаТЧ.EAN, СообщенияОбОшибках);
			КонецЕсли;
			
			Если ТипЗнч(ДанныеНоменклатуры) = Тип("Структура") Тогда
				Номенклатура   = ДанныеНоменклатуры.Номенклатура;
				Характеристика = ДанныеНоменклатуры.Характеристика;
			Иначе
				Номенклатура = ДанныеНоменклатуры;
				Характеристика = Неопределено;
			КонецЕсли;
			
			//Если Номенклатура не нашлась в ТЧ Товары и в регистре Штрихкоды, 
			//возможно, она была назначена в форме рдактирования транспортных упаковок без регистрации ШК.
			//Проверяем этот случай по данным строки 
			Если НЕ ЗначениеЗаполнено(Номенклатура) И ЗначениеЗаполнено(СтрокаТЧ.Номенклатура) Тогда
				Номенклатура = СтрокаТЧ.Номенклатура;
			КонецЕсли;

			ДобавитьКодМаркировкиВДерево(Номенклатура, СтрокаТЧ);
		КонецЕсли;
	КонецЦикла;
	Если Не СообщенияОбОшибках.Количество() = 0 Тогда
		Для Каждого СообщениеОшибка Из СообщенияОбОшибках Цикл 
			ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(СообщениеОшибка.Значение);
		КонецЦикла;
	КонецЕсли;
	
	Элементы.ДеревоМаркированнойПродукции.НачальноеОтображениеДерева = НачальноеОтображениеДерева.РаскрыватьВсеУровни;

КонецФункции

&НаСервере
Процедура ИзменитьКоличествоКодовМаркировки(КодИд, Количество) 
	
	СтрокаКИ = Объект.Марки.НайтиСтроки(Новый Структура("КодИдентификации", КодИд));
	Если Не СтрокаКИ.Количество() = 0 Тогда 
		СтрокаКИ[0].Количество = Количество;
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ИзменитьКоманднуюПанельДокумента()
	
	////ПРОВЕРКИ////
	МожноОтправить = Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыДокументовИСМПТК.НеОпределен");
	////////////////
	
	//Действия по АПИ
	ОбщегоНазначенияИСМПТККлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ФормаДокументУведомлениеОВвозеИзТретьихСтранИСМПТКОтправить", 
																"Видимость", МожноОтправить);
	//Внутренние действия
	ОбщегоНазначенияИСМПТККлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ФормаОбщаяКомандаПроверитьИСМПТК", 
																"Видимость", МожноОтправить);
	ОбщегоНазначенияИСМПТККлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ФормаОбщаяКомандаПерезаполнитьПоПервичномуДокументуИСМПТК",
																"Видимость", МожноОтправить);
	ОбщегоНазначенияИСМПТККлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ФормаОбщаяКомандаРазбитьНаНесколькоДокументовИСМПТК", 
																"Видимость", МожноОтправить И НЕ Объект.Марки.Количество() = 0);
		
КонецПроцедуры

&НаСервере
Процедура ОчиститьДеревокодовМаркировки() 
	
	Дерево = РеквизитФормыВЗначение("ДеревоМаркированнойПродукции");
	Дерево.Строки.Очистить();
	ЗначениеВРеквизитФормы(Дерево, "ДеревоМаркированнойПродукции");
	
КонецПроцедуры

&НаСервере
Процедура ИнициализироватьДокументыСоответствия()
	
	Если Объект.ДокументыСоответствия.Количество() = 0 Тогда
		НоваяСтрока = Объект.ДокументыСоответствия.Добавить();
		Элементы.ДокументыСоответствия.ТекущаяСтрока = НоваяСтрока.ПолучитьИдентификатор();
		НоваяСтрока.ТипДокумента = "";
	ИначеЕсли Объект.ДокументыСоответствия.Количество() = 1 Тогда
		Элементы.ДокументыСоответствия.ТекущаяСтрока = Объект.ДокументыСоответствия[0].ПолучитьИдентификатор();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСлужебныеРеквизитыПоНоменклатуре()
	
	ПараметрыЗаполненияРеквизитов = Новый Структура;
	ПараметрыЗаполненияРеквизитов.Вставить("ЗаполнитьПризнакХарактеристикиИспользуются",
											Новый Структура("Номенклатура", "ХарактеристикиИспользуются"));
											
	СобытияФормИСМПТКПереопределяемый.ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВКоллекции(Объект.Товары, ПараметрыЗаполненияРеквизитов);
		
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПризнакИспользованияХарактеристик(НомерСтроки = Неопределено)
	
	СобытияФормИСМПТКПереопределяемый.ЗаполнитьПризнакИспользованияХарактеристик(Объект.Товары);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияВопросаЗаписатьШтрихкодНоменклатуры(Результат, Параметры) Экспорт

	Если Результат = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
		
	Попытка
		
		Номенклатура = Параметры.Номенклатура;
		EAN 		 = Параметры.EAN;
		GTIN         = Параметры.GTIN;
		Характеристика = Параметры.Характеристика;
		
		РаботаСДокументамиИСМПТКПереопределяемый.ЗаписатьШтрихкодНоменклатуры(Номенклатура, EAN,, Характеристика);
		ТекстСообщения = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияНужноЗаписатьДокументДляОбновленияТаблицыМарки();
		ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения, , , "Форма.Объект");
		ОбщегоНазначенияИСМПТККлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ЗарегистрироватьНовыйGTIN", "Доступность", Ложь);
	Исключение
		
		Информация = ИнформацияОбОшибке();
		ТекстСообщения = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияНеУдалосьЗаписатьШтрихкодПоПричинеСПараметром();
		ТекстСообщения = ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(ТекстСообщения, КраткоеПредставлениеОшибки(Информация));
		ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения, , , "Форма.Объект");
		ОбщегоНазначенияИСМПТККлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ЗарегистрироватьНовыйGTIN", "Доступность", Истина);
	КонецПопытки;

КонецПроцедуры

&НаКлиенте
Процедура ПроверитьШтрихкодыНоменклатуры()
	
	Номенклатура   = Элементы.Товары.ТекущиеДанные.Номенклатура;
	Характеристика = Элементы.Товары.ТекущиеДанные.Характеристика;
	GTIN = Элементы.Товары.ТекущиеДанные.GTIN;
	EAN  = РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйКлиентСервер.EANПоGTIN(Элементы.Товары.ТекущиеДанные.GTIN);
	
	Если ЗначениеЗаполнено(Номенклатура) Тогда
		ТекстСообщения    = "";
		ДанныеПоШтрихкоду = ПроверитьНаличиеШтрихкода(Номенклатура, EAN);
			
		Если ДанныеПоШтрихкоду.Количество = 0 Тогда 
			//Проверяемый штрихкод вообще не зарегистрирован - даем возможнсоть добавить
			ОбщегоНазначенияИСМПТККлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ЗарегистрироватьНовыйGTIN", "Доступность", Истина);
			
		ИначеЕсли ДанныеПоШтрихкоду.КоличествоЭтаНоменклатура = 0 Тогда
			//Штрихкод зарегистрирован, но не на этот товар
			ОбщегоНазначенияИСМПТККлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ЗарегистрироватьНовыйGTIN", "Доступность", Ложь);
			ТекстСообщения = НСтр("ru='Внимание: штрихкод %1 связан с номенклатурой %2 по данным регистра ""%НаименованиеРегистраШК%""!'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%НаименованиеРегистраШК%", ПолучитьПредставлениеРегистраШтрихкоды()); 
			ТекстСообщения = ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(ТекстСообщения, GTIN, ДанныеПоШтрихкоду.Номенклатура);
			ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения, , , "Форма.Объект");
			
		ИначеЕсли Не ДанныеПоШтрихкоду.Количество = ДанныеПоШтрихкоду.КоличествоЭтаНоменклатура Тогда
			//Проверяемый штрихкод в регистр добавлен несколько раз и при этом для разных товаров
			ОбщегоНазначенияИСМПТККлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ЗарегистрироватьНовыйGTIN", "Доступность", Ложь);
			ТекстСообщения = НСтр("ru='Внимание: штрихкод %1 связан с разной номенклатурой по данным регистра ""%НаименованиеРегистраШК%""!'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%НаименованиеРегистраШК%", ПолучитьПредставлениеРегистраШтрихкоды()); 
			ТекстСообщения = ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(ТекстСообщения, GTIN);
			ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения, , , "Форма.Объект");
			
		Иначе
			//штрихкод зарегистрирован на текущую номенклатуру
			ОбщегоНазначенияИСМПТККлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ЗарегистрироватьНовыйGTIN", "Доступность", Ложь);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

&НаСервере
Функция ПроверитьНаличиеШтрихкода(Номенклатура, EAN)
	
	СообщенияОбОшибках = Новый Соответствие();
	ДанныеШтрихкода = ОбщегоНазначенияИСМПТКПереопределяемый.ПолучитьДанныеНоменклатурыИзРегистраШтрихкодовПоШтрихкоду(Истина, EAN,, СообщенияОбОшибках);
	Если Не СообщенияОбОшибках.Количество() = 0 Тогда
		Для Каждого СообщениеОшибка Из СообщенияОбОшибках Цикл 
			ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(СообщениеОшибка.Значение);
		КонецЦикла;
	КонецЕсли;
	
	ДанныеДляОбработки = Новый Структура();
	ДанныеДляОбработки.Вставить("Количество", ДанныеШтрихкода.Количество()); // всего записей с таким штрихкодом
	ДанныеДляОбработки.Вставить("КоличествоЭтаНоменклатура", ДанныеШтрихкода.НайтиСтроки(Новый Структура("Номенклатура", Номенклатура)).Количество()); // из них записей, относящихся к проверяемой ном-ре
	ДанныеДляОбработки.Вставить("Номенклатура", ?(ДанныеШтрихкода.Количество() = 1, ДанныеШтрихкода[0].Номенклатура, Неопределено));
	
	Возврат ДанныеДляОбработки;
	
КонецФункции

&НаКлиенте
Процедура ПослеЗакрытияВопросаРассчитатьИтогиПоМаркам(Результат, Параметры) Экспорт

	Если Результат = КодВозвратаДиалога.Да Тогда
		
		Если ЗначениеЗаполнено(Объект.СтранаОтправления) Тогда
			ТекстВопроса = НСтр("ru = 'Выполнить заполнение колонки ""Страна производства"" по значению поля ""Страна экспорта"" (%1) во всех строках таблицы Товары?'");
			ТекстВопроса = ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(ТекстВопроса, Объект.СтранаОтправления);
			Режим = РежимДиалогаВопрос.ДаНет;
			Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВопросаЗаполнитьСтрануВТЧПриПересчетеТоваров", ЭтотОбъект);
			ПоказатьВопрос(Оповещение, ТекстВопроса, Режим, 0);
		Иначе		
			ДобавитьОбновитьДанныеПоТоварам();
			Модифицированность = Истина;
			УправлениеФормой();
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияВопросаЗаполнитьСтрануВТЧПриПересчетеТоваров(Результат, Параметры) Экспорт

	ЗаполнитьСтрану = Ложь;
	Если Результат = КодВозвратаДиалога.Да Тогда
		ЗаполнитьСтрану = Истина;
	КонецЕсли;
	
	ДобавитьОбновитьДанныеПоТоварам(ЗаполнитьСтрану);
	Модифицированность = Истина;
	УправлениеФормой();
			
КонецПроцедуры

&НаСервере
Функция ПроверитьНаличиеSSCCВДокументе(КодИдентификации)
	
	ТаблицаМарок = Объект.Марки.Выгрузить();
	Возврат Не РазборИОбработкаКодовМаркировкиИСМПТКСлужебный.ВыполнитьПроверкуТранспортногоКодаПоДокументу(КодИдентификации, ТаблицаМарок); 
	
КонецФункции

&НаКлиенте
Процедура ОповеститьОПроблемеЗапросаВалидностиКМ() Экспорт
	
	//Если по какой-то причине не удалось выполнить получение Токена, то и запрос на проверку статуса КМ не выполнялся,
	//об этом нужно предупредить и отметить непроверенные коды.
	Если ТокенАвторизацииВрем = Неопределено Тогда 
		СообщитьОНевозможностиВыполнитьПроверкуСтатусаКМ("Фоновый");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапретитьРедактированиеПолей()
	
	Если Не Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыДокументовИСМПТК.НеОпределен") Тогда
		//Документ отправлен на сервер, запрещаем редактирование данных, уже переданных в ИС МПТ
		Элементы.ВыпискаБумажногоУведомления.ТолькоПросмотр = Истина;
		Элементы.РегНомерНаБумажномНосителе.ТолькоПросмотр = Истина;
		Элементы.ДатаВыпискиНаБумажномНосителе.ТолькоПросмотр = Истина;
		
		Элементы.СтранаЭкспорта.ТолькоПросмотр = Истина;
		Элементы.ГруппаДокументТаможенногоОформления.ТолькоПросмотр = Истина;
		Элементы.ГруппаРешениеТаможенногоОргана.ТолькоПросмотр = Истина;
		
		Элементы.ПолучательИдентификатор.ТолькоПросмотр = Истина;
		Элементы.ПолучательНаименование.ТолькоПросмотр = Истина;
		
		Элементы.ДеревоМаркированнойПродукцииКоличествоПодобранно.ТолькоПросмотр = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбораСтраныПроизводства(Результат, Параметры) Экспорт
	
	Если ТипЗнч(Результат) = Тип("Массив") //Некорректное значение из формы выбора, дожна быть Страна (ссылка)
		Или Не ЗначениеЗаполнено(Результат) Тогда //пользователь не стал выбирать значение
		Возврат; 
	КонецЕсли;
	
	МассивИдентификаторовСтрок = Параметры.МассивИдентификаторовСтрок;
	Для Каждого ИндексСтроки Из МассивИдентификаторовСтрок Цикл
		СтрокаТаблицы = Объект.Товары.НайтиПоИдентификатору(ИндексСтроки);
		СтрокаТаблицы.СтранаПроизводства = Результат;
		Модифицированность = Истина;
	КонецЦикла;	
	
КонецПроцедуры

&НаСервере
Функция ПолучитьПредставлениеРегистраШтрихкоды()

	Возврат ОбщегоНазначенияИСМПТКПереопределяемый.ПолучитьПредставлениеРегистраШтрихкоды();
	
КонецФункции

#КонецОбласти

#Область ОбработчикиСобытийЭлементовДерева

&НаКлиентеНаСервереБезКонтекста
Функция НайтиПоИдентификатору(ДанныеФормыДерево, Идентификатор)
	
	// Сейчас есть проблема в веб-клиенте: метод НайтиПоИдентификатору, может вернуть ДанныеФормыДерево
	
	Если Идентификатор = -1 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ДанныеФормыЭлементДерева = ДанныеФормыДерево.НайтиПоИдентификатору(Идентификатор);
	
	Если ТипЗнч(ДанныеФормыЭлементДерева) = Тип("ДанныеФормыЭлементДерева") Тогда
		Возврат ДанныеФормыЭлементДерева;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

&НаКлиенте
Процедура ДеревоМаркировкиПередУдалением(Элемент, Отказ)
	
	Если Не Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыДокументовИСМПТК.НеОпределен") Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	ОчиститьСообщения();
	
	ТекстОшибки = "";
	
	УдаляемыеКодыМаркировки = Новый Массив();
		
	Для Каждого ИдентификаторСтроки Из Элемент.ВыделенныеСтроки Цикл
		
		УдаляемыйЭлемент 	= НайтиПоИдентификатору(ДеревоМаркированнойПродукции, ИдентификаторСтроки);
		РодительУдаляемогоЭлемента = УдаляемыйЭлемент.ПолучитьРодителя();
		
		Если Не РодительУдаляемогоЭлемента = Неопределено Тогда
			РодительУдаляемогоЭлемента.КоличествоПодобранно = РодительУдаляемогоЭлемента.КоличествоПодобранно -1;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(УдаляемыйЭлемент.КодИдентификации) Тогда
			НайденныеСтроки = Объект.Марки.НайтиСтроки(Новый Структура("КодИдентификации", УдаляемыйЭлемент.КодИдентификации));
			Если НайденныеСтроки.Количество() = 1 Тогда
				Объект.Марки.Удалить(НайденныеСтроки[0]);
			КонецЕсли;
		Иначе 
			ВложенныеЭлементы = УдаляемыйЭлемент.ПолучитьЭлементы();
			Для Каждого ВложенныйЭлемент Из ВложенныеЭлементы Цикл 
				НайденныеСтроки = Объект.Марки.НайтиСтроки(Новый Структура("КодИдентификации", ВложенныйЭлемент.КодИдентификации));
				Если НайденныеСтроки.Количество() = 1 Тогда
					Объект.Марки.Удалить(НайденныеСтроки[0]);
				КонецЕсли;
			КонецЦикла;
			
		КонецЕсли;
				
	КонецЦикла;
	
	ЭтотОбъект.Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоМаркированнойПродукцииПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Отказ = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоМаркированнойПродукцииКоличествоПодобранноПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ДеревоМаркированнойПродукции.ТекущиеДанные;
	ИзменитьКоличествоКодовМаркировки(ТекущиеДанные.КодИдентификации, ТекущиеДанные.КоличествоПодобранно);
	
КонецПроцедуры

&НаКлиенте
Процедура СвернутьВсеДерево(Команда)
	
	СвернутьРазвернутьДеревоКодов(ДеревоМаркированнойПродукции.ПолучитьЭлементы(), Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура РазвернутьВсеДерево(Команда)
	
	СвернутьРазвернутьДеревоКодов(ДеревоМаркированнойПродукции.ПолучитьЭлементы(), Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура СвернутьРазвернутьДеревоКодов(ДервероЭлементов, Развернуть)
	
	Для Каждого Элемент Из ДервероЭлементов Цикл
		
		ВложенныеЭлементы = Элемент.ПолучитьЭлементы();
		
        Если ВложенныеЭлементы.Количество() > 0 Тогда
			
			СвернутьРазвернутьДеревоКодов(ВложенныеЭлементы, Развернуть);

            Если Развернуть = Истина Тогда
                Элементы.ДеревоМаркированнойПродукции.Развернуть(Элемент.ПолучитьИдентификатор());
            Иначе
                Элементы.ДеревоМаркированнойПродукции.Свернуть(Элемент.ПолучитьИдентификатор());
			КонецЕсли;
			
        КонецЕсли;
    КонецЦикла;
	
КонецПроцедуры

#КонецОбласти 

#Область Штрихкодирование

&НаКлиенте
Процедура ОбработатьКодМаркировки(ИсходныеДанные, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если ИсходныеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ИсходныеДанные.Свойство("ФормаПоискаНоменклатуры_Успешно") Тогда
		
		СтруктураКодовМаркировки = ИсходныеДанные.СтруктураКодовМаркировки;
		
		//Обработчик после того, как была вызвана форма проверки и подбора номенклатуры (для регистрации ШК)
		Если ИсходныеДанные.ФормаПоискаНоменклатуры_Успешно Тогда
			ДобавитьНовыйКод(СтруктураКодовМаркировки);
			ТекстУведомления = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияЗарегистрированНовыйШтрихкод(); 
			ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстУведомления);
		Иначе
			ТекстОшибки = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияОтказДобавленияКодаНеОпределенаНоменклатура();
			ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстОшибки);
			Возврат;
		КонецЕсли;
		
	Иначе
		
		//Для передачи на сервер КМ, в составе которого есть символы GS (29), требуется дополнительное кодирование
		РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйКлиентСервер.ЗакодироватьШтрихкодДанныхBase64(ИсходныеДанные);
		ИсходныеДанные.Вставить("ФорматBase64", Истина);
		СтруктураКодовМаркировки = ИнтеграцияИСМПТКВызовСервера.ПолучитьКодыМаркировки(ИсходныеДанные);   
		
		//Если удалось разобрать код, вернется структура. Если нет - текст сообщения об ошибке.
		Если ТипЗнч(СтруктураКодовМаркировки) = Тип("Строка") Тогда
			ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(СтруктураКодовМаркировки);
			Возврат;
		КонецЕсли;
		
		ОтказатьВДобавлении = Ложь;
		Если Не НайтиПоКодуИдентификации(СтруктураКодовМаркировки.КодИдентификации) = Неопределено Тогда 
			
			ОтказатьВДобавлении = Истина;
			
		ИначеЕсли ОбщегоНазначенияИСМПТК.ПроверитьЗначениеКонстанты("ПоддержкаДвойногоФорматаТранспортныхКодовИСМПТК")
			И СтруктураКодовМаркировки.ВидУпаковки = ПредопределенноеЗначение("Перечисление.ВидыУпаковокИСМПТК.Логистическая") Тогда
			
			//В этом случае в таблице документа может находиться уже преобразованный SSCC, соответствующий обрабатываемому в данный момент штрихкоду,
			//т.е. нужна специфическая проверка на дублирование данных кода
			ОтказатьВДобавлении = ПроверитьНаличиеSSCCВДокументе(СтруктураКодовМаркировки.КодИдентификации);
			
		КонецЕсли;
		
		Если ОтказатьВДобавлении Тогда
			ПараметрыОткрытия = СобытияФормИСМПТККлиент.ПараметрыОткрытияФормыНевозможностиДобавленияОтсканированного();
			ПараметрыОткрытия.Штрихкод    = ИсходныеДанные.Штрихкод;
			ПараметрыОткрытия.ТекстОшибки = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияКодМаркировкиУказанВДокументе();
			ОткрытьФорму(ОбщегоНазначенияИСМПТККлиент.ПолучитьИмяФормыИнформацияОНевозможностиДобавленияКМ(), ПараметрыОткрытия, ЭтаФорма);
			Возврат;
		КонецЕсли;
		
		Если Не СтруктураКодовМаркировки = Неопределено Тогда
			Если Не СтруктураКодовМаркировки.ВидУпаковки = ПредопределенноеЗначение("Перечисление.ВидыУпаковокИСМПТК.Потребительская") Тогда 
				//Проверяем, включено ли автоматическое получение данных с сервера по групповым упаковкам
				Если ИнтеграцияИСМПТКВызовСервера.ИспользоватьАвтоОпределениеЛогистическихКодовИСМПТК() Тогда
					ДобавитьНовыйЛогистическийКод(СтруктураКодовМаркировки); //Заполняем автоматически с сервера
				Иначе
					//Даем возможность указать данные вручную
					ПараметрыОткрытияФормы = Новый Структура("Номенклатура, СтруктураКодовМаркировки, Организация, ИнФСистема", 
															ИнтеграцияИСМПТКПереопределяемый.ПолучитьПустуюСсылкуНоменклатура(), 
															СтруктураКодовМаркировки, 
															Объект.Организация,
															"ИСМПТ");
					ОткрытьФорму("ОбщаяФорма.ФормаУточненияДанныхИСМПТК", ПараметрыОткрытияФормы, ЭтотОбъект,,,, Новый ОписаниеОповещения("ЗавершитьДобавлениеКодаМаркировки", ЭтотОбъект), РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
				КонецЕсли;
			Иначе
				//Для потребительских заполняем напрямую
				ДобавитьНовыйКод(СтруктураКодовМаркировки);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция НайтиПоКодуИдентификации(КодИдентификации)
	
	СтруктураПоиска = Новый Структура("КодИдентификации", КодИдентификации);
	
	НайденныеСтроки = Объект.Марки.НайтиСтроки(СтруктураПоиска);
	
	Если НайденныеСтроки.Количество() > 0 Тогда
		Возврат НайденныеСтроки;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура ДобавитьНовыйКод(СтруктураКодовМаркировки)
	
	СообщенияОбОшибках = Новый Соответствие();
	ДанныеНоменклатуры = ПолучитьНоменклатуруПоШтрихкоду(СтруктураКодовМаркировки.EAN, СообщенияОбОшибках);
	Если ТипЗнч(ДанныеНоменклатуры) = Тип("Структура") Тогда
		Номенклатура   = ДанныеНоменклатуры.Номенклатура;
		Характеристика = ДанныеНоменклатуры.Характеристика;
	Иначе
		Номенклатура   = ДанныеНоменклатуры;
		Характеристика = Неопределено;
	КонецЕсли;
	Если Не СообщенияОбОшибках.Количество() = 0 Тогда
		Для Каждого СообщениеОшибка Из СообщенияОбОшибках Цикл 
			ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(СообщениеОшибка.Значение);
		КонецЦикла;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Номенклатура) Тогда
		
		ДанныеДляСопоставленияНоменклатуры = Новый Структура(); //передается в параметрах открытия формы подбора
		Операция = "СопоставлениеНоменклатуры";
		
		ИсходныеДанные = Новый Структура("Количество, Штрихкод", 1, СтруктураКодовМаркировки.КодИдентификации);
		ДанныеДляСопоставленияНоменклатуры.Вставить("ИсходныеДанные", ИсходныеДанные); //содержит структуру "Количество, Штрихкод", где штрихкод это отсканированный КМ
		
		ШтрихкодыКСопоставлению = Новый Массив();
		ДанныеШтрихкода = Новый Структура("Количество, Штрихкод", 1, СтруктураКодовМаркировки.EAN);
		ШтрихкодыКСопоставлению.Добавить(ДанныеШтрихкода);
		ДанныеДляСопоставленияНоменклатуры.Вставить("ШтрихкодыКСопоставлению", ШтрихкодыКСопоставлению); //содержит массив, где каждый элемент - структура "Количество, Штрихкод", где штрихкод - это EAN из КМ, который необходимо проверить по регистру Штрихкодов
				
		ПараметрыОткрытияФормы = Новый Структура("ДанныеДляСопоставленияНоменклатуры, Операция, НеизвестныеШтрихкоды, СтруктураКодовМаркировки, Направление", ДанныеДляСопоставленияНоменклатуры, Операция, ШтрихкодыКСопоставлению, СтруктураКодовМаркировки, Объект.Направление);
		ОбработкаОповещенияПодборНоменклатуры = Новый ОписаниеОповещения("ОбработатьКодМаркировки", ЭтотОбъект);
		РежимОткрытия = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
		
		ОткрытьФорму("Обработка.РозничноеВыбытиеМаркированнойПродукцииИСМПТК.Форма.ПоискНоменклатурыПоШтрихкоду", ПараметрыОткрытияФормы, ЭтотОбъект,,,, ОбработкаОповещенияПодборНоменклатуры, РежимОткрытия);
				
	Иначе
		
		ВидПродукцииКода = ПолучитьВидПродукцииПоНоменклатуре(Номенклатура);
		Если ЗначениеЗаполнено(ВидПродукцииКода)
			И ВидПродукцииКода = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИСМПТК.ЛекарственныеПрепараты") 
			И Не СтруктураКодовМаркировки.ВидУпаковки = ПредопределенноеЗначение("Перечисление.ВидыУпаковокИСМПТК.Логистическая") Тогда
			
			ТекстСообщения = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияКМПринадлежитНоменклатуреСОсобенностямиУчетаСПараметрами() + " "
						   + РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияДокументНеПредназначенДляРаботыСЭтойТГ();
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%НаименованиеПодсистемы%", РаботаСТекстамиИСМПТККлиентСервер.НаименованиеИСМПТ());
			ТекстСообщения = ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(ТекстСообщения, Номенклатура, ВидПродукцииКода); 
			ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
			Возврат;
			
		ИначеЕсли Не ЗначениеЗаполнено(Номенклатура) Тогда
			
			ТекстСообщения = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияДобавитьНовыйКМНеНайденаНоменклатура();
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ШтрихкодЕАН%", СтруктураКодовМаркировки.EAN);
			ТекстСообщения = ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(ТекстСообщения, СтруктураКодовМаркировки.КодИдентификации);
			ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
			
			ТекстСообщенияВЖурнал = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияДобавитьНовыйКМНеНайденаНоменклатураВЖурнал();
			ТекстСообщенияВЖурнал = СтрЗаменить(ТекстСообщенияВЖурнал, "%СсылкаДокументМаркировки%", ?(Не Объект.Ссылка.Пустая(), Объект.Ссылка, ""));
			ТекстСообщенияВЖурнал = СтрЗаменить(ТекстСообщенияВЖурнал, "%ШтрихкодЕАН%", СтруктураКодовМаркировки.EAN);
			ИмяСобытия = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияЗаголовокЗагрузкаКМВДокументахСервиса();
			ОбщегоНазначенияИСМПТКВызовСервера.СоздатьЗаписьЖурналаРегистрации(ИмяСобытия, "Предупреждение",,, ТекстСообщенияВЖурнал);
			
		ИначеЕсли Не ЗначениеЗаполнено(ВидПродукцииКода)
			И Не СтруктураКодовМаркировки.ВидУпаковки = ПредопределенноеЗначение("Перечисление.ВидыУпаковокИСМПТК.Логистическая") Тогда
			
			ТекстСообщения = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияДобавитьНовыйКМНеОпределенВидНоменклатуры();
			ТекстСообщения = ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(ТекстСообщения, СтруктураКодовМаркировки.КодИдентификации, Номенклатура);
			ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
			
			ТекстСообщенияВЖурнал = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияДобавитьНовыйКМНеОпределенВидНоменклатурыВЖурнал();
			ТекстСообщенияВЖурнал = СтрЗаменить(ТекстСообщенияВЖурнал, "%СсылкаДокументМаркировки%", ?(Не Объект.Ссылка.Пустая(), Объект.Ссылка, ""));
			ТекстСообщенияВЖурнал = СтрЗаменить(ТекстСообщенияВЖурнал, "%ШтрихкодЕАН%", 	   СтруктураКодовМаркировки.EAN);
			ТекстСообщенияВЖурнал = СтрЗаменить(ТекстСообщенияВЖурнал, "%НаименованиеТовара%", Номенклатура);
			ИмяСобытия = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияЗаголовокЗагрузкаКМВДокументахСервиса();
			ОбщегоНазначенияИСМПТКВызовСервера.СоздатьЗаписьЖурналаРегистрации(ИмяСобытия, "Предупреждение",,, ТекстСообщенияВЖурнал);
			
		КонецЕсли;
		
		СтруктураКодовМаркировки.Вставить("Номенклатура",   Номенклатура);
		СтруктураКодовМаркировки.Вставить("Характеристика", Характеристика);
		ЗавершитьДобавлениеКодаМаркировки(СтруктураКодовМаркировки);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьНовыйЛогистическийКод(СтруктураКодовМаркировки)
	
	ЗавершениеПолучитьДанныеПоГрупповомуКодуМаркировки = Новый ОписаниеОповещения("ЗавершениеПолучитьДанныеПоГрупповомуКодуМаркировки", ЭтаФорма, СтруктураКодовМаркировки);
	ПолучитьКлючАвторизации(ЗавершениеПолучитьДанныеПоГрупповомуКодуМаркировки);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершениеПолучитьДанныеПоГрупповомуКодуМаркировки(РезультатВыполнения, Параметры) Экспорт
	
	ИнтеграцияИСМПТККлиент.ЗавершениеПолучитьДанныеПоГрупповомуКодуМаркировки_Общая(ЭтаФорма, РезультатВыполнения, Параметры);
	
КонецПроцедуры

&НаСервере
функция ПолучитьНоменклатуруПоШтрихкоду(EAN, СообщенияОбОшибках = Неопределено)
	
	Если СообщенияОбОшибках = Неопределено Тогда
		СообщенияОбОшибках = Новый Соответствие();
	КонецЕсли;
	
	Возврат ОбщегоНазначенияИСМПТКПереопределяемый.ПолучитьДанныеНоменклатурыИзРегистраШтрихкодовПоШтрихкоду(, EAN,,СообщенияОбОшибках);
		
КонецФункции

&НаСервере
Функция ПолучитьВидПродукцииПоНоменклатуре(Номенклатура)
	
	Возврат ОбщегоНазначенияИСМПТКПереопределяемый.ПолучитьВидПродукцииПоНоменклатуре(Номенклатура);
	
КонецФункции

&НаКлиенте
Процедура ЗавершитьДобавлениеКодаМаркировки(СтруктураКодовМаркировки = Неопределено, ПараметрКоманды = Неопределено) Экспорт
	
	Если Не СтруктураКодовМаркировки = Неопределено Тогда 
		
		Если ЗначениеЗаполнено(СтруктураКодовМаркировки.Номенклатура) 
			И Не ЗначениеЗаполнено(СтруктураКодовМаркировки.ВидПродукции) Тогда
			
			ВидПродукции = РозничноеВыбытиеИСМПТККлиент.ПолучитьВидПродукцииПоНоменклатуре(СтруктураКодовМаркировки.Номенклатура);
			СтруктураКодовМаркировки.ВидПродукции = ВидПродукции;
		КонецЕсли;
		
		ДобавитьКодМаркировкиВДерево(СтруктураКодовМаркировки.Номенклатура, СтруктураКодовМаркировки);
		
		НоваяСтрока = Объект.Марки.Добавить();
		НоваяСтрока.КодМаркировки 		= СтруктураКодовМаркировки.КодМаркировки;
		НоваяСтрока.КодИдентификации 	= СтруктураКодовМаркировки.КодИдентификации;
		НоваяСтрока.GTIN 				= СтруктураКодовМаркировки.GTIN;
		Если СтруктураКодовМаркировки.ВидУпаковки = ПредопределенноеЗначение("Перечисление.ВидыУпаковокИСМПТК.Групповая") Тогда
			НоваяСтрока.GTINВерхнегоУровня 	= СтруктураКодовМаркировки.GTINВерхнегоУровня;
		КонецЕсли;
		НоваяСтрока.EAN 				= СтруктураКодовМаркировки.EAN;
		НоваяСтрока.Номенклатура 		= СтруктураКодовМаркировки.Номенклатура;
		НоваяСтрока.Количество 			= СтруктураКодовМаркировки.Количество;
		НоваяСтрока.ВидУпаковки			= СтруктураКодовМаркировки.ВидУпаковки;
		НоваяСтрока.ВидПродукции		= СтруктураКодовМаркировки.ВидПродукции;
				
		Для Каждого Строка ИЗ ДеревоМаркированнойПродукции.ПолучитьЭлементы() Цикл
			Элементы.ДеревоМаркированнойПродукции.Развернуть(Строка.ПолучитьИдентификатор(), Истина);
		КонецЦикла;
		
		//Проверяем состояние кода маркировки и выводим предупреждение, если с кодом что-то не так
		Если ИнтеграцияИСМПТКВызовСервера.ИспользоватьАвтоПроверкаВалидностиКодаИСМПТК() Тогда
			ДополнительныеПараметры = Новый Структура("КодИдентификации", СтруктураКодовМаркировки.КодИдентификации);
			ТокенАвторизацииВрем = Неопределено;
			//отложено: вывод сообщения с результатом запроса статуса
			ЗавершениеПроверитьСостояниеКМПриДобавленииНаСервере = Новый ОписаниеОповещения("ЗавершениеПроверитьСостояниеКМПриДобавленииНаСервере", ЭтаФорма, ДополнительныеПараметры);
			//предварительный запрос токена
			ПолучитьКлючАвторизации(ЗавершениеПроверитьСостояниеКМПриДобавленииНаСервере, Истина);
			
		КонецЕсли;
		
		Модифицированность = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьКодМаркировкиВДерево(Номенклатура, СтруктураКодовМаркировки) Экспорт
	
	Если Номенклатура = Неопределено Тогда
		//Нужен ссылочный тип, чтобы дерево построилось корректно
		Номенклатура = ОбщегоНазначенияИСМПТКПереопределяемый.ПолучитьПустуюСсылкуНоменклатура();
	КонецЕсли;
	
	НайденнаяСтрока = НайтиЗначениеЭлементаДереваПоНоменклатуре(Номенклатура, ДеревоМаркированнойПродукции);
	
	Если Не НайденнаяСтрока = Неопределено Тогда
		
		Если СтруктураКодовМаркировки.ВидУпаковки = Перечисления.ВидыУпаковокИСМПТК.Потребительская Тогда 
			КоличествоПодобранно = 1;
		Иначе 
			КоличествоПодобранно = СтруктураКодовМаркировки.Количество;
		КонецЕсли;
		
		НоваяСтрокаКод = НайденнаяСтрока.ПолучитьЭлементы().Добавить();
		
		//Поддержка двойного формата кодов SSCC
		ВыполнялосьПреобразованиеКМ = ?(Параметры.Свойство("ВыполнялосьПреобразованиеКМ"), Параметры.ВыполнялосьПреобразованиеКМ, Ложь);
		КодИдентификации 			= ?(Параметры.Свойство("КодИдентификации"), Параметры.КодИдентификации, СтруктураКодовМаркировки.КодИдентификации); 
		Если ВыполнялосьПреобразованиеКМ Тогда
			НоваяСтрокаКод.КодМаркировки    = РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйКлиентСервер.ШтрихкодВBase64(КодИдентификации);
			НоваяСтрокаКод.КодИдентификации = КодИдентификации;
		Иначе
			НоваяСтрокаКод.КодМаркировки    = СтруктураКодовМаркировки.КодМаркировки;
			НоваяСтрокаКод.КодИдентификации = СтруктураКодовМаркировки.КодИдентификации;
		КонецЕсли;
		//////
		
		НоваяСтрокаКод.GTIN = СтруктураКодовМаркировки.GTIN;
		Если СтруктураКодовМаркировки.ВидУпаковки = ПредопределенноеЗначение("Перечисление.ВидыУпаковокИСМПТК.Групповая") Тогда
			НоваяСтрокаКод.GTINВерхнегоУровня = СтруктураКодовМаркировки.GTINВерхнегоУровня;
		КонецЕсли;
		НоваяСтрокаКод.Количество			 = 0;
		НоваяСтрокаКод.КоличествоПодобранно	 = КоличествоПодобранно;
		НоваяСтрокаКод.ВидПродукции 		 = СтруктураКодовМаркировки.ВидПродукции;
		
		НайденнаяСтрока.КоличествоПодобранно = НайденнаяСтрока.КоличествоПодобранно + НоваяСтрокаКод.КоличествоПодобранно;
		НоваяСтрокаКод.ВидУпаковки 			 = СтруктураКодовМаркировки.ВидУпаковки;
		
	Иначе
		
		ЭлементыДерева = ДеревоМаркированнойПродукции.ПолучитьЭлементы();
		
		НоваяСтрокаНоменклатура = ЭлементыДерева.Добавить();
		НоваяСтрокаНоменклатура.Номенклатура = Номенклатура;
		
		Если ЗначениеЗаполнено(СтруктураКодовМаркировки.КодИдентификации) Тогда 
			НоваяСтрокаКод = НоваяСтрокаНоменклатура.ПолучитьЭлементы().Добавить();
			НоваяСтрокаКод.КодМаркировки 	= СтруктураКодовМаркировки.КодМаркировки;
			НоваяСтрокаКод.КодИдентификации = СтруктураКодовМаркировки.КодИдентификации;
			НоваяСтрокаКод.GTIN 			= СтруктураКодовМаркировки.GTIN;
			Если СтруктураКодовМаркировки.ВидУпаковки = ПредопределенноеЗначение("Перечисление.ВидыУпаковокИСМПТК.Групповая") Тогда
				НоваяСтрокаКод.GTINВерхнегоУровня 	= СтруктураКодовМаркировки.GTINВерхнегоУровня;
			КонецЕсли;
			
			Если Не ЗначениеЗаполнено(СтруктураКодовМаркировки.Количество) Тогда 
				НоваяСтрокаКод.КоличествоПодобранно	= ?(СтруктураКодовМаркировки.ВидУпаковки = Перечисления.ВидыУпаковокИСМПТК.Потребительская, 1, 0);
			Иначе 
				НоваяСтрокаКод.КоличествоПодобранно	= СтруктураКодовМаркировки.Количество;
			КонецЕсли;
			
			НоваяСтрокаНоменклатура.КоличествоПодобранно = НоваяСтрокаКод.КоличествоПодобранно;
			НоваяСтрокаКод.ВидУпаковки 	= СтруктураКодовМаркировки.ВидУпаковки;
			НоваяСтрокаКод.ВидПродукции = СтруктураКодовМаркировки.ВидПродукции;
		КонецЕсли;
		
		НоваяСтрокаНоменклатура.ВидУпаковки = Перечисления.ВидыУпаковокИСМПТК.ПустаяСсылка();
		НоваяСтрокаКод.Количество	= 0;
		
		ИнтерфейсИСМПТККлиентСервер.УстановитьИндексКартинкиТипаУпаковки(НоваяСтрокаНоменклатура);
		
	КонецЕсли;
	
	Если Не НоваяСтрокаКод = Неопределено Тогда
		ИнтерфейсИСМПТККлиентСервер.УстановитьИндексКартинкиТипаУпаковки(НоваяСтрокаКод);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция НайтиЗначениеЭлементаДереваПоНоменклатуре(Номенклатура, Дерево)
	
	НайденныйЭлемент = Неопределено;
	
	ЭлементыВетвиДерева = Дерево.ПолучитьЭлементы();
	Для Каждого ЭлементДерева Из ЭлементыВетвиДерева Цикл
		Если ЭлементДерева.Номенклатура = Номенклатура Тогда
			НайденныйЭлемент = ЭлементДерева;
		КонецЕсли;
	КонецЦикла;
	
	Возврат НайденныйЭлемент;
	
КонецФункции

&НаСервере
Функция ПолучитьСтруктуруКодовМаркировки()
	
	СтруктураКодовМаркировки = Новый Структура;
	СтруктураКодовМаркировки.Вставить("КодМаркировки", "");
	СтруктураКодовМаркировки.Вставить("КодИдентификации", "");
	СтруктураКодовМаркировки.Вставить("GTIN", "");
	//СтруктураКодовМаркировки.Вставить("КоличествоИсточник", 0);
	СтруктураКодовМаркировки.Вставить("Количество", 0);
	СтруктураКодовМаркировки.Вставить("ВидУпаковки", Перечисления.ВидыУпаковокИСМПТК.ПустаяСсылка());
	
	Возврат СтруктураКодовМаркировки;
	
КонецФункции

#КонецОбласти

#Область РаботаСТСД

#Область ЗагрузкаИзТСД

&НаКлиенте
Процедура ЗагрузитьИзТСДПослеАвторизации(РезультатАвторизации, Штрихкоды) Экспорт
	
	Подключаемый_ПолученыДанныеИзТСД(Штрихкоды, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПолученыДанныеИзТСД(Штрихкоды, АвторизацияЗапрашивалась = Неопределено) Экспорт
	
	Если Штрихкоды.Количество() = 0 Тогда
		
		ПоказатьПредупреждение( ,РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияВДанныхИзТСДНетИнформацииОКодахМаркировки());
		Возврат;
		
	КонецЕсли;
	
	СобытияФормИСМПТККлиент.ОповеститьОНачалеОбработкиДанныхТСД();
	ПараметрыСканирования = РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйКлиент.ПараметрыСканирования(ЭтотОбъект);
	СобытияФормИСМПТККлиент.ПреобразоватьШтрихкодыТСДВBase64(Штрихкоды);
	ЗагрузкаДанныхТСД = ОбработатьПолученныеДанныеТСДНаСервере(Штрихкоды, ПараметрыСканирования, Неопределено);
	
	ОбработатьПолученныеДанныеТСД();
	
КонецПроцедуры

&НаСервере
Функция ОбработатьПолученныеДанныеТСДНаСервере(ШтрихкодыТСД, ПараметрыСканирования, КэшированныеЗначения)
	
	Результат = РаботаСДокументамиИСМПТК.ОбработатьПолученныеДанныеТСДВДокументе(ЭтотОбъект, ШтрихкодыТСД, ПараметрыСканирования);
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Асинх Процедура ОбработатьПолученныеДанныеТСД()
	
	Если ЗагрузкаДанныхТСД = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	МассивКодовМаркировки = Новый Массив;
	
	Для НомерСтроки = 0 По ЗагрузкаДанныхТСД.Всего - 1 Цикл
		Штрихкод = ЗагрузкаДанныхТСД.ШтрихкодыТСД[НомерСтроки];
		ДанныеШтрихкода = Новый Структура("ШтрихКод, ФорматBase64, Количество", Штрихкод.Штрихкод, Ложь, 1);
		РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйКлиентСервер.ЗакодироватьШтрихкодДанныхBase64(ДанныеШтрихкода);
		МассивКодовМаркировки.Добавить(ДанныеШтрихкода);
	КонецЦикла;
	
	СтруктураПараметров = Новый Структура("ФормаОбъекта, МассивКодовМаркировки", ЭтотОбъект, МассивКодовМаркировки);
	
	Токен = Неопределено;
	Если ИнтеграцияИСМПТКВызовСервера.ИспользоватьАвтоОпределениеЛогистическихКодовИСМПТК() Тогда 
		Токен = Ждать ИнтеграцияИСМПТККлиент.ПолучитьТокенАвторизации(Объект.Организация);
		ИнтеграцияИСМПТККлиент.ЗагрузитьКодыМаркировкиИзТСДЗавершение(Токен, СтруктураПараметров);
	Иначе
		ИнтеграцияИСМПТККлиент.ЗагрузитьКодыМаркировкиИзТСДЗавершение(Неопределено, СтруктураПараметров);
	КонецЕсли;
	
	Если ИнтеграцияИСМПТКВызовСервера.ИспользоватьАвтоПроверкаВалидностиКодаИСМПТК() Тогда 
		
		Если Не ЗначениеЗаполнено(Объект.Организация) Тогда
			ТекстСообщения = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияВключенАвтозапросНужнаОрганизацияДляВыполнения("АвтоПроверкаВалидностиКодаИСМПТК");
			ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
			Возврат;
		КонецЕсли;
		
		//После заполнения ТЧ проверяем коды еще одним запросом
		Если Токен = Неопределено Тогда 
			Токен = Ждать ИнтеграцияИСМПТККлиент.ПолучитьТокенАвторизации(Объект.Организация);
		КонецЕсли;
		ЗапроситьДанныеОСостоянииКодовСписком(Токен);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область МобильноеПриложение

&НаКлиенте
Процедура МобильноеПриложениеЗагрузитьТовары(Команда)
	
	ОчиститьСообщения();
	Если ИнтеграцияИСМПТКВызовСервера.ИспользоватьАвтоПроверкаВалидностиКодаИСМПТК() 
		И Не ЗначениеЗаполнено(Объект.Организация) Тогда
		ТекстСообщения = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияВключенАвтозапросНужнаОрганизацияДляВыполнения("АвтоПроверкаВалидностиКодаИСМПТК");
		ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	ОповещениеПослеВыбораЭлемента = Новый ОписаниеОповещения("МобильноеПриложениеЗагрузитьТоварыОбработкаВыбора", ЭтотОбъект);
	Список = РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйВызовСервера.МобильноеПриложениеЗагрузитьТоварыНаСервере();
	Список.ПоказатьОтметкуЭлементов(ОповещениеПослеВыбораЭлемента, РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияВыборДокументаДляЗагрузки());
	
КонецПроцедуры

&НаКлиенте
Процедура МобильноеПриложениеЗагрузитьТоварыОбработкаВыбора(Элемент, Параметры) Экспорт
	
	РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйКлиент.МобильноеПриложениеЗагрузитьТоварыОбработкаВыбораОбщая(ЭтотОбъект, Элемент, Параметры);
	
КонецПроцедуры

#КонецОбласти

#Область КомандыРедактированияСтроки

#Область ПотребительскиеИГрупповыеКМ

&НаКлиенте
Процедура ПодобратьНоменклатуруИЗарегистрироватьGTIN(Команда)
	
	//1. Просим записать документ
	//2. Перебираем ТЧ Марки:
	//   отбираем все строки с НЕ транспортными кодами, у которых заполнены GTINВерхнегоУровня, но не заполнена номенклатура.
	// Это будут потребительские коды, у которых не удалось опознать номенклатуру,
	// а также групповые КМ, у которых не определилась номенклатура верхнего уровня, т.е. по коду товара самогой групповой упаковки (блока).
	//3. Открываем форму обработки ПоискНоменклатурыПоШтрихкоду с передачей параметра Операция = "РегистрацияШтрихкодовСписком"
	//4. В форме назначается номенклатура, при закрытии должна списком регистрироваться информация по ШК.
	//5. В обработчике события закрытия формы обработки дозаполнеям ТЧ Марок, модифицируем документ, перестраиваем дерево кодов.
	
	Если Объект.Марки.Количество() = 0 Тогда
		ТексСообщения = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияВДокументеНетДанныхКодовМаркировки();
		ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТексСообщения);
		Возврат;
	КонецЕсли;
	
	//Проверяем, записан ли документ
	ТекстВопроса = "";
	Если НЕ ЗначениеЗаполнено(ЭтаФорма.Параметры.Ключ) ИЛИ ЭтаФорма.Модифицированность Тогда
		ТекстВопроса = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияВопросЗаписбДокументаПередНачаломРегистрацииШтрихкода();
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекстВопроса) Тогда
		
		Режим = РежимДиалогаВопрос.ДаНет;
		Оповещение   = Новый ОписаниеОповещения("ПослеЗакрытияВопросаПодобратьНоменклатуруИЗарегистрироватьGTIN", ЭтотОбъект);
		ПоказатьВопрос(Оповещение, ТекстВопроса, Режим, 0);
		
	Иначе
		
		//Переходим к отбору штрихкодов, требующих регистрации
		ПродолжитьПодборНоменклатурыИРегистрацииШтрихкодов();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияВопросаПодобратьНоменклатуруИЗарегистрироватьGTIN(Результат, Параметры) Экспорт

	Если Результат = КодВозвратаДиалога.Да Тогда
		
		Попытка
			// выполняем запись документа
			ПараметрыЗаписи = Новый Структура("РежимЗаписи", РежимЗаписиДокумента.Запись);
			Если ЭтаФорма.Записать(ПараметрыЗаписи) Тогда
				//Переходим к отбору штрихкодов, требующих регистрации
				ПродолжитьПодборНоменклатурыИРегистрацииШтрихкодов();
			КонецЕсли;
			
		Исключение
			
			ТекстСообщения = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияНеУдалосьЗаписатьДокументМаркировки()
			 			   + Символы.ПС
						   + КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
			ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения, , , "Форма.Объект");
			
		КонецПопытки;
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПродолжитьПодборНоменклатурыИРегистрацииШтрихкодов()
	
	//Отбираем из ТЧ Марки все строки, у которых заполнен GTIN, но не заполнена номенклатура:
	//для таких позиций необходимо сформировать список штрихкодов к регистрации с группировкой по GTIN.
	ШтрихкодыКСопоставлению = ПодготовитьДанныеДляРегистрацииНоменклатуры();
	
	//Открываем форму подбора и регистрации с передачей неопознанных штрихкодов
	ДанныеДляСопоставленияНоменклатуры = Новый Структура(); //передается в параметрах открытия формы подбора
	Операция = "РегистрацияШтрихкодовСписком";
			
	ДанныеДляСопоставленияНоменклатуры.Вставить("ШтрихкодыКСопоставлению", ШтрихкодыКСопоставлению); //содержит массив, где каждый элемент - структура "Количество, Штрихкод", где штрихкод - это EAN из строка ТЧ Марки, который необходимо зарегистрировать
	
	ПараметрыОткрытияФормы = Новый Структура("ДанныеДляСопоставленияНоменклатуры, Операция, НеизвестныеШтрихкоды, СтруктураКодовМаркировки, Направление", ДанныеДляСопоставленияНоменклатуры, Операция, ШтрихкодыКСопоставлению, Неопределено, Объект.Направление);
	ОбработкаОповещенияПодборНоменклатуры = Новый ОписаниеОповещения("ПодборНоменклатурыИРегистрацииШтрихкодовПослеЗакрытияФормы", ЭтотОбъект);
	РежимОткрытия = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
	ОткрытьФорму("Обработка.РозничноеВыбытиеМаркированнойПродукцииИСМПТК.Форма.ПоискНоменклатурыПоШтрихкоду", ПараметрыОткрытияФормы, ЭтотОбъект,,,, ОбработкаОповещенияПодборНоменклатуры, РежимОткрытия);
		
КонецПроцедуры

&НаСервере
Функция ПодготовитьДанныеДляРегистрацииНоменклатуры()
	
	ТаблицаДляПроверки = Объект.Марки.Выгрузить(, "GTINВерхнегоУровня, Номенклатура, ВидУпаковки");
	ТаблицаДляПроверки.Свернуть("GTINВерхнегоУровня, Номенклатура, ВидУпаковки");
	
	ШтрихкодыКСопоставлению = Новый Массив();
	СообщенияОбОшибках = Новый Соответствие();
	Для Каждого ЭлементМассива Из ТаблицаДляПроверки Цикл
		Если ЭлементМассива.ВидУпаковки = ПредопределенноеЗначение("Перечисление.ВидыУпаковокИСМПТК.Групповая")
			Или ЭлементМассива.ВидУпаковки = ПредопределенноеЗначение("Перечисление.ВидыУпаковокИСМПТК.Потребительская") Тогда
			ЕАН = РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйКлиентСервер.EANПоGTIN(ЭлементМассива.GTINВерхнегоУровня);
			ДанныеНоменклатуры = ПолучитьНоменклатуруПоШтрихкоду(ЕАН, СообщенияОбОшибках);
			Если НЕ ДанныеНоменклатуры = Неопределено
				И ЗначениеЗаполнено(ДанныеНоменклатуры.Номенклатура) Тогда 
				//Этот ШК не нужно регистрировать
				Продолжить;
			КонецЕсли;
			ДанныеШтрихкода = Новый Структура("Количество, Штрихкод", 1, РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйКлиентСервер.EANПоGTIN(ЭлементМассива.GTINВерхнегоУровня));
			ШтрихкодыКСопоставлению.Добавить(ДанныеШтрихкода);
		КонецЕсли;
	КонецЦикла;
	Если Не СообщенияОбОшибках.Количество() = 0 Тогда
		Для Каждого СообщениеОшибка Из СообщенияОбОшибках Цикл 
			ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(СообщениеОшибка.Значение);
		КонецЦикла;
	КонецЕсли;
	
	Возврат ШтрихкодыКСопоставлению;
	
КонецФункции

&НаКлиенте
Процедура ПодборНоменклатурыИРегистрацииШтрихкодовПослеЗакрытияФормы(ИсходныеДанные, ДополнительныеПараметры = Неопределено) Экспорт

	Если Не ИсходныеДанные.Свойство("ШтрихкодыНоменклатуры") Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ИсходныеДанные.ШтрихкодыНоменклатуры.Количество() = 0 Тогда
		Если ИсходныеДанные.ОтложенныеТовары.Количество() = 0 Тогда 
			//Все ШК были успешно отработаны, заполняем полностью
			Для Каждого НовыйШтрикход Из ИсходныеДанные.ШтрихкодыНоменклатуры Цикл
				Номенклатура = НовыйШтрикход.Номенклатура;
				Штрихкод 	 = НовыйШтрикход.Штрихкод;
				
				ОбработатьСтрокиТаблицыПослеПодбораНаСервере(Номенклатура, Штрихкод);
				Модифицированность = Истина;
			КонецЦикла;
		Иначе
			//Некоторые товары (КМ) не были подобраны, их заполнять не нужно. Выполняем проверки и исключаем такие ШК
			ШтрихкодыДляИсключения = Новый Массив();
			Для Каждого ИсключаемыйШК Из ИсходныеДанные.ОтложенныеТовары Цикл
				ШтрихкодыДляИсключения.Добавить(ИсключаемыйШК.Штрихкод);
			КонецЦикла;
			
			Для Каждого НовыйШтрикход Из ИсходныеДанные.ШтрихкодыНоменклатуры Цикл
				Номенклатура = НовыйШтрикход.Номенклатура;
				Штрихкод 	 = НовыйШтрикход.Штрихкод;
				Если ШтрихкодыДляИсключения.Найти(Штрихкод) = Неопределено Тогда
					ОбработатьСтрокиТаблицыПослеПодбораНаСервере(Номенклатура, Штрихкод);
					Модифицированность = Истина;	
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
		
	СформироватьДеревоКодовМаркировки();
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьСтрокиТаблицыПослеПодбораНаСервере(Номенклатура, Штрихкод)
	
	GTINВерхнегоУровня = РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйКлиентСервер.GTINПоШтрихкодуEAN(Штрихкод);
	НайденныеСтрокиТаблицы = Объект.Марки.НайтиСтроки(Новый Структура("GTINВерхнегоУровня", GTINВерхнегоУровня));
	
	Для Каждого Строка Из НайденныеСтрокиТаблицы Цикл
		Строка.Номенклатура = Номенклатура;
	КонецЦикла;
  	
КонецПроцедуры

#КонецОбласти

#Область ТранспортныеКМ

&НаКлиенте
Процедура РедактироватьСтрокиТранспортныеКоды(Команда)
	
	//1. Просим записать документ
	//2. Перебираем ТЧ Марки:
	//   отбираем все строки с транспортными и групповыми кодами.
	//3. Открываем форму обработки ПоискНоменклатурыПоШтрихкоду с передачей параметра Операция = "РаботаСТранспортнымиКодами"
	//4. В форме можно указать номенклатуру, а также GTIN. 
	//5. В обработчике события закрытия формы обработки дозаполнеям ТЧ Марок, модифицируем документ, перестраиваем дерево кодов.
	
	Если Объект.Марки.Количество() = 0 Тогда
		ТексСообщения = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияВДокументеНетДанныхКодовМаркировки();
		ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТексСообщения);
		Возврат;
	КонецЕсли;
	
	//Проверяем, записан ли документ
	ТекстВопроса = "";
	Если НЕ ЗначениеЗаполнено(ЭтаФорма.Параметры.Ключ) ИЛИ ЭтаФорма.Модифицированность Тогда
		ТекстВопроса = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияВопросЗаписбДокументаПередНачаломРегистрацииШтрихкода();
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекстВопроса) Тогда
		
		Режим = РежимДиалогаВопрос.ДаНет;
		Оповещение   = Новый ОписаниеОповещения("ПослеЗакрытияВопросаРедактироватьСтрокиТранспортныеКоды", ЭтотОбъект);
		ПоказатьВопрос(Оповещение, ТекстВопроса, Режим, 0);
		
	Иначе
		
		//Переходим к отбору упаковок
		ПродолжитьРедактироватьСтрокиТранспортныеКоды();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияВопросаРедактироватьСтрокиТранспортныеКоды(Результат, Параметры) Экспорт

	Если Результат = КодВозвратаДиалога.Да Тогда
		
		Попытка
			// выполняем запись документа
			ПараметрыЗаписи = Новый Структура("РежимЗаписи", РежимЗаписиДокумента.Запись);
			Если ЭтаФорма.Записать(ПараметрыЗаписи) Тогда
				//Переходим к отбору упаковок
				ПродолжитьРедактироватьСтрокиТранспортныеКоды();
			КонецЕсли;
			
		Исключение
			
			ТекстСообщения = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияНеУдалосьЗаписатьДокументМаркировки()
			 			   + Символы.ПС
						   + КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
			ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения, , , "Форма.Объект");
			
		КонецПопытки;
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПродолжитьРедактироватьСтрокиТранспортныеКоды()
	
	//Отбираем из ТЧ Марки все строки, у которых не заполнен GTIN, либо заполнен некорректно, либо заполнен, но не заполнена номенклатура:
	//для таких позиций необходимо сформировать список штрихкодов к указанию данных вручную.
	ШтрихкодыКСопоставлению = ПодготовитьДанныеДляРедактированияСтрокТранспортныхУпаковок();
	
	//Открываем форму подбора и регистрации с передачей неопознанных штрихкодов
	ДанныеДляСопоставленияНоменклатуры = Новый Структура(); //передается в параметрах открытия формы подбора
	Операция = "РаботаСТранспортнымиКодами";
			
	ДанныеДляСопоставленияНоменклатуры.Вставить("ШтрихкодыКСопоставлению", ШтрихкодыКСопоставлению); 
	
	ПараметрыОткрытияФормы = Новый Структура("ДанныеДляСопоставленияНоменклатуры, Операция, НеизвестныеШтрихкоды, СтруктураКодовМаркировки, Направление", ДанныеДляСопоставленияНоменклатуры, Операция, ШтрихкодыКСопоставлению, Неопределено, Объект.Направление);
	ОбработкаОповещенияПодборНоменклатуры = Новый ОписаниеОповещения("РедактированиеСтрокТранспортныхКодовПослеЗакрытияФормы", ЭтотОбъект);
	РежимОткрытия = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
	ОткрытьФорму("Обработка.РозничноеВыбытиеМаркированнойПродукцииИСМПТК.Форма.ПоискНоменклатурыПоШтрихкоду", ПараметрыОткрытияФормы, ЭтотОбъект,,,, ОбработкаОповещенияПодборНоменклатуры, РежимОткрытия);
		
КонецПроцедуры

&НаСервере
Функция ПодготовитьДанныеДляРедактированияСтрокТранспортныхУпаковок()
	
	ШтрихкодыКСопоставлению = Новый Массив();
	
	//1. Обрабатываем транспортные коды
	ШтрихкодыКСопоставлениюТранспортные = Новый Массив();	
	ПараметрыОтбора = Новый Структура("ВидУпаковки", ПредопределенноеЗначение("Перечисление.ВидыУпаковокИСМПТК.Логистическая"));
	ТаблицаУпаковок = Объект.Марки.НайтиСтроки(ПараметрыОтбора);
		
    СообщенияОбОшибках = Новый Соответствие();
	Для Каждого ЭлементМассива Из ТаблицаУпаковок Цикл
		
		ДанныеУпаковки = Новый Структура();
		ДанныеУпаковки.Вставить("Штрихкод", 	ЭлементМассива.КодИдентификации); 
		ДанныеУпаковки.Вставить("Номенклатура", ЭлементМассива.Номенклатура);
		ДанныеУпаковки.Вставить("GTIN", 	    ЭлементМассива.GTIN);
		ДанныеУпаковки.Вставить("Количество",   ЭлементМассива.Количество);
		ДанныеУпаковки.Вставить("ВидПродукции", ЭлементМассива.ВидПродукции);
		ДанныеУпаковки.Вставить("ВидУпаковки",  ЭлементМассива.ВидУпаковки);
		
		ДанныеПоШтрихкоду = ОбщегоНазначенияИСМПТКПереопределяемый.ПолучитьДанныеНоменклатурыИзРегистраШтрихкодовПоШтрихкоду(, ЭлементМассива.EAN, ЭлементМассива.Номенклатура, СообщенияОбОшибках); 
		Если НЕ ДанныеПоШтрихкоду = Неопределено Тогда
			ДанныеУпаковки.Вставить("Характеристика", ДанныеПоШтрихкоду.Характеристика);
		Иначе
			ДанныеУпаковки.Вставить("Характеристика", "");
		КонецЕсли;
			
		ШтрихкодыКСопоставлениюТранспортные.Добавить(ДанныеУпаковки);
		
	КонецЦикла;
	Если Не СообщенияОбОшибках.Количество() = 0 Тогда
		Для Каждого СообщениеОшибка Из СообщенияОбОшибках Цикл 
			ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(СообщениеОшибка.Значение);
		КонецЦикла;
	КонецЕсли;
	
	//2. Обрабатываем групповые коды
	ШтрихкодыКСопоставлениюГрупповые = Новый Массив();	
	ПараметрыОтбора = Новый Структура("ВидУпаковки", ПредопределенноеЗначение("Перечисление.ВидыУпаковокИСМПТК.Групповая"));
	ТаблицаУпаковок = Объект.Марки.НайтиСтроки(ПараметрыОтбора);
		
	Для Каждого ЭлементМассива Из ТаблицаУпаковок Цикл
		
		ДанныеУпаковки = Новый Структура();
		ДанныеУпаковки.Вставить("Штрихкод", 	ЭлементМассива.КодИдентификации); 
		ДанныеУпаковки.Вставить("Номенклатура", Неопределено);  //Для групповых упаковок Номенклатура в данном случае не важна, т.к. она относится к верхнему уровню, а сейчас работаем с нижним (вложенный товар)
		ДанныеУпаковки.Вставить("GTIN", 	    ЭлементМассива.GTIN);
		ДанныеУпаковки.Вставить("Количество",   ЭлементМассива.Количество);
		ДанныеУпаковки.Вставить("ВидПродукции", ЭлементМассива.ВидПродукции);
		ДанныеУпаковки.Вставить("Характеристика", "");
		ДанныеУпаковки.Вставить("ВидУпаковки",  ЭлементМассива.ВидУпаковки);
					
		ШтрихкодыКСопоставлениюГрупповые.Добавить(ДанныеУпаковки);
		
	КонецЦикла;
	
	//3.Формируем общие данные
	ШтрихкодыКСопоставлению.Добавить(ШтрихкодыКСопоставлениюТранспортные);
	ШтрихкодыКСопоставлению.Добавить(ШтрихкодыКСопоставлениюГрупповые);
	
	Возврат ШтрихкодыКСопоставлению;
	
КонецФункции

&НаКлиенте
Процедура РедактированиеСтрокТранспортныхКодовПослеЗакрытияФормы(ИсходныеДанные, ДополнительныеПараметры = Неопределено) Экспорт

	Если Не ИсходныеДанные.Свойство("ШтрихкодыНоменклатуры") Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ИсходныеДанные.ШтрихкодыНоменклатуры.Количество() = 0 Тогда
		ЗаполнитьТаблицуМарок(ИсходныеДанные.ШтрихкодыНоменклатуры);
		Модифицированность = Истина;
	КонецЕсли;
	
	СформироватьДеревоКодовМаркировки();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТаблицуМарок(МассивДанныхУпаковок)
	
	Для Каждого Элемент Из МассивДанныхУпаковок Цикл
		
		КодИдентификации = Элемент.КодИдентификации;
		ДанныеУпаковки   = Элемент.ДанныеУпаковки;
		
		ИзменилсяИдентификаторКода = ?(Элемент.Свойство("ИзменилсяИдентификаторКода"), Элемент.ИзменилсяИдентификаторКода, Ложь);
		ПреобразованныйКод = КодИдентификации; //этот код будет использован для перезаполнения данных в таблице документа
		Если ИзменилсяИдентификаторКода Тогда
			//Было выполнено преобразование формата транспортного кода SSCC (18 <> 20 символов)
			//Возвращаем исходное значение, чтобы найти нужную строку в таблице документа
			Если СтрДлина(КодИдентификации) = 18 Тогда
				КодИдентификации = "00" + КодИдентификации;
			ИначеЕсли СтрДлина(КодИдентификации) = 20 Тогда
				КодИдентификации = Сред(КодИдентификации, 3);
			КонецЕсли;
		КонецЕсли;
		
		НайденныеСтрокиТаблицы = Объект.Марки.НайтиСтроки(Новый Структура("КодИдентификации", КодИдентификации));
		Для Каждого Строка Из НайденныеСтрокиТаблицы Цикл
			Если Строка.ВидУпаковки = ПредопределенноеЗначение("Перечисление.ВидыУпаковокИСМПТК.Логистическая") Тогда
				ЗаполнитьЗначенияСвойств(Строка, ДанныеУпаковки);
				Если ИзменилсяИдентификаторКода Тогда
					Строка.КодИдентификации = ПреобразованныйКод;
					Строка.КодМаркировки	= РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйКлиентСервер.ШтрихкодВBase64(ПреобразованныйКод);
				КонецЕсли;
			Иначе
				ЗаполнитьЗначенияСвойств(Строка, ДанныеУпаковки,, "Номенклатура"); //Для групповой Ном-ра заполняется по верхнему уровню, а здесь обрабатывается нижний (вложенные товары)
			КонецЕсли;
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ПроверкаСостоянияКодаНаСервере

&НаКлиенте
Процедура ПроверитьСостояниеКодовНаСервере(Команда)
	
	//Проверяем данные таблицы
	Если Объект.Марки.Количество() = 0 Тогда
		ТекстОшибки = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияВТаблицеМаркиОтсутствуютКодыМаркировки(); 
		ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстОшибки);
		Возврат;
	КонецЕсли;

	Если Не ЗначениеЗаполнено(Объект.Организация) Тогда
		ТекстОшибки = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияНеЗаполненаОрганизацияКомандаПроверитьСостояниеКМ();
		ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстОшибки);
		Возврат;
	КонецЕсли;
	
	ТокенАвторизацииВрем = Неопределено;
	ЗавершениеПроверитьСостояниеКодовНаСервере = Новый ОписаниеОповещения("ЗавершениеПроверитьСостояниеКодовНаСервере", ЭтаФорма);
	ПолучитьКлючАвторизации(ЗавершениеПроверитьСостояниеКодовНаСервере, Истина);
	
КонецПроцедуры

//Выполнить запрос состояния КМ с сервера списком.
//Используется из команд ручной проверки статусов, загрузки из файла, ТСД и Мобильного приложения.
&НаСервере
Процедура ЗавершениеПроверитьСостояниеКодовНаСервере(РезультатВыполнения, Параметры) Экспорт
			
	ТокенАвторизацииВрем = ?(ЗначениеЗаполнено(РезультатВыполнения), РезультатВыполнения, Неопределено);
	
	//Если по какой-то причине не удалось выполнить получение Токена, то и запрос на проверку статуса КМ не выполнялся,
	//об этом нужно предупредить и отметить непроверенные коды.
	Если ТокенАвторизацииВрем = Неопределено Тогда 
		ТекстСообщения = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияНевозможноВыполнитьПроверкуСтатусаКМ_ВФоне();
		ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	ЗапроситьДанныеОСостоянииКодовСписком(ТокенАвторизацииВрем);
	
КонецПроцедуры

&НаСервере
Процедура ЗапроситьДанныеОСостоянииКодовСписком(ТокенАвторизации = Неопределено)
	
	МассивКМ = Новый Массив();
	Для Каждого СтрокаМарка Из Объект.Марки Цикл
		МассивКМ.Добавить(СтрокаМарка.КодИдентификации);	
	КонецЦикла;
	
	ОтветСервераСостояниеКМ = ИнтеграцияИСМПТК.ЗапроситьДанныеОСостоянииКМ(МассивКМ, Объект.Организация, ТокенАвторизации);
	ОбработатьОтветСервераПоСостояниюКМ(МассивКМ, ОтветСервераСостояниеКМ);	
	
КонецПроцедуры

//Выполнить запрос состояния конкретного КМ при его добавлении.
//
&НаСервере
Процедура ЗавершениеПроверитьСостояниеКМПриДобавленииНаСервере(РезультатВыполнения, Параметры) Экспорт
	
	ТокенАвторизацииВрем = ?(ЗначениеЗаполнено(РезультатВыполнения), РезультатВыполнения, Неопределено);
	
	//Если по какой-то причине не удалось выполнить получение Токена, то и запрос на проверку статуса КМ не выполнялся,
	//об этом нужно предупредить и отметить непроверенные коды.
	Если ТокенАвторизацииВрем = Неопределено Тогда 
		ТекстСообщения = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияНевозможноВыполнитьПроверкуСтатусаКМ_ВФоне();
		ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	МассивКМ = Новый Массив();
	МассивКМ.Добавить(Параметры.КодИдентификации);

	ОтветСервераСостояниеКМ = ИнтеграцияИСМПТК.ЗапроситьДанныеОСостоянииКМ(МассивКМ, Объект.Организация, ТокенАвторизацииВрем);
	ОбработатьОтветСервераПоСостояниюКМ(МассивКМ, ОтветСервераСостояниеКМ);
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьОтветСервераПоСостояниюКМ(МассивКМ, ОтветСервераСостояниеКМ)
	
	НовоеСоответствиеСтатусов = Неопределено;
	ИнтеграцияИСМПТК.ОбработатьОтветСервераПоСостояниюКМ_Общая(ЭтаФорма, МассивКМ, ОтветСервераСостояниеКМ, "УведОВвозеИмпорт", НовоеСоответствиеСтатусов);
	
	//Заполняем статус проверки в дереве по данным запроса сервера
	ЭлементыВетвиДерева = ДеревоМаркированнойПродукции.ПолучитьЭлементы();
	Для Каждого ЭлементДерева Из ЭлементыВетвиДерева Цикл
		Если Не ЗначениеЗаполнено(ЭлементДерева.КодИдентификации) Тогда
			Для Каждого ЭлементНижнийУровень Из ЭлементДерева.ПолучитьЭлементы() Цикл
				Если Не ЭлементНижнийУровень.Ошибочный Тогда //Значение по умолчанию - ложь. Если стоит Истина, значит код уже проверен - сохранеям этот признак.
					ЭлементНижнийУровень.Ошибочный = ?(НовоеСоответствиеСтатусов.Получить(ЭлементНижнийУровень.КодИдентификации) = Неопределено, Ложь, НовоеСоответствиеСтатусов.Получить(ЭлементНижнийУровень.КодИдентификации));
				КонецЕсли;
			КонецЦикла;
		Иначе
			Если Не ЭлементДерева.Ошибочный Тогда 
				ЭлементДерева.Ошибочный = ?(НовоеСоответствиеСтатусов.Получить(ЭлементДерева.КодИдентификации) = Неопределено, Ложь, НовоеСоответствиеСтатусов.Получить(ЭлементДерева.КодИдентификации));
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
		
КонецПроцедуры

&НаКлиенте
Процедура СообщитьОНевозможностиВыполнитьПроверкуСтатусаКМ(РежимЗапроса) Экспорт

	Если РежимЗапроса = "Ручной" Тогда
		ТекстСообщения = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияНевозможноВыполнитьПроверкуСтатусаКМ_Вручную();
	Иначе	
		ТекстСообщения = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияНевозможноВыполнитьПроверкуСтатусаКМ_ВФоне();
	КонецЕсли;
	ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
	
КонецПроцедуры

#КонецОбласти

#Область ПодключаемыеКоманды

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	
	ОбщегоНазначенияИСМПТККлиентПереопределяемый.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
	
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат) Экспорт
	
	ОбщегоНазначенияИСМПТКПереопределяемый.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	
	ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.ОбновитьКоманды(ЭтотОбъект, Объект);
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти