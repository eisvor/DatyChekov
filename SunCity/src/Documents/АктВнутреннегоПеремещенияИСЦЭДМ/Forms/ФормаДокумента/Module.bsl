
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.РегНомерНаБумажномНосителе) 
		ИЛИ Объект.ДатаВыпискиНаБумажномНосителе <> '00010101000000' Тогда
		ВыпискаБумажногоАкта = Истина;
	Иначе
		ВыпискаБумажногоАкта = Ложь;
	КонецЕсли;
	
	//Заполнение по отборам в форме списка
	Если Параметры.Ключ.Пустая() Тогда
		Если Параметры.ЗначенияЗаполнения.Свойство("Организация") Тогда
			СтруктураДанных = ПолучитьРеквизитыОрганизацииКонтрагента(Параметры.ЗначенияЗаполнения.Организация, "Поставщик");
			Объект.Организация = Параметры.ЗначенияЗаполнения.Организация;
			Объект.Поставщик   = Параметры.ЗначенияЗаполнения.Организация;
			ЗаполнитьЗначенияСвойств(Объект, СтруктураДанных); 
		КонецЕсли;
		ЗаполнитьСведенияЕД();
	КонецЕсли;
	
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("ПрефиксыЭлементовФормы", "ДеревоМаркированнойПродукции,РезультатСверки");
	СобытияФормИСМПТКПереопределяемый.ПриСозданииНаСервере_НастроитьПодключаемоеОборудование(ЭтаФорма, ДополнительныеПараметры);
	
	Если Параметры.Ключ.Пустая() Тогда
		ПодготовитьФормуНаСервере();
		ИнтерфейсИСМПТК.УстановитьЗаголовокФормыДокумента(Строка(Объект.ВидОперации), Объект.Ссылка, ЭтаФорма);
	Иначе
		Если Объект.ТипАкта = ПредопределенноеЗначение("Перечисление.ВидыДокументаИСМПТК.Исправленный") Тогда
			НайтиПервичныйДокументПоИдентификатору();
		КонецЕсли;
	КонецЕсли;

	//Поиск связанного Уведомления о расхождениях
	НайтиУведомлениеОРасхождениях();
	НайтиКорректировочныйДокумент();
	НайтиПервичныйДокумент();
		
	СобытияФормИСМПТКПереопределяемый.ПриСозданииНаСервере(ЭтотОбъект, Отказ, СтандартнаяОбработка);
    УправлениеФормой();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	СобытияФормИСМПТККлиентПереопределяемый.ПриОткрытии(ЭтотОбъект, Отказ);
	
	ОбщегоНазначенияИСМПТККлиентПереопределяемый.НачатьОбновлениеКоманд(ЭтотОбъект);
	ОбщегоНазначенияИСМПТККлиентПереопределяемый.НачатьПодключениеОборудованиеПриОткрытииФормы(ЭтаФорма, "СканерШтрихкода");
	
	СформироватьДеревоКодовМаркировки();
	ЗапретитьРедактированиеПолей();
		
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	Если НЕ ЗавершениеРаботы И ИспользуютсяСканерыШтрихкода Тогда
		ОбщегоНазначенияИСМПТККлиентПереопределяемый.НачатьОтключениеОборудованиеПриЗакрытииФормы(Неопределено, ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	ПодготовитьФормуНаСервере();
	ИнтерфейсИСМПТК.УстановитьЗаголовокФормыДокумента(Строка(Объект.ВидОперации), Объект.Ссылка, ЭтаФорма);
	
	СобытияФормИСМПТКПереопределяемый.ПриЧтенииНаСервере(ТекущийОбъект, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	СобытияФормИСМПТККлиентПереопределяемый.ПослеЗаписи(ЭтаФорма, ПараметрыЗаписи);
	ИнтеграцияИСМПТККлиент.ОповеститьФормы(РаботаСДокументамиИСМПТККлиентСервер.ИмяСобытияЗаписьАктВнутреннегоПеремещенияИСЦЭДМ());
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	УправлениеФормой();
	ИнтерфейсИСМПТК.УстановитьЗаголовокФормыДокумента(Строка(Объект.ВидОперации), Объект.Ссылка, ЭтаФорма);
	СобытияФормИСМПТКПереопределяемый.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
    
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	СобытияФормИСМПТКПереопределяемый.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	ИзменитьДокументОснование = Ложь;
	
	//Сначала проверяем, если ли в выбранном основании товары, по которым необходимо заполнять Акт
	ЕстьМаркируемыйТовар = ПроверитьНаличиеМаркируемогоТовара(ВыбранноеЗначение);
	
	Если Не ЕстьМаркируемыйТовар Тогда
		//Если в выбранном основании нет маркируемого товара, то заполнять Акт по нему не имеет смысла. 
		//Сообщаем пользователю, отменяем выбор.
		ТекстСообщения = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияВДокументеОтсутствуетМаркируемаяпродукция();
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ДокументОснование%", ВыбранноеЗначение);
		Сообщить(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(ВыбранноеЗначение) <> Тип("Структура") Тогда
		
		Если ЗначениеЗаполнено(Объект.ДокументОснование)
			И Объект.ДокументОснование <> ВыбранноеЗначение 
			И СтрНайти(ИсточникВыбора.ИмяФормы, "ФормаВыбораИзКлассификатора") = 0 Тогда
			
			ТекстВопроса = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияДокументУжеОтраженВУчетеНужноОтразитьПовторно();
			ТекстВопроса = СтрЗаменить(ТекстВопроса, "%СтарыйДокументОснование%", Объект.ДокументОснование);
			
			ИзменитьДокументОснованиеЗавершение = Новый ОписаниеОповещения("ИзменитьДокументОснованиеЗавершение", ЭтаФорма, Новый Структура("ВыбранноеЗначение", ВыбранноеЗначение));
			ПоказатьВопрос(ИзменитьДокументОснованиеЗавершение, ТекстВопроса, РежимДиалогаВопрос.ОКОтмена);
			
		Иначе
			
			ИзменитьДокументОснование = Истина;
			
		КонецЕсли;
		
		Если ИзменитьДокументОснование Тогда
			
			Структура_СвязанныйАкт = ПроверитьСвязанныйАкт(ВыбранноеЗначение);
			
			Если Структура_СвязанныйАкт = Неопределено Тогда
				//Если у выбранного документа-основания нет связанного Акта, заполняем его без вопросов
				Объект.ДокументОснование = ВыбранноеЗначение;
				СформироватьПредставлениеДокументаОснования(ЭтаФорма);
				Если Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыДокументовИСЦЭДМ.НеОпределен") Тогда
					ТекстВопроса = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияПерезаполнитьДокументПоНовомуОснованию();
					ПерезаполнитьДокументПоОснованию = Новый ОписаниеОповещения("ПерезаполнитьДокументПоОснованию", ЭтаФорма);
					ПоказатьВопрос(ПерезаполнитьДокументПоОснованию, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
				Иначе 
					УправлениеФормой();
				КонецЕсли;
				Модифицированность = Истина;
			Иначе
				//Если связанный Акт есть, предупреждаем об этом пользователя и даем возможность отказаться от выбора
				ТекстВопроса = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияЕстьСвязанныйДокументМаркировкиПривязатьЕщеОдин();
				ТекстВопроса = СтрЗаменить(ТекстВопроса, "%ДокументОснование%", ВыбранноеЗначение);
				
				ПродолжитьЗаполнениеДокументаОснования = Новый ОписаниеОповещения("ПродолжитьЗаполнениеДокументаОснования", ЭтаФорма, Новый Структура("ВыбранноеЗначение", ВыбранноеЗначение));
				ПоказатьВопрос(ПродолжитьЗаполнениеДокументаОснования, ТекстВопроса, РежимДиалогаВопрос.ОКОтмена);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = РаботаСДокументамиИСМПТККлиентСервер.ИмяСобытияЗаписьАктВнутреннегоПеремещенияИСЦЭДМ() Тогда		
		
		Если Не Объект.Ссылка.Пустая() Тогда
			Если Объект.ТипАкта = ПредопределенноеЗначение("Перечисление.ВидыДокументаИСМПТК.Исправленный") Тогда
				НайтиПервичныйДокументПоИдентификатору();
			КонецЕсли;
			ЭтаФорма.Прочитать();	
		КонецЕсли;
		
		СформироватьДеревоКодовМаркировки();
		ЗапретитьРедактированиеПолей();
		НайтиУведомлениеОРасхождениях();
		НайтиКорректировочныйДокумент();
		НайтиПервичныйДокумент();
		
	ИначеЕсли Источник = "ПодключаемоеОборудование" И ВводДоступен()  Тогда
		
		Если ИмяСобытия = "ScanData" Тогда
			ОбработкаСобытияСканераОбщая(Параметр);
		КонецЕсли;
		
	ИначеЕсли ИмяСобытия = РаботаСДокументамиИСМПТККлиентСервер.ИмяСобытияЗаписьУведомлениеОРасхожденияхИСЦЭДМ() Тогда
			
		НайтиУведомлениеОРасхождениях();
		НайтиКорректировочныйДокумент();
		НайтиПервичныйДокумент();
		
	ИначеЕсли ИмяСобытия = "ЦЭДМ_ОтправленыРезультатыСверки" Тогда
		Если ЗначениеЗаполнено(Параметр) И ТипЗнч(Параметр) = Тип("Массив")
			И Параметр[0] = Объект.Ссылка
			И (Не Объект.СтатусСверкиТоваров = ПредопределенноеЗначение("Перечисление.СтатусыСверкиПолученныхКодовИСЦЭДМ.ПустаяСсылка")
			   И Объект.СтатусСверкиТоваров = ПредопределенноеЗначение("Перечисление.СтатусыСверкиПолученныхКодовИСЦЭДМ.СверкаНеВыполнялась")) Тогда
			   
			ТекстСообщения = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияОтправленСписокКМДляПроведенияСверкиНаСервере();
			ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;
		
	Иначе
		РаботаСДокументамиИСМПТККлиентПереопределяемый.ОбработкаОповещенияДокументыИСМПТ(ЭтаФорма, Объект.Ссылка, ИмяСобытия, Параметр, Источник);
	КонецЕсли;
	
	СобытияФормИСМПТККлиентПереопределяемый.ОбработкаОповещения(ЭтотОбъект, ИмяСобытия, Параметр, Источник);
	УправлениеФормой();
	
КонецПроцедуры

&НаКлиенте
Процедура ВнешнееСобытие(Источник, Событие, Данные)
	
	Если Не СобытияФормИСМПТККлиентПереопределяемый.ОбрабатыватьВнешнееСобытиеТО() Тогда
		Возврат;
	КонецЕсли;
	
	Параметр = Новый Массив;
	Параметр.Добавить(Данные);
	Параметр.Добавить(Неопределено);
	
	Если ВводДоступен() Тогда
		Если Событие = "Штрихкод" ИЛИ Событие = "ПолученШтрихкод" Тогда
			ОбработкаСобытияСканераОбщая(Параметр);
		КонецЕсли;
	Иначе			
		РаботаСДокументамиИСМПТККлиентПереопределяемый.ОбработкаОповещенияДокументыИСМПТ(ЭтаФорма, Объект.Ссылка, Событие, Параметр, Источник);		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
		
	Если ВыпискаБумажногоАкта И Не ЗначениеЗаполнено(Объект.ДатаВыпискиНаБумажномНосителе) Тогда
		ТекстСообщения = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияНеУказанаДатаДокументаВыписанногоНаБумаге();
		ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
	Если ВыпискаБумажногоАкта И Не ЗначениеЗаполнено(Объект.РегНомерНаБумажномНосителе) 
		И Объект.ДатаВыпискиНаБумажномНосителе = '00010101000000' Тогда
		ТекстСообщения = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияНеУказанНомерДокументаВыписанногоНаБумаге();
		ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаСобытияСканераОбщая(Параметр)
	
	ОчиститьСообщения();
	Если Не Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыДокументовИСЦЭДМ.НеОпределен") Тогда
		//Заполняем форму сверки
		Если Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыДокументовИСЦЭДМ.ОжидаетПодтверждение") Тогда
			ОбработатьКодМаркировкиВоВходящем(РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйКлиент.ПреобразоватьДанныеСоСканераВСтруктуру(Параметр));
		КонецЕсли;
	Иначе
		Если ИнтеграцияИСМПТКВызовСервера.ИспользоватьАвтоЗапросДопИнформацииЦЭДМ() 
			И Не ЗначениеЗаполнено(Объект.Организация) Тогда
			ТекстСообщения = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияВключенАвтозапросНужнаОрганизацияДляВыполнения("АвтоЗаполнениеДополнительнойИнформацииПоКодамИСЦЭДМ");
			ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
			Возврат;
		КонецЕсли;
		
		Если Не РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйКлиентСервер.ПроверкаФорматаТранспортногоКодаПройденаУспешно(РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйКлиент.ПреобразоватьДанныеСоСканераВСтруктуру(Параметр)) Тогда
			ТекстСообщения = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияТранспортныйКодНеСоответствуетФормату();
			ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
			Возврат;
		КонецЕсли;
		
		ОбработатьКодМаркировки(РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйКлиент.ПреобразоватьДанныеСоСканераВСтруктуру(Параметр));
	КонецЕсли;
		
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

#Область ОтражениеВУчете

&НаКлиентеНаСервереБезКонтекста
Процедура СформироватьПредставлениеДокументаОснования(Форма)
	
	Если ЗначениеЗаполнено(Форма.Объект.ДокументОснование) Тогда
		Форма.ПредставлениеДокументаОснования = Форма.Объект.ДокументОснование;
		Форма.Элементы.ПредставлениеДокументаОснования.ЦветТекста = ОбщегоНазначенияИСМПТККлиентСервер.ЦветСиний();
	Иначе
		Форма.ПредставлениеДокументаОснования = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияДокументНеОтраженВУчете();
		Форма.Элементы.ПредставлениеДокументаОснования.ЦветТекста = ОбщегоНазначенияИСМПТККлиентСервер.ЦветКрасный();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеДокументаОснованияНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если ЗначениеЗаполнено(Объект.ДокументОснование) Тогда
		ПоказатьЗначение(, Объект.ДокументОснование);
	Иначе
		Кнопки = Новый СписокЗначений;
		Если Не Объект.Марки.Количество() = 0
			Или Не Объект.Итоги.Количество() = 0 Тогда // Когда в документе есть сведения о товарах
			Кнопки.Добавить("Создать", РаботаСТекстамиИСМПТККлиентСервер.ТекстКомандыСоздать());
		КонецЕсли;
		Кнопки.Добавить("Выбрать", РаботаСТекстамиИСМПТККлиентСервер.ТекстКомандыВыбрать());
		Кнопки.Добавить("Отмена",  РаботаСТекстамиИСМПТККлиентСервер.ТекстКомандыОтмена());
		ОтразитьДокументВУчетеЗавершение = Новый ОписаниеОповещения("ОтразитьДокументВУчетеЗавершение", ЭтаФорма);
		Если Модифицированность Тогда
			ПоказатьВопрос(ОтразитьДокументВУчетеЗавершение, РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияВопросОтразитьДокументВУчетеСпредварительнойЗаписью(), Кнопки);
		Иначе
			ПоказатьВопрос(ОтразитьДокументВУчетеЗавершение, РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияВопросОтразитьДокументВУчете(), Кнопки);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтразитьДокументВУчетеЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если Модифицированность Тогда
		Попытка
			ЭтотОбъект.Записать();
		Исключение 
			
			Если Объект.Ссылка.Пустая() Тогда
				ПредставлениеПолное = ОбщегоНазначенияИСМПТКВызовСервера.ПолучитьИмяИПредставлениеПоСсылке(Объект.Ссылка).Синоним;
			Иначе
				ПредставлениеПолное = Объект.Ссылка;
			КонецЕсли;
			
			ТекстОшибки = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияОшибкаПриЗаписиДокументаСПараметромСмотриЖурналРегистрации();
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ДанныеДокумента%", ПредставлениеПолное);
			
			ИмяСобытия  = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияИмяСобытияЗаписьДокумента();
			ИмяСобытия  = СтрЗаменить(ИмяСобытия, "%ЗаписываемыйДокумент%", ПредставлениеПолное);
			ОбщегоНазначенияИСМПТКВызовСервера.СоздатьЗаписьЖурналаРегистрации(ИмяСобытия, "Ошибка",,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
			ВызватьИсключение ТекстОшибки;
		КонецПопытки;
	КонецЕсли;
	
	Если РезультатВопроса = "Выбрать" Тогда
		ВыбратьДокументОснование();
	ИначеЕсли РезультатВопроса = "Создать" Тогда
		СоздатьДокументОснованиеНаКлиентеПослеЗаписи(КодВозвратаДиалога.ОК, Неопределено);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДокументОснованиеВыбрать(Команда)
	
	ВыбратьДокументОснование();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьДокументОснование()
	
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперацииИСЦЭДМ.ПустаяСсылка") Тогда
		ПоказатьПредупреждение(, РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияНеУказанВидОперацииДокумента());
		Возврат;
	КонецЕсли;
	
	ДокументыВыбора = РаботаСДокументамиИСМПТККлиентСерверПереопределяемый.ПолучитьСписокДокументовОснованияДляАктаВнутреннегоПеремещенияИСЦЭДМ(Объект.ВидОперации, "Выбрать");
	
	Если ДокументыВыбора.Количество() > 1 Тогда
		
		ПараметрыФормы = Новый Структура();
		ПараметрыФормы.Вставить("ДокументыВыбора", ДокументыВыбора);
					
		Оповещение = Новый ОписаниеОповещения("ВыборДокументаОснованияЗавершение", ЭтотОбъект);
		ОткрытьФорму("ОбщаяФорма.ФормаВыбораДокументаОснованияИСМПТК", ПараметрыФормы,,,,,Оповещение,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	ИначеЕсли ДокументыВыбора.Количество() = 1 Тогда
		
		ВыбранныйДокумент = ДокументыВыбора[0].Значение;
		ВыборДокументаОснованияЗавершение(ВыбранныйДокумент, Неопределено);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыборДокументаОснованияЗавершение(ВыбранныйДокумент, ДополнительныеПараметры) Экспорт
	
	Если ВыбранныйДокумент <> "" И ТипЗнч(ВыбранныйДокумент) <> Тип("Неопределено") Тогда
		
		ИмяДокумента = ВыбранныйДокумент;
		
		СтруктураОтбора = Новый Структура();
		Если ЗначениеЗаполнено(Объект.Организация) Тогда
			СтруктураОтбора.Вставить("Организация", Объект.Организация);
		КонецЕсли;
		
		ДопПараметрыДляОтбора = Новый Структура("ИмяДокумента", ИмяДокумента);
		РаботаСДокументамиИСМПТККлиентПереопределяемый.ДополнитьСтруктуруОтбораПервичногоДокумента(СтруктураОтбора, Объект, ДопПараметрыДляОтбора);
				
		СтруктураПараметров = Новый Структура("Отбор, РежимВыбора, МножественныйВыбор", СтруктураОтбора, Истина, Ложь);
		
		ИмяФормыВыбора = "Документ." + ИмяДокумента + ".ФормаВыбора"; 
		ОткрытьФорму(ИмяФормыВыбора, СтруктураПараметров , ЭтаФорма,,,,, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьДокументОснование(Команда)
	
	Если ЗначениеЗаполнено(Объект.ДокументОснование) Тогда
		ПоказатьЗначение(, Объект.ДокументОснование);
	Иначе
		Действие = РаботаСДокументамиИСМПТККлиентСервер.ДействиеОткрыть();
		ПоказатьПредупреждение(, РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияОтказДокументНеОтраженВУчете(Действие));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтсоединитьДокументОснование(Команда)
	
	Если ЗначениеЗаполнено(Объект.ДокументОснование) Тогда
		Объект.ДокументОснование = Неопределено;
		СформироватьПредставлениеДокументаОснования(ЭтаФорма);
		Модифицированность = Истина;
	Иначе
		Действие = РаботаСДокументамиИСМПТККлиентСервер.ДействиеОтсоединить();
		ПоказатьПредупреждение(, РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияОтказДокументНеОтраженВУчете(Действие));
	КонецЕсли;
	УправлениеФормой();
	
КонецПроцедуры

&НаКлиенте
Процедура ДокументОснованиеСоздать(Команда)
	
	Если Объект.Ссылка.Пустая() ИЛИ ЭтаФорма.Модифицированность Тогда
		
		СоздатьДокументОснованиеНаКлиентеПослеЗаписи = Новый ОписаниеОповещения("СоздатьДокументОснованиеНаКлиентеПослеЗаписи", ЭтаФорма);	
		ИнтеграцияИСМПТККлиент.ВопросЗаписатьОбъектПередВыполнением(СоздатьДокументОснованиеНаКлиентеПослеЗаписи);
		
	Иначе
		
		СоздатьДокументОснованиеНаКлиентеПослеЗаписи(КодВозвратаДиалога.ОК, Неопределено);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьДокументОснованиеНаКлиентеПослеЗаписи(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.ОК Тогда
		
		ДокументыВыбора = РаботаСДокументамиИСМПТККлиентСерверПереопределяемый.ПолучитьСписокДокументовОснованияДляАктаВнутреннегоПеремещенияИСЦЭДМ(Объект.ВидОперации, "Создать");
		
		Если ДокументыВыбора.Количество() > 1 Тогда
			
			ПараметрыФормы = Новый Структура();
			ПараметрыФормы.Вставить("ДокументыВыбора", ДокументыВыбора);
			
			Оповещение = Новый ОписаниеОповещения("СозданиеДокументаОснованияЗавершение", ЭтотОбъект);
			ОткрытьФорму("ОбщаяФорма.ФормаВыбораДокументаОснованияИСМПТК", ПараметрыФормы,,,,,Оповещение, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
			
		ИначеЕсли ДокументыВыбора.Количество() = 1 Тогда
			
			ВыбранныйДокумент = ДокументыВыбора[0].Значение;
			СозданиеДокументаОснованияЗавершение(ВыбранныйДокумент, Неопределено);
			
		КонецЕсли;
	КонецЕсли;
			
КонецПроцедуры

&НаКлиенте
Процедура СозданиеДокументаОснованияЗавершение(ВыбранныйДокумент, ДополнительныеПараметры) Экспорт
	
	Если Не ВыбранныйДокумент = Неопределено Тогда
		Массив = Новый Массив;
		Массив.Добавить(Объект.Ссылка);
		
		ДанныеДляСоздания = Новый Структура();
		ДанныеДляСоздания.Вставить("ИсходныйДокумент", 	  Массив);
		ДанныеДляСоздания.Вставить("СоздаваемыйДокумент", ВыбранныйДокумент);

		РаботаСДокументамиИСМПТККлиент.СоздатьПервичныйДокументИСЦЭДМ(ДанныеДляСоздания);
		СформироватьПредставлениеДокументаОснования(ЭтаФорма);
		Модифицированность = Истина;
	КонецЕсли;
			
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура КомментарийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СобытияФормИСМПТККлиентПереопределяемый.ПоказатьФормуРедактированияКомментария(Элемент.ТекстРедактирования, ЭтотОбъект, "Объект.Комментарий");

КонецПроцедуры

&НаКлиенте
Процедура ЭтапОформленияОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

#Область Общее

&НаКлиенте
Процедура ВидОперацииПриИзменении(Элемент)
	
	ЗаполнитьСведенияЕД();
	УправлениеФормой();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыпискаБумажногоАктаПриИзменении(Элемент)
	
	Если Не ВыпискаБумажногоАкта Тогда
		Объект.РегНомерНаБумажномНосителе = "";
		Объект.ДатаВыпискиНаБумажномНосителе = '00010101000000';
	КонецЕсли;
	
	УправлениеФормой();
	
КонецПроцедуры

#КонецОбласти

#Область Поставщик

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.Организация)
		И Не ЗначениеЗаполнено(Объект.Поставщик) 
		И Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыДокументовИСЦЭДМ.НеОпределен") Тогда
		
		ТекстВопроса = НСтр("ru = 'Выполнить заполнение данных поставщика данными организации?'");
		ОрганизацияПриИзмененииЗавершение = Новый ОписаниеОповещения("ОрганизацияПриИзмененииЗавершение", ЭтаФорма);
		ПоказатьВопрос(ОрганизацияПриИзмененииЗавершение, ТекстВопроса, РежимДиалогаВопрос.ДаНет);	
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзмененииЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		ОрганизацияПриИзмененииНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОрганизацияПриИзмененииНаСервере()
	
	Объект.Поставщик = Объект.Организация;
	СтруктураДанных = ПолучитьРеквизитыОрганизацииКонтрагента(Объект.Поставщик, "Поставщик");
	ЗаполнитьЗначенияСвойств(Объект, СтруктураДанных, "ПоставщикИдентификационныйНомер, ПоставщикНаименование");
	
КонецПроцедуры

#КонецОбласти

#Область Поставщик

&НаКлиенте
Процедура ПоставщикПриИзменении(Элемент)

	Если Не Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыДокументовИСЦЭДМ.НеОпределен") Тогда
		Возврат;
	КонецЕсли;
	Если Не ЗначениеЗаполнено(Объект.Поставщик) Тогда
		Возврат;
	КонецЕсли;
	
	ПоставщикПриИзмененииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ПоставщикПриИзмененииНаСервере()
	
	Если ТипЗнч(Объект.Поставщик) = Тип("СправочникСсылка.СкладыИСЦЭДМ") Тогда
		
		Объект.ПоставщикИдентификационныйНомер = Объект.Поставщик.ИИНБИНСклада;
		Объект.ПоставщикНаименование = Объект.Поставщик.Наименование;
			
		//Пытаемся заполнить склад учета
		ДанныеСклада = РаботаСДокументамиИСМПТКПереопределяемый.ПолучитьДанныеСкладаПоИдентификаторуЦЭДМ(Объект.ПоставщикИдентификационныйНомер, Объект.Организация);
		Если Не ДанныеСклада = Неопределено Тогда
			Объект.СкладПоставщик = ДанныеСклада.Склад;
		КонецЕсли;
		
	Иначе		
		
		//Заполняем дополнительные данные поставщика
		СтруктураДанных = ПолучитьРеквизитыОрганизацииКонтрагента(Объект.Поставщик, "Поставщик");
		ЗаполнитьЗначенияСвойств(Объект, СтруктураДанных, "ПоставщикИдентификационныйНомер, ПоставщикНаименование");
		
		Если Не ЗначениеЗаполнено(Объект.Организация) Тогда 
			Объект.Организация = Объект.Поставщик;
		ИначеЕсли Не Объект.Организация = Объект.Поставщик Тогда
			ТекстСообщения = НСтр("ru = 'Указанная в документе организация не соответствует выбранному поставщику!'");	
			ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;
		
	КонецЕсли;	
			
КонецПроцедуры

&НаКлиенте
Процедура СкладПоставщикПриИзменении(Элемент)
	
	Если Не Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыДокументовИСЦЭДМ.НеОпределен") Тогда
		Возврат;
	КонецЕсли;
	Если Не ЗначениеЗаполнено(Объект.СкладПоставщик) Тогда
		Возврат;
	КонецЕсли;
	Если Не ЗначениеЗаполнено(Объект.Организация) Тогда
		Возврат;
	КонецЕсли;
		
	//После выбора склада учета проверяем, зарегистрировано ли для этого склада соответствие в складах ЦЭДМ
	ДанныеСкладаЦЭДМ = ПодобратьСоответствующийСкладЦЭДМНаСервере(Объект.СкладПоставщик);
	Если Не ДанныеСкладаЦЭДМ = Неопределено 
		И Не Объект.Поставщик = ДанныеСкладаЦЭДМ.СкладЦЭДМ Тогда
		ТекстВопроса = НСтр("ru = 'Найдено соответствие склада-отправителя виртуальному складу ЦЭДМ. Выполнить заполнение данных поставщика данными склада ЦЭДМ?'");
		ДополнительныеДанные = Новый Структура("СкладЦЭДМ, ИдентификаторСклада, Представление", ДанныеСкладаЦЭДМ.СкладЦЭДМ, ДанныеСкладаЦЭДМ.ИдентификаторСклада, ДанныеСкладаЦЭДМ.Представление);
		СкладПоставщикПриИзмененииЗавершение = Новый ОписаниеОповещения("СкладПоставщикПриИзмененииЗавершение", ЭтаФорма, ДополнительныеДанные);
		ПоказатьВопрос(СкладПоставщикПриИзмененииЗавершение, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СкладПоставщикПриИзмененииЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		Объект.Поставщик = ДополнительныеПараметры.СкладЦЭДМ;
		Объект.ПоставщикИдентификационныйНомер = ДополнительныеПараметры.ИдентификаторСклада;
		Объект.ПоставщикНаименование = ДополнительныеПараметры.Представление;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Получатель

&НаКлиенте
Процедура ПолучательПриИзменении(Элемент)
	
	Если Не Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыДокументовИСЦЭДМ.НеОпределен") Тогда
		Возврат;
	КонецЕсли;
	Если Не ЗначениеЗаполнено(Объект.Получатель) Тогда
		Возврат;
	КонецЕсли;
	
	ПолучательПриИзмененииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ПолучательПриИзмененииНаСервере()

	Если ТипЗнч(Объект.Получатель) = Тип("СправочникСсылка.СкладыИСЦЭДМ") Тогда
		
		Объект.ПолучательИдентификационныйНомер = Объект.Получатель.ИИНБИНСклада;
		Объект.ПолучательНаименование = Объект.Получатель.Наименование;
				
		//Пытаемся заполнить склад учета
		ДанныеСклада = РаботаСДокументамиИСМПТКПереопределяемый.ПолучитьДанныеСкладаПоИдентификаторуЦЭДМ(Объект.ПолучательИдентификационныйНомер, Объект.Организация);
		Если Не ДанныеСклада = Неопределено Тогда
			Объект.СкладПолучатель = ДанныеСклада.Склад;
		КонецЕсли;
		
	Иначе		
		СтруктураДанных = ПолучитьРеквизитыОрганизацииКонтрагента(Объект.Получатель, "Получатель");
		ЗаполнитьЗначенияСвойств(Объект, СтруктураДанных, "ПолучательИдентификационныйНомер, ПолучательНаименование");
		Объект.Организация = Объект.Получатель;		
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура СкладПолучательПриИзменении(Элемент)
	
	Если Не Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыДокументовИСЦЭДМ.НеОпределен") Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеСкладаЦЭДМ = Неопределено;
	СкладПолучательПриИзмененииНаСервере(ДанныеСкладаЦЭДМ);
	Если Не ДанныеСкладаЦЭДМ = Неопределено Тогда
		
		ТекстВопроса = НСтр("ru = 'Найдено соответствие склада-получателя виртуальному складу ЦЭДМ. Выполнить заполнение данных получателя данными склада ЦЭДМ?'");
		ДополнительныеДанные = Новый Структура("СкладЦЭДМ, ИдентификаторСклада, Представление", ДанныеСкладаЦЭДМ.СкладЦЭДМ, ДанныеСкладаЦЭДМ.ИдентификаторСклада, ДанныеСкладаЦЭДМ.Представление);
		СкладПолучательПриИзмененииЗавершение = Новый ОписаниеОповещения("СкладПолучательПриИзмененииЗавершение", ЭтаФорма, ДополнительныеДанные);
		ПоказатьВопрос(СкладПолучательПриИзмененииЗавершение, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СкладПолучательПриИзмененииНаСервере(ДанныеСкладаЦЭДМ)
	
	ДанныеСкладаЦЭДМ = ПолучитьДанныеСкладаЦЭДМПоСкладуУчета(Объект.СкладПолучатель);
				
КонецПроцедуры

&НаКлиенте
Процедура СкладПолучательПриИзмененииЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		Объект.Получатель = ДополнительныеПараметры.СкладЦЭДМ;
		Объект.ПолучательИдентификационныйНомер = ДополнительныеПараметры.ИдентификаторСклада;
		Объект.ПолучательНаименование = ДополнительныеПараметры.Представление;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Прочее

&НаКлиенте
Процедура ЭтапОформленияПриИзменении(Элемент)

	УправлениеФормой();
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицФормы

#Область Товары

&НаКлиенте
Процедура ПослеЗакрытияВопросаЗаписатьШтрихкодНоменклатуры(Результат, Параметры) Экспорт

	Если Результат = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
		
	Попытка
		
		Номенклатура = Параметры.Номенклатура;
		EAN 		 = Параметры.EAN;
		GTIN         = Параметры.GTIN;
		ЕдиницаИзмерения = Параметры.ЕдиницаИзмерения;
		Характеристика	 = Параметры.Характеристика;
		
		РаботаСДокументамиИСМПТКПереопределяемый.ЗаписатьШтрихкодНоменклатуры(Номенклатура, EAN, ЕдиницаИзмерения, Характеристика);
		ЗаписатьНоменклатуруВМарки(Номенклатура, GTIN);
		ТекстСообщения = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияНужноЗаписатьДокументДляОбновленияТаблицыМарки();
		ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения, , , "Форма.Объект");
		ОбщегоНазначенияИСМПТККлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ЗарегистрироватьНовыйGTIN", "Доступность", Ложь);
		
	Исключение
		
		Информация = ИнформацияОбОшибке();
		ТекстСообщения = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияНеУдалосьЗаписатьШтрихкодПоПричинеСПараметром();
		ТекстСообщения = ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(ТекстСообщения, КраткоеПредставлениеОшибки(Информация));
		ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения, , , "Форма.Объект");
		ОбщегоНазначенияИСМПТККлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ЗарегистрироватьНовыйGTIN", "Доступность", Истина);
		
	КонецПопытки;

КонецПроцедуры

&НаСервере
Функция ЗаписатьНоменклатуруВМарки(Номенклатура, GTIN)
	
	Отбор = Новый Структура();
	Отбор.Вставить("GTIN", GTIN);
	
	ВидПродукции = ОбщегоНазначенияИСМПТКПереопределяемый.ПолучитьВидПродукцииПоНоменклатуре(Номенклатура);
	
	Строки = Объект.Марки.НайтиСтроки(Отбор);
	Если Строки.Количество() > 0 Тогда
		Для Каждого Строка Из Строки Цикл
			Строка.Номенклатура = Номенклатура;
			Строка.ВидПродукции = ВидПродукции;
		КонецЦикла;
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура ДеревоМаркированнойПродукцииНачалоПеретаскивания(Элемент, ПараметрыПеретаскивания, Выполнение)
	
	Выполнение = Ложь;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ПоискПоШтрихкодуВыполнить(Команда)
	
	ОчиститьСообщения();
	Если ИнтеграцияИСМПТКВызовСервера.ИспользоватьАвтоЗапросДопИнформацииЦЭДМ() 
		И Не ЗначениеЗаполнено(Объект.Организация) Тогда
		ТекстСообщения = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияВключенАвтозапросНужнаОрганизацияДляВыполнения("АвтоЗаполнениеДополнительнойИнформацииПоКодамИСЦЭДМ");
		ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;

	Оповещение = Новый ОписаниеОповещения("ПоискПоШтрихкодуЗавершение", ЭтотОбъект);
	СобытияФормИСМПТККлиент.ПоказатьВводШтрихкода(Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоискПоШтрихкодуЗавершение(ДанныеШтрихкода, ДополнительныеПараметры) Экспорт
	
	Если Не РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйКлиентСервер.ПроверкаФорматаТранспортногоКодаПройденаУспешно(ДанныеШтрихкода) Тогда
		Возврат;
	КонецЕсли;
	
	ОбработатьКодМаркировки(ДанныеШтрихкода);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗарегистрироватьНовыйGTIN(Команда)
	
	Номенклатура 	 = Элементы.Товары.ТекущиеДанные.Номенклатура;
	EAN 			 = Элементы.Товары.ТекущиеДанные.EAN;
	GTIN 			 = Элементы.Товары.ТекущиеДанные.GTIN;
	ЕдиницаИзмерения = Элементы.Товары.ТекущиеДанные.ЕдиницаИзмерения;
	Характеристика 	 = Элементы.Товары.ТекущиеДанные.Характеристика;
	
	Если Не ЗначениеЗаполнено(Характеристика) 
		И ИнтеграцияИСМПТКПереопределяемый.ПроверитьВедениеУчетаПоХарактеристикамУНоменклатуры(Номенклатура)
		И ИнтеграцияИСМПТКПереопределяемый.ПроверитьИспользованиеХарактеристик() Тогда
		ТекстСообщения = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообещнияНеЗаполненаХарактеристика();
		ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
	 	Возврат;
	КонецЕсли;
	
	ТекстВопроса = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияВопросДобавитьНовыйШтрихкодНоменклатуре();
	
	Дополнительныепараметры = Новый Структура();
	
	ДополнительныеПараметры.Вставить("Номенклатура",     Номенклатура);
	ДополнительныеПараметры.Вставить("EAN", 		     EAN);
	ДополнительныеПараметры.Вставить("GTIN", 		     GTIN);
	ДополнительныеПараметры.Вставить("ЕдиницаИзмерения", ЕдиницаИзмерения);
	ДополнительныеПараметры.Вставить("Характеристика", 	 Характеристика);
	
	Режим = РежимДиалогаВопрос.ДаНет;
	Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВопросаЗаписатьШтрихкодНоменклатуры", ЭтотОбъект, ДополнительныеПараметры);
	ПоказатьВопрос(Оповещение, ТекстВопроса, Режим, 0);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьДанныеИзТСД(Команда)
	
	ОчиститьСообщения();
	Если ИнтеграцияИСМПТКВызовСервера.ИспользоватьАвтоЗапросДопИнформацииЦЭДМ() 
		И Не ЗначениеЗаполнено(Объект.Организация) 
		И Элементы.ГруппаСтраницы.ТекущаяСтраница.Имя = "ГруппаМарки" Тогда 
		ТекстСообщения = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияВключенАвтозапросНужнаОрганизацияДляВыполнения("АвтоЗаполнениеДополнительнойИнформацииПоКодамИСЦЭДМ");
		ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	ОбщегоНазначенияИСМПТККлиентПереопределяемый.НачатьЗагрузкуДанныеИзТСД(Новый ОписаниеОповещения("ЗагрузитьИзТСДЗавершение", ЭтотОбъект), УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапроситьСоставМарокДокумента(Команда)

	ДанныеДокумента = Новый Структура();
	ДанныеДокумента.Вставить("СсылкаДокумент", Объект.Ссылка);
	ДанныеДокумента.Вставить("Организация",    Объект.Организация);
	ДанныеДокумента.Вставить("Получатель",	   Объект.Получатель);
	ДанныеДокумента.Вставить("Идентификатор",  Объект.Идентификатор);
	ДанныеДокумента.Вставить("СкладЦЭДМ",	   ?(ТипЗнч(Объект.Получатель) = Тип("СправочникСсылка.СкладыИСЦЭДМ"), Объект.Получатель, Неопределено));
	
	ИнтеграцияИСМПТККлиент.ПоказатьСпискоКМВоВходящемДокументеЦЭДМ(ЭтаФорма, ДанныеДокумента);
		
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура ЗагрузитьИзТСДЗавершение(РезультатВыполнения, ДополнительныеПараметры) Экспорт
	
	СобытияФормИСМПТККлиентПереопределяемый.ПриПолученииДанныхИзТСД(Новый ОписаниеОповещения("Подключаемый_ПолученыДанныеИзТСД", ЭтотОбъект), ЭтотОбъект, РезультатВыполнения);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьИзТСДЗавершениеТокен(РезультатВыполнения, ДополнительныеПараметры) Экспорт
	
	ОбщегоНазначенияИСМПТККлиентПереопределяемый.НачатьЗагрузкуДанныеИзТСД(Новый ОписаниеОповещения("ЗагрузитьИзТСДЗавершение", ЭтотОбъект), УникальныйИдентификатор);
		
КонецПроцедуры

&НаСервере
Процедура УправлениеФормой()
	
	НеОтправлен = Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыДокументовИСЦЭДМ.НеОпределен");
	ЕдиныйДистрибьютор = Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперацииИСЦЭДМ.ВнутреннееПеремещениеЕД");
	УПользователяЕстьНастройкаОбмена = ЗначениеЗаполнено(Объект.Организация) 
					И ИнтерфейсИСМПТК.ПроверитьНаличиеНастройкиПодключенияУПользователя(Объект.Организация);
	
	//////// Общий раздел ////////
	//Реквизиты бумажного документа доступны только если установлена опция выписки на бумаге
	ОбщегоНазначенияИСМПТККлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГруппаБумажныйДокумент", "Видимость", ВыпискаБумажногоАкта);
	ОбщегоНазначенияИСМПТККлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ФормаОбщаяКомандаПерезаполнитьПоПервичномуДокументу", "Видимость", Ложь);
	ОбщегоНазначенияИСМПТККлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГруппаДанныеЕдиногоДистрибьютора", "Видимость", ЕдиныйДистрибьютор);
	//////////////////////////////	
	
	//////// Редактирование данных строки ////////	
	ОбщегоНазначенияИСМПТККлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ДеревоМаркированнойПродукцииПодобратьНоменклатуруИЗарегистрироватьGTIN", "Доступность", НеОтправлен);
	ОбщегоНазначенияИСМПТККлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ДеревоМаркированнойПродукцииРедактироватьСтрокиТранспортныеКоды", 		"Доступность", НеОтправлен);
	//Получение дополнительной информации по КМ с сервера
	ОбщегоНазначенияИСМПТККлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ДеревоМаркированнойПродукцииПолучитьДополнительныеСведенияПоКодамВИСЦЭДМ", "Доступность", НеОтправлен);
	//////////////////////////////	
	
	ОбщегоНазначенияИСМПТККлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "КомандыЗагрузкиТЧ", "Доступность", НеОтправлен); 
	//Ручной ввод ШК
	ОбщегоНазначенияИСМПТККлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ТоварыПоискПоШтрихкоду", "Видимость", НеОтправлен);
	
	//Мобильное приложение
	Если ПравоДоступа("Просмотр", Метаданные.РегистрыСведений.НастройкиПодключенияМобильноеПриложениеИСМПТК) Тогда 
		ИспользоватьПриложение = Константы.ИспользоватьМобильноеПриложениеИСМПТК.Получить();
		ОбщегоНазначенияИСМПТККлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ДеревоМаркированнойПродукцииЗагрузитьКодыМаркировкиИзМобильногоПриложения", 
																	"Доступность", НеОтправлен И ИспользоватьПриложение);
	Иначе
		ОбщегоНазначенияИСМПТККлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ДеревоМаркированнойПродукцииЗагрузитьКодыМаркировкиИзМобильногоПриложения", 
																	"Видимость", Ложь);
	КонецЕсли;
	//////////////////////////////	
			
	//Данные о товарах основания в ТЧ Марки
	ОбщегоНазначенияИСМПТККлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ДеревоМаркированнойПродукцииГруппаКоличествоОснования", "Видимость", ЗначениеЗаполнено(Объект.ДокументОснование));
	ОбщегоНазначенияИСМПТККлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ФормаОбщаяКомандаПерезаполнитьПоПервичномуДокументу", "Видимость", НеОтправлен И ЗначениеЗаполнено(Объект.ДокументОснование));
	//////////////////////////////	
	
	//Этапы
	ВходящийДокумент = Объект.Марки.Количество() = 0 И Не Объект.Итоги.Количество() = 0 И ЗначениеЗаполнено(Объект.Идентификатор);
	ИспользуютсяЭтапы = ОбщегоНазначенияИСМПТКВызовСервера.ПроверитьЗначениеКонстанты("ИспользоватьЭтапыОформленияДокументовИСЦЭДМ"); 
	ОбщегоНазначенияИСМПТККлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ЭтапОформления", "Видимость", ИспользуютсяЭтапы и Не ВходящийДокумент);
	ОбщегоНазначенияИСМПТККлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ЭтапОформления", 
																"Доступность", Не Объект.ЭтапОформления = ПредопределенноеЗначение("Перечисление.ЭтапыОформленияДокументовИСЦЭДМ.Отправлен"));
	
	//Отражение в учете
	ДокументМожноОтразитьВБазе = РаботаСДокументамиИСМПТКПереопределяемый.ПроверитьВозможностьОтраженияДокументаВУчете(ОбщегоНазначенияИСМПТКВызовСервера.ИмяДокументаАктВнутреннегоПеремещенияИСЦЭДМ());
	ОбщегоНазначенияИСМПТККлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ФормаГруппаОтражение", "Видимость", ДокументМожноОтразитьВБазе);
	ОбщегоНазначенияИСМПТККлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ПредставлениеДокументаОснования", "Видимость", ДокументМожноОтразитьВБазе);

	ОбщегоНазначенияИСМПТККлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГруппаТовары", 
																"Видимость", НЕ Объект.Итоги.Количество() = 0); // Когда документ получен с сервера
	
	ОбщегоНазначенияИСМПТККлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГруппаМарки", 
																"Видимость", НеОтправлен ИЛИ (НЕ НеОтправлен И Не Объект.Марки.Количество() = 0));
	ОбщегоНазначенияИСМПТККлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ФормаДокументОснованиеСоздать", 
																"Видимость", НеОтправлен ИЛИ (НЕ НеОтправлен И Не Объект.Марки.Количество() = 0) // Если документ создавался в этой базе
																						 ИЛИ (НЕ НеОтправлен И Не Объект.Итоги.Количество() = 0)); // Если получен с сервера 
	
	ОбщегоНазначенияИСМПТККлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГруппаИсходныйУОР", 
																"Видимость", ЗначениеЗаполнено(Объект.ИсходноеУведомлениеОРасхожденияхИдентификатор));
	ОбщегоНазначенияИСМПТККлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГруппаПервичный", 
																"Видимость", ЗначениеЗаполнено(ИсходныйДокументИдентификатор));
	ОбщегоНазначенияИСМПТККлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГруппаКорректировочныйДокумент", 
																"Видимость", ЗначениеЗаполнено(ДокументКорректировкаИдентификатор));
	
	ОбщегоНазначенияИСМПТККлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ТаблицаИтогов", "ТолькоПросмотр", Не НеОтправлен);
	
	ОбщегоНазначенияИСМПТККлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ДеревоМаркированнойПродукцииСрокГодности", "ТолькоПросмотр", Не НеОтправлен);
	ОбщегоНазначенияИСМПТККлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ДеревоМаркированнойПродукцииНомерПартии",  "ТолькоПросмотр", Не НеОтправлен);
	
	ОбщегоНазначенияИСМПТККлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ТаблицаИтоговЗапроситьСоставМарокДокумента",
																	   "Видимость", Не НеОтправлен И УПользователяЕстьНастройкаОбмена И Объект.Марки.Количество() = 0);
	
	//////// Прочее ////////
	//ТЧ Ошибки выводится только если в ней есть какие-то записи
	ОбщегоНазначенияИСМПТККлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "Ошибки", "Видимость", ?(Объект.Ошибки.Количество() = 0, Ложь, Истина));
	
	НастроитьВидимостьФункционалаСверки();
	
	//Управление доступностью кнопок Отправить, Обновить, Создать основание и т.д. в командной панели	
	ИзменитьКоманднуюПанельДокумента();
	
	//Формирование представления ссылки на связанный документ
	СформироватьПредставлениеДокументаОснования(ЭтаФорма);
	//////////////////////////////	

КонецПроцедуры

&НаСервере
Процедура ПодготовитьФормуНаСервере()
	
	Если Объект.Ссылка.Пустая() Тогда
		Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперацииИСЦЭДМ.ВнутреннееПеремещение");
		Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыДокументовИСЦЭДМ.НеОпределен");
		Объект.ЭтапОформления = ПредопределенноеЗначение("Перечисление.ЭтапыОформленияДокументовИСЦЭДМ.ВРаботе");
		Объект.ТипАкта = ПредопределенноеЗначение("Перечисление.ВидыДокументаИСМПТК.Исходный");
	КонецЕсли;
	
	Если ИспользоватьПодключаемоеОборудование Тогда
		ИспользуютсяСканерыШтрихкода = (ОбщегоНазначенияИСМПТКВызовСервераПереопределяемый.ОборудованиеПоПараметрам("СканерШтрихкода").Количество() > 0);
	Иначе
		ИспользуютсяСканерыШтрихкода = Ложь;
	КонецЕсли;
	
	Если Объект.ЭтапОформления = ПредопределенноеЗначение("Перечисление.ЭтапыОформленияДокументовИСЦЭДМ.Отправлен") Тогда
		//Нужно скорректировать список выбора после программной установки служебного значения, чтобы оно отобразилось
		Элементы.ЭтапОформления.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ЭтапыОформленияДокументовИСЦЭДМ.Отправлен")); 
	КонецЕсли;
	
	//Заполнение информации о Едином дистрибьюторе
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперацииИСЦЭДМ.ВнутреннееПеремещениеЕД") Тогда
		
		СведенияОКонтрагенте = ОбщегоНазначенияИСМПТКПереопределяемый.ПолучитьИнформациюОЮрЛице();
		ДистрибьюторНаименование = СведенияОКонтрагенте.Представление;
		ДистрибьюторАдрес = СведенияОКонтрагенте.ЮридическийАдрес;
		ДистрибьюторБИН   = СведенияОКонтрагенте.ИИНБИН;
		
	КонецЕсли;
						
КонецПроцедуры

&НаСервере
Функция ПолучитьРеквизитыОрганизацииКонтрагента(Ссылка, Реквизит) Экспорт
	
	Возврат ИнтеграцияИСМПТКПереопределяемый.ПолучитьРеквизитыОрганизацииКонтрагента(Ссылка, Реквизит);
	
КонецФункции

&НаКлиенте
Процедура ИзменитьДокументОснованиеЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.ОК Тогда
		Объект.ДокументОснование = ДополнительныеПараметры.ВыбранноеЗначение;
		СформироватьПредставлениеДокументаОснования(ЭтаФорма);
		Если Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыДокументовИСЦЭДМ.НеОпределен") Тогда
			ТекстВопроса = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияПерезаполнитьДокументПоНовомуОснованию();
			ПерезаполнитьДокументПоОснованию = Новый ОписаниеОповещения("ПерезаполнитьДокументПоОснованию", ЭтаФорма);
			ПоказатьВопрос(ПерезаполнитьДокументПоОснованию, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		КонецЕсли;
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьНовуюНоменклатуру(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.ОК Тогда
		
		Если Не ДополнительныеПараметры.СтруктураКодовМаркировки.ВидУпаковки = ПредопределенноеЗначение("Перечисление.ВидыУпаковокИСМПТК.Потребительская")
			И Не ОбщегоНазначенияИСМПТКВызовСервера.ПроверитьЗначениеКонстанты("АвтоЗаполнениеДополнительнойИнформацииПоКодамИСЦЭДМ") Тогда 
			
			ПараметрыОткрытияФормы = Новый Структура("Номенклатура, СтруктураКодовМаркировки, Организация, ИнФСистема", 
													ДополнительныеПараметры.Номенклатура, 
													ДополнительныеПараметры.СтруктураКодовМаркировки, 
													Объект.Организация, 
													"ИСЦЭДМ");
			
			ОткрытьФорму(
			"ОбщаяФорма.ФормаУточненияДанныхИСМПТК",
			ПараметрыОткрытияФормы, ЭтотОбъект,,,,
			Новый ОписаниеОповещения("ЗавершитьДобавлениеКодаМаркировки", ЭтотОбъект), РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
			
		Иначе 
			
			СтруктураКодовМаркировки = ДополнительныеПараметры.СтруктураКодовМаркировки;
			Номенклатура			 = ДополнительныеПараметры.Номенклатура;
			ДобавитьКодМаркировкиВДерево(Номенклатура, СтруктураКодовМаркировки);
			
			НоваяСтрока = Объект.Марки.Добавить();
			НоваяСтрока.КодМаркировки 	 = СтруктураКодовМаркировки.КодМаркировки;
			НоваяСтрока.КодИдентификации = СтруктураКодовМаркировки.КодИдентификации;
			НоваяСтрока.GTIN = СтруктураКодовМаркировки.GTIN;
			Если СтруктураКодовМаркировки.ВидУпаковки = ПредопределенноеЗначение("Перечисление.ВидыУпаковокИСМПТК.Групповая") Тогда 
				НоваяСтрока.GTINВерхнегоУровня 	= СтруктураКодовМаркировки.GTINВерхнегоУровня;
			КонецЕсли;
			
			НоваяСтрока.СрокГодности = ?(Не СтруктураКодовМаркировки.Свойство("СрокГодности"), "", СтруктураКодовМаркировки.СрокГодности);
			НоваяСтрока.НомерПартии  = ?(Не СтруктураКодовМаркировки.Свойство("НомерПартии"),  "", СтруктураКодовМаркировки.НомерПартии);
		
			НоваяСтрока.EAN 		 = СтруктураКодовМаркировки.EAN;
			НоваяСтрока.Номенклатура = Номенклатура;
			НоваяСтрока.Количество 	 = СтруктураКодовМаркировки.Количество;
			НоваяСтрока.ВидУпаковки	 = СтруктураКодовМаркировки.ВидУпаковки;
			НоваяСтрока.ВидПродукции = СтруктураКодовМаркировки.ВидПродукции;
			
			Для Каждого Строка ИЗ ДеревоМаркированнойПродукции.ПолучитьЭлементы() Цикл
				Элементы.ДеревоМаркированнойПродукции.Развернуть(Строка.ПолучитьИдентификатор(), Истина);
			КонецЦикла;
			
			Модифицированность = Истина;
			
		КонецЕсли;
	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПродолжитьЗаполнениеДокументаОснования(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.ОК Тогда
		Объект.ДокументОснование = ДополнительныеПараметры.ВыбранноеЗначение;
		СформироватьПредставлениеДокументаОснования(ЭтаФорма);
		Если Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыДокументовИСЦЭДМ.НеОпределен") Тогда
			
			ТекстВопроса = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияПерезаполнитьДокументПоНовомуОснованию();
			ПерезаполнитьДокументПоОснованию = Новый ОписаниеОповещения("ПерезаполнитьДокументПоОснованию", ЭтаФорма);
			ПоказатьВопрос(ПерезаполнитьДокументПоОснованию, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
			
		КонецЕсли;
		Модифицированность = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПроверитьСвязанныйАкт(ВыбранноеЗначение)
	
	Возврат РаботаСДокументамиИСМПТК.ПроверитьНаличиеСвязанного_Общий(ВыбранноеЗначение, Истина, "", ОбщегоНазначенияИСМПТКВызовСервера.ИмяДокументаАктВнутреннегоПеремещенияИСЦЭДМ());
	
КонецФункции

&НаСервере
Функция ПроверитьНаличиеМаркируемогоТовара(ВыбранноеЗначение) 
	
	Возврат РаботаСДокументамиИСМПТКПереопределяемый.ПроверитьНаличиеМаркируемогоТовараИСЦЭДМ(ВыбранноеЗначение);
	
КонецФункции

&НаКлиенте
Процедура ЗаполнитьАктПоДокументуОснованию()
	
	ДанныеДокументаОснования = ПолучитьДанныеДокументаОснованияНаСервере();
	
	РеквизитыШапки  = ДанныеДокументаОснования.Реквизиты;
	ДанныеПоТоварам = ДанныеДокументаОснования.Товары;
	
	ЗаполнитьЗначенияСвойств(Объект, РеквизитыШапки);
	Объект.Товары.Очистить();
	Для Каждого СтрокаТовар Из ДанныеПоТоварам Цикл
		НоваяСтрока = Объект.Товары.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТовар);
	КонецЦикла;
	
	СформироватьДеревоКодовМаркировки();

КонецПроцедуры

&НаСервере
Функция ПолучитьДанныеДокументаОснованияНаСервере() Экспорт
	
	Возврат РаботаСДокументамиИСМПТКПереопределяемый.ПолучитьДанныеДокументаОснованияДляПерезаполненияИСЦЭДМ_Перемещение(Объект.ДокументОснование, ОбщегоНазначенияИСМПТКВызовСервера.ИмяДокументаАктВнутреннегоПеремещенияИСЦЭДМ());

КонецФункции

&НаСервере
Функция СформироватьДеревоКодовМаркировки() Экспорт
	
	//Добавим группы номенклатуры
	ПустаяСтруктураКМ = ПолучитьСтруктуруКодовМаркировки();
	ОчиститьДеревоКодовМаркировки();
	
	ТаблицаТоваров = Объект.Товары.Выгрузить();
	ТаблицаТоваров.Свернуть("Номенклатура, EAN", "КоличествоИсточник");
	
	Для Каждого ГруппаНом Из ТаблицаТоваров Цикл
		Если Не ЗначениеЗаполнено(ГруппаНом.Номенклатура) Тогда 
			ДанныеНоменклатуры = ПолучитьНоменклатуруПоШтрихкоду(ГруппаНом.EAN);
			Если ТипЗнч(ДанныеНоменклатуры) = Тип("Структура") Тогда
				Номенклатура = ДанныеНоменклатуры.Номенклатура;
			Иначе
				Номенклатура = ДанныеНоменклатуры;
			КонецЕсли;
			ГруппаНом.Номенклатура = Номенклатура;
		КонецЕсли;
	КонецЦикла;
	
	ТаблицаТоваров.Свернуть("Номенклатура", "КоличествоИсточник");
	Для Каждого ГруппаНом Из ТаблицаТоваров Цикл
		ПустаяСтруктураКМ.КоличествоИсточник = ГруппаНом.КоличествоИсточник;
		ДобавитьКодМаркировкиВДерево(ГруппаНом.Номенклатура, ПустаяСтруктураКМ);
	КонецЦикла;

	СообщенияОбОшибках = Новый Соответствие();
	Для Каждого СтрокаТЧ Из Объект.Марки Цикл
		Если ЗначениеЗаполнено(СтрокаТЧ.КодИдентификации) Тогда
			
			Номенклатура = ИнтеграцияИСМПТКПереопределяемый.ПолучитьПустуюСсылкуНоменклатура();
			
			Если СтрокаТЧ.ВидУпаковки = ПредопределенноеЗначение("Перечисление.ВидыУпаковокИСМПТК.Групповая") Тогда
				//Для групповых поиск по регистру не выполняем, т.к. EAN в стркое относится к вложенному товару, а номенклатура для групповых 
				//должна заполняться по верхнему уровню, т.е. по реквизиту GTINВерхнегоУровня.
				EANВерхнегоУровня  = РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйКлиентСервер.EANПоGTIN(СтрокаТЧ.GTINВерхнегоУровня);
				ДанныеНоменклатуры = ПолучитьНоменклатуруПоШтрихкоду(EANВерхнегоУровня, СообщенияОбОшибках);
			Иначе
				ДанныеНоменклатуры = ПолучитьНоменклатуруПоШтрихкоду(СтрокаТЧ.EAN, СообщенияОбОшибках);
			КонецЕсли;
			
			Если ТипЗнч(ДанныеНоменклатуры) = Тип("Структура") Тогда
				Номенклатура = ДанныеНоменклатуры.Номенклатура;
			Иначе
				Номенклатура = ДанныеНоменклатуры;
			КонецЕсли;
			
			//Если Номенклатура не нашлась в ТЧ Товары и в регистре Штрихкоды, 
			//возможно, она была назначена в форме рдактирования транспортных упаковок без регистрации ШК.
			//Проверяем этот случай по данным строки 
			Если НЕ ЗначениеЗаполнено(Номенклатура) И ЗначениеЗаполнено(СтрокаТЧ.Номенклатура) Тогда
				Номенклатура = СтрокаТЧ.Номенклатура;
			КонецЕсли;
			
			ДобавитьКодМаркировкиВДерево(Номенклатура, СтрокаТЧ);
		КонецЕсли;
	КонецЦикла;
	Если Не СообщенияОбОшибках.Количество() = 0 Тогда
		Для Каждого СообщениеОшибка Из СообщенияОбОшибках Цикл 
			ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(СообщениеОшибка.Значение);
		КонецЦикла;
	КонецЕсли;
	
	Элементы.ДеревоМаркированнойПродукции.НачальноеОтображениеДерева = НачальноеОтображениеДерева.РаскрыватьВсеУровни;
	
КонецФункции

&НаСервере
Процедура ИзменитьКоманднуюПанельДокумента()

	////ПРОВЕРКИ////
	МожноОбновить = Не Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыДокументовИСЦЭДМ.НеОпределен");
	
	МожноПодтвердить = Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыДокументовИСЦЭДМ.ОжидаетПодтверждение");
	МожноОтклонить 	 = Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыДокументовИСЦЭДМ.ОжидаетПодтверждение");
	
	МожноОтправить = Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыДокументовИСЦЭДМ.Черновик")
						ИЛИ Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыДокументовИСЦЭДМ.РасчетИтогов")
						ИЛИ Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыДокументовИСЦЭДМ.НеОпределен");
	
	МожноОтозвать = Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыДокументовИСЦЭДМ.ОжидаетПодтверждение");					
	
	ДокументНеопределенНаСервере = Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыДокументовИСЦЭДМ.НеОпределен");
	
	УПользователяЕстьНастройкаОбмена = ЗначениеЗаполнено(Объект.Организация) 
					И ИнтерфейсИСМПТК.ПроверитьНаличиеНастройкиПодключенияУПользователя(Объект.Организация);
					
	ИспользуютсяЭтапы = ОбщегоНазначенияИСМПТКВызовСервера.ПроверитьЗначениеКонстанты("ИспользоватьЭтапыОформленияДокументовИСЦЭДМ"); 
	ТекущийЭтапДопускаетОтправку = ?(ИспользуютсяЭтапы, 
									 Объект.ЭтапОформления = ПредопределенноеЗначение("Перечисление.ЭтапыОформленияДокументовИСЦЭДМ.ГотовКОтправке"),
									 Истина);
	////////////////
	
	//Действия по АПИ
	ОбщегоНазначенияИСМПТККлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ФормаДокументАктВнутреннегоПеремещенияИСЦЭДМОтправить",
																"Видимость", УПользователяЕстьНастройкаОбмена И МожноОтправить И ТекущийЭтапДопускаетОтправку);
	ОбщегоНазначенияИСМПТККлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ФормаДокументАктВнутреннегоПеремещенияИСЦЭДМПодтвердить",
																"Видимость", УПользователяЕстьНастройкаОбмена И МожноПодтвердить);
	ОбщегоНазначенияИСМПТККлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ФормаДокументАктВнутреннегоПеремещенияИСЦЭДМОтклонить",
																"Видимость", УПользователяЕстьНастройкаОбмена И МожноОтклонить);
	ОбщегоНазначенияИСМПТККлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ФормаДокументАктВнутреннегоПеремещенияИСЦЭДМОтозвать",
																"Видимость", УПользователяЕстьНастройкаОбмена И МожноОтозвать);
	//Внутренние действия
	ОбщегоНазначенияИСМПТККлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ФормаОбщаяКомандаПроверитьИСМПТК", 
																"Видимость", ДокументНеопределенНаСервере);
	ОбщегоНазначенияИСМПТККлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ФормаОбщаяКомандаПерезаполнитьПоПервичномуДокументуИСМПТК",
																"Видимость", ДокументНеопределенНаСервере);
	
КонецПроцедуры

&НаСервере
Процедура ОчиститьДеревоКодовМаркировки() 
	
	ЭлементыДерева = ДеревоМаркированнойПродукции.ПолучитьЭлементы();
	ЭлементыДерева.Очистить();
	
КонецПроцедуры

&НаСервере
Процедура ИзменитьКоличествоКодовМаркировки(КодИд, Количество) 
	
	СтрокаКИ = Объект.Марки.НайтиСтроки(Новый Структура("КодИдентификации", КодИд));
	Если Не СтрокаКИ.Количество() = 0 Тогда 
		СтрокаКИ[0].Количество = Количество;
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьКодыМаркировкиИзФайлаЗавершение(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	
	Если Не ВыбранныеФайлы = Неопределено Тогда
		
		НовыйТекстовыйДокумент = Новый ТекстовыйДокумент;
		
		Для Каждого СтрокаТЧ Из Объект.Марки Цикл
			КодДляЗаписи = ?(ЗначениеЗаполнено(СтрокаТЧ.КодМаркировки), 
							 РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйКлиентСервер.Base64ВШтрихкод(СтрокаТЧ.КодМаркировки), СтрокаТЧ.КодИдентификации);
			НовыйТекстовыйДокумент.ДобавитьСтроку(КодДляЗаписи);
		КонецЦикла;
		
		НовыйТекстовыйДокумент.Записать(ВыбранныеФайлы[0]);
				
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПерезаполнитьДокументПоОснованию(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		ЗаполнитьАктПоДокументуОснованию();
		Модифицированность = Истина;
		УправлениеФормой();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПроверитьНаличиеSSCCВДокументе(КодИдентификации)
	
	ТаблицаМарок = Объект.Марки.Выгрузить();
	Возврат Не РазборИОбработкаКодовМаркировкиИСМПТКСлужебный.ВыполнитьПроверкуТранспортногоКодаПоДокументу(КодИдентификации, ТаблицаМарок); 
	
КонецФункции

&НаКлиенте
Процедура ЗапретитьРедактированиеПолей()
	
	Если Не Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыДокументовИСЦЭДМ.НеОпределен") Тогда
		//Документ отправлен на сервер, запрещаем редактирование данных, уже переданных в ИС МПТ
						
		Элементы.ВыпискаБумажногоАкта.ТолькоПросмотр = Истина;
		Элементы.РегНомерПервичногоДокумента.ТолькоПросмотр = Истина;
		Элементы.ДатаПервичногоДокумента.ТолькоПросмотр = Истина;
		
		Элементы.ВидОперации.ТолькоПросмотр = Истина;
		
		Элементы.ПоставщикИдентификатор.ТолькоПросмотр = Истина;
		Элементы.ПоставщикНаименование.ТолькоПросмотр  = Истина;
		
		Элементы.ПолучательИдентификатор.ТолькоПросмотр = Истина;
		Элементы.ПолучательНаименование.ТолькоПросмотр  = Истина;

	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьДанныеСкладаЦЭДМПоСкладуУчета(Склад)
	
	Возврат РаботаСДокументамиИСМПТКПереопределяемый.ПолучитьДанныеСкладаЦЭДМПоСкладуУчета(Склад, Объект.Организация);
	
КонецФункции

&НаСервере
Функция ПодобратьСоответствующийСкладЦЭДМНаСервере(Склад)
	
	ДанныеСкладаЦЭДМ = РаботаСДокументамиИСМПТКПереопределяемый.ПолучитьДанныеСкладаЦЭДМПоСкладуУчета(Склад, Объект.Организация);
	Возврат ДанныеСкладаЦЭДМ;
	
КонецФункции

&НаСервере
Процедура НайтиПервичныйДокументПоИдентификатору()
	
	ИсходныйДокумент = РаботаСДокументамиИСМПТК.НайтиДокументПоИдентификаторуДляУстановкиСвязи(ОбщегоНазначенияИСМПТКВызовСервера.ИмяДокументаАктВнутреннегоПеремещенияИСЦЭДМ(), Объект.Идентификатор);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСведенияЕД()
	
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперацииИСЦЭДМ.ВнутреннееПеремещениеЕД") Тогда
		СведенияОКонтрагенте = ОбщегоНазначенияИСМПТКПереопределяемый.ПолучитьИнформациюОЮрЛице();
		ДистрибьюторНаименование = СведенияОКонтрагенте.Представление;
		ДистрибьюторАдрес = СведенияОКонтрагенте.ЮридическийАдрес;
		ДистрибьюторБИН   = СведенияОКонтрагенте.ИИНБИН;
	Иначе
		ДистрибьюторНаименование = Неопределено;
		ДистрибьюторАдрес = Неопределено;
		ДистрибьюторБИН   = Неопределено;
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ИзменитьСрокГодностиИПартию(КодИд, СрокГодности, НомерПартии) 
	
	СтрокаКИ = Объект.Марки.НайтиСтроки(Новый Структура("КодИдентификации", КодИд));
	Если Не СтрокаКИ.Количество() = 0 Тогда 
		СтрокаКИ[0].СрокГодности = СрокГодности;
		СтрокаКИ[0].НомерПартии  = НомерПартии;
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовДерева

&НаКлиентеНаСервереБезКонтекста
Функция НайтиПоИдентификатору(ДанныеФормыДерево, Идентификатор)
	
	// Сейчас есть проблема в веб-клиенте: метод НайтиПоИдентификатору, может вернуть ДанныеФормыДерево
	
	Если Идентификатор = -1 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ДанныеФормыЭлементДерева = ДанныеФормыДерево.НайтиПоИдентификатору(Идентификатор);
	
	Если ТипЗнч(ДанныеФормыЭлементДерева) = Тип("ДанныеФормыЭлементДерева") Тогда
		Возврат ДанныеФормыЭлементДерева;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

&НаКлиенте
Процедура ДеревоМаркировкиПередУдалением(Элемент, Отказ)
	
	Если Не Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыДокументовИСЦЭДМ.НеОпределен") Тогда	
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	ОчиститьСообщения();
	
	ТекстОшибки = "";
	
	УдаляемыеКодыМаркировки = Новый Массив();
		
	Для Каждого ИдентификаторСтроки Из Элемент.ВыделенныеСтроки Цикл
		
		УдаляемыйЭлемент 	= НайтиПоИдентификатору(ДеревоМаркированнойПродукции, ИдентификаторСтроки);
		РодительУдаляемогоЭлемента = УдаляемыйЭлемент.ПолучитьРодителя();
		
		Если Не РодительУдаляемогоЭлемента = Неопределено Тогда
			РодительУдаляемогоЭлемента.КоличествоПодобранно = РодительУдаляемогоЭлемента.КоличествоПодобранно -1;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(УдаляемыйЭлемент.КодИдентификации) Тогда
			НайденныеСтроки = Объект.Марки.НайтиСтроки(Новый Структура("КодИдентификации", УдаляемыйЭлемент.КодИдентификации));
			Если НайденныеСтроки.Количество() = 1 Тогда
				Объект.Марки.Удалить(НайденныеСтроки[0]);
			КонецЕсли;
		Иначе 
			НайденныеСтроки = Объект.Товары.НайтиСтроки(Новый Структура("Номенклатура", УдаляемыйЭлемент.Номенклатура));
			Если НайденныеСтроки.Количество() = 1 Тогда
				Объект.Товары.Удалить(НайденныеСтроки[0]);
			КонецЕсли;
			
			ВложенныеЭлементы = УдаляемыйЭлемент.ПолучитьЭлементы();
			Для Каждого ВложенныйЭлемент Из ВложенныеЭлементы Цикл 
				НайденныеСтроки = Объект.Марки.НайтиСтроки(Новый Структура("КодИдентификации", ВложенныйЭлемент.КодИдентификации));
				Если НайденныеСтроки.Количество() = 1 Тогда
					Объект.Марки.Удалить(НайденныеСтроки[0]);
				КонецЕсли;
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ЭтотОбъект.Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоМаркированнойПродукцииКоличествоПодобранноПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ДеревоМаркированнойПродукции.ТекущиеДанные;
	
	ЭлементРодитель = ТекущиеДанные.ПолучитьРодителя();
	Если Не ЭлементРодитель = Неопределено Тогда 
		КоличествоПодобранных = 0;
		ВложенныеЭлементы = ЭлементРодитель.ПолучитьЭлементы();
		Для Каждого Вложенный Из ВложенныеЭлементы Цикл
			КоличествоПодобранных = КоличествоПодобранных + Вложенный.КоличествоПодобранно;
		КонецЦикла;
		ЭлементРодитель.КоличествоПодобранно = КоличествоПодобранных;
	КонецЕсли; 
	
	ИзменитьКоличествоКодовМаркировки(ТекущиеДанные.КодИдентификации, ТекущиеДанные.КоличествоПодобранно);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьКодыМаркировкиИзФайла(Команда)

	ОчиститьСообщения();
	ЗагрузитьКодыМаркировкиИзФайлаПослеВопроса = Неопределено;
	
	Если Элементы.ГруппаСтраницы.ТекущаяСтраница.Имя = "ГруппаМарки" Тогда
		
		Если ИнтеграцияИСМПТКВызовСервера.ИспользоватьАвтоЗапросДопИнформацииЦЭДМ() 
			И Не ЗначениеЗаполнено(Объект.Организация) Тогда
			ТекстСообщения = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияВключенАвтозапросНужнаОрганизацияДляВыполнения("АвтоЗаполнениеДополнительнойИнформацииПоКодамИСЦЭДМ");
			ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
			Возврат;
		КонецЕсли;	
		
		Если Не Объект.Марки.Количество() = 0 Тогда
			ЗагрузитьКодыМаркировкиИзФайлаПослеВопроса = Новый ОписаниеОповещения("ЗагрузитьКодыМаркировкиИзФайлаПослеВопроса",
														 ЭтаФорма, Новый Структура("ИмяСтраницы", "ГруппаМарки"));
  		КонецЕсли;
		
	Иначе
		
		Если Не Объект.РезультатСверки.Количество() = 0 Тогда
			ЗагрузитьКодыМаркировкиИзФайлаПослеВопроса = Новый ОписаниеОповещения("ЗагрузитьКодыМаркировкиИзФайлаПослеВопроса", 
														 ЭтаФорма, Новый Структура("ИмяСтраницы", "ГруппаРезультатСверки"));
  		КонецЕсли;
		
	КонецЕсли;
	
	Если Не ЗагрузитьКодыМаркировкиИзФайлаПослеВопроса = Неопределено Тогда													 
		ТекстВопроса = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияВыполнитьОчисткуДанныхВТаблице();
		ПоказатьВопрос(ЗагрузитьКодыМаркировкиИзФайлаПослеВопроса, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	Иначе
		ИнтеграцияИСМПТККлиент.ЗагрузитьКодыМаркировкиИзФайла(ЭтотОбъект);
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьКодыМаркировкиИзФайлаПослеВопроса(Результат, Параметры) Экспорт

	Если Результат = КодВозвратаДиалога.Да Тогда
		Если Параметры.ИмяСтраницы = "ГруппаМарки" Тогда
			Объект.Марки.Очистить();
		Иначе
			Объект.РезультатСверки.Очистить();
		КонецЕсли;
		СформироватьДеревоКодовМаркировки();		
	КонецЕсли;
	ИнтеграцияИСМПТККлиент.ЗагрузитьКодыМаркировкиИзФайла(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьКодыМаркировкиВФайл(Команда)
	
	ДиалогВыбораФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Сохранение);
	ДиалогВыбораФайла.Заголовок = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияЗаголовокВыборФайла();
	ДиалогВыбораФайла.Фильтр 	= "CSV (Comma-Separated Values)(*.csv)|*.csv";
	ДиалогВыбораФайла.ИндексФильтра = 0;
	ДиалогВыбораФайла.ПредварительныйПросмотр = Ложь;
	ДиалогВыбораФайла.ПроверятьСуществованиеФайла = Истина;
	ДиалогВыбораФайла.МножественныйВыбор = Ложь;
	
	Оповещение = Новый ОписаниеОповещения("ВыгрузитьКодыМаркировкиИзФайлаЗавершение", ЭтотОбъект);
	ДиалогВыбораФайла.Показать(Оповещение);
		
КонецПроцедуры

&НаКлиенте
Процедура ДеревоМаркированнойПродукцииПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Отказ = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура СвернутьВсеДерево(Команда)
	
	СвернутьРазвернутьДеревоКодов(ДеревоМаркированнойПродукции.ПолучитьЭлементы(), Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура РазвернутьВсеДерево(Команда)
	
	СвернутьРазвернутьДеревоКодов(ДеревоМаркированнойПродукции.ПолучитьЭлементы(), Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура СвернутьРазвернутьДеревоКодов(ДервероЭлементов, Развернуть)
	
	Для Каждого Элемент Из ДервероЭлементов Цикл
		
		ВложенныеЭлементы = Элемент.ПолучитьЭлементы();
		
        Если ВложенныеЭлементы.Количество() > 0 Тогда
			
			СвернутьРазвернутьДеревоКодов(ВложенныеЭлементы, Развернуть);

            Если Развернуть = Истина Тогда
                Элементы.ДеревоМаркированнойПродукции.Развернуть(Элемент.ПолучитьИдентификатор());
            Иначе
                Элементы.ДеревоМаркированнойПродукции.Свернуть(Элемент.ПолучитьИдентификатор());
			КонецЕсли;
			
        КонецЕсли;
    КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьДанныеВExcel(Команда)
	
	ДиалогВыбораФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Сохранение);
	ДиалогВыбораФайла.Заголовок = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияЗаголовокВыборФайла();
	ДиалогВыбораФайла.Фильтр 	= "Все поддерживаемые форматы файлов(*.xls;*.xlsx;)|*.xls;*.xlsx;|Книга Excel 97 (*.xls)|*.xls|Книга Excel 2007 (*.xlsx)|*.xlsx";
	ДиалогВыбораФайла.ИндексФильтра = 0;
	ДиалогВыбораФайла.ПредварительныйПросмотр = Ложь;
	ДиалогВыбораФайла.ПроверятьСуществованиеФайла = Истина;
	ДиалогВыбораФайла.МножественныйВыбор = Ложь;
	
	Оповещение = Новый ОписаниеОповещения("СоздатьФайлXLS", ЭтотОбъект);
	ДиалогВыбораФайла.Показать(Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьФайлXLS(ВыбранныеФайлы, ДополнительныеПараметрым) Экспорт
	
	Если Не ВыбранныеФайлы = Неопределено Тогда
		
		ТабличныйДокумент = Новый ТабличныйДокумент;
		
		Итератор = 1;
		Для Каждого СтрокаТЧ Из Объект.Марки Цикл
			
			КодДляЗаписи = РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйКлиентСервер.Base64ВШтрихкод(СтрокаТЧ.КодМаркировки);
			ТабличныйДокумент.Область("R" + Формат(Итератор,"ЧГ=0") + "C1").Текст = КодДляЗаписи;
			Итератор = Итератор + 1;
		КонецЦикла;
		
		ТабличныйДокумент.Записать(ВыбранныеФайлы[0], ТипФайлаТабличногоДокумента.XLS97);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьПроцедуруФоновоВыполнено(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияОперацияОтменена());
		Возврат;
	ИначеЕсли Результат.Статус = "Ошибка" Тогда
		ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(Результат.ПодробноеПредставлениеОшибки);
	ИначеЕсли Результат.Статус = "Выполнено" Тогда
		
		// обрабатываем результат
		Модифицированность = Истина;
		
		Если Элементы.ГруппаСтраницы.ТекущаяСтраница.Имя = "ГруппаМарки" Тогда
			ИмяТЧЗаполнения = "Марки";
		Иначе
			ИмяТЧЗаполнения = "РезультатСверки";
		КонецЕсли; 
		
		Если ОбработатьРезультатЗагрузкиКодов(Результат.АдресРезультата, ИмяТЧЗаполнения) Тогда 
			ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияОперацияЗагрузкиКМЗавершена());
			
			Если ИнтеграцияИСМПТКВызовСервера.ИспользоватьАвтоЗапросДопИнформацииЦЭДМ() 
				И ИмяТЧЗаполнения = "Марки" Тогда 
				СоответствиеСтатусаПроверки = Новый Соответствие;
				ПолучитьДополнительныеСведенияПоКодамВИСЦЭДМНаСервере(СоответствиеСтатусаПроверки);
			КонецЕсли;
			
			Если ИмяТЧЗаполнения = "Марки" Тогда
				СформироватьДеревоКодовМаркировки();
			КонецЕсли;
			
			Если ИнтеграцияИСМПТКВызовСервера.ИспользоватьАвтоЗапросДопИнформацииЦЭДМ()
				И ИмяТЧЗаполнения = "Марки" Тогда 
				//Должно вызываться после формирования дерева
				УстановитьСтатусПроверкиВДеревеКМ(СоответствиеСтатусаПроверки);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	УправлениеФормой();
	
КонецПроцедуры

&НаСервере
Функция ОбработатьРезультатЗагрузкиКодов(АдресРезультата, ИмяТЧ = "Марки")
	
	РезультатЗадания = ПолучитьИзВременногоХранилища(АдресРезультата);
	
	Если РезультатЗадания.Свойство("МассивОшибок") И Не РезультатЗадания.МассивОшибок.Количество() = 0 Тогда
		Для Каждого ТекстОшибки Из РезультатЗадания.МассивОшибок Цикл 
			ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстОшибки);
		КонецЦикла;
	КонецЕсли;
	
	Если РезультатЗадания.Успешно И НЕ РезультатЗадания.ТаблицаПолученныхКодов.Количество() = 0 Тогда
		Для Каждого Строка Из РезультатЗадания.ТаблицаПолученныхКодов Цикл
			
			Если Не ЗначениеЗаполнено(Строка.Номенклатура)
				И Не Строка.ВидУпаковки = ПредопределенноеЗначение("Перечисление.ВидыУпаковокИСМПТК.Логистическая") Тогда
				// Если не смогли определить номенклатуру - КМ добавляем, но обращаем внимание пользователя на проблему с ним.
				ТекстСообщения = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияОбработкаСпискаКМНеНайденаНоменклатура();
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ШтрихкодЕАН%", Строка.EAN);
				ТекстСообщения = ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(ТекстСообщения, Строка.КодИдентификации);
				ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
				
				ТекстСообщенияВЖурнал = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияОбработкаСпискаКМНеНайденаНоменклатураВЖурнал();
				ТекстСообщенияВЖурнал = СтрЗаменить(ТекстСообщенияВЖурнал, "%СсылкаДокументМаркировки%", ?(Не Объект.Ссылка.Пустая(), Объект.Ссылка, ""));
				ТекстСообщенияВЖурнал = СтрЗаменить(ТекстСообщенияВЖурнал, "%ШтрихкодЕАН%", Строка.EAN);
				ИмяСобытия = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияЗаголовокЗагрузкаКМВДокументахСервиса();
				ОбщегоНазначенияИСМПТКВызовСервера.СоздатьЗаписьЖурналаРегистрации(ИмяСобытия, "Предупреждение",,, ТекстСообщенияВЖурнал);
			КонецЕсли;
					
			Если ЗначениеЗаполнено(Строка.Номенклатура)
				И Не ЗначениеЗаполнено(Строка.ВидПродукции) Тогда
				
				//Если товар определили, но не смогли понять товарную группу - добавляем, но предупреждаем.
				ТекстСообщения = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияОбработкаСпискаКМНеОпределенВидНоменклатуры();
				ТекстСообщения = ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(ТекстСообщения, Строка.КодИдентификации, Строка.Номенклатура);
				ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
				
				ТекстСообщенияВЖурнал = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияОбработкаСпискаКМНеОпределенВидНоменклатурыВЖурнал();
				ТекстСообщенияВЖурнал = СтрЗаменить(ТекстСообщенияВЖурнал, "%СсылкаДокументМаркировки%", ?(Не Объект.Ссылка.Пустая(), Объект.Ссылка, ""));
				ТекстСообщенияВЖурнал = СтрЗаменить(ТекстСообщенияВЖурнал, "%ШтрихкодЕАН%", 	   Строка.EAN);
				ТекстСообщенияВЖурнал = СтрЗаменить(ТекстСообщенияВЖурнал, "%НаименованиеТовара%", Строка.Номенклатура);
				ИмяСобытия = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияЗаголовокЗагрузкаКМВДокументахСервиса();
				ОбщегоНазначенияИСМПТКВызовСервера.СоздатьЗаписьЖурналаРегистрации(ИмяСобытия, "Предупреждение",,, ТекстСообщенияВЖурнал);
				
			ИначеЕсли ЗначениеЗаполнено(Строка.Номенклатура)
				И Не Строка.ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИСМПТК.ЛекарственныеПрепараты") Тогда
				
				//Если товар определили, но он не подходит этому документу - сообщаем и код не добавляем.
				ТекстСообщения = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияОбработкаСпискаКМНеСоответствуетВидуПродукцииДокумента(); 
				ТекстСообщения = ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(
								 ТекстСообщения,
								 Строка.КодИдентификации,
								 Строка.Номенклатура,
								 Строка.ВидПродукции);
				ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
				Продолжить;
				
			КонецЕсли;
					
			НайденныеСтроки = Объект[ИмяТЧ].НайтиСтроки(Новый Структура("КодИдентификации", Строка.КодИдентификации));
			Если НайденныеСтроки.Количество() = 0 Тогда
				ЗаполнитьЗначенияСвойств(Объект[ИмяТЧ].Добавить(), Строка);
			КонецЕсли;
		КонецЦикла;
		Возврат Истина;
	Иначе 
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура ДеревоМаркированнойПродукцииСрокГодностиПриИзменении(Элемент)

	ТекущиеДанные = Элементы.ДеревоМаркированнойПродукции.ТекущиеДанные;
	ИзменитьСрокГодностиИПартию(ТекущиеДанные.КодИдентификации, ТекущиеДанные.СрокГодности, ТекущиеДанные.НомерПартии);
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоМаркированнойПродукцииНомерПартииПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ДеревоМаркированнойПродукции.ТекущиеДанные;
	ИзменитьСрокГодностиИПартию(ТекущиеДанные.КодИдентификации, ТекущиеДанные.СрокГодности, ТекущиеДанные.НомерПартии);
	
КонецПроцедуры

#КонецОбласти 

#Область Штрихкодирование

&НаКлиенте
Процедура ОбработатьКодМаркировки(ИсходныеДанные, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если ИсходныеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ИсходныеДанные.Свойство("ФормаПоискаНоменклатуры_Успешно") Тогда
		
		СтруктураКодовМаркировки = ИсходныеДанные.СтруктураКодовМаркировки;
		
		//Обработчик после того, как была вызвана форма проверки и подбора номенклатуры (для регистрации ШК)
		Если ИсходныеДанные.ФормаПоискаНоменклатуры_Успешно Тогда
			ДобавитьНовыйКод(СтруктураКодовМаркировки);
			ТекстУведомления = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияЗарегистрированНовыйШтрихкод(); 
			ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстУведомления);
		Иначе
			ТекстОшибки = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияОтказДобавленияКодаНеОпределенаНоменклатура();
			ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстОшибки);
			Возврат;
		КонецЕсли;
		
	Иначе
		
		//Для передачи на сервер КМ, в составе которого есть символы GS (29), требуется дополнительное кодирование
		РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйКлиентСервер.ЗакодироватьШтрихкодДанныхBase64(ИсходныеДанные);
		ИсходныеДанные.Вставить("ФорматBase64", Истина);	
		СтруктураКодовМаркировки = ИнтеграцияИСМПТКВызовСервера.ПолучитьКодыМаркировки(ИсходныеДанные);   
		
		//Если удалось разобрать код, вернется структура. Если нет - текст сообщения об ошибке.
		Если ТипЗнч(СтруктураКодовМаркировки) = Тип("Строка") Тогда
			ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(СтруктураКодовМаркировки);
			Возврат;
		КонецЕсли;
		
		ОтказатьВДобавлении = Ложь;
		Если Не СтруктураКодовМаркировки = Неопределено
			И Не НайтиПоКодуИдентификации(СтруктураКодовМаркировки.КодИдентификации) = Неопределено Тогда 
			
			ОтказатьВДобавлении = Истина;
			
		ИначеЕсли ОбщегоНазначенияИСМПТК.ПроверитьЗначениеКонстанты("ПоддержкаДвойногоФорматаТранспортныхКодовИСМПТК")
			И СтруктураКодовМаркировки.ВидУпаковки = ПредопределенноеЗначение("Перечисление.ВидыУпаковокИСМПТК.Логистическая") Тогда
			
			//В этом случае в таблице документа может находиться уже преобразованный SSCC, соответствующий обрабатываемому в данный момент штрихкоду,
			//т.е. нужна специфическая проверка на дублирование данных кода
			ОтказатьВДобавлении = ПроверитьНаличиеSSCCВДокументе(СтруктураКодовМаркировки.КодИдентификации);
			
		КонецЕсли;
		
		Если ОтказатьВДобавлении Тогда
			
			ПараметрыОткрытия = СобытияФормИСМПТККлиент.ПараметрыОткрытияФормыНевозможностиДобавленияОтсканированного();
			ПараметрыОткрытия.Штрихкод    = ИсходныеДанные.Штрихкод;
			ПараметрыОткрытия.ТекстОшибки = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияКодМаркировкиУказанВДокументе();
			ОткрытьФорму(ОбщегоНазначенияИСМПТККлиент.ПолучитьИмяФормыИнформацияОНевозможностиДобавленияКМ(), ПараметрыОткрытия, ЭтаФорма);
			
			Возврат;
			
		КонецЕсли;
		
		Если Не СтруктураКодовМаркировки = Неопределено Тогда
			Если Не СтруктураКодовМаркировки.ВидУпаковки = ПредопределенноеЗначение("Перечисление.ВидыУпаковокИСМПТК.Потребительская")
				И Не ОбщегоНазначенияИСМПТКВызовСервера.ПроверитьЗначениеКонстанты("АвтоЗаполнениеДополнительнойИнформацииПоКодамИСЦЭДМ") Тогда 
				//Даем возможность указать данные вручную
				ПараметрыОткрытияФормы = Новый Структура("Номенклатура, СтруктураКодовМаркировки, Организация, ИнФСистема", 
														ОбщегоНазначенияИСМПТКПереопределяемый.ПолучитьПустуюСсылкуНоменклатура(), 
														СтруктураКодовМаркировки, 
														Объект.Организация, 
														"ИСЦЭДМ");
				ОткрытьФорму("ОбщаяФорма.ФормаУточненияДанныхИСМПТК", ПараметрыОткрытияФормы, ЭтотОбъект,,,, Новый ОписаниеОповещения("ЗавершитьДобавлениеКодаМаркировки", ЭтотОбъект), РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
			Иначе
				//Для потребительских заполняем напрямую
				ДобавитьНовыйКод(СтруктураКодовМаркировки);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция НайтиПоКодуИдентификации(КодИдентификации)
	
	СтруктураПоиска = Новый Структура("КодИдентификации", КодИдентификации);
	
	НайденныеСтроки = Объект.Марки.НайтиСтроки(СтруктураПоиска);
	
	Если НайденныеСтроки.Количество() > 0 Тогда
		Возврат НайденныеСтроки;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура ДобавитьНовыйКод(СтруктураКодовМаркировки)
	
	СообщенияОбОшибках = Новый Соответствие();
	ДанныеНоменклатуры = ПолучитьНоменклатуруПоШтрихкоду(СтруктураКодовМаркировки.EAN, СообщенияОбОшибках);
	Если ТипЗнч(ДанныеНоменклатуры) = Тип("Структура") Тогда
		Номенклатура = ДанныеНоменклатуры.Номенклатура;
	Иначе
		Номенклатура = ДанныеНоменклатуры;
	КонецЕсли;
	Если Не СообщенияОбОшибках.Количество() = 0 Тогда
		Для Каждого СообщениеОшибка Из СообщенияОбОшибках Цикл 
			ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(СообщениеОшибка.Значение);
		КонецЦикла;
	КонецЕсли;
	
	ВидПродукцииКода = ПолучитьВидПродукцииПоНоменклатуре(Номенклатура);
	Если Не СтруктураКодовМаркировки.ВидУпаковки = ПредопределенноеЗначение("Перечисление.ВидыУпаковокИСМПТК.Логистическая") Тогда
		Если ЗначениеЗаполнено(ВидПродукцииКода)
			И Не ВидПродукцииКода = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИСМПТК.ЛекарственныеПрепараты") Тогда
					
			ТекстСообщения = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияКМПринадлежитНоменклатуреСОсобенностямиУчетаСПараметрами() + " "
						   + РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияДокументНеПредназначенДляРаботыСЭтойТГ();
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%НаименованиеПодсистемы%", РаботаСТекстамиИСМПТККлиентСервер.НаименованиеИСЦЭДМ());
			ТекстСообщения = ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(ТекстСообщения, Номенклатура, ВидПродукцииКода); 
			ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
			Возврат;
			
		ИначеЕсли Не ЗначениеЗаполнено(Номенклатура) Тогда
			
			ТекстСообщения = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияДобавитьНовыйКМНеНайденаНоменклатура();
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ШтрихкодЕАН%", СтруктураКодовМаркировки.EAN);
			ТекстСообщения = ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(ТекстСообщения, СтруктураКодовМаркировки.КодИдентификации);
			ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
			
			ТекстСообщенияВЖурнал = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияДобавитьНовыйКМНеНайденаНоменклатураВЖурнал();
			ТекстСообщенияВЖурнал = СтрЗаменить(ТекстСообщенияВЖурнал, "%СсылкаДокументМаркировки%", ?(Не Объект.Ссылка.Пустая(), Объект.Ссылка, ""));
			ТекстСообщенияВЖурнал = СтрЗаменить(ТекстСообщенияВЖурнал, "%ШтрихкодЕАН%", СтруктураКодовМаркировки.EAN);
			ИмяСобытия = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияЗаголовокЗагрузкаКМВДокументахСервиса();
			ОбщегоНазначенияИСМПТКВызовСервера.СоздатьЗаписьЖурналаРегистрации(ИмяСобытия, "Предупреждение",,, ТекстСообщенияВЖурнал);
			
		ИначеЕсли Не ЗначениеЗаполнено(ВидПродукцииКода) Тогда
						
			ТекстСообщения = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияДобавитьНовыйКМНеОпределенВидНоменклатуры();
			ТекстСообщения = ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(ТекстСообщения, СтруктураКодовМаркировки.КодИдентификации, Номенклатура);
			ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
			
			ТекстСообщенияВЖурнал = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияДобавитьНовыйКМНеОпределенВидНоменклатурыВЖурнал();
			ТекстСообщенияВЖурнал = СтрЗаменить(ТекстСообщенияВЖурнал, "%СсылкаДокументМаркировки%", ?(Не Объект.Ссылка.Пустая(), Объект.Ссылка, ""));
			ТекстСообщенияВЖурнал = СтрЗаменить(ТекстСообщенияВЖурнал, "%ШтрихкодЕАН%", 	   СтруктураКодовМаркировки.EAN);
			ТекстСообщенияВЖурнал = СтрЗаменить(ТекстСообщенияВЖурнал, "%НаименованиеТовара%", Номенклатура);
			ИмяСобытия = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияЗаголовокЗагрузкаКМВДокументахСервиса();
			ОбщегоНазначенияИСМПТКВызовСервера.СоздатьЗаписьЖурналаРегистрации(ИмяСобытия, "Предупреждение",,, ТекстСообщенияВЖурнал);
					
		КонецЕсли;
	КонецЕсли;
	
	Если СтруктураКодовМаркировки.ВидУпаковки = ПредопределенноеЗначение("Перечисление.ВидыУпаковокИСМПТК.Логистическая") 
		И ОбщегоНазначенияИСМПТКВызовСервера.ПроверитьЗначениеКонстанты("АвтоЗаполнениеДополнительнойИнформацииПоКодамИСЦЭДМ") Тогда
		
		СтруктураКодовМаркировки.Вставить("Номенклатура", Номенклатура);
		ЗавершитьДобавлениеКодаМаркировки(СтруктураКодовМаркировки);
		
	Иначе
		
		Если Не ЗначениеЗаполнено(Номенклатура) Тогда 
			
			ДанныеДляСопоставленияНоменклатуры = Новый Структура(); //передается в параметрах открытия формы подбора
			Операция = "СопоставлениеНоменклатуры";
			
			ИсходныеДанные = Новый Структура("Количество, Штрихкод", 1, СтруктураКодовМаркировки.КодИдентификации);
			ДанныеДляСопоставленияНоменклатуры.Вставить("ИсходныеДанные", ИсходныеДанные); //содержит структуру "Количество, Штрихкод", где штрихкод это отсканированный КМ
			
			ШтрихкодыКСопоставлению = Новый Массив();
			ДанныеШтрихкода = Новый Структура("Количество, Штрихкод", 1, СтруктураКодовМаркировки.EAN);
			ШтрихкодыКСопоставлению.Добавить(ДанныеШтрихкода);
			ДанныеДляСопоставленияНоменклатуры.Вставить("ШтрихкодыКСопоставлению", ШтрихкодыКСопоставлению); //содержит массив, где каждый элемент - структура "Количество, Штрихкод", где штрихкод - это EAN из КМ, который необходимо проверить по регистру Штрихкодов
			
			ПараметрыОткрытияФормы = Новый Структура("ДанныеДляСопоставленияНоменклатуры, Операция, НеизвестныеШтрихкоды,	 СтруктураКодовМаркировки, Направление", 
			ДанныеДляСопоставленияНоменклатуры, Операция, ШтрихкодыКСопоставлению, СтруктураКодовМаркировки, ПредопределенноеЗначение("Перечисление.НаправленияДокументовИСМПТК.Исходящий"));
			ОбработкаОповещенияПодборНоменклатуры = Новый ОписаниеОповещения("ОбработатьКодМаркировки", ЭтотОбъект);
			РежимОткрытия = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
			ОткрытьФорму("Обработка.РозничноеВыбытиеМаркированнойПродукцииИСМПТК.Форма.ПоискНоменклатурыПоШтрихкоду", ПараметрыОткрытияФормы, ЭтотОбъект,,,, ОбработкаОповещенияПодборНоменклатуры, РежимОткрытия);
			
		ИначеЕсли Объект.Товары.НайтиСтроки(Новый Структура("Номенклатура", Номенклатура)).Количество() = 0
			И Объект.Марки.НайтиСтроки(Новый Структура("Номенклатура", Номенклатура)).Количество() = 0
			И ЗначениеЗаполнено(Объект.ДокументОснование) Тогда
				
			ТекстВопроса = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияЭтогоТовараНетВДокументеОснования()
						 + Символы.ПС
						 + РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияВопросДобавитьКМВДокумент();
			ТекстВопроса = ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(ТекстВопроса, Номенклатура);
			
			ИзменитьДокументОснованиеЗавершение = Новый ОписаниеОповещения("ДобавитьНовуюНоменклатуру", ЭтаФорма, Новый Структура("СтруктураКодовМаркировки, Номенклатура", СтруктураКодовМаркировки, Номенклатура));
			ПоказатьВопрос(ИзменитьДокументОснованиеЗавершение, ТекстВопроса, РежимДиалогаВопрос.ОКОтмена);
			Возврат;
			
		Иначе
			
			СтруктураКодовМаркировки.Вставить("Номенклатура", Номенклатура);
			ЗавершитьДобавлениеКодаМаркировки(СтруктураКодовМаркировки);
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершениеПолучитьДанныеПоГрупповомуКодуМаркировки(РезультатВыполнения, Параметры) Экспорт
	
	ИнтеграцияИСМПТККлиент.ЗавершениеПолучитьДанныеПоГрупповомуКодуМаркировки_Общая(ЭтаФорма, РезультатВыполнения, Параметры);
		
КонецПроцедуры

&НаСервере
функция ПолучитьНоменклатуруПоШтрихкоду(EAN, СообщенияОбОшибках = Неопределено)
	
	Если СообщенияОбОшибках = Неопределено Тогда
		СообщенияОбОшибках = Новый Соответствие();
	КонецЕсли;
	
	Возврат ОбщегоНазначенияИСМПТКПереопределяемый.ПолучитьДанныеНоменклатурыИзРегистраШтрихкодовПоШтрихкоду(, EAN,,СообщенияОбОшибках);
	
КонецФункции

&НаСервере
Функция ПолучитьВидПродукцииПоНоменклатуре(Номенклатура)
	
	Возврат ОбщегоНазначенияИСМПТКПереопределяемый.ПолучитьВидПродукцииПоНоменклатуре(Номенклатура);
	
КонецФункции

&НаКлиенте
Процедура ЗавершитьДобавлениеКодаМаркировки(СтруктураКодовМаркировки = Неопределено, ПараметрКоманды = Неопределено) Экспорт

	СоответствиеСтатусаПроверки = Новый Соответствие;
	Если Не СтруктураКодовМаркировки = Неопределено Тогда 
		
		Если ЗначениеЗаполнено(СтруктураКодовМаркировки.Номенклатура) 
			И Не ЗначениеЗаполнено(СтруктураКодовМаркировки.ВидПродукции) Тогда
			
			ВидПродукции = РозничноеВыбытиеИСМПТККлиент.ПолучитьВидПродукцииПоНоменклатуре(СтруктураКодовМаркировки.Номенклатура);
			СтруктураКодовМаркировки.ВидПродукции = ВидПродукции;
		КонецЕсли;
		
		НоваяСтрока = Объект.Марки.Добавить();
		НоваяСтрока.КодМаркировки 	 = СтруктураКодовМаркировки.КодМаркировки;
		НоваяСтрока.КодИдентификации = СтруктураКодовМаркировки.КодИдентификации;
		НоваяСтрока.GTIN 			 = СтруктураКодовМаркировки.GTIN;
		Если СтруктураКодовМаркировки.ВидУпаковки = ПредопределенноеЗначение("Перечисление.ВидыУпаковокИСМПТК.Групповая") Тогда 
			НоваяСтрока.GTINВерхнегоУровня = СтруктураКодовМаркировки.GTINВерхнегоУровня;
		КонецЕсли;
		НоваяСтрока.EAN 		 = СтруктураКодовМаркировки.EAN;
		НоваяСтрока.Номенклатура = СтруктураКодовМаркировки.Номенклатура;
		НоваяСтрока.Количество 	 = СтруктураКодовМаркировки.Количество;
		НоваяСтрока.ВидУпаковки	 = СтруктураКодовМаркировки.ВидУпаковки;
		НоваяСтрока.ВидПродукции = СтруктураКодовМаркировки.ВидПродукции;
		
		//Проверяем состояние кода маркировки и выводим предупреждение, если с кодом что-то не так,
		//а также дозаполняем дополнительные сведения по серверу
		Если ИнтеграцияИСМПТКВызовСервера.ИспользоватьАвтоЗапросДопИнформацииЦЭДМ() Тогда
			ПолучитьДополнительныеСведенияПоКодамВИСЦЭДМНаСервере(СоответствиеСтатусаПроверки, СтруктураКодовМаркировки.КодИдентификации, СтруктураКодовМаркировки);
			Если Не СтруктураКодовМаркировки.Свойство("СрокГодности") Тогда
				СтруктураКодовМаркировки.Вставить("СрокГодности", НоваяСтрока.СрокГодности);
			Иначе
				СтруктураКодовМаркировки.СрокГодности = НоваяСтрока.СрокГодности;
			КонецЕсли;
			Если Не СтруктураКодовМаркировки.Свойство("НомерПартии") Тогда
				СтруктураКодовМаркировки.Вставить("НомерПартии", НоваяСтрока.НомерПартии);
			Иначе
				СтруктураКодовМаркировки.НомерПартии = НоваяСтрока.НомерПартии;
			КонецЕсли;
			СтруктураКодовМаркировки.Количество = НоваяСтрока.Количество;
			Если НоваяСтрока.ВидУпаковки = ПредопределенноеЗначение("Перечисление.ВидыУпаковокИСМПТК.Логистическая") Тогда 
				//Для определения номенклатуры упаковки используем данные вложенных позиций
				EAN = РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйКлиентСервер.EANПоGTIN(НоваяСтрока.GTIN);
				ДанныеНоменклатуры = ПолучитьНоменклатуруПоШтрихкоду(EAN);
				Номенклатура = ?(ТипЗнч(ДанныеНоменклатуры) = Тип("Структура"), ДанныеНоменклатуры.Номенклатура, ДанныеНоменклатуры);
				ВидПродукции = ПолучитьВидПродукцииПоНоменклатуре(Номенклатура);
				НоваяСтрока.EAN = EAN;
				НоваяСтрока.Номенклатура = Номенклатура;
				НоваяСтрока.ВидПродукции = ВидПродукции;
				СтруктураКодовМаркировки.EAN = EAN;
				СтруктураКодовМаркировки.Номенклатура = Номенклатура;
				СтруктураКодовМаркировки.GTIN = НоваяСтрока.GTIN;
			КонецЕсли;
		КонецЕсли;
		
		ДобавитьКодМаркировкиВДерево(СтруктураКодовМаркировки.Номенклатура, СтруктураКодовМаркировки);
		Для Каждого Строка ИЗ ДеревоМаркированнойПродукции.ПолучитьЭлементы() Цикл
			Элементы.ДеревоМаркированнойПродукции.Развернуть(Строка.ПолучитьИдентификатор(), Истина);
		КонецЦикла;
		
		Если ИнтеграцияИСМПТКВызовСервера.ИспользоватьАвтоЗапросДопИнформацииЦЭДМ() Тогда
			//Должно выполняться после заполнения ТЧ Марки и дерева марк.продукции
			УстановитьСтатусПроверкиВДеревеКМ(СоответствиеСтатусаПроверки);
		КонецЕсли;

		Модифицированность = Истина;
				
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьКодМаркировкиВДерево(Номенклатура, СтруктураКодовМаркировки) Экспорт
	
	Если Номенклатура = Неопределено Тогда
		//Нужен ссылочный тип, чтобы дерево построилось корректно
		Номенклатура = ОбщегоНазначенияИСМПТКПереопределяемый.ПолучитьПустуюСсылкуНоменклатура();
	КонецЕсли;
	
	НайденнаяСтрока = НайтиЗначениеЭлементаДереваПоНоменклатуре(Номенклатура, ДеревоМаркированнойПродукции);
	
	Если Не НайденнаяСтрока = Неопределено Тогда
		
		Если СтруктураКодовМаркировки.ВидУпаковки = Перечисления.ВидыУпаковокИСМПТК.Потребительская Тогда 
			КоличествоПодобранно = 1;
		Иначе 
			КоличествоПодобранно = СтруктураКодовМаркировки.Количество;
		КонецЕсли;
		
		НоваяСтрокаКод = НайденнаяСтрока.ПолучитьЭлементы().Добавить();
		
		//Поддержка двойного формата кодов SSCC
		ВыполнялосьПреобразованиеКМ = ?(Параметры.Свойство("ВыполнялосьПреобразованиеКМ"), Параметры.ВыполнялосьПреобразованиеКМ, Ложь);
		КодИдентификации 			= ?(Параметры.Свойство("КодИдентификации"), Параметры.КодИдентификации, СтруктураКодовМаркировки.КодИдентификации); 
		Если ВыполнялосьПреобразованиеКМ Тогда
			НоваяСтрокаКод.КодМаркировки    = РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйКлиентСервер.ШтрихкодВBase64(КодИдентификации);
			НоваяСтрокаКод.КодИдентификации = КодИдентификации;
		Иначе
			НоваяСтрокаКод.КодМаркировки    = СтруктураКодовМаркировки.КодМаркировки;
			НоваяСтрокаКод.КодИдентификации = СтруктураКодовМаркировки.КодИдентификации;
		КонецЕсли;
		
		НоваяСтрокаКод.GTIN = СтруктураКодовМаркировки.GTIN;
		Если СтруктураКодовМаркировки.ВидУпаковки = ПредопределенноеЗначение("Перечисление.ВидыУпаковокИСМПТК.Групповая") Тогда 
			НоваяСтрокаКод.GTINВерхнегоУровня = СтруктураКодовМаркировки.GTINВерхнегоУровня;
		КонецЕсли;
		
		НоваяСтрокаКод.СрокГодности = ?(Не СтруктураКодовМаркировки.Свойство("СрокГодности"), "", СтруктураКодовМаркировки.СрокГодности);
		НоваяСтрокаКод.НомерПартии  = ?(Не СтруктураКодовМаркировки.Свойство("НомерПартии"),  "", СтруктураКодовМаркировки.НомерПартии);
		
		НоваяСтрокаКод.Количество = 0;
		НоваяСтрокаКод.КоличествоПодобранно	 = КоличествоПодобранно;
		
		НайденнаяСтрока.КоличествоПодобранно = НайденнаяСтрока.КоличествоПодобранно + НоваяСтрокаКод.КоличествоПодобранно;
		НоваяСтрокаКод.ВидУпаковки 	= СтруктураКодовМаркировки.ВидУпаковки;
		НоваяСтрокаКод.ВидПродукции = СтруктураКодовМаркировки.ВидПродукции;

	Иначе
		
		ЭлементыДерева = ДеревоМаркированнойПродукции.ПолучитьЭлементы();
		
		НоваяСтрокаНоменклатура = ЭлементыДерева.Добавить();
		НоваяСтрокаНоменклатура.Номенклатура = Номенклатура;
		
		Если ЗначениеЗаполнено(СтруктураКодовМаркировки.КодИдентификации) Тогда 
			
			НоваяСтрокаКод = НоваяСтрокаНоменклатура.ПолучитьЭлементы().Добавить();
			НоваяСтрокаКод.КодМаркировки 	  = СтруктураКодовМаркировки.КодМаркировки;
			НоваяСтрокаКод.КодИдентификации   = СтруктураКодовМаркировки.КодИдентификации;
			НоваяСтрокаКод.GTIN 			  = СтруктураКодовМаркировки.GTIN;
			Если СтруктураКодовМаркировки.ВидУпаковки = ПредопределенноеЗначение("Перечисление.ВидыУпаковокИСМПТК.Групповая") Тогда 
				НоваяСтрокаКод.GTINВерхнегоУровня = СтруктураКодовМаркировки.GTINВерхнегоУровня;
			КонецЕсли;
					
			НоваяСтрокаКод.СрокГодности = ?(Не СтруктураКодовМаркировки.Свойство("СрокГодности"), "", СтруктураКодовМаркировки.СрокГодности);
			НоваяСтрокаКод.НомерПартии  = ?(Не СтруктураКодовМаркировки.Свойство("НомерПартии"),  "", СтруктураКодовМаркировки.НомерПартии);
			
			Если Не ЗначениеЗаполнено(СтруктураКодовМаркировки.Количество) Тогда 
				НоваяСтрокаКод.КоличествоПодобранно	= ?(СтруктураКодовМаркировки.ВидУпаковки = Перечисления.ВидыУпаковокИСМПТК.Потребительская, 1, 0);
			Иначе 
				НоваяСтрокаКод.КоличествоПодобранно	= СтруктураКодовМаркировки.Количество;
			КонецЕсли;
			
			НоваяСтрокаНоменклатура.КоличествоПодобранно = НоваяСтрокаКод.КоличествоПодобранно;
			
			НоваяСтрокаКод.ВидУпаковки  = СтруктураКодовМаркировки.ВидУпаковки;
			НоваяСтрокаКод.ВидПродукции = СтруктураКодовМаркировки.ВидПродукции;
						
		КонецЕсли;
		
		НоваяСтрокаНоменклатура.ВидУпаковки = Перечисления.ВидыУпаковокИСМПТК.ПустаяСсылка();
		
		Если СтруктураКодовМаркировки.Свойство("КоличествоИсточник") Тогда 
			НоваяСтрокаНоменклатура.Количество	= СтруктураКодовМаркировки.КоличествоИсточник;
		Иначе 
			НоваяСтрокаКод.Количество = 0;
		КонецЕсли;
		
		ЕдиницаИзмерения = ИнтеграцияИСМПТКПереопределяемый.ПолучитьБазовуюЕдиницуИзмерения(Номенклатура);
		НоваяСтрокаНоменклатура.ЕдиницаИзмерения = ЕдиницаИзмерения;
		
		ИнтерфейсИСМПТККлиентСервер.УстановитьИндексКартинкиТипаУпаковки(НоваяСтрокаНоменклатура);
		
	КонецЕсли;

	Если Не НоваяСтрокаКод = Неопределено Тогда
		ИнтерфейсИСМПТККлиентСервер.УстановитьИндексКартинкиТипаУпаковки(НоваяСтрокаКод);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция НайтиЗначениеЭлементаДереваПоНоменклатуре(Номенклатура, Дерево)
	
	НайденныйЭлемент = Неопределено;
	
	ЭлементыВетвиДерева = Дерево.ПолучитьЭлементы();
	Для Каждого ЭлементДерева Из ЭлементыВетвиДерева Цикл
		Если ЭлементДерева.Номенклатура = Номенклатура Тогда
			НайденныйЭлемент = ЭлементДерева;
		КонецЕсли;
	КонецЦикла;
	
	Возврат НайденныйЭлемент;
	
КонецФункции

&НаСервере
Функция ПолучитьСтруктуруКодовМаркировки()
	
	СтруктураКодовМаркировки = Новый Структура;
	СтруктураКодовМаркировки.Вставить("КодМаркировки",    "");
	СтруктураКодовМаркировки.Вставить("КодИдентификации", "");
	СтруктураКодовМаркировки.Вставить("GTIN", "");
	СтруктураКодовМаркировки.Вставить("КоличествоИсточник", 0);
	СтруктураКодовМаркировки.Вставить("Количество",   0);
	СтруктураКодовМаркировки.Вставить("ВидУпаковки",  Перечисления.ВидыУпаковокИСМПТК.ПустаяСсылка());
	СтруктураКодовМаркировки.Вставить("СрокГодности", Дата(1,1,1));
	СтруктураКодовМаркировки.Вставить("НомерПартии",  "");
	
	Возврат СтруктураКодовМаркировки;
	
КонецФункции

#КонецОбласти

#Область РаботаСТСД

#Область ЗагрузкаИзТСД

&НаКлиенте
Процедура ЗагрузитьИзТСДПослеАвторизации(РезультатАвторизации, Штрихкоды) Экспорт
	
	Подключаемый_ПолученыДанныеИзТСД(Штрихкоды, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПолученыДанныеИзТСД(Штрихкоды, АвторизацияЗапрашивалась = Неопределено) Экспорт
	
	Если Штрихкоды.Количество() = 0 Тогда
		
		ПоказатьПредупреждение( ,РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияВДанныхИзТСДНетИнформацииОКодахМаркировки());
		Возврат;
		
	КонецЕсли;
	
	СобытияФормИСМПТККлиент.ОповеститьОНачалеОбработкиДанныхТСД();
	ПараметрыСканирования = РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйКлиент.ПараметрыСканирования(ЭтотОбъект);
	СобытияФормИСМПТККлиент.ПреобразоватьШтрихкодыТСДВBase64(Штрихкоды);
	ЗагрузкаДанныхТСД = ОбработатьПолученныеДанныеТСДНаСервере(Штрихкоды, ПараметрыСканирования, Неопределено);
	
	ОбработатьПолученныеДанныеТСД();
	
КонецПроцедуры

&НаСервере
Функция ОбработатьПолученныеДанныеТСДНаСервере(ШтрихкодыТСД, ПараметрыСканирования, КэшированныеЗначения)
	
	Результат = РаботаСДокументамиИСМПТК.ОбработатьПолученныеДанныеТСДВДокументе(ЭтотОбъект, ШтрихкодыТСД, ПараметрыСканирования);
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ОбработатьПолученныеДанныеТСД()
	
	Если ЗагрузкаДанныхТСД = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	МассивКодовМаркировки = Новый Массив;
	
	Для НомерСтроки = 0 По ЗагрузкаДанныхТСД.Всего - 1 Цикл
		Штрихкод = ЗагрузкаДанныхТСД.ШтрихкодыТСД[НомерСтроки];
		ДанныеШтрихкода = Новый Структура("ШтрихКод, ФорматBase64, Количество", Штрихкод.Штрихкод, Ложь, 1);
		РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйКлиентСервер.ЗакодироватьШтрихкодДанныхBase64(ДанныеШтрихкода);
		Если Не РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйКлиентСервер.ПроверкаФорматаТранспортногоКодаПройденаУспешно(ДанныеШтрихкода, Истина) Тогда
			Продолжить;
		КонецЕсли;
		МассивКодовМаркировки.Добавить(ДанныеШтрихкода);
	КонецЦикла;
	
	СтруктураПараметров = Новый Структура("ФормаОбъекта, МассивКодовМаркировки", ЭтотОбъект, МассивКодовМаркировки);
	
	ИнтеграцияИСМПТККлиент.ЗагрузитьКодыМаркировкиИзТСДЗавершение(Неопределено, СтруктураПараметров);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область МобильноеПриложение

&НаКлиенте
Процедура МобильноеПриложениеЗагрузитьТовары(Команда)
	
	ОчиститьСообщения();
	Если ИнтеграцияИСМПТКВызовСервера.ИспользоватьАвтоЗапросДопИнформацииЦЭДМ() 
		И Не ЗначениеЗаполнено(Объект.Организация) 
		И Элементы.ГруппаСтраницы.ТекущаяСтраница.Имя = "ГруппаМарки" Тогда
		ТекстСообщения = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияВключенАвтозапросНужнаОрганизацияДляВыполнения("АвтоЗаполнениеДополнительнойИнформацииПоКодамИСЦЭДМ");
		ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	ОповещениеПослеВыбораЭлемента = Новый ОписаниеОповещения("МобильноеПриложениеЗагрузитьТоварыОбработкаВыбора", ЭтотОбъект);
	Список = РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйВызовСервера.МобильноеПриложениеЗагрузитьТоварыНаСервере();
	Список.ПоказатьОтметкуЭлементов(ОповещениеПослеВыбораЭлемента, РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияВыборДокументаДляЗагрузки());
	
КонецПроцедуры

&НаКлиенте
Процедура МобильноеПриложениеЗагрузитьТоварыОбработкаВыбора(Элемент, Параметры) Экспорт
	
	РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйКлиент.МобильноеПриложениеЗагрузитьТоварыОбработкаВыбораОбщая(ЭтотОбъект, Элемент, Параметры);
	
КонецПроцедуры

#КонецОбласти

#Область КомандыРедактированияСтроки

#Область ПотребительскиеИГрупповыеКМ

&НаКлиенте
Процедура ПодобратьНоменклатуруИЗарегистрироватьGTIN(Команда)
	
	//1. Просим записать документ
	//2. Перебираем ТЧ Марки:
	//   отбираем все строки с НЕ транспортными кодами, у которых заполнены GTINВерхнегоУровня, но не заполнена номенклатура.
	// Это будут потребительские коды, у которых не удалось опознать номенклатуру,
	// а также групповые КМ, у которых не определилась номенклатура верхнего уровня, т.е. по коду товара самогой групповой упаковки (блока).
	//3. Открываем форму обработки ПоискНоменклатурыПоШтрихкоду с передачей параметра Операция = "РегистрацияШтрихкодовСписком"
	//4. В форме назначается номенклатура, при закрытии должна списком регистрироваться информация по ШК.
	//5. В обработчике события закрытия формы обработки дозаполнеям ТЧ Марок, модифицируем документ, перестраиваем дерево кодов.
	
	Если Объект.Марки.Количество() = 0 Тогда
		ТексСообщения = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияВДокументеНетДанныхКодовМаркировки();
		ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТексСообщения);
		Возврат;
	КонецЕсли;
		
	//Проверяем, записан ли документ
	ТекстВопроса = "";
	Если НЕ ЗначениеЗаполнено(ЭтаФорма.Параметры.Ключ) ИЛИ ЭтаФорма.Модифицированность Тогда
		ТекстВопроса = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияВопросЗаписбДокументаПередНачаломРегистрацииШтрихкода();
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекстВопроса) Тогда
		
		Режим = РежимДиалогаВопрос.ДаНет;
		Оповещение   = Новый ОписаниеОповещения("ПослеЗакрытияВопросаПодобратьНоменклатуруИЗарегистрироватьGTIN", ЭтотОбъект);
		ПоказатьВопрос(Оповещение, ТекстВопроса, Режим, 0);
		
	Иначе
		
		//Переходим к отбору штрихкодов, требующих регистрации
		ПродолжитьПодборНоменклатурыИРегистрацииШтрихкодов();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияВопросаПодобратьНоменклатуруИЗарегистрироватьGTIN(Результат, Параметры) Экспорт

	Если Результат = КодВозвратаДиалога.Да Тогда
		
		Попытка
			// выполняем запись документа
			ПараметрыЗаписи = Новый Структура("РежимЗаписи", РежимЗаписиДокумента.Запись);
			Если ЭтаФорма.Записать(ПараметрыЗаписи) Тогда
				//Переходим к отбору штрихкодов, требующих регистрации
				ПродолжитьПодборНоменклатурыИРегистрацииШтрихкодов();
			КонецЕсли;
			
		Исключение
			
			ТекстСообщения = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияНеУдалосьЗаписатьДокументМаркировки()
			 			   + Символы.ПС
						   + КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
			ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения, , , "Форма.Объект");
			
		КонецПопытки;
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПродолжитьПодборНоменклатурыИРегистрацииШтрихкодов()
	
	//Отбираем из ТЧ Марки все строки, у которых заполнен GTIN, но не заполнена номенклатура:
	//для таких позиций необходимо сформировать список штрихкодов к регистрации с группировкой по GTIN.
	ШтрихкодыКСопоставлению = ПодготовитьДанныеДляРегистрацииНоменклатуры();
	
	//Открываем форму подбора и регистрации с передачей неопознанных штрихкодов
	ДанныеДляСопоставленияНоменклатуры = Новый Структура(); //передается в параметрах открытия формы подбора
	Операция = "РегистрацияШтрихкодовСписком";
			
	ДанныеДляСопоставленияНоменклатуры.Вставить("ШтрихкодыКСопоставлению", ШтрихкодыКСопоставлению); //содержит массив, где каждый элемент - структура "Количество, Штрихкод", где штрихкод - это EAN из строка ТЧ Марки, который необходимо зарегистрировать
	
	ПараметрыОткрытияФормы = Новый Структура("ДанныеДляСопоставленияНоменклатуры, Операция, НеизвестныеШтрихкоды, 	 СтруктураКодовМаркировки, Направление", 
											  ДанныеДляСопоставленияНоменклатуры, Операция, ШтрихкодыКСопоставлению, Неопределено, 			   ПредопределенноеЗначение("Перечисление.НаправленияДокументовИСМПТК.Исходящий"));
	ОбработкаОповещенияПодборНоменклатуры = Новый ОписаниеОповещения("ПодборНоменклатурыИРегистрацииШтрихкодовПослеЗакрытияФормы", ЭтотОбъект);
	РежимОткрытия = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
	ОткрытьФорму("Обработка.РозничноеВыбытиеМаркированнойПродукцииИСМПТК.Форма.ПоискНоменклатурыПоШтрихкоду", ПараметрыОткрытияФормы, ЭтотОбъект,,,, ОбработкаОповещенияПодборНоменклатуры, РежимОткрытия);
		
КонецПроцедуры

&НаСервере
Функция ПодготовитьДанныеДляРегистрацииНоменклатуры()
	
	ТаблицаДляПроверки = Объект.Марки.Выгрузить(, "GTINВерхнегоУровня, Номенклатура, ВидУпаковки");
	ТаблицаДляПроверки.Свернуть("GTINВерхнегоУровня, Номенклатура, ВидУпаковки");
	
	ШтрихкодыКСопоставлению = Новый Массив();
	СообщенияОбОшибках = Новый Соответствие();
	Для Каждого ЭлементМассива Из ТаблицаДляПроверки Цикл
		Если ЭлементМассива.ВидУпаковки = ПредопределенноеЗначение("Перечисление.ВидыУпаковокИСМПТК.Групповая")
			Или ЭлементМассива.ВидУпаковки = ПредопределенноеЗначение("Перечисление.ВидыУпаковокИСМПТК.Потребительская") Тогда
			ЕАН = РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйКлиентСервер.EANПоGTIN(ЭлементМассива.GTINВерхнегоУровня);
			ДанныеНоменклатуры = ПолучитьНоменклатуруПоШтрихкоду(ЕАН, СообщенияОбОшибках);
			Если НЕ ДанныеНоменклатуры = Неопределено 
				И ЗначениеЗаполнено(ДанныеНоменклатуры.Номенклатура) Тогда 
				//Этот ШК не нужно регистрировать
				Продолжить;
			КонецЕсли;			
			ДанныеШтрихкода = Новый Структура("Количество, Штрихкод", 1, РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйКлиентСервер.EANПоGTIN(ЭлементМассива.GTINВерхнегоУровня));
			ШтрихкодыКСопоставлению.Добавить(ДанныеШтрихкода);
		КонецЕсли;
	КонецЦикла;
	Если Не СообщенияОбОшибках.Количество() = 0 Тогда
		Для Каждого СообщениеОшибка Из СообщенияОбОшибках Цикл 
			ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(СообщениеОшибка.Значение);
		КонецЦикла;
	КонецЕсли;
	
	Возврат ШтрихкодыКСопоставлению;
	
КонецФункции

&НаКлиенте
Процедура ПодборНоменклатурыИРегистрацииШтрихкодовПослеЗакрытияФормы(ИсходныеДанные, ДополнительныеПараметры = Неопределено) Экспорт

	Если Не ИсходныеДанные.Свойство("ШтрихкодыНоменклатуры") Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ИсходныеДанные.ШтрихкодыНоменклатуры.Количество() = 0 Тогда
		Если ИсходныеДанные.ОтложенныеТовары.Количество() = 0 Тогда 
			//Все ШК были успешно отработаны, заполняем полностью
			Для Каждого НовыйШтрикход Из ИсходныеДанные.ШтрихкодыНоменклатуры Цикл
				Номенклатура = НовыйШтрикход.Номенклатура;
				Штрихкод 	 = НовыйШтрикход.Штрихкод;
				
				ОбработатьСтрокиТаблицыПослеПодбораНаСервере(Номенклатура, Штрихкод);
				Модифицированность = Истина;
			КонецЦикла;
		Иначе
			//Некоторые товары (КМ) не были подобраны, их заполнять не нужно. Выполняем проверки и исключаем такие ШК
			ШтрихкодыДляИсключения = Новый Массив();
			Для Каждого ИсключаемыйШК Из ИсходныеДанные.ОтложенныеТовары Цикл
				ШтрихкодыДляИсключения.Добавить(ИсключаемыйШК.Штрихкод);
			КонецЦикла;
			
			Для Каждого НовыйШтрикход Из ИсходныеДанные.ШтрихкодыНоменклатуры Цикл
				Номенклатура = НовыйШтрикход.Номенклатура;
				Штрихкод 	 = НовыйШтрикход.Штрихкод;
				Если ШтрихкодыДляИсключения.Найти(Штрихкод) = Неопределено Тогда
					ОбработатьСтрокиТаблицыПослеПодбораНаСервере(Номенклатура, Штрихкод);
					Модифицированность = Истина;	
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	СформироватьДеревоКодовМаркировки();
			
КонецПроцедуры

&НаСервере
Процедура ОбработатьСтрокиТаблицыПослеПодбораНаСервере(Номенклатура, Штрихкод)
	
	GTINВерхнегоУровня = РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйКлиентСервер.GTINПоШтрихкодуEAN(Штрихкод);
	НайденныеСтрокиТаблицы = Объект.Марки.НайтиСтроки(Новый Структура("GTINВерхнегоУровня", GTINВерхнегоУровня));
	
	Для Каждого Строка Из НайденныеСтрокиТаблицы Цикл
		Строка.Номенклатура = Номенклатура;
	КонецЦикла;
  	
КонецПроцедуры

#КонецОбласти

#Область ТранспортныеКМ

&НаКлиенте
Процедура РедактироватьСтрокиТранспортныеКоды(Команда)
	
	//1. Просим записать документ
	//2. Перебираем ТЧ Марки:
	//   отбираем все строки с транспортными и групповыми кодами.
	//3. Открываем форму обработки ПоискНоменклатурыПоШтрихкоду с передачей параметра Операция = "РаботаСТранспортнымиКодами"
	//4. В форме можно указать номенклатуру, а также GTIN. 
	//5. В обработчике события закрытия формы обработки дозаполнеям ТЧ Марок, модифицируем документ, перестраиваем дерево кодов.
	
	Если Объект.Марки.Количество() = 0 Тогда
		ТексСообщения = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияВДокументеНетДанныхКодовМаркировки();
		ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТексСообщения);
		Возврат;
	КонецЕсли;
	
	//Проверяем, записан ли документ
	ТекстВопроса = "";
	Если НЕ ЗначениеЗаполнено(ЭтаФорма.Параметры.Ключ) ИЛИ ЭтаФорма.Модифицированность Тогда
		ТекстВопроса = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияВопросЗаписбДокументаПередНачаломРегистрацииШтрихкода();
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекстВопроса) Тогда
		
		Режим = РежимДиалогаВопрос.ДаНет;
		Оповещение   = Новый ОписаниеОповещения("ПослеЗакрытияВопросаРедактироватьСтрокиТранспортныеКоды", ЭтотОбъект);
		ПоказатьВопрос(Оповещение, ТекстВопроса, Режим, 0);
		
	Иначе
		
		//Переходим к отбору упаковок
		ПродолжитьРедактироватьСтрокиТранспортныеКоды();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияВопросаРедактироватьСтрокиТранспортныеКоды(Результат, Параметры) Экспорт

	Если Результат = КодВозвратаДиалога.Да Тогда
		
		Попытка
			// выполняем запись документа
			ПараметрыЗаписи = Новый Структура("РежимЗаписи", РежимЗаписиДокумента.Запись);
			Если ЭтаФорма.Записать(ПараметрыЗаписи) Тогда
				//Переходим к отбору упаковок
				ПродолжитьРедактироватьСтрокиТранспортныеКоды();
			КонецЕсли;
			
		Исключение
			
			ТекстСообщения = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияНеУдалосьЗаписатьДокументМаркировки()
			 			   + Символы.ПС
						   + КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
			ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения, , , "Форма.Объект");
			
		КонецПопытки;
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПродолжитьРедактироватьСтрокиТранспортныеКоды()
	
	//Отбираем из ТЧ Марки все строки, у которых не заполнен GTIN, либо заполнен некорректно, либо заполнен, но не заполнена номенклатура:
	//для таких позиций необходимо сформировать список штрихкодов к указанию данных вручную.
	ШтрихкодыКСопоставлению = ПодготовитьДанныеДляРедактированияСтрокТранспортныхУпаковок();
	
	//Открываем форму подбора и регистрации с передачей неопознанных штрихкодов
	ДанныеДляСопоставленияНоменклатуры = Новый Структура(); //передается в параметрах открытия формы подбора
	Операция = "РаботаСТранспортнымиКодами";
			
	ДанныеДляСопоставленияНоменклатуры.Вставить("ШтрихкодыКСопоставлению", ШтрихкодыКСопоставлению); 
	
	ПараметрыОткрытияФормы = Новый Структура("ДанныеДляСопоставленияНоменклатуры, Операция, НеизвестныеШтрихкоды, 	 СтруктураКодовМаркировки, Направление", 
											  ДанныеДляСопоставленияНоменклатуры, Операция, ШтрихкодыКСопоставлению, Неопределено,  		   ПредопределенноеЗначение("Перечисление.НаправленияДокументовИСМПТК.Исходящий"));
	ОбработкаОповещенияПодборНоменклатуры = Новый ОписаниеОповещения("РедактированиеСтрокТранспортныхКодовПослеЗакрытияФормы", ЭтотОбъект);
	РежимОткрытия = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
	ОткрытьФорму("Обработка.РозничноеВыбытиеМаркированнойПродукцииИСМПТК.Форма.ПоискНоменклатурыПоШтрихкоду", ПараметрыОткрытияФормы, ЭтотОбъект,,,, ОбработкаОповещенияПодборНоменклатуры, РежимОткрытия);
		
КонецПроцедуры

&НаСервере
Функция ПодготовитьДанныеДляРедактированияСтрокТранспортныхУпаковок()
	
	ШтрихкодыКСопоставлению = Новый Массив();
	
	//1. Обрабатываем транспортные коды
	ШтрихкодыКСопоставлениюТранспортные = Новый Массив();	
	ПараметрыОтбора = Новый Структура("ВидУпаковки", ПредопределенноеЗначение("Перечисление.ВидыУпаковокИСМПТК.Логистическая"));
	ТаблицаУпаковок = Объект.Марки.НайтиСтроки(ПараметрыОтбора);
	
	СообщенияОбОшибках = Новый Соответствие();
	Для Каждого ЭлементМассива Из ТаблицаУпаковок Цикл
		
		ДанныеУпаковки = Новый Структура();
		ДанныеУпаковки.Вставить("Штрихкод", 	ЭлементМассива.КодИдентификации); 
		ДанныеУпаковки.Вставить("Номенклатура", ЭлементМассива.Номенклатура);
		ДанныеУпаковки.Вставить("GTIN", 	    ЭлементМассива.GTIN);
		ДанныеУпаковки.Вставить("Количество",   ЭлементМассива.Количество);
		ДанныеУпаковки.Вставить("ВидПродукции", ЭлементМассива.ВидПродукции);
		ДанныеУпаковки.Вставить("ВидУпаковки",  ЭлементМассива.ВидУпаковки);
		
		ДанныеПоШтрихкоду = ОбщегоНазначенияИСМПТКПереопределяемый.ПолучитьДанныеНоменклатурыИзРегистраШтрихкодовПоШтрихкоду(, ЭлементМассива.EAN, ЭлементМассива.Номенклатура, СообщенияОбОшибках); 
		Если НЕ ДанныеПоШтрихкоду = Неопределено Тогда
			ДанныеУпаковки.Вставить("Характеристика", ДанныеПоШтрихкоду.Характеристика);
		Иначе
			ДанныеУпаковки.Вставить("Характеристика", "");
		КонецЕсли;
			
		ШтрихкодыКСопоставлениюТранспортные.Добавить(ДанныеУпаковки);
		
	КонецЦикла;
	Если Не СообщенияОбОшибках.Количество() = 0 Тогда
		Для Каждого СообщениеОшибка Из СообщенияОбОшибках Цикл 
			ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(СообщениеОшибка.Значение);
		КонецЦикла;
	КонецЕсли;
	
	//2. Обрабатываем групповые коды
	ШтрихкодыКСопоставлениюГрупповые = Новый Массив();	
	ПараметрыОтбора = Новый Структура("ВидУпаковки", ПредопределенноеЗначение("Перечисление.ВидыУпаковокИСМПТК.Групповая"));
	ТаблицаУпаковок = Объект.Марки.НайтиСтроки(ПараметрыОтбора);
		
	Для Каждого ЭлементМассива Из ТаблицаУпаковок Цикл
		
		ДанныеУпаковки = Новый Структура();
		ДанныеУпаковки.Вставить("Штрихкод", 	ЭлементМассива.КодИдентификации); 
		ДанныеУпаковки.Вставить("Номенклатура", Неопределено);  //Для групповых упаковок Номенклатура в данном случае не важна, т.к. она относится к верхнему уровню, а сейчас работаем с нижним (вложенный товар)
		ДанныеУпаковки.Вставить("GTIN", 	    ЭлементМассива.GTIN);
		ДанныеУпаковки.Вставить("Количество",   ЭлементМассива.Количество);
		ДанныеУпаковки.Вставить("ВидПродукции", ЭлементМассива.ВидПродукции);
		ДанныеУпаковки.Вставить("Характеристика", "");
		ДанныеУпаковки.Вставить("ВидУпаковки",  ЭлементМассива.ВидУпаковки);
					
		ШтрихкодыКСопоставлениюГрупповые.Добавить(ДанныеУпаковки);
		
	КонецЦикла;
	
	//3.Формируем общие данные
	ШтрихкодыКСопоставлению.Добавить(ШтрихкодыКСопоставлениюТранспортные);
	ШтрихкодыКСопоставлению.Добавить(ШтрихкодыКСопоставлениюГрупповые);
	
	Возврат ШтрихкодыКСопоставлению;
	
КонецФункции

&НаКлиенте
Процедура РедактированиеСтрокТранспортныхКодовПослеЗакрытияФормы(ИсходныеДанные, ДополнительныеПараметры = Неопределено) Экспорт

	Если Не ИсходныеДанные.Свойство("ШтрихкодыНоменклатуры") Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ИсходныеДанные.ШтрихкодыНоменклатуры.Количество() = 0 Тогда
		ЗаполнитьТаблицуМарок(ИсходныеДанные.ШтрихкодыНоменклатуры);
		Модифицированность = Истина;
	КонецЕсли;
	
	СформироватьДеревоКодовМаркировки();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТаблицуМарок(МассивДанныхУпаковок)
	
	Для Каждого Элемент Из МассивДанныхУпаковок Цикл
		
		КодИдентификации = Элемент.КодИдентификации;
		ДанныеУпаковки   = Элемент.ДанныеУпаковки;
		
		ИзменилсяИдентификаторКода = ?(Элемент.Свойство("ИзменилсяИдентификаторКода"), Элемент.ИзменилсяИдентификаторКода, Ложь);
		ПреобразованныйКод = КодИдентификации; //этот код будет использован для перезаполнения данных в таблице документа
		Если ИзменилсяИдентификаторКода Тогда
			//Было выполнено преобразование формата транспортного кода SSCC (18 <> 20 символов)
			//Возвращаем исходное значение, чтобы найти нужную строку в таблице документа
			Если СтрДлина(КодИдентификации) = 18 Тогда
				КодИдентификации = "00" + КодИдентификации;
			ИначеЕсли СтрДлина(КодИдентификации) = 20 Тогда
				КодИдентификации = Сред(КодИдентификации, 3);
			КонецЕсли;
		КонецЕсли;
				
		НайденныеСтрокиТаблицы = Объект.Марки.НайтиСтроки(Новый Структура("КодИдентификации", КодИдентификации));
		Для Каждого Строка Из НайденныеСтрокиТаблицы Цикл
			Если Строка.ВидУпаковки = ПредопределенноеЗначение("Перечисление.ВидыУпаковокИСМПТК.Логистическая") Тогда
				ЗаполнитьЗначенияСвойств(Строка, ДанныеУпаковки);
				Если ИзменилсяИдентификаторКода Тогда
					Строка.КодИдентификации = ПреобразованныйКод;
					Строка.КодМаркировки	= РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйКлиентСервер.ШтрихкодВBase64(ПреобразованныйКод);
				КонецЕсли;
			Иначе
				ЗаполнитьЗначенияСвойств(Строка, ДанныеУпаковки,, "Номенклатура"); //Для групповой Ном-ра заполняется по верхнему уровню, а здесь обрабатывается нижний (вложенные товары)
			КонецЕсли;
		КонецЦикла;
		
	КонецЦикла;	
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ПолучениеДополнительнойИнформацииПоКоду

&НаКлиенте
Процедура ПолучитьДополнительныеСведенияПоКодамВИСЦЭДМ(Команда)
	
	ОчиститьСообщения();
	
	ЕстьОшибки = Ложь;
	Если Не ЗначениеЗаполнено(Объект.ПоставщикИдентификационныйНомер) Тогда
		ТекстСообщения = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияНеобходимоУказатьИИНБИНПоставщикаДляЗапросаИСЦЭДМ();
		ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);	
	КонецЕсли;
	Если объект.Марки.Количество() = 0 Тогда
		ТекстСообщения = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияВТаблицеМаркиОтсутствуютКодыМаркировки()
					   + " " + РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияВыполнениеКомандыНевозможно(); 
		ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);	
	КонецЕсли;  
	Если ЕстьОшибки Тогда
		Возврат;
	КонецЕсли;
		
 	СоответствиеСтатусаПроверки = Новый Соответствие;
 	ПолучитьДополнительныеСведенияПоКодамВИСЦЭДМНаСервере(СоответствиеСтатусаПроверки);
	СформироватьДеревоКодовМаркировки();
	УстановитьСтатусПроверкиВДеревеКМ(СоответствиеСтатусаПроверки);
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьДополнительныеСведенияПоКодамВИСЦЭДМНаСервере(СоответствиеСтатусаПроверки, КодИдентификации = Неопределено, СтруктураКодовМаркировки = Неопределено)
	
	Если ЗначениеЗаполнено(Объект.Организация) Тогда 
		УПользователяЕстьНастройкаОбмена = ИнтерфейсИСМПТК.ПроверитьНаличиеНастройкиПодключенияУПользователя(Объект.Организация);
		Если Не УПользователяЕстьНастройкаОбмена Тогда
			ТекстСообщения = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияНеОбнаруженоПрофиляДоступаЦЭДМПроверьтеНастройкиСервисаСПараметром();
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%РазделАдминистрирование%", ОбщегоНазначенияИСМПТКВызовСервераПереопределяемый.ПолучитьПредставлениеРазделАдминистрирование());
			ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);	
			Возврат;
		КонецЕсли;
	Иначе
		ТекстСообщения = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияНужноУказатьОрганизациюДляАвторизацииВСистемеЦЭДМ();
		ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);	
		Возврат;
	КонецЕсли;
		
	МассивДляЗапросаИнформации = Новый Массив();
	Если КодИдентификации = Неопределено Тогда
	//Выполняем для всей таблицы	
		Для Каждого Строка Из Объект.Марки Цикл
			МассивДляЗапросаИнформации.Добавить(Строка.КодИдентификации);
		КонецЦикла;
	Иначе
		МассивДляЗапросаИнформации.Добавить(КодИдентификации);
	КонецЕсли;
	
	ИнформацияОКодах = ИнтеграцияИСМПТК.ПолучитьДополнительныеСведенияОКодахМаркировки(МассивДляЗапросаИнформации, Объект.Организация);
	Если Не ИнформацияОКодах = Неопределено Тогда
		
		Для Каждого СтрокаТЧ Из Объект.Марки Цикл
			
			Если ЗначениеЗаполнено(КодИдентификации) Тогда
				//Проверять по данным сервера нужно не всю ТЧ
				Если Не СтрокаТЧ.КодИдентификации = КодИдентификации Тогда
					Продолжить;
				КонецЕсли;
			КонецЕсли;
			
			НайденныйОтвет = ИнформацияОКодах.Получить(СтрокаТЧ.КодИдентификации);
			Если НайденныйОтвет = Неопределено Тогда
				ТекстСообщения = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияИнформацияОКодеНеНайденаНаСервереСПараметром();
				ТекстСообщения = ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(ТекстСообщения, СтрокаТЧ.КодИдентификации);
				ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
			Иначе
				//Заполняем недостающие данные
				СтрокаТЧ.СрокГодности = НайденныйОтвет.СрокГодности;
				СтрокаТЧ.НомерПартии  = НайденныйОтвет.НомерПартии;
				Если ЗначениеЗаполнено(НайденныйОтвет.GTINВложенных) Тогда 
					СтрокаТЧ.GTIN = НайденныйОтвет.GTINВложенных; 
				КонецЕсли;
				СтрокаТЧ.GTINВерхнегоУровня = НайденныйОтвет.GTIN;
				Если Не НайденныйОтвет.КоличествоВложенных = 0 Тогда
					СтрокаТЧ.Количество = НайденныйОтвет.КоличествоВложенных;
				КонецЕсли;
				
				Если Не СтруктураКодовМаркировки = Неопределено Тогда
					Если Не СтруктураКодовМаркировки.Свойство("СрокГодности") Тогда
						СтруктураКодовМаркировки.Вставить("СрокГодности", НайденныйОтвет.СрокГодности);
					КонецЕсли;
					Если Не СтруктураКодовМаркировки.Свойство("НомерПартии") Тогда
						СтруктураКодовМаркировки.Вставить("НомерПартии", НайденныйОтвет.НомерПартии);
					КонецЕсли;
				КонецЕсли;
								
				//Проверяем статус кода и соответствие владельца
				ВыполнитьПроверкуСтатусаИВладельцаПоДаннымЦЭДМ(СоответствиеСтатусаПроверки, СтрокаТЧ.КодИдентификации, НайденныйОтвет.СтатусКМ, НайденныйОтвет.БИНВладельца);

			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ВыполнитьПроверкуСтатусаИВладельцаПоДаннымЦЭДМ(СоответствиеСтатусаПроверки, КодИдентификации, СтатусСервер, ВладелецСервер)
	
	Ошибочный = Ложь;
	МассивДопустимыхСтатусовКМ = ИнтеграцияИСМПТК.ДопустимыеСтатусыКМДляДокументаИСЦЭДМ("АктВнутреннегоПеремещения");
	Если МассивДопустимыхСтатусовКМ.Найти(СтатусСервер) = Неопределено Тогда 
		ТекстСообщения = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияКодИмеетСтатусЗапрещенныйВДокументеМогутБытьПроблемы();
		ТекстСообщения = ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(ТекстСообщения, КодИдентификации, ?(ЗначениеЗаполнено(СтатусСервер), СтатусСервер, "Не определен"));
		ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
		Ошибочный = Истина;
	КонецЕсли;
	
	Если Не Объект.ПоставщикИдентификационныйНомер = ВладелецСервер Тогда
		ТекстСообщения = НСтр("ru = 'Обнаружено несоответствие: текущий владелец кода %1 имеет ИИН/БИН %2, что не соответствует указанным в документе ИИН/БИН поставщика.'")
		               + Символы.ПС
					   + РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияНельзяУказыватьЧужиеКодыМогутБытьПроблемыСлужебное();
		ТекстСообщения = ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(ТекстСообщения, КодИдентификации, ВладелецСервер);
		ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
		Ошибочный = Истина;
	КонецЕсли;
	
	СоответствиеСтатусаПроверки.Вставить(КодИдентификации, Ошибочный);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьСтатусПроверкиВДеревеКМ(СоответствиеСтатусаПроверки, КодИдентификации = Неопределено)
	
	ЭлементыВетвиДерева = ДеревоМаркированнойПродукции.ПолучитьЭлементы();
	Для Каждого ЭлементДерева Из ЭлементыВетвиДерева Цикл
		Если Не ЗначениеЗаполнено(ЭлементДерева.КодИдентификации) Тогда
			Для Каждого ЭлементНижнийУровень Из ЭлементДерева.ПолучитьЭлементы() Цикл
				Если Не ЭлементНижнийУровень.Ошибочный Тогда //Значение по умолчанию - ложь. Если стоит Истина, значит код уже проверен - сохранеям этот признак.
					ЭлементНижнийУровень.Ошибочный = ?(СоответствиеСтатусаПроверки.Получить(ЭлементНижнийУровень.КодИдентификации) = Неопределено, Ложь, СоответствиеСтатусаПроверки.Получить(ЭлементНижнийУровень.КодИдентификации));
				КонецЕсли;
			КонецЦикла;
		Иначе
			Если Не ЭлементДерева.Ошибочный Тогда 
				ЭлементДерева.Ошибочный = ?(СоответствиеСтатусаПроверки.Получить(ЭлементДерева.КодИдентификации) = Неопределено, Ложь, СоответствиеСтатусаПроверки.Получить(ЭлементДерева.КодИдентификации));
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область СверкаТоваров

&НаСервере
Процедура НастроитьВидимостьФункционалаСверки()
	
	//Статусы документа
	Черновик = Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыДокументовИСЦЭДМ.НеОпределен");
	ЗапрошеноУточнение = Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыДокументовИСЦЭДМ.ЗапрошеноУточнение");
	ОжидаетПриемку 	   = Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыДокументовИСЦЭДМ.ОжидаетПодтверждение");
	Отклонен		   = Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыДокументовИСЦЭДМ.Отклонен");
	Принят  		   = Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыДокументовИСЦЭДМ.Принят");
	//Статусы сверки товаров
	СверкаНеВыполнялась 	= Объект.СтатусСверкиТоваров = ПредопределенноеЗначение("Перечисление.СтатусыСверкиПолученныхКодовИСЦЭДМ.СверкаНеВыполнялась"); 
	ОбнаруженыРасхождения 	= Объект.СтатусСверкиТоваров = ПредопределенноеЗначение("Перечисление.СтатусыСверкиПолученныхКодовИСЦЭДМ.СверкаВыполненаЕстьРасхождения");
	НеОбнаруженоРасхождений = Объект.СтатусСверкиТоваров = ПредопределенноеЗначение("Перечисление.СтатусыСверкиПолученныхКодовИСЦЭДМ.СверкаВыполненаРасхожденийНеОбнаружено");
	//Уведомление о расхождениях
	УведомлениеПрисоединено = ЗначениеЗаполнено(УведомлениеОРасхождениях);
	УведомлениеОтклоненоОтозвано = ?(Не УведомлениеПрисоединено, Ложь, ПроверитьСтатусСвязанногоУОРОтозванОтклонен());
	УведомлениеПринято = ?(Не УведомлениеПрисоединено, Ложь, ПроверитьСтатусСвязанногоУОРПринят());
	//Прочее
	ДобавленыСверяемыеКоды = Не Объект.РезультатСверки.Количество() = 0;
	УПользователяЕстьНастройкаОбмена = ЗначениеЗаполнено(Объект.Организация) И ИнтерфейсИСМПТК.ПроверитьНаличиеНастройкиПодключенияУПользователя(Объект.Организация);
	
	ОбщегоНазначенияИСМПТККлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГруппаРезультатСверки", "Видимость", Не Черновик);
	ОбщегоНазначенияИСМПТККлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "РезультатСверки", "ТолькоПросмотр", 
																(Отклонен Или Принят Или УведомлениеПринято) //Процесс с документом завершен
																Или (ЗапрошеноУточнение И Не УведомлениеОтклоненоОтозвано) //Сверку уже провели и оформили действующий УОР
																Или (ОжидаетПриемку И Не СверкаНеВыполнялась)); //Сверку провели, УОР не вводился
																
	ОбщегоНазначенияИСМПТККлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "РезультатСверкиИмпортЭкспорт", "Доступность", 
																(ЗапрошеноУточнение Или ОжидаетПриемку) 
																И (УведомлениеОтклоненоОтозвано Или Не УведомлениеПрисоединено) И СверкаНеВыполнялась);
																
	ОбщегоНазначенияИСМПТККлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ПровестиПовторнуюСверкуТоваров", "Доступность",
																((ЗапрошеноУточнение Или ОжидаетПриемку) И УведомлениеОтклоненоОтозвано) //УОР не активен, можно ввести еще один по новой сверке
																Или (ОжидаетПриемку И ОбнаруженыРасхождения И Не УведомлениеПрисоединено) //Сверку провели, но УОР еще не формировали
																Или (ОжидаетПриемку И НеОбнаруженоРасхождений И Не УведомлениеПрисоединено)); //Сверку провели, но УОР еще не формировали 
																
	ОбщегоНазначенияИСМПТККлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ОбщаяКомандаВвестиУведомлениеОРасхождениях", "Видимость",
																(ЗапрошеноУточнение Или ОжидаетПриемку) И ОбнаруженыРасхождения);
	ОбщегоНазначенияИСМПТККлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ОбщаяКомандаВвестиУведомлениеОРасхождениях", "Доступность",
																(Не УведомлениеПрисоединено Или УведомлениеОтклоненоОтозвано) И УПользователяЕстьНастройкаОбмена);
																
	ОбщегоНазначенияИСМПТККлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "РезультатСверкиОбщаяКомандаВыполнитьСверку", "Видимость",
																(ОжидаетПриемку Или ЗапрошеноУточнение) И СверкаНеВыполнялась);
	ОбщегоНазначенияИСМПТККлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "РезультатСверкиОбщаяКомандаВыполнитьСверку", "Доступность",
																ДобавленыСверяемыеКоды И УПользователяЕстьНастройкаОбмена);
		
КонецПроцедуры

&НаСервере
Функция ПроверитьСтатусСвязанногоУОРОтозванОтклонен()
	
	Если ТипЗнч(УведомлениеОРасхождениях) = Тип("СписокЗначений") Тогда
		Для Каждого Документ Из УведомлениеОРасхождениях Цикл
			Если Не Документ.Значение.Статус = ПредопределенноеЗначение("Перечисление.СтатусыДокументовИСЦЭДМ.Отклонен")
				И Не Документ.Значение.Статус = ПредопределенноеЗначение("Перечисление.СтатусыДокументовИСЦЭДМ.Отозван") Тогда
				Возврат Ложь;
			КонецЕсли;
		КонецЦикла;
		Возврат Истина;
	Иначе
		Возврат УведомлениеОРасхождениях.Статус = ПредопределенноеЗначение("Перечисление.СтатусыДокументовИСЦЭДМ.Отклонен")
			Или УведомлениеОРасхождениях.Статус = ПредопределенноеЗначение("Перечисление.СтатусыДокументовИСЦЭДМ.Отозван");
	КонецЕсли;

КонецФункции

&НаСервере
Функция ПроверитьСтатусСвязанногоУОРПринят()
	
	Если ТипЗнч(УведомлениеОРасхождениях) = Тип("СписокЗначений") Тогда
		Для Каждого Документ Из УведомлениеОРасхождениях Цикл
			Если Не Документ.Значение.Статус = ПредопределенноеЗначение("Перечисление.СтатусыДокументовИСЦЭДМ.Принят") Тогда
				Возврат Ложь;
			КонецЕсли;
		КонецЦикла;
		Возврат Истина;
	Иначе
		Возврат УведомлениеОРасхождениях.Статус = ПредопределенноеЗначение("Перечисление.СтатусыДокументовИСЦЭДМ.Принят");
	КонецЕсли;

КонецФункции

&НаКлиенте
Процедура ОбработатьКодМаркировкиВоВходящем(ИсходныеДанные, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если ИсходныеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	//Для передачи на сервер КМ, в составе которого есть символы GS (29), требуется дополнительное кодирование
	РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйКлиентСервер.ЗакодироватьШтрихкодДанныхBase64(ИсходныеДанные);
	ИсходныеДанные.Вставить("ФорматBase64", Истина);	
	СтруктураКодовМаркировки = ИнтеграцияИСМПТКВызовСервера.ПолучитьКодыМаркировки(ИсходныеДанные);   
	
	//Если удалось разобрать код, вернется структура. Если нет - текст сообщения об ошибке.
	Если ТипЗнч(СтруктураКодовМаркировки) = Тип("Строка") Тогда
		ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(СтруктураКодовМаркировки);
		Возврат;
	КонецЕсли;
	
	СтруктураПоиска = Новый Структура("КодИдентификации", СтруктураКодовМаркировки.КодИдентификации);
	НайденныеСтроки = Объект.РезультатСверки.НайтиСтроки(СтруктураПоиска);
	
	ОтказатьВДобавлении = Ложь;
	Если Не СтруктураКодовМаркировки = Неопределено
		И Не НайденныеСтроки.Количество() = 0 Тогда 
		
		ОтказатьВДобавлении = Истина;
		
	ИначеЕсли ОбщегоНазначенияИСМПТК.ПроверитьЗначениеКонстанты("ПоддержкаДвойногоФорматаТранспортныхКодовИСМПТК")
		И СтруктураКодовМаркировки.ВидУпаковки = ПредопределенноеЗначение("Перечисление.ВидыУпаковокИСМПТК.Логистическая") Тогда
		
		//В этом случае в таблице документа может находиться уже преобразованный SSCC, соответствующий обрабатываемому в данный момент штрихкоду,
		//т.е. нужна специфическая проверка на дублирование данных кода
		ОтказатьВДобавлении = ПроверитьНаличиеSSCCВДокументе(СтруктураКодовМаркировки.КодИдентификации);
		
	КонецЕсли;
	
	Если ОтказатьВДобавлении Тогда
		
		ПараметрыОткрытия = СобытияФормИСМПТККлиент.ПараметрыОткрытияФормыНевозможностиДобавленияОтсканированного();
		ПараметрыОткрытия.Штрихкод    = ИсходныеДанные.Штрихкод;
		ПараметрыОткрытия.ТекстОшибки = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияКодМаркировкиУказанВДокументе();
		ОткрытьФорму(ОбщегоНазначенияИСМПТККлиент.ПолучитьИмяФормыИнформацияОНевозможностиДобавленияКМ(), ПараметрыОткрытия, ЭтаФорма);
		
		Возврат;
		
	КонецЕсли;
	
	Если Не СтруктураКодовМаркировки = Неопределено Тогда
		
		СообщенияОбОшибках = Новый Соответствие();
		ДанныеНоменклатуры = ПолучитьНоменклатуруПоШтрихкоду(СтруктураКодовМаркировки.EAN, СообщенияОбОшибках);
		Если ТипЗнч(ДанныеНоменклатуры) = Тип("Структура") Тогда
			Номенклатура = ДанныеНоменклатуры.Номенклатура;
		Иначе
			Номенклатура = ДанныеНоменклатуры;
		КонецЕсли;
		Если Не СообщенияОбОшибках.Количество() = 0 Тогда
			Для Каждого СообщениеОшибка Из СообщенияОбОшибках Цикл 
				ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(СообщениеОшибка.Значение);
			КонецЦикла;
		КонецЕсли;
		
		ВидПродукцииКода = ПолучитьВидПродукцииПоНоменклатуре(Номенклатура);
		Если Не ВидПродукцииКода = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИСМПТК.ЛекарственныеПрепараты") 
			И Не СтруктураКодовМаркировки.ВидУпаковки = ПредопределенноеЗначение("Перечисление.ВидыУпаковокИСМПТК.Логистическая") Тогда
			ТекстСообщения = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияКМПринадлежитНоменклатуреСОсобенностямиУчетаСПараметрами()
	        			   + " " + РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияДокументНеПредназначенДляРаботыСЭтойТГ();
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%НаименованиеПодсистемы%", РаботаСТекстамиИСМПТККлиентСервер.НаименованиеИСЦЭДМ());
			ТекстСообщения = ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(ТекстСообщения, Номенклатура, ВидПродукцииКода); 
			ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
			Возврат;
		КонецЕсли;
		
		НоваяСтрокаСверки = Объект.РезультатСверки.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрокаСверки, СтруктураКодовМаркировки);
		НоваяСтрокаСверки.Номенклатура = Номенклатура;
			
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РезультатСверкиПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	Отказ = Истина;
КонецПроцедуры

&НаСервере
Процедура НайтиУведомлениеОРасхождениях()
	
	//Заполняем ссылку на странице Сверка
	СписокЗначенийУОР = РаботаСДокументамиИСМПТК.ПодобратьСвязанноеУведомлениеОРасхождениях(Объект.Идентификатор);
	Если Не СписокЗначенийУОР = Неопределено Тогда
		Если СписокЗначенийУОР.Количество() = 1 Тогда
			УведомлениеОРасхождениях = СписокЗначенийУОР[0].Значение;
		Иначе
			УведомлениеОРасхождениях = СписокЗначенийУОР;
		КонецЕсли;
		
		Если ТипЗнч(УведомлениеОРасхождениях) = Тип("СписокЗначений") Тогда
			НадписьКоличествоИСЦЭДМ = НСтр("ru='Всего Уведомлений о расхождениях: (%КоличествоДокументов%)'");
			ПредставлениеУОР = СтрЗаменить(НадписьКоличествоИСЦЭДМ, "%КоличествоДокументов%", УведомлениеОРасхождениях.Количество());
			Элементы.ПредставлениеУОР.ЦветТекста = ОбщегоНазначенияИСМПТККлиентСервер.ЦветЧерный();
		Иначе
			ДополнительныйТекст = "";
			Если УведомлениеОРасхождениях.ПометкаУдаления Тогда
				ДополнительныйТекст = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияПомеченНаУдаление();
			КонецЕсли;
			УведомлениеОтклоненоОтозвано = ПроверитьСтатусСвязанногоУОРОтозванОтклонен();
			ПредставлениеУОР = Строка(УведомлениеОРасхождениях) + ДополнительныйТекст;
			Элементы.ПредставлениеУОР.ЦветТекста = ?(УведомлениеОРасхождениях.ПометкаУдаления Или УведомлениеОтклоненоОтозвано,
													 ОбщегоНазначенияИСМПТККлиентСервер.ЦветКрасный(),
													 ОбщегоНазначенияИСМПТККлиентСервер.ЦветСиний());
		КонецЕсли;
	КонецЕсли;
													 
КонецПроцедуры

&НаСервере
Процедура НайтиКорректировочныйДокумент()
	
	//Заполняем поля в группе ГруппаКорректировочныйДокумент
	Если Не ЗначениеЗаполнено(УведомлениеОРасхождениях) Тогда
		// Нахождение данных корректировочного документа возможно только при наличии в базе связанного УОР
		Возврат;
	КонецЕсли;
	
	ДанныеКорректировки = РаботаСДокументамиИСМПТК.ПодобратьКорректировочныйДокументПоРасхождению(Объект.Идентификатор);
	Если Не ДанныеКорректировки = Неопределено Тогда
		ДокументКорректировка = ДанныеКорректировки.КорректировочныйДокументСсылка;
		ДокументКорректировкаИдентификатор = ДанныеКорректировки.КорректировочныйДокументИдентификатор;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура НайтиПервичныйДокумент()
	
	//Заполняем поля в группе ГруппаИсходныйДокумент
	Если Не ЗначениеЗаполнено(Объект.ИсходноеУведомлениеОРасхожденияхИдентификатор) Тогда
		// Нахождение данных первичного документа возможно только при наличии в базе связанного УОР
		Возврат;
	КонецЕсли;
	
	ДанныеПервичногоДокумента = РаботаСДокументамиИСМПТК.ПодобратьПервичныйДокументПоРасхождению(Объект.ИсходноеУведомлениеОРасхожденияхИдентификатор);
	Если Не ДанныеПервичногоДокумента = Неопределено Тогда
		ИсходныйУОР = ДанныеПервичногоДокумента.УОРСсылка;
		ИсходныйДокумент = ДанныеПервичногоДокумента.ПервичныйДокументСсылка;
		ИсходныйДокументИдентификатор = ДанныеПервичногоДокумента.ПервичныйДокументИдентификатор;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПровестиПовторнуюСверкуТоваров(Команда)
	
	Если ЗначениеЗаполнено(УведомлениеОРасхождениях) Тогда 
		ТекстВопроса = НСтр("ru = 'В этом документе уже выполнялась сверка товаров.'")
					 + Символы.ПС
					 + НСтр("ru = 'Разблокировать таблицу для выполнения повторной сверки?'");
		ПровестиПовторнуюСверкуТоваровЗавершение = Новый ОписаниеОповещения("ПровестиПовторнуюСверкуТоваровЗавершение", ЭтаФорма);
		ПоказатьВопрос(ПровестиПовторнуюСверкуТоваровЗавершение, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	Иначе
		Объект.СтатусСверкиТоваров = ПредопределенноеЗначение("Перечисление.СтатусыСверкиПолученныхКодовИСЦЭДМ.СверкаНеВыполнялась");
		Модифицированность = Истина;
		УправлениеФормой();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПровестиПовторнуюСверкуТоваровЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		Объект.СтатусСверкиТоваров = ПредопределенноеЗначение("Перечисление.СтатусыСверкиПолученныхКодовИСЦЭДМ.СверкаНеВыполнялась");
		Модифицированность = Истина;
		УправлениеФормой();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеУОРНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если ЗначениеЗаполнено(УведомлениеОРасхождениях) 
		И ТипЗнч(УведомлениеОРасхождениях) <> Тип("СписокЗначений") Тогда
		
		ПоказатьЗначение(,УведомлениеОРасхождениях);
						
	ИначеЕсли ЗначениеЗаполнено(УведомлениеОРасхождениях) 
		И ТипЗнч(УведомлениеОРасхождениях) = Тип("СписокЗначений") Тогда
		
		ИмяОбщейФормы = РаботаСДокументамиИСМПТККлиентПереопределяемый.ПолучитьИмяОбщейФормыПросмотрСпискаДокументов();
		ОткрытьФорму(ИмяОбщейФормы, 
					Новый Структура("СписокДокументов, Заголовок", УведомлениеОРасхождениях, НСтр("ru='Документы (%КоличествоДокументов%)'")),
					ЭтаФорма,,,, 
					Неопределено, 
					РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ПодключаемыеКоманды

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	
	ОбщегоНазначенияИСМПТККлиентПереопределяемый.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
	
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат) Экспорт
	
	ОбщегоНазначенияИСМПТКПереопределяемый.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	
	ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.ОбновитьКоманды(ЭтотОбъект, Объект);
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
#КонецОбласти