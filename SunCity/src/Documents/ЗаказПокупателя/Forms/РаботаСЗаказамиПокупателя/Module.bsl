
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Пропускаем инициализацию, чтобы гарантировать получение формы при передаче параметра "АвтоТест".
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПараметрыРазмещения = ПодключаемыеКоманды.ПараметрыРазмещения();
	ПараметрыРазмещения.КоманднаяПанель = Элементы.Список.КоманднаяПанель;
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект, ПараметрыРазмещения);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	ИспользоватьПричиныОтменыЗаказовПокупателей = ПолучитьФункциональнуюОпцию("ИспользоватьПричиныОтменыЗаказовПокупателей");
	
	ЗагрузитьНастройкиОтбораПоУмолчанию();
	
	ОбновитьСписокСервер();
	
	ЗаполнитьПраваДоступа();
	
КонецПроцедуры

&НаСервере
Процедура ПередЗагрузкойДанныхИзНастроекНаСервере(Настройки)
	
	ОбновлятьПриОткрытии = Настройки.Получить("ОбновлятьПриОткрытии");
	НастройкиОтбора      = Настройки.Получить("КомпоновщикНастроек.Настройки.Отбор");
	
	Если НЕ НастройкиОтбора = Неопределено Тогда
		
		Для Каждого ЭлементОтбора Из НастройкиОтбора.Элементы Цикл
			Если ТипЗнч(ЭлементОтбора) = Тип("ЭлементОтбораКомпоновкиДанных") Тогда
				КомпоновкаДанныхКлиентСервер.ДобавитьВОтборЭлементОтбора(КомпоновщикНастроек.Настройки.Отбор,ЭлементОтбора);
			Иначе
				КомпоновкаДанныхКлиентСервер.ДобавитьВОтборГруппуЭлементовОтбора(КомпоновщикНастроек.Настройки.Отбор,ЭлементОтбора);
			КонецЕсли;
		КонецЦикла;
		
		НастройкиКомпоновкиДанных = КомпоновщикНастроек.ПолучитьНастройки();
		АдресНастройкиКомпоновкиДанных = ПоместитьВоВременноеХранилище(НастройкиКомпоновкиДанных, УникальныйИдентификатор);
		
		СтрокаОтбора = Строка(НастройкиОтбора);
		
	КонецЕсли;
	
	Если ОбновлятьПриОткрытии Тогда
		
		ОбновитьСписокСервер();
		
	КонецЕсли;
	
	Элементы.СписокОбновлятьПриОткрытии.Пометка = ОбновлятьПриОткрытии;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ОбновитьСписок(Команда)
	
	ОбновитьСписокСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьОтбор(Команда)
	
	// Открыть редактор настроек схемы компоновки данных.
	ЗаголовокФормыНастройкиСхемыКомпоновкиДанных = НСтр("ru = 'Работа с заказами покупателя (отбор)'");
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("НеПомещатьНастройкиВСхемуКомпоновкиДанных", Истина);
	ПараметрыФормы.Вставить("НеРедактироватьСхемуКомпоновкиДанных"     , Истина);
	ПараметрыФормы.Вставить("НеНастраиватьУсловноеОформление"          , Истина);
	ПараметрыФормы.Вставить("НеНастраиватьВыбор"                       , Истина);
	ПараметрыФормы.Вставить("НеНастраиватьПорядок"                     , Истина);
	ПараметрыФормы.Вставить("НеНастраиватьПараметры"                   , Истина);
	
	ПараметрыФормы.Вставить("АдресСхемыКомпоновкиДанных"    , АдресСхемыКомпоновкиДанных);
	ПараметрыФормы.Вставить("АдресНастроекКомпоновкиДанных" , АдресНастройкиКомпоновкиДанных);
	ПараметрыФормы.Вставить("УникальныйИдентификатор"       , УникальныйИдентификатор);
	ПараметрыФормы.Вставить("Заголовок"                     , ЗаголовокФормыНастройкиСхемыКомпоновкиДанных);
	
	ОбработчикОповещения= Новый ОписаниеОповещения("ОповещениеОткрытьФормуУпрощеннойНастройкиСКД", ЭтотОбъект);
	Режим = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
	ОткрытьФорму("ОбщаяФорма.УпрощеннаяНастройкаСхемыКомпоновкиДанных", ПараметрыФормы,,,,, ОбработчикОповещения, Режим);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновлятьПриОткрытии(Команда)
	
	ОбновлятьПриОткрытии = Не ОбновлятьПриОткрытии;
	
	Элементы.СписокОбновлятьПриОткрытии.Пометка = ОбновлятьПриОткрытии;
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьДокумент(Команда)
	
	ОткрытьФорму("Документ.ЗаказПокупателя.ФормаОбъекта");
	
КонецПроцедуры

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ЗаказыНаДоставку(Команда)
	
	ОчиститьСообщения();
	СервисДоставкиКлиент.ОткрытьФормуСпискаЗаказовНаДоставку();
КонецПроцедуры

&НаКлиенте
Процедура ТрекерЗаказов(Команда)
	
	ОчиститьСообщения();
	СервисДоставкиКлиент.ОткрытьФормуОтслеживанияЗаказа();
КонецПроцедуры

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Элементы.Список);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат) Экспорт
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Элементы.Список, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Элементы.Список);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура ОповещениеОткрытьФормуУпрощеннойНастройкиСКД(РезультатОткрытияФормы, ДополнительныеПараметры) Экспорт
	
	Если НЕ РезультатОткрытияФормы = Неопределено Тогда
		УстановитьНастройкиКомпоновкиДанных(РезультатОткрытияФормы);
	КонецЕсли;
	
	ОбновитьСписокСервер();
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеОткрытьФормуВыбораПричиныОтменыЗаказовПокупателей(РезультатОткрытияФормы, ДополнительныеПараметры) Экспорт
	
	Если ЗначениеЗаполнено(РезультатОткрытияФормы) Тогда
		ПричинаОтмены = РезультатОткрытияФормы;
		ДополнительныеПараметры.СтруктураПараметры.Вставить("ПричинаОтмены", ПричинаОтмены);
		ОткрытьЗаказПокупателяСДействием(ДополнительныеПараметры.СтруктураПараметры);
	КонецЕсли;
	
КонецПроцедуры

// Процедура выполняет загрузку настроек отбора из настроек по умолчанию.
//
&НаСервере
Процедура ЗагрузитьНастройкиОтбораПоУмолчанию()

	УстановитьПривилегированныйРежим(Истина);

	СхемаКомпоновкиДанных = Документы.ЗаказПокупателя.ПолучитьМакет("РаботаСЗаказамиПокупателя");

	АдресСхемыКомпоновкиДанных = ПоместитьВоВременноеХранилище(СхемаКомпоновкиДанных, Новый УникальныйИдентификатор);
	КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(АдресСхемыКомпоновкиДанных));
	КомпоновщикНастроек.ЗагрузитьНастройки(СхемаКомпоновкиДанных.НастройкиПоУмолчанию);
	КомпоновщикНастроек.Восстановить(СпособВосстановленияНастроекКомпоновкиДанных.ПроверятьДоступность);

	АдресНастройкиКомпоновкиДанных = ПоместитьВоВременноеХранилище(КомпоновщикНастроек.ПолучитьНастройки(), УникальныйИдентификатор);
	
	СтрокаОтбора = НСтр("ru = '<Без отбора>'"); 
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьСписокСервер()
	
	СтруктураПараметров = Новый Структура();
	СтруктураПараметров.Вставить("ИспользоватьРезервированиеПоЗаказамПокупателей", ПолучитьФункциональнуюОпцию("ИспользоватьРезервированиеПоЗаказамПокупателей"));
	
	Если ПолучитьИзВременногоХранилища(АдресНастройкиКомпоновкиДанных) <> Неопределено Тогда
		КомпоновщикНастроек.ЗагрузитьНастройки(ПолучитьИзВременногоХранилища(АдресНастройкиКомпоновкиДанных));
	КонецЕсли;
	
	СтрокаОтбора = Строка(КомпоновщикНастроек.Настройки.Отбор);
	
	Если НЕ ЗначениеЗаполнено(СтрокаОтбора) Тогда
		СтрокаОтбора = НСтр("ru = '<Без отбора>'"); 
	КонецЕсли;
	
	Для Каждого Параметр Из СтруктураПараметров Цикл
		ПараметрКомпоновкиДанных = Новый ПараметрКомпоновкиДанных(Параметр.Ключ);
		Если ПараметрКомпоновкиДанных <> Неопределено Тогда
			ПараметрКомпоновкиДанных = КомпоновщикНастроек.Настройки.ПараметрыДанных.НайтиЗначениеПараметра(ПараметрКомпоновкиДанных);
			Если ПараметрКомпоновкиДанных <> Неопределено Тогда
				ПараметрКомпоновкиДанных.Значение = Параметр.Значение;
				ПараметрКомпоновкиДанных.Использование = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	СКД = ПолучитьИзВременногоХранилища(АдресСхемыКомпоновкиДанных);
	
	ТаблицаЗначенийРезультат = Новый ТаблицаЗначений();
	
	УстановитьПривилегированныйРежим(Истина);
	// Вывод
	КомпоновщикМакетаКомпоновкиДанных = Новый КомпоновщикМакетаКомпоновкиДанных();
	Макет = КомпоновщикМакетаКомпоновкиДанных.Выполнить(СКД, КомпоновщикНастроек.ПолучитьНастройки(),,,Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	ВыводВКоллекциюЗначений = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений();
	ВыводВКоллекциюЗначений.УстановитьОбъект(ТаблицаЗначенийРезультат);
	ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных();
	ПроцессорКомпоновкиДанных.Инициализировать(Макет,,, Истина);
	ВыводВКоллекциюЗначений.Вывести(ПроцессорКомпоновкиДанных);
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Список.Очистить();
	
	ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ТаблицаЗначенийРезультат, Список);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьНастройкиКомпоновкиДанных(АдресХранилищаНастройкиКомпоновщика)
	
	НастройкиКомпоновкиДанных = ПолучитьИзВременногоХранилища(АдресХранилищаНастройкиКомпоновщика);
	АдресНастройкиКомпоновкиДанных = ПоместитьВоВременноеХранилище(НастройкиКомпоновкиДанных, УникальныйИдентификатор);
	
	СтрокаОтбора = Строка(НастройкиКомпоновкиДанных.Отбор);
	
	Если НЕ ЗначениеЗаполнено(СтрокаОтбора) Тогда
		СтрокаОтбора = НСтр("ru = '<Без отбора>'"); 
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	// Вставить содержимое обработчика.
	
	СтрокаСписка = Список.НайтиПоИдентификатору(ВыбраннаяСтрока);
	
	Если НЕ СтрокаСписка = Неопределено 
		И НЕ Поле = Неопределено 
		И ОбрабатываемоеДействие(Поле.Имя) Тогда
		ЗаказПокупателя = СтрокаСписка.Ссылка;
		СтрокаДействие = СтрЗаменить(Поле.Имя, "Список", "");
		
		СтруктураПараметры = Новый Структура;
		СтруктураПараметры.Вставить("Ключ", ЗаказПокупателя);
		
		Если СтрокаДействие = "Ссылка" Тогда
			ОткрытьЗаказПокупателяСДействием(СтруктураПараметры);
			Возврат;
		КонецЕсли;
		
		ЗначениеПоля = СтрокаСписка[СтрокаДействие];
		Если (ЗначениеПоля = 1 ИЛИ ЗначениеПоля = 2) 
			И ЗначениеЗаполнено(ЗаказПокупателя)Тогда
			СтруктураПараметры.Вставить("Действие", СтрокаДействие);
			
			Если СтрокаДействие = "ДействиеОтмена" Тогда
				ПричинаОтмены = ПредопределенноеЗначение("Справочник.ПричиныОтменыЗаказовПокупателей.ПустаяСсылка");
				Если ИспользоватьПричиныОтменыЗаказовПокупателей Тогда
                    
                    // &ЗамерПроизводительности
                    ОценкаПроизводительностиРТКлиент.НачатьЗамер(
                             Истина, "Справочник.ПричиныОтменыЗаказовПокупателей.Форма.ФормаВыбора.Открытие");

					ДополнительныеПараметры = Новый Структура;
					ДополнительныеПараметры.Вставить("СтруктураПараметры", СтруктураПараметры);
					ОбработчикОповещения = Новый ОписаниеОповещения("ОповещениеОткрытьФормуВыбораПричиныОтменыЗаказовПокупателей", ЭтотОбъект, ДополнительныеПараметры);
					Режим = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
					ОткрытьФорму("Справочник.ПричиныОтменыЗаказовПокупателей.ФормаВыбора",,,,,, ОбработчикОповещения, Режим); 
					
				Иначе
					СтруктураПараметры.Вставить("ПричинаОтмены", ПричинаОтмены);
					ОткрытьЗаказПокупателяСДействием(СтруктураПараметры);
				КонецЕсли;
			ИначеЕсли СтрокаДействие = "ДействиеПродажа" Тогда
				Если ДоступностьЧекаККМ Тогда
					ПараметрыФормы = Новый Структура;
					ПараметрыФормы.Вставить("Основание", ЗаказПокупателя);
					ОткрытьФорму("Документ.ЧекККМ.ФормаОбъекта", ПараметрыФормы);
				ИначеЕсли ДоступностьРеализацииТоваров Тогда
					ПараметрыФормы = Новый Структура;
					ПараметрыФормы.Вставить("Основание", ЗаказПокупателя);
					ОткрытьФорму("Документ.РеализацияТоваров.ФормаОбъекта", ПараметрыФормы);
				КонецЕсли;
				Возврат;
			Иначе
				ОткрытьЗаказПокупателяСДействием(СтруктураПараметры);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьЗаказПокупателяСДействием(СтруктураПараметры)
	
	ОткрытьФорму("Документ.ЗаказПокупателя.ФормаОбъекта", СтруктураПараметры);
	
КонецПроцедуры

&НаКлиенте
Функция ОбрабатываемоеДействие(ИмяПоля)
	
	Если ИмяПоля = "СписокСсылка"
		ИЛИ ИмяПоля = "СписокДействиеСогласование" 
		ИЛИ ИмяПоля = "СписокДействиеРезерв" 
		ИЛИ ИмяПоля = "СписокДействиеПродажа" 
		ИЛИ ИмяПоля = "СписокДействиеОтмена" 
		ИЛИ ИмяПоля = "СписокДействиеЗакрытие" Тогда
		
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции // ОбрабатываемоеДействие()

&НаСервере
Процедура ЗаполнитьПраваДоступа()
	
	ДоступностьЧекаККМ = Пользователи.РолиДоступны("ДобавлениеИзменениеЧековККМ, ПолныеПрава");
	ДоступностьРеализацииТоваров = Пользователи.РолиДоступны("ДобавлениеИзменениеРеализацииТоваров, ПолныеПрава");
	
КонецПроцедуры

#КонецОбласти


