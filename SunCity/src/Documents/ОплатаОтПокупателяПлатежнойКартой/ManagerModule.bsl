#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Инициализирует таблицы значений, содержащие данные табличных частей документа.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.АктОРасхожденияхПриПриемкеТоваров - документ для инициализации данных.
//  СтруктураДополнительныеСвойства - Структура - структура дополнительных свойств.
//
Процедура ИнициализироватьДанныеДокумента(ДокументСсылка, СтруктураДополнительныеСвойства) Экспорт
	
	Запрос = Новый Запрос();
	
	ТекстЗапроса = ТекстЗапросаТаблицаРасчетыПоЭквайрингу() + ПолучитьРазделитьЗапросов()
				   + ТекстЗапросаТаблицаРасчетыСКлиентами();
	
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	ИспользоватьРасчетыСКлиентами = ПолучитьФункциональнуюОпцию("ИспользоватьРасчетыСКлиентами");
	Запрос.УстановитьПараметр("ИспользоватьРасчетыСКлиентами", ИспользоватьРасчетыСКлиентами);
	
	МассивПустыхДокументовРасчета = Новый Массив;
	МассивПустыхДокументовРасчета.Добавить(Документы.РеализацияТоваров.ПустаяСсылка());
	МассивПустыхДокументовРасчета.Добавить(Документы.ЧекККМ.ПустаяСсылка());
	МассивПустыхДокументовРасчета.Добавить(Документы.ВозвратТоваровОтПокупателя.ПустаяСсылка());
	МассивПустыхДокументовРасчета.Добавить(Неопределено);
	
	Запрос.УстановитьПараметр("МассивПустыхДокументовРасчета", МассивПустыхДокументовРасчета);
	МассивРезультатов = Запрос.ВыполнитьПакет();
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаРасчетыПоЭквайрингу", МассивРезультатов[0].Выгрузить());
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаРасчетыСКлиентами",   МассивРезультатов[1].Выгрузить());
	
КонецПроцедуры

// Подготавливает данные для пробития чека.
// 
// Параметры:
//  ДокументСсылка - ДокументСсылка - документ для пробития.
//  РаспределениеВыручкиПоСекциям - Соответствие - соответсвие распределения выручки.
//  НомерЧека - Число - номер чека.
//
// Возвращаемое значение:
//  Структура - данные для пробития чека.
//
Функция ПодготовитьДанныеДляПробитияЧека(ДокументСсылка, РаспределениеВыручкиПоСекциям, НомерЧека) Экспорт
	
	ОбщиеПараметры = МенеджерОборудованияКлиентСервер.ПараметрыОперацииФискализацииЧека();
	
	// Общие параметры чека
	СтруктураРеквизитов = Новый Структура;
	СтруктураРеквизитов.Вставить("КассаККМ");
	СтруктураРеквизитов.Вставить("Магазин");
	СтруктураРеквизитов.Вставить("Организация");
	СтруктураРеквизитов.Вставить("Дата");
	СтруктураРеквизитов.Вставить("Ответственный");
	СтруктураРеквизитов.Вставить("ДоговорКонтрагента");
	СтруктураРеквизитов.Вставить("СистемаНалогообложения");
	СтруктураРеквизитов.Вставить("Контрагент");
	СтруктураРеквизитов.Вставить("СуммаДокумента");
	СтруктураРеквизитов.Вставить("Телефон");
	СтруктураРеквизитов.Вставить("АдресЭП");
	СтруктураРеквизитов.Вставить("ДокументОснование");
	СтруктураРеквизитов.Вставить("ЗаказПокупателя");
	СтруктураРеквизитов.Вставить("ХозяйственнаяОперация");
	СтруктураРеквизитов.Вставить("ВидОплаты");
	СтруктураРеквизитов.Вставить("ТипОплаты");
	РеквизитыДокумента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДокументСсылка, СтруктураРеквизитов);
	
	СтруктураРеквизитов = Новый Структура;
	СтруктураРеквизитов.Вставить("НаименованиеПолное");
	СтруктураРеквизитов.Вставить("ИНН");
	СтруктураРеквизитов.Вставить("КПП");
	СтруктураРеквизитов.Вставить("СерияСвидетельстваПоНДС");
	СтруктураРеквизитов.Вставить("НомерСвидетельстваПоНДС");
	РеквизитыОрганизация = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(РеквизитыДокумента.Организация, СтруктураРеквизитов);
	
	СтруктураРеквизитов = Новый Структура;
	СтруктураРеквизитов.Вставить("ЭлектронныйЧекSMSПередаютсяПрограммой1С");
	СтруктураРеквизитов.Вставить("ЭлектронныйЧекEmailПередаютсяПрограммой1С");
	СтруктураРеквизитов.Вставить("СерийныйНомер");
	СтруктураРеквизитов.Вставить("Магазин");
	СтруктураРеквизитов.Вставить("Код");
	СтруктураРеквизитов.Вставить("СпособФорматноЛогическогоКонтроля", "ПодключаемоеОборудование.СпособФорматноЛогическогоКонтроля");
	СтруктураРеквизитов.Вставить("ДопустимоеРасхождениеФорматноЛогическогоКонтроля", "ПодключаемоеОборудование.ДопустимоеРасхождениеФорматноЛогическогоКонтроля");
	СтруктураРеквизитов.Вставить("ТипОборудования", "ПодключаемоеОборудование.ТипОборудования");
	РеквизитыКассыККМ = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(РеквизитыДокумента.КассаККМ, СтруктураРеквизитов);
			
	СтруктураРеквизитов = Новый Структура;
	СтруктураРеквизитов.Вставить("Наименование");
	СтруктураРеквизитов.Вставить("ИНН");
	РеквизитыКассир = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(РеквизитыДокумента.Ответственный.ФизическоеЛицо, СтруктураРеквизитов);
	
	СтруктураРеквизитов = Новый Структура;
	СтруктураРеквизитов.Вставить("ИНН", "Контрагент.ИНН");
	СтруктураРеквизитов.Вставить("КонтрагентЮрФизЛицо", "Контрагент.ЮрФизЛицо");
	РеквизитыКонтрагент = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДокументСсылка, СтруктураРеквизитов);
	Если РеквизитыКонтрагент.КонтрагентЮрФизЛицо = Перечисления.ЮрФизЛицо.ФизЛицо Тогда
		//для контрагентов - физических лиц в качестве ИИН используется ИИН Физ.лица
		СтруктураРеквизитов = Новый Структура;
		СтруктураРеквизитов.Вставить("ИНН", "Контрагент.ФизЛицо.ИНН");
		РеквизитыКонтрагент = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДокументСсылка, СтруктураРеквизитов);
	КонецЕсли;
	ОбщиеПараметры.ПолучательИИН = РеквизитыКонтрагент.ИНН;

	ОбщиеПараметры.СистемаНалогообложения = РеквизитыДокумента.СистемаНалогообложения;
	
	Если РеквизитыДокумента.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПоступлениеОплатыОтКлиента Тогда
		ОбщиеПараметры.ТипРасчета = Перечисления.ТипыРасчетаДенежнымиСредствами.ПриходДенежныхСредств;
		Если ЗначениеЗаполнено(РеквизитыДокумента.ДоговорКонтрагента) Тогда
			НомерСекции = РаспределениеВыручкиПоСекциям.СоответствиеДоговоровСекциям.Получить(РеквизитыДокумента.ДоговорКонтрагента);
		Иначе
			НомерСекции = РаспределениеВыручкиПоСекциям.НомерСекцииДляОплатыКартой;
		КонецЕсли;
		Если ОбщиеПараметры.СистемаНалогообложения = Перечисления.ТипыСистемНалогообложенияККТ.ОСН Тогда
			ЗначСтавкиНДС = УчетНДС.СтавкаНДСПоУмолчанию(ДокументСсылка.Дата);
			СтавкаНДС = ПодключаемоеОборудованиеРТ.СтавкаНДСВФорматеБПО(ЗначСтавкиНДС, Истина);	
			ОсвобожденныйОборотНДС = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЗначСтавкиНДС, "ДляОсвобожденногоОборота");
		Иначе
			СтавкаНДС = Неопределено;
			ОсвобожденныйОборотНДС = Ложь;
		КонецЕсли;
		ПринятоОт = ОбщегоНазначенияРТВызовСервера.ЗначениеРеквизитаОбъекта(РеквизитыДокумента.Контрагент, "НаименованиеПолное");
		Наименование = НСтр("ru = 'Оплата картой от:'") + " " + ПринятоОт + Символы.ПС
						+ НСтр("ru = 'Основание:'") + " " + РеквизитыДокумента.ДокументОснование;
	Иначе
		ОбщиеПараметры.ТипРасчета = Перечисления.ТипыРасчетаДенежнымиСредствами.ВозвратДенежныхСредств;
		Если ЗначениеЗаполнено(РеквизитыДокумента.ДоговорКонтрагента) Тогда
			НомерСекции = РаспределениеВыручкиПоСекциям.СоответствиеДоговоровСекциям.Получить(РеквизитыДокумента.ДоговорКонтрагента);
		Иначе
			НомерСекции = РаспределениеВыручкиПоСекциям.НомерСекцииДляВозвратаОплатыНаКарту;
		КонецЕсли;
		Если ОбщиеПараметры.СистемаНалогообложения = Перечисления.ТипыСистемНалогообложенияККТ.ОСН Тогда
			ЗначСтавкиНДС = УчетНДС.СтавкаНДСПоУмолчанию(ДокументСсылка.Дата);
			СтавкаНДС = ПодключаемоеОборудованиеРТ.СтавкаНДСВФорматеБПО(ЗначСтавкиНДС, Ложь);	
			ОсвобожденныйОборотНДС = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЗначСтавкиНДС, "ДляОсвобожденногоОборота");
		Иначе
			СтавкаНДС = Неопределено;
			ОсвобожденныйОборотНДС = Ложь;
		КонецЕсли;
		Вернуть = ОбщегоНазначенияРТВызовСервера.ЗначениеРеквизитаОбъекта(РеквизитыДокумента.Контрагент, "НаименованиеПолное");
		Наименование = НСтр("ru = 'Возврат на карту:'") + " " + Вернуть + Символы.ПС
						+ НСтр("ru = 'Основание:'") + " " + РеквизитыДокумента.ДокументОснование
	КонецЕсли;
	
	ОбщиеПараметры.Электронно = Ложь;
	
	Если ЗначениеЗаполнено(РеквизитыДокумента.Телефон) Тогда
		Если РеквизитыКассыККМ.ЭлектронныйЧекSMSПередаютсяПрограммой1С Тогда
			ОбщиеПараметры.Отправляет1СSMS = Истина;
		КонецЕсли;
		Телефон = РеквизитыДокумента.Телефон;
		Если СтрНайти(Телефон, "+7") = 1 ИЛИ (СтрНайти(Телефон, "8") = 1 И СтрДлина(Телефон) = 11) Тогда
			ОбщиеПараметры.ПокупательНомер = Телефон;
		Иначе
			ОбщиеПараметры.ПокупательНомер = "+7" + Телефон;
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(РеквизитыДокумента.АдресЭП) Тогда
		Если РеквизитыКассыККМ.ЭлектронныйЧекEmailПередаютсяПрограммой1С Тогда
			ОбщиеПараметры.Отправляет1СEmail = Истина;
			СистемнаяУчетнаяЗапись = РаботаСПочтовымиСообщениями.СистемнаяУчетнаяЗапись();
			Если ЗначениеЗаполнено(СистемнаяУчетнаяЗапись) Тогда
				ОбщиеПараметры.ОтправительEmail = СистемнаяУчетнаяЗапись.АдресЭлектроннойПочты;
			КонецЕсли;
		КонецЕсли;
		ОбщиеПараметры.ПокупательEmail = РеквизитыДокумента.АдресЭП;
	КонецЕсли;
	
	// Параметры необходимые для чека ЕНВД на принтере чеков
	ОбщиеПараметры.ДокументОснование = ДокументСсылка;
	
	ОбщиеПараметры.Кассир          = РеквизитыКассир.Наименование;
	ОбщиеПараметры.КассирИНН       = РеквизитыКассир.ИНН;
	
	ОбщиеПараметры.Организация    = РеквизитыДокумента.Организация;
	ОбщиеПараметры.ОрганизацияНазвание = РеквизитыОрганизация.НаименованиеПолное;
	ОбщиеПараметры.ОрганизацияИНН = РеквизитыОрганизация.ИНН;
	ОбщиеПараметры.ОрганизацияКПП = РеквизитыОрганизация.КПП;
	ОбщиеПараметры.НомерКассы     = РеквизитыКассыККМ.Код;
	ОбщиеПараметры.НомерЧека      = НомерЧека;
	ОбщиеПараметры.ТорговыйОбъект = РеквизитыДокумента.Магазин;

	ОбщиеПараметры.НомерСмены = 1;
	
	СведенияООрганизации = ФормированиеПечатныхФормСервер.СведенияОЮрФизЛице(РеквизитыДокумента.Организация, РеквизитыДокумента.Дата);
	АдресМагазина = ОбщегоНазначенияРТ.АдресМагазина(РеквизитыКассыККМ.Магазин);
	
	СерийныйНомер = РеквизитыКассыККМ.СерийныйНомер;
	Если НЕ ЗначениеЗаполнено(СерийныйНомер) Тогда
		СерийныйНомер = "1";
	КонецЕсли;
	
	ОбщиеПараметры.АдресРасчетов = АдресМагазина;
	ОбщиеПараметры.МестоРасчетов = Строка(РеквизитыКассыККМ.Магазин) + " " + АдресМагазина;
	ОбщиеПараметры.АдресМагазина = АдресМагазина;
	ОбщиеПараметры.НаименованиеМагазина = Строка(РеквизитыКассыККМ.Магазин);
	ОбщиеПараметры.СерийныйНомер = СерийныйНомер;
	
	ПодключаемоеОборудованиеРТ.ЗаполнитьДанныеПокупателя(ОбщиеПараметры, РеквизитыДокумента);
	
	ПодключаемоеОборудованиеРТ.ЗаполнитьПараметрыПлатежногоДоговора(ОбщиеПараметры, 
																	РеквизитыДокумента.ДоговорКонтрагента,
																	РеквизитыДокумента.СуммаДокумента);
	
	Если ЗначениеЗаполнено(РеквизитыДокумента.ДоговорКонтрагента) Тогда
		НомерСекции = РаспределениеВыручкиПоСекциям.СоответствиеДоговоровСекциям.Получить(РеквизитыДокумента.ДоговорКонтрагента);
	Иначе
		НомерСекции = 1;
	КонецЕсли;
	
	ПараметрыДокумента = Новый Структура;
	ПараметрыДокумента.Вставить("НомерСекции", НомерСекции);
	
	ОбщиеПараметры.КассаККМ = РеквизитыДокумента.КассаККМ;
	
	РасшифровкаПлатежа = РасшифровкаПлатежа(ДокументСсылка);
	
	СуммаДокументовРасчетов = 0;
	ДобавленыДанныеПоЗаказу = Ложь;
	Для Каждого СтрокаПлатежа Из РасшифровкаПлатежа Цикл
		
		ПараметрыДокумента.Вставить("ПризнакСпособаРасчета", СтрокаПлатежа.ПризнакСпособаРасчета);
		Если ЗначениеЗаполнено(СтрокаПлатежа.ДокументРасчетовСКонтрагентом)
			И ОбщегоНазначенияРТ.ЕстьТЧОбъекта("Товары", СтрокаПлатежа.ДокументРасчетовСКонтрагентом.Метаданные()) Тогда
			ПодключаемоеОборудованиеРТ.ДобавитьСтрокиДляФискализацииТоваров(СтрокаПлатежа.ДокументРасчетовСКонтрагентом,
				ПараметрыДокумента, ОбщиеПараметры, СуммаДокументовРасчетов);
		ИначеЕсли ЗначениеЗаполнено(РеквизитыДокумента.ЗаказПокупателя) И НЕ ДобавленыДанныеПоЗаказу Тогда
			ПодключаемоеОборудованиеРТ.ДобавитьСтрокиДляФискализацииТоваров(РеквизитыДокумента.ЗаказПокупателя,
				ПараметрыДокумента, ОбщиеПараметры, СуммаДокументовРасчетов);
			ДобавленыДанныеПоЗаказу = Истина;
		Иначе
			СтрокаПозицииЧека = МенеджерОборудованияКлиентСервер.ПараметрыФискальнойСтрокиЧека(); 
			
			СтрокаПозицииЧека.Наименование = Наименование;
			СтрокаПозицииЧека.Количество     = 1;
			СтрокаПозицииЧека.Цена           = СтрокаПлатежа.Сумма;
			СтрокаПозицииЧека.ЦенаСоСкидками = СтрокаПлатежа.Сумма;
			СтрокаПозицииЧека.Сумма          = СтрокаПлатежа.Сумма;
			СтрокаПозицииЧека.НомерСекции    = НомерСекции;
			СтрокаПозицииЧека.СтавкаНДС      = СтавкаНДС;
			СтрокаПозицииЧека.ОсвобожденныйОборотНДС = ОсвобожденныйОборотНДС;
			
			СтрокаПозицииЧека.ПризнакСпособаРасчета = СтрокаПлатежа.ПризнакСпособаРасчета;
			СтрокаПозицииЧека.ПризнакПредметаРасчета = Перечисления.ПризнакиПредметаРасчета.ПлатежВыплата;
			
			ПодключаемоеОборудованиеРТ.ЗаполнитьПараметрыПлатежногоДоговораВСтроке(ОбщиеПараметры, СтрокаПозицииЧека);
			
			ОбщиеПараметры.ПозицииЧека.Добавить(СтрокаПозицииЧека);
			СуммаДокументовРасчетов = СуммаДокументовРасчетов + СтрокаПлатежа.Сумма;
		КонецЕсли;
		
	КонецЦикла;
	
	Если РеквизитыКассыККМ.ТипОборудования = Перечисления.ТипыПодключаемогоОборудования.ККТ Тогда
		// При необходимости будет проведен формато-логический контроль
		ОбщиеПараметры.СпособФорматноЛогическогоКонтроля = РеквизитыКассыККМ.СпособФорматноЛогическогоКонтроля;
		ОбщиеПараметры.ДопустимоеРасхождениеФорматноЛогическогоКонтроля = РеквизитыКассыККМ.ДопустимоеРасхождениеФорматноЛогическогоКонтроля;
		Если ФорматноЛогическийКонтрольКлиентСервер.НуженФорматноЛогическийКонтроль(ОбщиеПараметры) Тогда
			ФорматноЛогическийКонтрольКлиентСервер.ПровестиФорматноЛогическийКонтроль(ОбщиеПараметры);
		КонецЕсли;
	КонецЕсли;
	
	СтрокаНаименованиеОплаты = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Оплата по карте %1'"), РеквизитыДокумента.ВидОплаты);
	СтрокаОплаты = Новый Структура();
	МобильныйПлатеж = РеквизитыДокумента.ТипОплаты = 1;
	Если МобильныйПлатеж Тогда
		СтрокаОплаты.Вставить("ТипОплаты", Перечисления.ТипыОплатыККТ.МобильныйПлатеж);
		СтрокаНаименованиеОплаты = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Мобильный платеж %1'"), РеквизитыДокумента.ВидОплаты);
	Иначе
		СтрокаОплаты.Вставить("ТипОплаты", Перечисления.ТипыОплатыККТ.Электронно);
		СтрокаНаименованиеОплаты = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Оплата по карте %1'"), РеквизитыДокумента.ВидОплаты);
	КонецЕсли;
	СтрокаОплаты.Вставить("Наименование", СтрокаНаименованиеОплаты);
	СтрокаОплаты.Вставить("Сумма", РеквизитыДокумента.СуммаДокумента);
	ОбщиеПараметры.ТаблицаОплат.Добавить(СтрокаОплаты);
	
	Если ПолучитьФункциональнуюОпцию("ОтключенныйФункционал") Тогда
	РазницаСумм = СуммаДокументовРасчетов - РеквизитыДокумента.СуммаДокумента;
	Если РазницаСумм > 0 Тогда
		СтрокаОплаты = Новый Структура();
		СтрокаОплаты.Вставить("ТипОплаты", Перечисления.ТипыОплатыККТ.Постоплата);
		СтрокаОплаты.Вставить("Наименование", НСтр("ru = 'Постоплата'"));
		СтрокаОплаты.Вставить("Сумма", РазницаСумм);
		ОбщиеПараметры.ТаблицаОплат.Добавить(СтрокаОплаты);
	КонецЕсли;
	КонецЕсли;
		
	Если СуммаДокументовРасчетов <> РеквизитыДокумента.СуммаДокумента Тогда
		// суммы не совпадают, поэтому отражаем в чеке одной строкой
		ОбщиеПараметры.ПозицииЧека.Очистить();
		
		Для Каждого СтрокаПлатежа Из РасшифровкаПлатежа Цикл
			
			СтрокаПозицииЧека = МенеджерОборудованияКлиентСервер.ПараметрыФискальнойСтрокиЧека(); 
			
			СтрокаПозицииЧека.Наименование = Наименование;
			СтрокаПозицииЧека.Количество     = 1;
			СтрокаПозицииЧека.Цена           = СтрокаПлатежа.Сумма;
			СтрокаПозицииЧека.ЦенаСоСкидками = СтрокаПлатежа.Сумма;
			СтрокаПозицииЧека.Сумма          = СтрокаПлатежа.Сумма;
			СтрокаПозицииЧека.НомерСекции    = НомерСекции;
			СтрокаПозицииЧека.СтавкаНДС      = СтавкаНДС;
			СтрокаПозицииЧека.ОсвобожденныйОборотНДС = ОсвобожденныйОборотНДС;
			
			СтрокаПозицииЧека.ПризнакСпособаРасчета = Перечисления.ПризнакиСпособаРасчета.Аванс;
			СтрокаПозицииЧека.ПризнакПредметаРасчета = Перечисления.ПризнакиПредметаРасчета.ПлатежВыплата;
			
			ОбщиеПараметры.ПозицииЧека.Добавить(СтрокаПозицииЧека);
			СуммаДокументовРасчетов = СуммаДокументовРасчетов + СтрокаПлатежа.Сумма;
			
		КонецЦикла;
	КонецЕсли;
	
	Возврат ОбщиеПараметры;
	
КонецФункции // ПодготовитьДанныеДляПробитияЧека()

// Процедура заполняет массивы реквизитов, зависимых от хозяйственной операции документа.
// Параметры:
//           ХозяйственнаяОперация - ПеречислениеСсылка.ХозяйственныеОперации - Хоз. операции документа для которого
//                                                                              необходимо получить массив реквизитов.
//           МассивВсехРеквизитов - Неопределено - Выходной параметр с типом Массив в который будут помещены имена всех
//                                                 реквизитов документов.
//           МассивРеквизитовОперации - Неопределено - Выходной параметр с типом Массив в который будут помещены имена
//                                                     реквизитов по виду операции документа.
//
Процедура ЗаполнитьИменаРеквизитовПоХозяйственнойОперации(ХозяйственнаяОперация, МассивВсехРеквизитов, МассивРеквизитовОперации) Экспорт
	
	МассивВсехРеквизитов = Новый Массив;
	МассивВсехРеквизитов.Добавить("ХозяйственнаяОперация");
	МассивВсехРеквизитов.Добавить("Контрагент");
	МассивВсехРеквизитов.Добавить("ВидОплаты");
	МассивВсехРеквизитов.Добавить("Магазин");
	МассивВсехРеквизитов.Добавить("ЭквайринговыйТерминал");
	МассивВсехРеквизитов.Добавить("ГруппаЗаказПокупателя");
	МассивВсехРеквизитов.Добавить("РасшифровкаПлатежа.ДокументРасчетовСКонтрагентом");
	МассивВсехРеквизитов.Добавить("РасшифровкаПлатежа.Сумма");
	МассивВсехРеквизитов.Добавить("РасшифровкаПлатежа.ДоговорКонтрагента");
	
	МассивРеквизитовОперации = Новый Массив;
	
	МассивРеквизитовОперации.Добавить("ХозяйственнаяОперация");
	МассивРеквизитовОперации.Добавить("Магазин");
	МассивРеквизитовОперации.Добавить("Контрагент");
	МассивРеквизитовОперации.Добавить("ЭквайринговыйТерминал");
	МассивРеквизитовОперации.Добавить("ВидОплаты");
	МассивРеквизитовОперации.Добавить("РасшифровкаПлатежа.Сумма");
	МассивРеквизитовОперации.Добавить("РасшифровкаПлатежа.ДокументРасчетовСКонтрагентом");
	Если ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПоступлениеОплатыОтКлиента Тогда
		МассивРеквизитовОперации.Добавить("ГруппаЗаказПокупателя");
	ИначеЕсли ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратОплатыКлиенту Тогда
		МассивРеквизитовОперации.Добавить("РасшифровкаПлатежа.ДоговорКонтрагента");
	КонецЕсли;
	
КонецПроцедуры

// Заполненяет признак способа расчета в строке расшифровки платежа.
//
// Параметры:
//  Объект - ДокументОбъект.РасходныйКассовыйОрдер, ДанныеФормыСтруктуры - объект для заполнения признака;
//  СтрокаРасшифровки - СтрокаТабличнойЧасти, ДанныеФормыЭлементКоллекции - строка расшифровки платежа для заполнения.
//
Процедура ЗаполнитьПризнакСпособаРасчетаСтрокиРасшифровки(Объект, СтрокаРасшифровки) Экспорт
	
	ПризнакСпособаРасчета = Перечисления.ПризнакиСпособаРасчета.ПустаяСсылка();
	
	Если Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПоступлениеОплатыОтКлиента Тогда
		Если ЗначениеЗаполнено(СтрокаРасшифровки.ДокументРасчетовСКонтрагентом)
			И (ТипЗнч(СтрокаРасшифровки.ДокументРасчетовСКонтрагентом) = Тип("ДокументСсылка.РеализацияТоваров")
			ИЛИ ТипЗнч(СтрокаРасшифровки.ДокументРасчетовСКонтрагентом) = Тип("ДокументСсылка.ЧекККМ")) Тогда
			ПризнакСпособаРасчета = Перечисления.ПризнакиСпособаРасчета.ОплатаКредита;
		ИначеЕсли ЗначениеЗаполнено(Объект.ЗаказПокупателя) Тогда
			СуммаЗаказа = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ЗаказПокупателя, "СуммаДокумента");
			Если СтрокаРасшифровки.Сумма >= СуммаЗаказа Тогда
				ПризнакСпособаРасчета = Перечисления.ПризнакиСпособаРасчета.ПредоплатаПолная;
			Иначе
				ПризнакСпособаРасчета = Перечисления.ПризнакиСпособаРасчета.ПредоплатаЧастичная;
			КонецЕсли;
		Иначе
			ПризнакСпособаРасчета = Перечисления.ПризнакиСпособаРасчета.Аванс;
		КонецЕсли;
	ИначеЕсли Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратОплатыКлиенту Тогда
		Если ЗначениеЗаполнено(СтрокаРасшифровки.ДокументРасчетовСКонтрагентом) Тогда
			Если ТипЗнч(СтрокаРасшифровки.ДокументРасчетовСКонтрагентом) = Тип("ДокументСсылка.ОплатаОтПокупателяПлатежнойКартой") Тогда
				ПризнакСпособаРасчета = Перечисления.ПризнакиСпособаРасчета.Аванс;
			ИначеЕсли СтрокаРасшифровки.Сумма >= ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрокаРасшифровки.ДокументРасчетовСКонтрагентом, "СуммаДокумента") Тогда
				ПризнакСпособаРасчета = Перечисления.ПризнакиСпособаРасчета.ПередачаСПолнойОплатой;
			Иначе
				ПризнакСпособаРасчета = Перечисления.ПризнакиСпособаРасчета.ПередачаСЧастичнойОплатой;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	СтрокаРасшифровки.ПризнакСпособаРасчета = ПризнакСпособаРасчета;
	
КонецПроцедуры

#Область СтандарныеПодсистемы

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт

	Ограничение.Текст =
	"РазрешитьЧтениеИзменение
	|ГДЕ
	|	ЗначениеРазрешено(Магазин)";

КонецПроцедуры

// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт
	
КонецПроцедуры

#КонецОбласти

// Заполняет Магазин по данным объекта.
//
// Параметры:
//  Объект - ДокументОбъект.ОплатаОтПокупателяПлатежнойКартой, ДанныеФормыСтруктуры - объект для заполнения признака;
//
Процедура ЗаполнитьДанныеПоЭквайринговомуТерминалу(Объект) Экспорт
	
	Если ЗначениеЗаполнено(Объект.ЭквайринговыйТерминал) Тогда
		РеквизитыЭквайринговогоТерминала = Справочники.ЭквайринговыеТерминалы.РеквизитыЭквайринговогоТерминала(Объект.ЭквайринговыйТерминал);
		Объект.Организация = РеквизитыЭквайринговогоТерминала.Организация;
		Объект.Эквайрер    = РеквизитыЭквайринговогоТерминала.Эквайрер;
		
		Если НЕ ЗначениеЗаполнено(Объект.ВидОплаты) Тогда
			СтруктураПоУмолчанию = Справочники.ЭквайринговыеТерминалы.ВидОплатыПоУмолчанию(Объект.ЭквайринговыйТерминал);
			Объект.ВидОплаты     = СтруктураПоУмолчанию.ВидОплаты;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Объект.ВидОплаты) Тогда
			ПроцентКомиссии = ЭквайрингВызовСервера.ПолучитьПроцентКомиссииДляПлатежнойКарты(Объект.ЭквайринговыйТерминал, Объект.ВидОплаты);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ТекстЗапросаТаблицаРасчетыПоЭквайрингу()
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ДанныеДокумента.Дата КАК Период,
	|	ДанныеДокумента.ЭквайринговыйТерминал КАК ЭквайринговыйТерминал,
	|	ДанныеДокумента.Организация КАК Организация,
	|	ДанныеДокумента.Магазин КАК Магазин,
	|	ДанныеДокумента.ВидОплаты КАК ВидОплаты,
	|	ДанныеДокумента.СуммаДокумента КАК СуммаОперацийПродажи,
	|	ВЫБОР
	|		КОГДА ДанныеДокумента.СуммаКомиссии > 0
	|			ТОГДА ДанныеДокумента.СуммаКомиссии
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК НачисленнаяСуммаКомиссии,
	|	0 КАК СуммаОперацийВозврата,
	|	ВЫБОР
	|		КОГДА ДанныеДокумента.СуммаКомиссии < 0
	|			ТОГДА - ДанныеДокумента.СуммаКомиссии
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ВозвращаемаяСуммаКомиссии
	|ИЗ
	|	Документ.ОплатаОтПокупателяПлатежнойКартой КАК ДанныеДокумента
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &Ссылка
	|	И ДанныеДокумента.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПоступлениеОплатыОтКлиента)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДанныеДокумента.Дата,
	|	ДанныеДокумента.ЭквайринговыйТерминал,
	|	ДанныеДокумента.Организация,
	|	ДанныеДокумента.Магазин,
	|	ДанныеДокумента.ВидОплаты,
	|	0,
	|	ВЫБОР
	|		КОГДА ДанныеДокумента.СуммаКомиссии > 0
	|			ТОГДА ДанныеДокумента.СуммаКомиссии
	|		ИНАЧЕ 0
	|	КОНЕЦ,
	|	ДанныеДокумента.СуммаДокумента,
	|	ВЫБОР
	|		КОГДА ДанныеДокумента.СуммаКомиссии < 0
	|			ТОГДА - ДанныеДокумента.СуммаКомиссии
	|		ИНАЧЕ 0
	|	КОНЕЦ
	|ИЗ
	|	Документ.ОплатаОтПокупателяПлатежнойКартой КАК ДанныеДокумента
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &Ссылка
	|	И ДанныеДокумента.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратОплатыКлиенту)";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаРасчетыСКлиентами()
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ДанныеДокумента.Дата КАК Период,
	|	ВЫБОР
	|		КОГДА ДанныеДокумента.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПоступлениеОплатыОтКлиента)
	|			ТОГДА ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|		ИНАЧЕ ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|	КОНЕЦ КАК ВидДвижения,
	|	ДанныеДокумента.Организация КАК Организация,
	|	ДанныеДокумента.Магазин КАК Магазин,
	|	ДанныеДокумента.Контрагент КАК Контрагент,
	|	ЕСТЬNULL(ТабличнаяЧастьРасшифровкаПлатежа.Сумма, ДанныеДокумента.СуммаДокумента) КАК Сумма,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ТабличнаяЧастьРасшифровкаПлатежа.ДокументРасчетовСКонтрагентом, ДанныеДокумента.Ссылка) В (&МассивПустыхДокументовРасчета)
	|			ТОГДА ДанныеДокумента.Ссылка
	|		ИНАЧЕ ЕСТЬNULL(ТабличнаяЧастьРасшифровкаПлатежа.ДокументРасчетовСКонтрагентом, ДанныеДокумента.Ссылка)
	|	КОНЕЦ КАК ДокументРасчета,
	|	ВЫБОР
	|		КОГДА НЕ ТабличнаяЧастьРасшифровкаПлатежа.ДокументРасчетовСКонтрагентом В (&МассивПустыхДокументовРасчета)
	|				И (ТабличнаяЧастьРасшифровкаПлатежа.ДокументРасчетовСКонтрагентом ССЫЛКА Документ.ЧекККМ
	|					ИЛИ ТабличнаяЧастьРасшифровкаПлатежа.ДокументРасчетовСКонтрагентом ССЫЛКА Документ.РеализацияТоваров)
	|			ТОГДА ТабличнаяЧастьРасшифровкаПлатежа.ДокументРасчетовСКонтрагентом.ЗаказПокупателя
	|		ИНАЧЕ ДанныеДокумента.ЗаказПокупателя
	|	КОНЕЦ КАК ЗаказПокупателя
	|ИЗ
	|	Документ.ОплатаОтПокупателяПлатежнойКартой КАК ДанныеДокумента
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ОплатаОтПокупателяПлатежнойКартой.РасшифровкаПлатежа КАК ТабличнаяЧастьРасшифровкаПлатежа
	|		ПО (ТабличнаяЧастьРасшифровкаПлатежа.Ссылка = ДанныеДокумента.Ссылка)
	|ГДЕ
	|	&ИспользоватьРасчетыСКлиентами
	|	И ДанныеДокумента.Ссылка = &Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	ТабличнаяЧастьРасшифровкаПлатежа.НомерСтроки";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ПолучитьРазделитьЗапросов()

	СтрокаРазделителя = 
	"
	|;
	|/////////////////////////////////////////////////////////////////////////////
	|";
	
	Возврат СтрокаРазделителя

КонецФункции // ПолучитьРазделитьЗапросов()

Функция РасшифровкаПлатежа(ДокументСсылка)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ОплатаОтПокупателяПлатежнойКартойРасшифровкаПлатежа.СтатьяДвиженияДенежныхСредств,
	|	ОплатаОтПокупателяПлатежнойКартойРасшифровкаПлатежа.ДокументРасчетовСКонтрагентом,
	|	ОплатаОтПокупателяПлатежнойКартойРасшифровкаПлатежа.Сумма КАК Сумма,
	|	ОплатаОтПокупателяПлатежнойКартойРасшифровкаПлатежа.ПризнакСпособаРасчета КАК ПризнакСпособаРасчета
	|ИЗ
	|	Документ.ОплатаОтПокупателяПлатежнойКартой.РасшифровкаПлатежа КАК ОплатаОтПокупателяПлатежнойКартойРасшифровкаПлатежа
	|ГДЕ
	|	ОплатаОтПокупателяПлатежнойКартойРасшифровкаПлатежа.Ссылка = &ДокументСсылка";
	
	Запрос.УстановитьПараметр("ДокументСсылка", ДокументСсылка);
	
	Результат = Запрос.Выполнить();
	
	Возврат Результат.Выгрузить();
	
КонецФункции

#Область ОбновлениеИнформационнойБазы

Процедура ПерезаполнитьСистемуНалогообложения(Параметры) Экспорт

	МетаданныеДокумента = Метаданные.Документы.ОплатаОтПокупателяПлатежнойКартой;
	ПолноеИмяОбъекта = МетаданныеДокумента.ПолноеИмя();
	
	Выборка = ОбновлениеИнформационнойБазы.ВыбратьСсылкиДляОбработки(Параметры.Очередь, ПолноеИмяОбъекта);
	
	ОбновлениеИнформационнойБазыРТ.ЗаполнитьСистемыНалогообложенияДокументов(ПолноеИмяОбъекта, Выборка, Параметры);
	
КонецПроцедуры

Процедура ЗарегистрироватьДанныеКЗаполнениюСНО(Параметры) Экспорт
	
	МетаданныеДокумента = Метаданные.Документы.ОплатаОтПокупателяПлатежнойКартой;
	ПолноеИмяОбъекта = МетаданныеДокумента.ПолноеИмя();
	
	ДокументыДляОбработки = ОбновлениеИнформационнойБазыРТ.ДокументыДляЗаполненияСНО(ПолноеИмяОбъекта);
	ОбновлениеИнформационнойБазы.ОтметитьКОбработке(Параметры, ДокументыДляОбработки);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти



#КонецЕсли
