#Область ОписаниеПеременных

&НаКлиенте
Перем КэшированныеЗначения; // Используется механизмом обработки изменения реквизитов ТЧ.

&НаКлиенте
Перем ПредыдущиеЗначения; // Используется для отслеживания изменения ключевых реквизитов.

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)

	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.ДатыЗапретаИзменения
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменения
	
	ОбщегоНазначенияРТКлиентСервер.ОбновитьСостояниеДокумента(Объект, Элементы.КартинкаСостоянияДокумента.Подсказка,
		КартинкаСостоянияДокумента, РазрешеноПроведение);
	
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Пропускаем инициализацию, чтобы гарантировать получение формы при передаче параметра "АвтоТест".
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	ОбщегоНазначенияРТ.ЗаполнитьШапкуДокумента(Объект, КартинкаСостоянияДокумента,
		Элементы.КартинкаСостоянияДокумента.Подсказка, РазрешеноПроведение);
	
	// Инициализация реквизитов формы.
	ИспользоватьПодключаемоеОборудование = ЗначениеНастроекВызовСервера.ИспользоватьПодключаемоеОборудование();
	
	ЗаполнитьСписокТелефоновКонтрагента();
	
	СтатьяДвиженияДенежныхСредств = ЗначениеНастроекПовтИсп.СтатьяДвиженияДенежныхСредств(Объект.ХозяйственнаяОперация);
	
	ДобавитьСтрокуВРасшифровкуПриНеобходимости();
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		ЗаполнитьРеквизитыФРПоЭквайринговомуТерминалу();
		
		ПересчитатьСуммуКомиссииСервер();
		
		ЗаполнитьСистемуНалогообложения();
		
	КонецЕсли;
	
	УстановитьСНОРасшифровкиНаСервере();
	
	// Установим визуальное представление.
	УправлениеЭлементамиФормы();
	УправлениеЭлементамиРасшифровкиПлатежа(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ПредыдущиеЗначения = Новый Структура(
		"Магазин,
		|Контрагент,
		|Организация,
		|ЭквайринговыйТерминал");
	ЗаполнитьЗначенияСвойств(ПредыдущиеЗначения, Объект);
	
	УстановитьДоступностьТерминала();
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	Если ЗначениеЗаполнено(Объект.КассаККМ) И НомерДокументаКассыККМ[Объект.КассаККМ] = Неопределено Тогда
		ОбщегоНазначенияРТКлиент.ЗаполнитьНомерДокументаКассыККМ(Объект.КассаККМ);
	КонецЕсли;
	
	ПроверитьСНО();
	
	ПредставитьТелефонИEmailКлиент();
	
	УправлениеЭлементамиЗаказПокупателя();
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	// &ЗамерПроизводительности
	Замер = ОценкаПроизводительностиРТКлиент.НачатьЗамер(Ложь, 
	                                            "Документ.ОплатаОтПокупателяПлатежнойКартой.ФормаДокумента.Запись",
                                                            Ложь);
	
	ПараметрыЗаписи.Вставить("Замер", Замер);
	Если Объект.Ответственный.Пустая() Тогда
		Объект.Ответственный = ОсновнойОтветственный();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)

	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	УстановитьСНОРасшифровкиНаСервере();
	
	УстановитьДоступностьЭлементовИФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	ОбщегоНазначенияРТКлиентСервер.ОбновитьСостояниеДокумента(Объект, Элементы.КартинкаСостоянияДокумента.Подсказка, КартинкаСостоянияДокумента, РазрешеноПроведение);
	
	Если ЗначениеЗаполнено(Объект.ЗаказПокупателя) Тогда
		Оповестить("ЗаказПокупателя_Состояния", Объект.ЗаказПокупателя);
	КонецЕсли;
	
	// &ЗамерПроизводительности
	ОценкаПроизводительностиРТКлиент.ЗакончитьЗамер(ПараметрыЗаписи.Замер);

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	
	ДатаПриИзмененииНаСервере();
	ПроверитьСНО();
	
КонецПроцедуры

&НаСервере
Процедура ДатаПриИзмененииНаСервере()
	ЗаполнитьСистемуНалогообложения();
КонецПроцедуры

&НаКлиенте
Процедура ВидОплатыПриИзменении(Элемент)
	
	СтруктураПараметров = Новый Структура();
	СтруктураПараметров.Вставить("ЭквайринговыйТерминал", Объект.ЭквайринговыйТерминал);
	СтруктураПараметров.Вставить("ВидОплаты", Объект.ВидОплаты);
	СтруктураПараметров.Вставить("ЭтоВозврат", Объект.ХозяйственнаяОперация = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ВозвратОплатыКлиенту"));
	ВидОплатыПриИзмененииСервер(СтруктураПараметров);
	Объект.ПроцентКомиссии = СтруктураПараметров.ПроцентКомиссии;
	ПересчитатьСуммуКомиссии();
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ВидОплатыПриИзмененииСервер(СтруктураПараметров)
	Перем ПараметрПроцентКомиссии, ПараметрЭквайринговыйТерминал, ПараметрВидОплаты;
	
	ПараметрВидОплаты              = СтруктураПараметров.ВидОплаты;
	ПараметрЭквайринговыйТерминал  = СтруктураПараметров.ЭквайринговыйТерминал;
	ПараметрЭтоВозврат             = СтруктураПараметров.ЭтоВозврат;
	ПараметрПроцентКомиссии        = ЭквайрингВызовСервера.ПолучитьПроцентКомиссииДляПлатежнойКарты(ПараметрЭквайринговыйТерминал, ПараметрВидОплаты, ПараметрЭтоВозврат);
	СтруктураПараметров.Вставить("ПроцентКомиссии", ПараметрПроцентКомиссии);
	
КонецПроцедуры

&НаКлиенте
Процедура СуммаДокументаПриИзменении(Элемент)
	
	ФинансыКлиент.ПересчетСуммыВСтрокеРасшифровкиПлатежа(Объект, Объект.СуммаДокумента);
	ПересчитатьСуммуКомиссии();
	
	СуммаУстановленаВручную = Объект.СуммаДокумента <> 0;
	
	СуммаДокументаПриИзмененииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура СуммаДокументаПриИзмененииНаСервере()
	ДенежныеСредстваСервер.ЗаполнитьПризнакСпособаРасчета(Объект);
КонецПроцедуры

&НаКлиенте
Процедура ПроцентКомиссииПриИзменении(Элемент)
	
	ПересчитатьСуммуКомиссии();
	
КонецПроцедуры

&НаКлиенте
Процедура ВидОплатыНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	Перем ФормаВыбора;
	
	СтруктураПараметров = Новый Структура();
	СтруктураПараметров.Вставить("Владелец", Элемент);
	Если Объект.ТипОплаты = 0 Тогда
		СтруктураПараметров.Вставить("ПравоеЗначение", ПредопределенноеЗначение("Перечисление.ТипыОплатЧекаККМ.ПлатежнаяКарта"));
	ИначеЕсли Объект.ТипОплаты = 1 Тогда
		СтруктураПараметров.Вставить("ПравоеЗначение", ПредопределенноеЗначение("Перечисление.ТипыОплатЧекаККМ.МобильныйПлатеж"));
	КонецЕсли;
	СтруктураПараметров.Вставить("ИмяПоляОтбораЛевоеЗначение", "ТипОплаты");
	СтруктураПараметров.Вставить("ЭквайринговыйТерминал", Объект.ЭквайринговыйТерминал);
	ОтборыСписковКлиентСервер.НачалоВыбораВидаОплатыЧекаККМ(СтруктураПараметров, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ЭквайринговыйТерминалПриИзменении(Элемент)
	
	ПриИзмененииКлючевыхРеквизитов("ЭквайринговыйТерминал", Объект.ЭквайринговыйТерминал);
	
КонецПроцедуры

&НаКлиенте
Процедура МагазинПриИзменении(Элемент)
	
	ПриИзмененииКлючевыхРеквизитов("Магазин", Объект.Магазин);
	
КонецПроцедуры

&НаКлиенте
Процедура КассаККМПриИзменении(Элемент)
	
	Модифицированность = НЕ Объект.ОплатаВыполнена;
	
	Если ЗначениеЗаполнено(Объект.КассаККМ) И НомерДокументаКассыККМ[Объект.КассаККМ] = Неопределено Тогда
		ОбщегоНазначенияРТКлиент.ЗаполнитьНомерДокументаКассыККМ(Объект.КассаККМ);
	КонецЕсли;
	
	Если НЕ Объект.ОплатаВыполнена Тогда
		ПодключаемоеОборудованиеКассы = ПодключаемоеОборудованиеКассы();
		Если ЗначениеЗаполнено(ПодключаемоеОборудованиеКассы) Тогда
			УстройствоПечатиСлипЧека = ПодключаемоеОборудованиеКассы;
			
			
			Элементы.УстройствоПечатиСлипЧека.ТолькоПросмотр = Истина;
		Иначе
			
			Элементы.УстройствоПечатиСлипЧека.ТолькоПросмотр = Ложь;
		КонецЕсли;
	Иначе
		
		
		Элементы.УстройствоПечатиСлипЧека.ТолькоПросмотр = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияОтчетОРозничныхПродажахНажатие(Элемент)
	
	Если ЗначениеЗаполнено(Объект.ОтчетОРозничныхПродажах) Тогда
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Ключ", Объект.ОтчетОРозничныхПродажах);
		ПараметрыФормы.Вставить("ТекущийЭлемент", "ПрочаяВыручка");
		
		ПараметрыТекущейСтроки = Новый Структура;
		ПараметрыТекущейСтроки.Вставить("Контрагент"           , Объект.Контрагент);
		ПараметрыТекущейСтроки.Вставить("ХозяйственнаяОперация", Объект.ХозяйственнаяОперация);
		ПараметрыТекущейСтроки.Вставить("ВидОплаты"            , Объект.ВидОплаты);
		
		ПараметрыФормы.Вставить("ТекущаяСтрока", ПараметрыТекущейСтроки);
		ПараметрыФормы.Вставить("ТекущийРеквизитОбъекта", "ПрочаяВыручка");
		
		ОткрытьФорму("Документ.ОтчетОРозничныхПродажах.ФормаОбъекта", ПараметрыФормы);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентПриИзменении(Элемент)
	
	ПриИзмененииКлючевыхРеквизитов("Контрагент", Объект.Контрагент);
	
	КонтрагентПриИзмененииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура КонтрагентПриИзмененииНаСервере()
	
	ЗаполнитьСписокТелефоновКонтрагента();
	ДенежныеСредстваСервер.ЗаполнитьПризнакСпособаРасчета(Объект);
	
КонецПроцедуры

&НаКлиенте
Процедура ЭквайринговыйТерминалНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
    // &ЗамерПроизводительности
	ОценкаПроизводительностиРТКлиент.НачатьЗамер(
		Истина, "Справочник.ЭквайринговыеТерминалы.Форма.ФормаВыбора.Открытие");
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияНесоответствиеСНОНажатие(Элемент)
	
	ПроверитьСНО( ,Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправлятьЧекПриИзменении(Элемент)
	ОтправлятьЧекПриИзмененииКлиент();
КонецПроцедуры

&НаКлиенте
Процедура ТелефонСтрокойПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(ТелефонСтрокой) Тогда
		ТелефонСтрокой = СтрЗаменить(ТелефонСтрокой, " ", 0);
		Объект.Телефон = ПодключаемоеОборудованиеРТКлиент.ПреобразоватьТелефонИзСтрокиМаски(ТелефонСтрокой);
		Объект.АдресЭП = "";
	Иначе
		Объект.Телефон = "";
		ТелефонСтрокой = "";
		Объект.АдресЭП = "";
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура АдресЭППриИзменении(Элемент)
	
	Если НЕ ШтрихкодированиеРТКлиентСервер.ЕмаилКорректен(Объект.АдресЭП) Тогда
	
		ТекстСообщения = НСтр("ru = 'Введён некорректный E-mail'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения,,"Объект.АдресЭП");
	
	КонецЕсли;
	
	ТелефонСтрокой = "";
	Объект.Телефон = "";
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыРасшифровкаПлатежа

&НаКлиенте
Процедура РасшифровкаПлатежаДокументРасчетовСКонтрагентомПриИзменении(Элемент)
	
	СтрокаТаблицы = Объект.РасшифровкаПлатежа[0];
	
	РасшифровкаПлатежаДокументРасчетовСКонтрагентомПриИзмененииСервер(СтрокаТаблицы.ПолучитьИдентификатор());
	
	ПроверитьСНО(СтрокаТаблицы, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаСтатьяДвиженияДенежныхСредствПриИзменении(Элемент)
	
	СтрокаТаблицы = Объект.РасшифровкаПлатежа[0];
	СтатьяДвиженияДенежныхСредств = СтрокаТаблицы.СтатьяДвиженияДенежныхСредств;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ОплатитьКартой(Команда)
	Перем ПараметрыКассыККМ, ПараметрыЭТ;
	
	Если НЕ ПроверкаВозможностиРаботыСКартой(ПараметрыКассыККМ, ПараметрыЭТ) Тогда
		Возврат;
	КонецЕсли;
    
    // &ЗамерПроизводительности
    ОценкаПроизводительностиРТКлиент.НачатьЗамер(
             Истина, "Справочник.ПодключаемоеОборудование.Форма.ФормаАвторизацииЭТ.Открытие");

    
	// Предварительно авторизуем операцию.
	ПараметрыФормы = Новый Структура("Сумма, ПределСуммы", Объект.СуммаДокумента, Объект.СуммаДокумента);
	ПараметрыФормы.Вставить("ЗапретРедактированияСуммы", Истина);
	Если ПараметрыЭТ.ИспользоватьБезПодключенияОборудования Тогда
		ПараметрыФормы.Вставить("ПоказыватьНомерКарты", Истина);
	КонецЕсли;
	
	ПараметрДействия = Новый Структура;
	ПараметрДействия.Вставить("ПараметрыКассыККМ", ПараметрыКассыККМ);
	ПараметрДействия.Вставить("ПараметрыЭТ", ПараметрыЭТ);
	ПараметрДействия.Вставить("СуммаОперации", 0);
	ПараметрДействия.Вставить("НомерКарты", "");
	ПараметрДействия.Вставить("НомерСсылкиОперации", "");
	ПараметрДействия.Вставить("НомерЧекаЭТ", 0);
	ПараметрДействия.Вставить("НомерЧекаККМ", Объект.Номер);
	ПараметрДействия.Вставить("СтрокаСлипЧека", "");
	
	Если Объект.ХозяйственнаяОперация = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ПоступлениеОплатыОтКлиента") Тогда
		ПараметрДействия.Вставить("ТипТранзакции", "AuthorizeSales");
	Иначе
		ПараметрДействия.Вставить("ТипТранзакции", "AuthorizeRefund");
		ПараметрыФормы.Вставить("УказатьДополнительныеДанные", Истина);
	КонецЕсли;
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ПараметрДействия", ПараметрДействия);
	
	РезультатОткрытияФормы = Новый Структура;
	РезультатОткрытияФормы.Вставить("ДанныеКарты", "");
	РезультатОткрытияФормы.Вставить("НомерКарты", "");
	РезультатОткрытияФормы.Вставить("НомерЧека", "");
	РезультатОткрытияФормы.Вставить("НомерЧекаЭТ", "");
	РезультатОткрытияФормы.Вставить("СсылочныйНомер", "");
	РезультатОткрытияФормы.Вставить("Сумма", Объект.СуммаДокумента);
	РезультатОткрытияФормы.Вставить("ТипКарты", 0);
	
	ОповещениеОткрытьФормуАвторизацииЭТ(РезультатОткрытияФормы, ДополнительныеПараметры);
	
	//ОбработчикОповещения = Новый ОписаниеОповещения("ОповещениеОткрытьФормуАвторизацииЭТ", ЭтотОбъект, ДополнительныеПараметры);
	//Режим = РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс;
	//ОткрытьФорму("Справочник.ПодключаемоеОборудование.Форма.ФормаАвторизацииЭТ", ПараметрыФормы,,,,, ОбработчикОповещения, Режим); 
	
КонецПроцедуры

&НаКлиенте
Процедура НапечататьЧек(Команда)
	
	Если Объект.ПробитЧек Тогда
		ТекстСообщения = НСтр("ru = 'Чек уже пробит на фискальном регистраторе!'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	ОповещениеЗавершенияПроверки = Новый ОписаниеОповещения("ПроверитьВозможностьПечатиЧекаЗавершение", ЭтотОбъект);
	ФинансыКлиент.ПроверитьВозможностьПечатиЧека(ОповещениеЗавершенияПроверки, ЭтотОбъект);
	
КонецПроцедуры

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат) Экспорт
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

&НаКлиенте
Процедура ОткрытьЗаказПокупателя(Команда)
	ПоказатьЗначение(, Объект.ЗаказПокупателя);
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьЗаказПокупателя(Команда)
	
	Если НЕ ПроверитьЗаполнениеКлючевыхРеквизитов() Тогда
		Возврат;
	КонецЕсли;
	
	Если Объект.РасшифровкаПлатежа.Количество() > 0 ИЛИ Объект.СуммаДокумента > 0 Тогда
		ТекстВопроса = НСтр("ru='Список ""Расшифровка платежа"" будет перезаполнен остатками по заказу. Продолжить?'");
		
		ОбработчикОповещения = Новый ОписаниеОповещения("ПоказатьВопросВыбратьЗаказПокупателяЗавершение", ЭтотОбъект);
		ПоказатьВопрос(ОбработчикОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	Иначе
		ОткрытьФормуВыбораЗаказаПокупателя();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьЗаказПокупателя(Команда)
	
	Объект.ЗаказПокупателя = Неопределено;
	УправлениеЭлементамиЗаказПокупателя();
	
КонецПроцедуры

&НаКлиенте
Процедура РазбитьПлатеж(Команда)
	
	ОткрытьФормуРасшифровкиПлатежа();
	
КонецПроцедуры

&НаКлиенте
Процедура НадписьСуммаДокументаНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОткрытьФормуРасшифровкиПлатежа();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область УправлениеФормой

// В процедуре выполняется установка свойств элементов формы.
//
&НаСервере
Процедура УправлениеЭлементамиФормы()
	
	Если ЗначениеЗаполнено(Объект.ОтчетОРозничныхПродажах) Тогда
		
		ТекстДекорации = НСтр("ru = '%1'");
		РеквизитыОтчета = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект.ОтчетОРозничныхПродажах, "Номер, Дата");
		
		ТекстДекорации = СтрЗаменить(ТекстДекорации, "%1", 
			ФормированиеПечатныхФормСервер.СформироватьЗаголовокДокумента(РеквизитыОтчета, НСтр("ru = 'Отчет о розничных продажах'"), "ДФ=dd.MM.yy"));
		
		Элементы.ДекорацияОтчетОРозничныхПродажах.Заголовок = ТекстДекорации;
		
	Иначе
		Элементы.ДекорацияОтчетОРозничныхПродажах.Видимость = Ложь;
	КонецЕсли;
	
	Элементы.УстройствоПечатиСлипЧека.Видимость = НЕ ТолькоПросмотр И ПолучитьФункциональнуюОпцию("ИспользоватьПодключаемоеОборудование");
	
	ДенежныеСредстваСервер.УстановитьПараметрыВыбораЭквайринговогоТерминала(Объект, Элементы.ЭквайринговыйТерминал);
	
	Если Объект.ОплатаВыполнена Тогда
		Элементы.СтраницыДекораций.ТекущаяСтраница = Элементы.СтраницаОперацияПроизведена
	Иначе
		Элементы.СтраницыДекораций.ТекущаяСтраница = Элементы.СтраницаОперацияНеПроизведена
	КонецЕсли;
	
	УправлениеПользователями.УстановитьТолькоПросмотрДляРеквизитовТабличнойЧасти(Элементы.Дата.ТолькоПросмотр, 
		ПланыВидовХарактеристик.ПраваПользователей.ИзменятьДату);
	
	ОбновитьПредставлениеЭквайриноговогоТерминала();
	
	УстановитьСвойстваЭлементовФормыПоХозяйственнойОперации();
	УстановитьДоступностьЭлементовИФормы();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьДоступностьЭлементовИФормы()
	
	ТолькоПросмотр = ТолькоПросмотр ИЛИ Объект.ОплатаВыполнена;
	
	УправлениеЭлементамиФискализации();
	
КонецПроцедуры

&НаСервере
Процедура УправлениеЭлементамиФискализации()
	
	Если ЗначениеЗаполнено(Объект.КассаККМ) Тогда
		ПодключаемоеОборудование = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.КассаККМ, "ПодключаемоеОборудование");
		ВозможностьЭлектронногоПлатежа = ПодключаемоеОборудованиеРТ.ВозможностьЭлектронногоПлатежа(ПодключаемоеОборудование);
	Иначе
		ВозможностьЭлектронногоПлатежа = Ложь;
	КонецЕсли;
	
	Если НЕ Элементы.Найти("ОплатитьКартой") = Неопределено Тогда
		Элементы.ОплатитьКартой.Доступность = НЕ Объект.ОплатаВыполнена И НЕ ТолькоПросмотр;
	КонецЕсли;
	
	Если Объект.ОплатаВыполнена Тогда
		УстройствоПечатиСлипЧека = Справочники.ПодключаемоеОборудование.ПустаяСсылка();
		Элементы.УстройствоПечатиСлипЧека.ПодсказкаВвода = НСтр("ru = 'Банковская операция выполнена'"); 
		
		Элементы.УстройствоПечатиСлипЧека.ТолькоПросмотр = Истина;
	ИначеЕсли ЗначениеЗаполнено(Объект.КассаККМ.ПодключаемоеОборудование) Тогда
		УстройствоПечатиСлипЧека = Объект.КассаККМ.ПодключаемоеОборудование;
		
		Элементы.УстройствоПечатиСлипЧека.ТолькоПросмотр = Истина;
	Иначе
		
		Элементы.УстройствоПечатиСлипЧека.ТолькоПросмотр = Ложь;
	КонецЕсли;
	
	Элементы.РасшифровкаПлатежаПризнакСпособаРасчета.Видимость = Объект.ПробиватьЧекиПоКассеККМ;
	
	Элементы.ГруппаЧекККМ.Видимость       = Объект.ПробиватьЧекиПоКассеККМ;
	Элементы.ГруппаОтправкаЧека.Видимость = ВозможностьЭлектронногоПлатежа;
	Элементы.ОтправлятьЧек.ТолькоПросмотр = Объект.ПробитЧек;
	
	Элементы.НапечататьЧек.Доступность = Не Объект.ПробитЧек И Объект.ОплатаВыполнена;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы, "ОбщаяКомандаФискальныеОперации", "Видимость", Объект.ПробитЧек);
	
КонецПроцедуры
	
&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеЭлементамиРасшифровкиПлатежа(Форма)
	
	Объект   = Форма.Объект;
	Элементы = Форма.Элементы;
	
	ОднострочныйРежим = Объект.РасшифровкаПлатежа.Количество() <= 1;
	
	Если НЕ ОднострочныйРежим Тогда
		ПараметрыПредметаИсчисления = НСтр("ru = 'строка, строки, строк'");
		Форма.НадписьСуммаДокумента = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = '%1 %2 (%3)'"),
			Формат(Объект.СуммаДокумента, "ЧЦ=15; ЧДЦ=2; ЧН="),
			ОбщегоНазначенияРТКлиентСервер.Валюта(),
			СтроковыеФункцииКлиентСервер.ЧислоЦифрамиПредметИсчисленияПрописью(Объект.РасшифровкаПлатежа.Количество(), ПараметрыПредметаИсчисления));
	КонецЕсли;
	
	Элементы.ГруппаОдинПлатеж.Видимость        = ОднострочныйРежим;
	Элементы.ГруппаНесколькоПлатежей.Видимость = НЕ ОднострочныйРежим;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьСвойстваЭлементовФормыПоХозяйственнойОперации()
	
	ЗаголовокОплатитьКартой = ?(Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратОплатыКлиенту,
		НСтр("ru = 'Вернуть'"),
		НСтр("ru = 'Оплатить'"));
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ОплатитьКартой", "Заголовок", ЗаголовокОплатитьКартой);
	
	УстановитьОграничениеТипаПоХозяйственнойОперации();
	УстановитьВидимостьЭлементамПоХозяйственнойОперации();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьОграничениеТипаПоХозяйственнойОперации()
	
	// Ограничим тип документа расчетов в зависимости от хоз. операции.
	ДоступныеТипы = ДенежныеСредстваКлиентСервер.ДоступныеТипыДокументовРасчета(Объект.ХозяйственнаяОперация, ТипЗнч(Объект.Ссылка));
	Если ДоступныеТипы.Количество() > 0 Тогда
		Элементы.РасшифровкаПлатежаДокументРасчетовСКонтрагентом.ВыбиратьТип = ДоступныеТипы.Количество() > 1;
		Элементы.РасшифровкаПлатежаДокументРасчетовСКонтрагентом.ОграничениеТипа = Новый ОписаниеТипов(ДоступныеТипы);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьЭлементамПоХозяйственнойОперации()

	Перем МассивВсехРеквизитов;
	Перем МассивРеквизитовОперации;
	
	Документы.ОплатаОтПокупателяПлатежнойКартой.ЗаполнитьИменаРеквизитовПоХозяйственнойОперации(
		Объект.ХозяйственнаяОперация,
		МассивВсехРеквизитов,
		МассивРеквизитовОперации);

	ОбщегоНазначенияРТ.УстановитьВидимостьЭлементовПоМассиву(
		Элементы,
		МассивВсехРеквизитов,
		МассивРеквизитовОперации);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьДоступностьТерминала()
	
	Элементы.ЭквайринговыйТерминал.ТолькоПросмотр = НЕ ЗначениеЗаполнено(Объект.Магазин);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьПредставлениеЭквайриноговогоТерминала()
	
	Строки = Новый Массив;
	Строки.Добавить(Новый ФорматированнаяСтрока(Строка(Объект.Организация),,,,ПолучитьНавигационнуюСсылку(Объект.Организация)));
	Строки.Добавить(НСтр("ru = ' \ '"));
	Строки.Добавить(Новый ФорматированнаяСтрока(Строка(Объект.Эквайрер),,,,ПолучитьНавигационнуюСсылку(Объект.Эквайрер)));
	
	ДанныеЭквайринговогоТерминала = Новый ФорматированнаяСтрока(Строки);
	
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура ОповещениеВопросПересчитатьЗначениеТорговойУступки(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		Объект.ПроцентКомиссии = ДополнительныеПараметры.ПроцентКомиссии;
		ПересчитатьСуммуКомиссии();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеВопросУспешностиОплатыКартой(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	ПараметрДействия = ДополнительныеПараметры.ПараметрДействия;
	
	Если НЕ (РезультатВопроса = КодВозвратаДиалога.Да) Тогда
		СтрокаСлипЧека = "";
		ТекстОписаниеОшибки = НСтр("ru = 'Операция отменена.'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстОписаниеОшибки);
		Возврат;
	КонецЕсли;
	
	ЗавершитьОплатуКартой(ПараметрДействия);
	
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеОткрытьФормуАвторизацииЭТ(РезультатОткрытияФормы, ДополнительныеПараметры) Экспорт
	
	ПараметрДействия = ДополнительныеПараметры.ПараметрДействия;
	
	Если ТипЗнч(РезультатОткрытияФормы) = Тип("Структура") Тогда
		
		ПараметрДействия.СуммаОперации = РезультатОткрытияФормы.Сумма;
		
		Если НЕ ПараметрДействия.ПараметрыЭТ.ИспользоватьБезПодключенияОборудования Тогда
			
			ЭтаФорма.Доступность = Ложь;
			
			ПараметрыОперации = МенеджерОборудованияКлиент.ПараметрыВыполненияЭквайринговойОперации();
			ПараметрыОперации.ТипТранзакции  = ПараметрДействия.ТипТранзакции;
			ПараметрыОперации.СуммаОперации  = РезультатОткрытияФормы.Сумма;
			ПараметрыОперации.НомерЧека      = РезультатОткрытияФормы.НомерЧека;
			ПараметрыОперации.СсылочныйНомер = РезультатОткрытияФормы.СсылочныйНомер;
			
			Если НЕ УстройствоПечатиСлипЧека.Пустая() Тогда
				УстройствоПечати = УстройствоПечатиСлипЧека;
			Иначе
				УстройствоПечати = ПараметрДействия.ПараметрыКассыККМ.ИдентификаторУстройства;
				УстройствоПечати = ?(ПустаяСтрока(УстройствоПечати), Неопределено, УстройствоПечати);
			КонецЕсли;
			
			Оповещение = Новый ОписаниеОповещения("ОповещениеОткрытьФормуАвторизацииЭТЗавершение", ЭтотОбъект, ПараметрДействия);
			МенеджерОборудованияКлиент.НачатьВыполнениеОперацииНаЭквайринговомТерминале(Оповещение, УникальныйИдентификатор, 
				ПараметрДействия.ПараметрыЭТ.ИдентификаторУстройства, УстройствоПечати, ПараметрыОперации);
		Иначе
			
			ПараметрДействия.НомерКарты          = РезультатОткрытияФормы.НомерКарты;
			ПараметрДействия.НомерСсылкиОперации = РезультатОткрытияФормы.СсылочныйНомер;
			ПараметрДействия.НомерЧекаЭТ         = РезультатОткрытияФормы.НомерЧека;
			
			ТекстВопроса = НСтр("ru = 'Требуется выполнить операцию оплаты на эквайринговом терминале.'") + Символы.ПС;
			ТекстВопроса = ТекстВопроса + НСтр("ru = 'Сумма операции:'") + " "+ ПараметрДействия.СуммаОперации  + Символы.ПС;
			ТекстВопроса = ТекстВопроса + Символы.ПС;
			ТекстВопроса = ТекстВопроса + НСтр("ru = 'Операция оплаты на эквайринговом терминале прошла успешно?'");
			
			ДополнительныеПараметры = Новый Структура; 
			ДополнительныеПараметры.Вставить("ПараметрДействия", ПараметрДействия);
			ОбработчикОповещения = Новый ОписаниеОповещения("ОповещениеВопросУспешностиОплатыКартой", ЭтотОбъект, ДополнительныеПараметры);
			ПоказатьВопрос(ОбработчикОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеОткрытьФормуАвторизацииЭТЗавершение(РезультатВыполнения, ПараметрДействия) Экспорт 
	
	ЭтаФорма.Доступность = Истина;
	
	Если НЕ РезультатВыполнения.Результат Тогда
		ТекстСообщения = НСтр("ru = 'При выполнении операции возникла ошибка:
			|""%ОписаниеОшибки%"".
			|Оплата по карте не была произведена.'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%", РезультатВыполнения.ОписаниеОшибки);
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
	Иначе
		ПараметрДействия.НомерКарты          = РезультатВыполнения.НомерКарты;
		ПараметрДействия.НомерСсылкиОперации = РезультатВыполнения.СсылочныйНомер;
		ПараметрДействия.НомерЧекаЭТ         = РезультатВыполнения.НомерЧекаЭТ;
		ПараметрДействия.СтрокаСлипЧека      = РезультатВыполнения.ТекстСлипЧека;
		ЗавершитьОплатуКартой(ПараметрДействия);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПробитьЧекЗавершение(РезультатВыполнения, ПараметрыОперации) Экспорт
	
	ЭтаФорма.Доступность = Истина;
	
	Если РезультатВыполнения = КодВозвратаДиалога.Отмена ИЛИ РезультатВыполнения = Неопределено Тогда
		// Отмена в форме печати чека
	ИначеЕсли РезультатВыполнения.Свойство("Результат") И РезультатВыполнения.Результат Тогда
		
		// Установить полученное значение номера чека реквизиту документа.
		Если ЗначениеЗаполнено(РезультатВыполнения.ВыходныеПараметры[1]) Тогда
			Объект.НомерЧекаККМ = РезультатВыполнения.ВыходныеПараметры[1];
		Иначе
			Объект.НомерЧекаККМ = НомерДокументаКассыККМ[Объект.КассаККМ];
		КонецЕсли; 
		Объект.ПробитЧек    = Истина;
		Модифицированность  = Ложь;
		
		РезультатЗаписи = Записать(Новый Структура("РежимЗаписи", РежимЗаписиДокумента.Проведение));
		Если РезультатЗаписи = Истина Тогда
			НомерДокументаКассыККМ[Объект.КассаККМ] = Объект.НомерЧекаККМ +	1;
			ПорядковыйНомерПродажи = ПорядковыйНомерПродажи + 1;
		КонецЕсли;
		
	Иначе
		ТекстСообщения = НСтр("ru = 'При печати чека произошла ошибка.
									|Чек не напечатан на фискальном устройстве.
									|Дополнительное описание: %ДополнительноеОписание%'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ДополнительноеОписание%", РезультатВыполнения.ОписаниеОшибки);
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
	// &ЗамерПроизводительности 
	ОценкаПроизводительностиРТКлиент.ЗакончитьЗамер(ПараметрыОперации.Замер);
	
КонецПроцедуры

&НаКлиенте
Процедура ПересчитатьСуммуКомиссии()
	
	Объект.СуммаКомиссии = Объект.СуммаДокумента * Объект.ПроцентКомиссии / 100;
	
КонецПроцедуры

&НаСервере
Процедура ПересчитатьСуммуКомиссииСервер()
	
	Объект.СуммаКомиссии = Объект.СуммаДокумента * Объект.ПроцентКомиссии / 100;
	
КонецПроцедуры

// Функция получает из настроек пользователя настройку основного ответственного.
// Параметры - Нет
//
// Возвращаемое значение - СправочникСсылка.Пользователи - Основной ответственный из настроек текущего пользователя.
//
&НаСервере
Функция ОсновнойОтветственный()
	
	Возврат Пользователи.ТекущийПользователь();
	
КонецФункции

///////////////////////////////////////////////////////////////////////////////
// Обработчики изменений реквизитов.

&НаСервере
Процедура МагазинПриИзмененииСервер()
	
	Объект.ЭквайринговыйТерминал = Справочники.ЭквайринговыеТерминалы.ЭквайринговыйТерминалПоУмолчанию(Неопределено, Объект.Организация, Объект.Магазин, Объект.ВидОплаты);

КонецПроцедуры

&НаКлиенте
Процедура ЭквайринговыйТерминалПриИзмененииКлиент(СтруктураПараметров)
	
	Если НЕ Объект.ПроцентКомиссии = СтруктураПараметров.ПроцентКомиссии Тогда
		Если Объект.СуммаДокумента > 0.00 Тогда
			ТекстВопроса = НСтр("ru='Пересчитать значение торговой уступки?'");
			ДополнительныеПараметры = Новый Структура;
			ДополнительныеПараметры.Вставить("ПроцентКомиссии", СтруктураПараметров.ПроцентКомиссии);
			
			ОбработчикОповещения = Новый ОписаниеОповещения("ОповещениеВопросПересчитатьЗначениеТорговойУступки", ЭтотОбъект, ДополнительныеПараметры);
			
			ПоказатьВопрос(ОбработчикОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		Иначе
			Объект.ПроцентКомиссии = СтруктураПараметров.ПроцентКомиссии;
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.КассаККМ) И НомерДокументаКассыККМ[Объект.КассаККМ] = Неопределено Тогда
		ОбщегоНазначенияРТКлиент.ЗаполнитьНомерДокументаКассыККМ(Объект.КассаККМ);
	КонецЕсли;
	
	ПроверитьСНО();
	
КонецПроцедуры

&НаСервере
Процедура ЭквайринговыйТерминалПриИзмененииНаСервере(СтруктураПараметров)
	
	ПроцентКомиссии = 0;
	Элементы.ВидОплаты.СписокВыбора.Очистить();
	
	Если ЗначениеЗаполнено(Объект.ЭквайринговыйТерминал) Тогда
		Документы.ОплатаОтПокупателяПлатежнойКартой.ЗаполнитьДанныеПоЭквайринговомуТерминалу(Объект);
		
		Для каждого СтрокаТариф Из Объект.ЭквайринговыйТерминал.ТарифыЗаРасчетноеОбслуживание Цикл
			Элементы.ВидОплаты.СписокВыбора.Добавить(СтрокаТариф.ВидОплаты);
		КонецЦикла;
		
		ДенежныеСредстваСервер.ЗаполнитьПризнакСпособаРасчета(Объект);
	КонецЕсли;
	
	ЗаполнитьРеквизитыФРПоЭквайринговомуТерминалу();
	УправлениеЭлементамиФискализации();
	
	СтруктураПараметров.Вставить("ПроцентКомиссии", ПроцентКомиссии);
	
	ОбновитьПредставлениеЭквайриноговогоТерминала();
	
	УстановитьСНОРасшифровкиНаСервере();
	ЗаполнитьСистемуНалогообложения();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьРеквизитыФРПоЭквайринговомуТерминалу()
	
	ДанныеКассы = Неопределено;
	Если ЗначениеЗаполнено(Объект.ЭквайринговыйТерминал) Тогда
		Касса = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ЭквайринговыйТерминал, "Касса");
		
		ДанныеКассы = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Касса, "КассаККМ, ПробиватьЧекиПоКассеККМ");
	КонецЕсли;
	
	Объект.КассаККМ =                ?(ДанныеКассы = Неопределено, Неопределено, ДанныеКассы.КассаККМ);
	Объект.ПробиватьЧекиПоКассеККМ = ?(ДанныеКассы = Неопределено, Ложь, ДанныеКассы.ПробиватьЧекиПоКассеККМ);
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// Штрихкоды и торговое оборудование.

&НаКлиенте
Процедура ЗавершитьОплатуКартой(ПараметрДействия)
	
	Объект.НомерПлатежнойКарты = ПараметрДействия.НомерКарты;
	Объект.ОплатаВыполнена     = Истина;
	
	Если НЕ Объект.ПробиватьЧекиПоКассеККМ
		ИЛИ ПараметрДействия.ПараметрыКассыККМ.ИспользоватьБезПодключенияОборудования Тогда
		Объект.ПробитЧек = Истина;
		Если НомерДокументаКассыККМ[Объект.КассаККМ] <> Неопределено Тогда
			Объект.НомерЧекаККМ  = НомерДокументаКассыККМ[Объект.КассаККМ];
		Иначе
			Объект.НомерЧекаККМ  = ПорядковыйНомерПродажи;
		КонецЕсли;
	КонецЕсли;
	
	Если Записать(Новый Структура("РежимЗаписи", РежимЗаписиДокумента.Проведение)) Тогда
		Если Объект.ПробитЧек Тогда
			НомерДокументаКассыККМ[Объект.КассаККМ] = Объект.НомерЧекаККМ + 1;
			ПорядковыйНомерПродажи = ПорядковыйНомерПродажи + 1;
		Иначе
			НомерЧека = НомерДокументаКассыККМ[Объект.КассаККМ] + 1;
			ПробитьЧек(ПараметрДействия.ПараметрыКассыККМ, НомерЧека);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ПроверкаВозможностиРаботыСКартой(ПараметрыКассыККМ, ПараметрыЭТ)
	Перем Отказ;
	
	Результат = Ложь;
	Отказ     = Ложь;
	ПараметрыКассыККМ = Новый Структура("УстройствоПодключено", Ложь);
	ПараметрыЭТ       = Новый Структура("УстройствоПодключено", Ложь);
	
	Если НЕ Объект.Проведен ИЛИ Модифицированность Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru='Документ необходимо провести.'"));
		Возврат Результат;
	КонецЕсли; 
	
	Если Объект.ОплатаВыполнена Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru='Для данного документа уже выполнена оплата платежной картой.'"));
		Возврат Результат;
	КонецЕсли;
	
	Если Объект.ПробиватьЧекиПоКассеККМ Тогда
		Если НЕ ЗначениеЗаполнено(Объект.КассаККМ) Тогда
			ТекстОшибки = НСтр("ru='Не выбрана касса ККМ.'");
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстОшибки, , "Объект.КассаККМ", , Отказ);
			Возврат Результат;
		Иначе
			ПолучитьНеобходимыеДанныеДляРаботыСКартой(ПараметрыКассыККМ, ПараметрыЭТ, Отказ);
		КонецЕсли;
	Иначе
		ПолучитьНеобходимыеДанныеДляРаботыСКартой(ПараметрыКассыККМ, ПараметрыЭТ, Отказ);
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат Результат;
	КонецЕсли;
	
	Результат = Истина;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура ПолучитьНеобходимыеДанныеДляРаботыСКартой(ПараметрыКассыККМ, ПараметрыЭТ, Отказ)
	
	ПараметрыЭТ = ЗначениеНастроекВызовСервера.ПараметрыЭТ(Объект.ЭквайринговыйТерминал);
	ПараметрыЭТ.ИспользоватьБезПодключенияОборудования = ПараметрыЭТ.ИспользоватьБезПодключенияОборудования ИЛИ НЕ ИспользоватьПодключаемоеОборудование;
	
	Если НЕ Объект.ПробиватьЧекиПоКассеККМ Тогда
		ПараметрыКассыККМ = ЗначениеНастроекВызовСервера.ПараметрыКассыККМ(Справочники.КассыККМ.ПустаяСсылка());
	Иначе
		ПараметрыКассыККМ = ЗначениеНастроекВызовСервера.ПараметрыКассыККМ(Объект.КассаККМ);
		СтруктураСостояниеКассовойСмены = РозничныеПродажиСервер.ПолучитьСостояниеКассовойСмены(Объект.КассаККМ);
		
		КассоваяСмена = СтруктураСостояниеКассовойСмены.КассоваяСмена;
		
		ТекстОшибки = НСтр("ru='Кассовая смена не открыта.'");
		Если НЕ РозничныеПродажиСервер.СменаОткрыта(КассоваяСмена, Объект.Дата, ТекстОшибки) Тогда
			ОбщегоНазначения.СообщитьПользователю(ТекстОшибки, , "Объект.КассаККМ", , Отказ);
		КонецЕсли;
	КонецЕсли;
	
	ПараметрыКассыККМ.ИспользоватьБезПодключенияОборудования = ПараметрыКассыККМ.ИспользоватьБезПодключенияОборудования ИЛИ НЕ ИспользоватьПодключаемоеОборудование;
	
КонецПроцедуры

&НаСервере
Функция ПодключаемоеОборудованиеКассы()
	
	Возврат Объект.КассаККМ.ПодключаемоеОборудование;
	
КонецФункции 

&НаКлиенте
Процедура ПробитьЧек(ПараметрыКассыККМ, НомерЧека)
    
    // &ЗамерПроизводительности 
    Замер = ОценкаПроизводительностиРТКлиент.НачатьЗамер(Ложь, 
                                                    "Документ.ОплатаОтПокупателяПлатежнойКартой.Форма.ФормаДокумента.Команда.ПробитьЧек",
                                                               Ложь);
                                                               
	ПараметрыОперации = Новый Структура;
	ПараметрыОперации.Вставить("Замер", Замер);
	ПараметрыОперации.Вставить("ИдентификаторУстройства", ПараметрыКассыККМ.ИдентификаторУстройства);
	
	ЭтаФорма.Доступность = Ложь;
	
	// Готовим данные
	ОбщиеПараметры  = ВходящиеДанныеДляФРСервер(ПараметрыКассыККМ.РаспределениеВыручкиПоСекциям, НомерЧека);
	
	Оповещение = Новый ОписаниеОповещения("ПробитьЧекЗавершение", ЭтотОбъект, ПараметрыОперации);
	
	ПодключенноеОборудование = Новый Структура("Терминал, ФискальныеУстройства");
	ПодключенноеОборудование.ФискальныеУстройства = Новый Массив; 
	ПодключенноеОборудование.ФискальныеУстройства.Добавить(ПараметрыКассыККМ.ИдентификаторУстройства);

	
	ПараметрыОперации = Новый Структура;
	ПараметрыОперации.Вставить("ДокументСсылка", Объект.Ссылка);
	ПараметрыОперации.Вставить("Организация", Объект.Организация);
	ПараметрыОперации.Вставить("Партнер", Объект.Контрагент);
	ПараметрыОперации.Вставить("ПодключенноеОборудование", ПодключенноеОборудование);
	ПараметрыОперации.Вставить("ТорговыйОбъект", Неопределено);
	
	ОткрытьФорму(
		"Обработка.ПечатьЧека.Форма",
		ПараметрыОперации,
		ЭтотОбъект,,,,
		Оповещение);
		
КонецПроцедуры

&НаСервере
Процедура ПодготовитьИПроверитьПечатьЧека(Отказ, ПараметрыКассыККМ)
	
	Отказ = Ложь;
	
	Если ЗначениеЗаполнено(Объект.КассаККМ)  Тогда
		ПараметрыКассыККМ = ЗначениеНастроекВызовСервера.ПараметрыКассыККМ(Объект.КассаККМ);
		ПараметрыКассыККМ.Вставить("УстройствоПодключено", Ложь);
		ПараметрыКассыККМ.ИспользоватьБезПодключенияОборудования = ПараметрыКассыККМ.ИспользоватьБезПодключенияОборудования
																	ИЛИ НЕ ИспользоватьПодключаемоеОборудование;
		
		СтруктураСостояниеКассовойСмены = РозничныеПродажиСервер.ПолучитьСостояниеКассовойСмены(Объект.КассаККМ);
		
		КассоваяСмена = СтруктураСостояниеКассовойСмены.КассоваяСмена;
		
		ТекстОшибки = НСтр("ru='Кассовая смена не открыта.'");
		Если НЕ РозничныеПродажиСервер.СменаОткрыта(КассоваяСмена, Объект.Дата, ТекстОшибки) Тогда
			
			ОбщегоНазначения.СообщитьПользователю(ТекстОшибки, , "Объект.КассаККМ", , Отказ);
			
		КонецЕсли;
	Иначе
		ТекстОшибки = НСтр("ru='Не выбрана касса ККМ.'");
		ОбщегоНазначения.СообщитьПользователю(ТекстОшибки, , "Объект.КассаККМ", , Отказ);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокТелефоновКонтрагента()
	
	Элементы.ТелефонСтрокой.КнопкаВыпадающегоСписка = Ложь;
	Элементы.ТелефонСтрокой.СписокВыбора.Очистить();
	
	Если НЕ ЗначениеЗаполнено(Объект.Контрагент) Тогда
		Возврат;
	КонецЕсли;
	
	СписокТелефонов = ПодключаемоеОборудованиеРТ.ТелефоныОбъектаДляЧека(Объект.Контрагент);
	
	Если СписокТелефонов.Количество() > 0 Тогда
		
		Элементы.ТелефонСтрокой.КнопкаВыпадающегоСписка = Истина;
		Элементы.ТелефонСтрокой.ОтображениеКнопкиВыбора = ОтображениеКнопкиВыбора.ОтображатьВВыпадающемСписке;
		
		Для каждого НомерТелефона Из СписокТелефонов Цикл
			Элементы.ТелефонСтрокой.СписокВыбора.Добавить(НомерТелефона.Значение, НомерТелефона.Представление);
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПредставитьТелефонИEmailКлиент()
	
	Если ЗначениеЗаполнено(Объект.Телефон) Тогда
		Если ЗначениеЗаполнено(Объект.Телефон) Тогда
			СохраненныйТелефон = Число(Объект.Телефон);
		Иначе
			СохраненныйТелефон = 0;
		КонецЕсли;
		Телефон = 0;
		ПодключаемоеОборудованиеРТКлиент.ПреобразоватьТелефонКПользовательскомуВиду(СохраненныйТелефон, Телефон, ТелефонСтрокой);
		ДанныеSMSИлиEmail = ТелефонСтрокой;
		ОтправлятьЧек = "НаТелефон";
	ИначеЕсли ЗначениеЗаполнено(Объект.АдресЭП) Тогда
		ДанныеSMSИлиEmail = Объект.АдресЭП;
		ОтправлятьЧек = "НаЕмаил";
	Иначе
		ОтправлятьЧек = "НеОтправлять";
	КонецЕсли;
	
	ОтправлятьЧекПриИзмененииКлиент();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправлятьЧекПриИзмененииКлиент()
	
	Элементы.АдресЭП.Видимость 			= ОтправлятьЧек = "НаЕмаил";
	Элементы.ТелефонСтрокой.Видимость 	= ОтправлятьЧек = "НаТелефон";
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВозможностьПечатиЧекаЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат Тогда
		НапечататьЧекКлиент();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НапечататьЧекКлиент()
	
	Перем Отказ, ПараметрыКассыККМ; 
		
	ПодготовитьИПроверитьПечатьЧека(Отказ, ПараметрыКассыККМ);
	
	Если Отказ Тогда
		Возврат
	КонецЕсли;
	
	Если НЕ ИспользоватьПодключаемоеОборудование ИЛИ ПараметрыКассыККМ.ИспользоватьБезПодключенияОборудования Тогда
		
		Если НомерДокументаКассыККМ[Объект.КассаККМ] <> Неопределено Тогда
			Объект.НомерЧекаККМ  = НомерДокументаКассыККМ[Объект.КассаККМ];
		Иначе
			Объект.НомерЧекаККМ  = ПорядковыйНомерПродажи;
		КонецЕсли; 
		Объект.ПробитЧек     = Истина;
		Модифицированность = Ложь;
		
		РезультатЗаписи = Записать(Новый Структура("РежимЗаписи", РежимЗаписиДокумента.Запись));
		
		Если РезультатЗаписи = Истина Тогда
			НомерДокументаКассыККМ[Объект.КассаККМ] = Объект.НомерЧекаККМ + 1;
			ПорядковыйНомерПродажи = ПорядковыйНомерПродажи + 1;
		КонецЕсли;
		
	Иначе
		НомерЧека = НомерДокументаКассыККМ[Объект.КассаККМ] + 1;
		ПробитьЧек(ПараметрыКассыККМ, НомерЧека);
	КонецЕсли;
	
	ОбменССайтомРТВызовСервера.ЗаписатьСостояниеОплатыЗаказаПокупателя(Объект.ЗаказПокупателя, Объект.Ссылка);
	
КонецПроцедуры

&НаСервере
Функция ВходящиеДанныеДляФРСервер(РаспределениеВыручкиПоСекциям, НомерЧека)
	
	Возврат Документы.ОплатаОтПокупателяПлатежнойКартой.ПодготовитьДанныеДляПробитияЧека(Объект.Ссылка, РаспределениеВыручкиПоСекциям, НомерЧека);
	
КонецФункции

&НаСервере
Процедура РасшифровкаПлатежаДокументРасчетовСКонтрагентомПриИзмененииСервер(ИдентификаторСтроки)
	
	ТекущаяСтрока = Объект.РасшифровкаПлатежа.НайтиПоИдентификатору(ИдентификаторСтроки);
	
	ДенежныеСредстваСервер.ЗаполнитьСистемуНалогообложенияЭлементаФормы(ТекущаяСтрока);
	ДенежныеСредстваСервер.ЗаполнитьПризнакСпособаРасчета(Объект, ТекущаяСтрока);
	
	ЗаполнитьСистемуНалогообложения();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСистемуНалогообложения()
	
	Если Объект.ПробиватьЧекиПоКассеККМ Тогда
		ДенежныеСредстваСервер.ЗаполнитьСистемуНалогообложения(Объект);
	Иначе
		Объект.СистемаНалогообложения = Перечисления.ТипыСистемНалогообложенияККТ.ПустаяСсылка();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьСНОРасшифровкиНаСервере()
	
	Если Объект.РасшифровкаПлатежа.Количество() = 0 ИЛИ НЕ Объект.ПробиватьЧекиПоКассеККМ Тогда
		Возврат;
	КонецЕсли;
	
	ДенежныеСредстваСервер.ЗаполнитьСистемуНалогообложенияЭлементаФормы(Объект.РасшифровкаПлатежа);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьСНО(ТекущаяСтрока = Неопределено, ВыводитьСообщения = Ложь)
	
	ЕстьНеСоответствие = Ложь;
	
	Если Объект.ПробиватьЧекиПоКассеККМ Тогда
		
		ШаблонСообщений = НСтр("ru='В строке №%1 в документе расчетов с контрагентом система налогообложения отличается от системы налогообложения документа.'");
		
		Для каждого СтрокаРасшифровки Из Объект.РасшифровкаПлатежа Цикл
			
			Если ЗначениеЗаполнено(СтрокаРасшифровки.СистемаНалогообложения)
				И Объект.СистемаНалогообложения <> СтрокаРасшифровки.СистемаНалогообложения Тогда
				
				ЕстьНеСоответствие = Истина;
				
				Если ВыводитьСообщения
					И (ТекущаяСтрока = Неопределено ИЛИ ТекущаяСтрока = СтрокаРасшифровки) Тогда
					
					ОбщегоНазначенияКлиент.СообщитьПользователю(
						СтрШаблон(ШаблонСообщений, СтрокаРасшифровки.НомерСтроки),
						,
						СтрШаблон("Объект.РасшифровкаПлатежа[%1].СистемаНалогообложения", СтрокаРасшифровки.НомерСтроки-1));
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если ЕстьНеСоответствие Тогда
		
		Элементы.ДекорацияНесоответствиеСНО.Видимость = Истина;
		
	Иначе
		
		Элементы.ДекорацияНесоответствиеСНО.Видимость = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ПроверитьЗаполнениеКлючевыхРеквизитов()
	
	Отказ = Ложь;
	
	Если НЕ ЗначениеЗаполнено(Объект.Магазин) Тогда
		ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения("Поле", "Заполнение", НСтр("ru = 'Магазин'"));
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, "Магазин", "Объект", Отказ);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.ЭквайринговыйТерминал) Тогда
		ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения("Поле", "Заполнение", НСтр("ru = 'Эквайринговый терминал'"));
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, "ЭквайринговыйТерминал", "Объект", Отказ);
	КонецЕсли;
	
	Если Объект.ХозяйственнаяОперация <> ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ПрочиеДоходы") 
		И НЕ ЗначениеЗаполнено(Объект.Контрагент) Тогда
		ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения("Поле", "Заполнение", НСтр("ru = 'Контрагент'"));
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, "Контрагент", "Объект", Отказ);
	КонецЕсли;
	
	Возврат НЕ Отказ;
	
КонецФункции

&НаКлиенте
Процедура ПриИзмененииКлючевыхРеквизитов(Источник, Значение)
	
	Если ПредыдущиеЗначения[Источник] = Значение Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.ЗаказПокупателя) И НЕ Источник = "ЭквайринговыйТерминал" Тогда
		Объект.ЗаказПокупателя = Неопределено;
		УправлениеЭлементамиЗаказПокупателя();
	КонецЕсли;
	
	Если Источник = "Магазин" Тогда
		Если ЗначениеЗаполнено(Объект.Магазин) Тогда
			МагазинПриИзмененииСервер();
			ПриИзмененииКлючевыхРеквизитов("ЭквайринговыйТерминал", Объект.ЭквайринговыйТерминал);
		КонецЕсли;
		
		УстановитьДоступностьТерминала();
	ИначеЕсли Источник = "ЭквайринговыйТерминал" Тогда
		СтруктураПараметров = Новый Структура;
		
		ЭквайринговыйТерминалПриИзмененииНаСервере(СтруктураПараметров);
		ЭквайринговыйТерминалПриИзмененииКлиент(СтруктураПараметров);
		ПриИзмененииКлючевыхРеквизитов("Организация", Объект.Организация);
	КонецЕсли;
	
	ПредыдущиеЗначения.Вставить(Источник, Значение);
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьСтрокуВРасшифровкуПриНеобходимости()
	
	Если Объект.РасшифровкаПлатежа.Количество() > 0 Тогда
		Возврат;
	КонецЕсли;
		
	НоваяСтрока = Объект.РасшифровкаПлатежа.Добавить();
	НоваяСтрока.СтатьяДвиженияДенежныхСредств = СтатьяДвиженияДенежныхСредств;
	
	ДенежныеСредстваСервер.ЗаполнитьПризнакСпособаРасчета(Объект, НоваяСтрока);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуРасшифровкиПлатежа()
	
	// Проверим, чтобы ключевые поля документы были заполнены, чтобы в дополнительной форме отборы работали корректно.
	Если НЕ ПроверитьЗаполнениеКлючевыхРеквизитов() Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура("Ссылка, Дата, ХозяйственнаяОперация, Магазин, Организация, Контрагент,
		| СистемаНалогообложения, КассаККМ, ЗаказПокупателя");
	ЗаполнитьЗначенияСвойств(ПараметрыФормы, Объект);
	
	ПараметрыФормы.Вставить("СтатьяДвиженияДенежныхСредств", СтатьяДвиженияДенежныхСредств);
	ПараметрыФормы.Вставить("ЭтоФискальнаяОперация",         Объект.ПробиватьЧекиПоКассеККМ);
	ПараметрыФормы.Вставить("ФормаОплаты",                   ПредопределенноеЗначение("Перечисление.ФормыОплаты.Безналичная"));
	
	АдресХранилищаРасшифровкаПлатежа = ПоместитьВХранилищеРасшифровкуПлатежа();
	ПараметрыФормы.Вставить("АдресХранилищаРасшифровкаПлатежа", АдресХранилищаРасшифровкаПлатежа);
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ПараметрыФормы", ПараметрыФормы);
	СтруктураПараметров.Вставить("ТолькоПросмотр", ТолькоПросмотр);
	
	Оповещение = Новый ОписаниеОповещения("ОткрытьФормуРасшифровкиЗавершение", ЭтотОбъект);
	
	ОткрытьФорму("ОбщаяФорма.РасшифровкаПлатежа", СтруктураПараметров, ЭтотОбъект,,,,Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуРасшифровкиЗавершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Если РезультатЗакрытия = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, РезультатЗакрытия);
	ЗаполнитьЗначенияСвойств(Объект,     РезультатЗакрытия, "СистемаНалогообложения");
	
	ПолучитьРасшифровкаПлатежаИзВременногоХранилищаНаСервере(РезультатЗакрытия.АдресХранилищаРасшифровкаПлатежа);
	
	Объект.СуммаДокумента = ОбработкаТабличнойЧастиТоварыКлиентСервер.СуммаДокумента(Объект.РасшифровкаПлатежа, Истина);
	
	ПроверитьСНО();
	
	Если Объект.РасшифровкаПлатежа.Количество() > 1 Тогда
		СуммаУстановленаВручную = Ложь;
	КонецЕсли;
	
	УправлениеЭлементамиРасшифровкиПлатежа(ЭтотОбъект);
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаСервере
Функция ПоместитьВХранилищеРасшифровкуПлатежа()

	РасшифровкаПлатежа = Объект.РасшифровкаПлатежа.Выгрузить();
	
	Адрес = ПоместитьВоВременноеХранилище(РасшифровкаПлатежа, УникальныйИдентификатор);
	
	Возврат Адрес;

КонецФункции

&НаСервере
Процедура ПолучитьРасшифровкаПлатежаИзВременногоХранилищаНаСервере(АдресХранилищаРасшифровкаПлатежа)
	
	РасшифровкаПлатежа = ПолучитьИзВременногоХранилища(АдресХранилищаРасшифровкаПлатежа);
	Объект.РасшифровкаПлатежа.Загрузить(РасшифровкаПлатежа);
	
	ДобавитьСтрокуВРасшифровкуПриНеобходимости();
	
КонецПроцедуры

#Область ЗаказПокупателя

&НаКлиенте
Процедура ПоказатьВопросВыбратьЗаказПокупателяЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		ОткрытьФормуВыбораЗаказаПокупателя();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуВыбораЗаказаПокупателя()
	
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("Организация", Объект.Организация);
	ПараметрыОтбора.Вставить("Контрагент",  Объект.Контрагент);
	ПараметрыОтбора.Вставить("Магазин",     Объект.Магазин);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Отбор", ПараметрыОтбора);
	
	ОткрытьФорму("Документ.ЗаказПокупателя.ФормаВыбора",
		ПараметрыФормы,
		ЭтотОбъект,,,,
		Новый ОписаниеОповещения("ВыборЗаказаПокупателяЗавершение", ЭтотОбъект),
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыборЗаказаПокупателяЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Объект.ЗаказПокупателя = Результат;
	УправлениеЭлементамиЗаказПокупателя();
	ЗаполнитьПоЗаказуПокупателя();
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьВопросЗаполнитьПоЗаказуЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		ЗаполнитьПоЗаказуПокупателя();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоЗаказуПокупателя()
	
	ЗаполнитьПоЗаказуПокупателяНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоЗаказуПокупателяНаСервере()
	
	ДанныеЗаполненияПрочие = Новый Структура;
	Если ЗначениеЗаполнено(СтатьяДвиженияДенежныхСредств) Тогда
		ДанныеЗаполненияПрочие.Вставить("СтатьяДвиженияДенежныхСредств", СтатьяДвиженияДенежныхСредств);
	КонецЕсли;
	
	ФинансыСервер.ЗаполнениеРасшифровкиПлатежаПоЗаказуПокупателя(Объект, Объект.ЗаказПокупателя, ДанныеЗаполненияПрочие);
	
	УстановитьСНОРасшифровкиНаСервере();
	ЗаполнитьСистемуНалогообложения();
	ДенежныеСредстваСервер.ЗаполнитьПризнакСпособаРасчета(Объект);
	
КонецПроцедуры

&НаКлиенте
Процедура УправлениеЭлементамиЗаказПокупателя()
	
	Если НЕ Объект.ХозяйственнаяОперация = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ПоступлениеОплатыОтКлиента") Тогда
		Возврат;
	КонецЕсли;
	
	ПродажаПоЗаказу = ЗначениеЗаполнено(Объект.ЗаказПокупателя);
	
	Элементы.ОткрытьЗаказПокупателя.Заголовок = Строка(Объект.ЗаказПокупателя);
	
	// Установим параметры выбора документа расчетов.
	ПараметрыВыбораДокументРасчетов = Новый Массив;
	ПараметрыВыбораДокументРасчетов.Добавить(Новый ПараметрВыбора("Отбор.ОперацияСДенежнымиСредствами", Ложь));
	Если ПродажаПоЗаказу Тогда
		ПараметрыВыбораДокументРасчетов.Добавить(Новый ПараметрВыбора("Отбор.ЗаказПокупателя", Объект.ЗаказПокупателя));
	КонецЕсли;
	Элементы.РасшифровкаПлатежаДокументРасчетовСКонтрагентом.ПараметрыВыбора = Новый ФиксированныйМассив(ПараметрыВыбораДокументРасчетов);
	
	// Установим видимость.
	Элементы.ВыбратьЗаказПокупателя.Видимость  = НЕ ПродажаПоЗаказу;
	Элементы.ОткрытьЗаказПокупателя.Видимость  = ПродажаПоЗаказу;
	Элементы.ОчиститьЗаказПокупателя.Видимость = ПродажаПоЗаказу;
	
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура ТипОплатыПриИзменении(Элемент)
	Элементы.ВидОплаты.Доступность = ТипОплаты = 0;
КонецПроцедуры

#КонецОбласти