
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.РегНомерНаБумажномНосителе) 
		ИЛИ Объект.ДатаВыпискиНаБумажномНосителе <> '00010101000000' Тогда
		ВыпискаБумажногоАкта = Истина;
	Иначе
		ВыпискаБумажногоАкта = Ложь;
	КонецЕсли;

	//Заполнение по отборам в форме списка
	Если Параметры.Ключ.Пустая() Тогда
		Если Параметры.ЗначенияЗаполнения.Свойство("Организация") Тогда
			СтруктураДанных = ПолучитьРеквизитыОрганизацииКонтрагента(Параметры.ЗначенияЗаполнения.Организация, "Поставщик");
			Объект.Организация = Параметры.ЗначенияЗаполнения.Организация;
			Объект.Поставщик   = Параметры.ЗначенияЗаполнения.Организация;
			ЗаполнитьЗначенияСвойств(Объект, СтруктураДанных); 
		КонецЕсли;
		Если Параметры.ЗначенияЗаполнения.Свойство("Контрагент") Тогда
			СтруктураДанных = ПолучитьРеквизитыОрганизацииКонтрагента(Параметры.ЗначенияЗаполнения.Контрагент, "Получатель");
			Объект.Получатель = Параметры.ЗначенияЗаполнения.Контрагент;
			ЗаполнитьЗначенияСвойств(Объект, СтруктураДанных);
		КонецЕсли;
		Объект.ЭтапОформления = ПредопределенноеЗначение("Перечисление.ЭтапыОформленияДокументовИСЦЭДМ.ВРаботе");
	КонецЕсли;
	
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("ПрефиксыЭлементовФормы", "ДеревоМаркированнойПродукции");
	СобытияФормИСМПТКПереопределяемый.ПриСозданииНаСервере_НастроитьПодключаемоеОборудование(ЭтаФорма, ДополнительныеПараметры);
	
	Если Параметры.Ключ.Пустая() Тогда
		ПодготовитьФормуНаСервере();
		ИнтерфейсИСМПТК.УстановитьЗаголовокФормыДокумента(Строка(Объект.ВидОперации), Объект.Ссылка, ЭтаФорма);
		Объект.НомерИСМПТ = "";
		Если Объект.Направление = ПредопределенноеЗначение("Перечисление.НаправленияДокументовИСМПТК.Входящий") Тогда
			//Требуется сверка полученных товаров и данных Акта
			Объект.Проверен = Ложь;
		Иначе
			Объект.Проверен = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Если Объект.Направление = ПредопределенноеЗначение("Перечисление.НаправленияДокументовИСМПТК.Входящий") 
		И ПравоДоступа("Просмотр", Метаданные.Документы.УведомлениеОВыводеИзОборотаИСМПТК) Тогда
		СписаниеКМ = ПолучитьУВИО();
	КонецЕсли;
	
	// Товарная группа
	Если Объект.Направление = ПредопределенноеЗначение("Перечисление.НаправленияДокументовИСМПТК.Исходящий") Тогда
		ЗаполнитьТоварнуюГруппуВНовомДокументе();
	КонецЕсли;
	
	СобытияФормИСМПТКПереопределяемый.ПриСозданииНаСервере(ЭтотОбъект, Отказ, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ЗаполнитьСведенияОСвязанныхДокументах();
	СформироватьДеревоКодовМаркировки();
	ЗапретитьРедактированиеПолей();
	УправлениеФормой();
	
	СобытияФормИСМПТККлиентПереопределяемый.ПриОткрытии(ЭтотОбъект, Отказ);
	
	ОбщегоНазначенияИСМПТККлиентПереопределяемый.НачатьПодключениеОборудованиеПриОткрытииФормы(ЭтаФорма, "СканерШтрихкода");
	ОбщегоНазначенияИСМПТККлиентПереопределяемый.НачатьОбновлениеКоманд(ЭтотОбъект);

	ЕстьТранспортные = Не (Объект.Марки.НайтиСтроки(Новый Структура("ВидУпаковки", ПредопределенноеЗначение("Перечисление.ВидыУпаковокИСМПТК.Логистическая"))).Количество() = 0);
	ЕстьГрупповые = Не (Объект.Марки.НайтиСтроки(Новый Структура("ВидУпаковки", ПредопределенноеЗначение("Перечисление.ВидыУпаковокИСМПТК.Групповая"))).Количество() = 0);
	Если Объект.ТипАкта = ПредопределенноеЗначение("Перечисление.ВидыДокументаИСМПТК.Исправленный")
		И НЕ Объект.Марки.Количество() = 0
		И ИнтеграцияИСМПТКВызовСервера.ИспользоватьАвтоОпределениеЛогистическихКодовИСМПТК() 
		И Объект.Ссылка.Пустая()
		И (ЕстьТранспортные ИЛИ ЕстьГрупповые) Тогда
		ЗаполнитьДанныеПоКоличествуГрупповыхУпаковокПродолжить();
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	Если НЕ ЗавершениеРаботы И ИспользуютсяСканерыШтрихкода Тогда
		ОбщегоНазначенияИСМПТККлиентПереопределяемый.НачатьОтключениеОборудованиеПриЗакрытииФормы(Неопределено, ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	ПодготовитьФормуНаСервере();
	ИнтерфейсИСМПТК.УстановитьЗаголовокФормыДокумента(Строка(Объект.ВидОперации), Объект.Ссылка, ЭтаФорма);
	
	СобытияФормИСМПТКПереопределяемый.ПриЧтенииНаСервере(ТекущийОбъект, ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	СобытияФормИСМПТКПереопределяемый.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	//Запоняем признак исправленного документа для передачи на сервер ИС МПТ
	Если Объект.ТипАкта = ПредопределенноеЗначение("Перечисление.ВидыДокументаИСМПТК.Исправленный") Тогда
		Объект.ЭтоКорректировка = Истина;
	Иначе
		Объект.ЭтоКорректировка = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	СобытияФормИСМПТККлиентПереопределяемый.ПослеЗаписи(ЭтаФорма, ПараметрыЗаписи);
	ИнтеграцияИСМПТККлиент.ОповеститьФормы(РаботаСДокументамиИСМПТККлиентСервер.ИмяСобытияЗаписьАктПриемаПередачи());
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	УправлениеФормой();
	ИнтерфейсИСМПТК.УстановитьЗаголовокФормыДокумента(Строка(Объект.ВидОперации), Объект.Ссылка, ЭтаФорма);
	СобытияФормИСМПТКПереопределяемый.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	ИзменитьДокументОснование = Ложь;
	
	//Сначала проверяем, если ли в выбранном основании товары, по которым необходимо заполнять Акт
	ЕстьМаркируемыйТовар = ПроверитьНаличиеМаркируемогоТовара(ВыбранноеЗначение);
	
	Если Не ЕстьМаркируемыйТовар Тогда
		//Если в выбранном основании нет маркируемого товара, то заполнять Акт по нему не имеет смысла. 
		//Сообщаем пользователю, отменяем выбор.
		ТекстСообщения = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияВДокументеОтсутствуетМаркируемаяпродукция();
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ДокументОснование%", ВыбранноеЗначение);
		Сообщить(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(ВыбранноеЗначение) <> Тип("Структура") Тогда
		
		Если ЗначениеЗаполнено(Объект.ДокументОснование)
			И Объект.ДокументОснование <> ВыбранноеЗначение 
			И СтрНайти(ИсточникВыбора.ИмяФормы, "ФормаВыбораИзКлассификатора") = 0 Тогда
			
			ТекстВопроса = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияДокументУжеОтраженВУчетеНужноОтразитьПовторно();
			ТекстВопроса = СтрЗаменить(ТекстВопроса, "%СтарыйДокументОснование%", Объект.ДокументОснование);
			
			ИзменитьДокументОснованиеЗавершение = Новый ОписаниеОповещения("ИзменитьДокументОснованиеЗавершение", ЭтаФорма, Новый Структура("ВыбранноеЗначение", ВыбранноеЗначение));
			ПоказатьВопрос(ИзменитьДокументОснованиеЗавершение, ТекстВопроса, РежимДиалогаВопрос.ОКОтмена);
			
		Иначе
			
			ИзменитьДокументОснование = Истина;
			
		КонецЕсли;
		
		Если ИзменитьДокументОснование Тогда
			
			Структура_СвязанныйАкт = ПроверитьСвязанныйАкт(ВыбранноеЗначение);
			
			Если Структура_СвязанныйАкт = Неопределено Тогда
				//Если у выбранного документа-основания нет связанного Акта, заполняем его без вопросов
				Объект.ДокументОснование = ВыбранноеЗначение;
				СформироватьПредставлениеДокументаОснования(ЭтаФорма);
				Если Объект.Направление = ПредопределенноеЗначение("Перечисление.НаправленияДокументовИСМПТК.Исходящий") 
					И Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыДокументовИСМПТК.Черновик")
					И Не Объект.ТипАкта = ПредопределенноеЗначение("Перечисление.ВидыДокументаИСМПТК.Исправленный") Тогда
					ТекстВопроса = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияПерезаполнитьДокументПоНовомуОснованию();
					ПерезаполнитьДокументПоОснованию = Новый ОписаниеОповещения("ПерезаполнитьДокументПоОснованию", ЭтаФорма);
					ПоказатьВопрос(ПерезаполнитьДокументПоОснованию, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
				Иначе 
					УправлениеФормой();
				КонецЕсли;
				Модифицированность = Истина;
			Иначе
				//Если связанный Акт есть, предупреждаем об этом пользователя и даем возможность отказаться от выбора
				ТекстВопроса = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияЕстьСвязанныйДокументМаркировкиПривязатьЕщеОдин();
				ТекстВопроса = СтрЗаменить(ТекстВопроса, "%ДокументОснование%", ВыбранноеЗначение);
				
				ПродолжитьЗаполнениеДокументаОснования = Новый ОписаниеОповещения("ПродолжитьЗаполнениеДокументаОснования", ЭтаФорма, Новый Структура("ВыбранноеЗначение", ВыбранноеЗначение));
				ПоказатьВопрос(ПродолжитьЗаполнениеДокументаОснования, ТекстВопроса, РежимДиалогаВопрос.ОКОтмена);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = РаботаСДокументамиИСМПТККлиентСервер.ИмяСобытияЗаписьАктПриемаПередачи() Тогда		
		
		Если Не Объект.Ссылка.Пустая() Тогда
			ЭтаФорма.Прочитать();	
		КонецЕсли;
		
		СформироватьДеревоКодовМаркировки();
		ЗапретитьРедактированиеПолей();
		ЗаполнитьСведенияОСвязанныхДокументах();
		
	ИначеЕсли ИмяСобытия = РаботаСДокументамиИСМПТККлиентСервер.ИмяСобытияЗаписьУведомлениеОРасхождении() Тогда		
		
		Если Не Объект.Ссылка.Пустая() Тогда
			ЭтаФорма.Прочитать();	
		КонецЕсли;
		ЗаполнитьСведенияОСвязанныхДокументах();
		
	ИначеЕсли Источник = "ПодключаемоеОборудование" И ВводДоступен() Тогда
		Если ИмяСобытия = "ScanData" Тогда
			ОбработкаСобытияСканераОбщая(Параметр);
		КонецЕсли;
		
	ИначеЕсли ИмяСобытия = "ЗакрытиеФормыСверкиТоваров" Тогда
		
		ПолучитьСтруктурыРасхожденийИзХранилище(Параметр);
				
	ИначеЕсли ИмяСобытия = "Запись_УведомлениеОВыводеИзОборота" Тогда
		
		СписаниеКМ = ПолучитьУВИО();
				
	Иначе
		РаботаСДокументамиИСМПТККлиентПереопределяемый.ОбработкаОповещенияДокументыИСМПТ(ЭтаФорма, Объект.Ссылка, ИмяСобытия, Параметр, Источник);		
	КонецЕсли;
	
	СобытияФормИСМПТККлиентПереопределяемый.ОбработкаОповещения(ЭтотОбъект, ИмяСобытия, Параметр, Источник);
	УправлениеФормой();
	
КонецПроцедуры

&НаКлиенте
Процедура ВнешнееСобытие(Источник, Событие, Данные)
	
	Если Не СобытияФормИСМПТККлиентПереопределяемый.ОбрабатыватьВнешнееСобытиеТО() Тогда
		Возврат;
	КонецЕсли;
	
	Параметр = Новый Массив;
	Параметр.Добавить(Данные);
	Параметр.Добавить(Неопределено);
	
	Если ВводДоступен() Тогда
		Если Событие = "Штрихкод" ИЛИ Событие = "ПолученШтрихкод" Тогда
			ОбработкаСобытияСканераОбщая(Параметр);
		КонецЕсли;
	Иначе			
		РаботаСДокументамиИСМПТККлиентПереопределяемый.ОбработкаОповещенияДокументыИСМПТ(ЭтаФорма, Объект.Ссылка, Событие, Параметр, Источник);		
	КонецЕсли;
		
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
		
	Если ВыпискаБумажногоАкта И Не ЗначениеЗаполнено(Объект.ДатаВыпискиНаБумажномНосителе) Тогда
		ТекстСообщения = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияНеУказанаДатаДокументаВыписанногоНаБумаге();
		ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
	Если ВыпискаБумажногоАкта И Не ЗначениеЗаполнено(Объект.РегНомерНаБумажномНосителе) 
		И Объект.ДатаВыпискиНаБумажномНосителе = '00010101000000' Тогда
		ТекстСообщения = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияНеУказанНомерДокументаВыписанногоНаБумаге();
		ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаСобытияСканераОбщая(Параметр)
	
	ОчиститьСообщения();
	Если Объект.Направление = ПредопределенноеЗначение("Перечисление.НаправленияДокументовИСМПТК.Входящий") Тогда 
		ТекстСообщения = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияДляВходящегоИспользуйтеФормуСверки();
		ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
	Иначе
		Если НЕ Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыДокументовИСМПТК.Черновик") Тогда
			ТекстСообщения = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияУказаниеКМТолькоВЧерновике("ИСМПТ");
			ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);	
		Иначе
			Если ИнтеграцияИСМПТКВызовСервера.ИспользоватьАвтоПроверкаВалидностиКодаИСМПТК() 
				И Не ЗначениеЗаполнено(Объект.Организация) Тогда
				ТекстСообщения = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияВключенАвтозапросНужнаОрганизацияДляВыполнения("АвтоПроверкаВалидностиКодаИСМПТК");
				ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
				Возврат;
			КонецЕсли;
			Если Не РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйКлиентСервер.ПроверкаФорматаТранспортногоКодаПройденаУспешно(РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйКлиент.ПреобразоватьДанныеСоСканераВСтруктуру(Параметр)) Тогда
				Возврат;
			КонецЕсли;			
			ОбработатьКодМаркировки(РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйКлиент.ПреобразоватьДанныеСоСканераВСтруктуру(Параметр));
		КонецЕсли;
	КонецЕсли;	
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

#Область ОтражениеВУчете

&НаКлиенте
Процедура ПредставлениеДокументаОснованияНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если ЗначениеЗаполнено(Объект.ДокументОснование) Тогда
		ПоказатьЗначение(, Объект.ДокументОснование);
	Иначе
		Кнопки = Новый СписокЗначений;
		Кнопки.Добавить("Создать", РаботаСТекстамиИСМПТККлиентСервер.ТекстКомандыСоздать());
		Кнопки.Добавить("Выбрать", РаботаСТекстамиИСМПТККлиентСервер.ТекстКомандыВыбрать());
		Кнопки.Добавить("Отмена",  РаботаСТекстамиИСМПТККлиентСервер.ТекстКомандыОтмена());
		ОтразитьДокументВУчетеЗавершение = Новый ОписаниеОповещения("ОтразитьДокументВУчетеЗавершение", ЭтаФорма);
		Если Модифицированность Тогда
			ПоказатьВопрос(ОтразитьДокументВУчетеЗавершение, РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияВопросОтразитьДокументВУчетеСпредварительнойЗаписью(), Кнопки);
		Иначе
			ПоказатьВопрос(ОтразитьДокументВУчетеЗавершение, РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияВопросОтразитьДокументВУчете(), Кнопки);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтразитьДокументВУчетеЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт

	Если Модифицированность Тогда
		Попытка
			ЭтотОбъект.Записать();
		Исключение 
			
			Если Объект.Ссылка.Пустая() Тогда
				ПредставлениеПолное = ОбщегоНазначенияИСМПТКВызовСервера.ПолучитьИмяИПредставлениеПоСсылке(Объект.Ссылка).Синоним;
			Иначе
				ПредставлениеПолное = Объект.Ссылка;
			КонецЕсли;
			
			ТекстОшибки = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияОшибкаПриЗаписиДокументаСПараметромСмотриЖурналРегистрации();
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ДанныеДокумента%", ПредставлениеПолное);
			
			ИмяСобытия  = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияИмяСобытияЗаписьДокумента();
			ИмяСобытия  = СтрЗаменить(ИмяСобытия, "%ЗаписываемыйДокумент%", ПредставлениеПолное);
			ОбщегоНазначенияИСМПТКВызовСервера.СоздатьЗаписьЖурналаРегистрации(ИмяСобытия, "Ошибка",,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
			ВызватьИсключение ТекстОшибки;
		КонецПопытки;
	КонецЕсли;
	
	Если РезультатВопроса = "Выбрать" Тогда
		ВыбратьДокументОснование();
	ИначеЕсли РезультатВопроса = "Создать" Тогда
		СоздатьДокументОснованиеНаКлиентеПослеЗаписи(КодВозвратаДиалога.ОК, Неопределено);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДокументОснованиеВыбрать(Команда)
	
	ВыбратьДокументОснование();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьДокументОснование()
	
	Если Объект.Направление = ПредопределенноеЗначение("Перечисление.НаправленияДокументовИСМПТК.ПустаяСсылка") Тогда
		ПоказатьПредупреждение(, РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияНеУказаноНаправлениеДокумента());
		Возврат;
	КонецЕсли;
	
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперацииИСМПТК.ПустаяСсылка") Тогда
		ПоказатьПредупреждение(, РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияНеУказанВидОперацииДокумента());
		Возврат;
	КонецЕсли;
	
	ДокументыВыбора = РаботаСДокументамиИСМПТККлиентСерверПереопределяемый.ПолучитьСписокДокументовОснованияДляАктаПриемаПередачиИСМПТ(Объект.Направление, Объект.ВидОперации, "Выбрать");
	
	Если ДокументыВыбора.Количество() > 1 Тогда
		
		ПараметрыФормы = Новый Структура();
		ПараметрыФормы.Вставить("ДокументыВыбора", ДокументыВыбора);
					
		Оповещение = Новый ОписаниеОповещения("ВыборДокументаОснованияЗавершение", ЭтотОбъект);
		ОткрытьФорму("ОбщаяФорма.ФормаВыбораДокументаОснованияИСМПТК", ПараметрыФормы,,,,,Оповещение,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	ИначеЕсли ДокументыВыбора.Количество() = 1 Тогда
		
		ВыбранныйДокумент = ДокументыВыбора[0].Значение;
		ВыборДокументаОснованияЗавершение(ВыбранныйДокумент, Неопределено);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыборДокументаОснованияЗавершение(ВыбранныйДокумент, ДополнительныеПараметры) Экспорт
	
	Если ВыбранныйДокумент <> "" И ТипЗнч(ВыбранныйДокумент) <> Тип("Неопределено") Тогда
		
		ИмяДокумента = ВыбранныйДокумент;
		
		СтруктураОтбора = Новый Структура();
		Если ЗначениеЗаполнено(Объект.Организация) Тогда
			СтруктураОтбора.Вставить("Организация", Объект.Организация);
		КонецЕсли;
		Если Объект.Направление = ПредопределенноеЗначение("Перечисление.НаправленияДокументовИСМПТК.Входящий") Тогда
			Если ЗначениеЗаполнено(Объект.Поставщик) Тогда
				СтруктураОтбора.Вставить("Контрагент", Объект.Поставщик);
			КонецЕсли;
		Иначе
			Если ЗначениеЗаполнено(Объект.Получатель) Тогда
				СтруктураОтбора.Вставить("Контрагент", Объект.Получатель);
			КонецЕсли;
		КонецЕсли;
		
		ДопПараметрыДляОтбора = Новый Структура("ИмяДокумента", ИмяДокумента);
		РаботаСДокументамиИСМПТККлиентПереопределяемый.ДополнитьСтруктуруОтбораПервичногоДокумента(СтруктураОтбора, Объект, ДопПараметрыДляОтбора);
		
		СтруктураПараметров = Новый Структура("Отбор, РежимВыбора, МножественныйВыбор", СтруктураОтбора, Истина, Ложь);
		
		ИмяФормыВыбора = "Документ." + ИмяДокумента + ".ФормаВыбора"; 
		ОткрытьФорму(ИмяФормыВыбора, СтруктураПараметров , ЭтаФорма,,,,, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьДокументОснование(Команда)
	
	Если ЗначениеЗаполнено(Объект.ДокументОснование) Тогда
		ПоказатьЗначение(, Объект.ДокументОснование);
	Иначе
		Действие = РаботаСДокументамиИСМПТККлиентСервер.ДействиеОткрыть();
		ПоказатьПредупреждение(, РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияОтказДокументНеОтраженВУчете(Действие));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтсоединитьДокументОснование(Команда)
	
	Если ЗначениеЗаполнено(Объект.ДокументОснование) Тогда
		Объект.ДокументОснование = Неопределено;
		СформироватьПредставлениеДокументаОснования(ЭтаФорма);
		НастроитьВидимостьИтоговыхПолей();
		Модифицированность = Истина;
	Иначе
		Действие = РаботаСДокументамиИСМПТККлиентСервер.ДействиеОтсоединить();
		ПоказатьПредупреждение(, РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияОтказДокументНеОтраженВУчете(Действие));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДокументОснованиеСоздать(Команда)
	
	Если Объект.Направление = ПредопределенноеЗначение("Перечисление.НаправленияДокументовИСМПТК.Входящий") Тогда
		НужноСообщитьОНезаполненнойНоменклатуре =  ПроверитьЗаполненностьНоменклатурыТоварахВоВходящемАПП();
		Если НужноСообщитьОНезаполненнойНоменклатуре Тогда
			ТекстСообщения = НСтр("ru = 'В таблице ""Марки"" есть строки с незаполненной Номенклатурой! Создание документа-основания невозможно!'")
						   + Символы.ПС
						   + НСтр("ru = 'Сначала зарегистрируйте все неопознанные штрихкоды номенклатуры или получите с сервера состав упаковок.'");
			ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Если Объект.Ссылка.Пустая() ИЛИ ЭтаФорма.Модифицированность Тогда
		
		СоздатьДокументОснованиеНаКлиентеПослеЗаписи = Новый ОписаниеОповещения("СоздатьДокументОснованиеНаКлиентеПослеЗаписи", ЭтаФорма);	
		ИнтеграцияИСМПТККлиент.ВопросЗаписатьОбъектПередВыполнением(СоздатьДокументОснованиеНаКлиентеПослеЗаписи);
		
	Иначе
		СоздатьДокументОснованиеНаКлиентеПослеЗаписи(КодВозвратаДиалога.ОК, Неопределено);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьДокументОснованиеНаКлиентеПослеЗаписи(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.ОК Тогда
		
		ДокументыВыбора = РаботаСДокументамиИСМПТККлиентСерверПереопределяемый.ПолучитьСписокДокументовОснованияДляАктаПриемаПередачиИСМПТ(Объект.Направление, Объект.ВидОперации, "Создать");
		
		Если ДокументыВыбора.Количество() > 1 Тогда
			
			ПараметрыФормы = Новый Структура();
			ПараметрыФормы.Вставить("ДокументыВыбора", ДокументыВыбора);
			
			Оповещение = Новый ОписаниеОповещения("СозданиеДокументаОснованияЗавершение", ЭтотОбъект);
			ОткрытьФорму("ОбщаяФорма.ФормаВыбораДокументаОснованияИСМПТК", ПараметрыФормы,,,,,Оповещение, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
			
		ИначеЕсли ДокументыВыбора.Количество() = 1 Тогда
			
			ВыбранныйДокумент = ДокументыВыбора[0].Значение;
			СозданиеДокументаОснованияЗавершение(ВыбранныйДокумент, Неопределено);
			
		КонецЕсли;
	КонецЕсли;
			
КонецПроцедуры

&НаКлиенте
Процедура СозданиеДокументаОснованияЗавершение(ВыбранныйДокумент, ДополнительныеПараметры) Экспорт
	
	Если Не ВыбранныйДокумент = Неопределено Тогда
		Массив = Новый Массив;
		Массив.Добавить(Объект.Ссылка);
		
		ДанныеДляСоздания = Новый Структура();
		ДанныеДляСоздания.Вставить("ИсходныйДокумент", 	  Массив);
		ДанныеДляСоздания.Вставить("СоздаваемыйДокумент", ВыбранныйДокумент);

		РаботаСДокументамиИСМПТККлиент.СоздатьПервичныйДокумент(ДанныеДляСоздания);
		СформироватьПредставлениеДокументаОснования(ЭтаФорма);
		НастроитьВидимостьИтоговыхПолей();
		Модифицированность = Истина;
	КонецЕсли;
			
КонецПроцедуры

#КонецОбласти

#Область СостояниеДокумента

&НаКлиенте
Процедура ПроверенПриИзменении(Элемент)
	
	Если Объект.Направление = ПредопределенноеЗначение("Перечисление.НаправленияДокументовИСМПТК.Входящий") 
		И Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыДокументовИСМПТК.ОжидаетПриемку") Тогда
		Объект.Состояние = ?(Объект.Проведен, ПредопределенноеЗначение("Перечисление.СостоянияДокументовИСМПТК.ПринятПроверен"), ПредопределенноеЗначение("Перечисление.СостоянияДокументовИСМПТК.ПринятОтПоставщика"));
	КонецЕсли;
	
	УправлениеФормой();
	
КонецПроцедуры

&НаСервере
Процедура СформироватьПредставлениеСостояния()
	
	Если Объект.Направление = Перечисления.НаправленияДокументовИСМПТК.Исходящий
		И Объект.Состояние = Перечисления.СостоянияДокументовИСМПТК.Сформирован Тогда
		
		ПредставлениеСостояния = НСтр("ru = 'Документ готов к отправке получателю через ИС МПТ'");
		
	ИначеЕсли Объект.Направление = Перечисления.НаправленияДокументовИСМПТК.Входящий
		И Объект.Состояние = Перечисления.СостоянияДокументовИСМПТК.ПринятПроверен Тогда
		
		ПредставлениеСостояния = НСтр("ru = 'Документ принят от поставщика'");
		
	ИначеЕсли Объект.Направление = Перечисления.НаправленияДокументовИСМПТК.Исходящий
		И (Объект.Состояние = Перечисления.СостоянияДокументовИСМПТК.ПринятСервером
		ИЛИ Объект.Состояние = Перечисления.СостоянияДокументовИСМПТК.ДоставленПолучателю)Тогда
		
		ПредставлениеСостояния = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияДокументУспешноПринятСерверомИСМПТ();
		
	ИначеЕсли Объект.Состояние = Перечисления.СостоянияДокументовИСМПТК.ОбрабатываетсяСервером Тогда
		
		ПредставлениеСостояния = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияДокументОбрабатываетсяСерверомИСМПТ();
		
	ИначеЕсли Объект.Состояние = Перечисления.СостоянияДокументовИСМПТК.ОтклоненСервером Тогда
		
		ПредставлениеСостояния = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияДокументОтклоненСерверомИСМПТ();
		
	ИначеЕсли Объект.Состояние = Перечисления.СостоянияДокументовИСМПТК.Отозван
		ИЛИ Объект.Состояние = Перечисления.СостоянияДокументовИСМПТК.Аннулирован Тогда
		
		ПредставлениеСостояния = НСтр("ru = 'Документ %Состояние%'");
		ПредставлениеСостояния = СтрЗаменить(ПредставлениеСостояния, "%Состояние%", НРег(Объект.Состояние));
				
	ИначеЕсли Объект.Состояние = Перечисления.СостоянияДокументовИСМПТК.Сформирован
		И ВыпискаБумажногоАкта И Не Объект.Ссылка.Пустая() Тогда
		
		ПредставлениеСостояния = НСтр("ru = 'Документ выписан в бумажном виде. Ожидает отправки на сервер ИС МПТ'");
		
	Иначе
		
		Если Объект.Ссылка.Пустая() Тогда
			ПредставлениеСостояния = НСтр("ru = 'Новый документ'");
		Иначе
			ПредставлениеСостояния = НСтр("ru = 'Документ %Состояние%'");
			ПредставлениеСостояния = СтрЗаменить(ПредставлениеСостояния, "%Состояние%", НРег(Объект.Состояние));
		КонецЕсли;
		
	КонецЕсли;
	
	//Если документ Входящий и по нему выполнена сверка реально полученного товара с данными ИС МПТ,
	//т.е. установлен признак проверки на вкладке Товары, дополняем состояние:
	Если Объект.Направление = Перечисления.НаправленияДокументовИСМПТК.Входящий
		И Объект.Проверен 
		И Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыДокументовИСМПТК.ОжидаетПриемку") Тогда
		ПредставлениеСостояния = ПредставлениеСостояния + ". " +  НСтр("ru = 'Выполнена проверка товаров'");
	КонецЕсли;
	
	Элементы.ПредставлениеСостояния.ЦветТекста = ОбщегоНазначенияИСМПТККлиентСервер.ЦветСостояния(Объект.Состояние);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеСостоянияНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если Объект.Направление = ПредопределенноеЗначение("Перечисление.НаправленияДокументовИСМПТК.Исходящий")
		И Объект.Состояние = ПредопределенноеЗначение("Перечисление.СостоянияДокументовИСМПТК.Сформирован") Тогда
		
		ОтправитьПолучателюЗаписьФормы = Новый ОписаниеОповещения("ОтправитьПолучателюЗаписьФормы", ЭтаФорма);
		ТекстВопроса = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияВопросОтправитьДокументПолучателю();
		ПоказатьВопрос(ОтправитьПолучателюЗаписьФормы, ТекстВопроса, РежимДиалогаВопрос.ОКОтмена);
		
	ИначеЕсли Объект.Состояние = ПредопределенноеЗначение("Перечисление.СостоянияДокументовИСМПТК.ОбрабатываетсяСервером") Тогда	
		
		ОбновитьНаСервереЗавершение = Новый ОписаниеОповещения("ОбновитьНаСервереЗавершение", ЭтаФорма);
		ПоказатьВопрос(ОбновитьНаСервереЗавершение, РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияВопросПолучитьРезультатОбработкиДокументаССервераИСМПТ(), РежимДиалогаВопрос.ОКОтмена);
		
	Иначе
		ПоказатьПредупреждение(, ПредставлениеСостояния);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьПолучателюЗаписьФормы(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.ОК Тогда
		Если Объект.Ссылка.Пустая() ИЛИ ЭтаФорма.Модифицированность Тогда
			ОтправитьПолучателюЗавершение = Новый ОписаниеОповещения("ОтправитьПолучателюЗавершение", ЭтаФорма);	
			ИнтеграцияИСМПТККлиент.ВопросЗаписатьОбъектПередВыполнением(ОтправитьПолучателюЗавершение);
		Иначе
			ОтправитьПолучателюЗавершение(КодВозвратаДиалога.ОК, Неопределено);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьПолучателюЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт

	Если РезультатВопроса = КодВозвратаДиалога.ОК Тогда
		Если ИнтеграцияИСМПТККлиент.ОбъектЗаписан(ЭтаФорма) Тогда
			МассивАктов = Новый Массив;
			МассивАктов.Добавить(Объект.Ссылка);
			ИнтеграцияИСМПТККлиент.ОтправитьИсходящиеДокументыИСМПТ(МассивАктов, Новый Структура("ЗапускатьФоновоеЗадание", Ложь));
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОбновитьНаСервереЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.ОК Тогда
		Если ИнтеграцияИСМПТККлиент.ОбъектЗаписан(ЭтаФорма) Тогда
			МассивАктов = Новый Массив;
			МассивАктов.Добавить(Объект.Ссылка);
			ИнтеграцияИСМПТККлиент.ОбновитьДокументыИзИСМПТ(МассивАктов, Новый Структура("ЗапускатьФоновоеЗадание, ТолькоОбновитьСтатус", Ложь, Истина));
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура КомментарийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СобытияФормИСМПТККлиентПереопределяемый.ПоказатьФормуРедактированияКомментария(Элемент.ТекстРедактирования, ЭтотОбъект, "Объект.Комментарий");

КонецПроцедуры

#Область Общее

&НаКлиенте
Процедура ВидОперацииПриИзменении(Элемент)
	
	УправлениеФормой();
	
КонецПроцедуры

&НаКлиенте
Процедура ТипАктаПриИзменении(Элемент)
	
	ТипАктаПриИзмененииНаСервере();	
	
КонецПроцедуры

&НаСервере
Процедура ТипАктаПриИзменениинаСервере()
	
	Объект.ЭтоКорректировка = ?(Объект.ТипАкта = ПредопределенноеЗначение("Перечисление.ВидыДокументаИСМПТК.Исправленный"), Истина, Ложь);
	УправлениеФормой();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыпискаБумажногоАктаПриИзменении(Элемент)
	
	Если Не ВыпискаБумажногоАкта Тогда
		Объект.РегНомерНаБумажномНосителе = "";
		Объект.ДатаВыпискиНаБумажномНосителе = '00010101000000';
	КонецЕсли;
	
	УправлениеФормой();
	
КонецПроцедуры

#КонецОбласти

#Область Поставщик

&НаСервере
Процедура ПоставщикПриИзмененииНаСервере()
	
	Если ЗначениеЗаполнено(Объект.НомерИСМПТ) Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураДанных = ПолучитьРеквизитыОрганизацииКонтрагента(Объект.Поставщик, "Поставщик");
	ЗаполнитьЗначенияСвойств(Объект, СтруктураДанных, "ПоставщикИдентификационныйНомер, ПоставщикНаименование");
	
	Если Объект.Направление = ПредопределенноеЗначение("Перечисление.НаправленияДокументовИСМПТК.Исходящий") Тогда
		Объект.Организация = Объект.Поставщик;
	КонецЕсли;
	
	Если Объект.Направление = ПредопределенноеЗначение("Перечисление.НаправленияДокументовИСМПТК.Входящий")
		И Не ЗначениеЗаполнено(Объект.Поставщик) Тогда 
		Объект.Контрагент = Неопределено;
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ПоставщикПриИзменении(Элемент)
	
	ПоставщикПриИзмененииНаСервере();
	
КонецПроцедуры

#КонецОбласти

#Область Получатель

&НаСервере
Процедура ПолучательПриИзмененииНаСервере()
	
	Если ЗначениеЗаполнено(Объект.НомерИСМПТ) Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураДанных = ПолучитьРеквизитыОрганизацииКонтрагента(Объект.Получатель, "Получатель");
	ЗаполнитьЗначенияСвойств(Объект, СтруктураДанных, "ПолучательИдентификационныйНомер, ПолучательНаименование");
	
	Если Объект.Направление = ПредопределенноеЗначение("Перечисление.НаправленияДокументовИСМПТК.Входящий") Тогда 
		Объект.Организация = Объект.Получатель;
	Иначе
		Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперацииИСМПТК.ВвозИзЕАЭС") 
			Или Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперацииИСМПТК.ВвозИзТретьихСтран") Тогда
			Объект.Организация = Объект.Получатель;
		КонецЕсли;
	КонецЕсли;	

	Если Объект.Направление = ПредопределенноеЗначение("Перечисление.НаправленияДокументовИСМПТК.Исходящий")
		И Не ЗначениеЗаполнено(Объект.Получатель) Тогда 
		Объект.Контрагент = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучательПриИзменении(Элемент)
	
	ПолучательПриИзмененииНаСервере();
	
КонецПроцедуры

#КонецОбласти

#Область Прочее

&НаСервере
Процедура ЗаполнитьЗначенияПоОрганизации()
	
	Если Объект.Направление = ПредопределенноеЗначение("Перечисление.НаправленияДокументовИСМПТК.Входящий") Тогда
		
		Объект.Получатель = Объект.Организация;
						
	ИначеЕсли Объект.Направление = ПредопределенноеЗначение("Перечисление.НаправленияДокументовИСМПТК.Исходящий") Тогда
		
		Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперацииИСМПТК.ВвозИзЕАЭС") 
			Или Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперацииИСМПТК.ВвозИзТретьихСтран") Тогда
			Объект.Получатель = Объект.Организация;
		Иначе
			Объект.Поставщик  = Объект.Организация;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(Объект.НомерИСМПТ) Тогда 
			СтруктураДанных = ПолучитьРеквизитыОрганизацииКонтрагента(Объект.Поставщик, "Поставщик");
			ЗаполнитьЗначенияСвойств(Объект, СтруктураДанных, "ПоставщикИдентификационныйНомер, ПоставщикНаименование");
		КонецЕсли;
				
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.Направление) Тогда
		ЗаполнитьЗначенияПоОрганизации();
	КонецЕсли;
	   
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицФормы

#Область Товары

&НаКлиенте
Процедура ПослеЗакрытияВопросаЗаписатьШтрихкодНоменклатуры(Результат, Параметры) Экспорт

	Если Результат = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
		
	Попытка
		
		Номенклатура = Параметры.Номенклатура;
		EAN 		 = Параметры.EAN;
		GTIN         = Параметры.GTIN;
		ЕдиницаИзмерения = Параметры.ЕдиницаИзмерения;
		Характеристика	 = Параметры.Характеристика;
		
		РаботаСДокументамиИСМПТКПереопределяемый.ЗаписатьШтрихкодНоменклатуры(Номенклатура, EAN, ЕдиницаИзмерения, Характеристика);
		ЗаписатьНоменклатуруВМарки(Номенклатура, GTIN);
		ТекстСообщения = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияНужноЗаписатьДокументДляОбновленияТаблицыМарки();
		ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения, , , "Форма.Объект");
		ОбщегоНазначенияИСМПТККлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ЗарегистрироватьНовыйGTIN", "Доступность", Ложь);
		
	Исключение
		
		Информация = ИнформацияОбОшибке();
		ТекстСообщения = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияНеУдалосьЗаписатьШтрихкодПоПричинеСПараметром();
		ТекстСообщения = ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(ТекстСообщения, КраткоеПредставлениеОшибки(Информация));
		ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения, , , "Форма.Объект");
		ОбщегоНазначенияИСМПТККлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ЗарегистрироватьНовыйGTIN", "Доступность", Истина);
		
	КонецПопытки;

КонецПроцедуры

&НаСервере
Функция ЗаписатьНоменклатуруВМарки(Номенклатура, GTIN)
	
	Отбор = Новый Структура();
	Отбор.Вставить("GTIN", GTIN);
	
	ВидПродукции = ОбщегоНазначенияИСМПТКПереопределяемый.ПолучитьВидПродукцииПоНоменклатуре(Номенклатура);
	
	Строки = Объект.Марки.НайтиСтроки(Отбор);
	Если Строки.Количество() > 0 Тогда
		Для Каждого Строка Из Строки Цикл
			Строка.Номенклатура = Номенклатура;
			Строка.ВидПродукции = ВидПродукции;
		КонецЦикла;
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура ДеревоМаркированнойПродукцииНачалоПеретаскивания(Элемент, ПараметрыПеретаскивания, Выполнение)
	
	Выполнение = Ложь;
	
КонецПроцедуры

#КонецОбласти

#Область Итоги

&НаКлиенте
Процедура ИтогиНоменклатураПриИзменении(Элемент)

	ТекущиеДанные = Элементы.Итоги.ТекущиеДанные;
	Если ЗначениеЗаполнено(ТекущиеДанные.Номенклатура) Тогда
		ТекущиеДанные.КодТНВЭД = РаботаСДокументамиИСМПТКПереопределяемый.ПолучитьКодТНВЭДПоНоменклатуре(ТекущиеДанные.Номенклатура);
		ТекущиеДанные.СтавкаНДС = ОбщегоНазначенияИСМПТКВызовСервера.ПолучитьСтавкуНДСПоНоменклатуре(ТекущиеДанные.Номенклатура);
		ПересчитатьСуммовыеПоказателиВИтогах(Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИтогиЦенаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Итоги.ТекущиеДанные;
	ПересчитатьСуммовыеПоказателиВИтогах(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ИтогиСтавкаНДСПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Итоги.ТекущиеДанные;
	ПересчитатьСуммовыеПоказателиВИтогах(Истина);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ОбработчикиКомандФормы

#Область УведомлениеОРасхождении

&НаКлиенте
Процедура ВвестиУведомлениеОРасхождении(Команда)
	
	ТекстВопроса = "";
	Если НЕ ЗначениеЗаполнено(ЭтаФорма.Параметры.Ключ) ИЛИ ЭтаФорма.Модифицированность Тогда
		ТекстВопроса = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияНельзяВводитьНовыйДокументБезЗаписиОснованияСПараметром()
					 + Символы.ПС
					 + РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияВопросЗаписатьДокумент();
		ТекстВопроса = СтрЗаменить(ТекстВопроса, "%НаименованиеДокумента%", ПолучитьПредставлениеУведомленияОРасхождениях());
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекстВопроса) Тогда
		
		ДополнительныеПараметры = Новый Структура("Форма", ЭтаФорма);
		Режим = РежимДиалогаВопрос.ДаНет;
		Оповещение   = Новый ОписаниеОповещения("ПослеЗакрытияВопросаЗаписьПриСозданииУведомленияОРасхождениях", ЭтотОбъект, ДополнительныеПараметры);
		ПоказатьВопрос(Оповещение, ТекстВопроса, Режим, 0);
		
	Иначе
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Основание", Объект.Ссылка);
		ОткрытьФорму("Документ.УведомлениеОРасхожденииИСМПТК.ФормаОбъекта", ПараметрыФормы);
		
	КонецЕсли;

КонецПроцедуры

&НаСервере
Функция ПолучитьПредставлениеУведомленияОРасхождениях() 
	
	Возврат Метаданные.Документы.УведомлениеОРасхожденииИСМПТК.Представление();
	
КонецФункции

&НаСервере
Функция ПолучитьПредставлениеУведомленияОСписании() 
	
	Возврат Метаданные.Документы.УведомлениеОВыводеИзОборотаИСМПТК.Представление();
	
КонецФункции

&НаКлиенте
Процедура ПослеЗакрытияВопросаЗаписьПриСозданииУведомленияОРасхождениях(Результат, Параметры) Экспорт

	Если Результат = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	Форма = Параметры.Форма;
	
	Попытка
		// выполняем запись документа
		ПараметрыЗаписи = Новый Структура("РежимЗаписи", РежимЗаписиДокумента.Запись);
		
		Если Форма.Записать(ПараметрыЗаписи) Тогда
			ПараметрыФормы = Новый Структура;
			ПараметрыФормы.Вставить("Основание", Объект.Ссылка);
			ОткрытьФорму("Документ.УведомлениеОРасхожденииИСМПТК.ФормаОбъекта", ПараметрыФормы);
		КонецЕсли;
		
	Исключение
		
		ТекстСообщения = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияНеУдалосьЗаписатьДокументМаркировки();
		ТекстСообщения = ТекстСообщения
		 			   + Символы.ПС
					   + КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения, , , "Форма.Объект");
		
	КонецПопытки;

КонецПроцедуры

#КонецОбласти

#Область УведомлениеОВыводеИзОборота

&НаКлиенте
Процедура ВвестиУведомлениеОСписании(Команда)
	
	ТекстВопроса = "";
	Если НЕ ЗначениеЗаполнено(ЭтаФорма.Параметры.Ключ) ИЛИ ЭтаФорма.Модифицированность Тогда
		ТекстВопроса = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияНельзяВводитьНовыйДокументБезЗаписиОснованияСПараметром()
					 + Символы.ПС 
					 + РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияВопросЗаписатьДокумент();
		ТекстВопроса = СтрЗаменить(ТекстВопроса, "%НаименованиеДокумента%", ПолучитьПредставлениеУведомленияОСписании());
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекстВопроса) Тогда
		ДополнительныеПараметры = Новый Структура("Форма", ЭтаФорма);
		Режим = РежимДиалогаВопрос.ДаНет;
		Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВопросаЗаписьПриСозданииУведомленияОВыбытии", ЭтотОбъект, ДополнительныеПараметры);
		ПоказатьВопрос(Оповещение, ТекстВопроса, Режим, 0);
	Иначе
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Основание", Объект.Ссылка);
		ОткрытьФорму("Документ.УведомлениеОВыводеИзОборотаИСМПТК.ФормаОбъекта", ПараметрыФормы);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияВопросаЗаписьПриСозданииУведомленияОВыбытии(Результат, Параметры) Экспорт

	Если Результат = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	Форма = Параметры.Форма;
	
	Попытка
		// выполняем запись документа
		ПараметрыЗаписи = Новый Структура("РежимЗаписи", РежимЗаписиДокумента.Запись);
		
		Если Форма.Записать(ПараметрыЗаписи) Тогда
			ПараметрыФормы = Новый Структура;
			ПараметрыФормы.Вставить("Основание", Объект.Ссылка);
			ОткрытьФорму("Документ.УведомлениеОВыводеИзОборотаИСМПТК.ФормаОбъекта", ПараметрыФормы);
		КонецЕсли;
		
	Исключение
		
		ТекстСообщения = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияНеУдалосьЗаписатьДокументМаркировки();
		ТекстСообщения = ТекстСообщения
		 			   + Символы.ПС
					   + КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения, , , "Форма.Объект");
		
	КонецПопытки;

КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура СверкаПолученныхКодовМаркировки(Команда)
	
	ПараметрыФормы = Новый Структура;
	
	ТЗМарки = ПолучитьМассивИдентификаторов();
	ПараметрыФормы.Вставить("ТаблицаКодовМаркировки", ТЗМарки);
	ПараметрыФормы.Вставить("Организация", Объект.Организация);
	
	ОткрытьФорму("Документ.АктПриемаПередачиИСМПТК.Форма.ФормаСверкиВходящихКодовМаркировки", ПараметрыФормы, ЭтаФорма, УникальныйИдентификатор);
	
КонецПроцедуры

&НаСервере
Функция ПолучитьМассивИдентификаторов()
	
	Возврат ОбщегоНазначенияИСМПТК.ВыгрузитьКолонку(Объект.Марки, "КодИдентификации");
	
КонецФункции

#Область ЗапросСоставаУпаковокССервера

&НаКлиенте
Процедура ЗаполнитьДанныеПоКоличествуГрупповыхУпаковок(Команда)
	
	Если Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыДокументовИСМПТК.Черновик") Тогда
		//У не отправленного документа команда работает в полном функционале и без уточнения у пользователя
		ЗаполнитьДанныеПоКоличествуГрупповыхУпаковокПродолжить();
	Иначе
		//У отправленного - предварительно предупреждаем, что будут внесены программные изменения в документ, откатить которые нельзя, т.к. документ уже заблокирован.
		ТекстВопроса = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияЗапросСоставаУпаковокВОтправленномДокументе();
		ЗаполнитьДанныеПоКоличествуГрупповыхУпаковокПослеВопроса = Новый ОписаниеОповещения("ЗаполнитьДанныеПоКоличествуГрупповыхУпаковокПослеВопроса", ЭтаФорма);
		ПоказатьВопрос(ЗаполнитьДанныеПоКоличествуГрупповыхУпаковокПослеВопроса, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьДанныеПоКоличествуГрупповыхУпаковокПослеВопроса(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		ЗаполнитьДанныеПоКоличествуГрупповыхУпаковокПродолжить();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьДанныеПоКоличествуГрупповыхУпаковокПродолжить()
	
	ЗавершениеПолучитьДанныеПоГрупповымКодамМаркировки = Новый ОписаниеОповещения("ЗавершениеПолучитьДанныеПоГрупповымКодамМаркировки", ЭтаФорма);
	ПолучитьКлючАвторизации(ЗавершениеПолучитьДанныеПоГрупповымКодамМаркировки);
	
КонецПроцедуры

&НаСервере
Процедура ЗавершениеПолучитьДанныеПоГрупповымКодамМаркировки(РезультатВыполнения, Параметры) Экспорт
	
	НеОтправлен = Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыДокументовИСМПТК.Черновик");
	ИнтеграцияИСМПТК.ЗавершениеПолучитьДанныеПоГрупповымКодамМаркировки_Общая(ЭтаФорма, РезультатВыполнения, Объект.Направление, НеОтправлен);
	
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура ПоискПоШтрихкодуВыполнить(Команда)
	
	ОчиститьСообщения();
	Если ИнтеграцияИСМПТКВызовСервера.ИспользоватьАвтоПроверкаВалидностиКодаИСМПТК() 
		И Не ЗначениеЗаполнено(Объект.Организация) Тогда
		ТекстСообщения = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияВключенАвтозапросНужнаОрганизацияДляВыполнения("АвтоПроверкаВалидностиКодаИСМПТК");
		ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;
			
	Оповещение = Новый ОписаниеОповещения("ПоискПоШтрихкодуЗавершение", ЭтотОбъект);
	СобытияФормИСМПТККлиент.ПоказатьВводШтрихкода(Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоискПоШтрихкодуЗавершение(ДанныеШтрихкода, ДополнительныеПараметры) Экспорт
	
	Если Не РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйКлиентСервер.ПроверкаФорматаТранспортногоКодаПройденаУспешно(ДанныеШтрихкода) Тогда
		Возврат;
	КонецЕсли;
	
	ОбработатьКодМаркировки(ДанныеШтрихкода);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьДанныеИзТСД(Команда)
	
	ОчиститьСообщения();
	Если ИнтеграцияИСМПТКВызовСервера.ИспользоватьАвтоПроверкаВалидностиКодаИСМПТК() 
		И Не ЗначениеЗаполнено(Объект.Организация) Тогда
		ТекстСообщения = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияВключенАвтозапросНужнаОрганизацияДляВыполнения("АвтоПроверкаВалидностиКодаИСМПТК");
		ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	Если ИнтеграцияИСМПТКВызовСервера.ИспользоватьАвтоОпределениеЛогистическихКодовИСМПТК() Тогда 
		ПолучитьТокенДляЗакгрузкиИзТСД = Новый ОписаниеОповещения("ЗагрузитьИзТСДЗавершениеТокен", ЭтаФорма);
		ПолучитьКлючАвторизации(ПолучитьТокенДляЗакгрузкиИзТСД);
	Иначе
		ОбщегоНазначенияИСМПТККлиентПереопределяемый.НачатьЗагрузкуДанныеИзТСД(Новый ОписаниеОповещения("ЗагрузитьИзТСДЗавершение", ЭтотОбъект), УникальныйИдентификатор);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗарегистрироватьНовыйGTIN(Команда)
	
	Номенклатура 	 = Элементы.Товары.ТекущиеДанные.Номенклатура;
	EAN 			 = Элементы.Товары.ТекущиеДанные.EAN;
	GTIN 			 = Элементы.Товары.ТекущиеДанные.GTIN;
	ЕдиницаИзмерения = Элементы.Товары.ТекущиеДанные.ЕдиницаИзмерения;
	Характеристика 	 = Элементы.Товары.ТекущиеДанные.Характеристика;
	
	Если Не ЗначениеЗаполнено(Характеристика) 
		И ИнтеграцияИСМПТКПереопределяемый.ПроверитьВедениеУчетаПоХарактеристикамУНоменклатуры(Номенклатура)
		И ИнтеграцияИСМПТКПереопределяемый.ПроверитьИспользованиеХарактеристик() Тогда
		ТекстСообщения = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообещнияНеЗаполненаХарактеристика();
		ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
	 	Возврат;
	КонецЕсли;
		
	ТекстВопроса = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияВопросДобавитьНовыйШтрихкодНоменклатуре();
	
	Дополнительныепараметры = Новый Структура();
	
	ДополнительныеПараметры.Вставить("Номенклатура",     Номенклатура);
	ДополнительныеПараметры.Вставить("EAN", 		     EAN);
	ДополнительныеПараметры.Вставить("GTIN", 		     GTIN);
	ДополнительныеПараметры.Вставить("ЕдиницаИзмерения", ЕдиницаИзмерения);
	ДополнительныеПараметры.Вставить("Характеристика", 	 Характеристика);
	
	Режим = РежимДиалогаВопрос.ДаНет;
	Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВопросаЗаписатьШтрихкодНоменклатуры", ЭтотОбъект, ДополнительныеПараметры);
	ПоказатьВопрос(Оповещение, ТекстВопроса, Режим, 0);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура ЗагрузитьИзТСДЗавершение(РезультатВыполнения, ДополнительныеПараметры) Экспорт
	
	СобытияФормИСМПТККлиентПереопределяемый.ПриПолученииДанныхИзТСД(Новый ОписаниеОповещения("Подключаемый_ПолученыДанныеИзТСД", ЭтотОбъект), ЭтотОбъект, РезультатВыполнения);
	
	Если ИнтеграцияИСМПТКВызовСервера.ИспользоватьАвтоПроверкаВалидностиКодаИСМПТК() Тогда 
		
		ТокенАвторизацииВрем = Неопределено;
		ЗавершениеПроверитьСостояниеКодовНаСервере = Новый ОписаниеОповещения("ЗавершениеПроверитьСостояниеКодовНаСервере", ЭтаФорма);
		ПолучитьКлючАвторизации(ЗавершениеПроверитьСостояниеКодовНаСервере, Истина);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьИзТСДЗавершениеТокен(РезультатВыполнения, ДополнительныеПараметры) Экспорт
	
	ОбщегоНазначенияИСМПТККлиентПереопределяемый.НачатьЗагрузкуДанныеИзТСД(Новый ОписаниеОповещения("ЗагрузитьИзТСДЗавершение", ЭтотОбъект), УникальныйИдентификатор);
		
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьКлючАвторизации(СобытиеПослеАвторизации, ОповещениеПриОшибке = Ложь) Экспорт
	
	ИнтерфейсИСМПТККлиент.ПолучитьКлючАвторизацииОбщая(СобытиеПослеАвторизации, Объект.Организация, ОповещениеПриОшибке);
		
КонецПроцедуры

&НаСервере
Процедура ПолучитьСтруктурыРасхожденийИзХранилище(РезультатВыбора)
	
	СтруктурыРасхожденийИзХранилище = ПолучитьИзВременногоХранилища(РезультатВыбора.АдресРасхожденийВХранилище);
	Если СтруктурыРасхожденийИзХранилище = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Объект.Расхождения.Очистить();
	
	//Признак, необходимый для проверки результатов сверки товаров. Если по итогу сверки все коды будут найдены, 
	//заполнять Расхождения не имеет смысла, вводить УОР тоже
	ВсеКодыНайдены = Истина;
	
	Для Каждого СтрокаКодаИдентификации Из СтруктурыРасхожденийИзХранилище Цикл
		
		СтруктураКода = Новый Структура("Штрихкод, СтатусСверкиКода", СтрокаКодаИдентификации.Ключ, СтрокаКодаИдентификации.Значение);
		
		Если Не СтруктураКода.СтатусСверкиКода = ПредопределенноеЗначение("Перечисление.СтатусыСверкиКодаИСМПТК.Найден") Тогда
			ВсеКодыНайдены = Ложь;
		КонецЕсли;
		
		ДанныеПоКоду = ИнтеграцияИСМПТКВызовСервера.ПолучитьКодыМаркировки(СтруктураКода);  
		НоваяСтрока  = Объект.Расхождения.Добавить();
		
		//Если удалось разобрать код, вернется структура. Если нет - текст сообщения об ошибке.
		Если ТипЗнч(ДанныеПоКоду) = Тип("Строка") Тогда
			Возврат;
		КонецЕсли;
		
		Если ДанныеПоКоду.ВидУпаковки = ПредопределенноеЗначение("Перечисление.ВидыУпаковокИСМПТК.Групповая") Тогда
			//Для групповых поиск по регистру не выполняем, т.к. EAN в стркое относится к вложенному товару, а номенклатура для групповых 
			//должна заполняться по верхнему уровню, т.е. по реквизиту GTINВерхнегоУровня.
			EANВерхнегоУровня  = РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйКлиентСервер.EANПоGTIN(ДанныеПоКоду.GTINВерхнегоУровня);
			ДанныеНоменклатуры = ПолучитьНоменклатуруПоШтрихкоду(EANВерхнегоУровня);
		Иначе
			ДанныеНоменклатуры = ПолучитьНоменклатуруПоШтрихкоду(ДанныеПоКоду.EAN);
		КонецЕсли;
		
		Если ТипЗнч(ДанныеНоменклатуры) = Тип("Структура") Тогда
			Номенклатура   = ДанныеНоменклатуры.Номенклатура;
			Характеристика = ДанныеНоменклатуры.Характеристика;
		Иначе
			Номенклатура   = ДанныеНоменклатуры;
			Характеристика = Неопределено;
		КонецЕсли;
		
		НоваяСтрока.КодИдентификации = ДанныеПоКоду.КодИдентификации;
		НоваяСтрока.ВидУпаковки = ДанныеПоКоду.ВидУпаковки;
		
		//Для корректного заполнения количества нужно сопоставить данные с ТЧ Марки, т.к. только там можем получить 
		//инф-ю о вложенном количестве групповых упаковок, которую прислал сервер (запросить состав во вхд. документе сами не можем).
		СтрокаВМарках = Объект.Марки.НайтиСтроки(Новый Структура("КодИдентификации", ДанныеПоКоду.КодИдентификации));
		Если Не СтрокаВМарках.Количество() = 0 Тогда 
			КоличествоМарки = СтрокаВМарках[0].Количество;
		Иначе
		    КоличествоМарки = 1;
		КонецЕсли;
		
		Если ДанныеПоКоду.ВидУпаковки = ПредопределенноеЗначение("Перечисление.ВидыУпаковокИСМПТК.Логистическая") 
			Или ДанныеПоКоду.ВидУпаковки = ПредопределенноеЗначение("Перечисление.ВидыУпаковокИСМПТК.Групповая") Тогда 
			GTIN = "";
			GTINВерхнегоУровня = ДанныеПоКоду.GTINВерхнегоУровня;
			EAN = ДанныеПоКоду.EAN;
		ИначеЕсли ДанныеПоКоду.ВидУпаковки = ПредопределенноеЗначение("Перечисление.ВидыУпаковокИСМПТК.Потребительская") Тогда 
			GTIN = ДанныеПоКоду.GTIN;
			GTINВерхнегоУровня = ДанныеПоКоду.GTINВерхнегоУровня;
			EAN = ДанныеПоКоду.EAN;
		КонецЕсли;
		
		НоваяСтрока.GTIN = GTIN;
		НоваяСтрока.GTINВерхнегоУровня 	= GTINВерхнегоУровня;
				
		НоваяСтрока.EAN = EAN;
		НоваяСтрока.СтатусСверкиКода = СтруктураКода.СтатусСверкиКода;
		НоваяСтрока.Номенклатура = Номенклатура;
		НоваяСтрока.Количество 	 = КоличествоМарки;
		НоваяСтрока.ВидПродукции = ДанныеПоКоду.ВидПродукции;
		
	КонецЦикла;
	
	Если ВсеКодыНайдены Тогда
		Объект.Расхождения.Очистить();
	КонецЕсли;
	
	Если Не ВсеКодыНайдены Тогда
		ТекстСообщения = НСтр("ru = 'При сверке поступившего товара были обнаружены расхождения с Актом. Требуется оформление Уведомления о расхождениях!'");
		ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
	Объект.Проверен = Истина;
	УправлениеФормой();
	
	Модифицированность = Истина;
		
КонецПроцедуры

&НаСервере
Функция ПроверитьЗаполненностьНоменклатурыТоварахВоВходящемАПП() 
	
	Если Объект.Направление = ПредопределенноеЗначение("Перечисление.НаправленияДокументовИСМПТК.Исходящий") Тогда
		Возврат Ложь;
	Иначе
		Для Каждого Строка Из Объект.Марки Цикл
			//Проверяем, зарегистрирован ли ШК в регистре. Может возникнуть ситуация, когда в ТЧ Марки полученного Акта
			//номенклатура заполнена, т.к. в момент получения документа был зарегистрирован штриход. 
			//Но затем штрихкод был изменен или удален и в момент ввода основания для АПП номенклатура в таблице уже не соответствует 
			//кодам маркировки по штрихкоду.
			EAN = Строка.EAN;
			Если Не ЗначениеЗаполнено(EAN) Тогда
				EAN = РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйКлиентСервер.EANПоGTIN(Строка.GTINВерхнегоУровня);
			КонецЕсли;
			ДанныеНоменклатуры = ПолучитьНоменклатуруПоШтрихкоду(EAN);
			Если ДанныеНоменклатуры = Неопределено 
				Или (Не ДанныеНоменклатуры = Неопределено И Не ЗначениеЗаполнено(ДанныеНоменклатуры.Номенклатура)) Тогда
				Возврат Истина;
			КонецЕсли;
		КонецЦикла;
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

&НаСервере
Процедура УправлениеФормой()
	
	Входящий  = Объект.Направление = ПредопределенноеЗначение("Перечисление.НаправленияДокументовИСМПТК.Входящий");
	Исходящий = Объект.Направление = ПредопределенноеЗначение("Перечисление.НаправленияДокументовИСМПТК.Исходящий");
	Первичный 	 = Объект.ТипАкта  = ПредопределенноеЗначение("Перечисление.ВидыДокументаИСМПТК.Исходный");
	Исправленный = Объект.ТипАкта  = ПредопределенноеЗначение("Перечисление.ВидыДокументаИСМПТК.Исправленный");
	НеОтправлен  = Объект.Статус   = ПредопределенноеЗначение("Перечисление.СтатусыДокументовИСМПТК.Черновик");
	
	//////// Общий раздел ////////
	//Реквизиты бумажного документа доступны только если установлена опция выписки на бумаге
	ОбщегоНазначенияИСМПТККлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГруппаБумажныйДокумент", "Видимость", ВыпискаБумажногоАкта);
	//////////////////////////////	
	
	//Команда ВвестиУведомление доступна только для полученных первичных АПП
	Если Входящий И Первичный Тогда
		Если ЗначениеЗаполнено(Объект.ИдентификаторУведОРасхождениях) 
			ИЛИ (Объект.Проверен И Объект.Расхождения.Количество() = 0) Тогда
			//УОР уже введено ИЛИ выполнена проверка и расхожденя не обнаружены - вводить УОР не нужно
			НужноСкрытьКомандуВводаУОР = Истина;
		Иначе
			НужноСкрытьКомандуВводаУОР = Не Объект.Проверен;
		КонецЕсли;
	Иначе
		//УОР не требуется
		НужноСкрытьКомандуВводаУОР = Истина;
	КонецЕсли;
	ОбщегоНазначенияИСМПТККлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ВвестиУведомлениеОРасхождении", 
																	   "Видимость", Не НужноСкрытьКомандуВводаУОР);
	//////////////////////////////	
	
	//////// Редактирование данных строки ////////	
	ОбщегоНазначенияИСМПТККлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ДеревоМаркированнойПродукцииРедактироватьСтрокиТранспортныеКоды", 
																	   "Видимость", Исходящий И Первичный И НеОтправлен);
	ОбщегоНазначенияИСМПТККлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ДеревоМаркированнойПродукцииПолучитьДанныеПоКоличеству", 
																	   "Видимость", Исходящий И НеОтправлен);
	//////////////////////////////	
	
	//////// Импорт/Экспорт ////////	
	ОбщегоНазначенияИСМПТККлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "КомандыЗагрузкиТЧ", 
																	   "Видимость", Исходящий И Первичный И НеОтправлен); 
	//Ручной ввод ШК
	ОбщегоНазначенияИСМПТККлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ТоварыПоискПоШтрихкоду", 
																	   "Видимость", Исходящий И Первичный И НеОтправлен);
	
	//Команда Разбить документ по ТГ
	ОбщегоНазначенияИСМПТККлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ФормаОбщаяКомандаРазбитьНаНесколькоДокументовИСМПТК", 
																	   "Видимость", ?(Объект.Марки.Количество() = 0, Ложь, Исходящий И Первичный И НеОтправлен));
	
	//Мобильное приложение
	Если ПравоДоступа("Просмотр", Метаданные.РегистрыСведений.НастройкиПодключенияМобильноеПриложениеИСМПТК) Тогда 
		ИспользоватьПриложение = Константы.ИспользоватьМобильноеПриложениеИСМПТК.Получить();
		ОбщегоНазначенияИСМПТККлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ДеревоМаркированнойПродукцииЗагрузитьКодыМаркировкиИзМобильногоПриложения", 
																		   "Видимость", Исходящий И НеОтправлен И ИспользоватьПриложение);
	Иначе
		ОбщегоНазначенияИСМПТККлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ДеревоМаркированнойПродукцииЗагрузитьКодыМаркировкиИзМобильногоПриложения", 
																		   "Видимость", Ложь);
	КонецЕсли;
	//////////////////////////////	
	
	//Отражение в учете
	ДокументМожноОтразитьВБазе = РаботаСДокументамиИСМПТКПереопределяемый.ПроверитьВозможностьОтраженияДокументаВУчете(ОбщегоНазначенияИСМПТКВызовСервера.ИмяДокументаАктПриемаПередачиИСМПТК());
	ОбщегоНазначенияИСМПТККлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ФормаГруппаОтражение", "Видимость", ДокументМожноОтразитьВБазе);
	ОбщегоНазначенияИСМПТККлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ПредставлениеДокументаОснования", "Видимость", ДокументМожноОтразитьВБазе);
	
	//////// Сверка товаров ////////
	//Сверка полученных товаров и данных документа.
	//Может применяться только во входящем первичном документе, у которого статус позволяет выполнять приемку и по документу не оформлено УОР.
	ОбщегоНазначенияИСМПТККлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ДеревоМаркированнойПродукцииСверкаПолученныхКодовМаркировки", 
																	   "Видимость", Входящий И Первичный 
																		И Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыДокументовИСМПТК.ОжидаетПриемку")
																		И Не ЗначениеЗаполнено(Объект.ИдентификаторУведОРасхождениях));
	ОбщегоНазначенияИСМПТККлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "Проверен", 
																	   "Видимость", Входящий И Первичный 
																		И Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыДокументовИСМПТК.ОжидаетПриемку")
																		И Не ЗначениеЗаполнено(Объект.ИдентификаторУведОРасхождениях));	
	//Признак выполненной сверки и доступность команды Подтвердить
	ПравоПодтвержденияАктаБезПроверки = РольДоступна("ПравоПодтвержденияАктаБезПроверкиИСМПТК") ИЛИ ОбщегоНазначенияИСМПТКПереопределяемый.ЭтоПолноправныйПользователь(,Ложь);
	ОбщегоНазначенияИСМПТККлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "Проверен", "ТолькоПросмотр", Не ПравоПодтвержденияАктаБезПроверки);

	//Данные о товарах основания в ТЧ Марки
	ОбщегоНазначенияИСМПТККлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ДеревоМаркированнойПродукцииГруппаКоличествоОснования", 
																	   "Видимость", ЗначениеЗаполнено(Объект.ДокументОснование) И Исходящий И Первичный);
	//////////////////////////////	

	//////// Уведомление о списании (вывод из оборота) ////////
	Если ПравоДоступа("Просмотр", Метаданные.Документы.УведомлениеОВыводеИзОборотаИСМПТК) Тогда
		СписаниеКМ = ПолучитьУВИО();
		ВведеноУведомлениеОВыводеИзОборота = ЗначениеЗаполнено(СписаниеКМ);
		ОбщегоНазначенияИСМПТККлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГруппаУведомлениеОВыводеИзОборота", "Видимость", ВведеноУведомлениеОВыводеИзОборота);
		ОбщегоНазначенияИСМПТККлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "СписаниеКМ", "Видимость", ВведеноУведомлениеОВыводеИзОборота);
		
		ОбщегоНазначенияИСМПТККлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ВвестиУведомлениеОСписании", 
																		   "Видимость", Входящий 
																			И Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыДокументовИСМПТК.ПринятПодтвержден")
																			И Не ВведеноУведомлениеОВыводеИзОборота);
	Иначе
		ОбщегоНазначенияИСМПТККлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГруппаУведВИО", "Видимость", Ложь);
	КонецЕсли;
	//////////////////////////////	
	
	//Команда проверки статуса и владельца кода по данным сервера актуальна только при заполнении исходящего Акта до его отправки
	ОбщегоНазначенияИСМПТККлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ДеревоМаркированнойПродукцииПроверитьСостояниеКодовНаСервере", "Видимость", НеОтправлен);
	
	//Этапы
	ИспользуютсяЭтапы = ОбщегоНазначенияИСМПТКВызовСервера.ПроверитьЗначениеКонстанты("ИспользоватьЭтапыОформленияДокументовИСМПТК"); 
	ОбщегоНазначенияИСМПТККлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ЭтапОформления", "Видимость",   Исходящий И ИспользуютсяЭтапы);
	ОбщегоНазначенияИСМПТККлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ЭтапОформления", "Доступность", Не Объект.ЭтапОформления = ПредопределенноеЗначение("Перечисление.ЭтапыОформленияДокументовИСЦЭДМ.Отправлен"));
	
	//////// Прочее ////////
	//ТЧ Ошибки выводится только если в ней есть какие-то записи
	ОбщегоНазначенияИСМПТККлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "Ошибки", "Видимость", ?(Объект.Ошибки.Количество() = 0, Ложь, Истина));
	
	НастроитьВидимостьИтоговыхПолей();
	УстановитьВидимостьПолейСвязанныхДокументов();
		
	ИзменитьКоманднуюПанельДокумента();
	//Формирование поля Состояние по текущему Статусу документа
	СформироватьПредставлениеСостояния();
	//Формирование представления ссылки на связанный документ
	СформироватьПредставлениеДокументаОснования(ЭтаФорма);
	//////////////////////////////	
			
КонецПроцедуры

&НаСервере
Процедура ПодготовитьФормуНаСервере()
	
	Если Объект.ТипАкта = Неопределено ИЛИ Объект.ТипАкта = ПредопределенноеЗначение("Перечисление.ВидыДокументаИСМПТК.ПустаяСсылка") Тогда
		Объект.ТипАкта = ПредопределенноеЗначение("Перечисление.ВидыДокументаИСМПТК.Исходный");
	КонецЕсли;
		
	Если Объект.Направление.Пустая() Тогда
		Объект.Направление = ПредопределенноеЗначение("Перечисление.НаправленияДокументовИСМПТК.Исходящий");
	КонецЕсли;
	
	Если Объект.ВидОперации.Пустая() Тогда
		Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперацииИСМПТК.Реализация");
	КонецЕсли;
	
	Если Объект.Статус.Пустая() Тогда
		Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыДокументовИСМПТК.Черновик");
	КонецЕсли;
	
	Если ИспользоватьПодключаемоеОборудование Тогда
		ИспользуютсяСканерыШтрихкода = (ОбщегоНазначенияИСМПТКВызовСервераПереопределяемый.ОборудованиеПоПараметрам("СканерШтрихкода").Количество() > 0);
	Иначе
		ИспользуютсяСканерыШтрихкода = Ложь;
	КонецЕсли;

	Если Объект.ЭтапОформления = ПредопределенноеЗначение("Перечисление.ЭтапыОформленияДокументовИСЦЭДМ.Отправлен") Тогда
		//Нужно скорректировать список выбора после программной установки служебного значения, чтобы оно отобразилось
		Элементы.ЭтапОформления.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ЭтапыОформленияДокументовИСЦЭДМ.Отправлен")); 
	КонецЕсли;
		
КонецПроцедуры

&НаСервере
Функция ПолучитьРеквизитыОрганизацииКонтрагента(Ссылка, Реквизит) Экспорт
	
	Возврат ИнтеграцияИСМПТКПереопределяемый.ПолучитьРеквизитыОрганизацииКонтрагента(Ссылка, Реквизит);
	
КонецФункции

&НаКлиенте
Процедура ИзменитьДокументОснованиеЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.ОК Тогда
		Объект.ДокументОснование = ДополнительныеПараметры.ВыбранноеЗначение;
		СформироватьПредставлениеДокументаОснования(ЭтаФорма);
		НастроитьВидимостьИтоговыхПолей();
		
		Если Объект.Направление = ПредопределенноеЗначение("Перечисление.НаправленияДокументовИСМПТК.Исходящий") 
			И Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыДокументовИСМПТК.Черновик") Тогда
			ТекстВопроса = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияПерезаполнитьДокументПоНовомуОснованию();
			ПерезаполнитьДокументПоОснованию = Новый ОписаниеОповещения("ПерезаполнитьДокументПоОснованию", ЭтаФорма);
			ПоказатьВопрос(ПерезаполнитьДокументПоОснованию, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		КонецЕсли;
		
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьНовуюНоменклатуру(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.ОК Тогда
		
		Если Не ДополнительныеПараметры.СтруктураКодовМаркировки.ВидУпаковки = ПредопределенноеЗначение("Перечисление.ВидыУпаковокИСМПТК.Потребительская") Тогда 
			
			ПараметрыОткрытияФормы = Новый Структура("Номенклатура, СтруктураКодовМаркировки, Организация, ИнФСистема", 
													 ДополнительныеПараметры.Номенклатура, 
													 ДополнительныеПараметры.СтруктураКодовМаркировки, 
													 Объект.Организация, 
													 "ИСМПТ");
			
			ОткрытьФорму(
			"ОбщаяФорма.ФормаУточненияДанныхИСМПТК",
			ПараметрыОткрытияФормы, ЭтотОбъект,,,,
			Новый ОписаниеОповещения("ЗавершитьДобавлениеКодаМаркировки", ЭтотОбъект), РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
			
		Иначе 
			
			СтруктураКодовМаркировки = ДополнительныеПараметры.СтруктураКодовМаркировки;
			Номенклатура			 = ДополнительныеПараметры.Номенклатура;
			ДобавитьКодМаркировкиВДерево(Номенклатура, СтруктураКодовМаркировки);
			
			НоваяСтрока = Объект.Марки.Добавить();
			НоваяСтрока.КодМаркировки 	 = СтруктураКодовМаркировки.КодМаркировки;
			НоваяСтрока.КодИдентификации = СтруктураКодовМаркировки.КодИдентификации;
			НоваяСтрока.GTIN 			 = СтруктураКодовМаркировки.GTIN;
			Если СтруктураКодовМаркировки.ВидУпаковки = ПредопределенноеЗначение("Перечисление.ВидыУпаковокИСМПТК.Групповая") Тогда 
				НоваяСтрока.GTINВерхнегоУровня 	= СтруктураКодовМаркировки.GTINВерхнегоУровня;
			КонецЕсли;
			НоваяСтрока.EAN 		 = СтруктураКодовМаркировки.EAN;
			НоваяСтрока.Номенклатура = Номенклатура;
			НоваяСтрока.Количество 	 = СтруктураКодовМаркировки.Количество;
			НоваяСтрока.ВидУпаковки  = СтруктураКодовМаркировки.ВидУпаковки;
			НоваяСтрока.ВидПродукции = СтруктураКодовМаркировки.ВидПродукции;
			
			Для Каждого Строка ИЗ ДеревоМаркированнойПродукции.ПолучитьЭлементы() Цикл
				Элементы.ДеревоМаркированнойПродукции.Развернуть(Строка.ПолучитьИдентификатор(), Истина);
			КонецЦикла;
			
			Если Не Объект.Итоги.Количество() = 0
				И Элементы.ГруппаИтоги.Видимость Тогда
				ТекстСообщения = НСтр("ru = 'Изменились данные кодов маркировки: требуется актуализировать Итоги.'");
				ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
			КонецЕсли;	
			Модифицированность = Истина;
			
		КонецЕсли;
	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПродолжитьЗаполнениеДокументаОснования(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.ОК Тогда
		Объект.ДокументОснование = ДополнительныеПараметры.ВыбранноеЗначение;
		СформироватьПредставлениеДокументаОснования(ЭтаФорма);
		Если Объект.Направление = ПредопределенноеЗначение("Перечисление.НаправленияДокументовИСМПТК.Исходящий") 
			И Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыДокументовИСМПТК.Черновик") Тогда
			
			ТекстВопроса = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияПерезаполнитьДокументПоНовомуОснованию();
			ПерезаполнитьДокументПоОснованию = Новый ОписаниеОповещения("ПерезаполнитьДокументПоОснованию", ЭтаФорма);
			ПоказатьВопрос(ПерезаполнитьДокументПоОснованию, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
			
		КонецЕсли;
		Модифицированность = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура СформироватьПредставлениеДокументаОснования(Форма)
	
	Если ЗначениеЗаполнено(Форма.Объект.ДокументОснование) Тогда
		Форма.ПредставлениеДокументаОснования = Форма.Объект.ДокументОснование;
		Форма.Элементы.ПредставлениеДокументаОснования.ЦветТекста = ОбщегоНазначенияИСМПТККлиентСервер.ЦветСиний();
	Иначе
		Форма.ПредставлениеДокументаОснования = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияДокументНеОтраженВУчете();
		Форма.Элементы.ПредставлениеДокументаОснования.ЦветТекста = ОбщегоНазначенияИСМПТККлиентСервер.ЦветКрасный();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПроверитьСвязанныйАкт(ВыбранноеЗначение)
	
	Возврат РаботаСДокументамиИСМПТК.ПроверитьНаличиеСвязанного_Общий(ВыбранноеЗначение, Истина, "", ОбщегоНазначенияИСМПТКВызовСервера.ИмяДокументаАктПриемаПередачиИСМПТК());
	
КонецФункции

&НаСервере
Функция ПроверитьНаличиеМаркируемогоТовара(ВыбранноеЗначение) 
	
	Возврат РаботаСДокументамиИСМПТКПереопределяемый.ПроверитьНаличиеМаркируемогоТовара(ВыбранноеЗначение);
	
КонецФункции

&НаКлиенте
Процедура ЗаполнитьАктПоДокументуОснованию()
	
	ДанныеДокументаОснования = ПолучитьДанныеДокументаОснованияНаСервере();
	
	РеквизитыШапки  = ДанныеДокументаОснования.Реквизиты;
	ДанныеПоТоварам = ДанныеДокументаОснования.Товары;
	
	ЗаполнитьЗначенияСвойств(Объект, РеквизитыШапки);
	Объект.Товары.Очистить();
	
	Для Каждого СтрокаТовар Из ДанныеПоТоварам Цикл
		НоваяСтрока = Объект.Товары.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТовар);
	КонецЦикла;
	
	СформироватьДеревоКодовМаркировки();

КонецПроцедуры

&НаСервере
Функция ПолучитьДанныеДокументаОснованияНаСервере() Экспорт
	
	Возврат РаботаСДокументамиИСМПТКПереопределяемый.ПолучитьДанныеДокументаОснованияДляПерезаполненияИСМПТ_Общий(Объект.ДокументОснование, ОбщегоНазначенияИСМПТКВызовСервера.ИмяДокументаАктПриемаПередачиИСМПТК());

КонецФункции

&НаСервере
Функция СформироватьДеревоКодовМаркировки() Экспорт
	
	//Добавим группы номенклатуры
	ПустаяСтруктураКМ = ПолучитьСтруктуруКодовМаркировки();
	ОчиститьДеревоКодовМаркировки();
	
	ТаблицаТоваров = Объект.Товары.Выгрузить();
	ТаблицаТоваров.Свернуть("Номенклатура, EAN", "КоличествоИсточник");
	
	Для Каждого ГруппаНом Из ТаблицаТоваров Цикл
		Если Не ЗначениеЗаполнено(ГруппаНом.Номенклатура) Тогда 
			ДанныеНоменклатуры = ПолучитьНоменклатуруПоШтрихкоду(ГруппаНом.EAN);
			Если ТипЗнч(ДанныеНоменклатуры) = Тип("Структура") Тогда
				Номенклатура = ДанныеНоменклатуры.Номенклатура;
			Иначе
				Номенклатура = ДанныеНоменклатуры;
			КонецЕсли;
			ГруппаНом.Номенклатура = Номенклатура;
		КонецЕсли;
	КонецЦикла;
	
	ТаблицаТоваров.Свернуть("Номенклатура", "КоличествоИсточник");
	Для Каждого ГруппаНом Из ТаблицаТоваров Цикл
		ПустаяСтруктураКМ.КоличествоИсточник = ГруппаНом.КоличествоИсточник;
		Если Объект.Направление = ПредопределенноеЗначение("Перечисление.НаправленияДокументовИСМПТК.Исходящий")
			ИЛИ (Объект.Направление = ПредопределенноеЗначение("Перечисление.НаправленияДокументовИСМПТК.Входящий")
				И ЗначениеЗаполнено(ГруппаНом.Номенклатура)) Тогда 
			ДобавитьКодМаркировкиВДерево(ГруппаНом.Номенклатура, ПустаяСтруктураКМ);
		КонецЕсли;
	КонецЦикла;

	СообщенияОбОшибках = Новый Соответствие();
	Для Каждого СтрокаТЧ Из Объект.Марки Цикл
		Если ЗначениеЗаполнено(СтрокаТЧ.КодИдентификации) Тогда
			
			Номенклатура = ИнтеграцияИСМПТКПереопределяемый.ПолучитьПустуюСсылкуНоменклатура();
			Если СтрокаТЧ.ВидУпаковки = ПредопределенноеЗначение("Перечисление.ВидыУпаковокИСМПТК.Групповая") Тогда
				//Для групповых поиск по регистру не выполняем, т.к. EAN в стркое относится к вложенному товару, а номенклатура для групповых 
				//должна заполняться по верхнему уровню, т.е. по реквизиту GTINВерхнегоУровня.
				EANВерхнегоУровня  = РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйКлиентСервер.EANПоGTIN(СтрокаТЧ.GTINВерхнегоУровня);
				ДанныеНоменклатуры = ПолучитьНоменклатуруПоШтрихкоду(EANВерхнегоУровня, СообщенияОбОшибках);
			Иначе
				ДанныеНоменклатуры = ПолучитьНоменклатуруПоШтрихкоду(СтрокаТЧ.EAN, СообщенияОбОшибках);
			КонецЕсли;
			
			Если ТипЗнч(ДанныеНоменклатуры) = Тип("Структура") Тогда
				Номенклатура = ДанныеНоменклатуры.Номенклатура;
			Иначе
				Номенклатура = ДанныеНоменклатуры;
			КонецЕсли;
			
			//Если Номенклатура не нашлась в ТЧ Товары и в регистре Штрихкоды, 
			//возможно, она была назначена в форме рдактирования транспортных упаковок без регистрации ШК.
			//Проверяем этот случай по данным строки 
			Если НЕ ЗначениеЗаполнено(Номенклатура) И ЗначениеЗаполнено(СтрокаТЧ.Номенклатура) Тогда
				Номенклатура = СтрокаТЧ.Номенклатура;
			КонецЕсли;
			
			ДобавитьКодМаркировкиВДерево(Номенклатура, СтрокаТЧ);
		КонецЕсли;
	КонецЦикла;
	Если Не СообщенияОбОшибках.Количество() = 0 Тогда
		Для Каждого СообщениеОшибка Из СообщенияОбОшибках Цикл 
			ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(СообщениеОшибка.Значение);
		КонецЦикла;
	КонецЕсли;
	
	Элементы.ДеревоМаркированнойПродукции.НачальноеОтображениеДерева = НачальноеОтображениеДерева.РаскрыватьВсеУровни;
	
КонецФункции

&НаСервере
Процедура ИзменитьКоманднуюПанельДокумента()
	
	////ПРОВЕРКИ////
	МожноОбновить = Не Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыДокументовИСМПТК.Черновик");
	
	МожноПодтвердить = Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыДокументовИСМПТК.ОжидаетПриемку");
	МожноОтклонить = Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыДокументовИСМПТК.ОжидаетПриемку");
	
	МожноОтправить = Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыДокументовИСМПТК.Черновик");
	
	МожноОтозвать = Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыДокументовИСМПТК.ОжидаетПриемку");					
	
	ИспользуютсяЭтапы = ОбщегоНазначенияИСМПТКВызовСервера.ПроверитьЗначениеКонстанты("ИспользоватьЭтапыОформленияДокументовИСМПТК"); 
	ТекущийЭтапДопускаетОтправку = ?(ИспользуютсяЭтапы, 
									 Объект.ЭтапОформления = ПредопределенноеЗначение("Перечисление.ЭтапыОформленияДокументовИСЦЭДМ.ГотовКОтправке"),
									 Истина);
	ПравоПодтвержденияАктаБезПроверки = РольДоступна("ПравоПодтвержденияАктаБезПроверкиИСМПТК") ИЛИ ОбщегоНазначенияИСМПТКПереопределяемый.ЭтоПолноправныйПользователь(,Ложь);
	////////////////
	
	Если Объект.Направление = Перечисления.НаправленияДокументовИСМПТК.Входящий Тогда
		
		//Действия по АПИ
		ОбщегоНазначенияИСМПТККлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ФормаДокументАктПриемаПередачиИСМПТКОтправить",   
																	"Видимость", Ложь);
		ОбщегоНазначенияИСМПТККлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ФормаДокументАктПриемаПередачиИСМПТКПодтвердить", 
																	"Видимость", МожноПодтвердить);
		ОбщегоНазначенияИСМПТККлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ФормаДокументАктПриемаПередачиИСМПТКПодтвердить", 
																	"Доступность", ?(ПравоПодтвержденияАктаБезПроверки, Истина, Объект.Проверен));
		ОбщегоНазначенияИСМПТККлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ФормаДокументАктПриемаПередачиИСМПТКОтклонить",
																	"Видимость", МожноОтклонить);
		ОбщегоНазначенияИСМПТККлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ФормаДокументАктПриемаПередачиИСМПТКОтозвать",
																	"Видимость", Ложь);
		//Внутренние действия
		ОбщегоНазначенияИСМПТККлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ФормаОбщаяКомандаПроверитьИСМПТК",
																	"Видимость", Ложь);
		ОбщегоНазначенияИСМПТККлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ФормаОбщаяКомандаПерезаполнитьПоПервичномуДокументуИСМПТК",
																	"Видимость", Ложь);
				                                                               
	ИначеЕсли Объект.Направление = Перечисления.НаправленияДокументовИСМПТК.Исходящий Тогда
		
		//Действия по АПИ
		ОбщегоНазначенияИСМПТККлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ФормаДокументАктПриемаПередачиИСМПТКОтправить",
																	"Видимость", МожноОтправить И ТекущийЭтапДопускаетОтправку);
		ОбщегоНазначенияИСМПТККлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ФормаДокументАктПриемаПередачиИСМПТКПодтвердить",
																	"Видимость", Ложь);
		ОбщегоНазначенияИСМПТККлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ФормаДокументАктПриемаПередачиИСМПТКОтклонить",
																	"Видимость", Ложь);
		ОбщегоНазначенияИСМПТККлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ФормаДокументАктПриемаПередачиИСМПТКОтозвать",
																	"Видимость", МожноОтозвать);
		
		//Внутренние действия
		ОбщегоНазначенияИСМПТККлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ФормаОбщаяКомандаПроверитьИСМПТК", 
																	"Видимость", МожноОтправить);
		ОбщегоНазначенияИСМПТККлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ФормаОбщаяКомандаПерезаполнитьПоПервичномуДокументуИСМПТК",
																	"Видимость", МожноОтправить);
					
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОчиститьДеревоКодовМаркировки() 
	
	ЭлементыДерева = ДеревоМаркированнойПродукции.ПолучитьЭлементы();
	ЭлементыДерева.Очистить();
	
КонецПроцедуры

&НаСервере
Процедура ИзменитьКоличествоКодовМаркировки(КодИд, Количество) 
	
	СтрокаКИ = Объект.Марки.НайтиСтроки(Новый Структура("КодИдентификации", КодИд));
	Если Не СтрокаКИ.Количество() = 0 Тогда 
		СтрокаКИ[0].Количество = Количество;
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьКодыМаркировкиИзФайлаЗавершение(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	
	Если Не ВыбранныеФайлы = Неопределено Тогда
		
		НовыйТекстовыйДокумент = Новый ТекстовыйДокумент;
		
		Для Каждого СтрокаТЧ Из Объект.Марки Цикл
			КодДляЗаписи = ?(ЗначениеЗаполнено(СтрокаТЧ.КодМаркировки), 
									РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйКлиентСервер.Base64ВШтрихкод(СтрокаТЧ.КодМаркировки), СтрокаТЧ.КодИдентификации);
			НовыйТекстовыйДокумент.ДобавитьСтроку(КодДляЗаписи);
		КонецЦикла;
		
		НовыйТекстовыйДокумент.Записать(ВыбранныеФайлы[0]);
				
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПерезаполнитьДокументПоОснованию(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		ЗаполнитьАктПоДокументуОснованию();
		Модифицированность = Истина;
		УправлениеФормой();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПроверитьНаличиеSSCCВДокументе(КодИдентификации)
	
	ТаблицаМарок = Объект.Марки.Выгрузить();
	Возврат Не РазборИОбработкаКодовМаркировкиИСМПТКСлужебный.ВыполнитьПроверкуТранспортногоКодаПоДокументу(КодИдентификации, ТаблицаМарок); 
	
КонецФункции

&НаКлиенте
Процедура ОповеститьОПроблемеЗапросаВалидностиКМ() Экспорт
	
	//Если по какой-то причине не удалось выполнить получение Токена, то и запрос на проверку статуса КМ не выполнялся,
	//об этом нужно предупредить и отметить непроверенные коды.
	Если ТокенАвторизацииВрем = Неопределено Тогда 
		СообщитьОНевозможностиВыполнитьПроверкуСтатусаКМ("Фоновый");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапретитьРедактированиеПолей()
	
	Если Не Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыДокументовИСМПТК.Черновик") Тогда
		//Документ отправлен на сервер, запрещаем редактирование данных, уже переданных в ИС МПТ
		Элементы.РегистрационныйНомерСвязанногоАкта.ТолькоПросмотр = Истина;
				
		Элементы.ВыпискаБумажногоАкта.ТолькоПросмотр = Истина;
		Элементы.РегНомерПервичногоДокумента.ТолькоПросмотр = Истина;
		Элементы.ДатаПервичногоДокумента.ТолькоПросмотр = Истина;
		
		Элементы.ПоставщикИдентификатор.ТолькоПросмотр = Истина;
		Элементы.ПоставщикНаименование.ТолькоПросмотр = Истина;
		
		Элементы.ПолучательИдентификатор.ТолькоПросмотр = Истина;
		Элементы.ПолучательНаименование.ТолькоПросмотр = Истина;
		
		Элементы.ЭтапОформления.ТолькоПросмотр = Истина;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовДерева

&НаКлиентеНаСервереБезКонтекста
Функция НайтиПоИдентификатору(ДанныеФормыДерево, Идентификатор)
	
	// Сейчас есть проблема в веб-клиенте: метод НайтиПоИдентификатору, может вернуть ДанныеФормыДерево
	
	Если Идентификатор = -1 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ДанныеФормыЭлементДерева = ДанныеФормыДерево.НайтиПоИдентификатору(Идентификатор);
	
	Если ТипЗнч(ДанныеФормыЭлементДерева) = Тип("ДанныеФормыЭлементДерева") Тогда
		Возврат ДанныеФормыЭлементДерева;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

&НаКлиенте
Процедура ДеревоМаркировкиПередУдалением(Элемент, Отказ)
	
	Если Объект.Направление = ПредопределенноеЗначение("Перечисление.НаправленияДокументовИСМПТК.Входящий") 
		ИЛИ (Объект.Направление = ПредопределенноеЗначение("Перечисление.НаправленияДокументовИСМПТК.Исходящий") 
			И (Объект.ТипАкта = ПредопределенноеЗначение("Перечисление.ВидыДокументаИСМПТК.Исправленный") 
				ИЛИ	(Объект.ТипАкта = ПредопределенноеЗначение("Перечисление.ВидыДокументаИСМПТК.Исходный") 
					И НЕ Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыДокументовИСМПТК.Черновик")))) Тогда
			
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	ОчиститьСообщения();
	ТекстОшибки = "";
	УдаляемыеКодыМаркировки = Новый Массив();
		
	Для Каждого ИдентификаторСтроки Из Элемент.ВыделенныеСтроки Цикл
		
		УдаляемыйЭлемент = НайтиПоИдентификатору(ДеревоМаркированнойПродукции, ИдентификаторСтроки);
		РодительУдаляемогоЭлемента = УдаляемыйЭлемент.ПолучитьРодителя();
		
		Если Не РодительУдаляемогоЭлемента = Неопределено Тогда
			РодительУдаляемогоЭлемента.КоличествоПодобранно = РодительУдаляемогоЭлемента.КоличествоПодобранно -1;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(УдаляемыйЭлемент.КодИдентификации) Тогда
			НайденныеСтроки = Объект.Марки.НайтиСтроки(Новый Структура("КодИдентификации", УдаляемыйЭлемент.КодИдентификации));
			Если НайденныеСтроки.Количество() = 1 Тогда
				Объект.Марки.Удалить(НайденныеСтроки[0]);
			КонецЕсли;
		Иначе 
			НайденныеСтроки = Объект.Товары.НайтиСтроки(Новый Структура("Номенклатура", УдаляемыйЭлемент.Номенклатура));
			Если НайденныеСтроки.Количество() = 1 Тогда
				Объект.Товары.Удалить(НайденныеСтроки[0]);
			КонецЕсли;
			
			ВложенныеЭлементы = УдаляемыйЭлемент.ПолучитьЭлементы();
			Для Каждого ВложенныйЭлемент Из ВложенныеЭлементы Цикл 
				НайденныеСтроки = Объект.Марки.НайтиСтроки(Новый Структура("КодИдентификации", ВложенныйЭлемент.КодИдентификации));
				Если НайденныеСтроки.Количество() = 1 Тогда
					Объект.Марки.Удалить(НайденныеСтроки[0]);
				КонецЕсли;
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если Не Объект.Итоги.Количество() = 0
		И Элементы.ГруппаИтоги.Видимость Тогда
		ТекстСообщения = НСтр("ru = 'Изменились данные кодов маркировки: требуется актуализировать Итоги.'");
		ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
	ЭтотОбъект.Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоМаркированнойПродукцииКоличествоПодобранноПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ДеревоМаркированнойПродукции.ТекущиеДанные;
	
	ЭлементРодитель = ТекущиеДанные.ПолучитьРодителя();
	Если Не ЭлементРодитель = Неопределено Тогда 
		КоличествоПодобранных = 0;
		ВложенныеЭлементы = ЭлементРодитель.ПолучитьЭлементы();
		Для Каждого Вложенный Из ВложенныеЭлементы Цикл
			КоличествоПодобранных = КоличествоПодобранных + Вложенный.КоличествоПодобранно;
		КонецЦикла;
		ЭлементРодитель.КоличествоПодобранно = КоличествоПодобранных;
	КонецЕсли; 
	
	ИзменитьКоличествоКодовМаркировки(ТекущиеДанные.КодИдентификации, ТекущиеДанные.КоличествоПодобранно);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьКодыМаркировкиИзФайла(Команда)
	
	ОчиститьСообщения();
	Если ИнтеграцияИСМПТКВызовСервера.ИспользоватьАвтоПроверкаВалидностиКодаИСМПТК() 
		И Не ЗначениеЗаполнено(Объект.Организация) Тогда
		ТекстСообщения = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияВключенАвтозапросНужнаОрганизацияДляВыполнения("АвтоПроверкаВалидностиКодаИСМПТК");
		ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	Если Не Объект.Марки.Количество() = 0 Тогда
		ЗагрузитьКодыМаркировкиИзФайлаПослеВопроса = Новый ОписаниеОповещения("ЗагрузитьКодыМаркировкиИзФайлаПослеВопроса", ЭтаФорма);
		ТекстВопроса = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияВыполнитьОчисткуДанныхВТаблице();
		ПоказатьВопрос(ЗагрузитьКодыМаркировкиИзФайлаПослеВопроса, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	Иначе
		ИнтеграцияИСМПТККлиент.ЗагрузитьКодыМаркировкиИзФайла(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьКодыМаркировкиИзФайлаПослеВопроса(Результат, Параметры) Экспорт

	Если Результат = КодВозвратаДиалога.Да Тогда
		Объект.Марки.Очистить();
		СформироватьДеревоКодовМаркировки(); //для очистки дерева
	КонецЕсли;
	ИнтеграцияИСМПТККлиент.ЗагрузитьКодыМаркировкиИзФайла(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьКодыМаркировкиВФайл(Команда)
	
	ДиалогВыбораФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Сохранение);
	ДиалогВыбораФайла.Заголовок = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияЗаголовокВыборФайла();
	ДиалогВыбораФайла.Фильтр 	= "CSV (Comma-Separated Values)(*.csv)|*.csv";
	ДиалогВыбораФайла.ИндексФильтра = 0;
	ДиалогВыбораФайла.ПредварительныйПросмотр = Ложь;
	ДиалогВыбораФайла.ПроверятьСуществованиеФайла = Истина;
	ДиалогВыбораФайла.МножественныйВыбор = Ложь;
	
	Оповещение = Новый ОписаниеОповещения("ВыгрузитьКодыМаркировкиИзФайлаЗавершение", ЭтотОбъект);
	ДиалогВыбораФайла.Показать(Оповещение);
		
КонецПроцедуры

&НаКлиенте
Процедура ДеревоМаркированнойПродукцииПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Отказ = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура СвернутьВсеДерево(Команда)
	
	СвернутьРазвернутьДеревоКодов(ДеревоМаркированнойПродукции.ПолучитьЭлементы(), Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура РазвернутьВсеДерево(Команда)
	
	СвернутьРазвернутьДеревоКодов(ДеревоМаркированнойПродукции.ПолучитьЭлементы(), Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура СвернутьРазвернутьДеревоКодов(ДервероЭлементов, Развернуть)
	
	Для Каждого Элемент Из ДервероЭлементов Цикл
		
		ВложенныеЭлементы = Элемент.ПолучитьЭлементы();
		
        Если ВложенныеЭлементы.Количество() > 0 Тогда
			
			СвернутьРазвернутьДеревоКодов(ВложенныеЭлементы, Развернуть);

            Если Развернуть = Истина Тогда
                Элементы.ДеревоМаркированнойПродукции.Развернуть(Элемент.ПолучитьИдентификатор());
            Иначе
                Элементы.ДеревоМаркированнойПродукции.Свернуть(Элемент.ПолучитьИдентификатор());
			КонецЕсли;
			
        КонецЕсли;
    КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьДанныеВExcel(Команда)
	
	ДиалогВыбораФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Сохранение);
	ДиалогВыбораФайла.Заголовок = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияЗаголовокВыборФайла();
	ДиалогВыбораФайла.Фильтр 	= "Все поддерживаемые форматы файлов(*.xls;*.xlsx;)|*.xls;*.xlsx;|Книга Excel 97 (*.xls)|*.xls|Книга Excel 2007 (*.xlsx)|*.xlsx";
	ДиалогВыбораФайла.ИндексФильтра = 0;
	ДиалогВыбораФайла.ПредварительныйПросмотр = Ложь;
	ДиалогВыбораФайла.ПроверятьСуществованиеФайла = Истина;
	ДиалогВыбораФайла.МножественныйВыбор = Ложь;
	
	Оповещение = Новый ОписаниеОповещения("СоздатьФайлXLS", ЭтотОбъект);
	ДиалогВыбораФайла.Показать(Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьФайлXLS(ВыбранныеФайлы, ДополнительныеПараметрым) Экспорт
	
	Если Не ВыбранныеФайлы = Неопределено Тогда
		
		ТабличныйДокумент = Новый ТабличныйДокумент;
		
		Итератор = 1;
		Для Каждого СтрокаТЧ Из Объект.Марки Цикл
			
			Если Объект.Направление = ПредопределенноеЗначение("Перечисление.НаправленияДокументовИСМПТК.Входящий")
				Или Не ЗначениеЗаполнено(СтрокаТЧ.КодМаркировки) Тогда 
				КодДляЗаписи = СтрокаТЧ.КодИдентификации;
			Иначе 
				КодДляЗаписи = РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйКлиентСервер.Base64ВШтрихкод(СтрокаТЧ.КодМаркировки);
			КонецЕсли;
			
			ТабличныйДокумент.Область("R" + Формат(Итератор,"ЧГ=0") + "C1").Текст = КодДляЗаписи;
			Итератор = Итератор + 1;
		КонецЦикла;
		
		ТабличныйДокумент.Записать(ВыбранныеФайлы[0], ТипФайлаТабличногоДокумента.XLS97);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьПроцедуруФоновоВыполнено(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияОперацияОтменена());
		Возврат;
	ИначеЕсли Результат.Статус = "Ошибка" Тогда
		ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(Результат.ПодробноеПредставлениеОшибки);
	ИначеЕсли Результат.Статус = "Выполнено" Тогда
		
		// обрабатываем результат
		Модифицированность = Истина;
		
		Если ОбработатьРезультатЗагрузкиКодов(Результат.АдресРезультата) Тогда 
			ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияОперацияЗагрузкиКМЗавершена());
			
			Если Не Объект.Итоги.Количество() = 0
				И Элементы.ГруппаИтоги.Видимость Тогда
				ТекстСообщения = НСтр("ru = 'Изменились данные кодов маркировки: требуется актуализировать Итоги.'");
				ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
			КонецЕсли;
			
			Если ИнтеграцияИСМПТКВызовСервера.ИспользоватьАвтоПроверкаВалидностиКодаИСМПТК() Тогда 
				
				ТокенАвторизацииВрем = Неопределено;
				ЗавершениеПроверитьСостояниеКодовНаСервере = Новый ОписаниеОповещения("ЗавершениеПроверитьСостояниеКодовНаСервере", ЭтаФорма);
				ПолучитьКлючАвторизации(ЗавершениеПроверитьСостояниеКодовНаСервере, Истина);

			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	УправлениеФормой();
	
КонецПроцедуры

&НаСервере
Функция ОбработатьРезультатЗагрузкиКодов(АдресРезультата)
	
	РезультатЗадания = ПолучитьИзВременногоХранилища(АдресРезультата);
	
	Если РезультатЗадания.Свойство("МассивОшибок") И Не РезультатЗадания.МассивОшибок.Количество() = 0 Тогда
		Для Каждого ТекстОшибки Из РезультатЗадания.МассивОшибок Цикл 
			ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстОшибки);
		КонецЦикла;
	КонецЕсли;
	
	Если РезультатЗадания.Успешно И НЕ РезультатЗадания.ТаблицаПолученныхКодов.Количество() = 0 Тогда
		Для Каждого Строка Из РезультатЗадания.ТаблицаПолученныхКодов Цикл
			
			Если Не ЗначениеЗаполнено(Строка.Номенклатура)
				И Не Строка.ВидУпаковки = ПредопределенноеЗначение("Перечисление.ВидыУпаковокИСМПТК.Логистическая") Тогда
				// Если не смогли определить номенклатуру - КМ добавляем, но обращаем внимание пользователя на проблему с ним.
				ТекстСообщения = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияОбработкаСпискаКМНеНайденаНоменклатура();
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ШтрихкодЕАН%", Строка.EAN);
				ТекстСообщения = ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(ТекстСообщения, Строка.КодИдентификации);
				ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
				
				ТекстСообщенияВЖурнал = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияОбработкаСпискаКМНеНайденаНоменклатураВЖурнал();
				ТекстСообщенияВЖурнал = СтрЗаменить(ТекстСообщенияВЖурнал, "%СсылкаДокументМаркировки%", ?(Не Объект.Ссылка.Пустая(), Объект.Ссылка, ""));
				ТекстСообщенияВЖурнал = СтрЗаменить(ТекстСообщенияВЖурнал, "%ШтрихкодЕАН%", Строка.EAN);
				ИмяСобытия = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияЗаголовокЗагрузкаКМВДокументахСервиса();
				ОбщегоНазначенияИСМПТКВызовСервера.СоздатьЗаписьЖурналаРегистрации(ИмяСобытия, "Предупреждение",,, ТекстСообщенияВЖурнал);
			КонецЕсли;
					
			Если ЗначениеЗаполнено(Строка.Номенклатура)
				И Не ЗначениеЗаполнено(Строка.ВидПродукции) Тогда
				
				//Если товар определили, но не смогли понять товарную группу - добавляем, но предупреждаем.
				ТекстСообщения = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияОбработкаСпискаКМНеОпределенВидНоменклатуры();
				ТекстСообщения = ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(ТекстСообщения, Строка.КодИдентификации, Строка.Номенклатура);
				ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
				
				ТекстСообщенияВЖурнал = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияОбработкаСпискаКМНеОпределенВидНоменклатурыВЖурнал();
				ТекстСообщенияВЖурнал = СтрЗаменить(ТекстСообщенияВЖурнал, "%СсылкаДокументМаркировки%", ?(Не Объект.Ссылка.Пустая(), Объект.Ссылка, ""));
				ТекстСообщенияВЖурнал = СтрЗаменить(ТекстСообщенияВЖурнал, "%ШтрихкодЕАН%", 	   Строка.EAN);
				ТекстСообщенияВЖурнал = СтрЗаменить(ТекстСообщенияВЖурнал, "%НаименованиеТовара%", Строка.Номенклатура);
				ИмяСобытия = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияЗаголовокЗагрузкаКМВДокументахСервиса();
				ОбщегоНазначенияИСМПТКВызовСервера.СоздатьЗаписьЖурналаРегистрации(ИмяСобытия, "Предупреждение",,, ТекстСообщенияВЖурнал);
				
			ИначеЕсли ЗначениеЗаполнено(Строка.Номенклатура)
				И Строка.ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИСМПТК.ЛекарственныеПрепараты") Тогда
				
				//Если товар определили, но он не подходит этому документу - сообщаем и код не добавляем.
				ТекстСообщения = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияОбработкаСпискаКМНеСоответствуетВидуПродукцииДокумента(); 
				ТекстСообщения = ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(
								 ТекстСообщения,
								 Строка.КодИдентификации,
								 Строка.Номенклатура,
								 Строка.ВидПродукции);
				ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
				Продолжить;
				
			КонецЕсли;
			
			НайденныеСтроки = Объект.Марки.НайтиСтроки(Новый Структура("КодИдентификации", Строка.КодИдентификации));
			Если НайденныеСтроки.Количество() = 0 Тогда
				ЗаполнитьЗначенияСвойств(Объект.Марки.Добавить(), Строка);
				Если Не ЗначениеЗаполнено(Объект.ТоварнаяГруппа) Тогда 
					Объект.ТоварнаяГруппа = Строка.ВидПродукции;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		ИнтеграцияИСМПТК.ПроверитьНаличиеУпаковокПоКоторымНеПолучилосьВыполнитьЗапросСостава(ЭтаФорма);
		СформироватьДеревоКодовМаркировки();
		Возврат Истина;
	Иначе 
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

#КонецОбласти 

#Область Штрихкодирование

&НаКлиенте
Процедура ОбработатьКодМаркировки(ИсходныеДанные, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если ИсходныеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ИсходныеДанные.Свойство("ФормаПоискаНоменклатуры_Успешно") Тогда
		
		СтруктураКодовМаркировки = ИсходныеДанные.СтруктураКодовМаркировки;
		
		//Обработчик после того, как была вызвана форма проверки и подбора номенклатуры (для регистрации ШК)
		Если ИсходныеДанные.ФормаПоискаНоменклатуры_Успешно Тогда
			ДобавитьНовыйКод(СтруктураКодовМаркировки);
			ТекстУведомления = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияЗарегистрированНовыйШтрихкод(); 
			ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстУведомления);
		Иначе
			ТекстОшибки = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияОтказДобавленияКодаНеОпределенаНоменклатура();
			ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстОшибки);
			Возврат;
		КонецЕсли;
		
	Иначе
		
		//Для передачи на сервер КМ, в составе которого есть символы GS (29), требуется дополнительное кодирование
		РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйКлиентСервер.ЗакодироватьШтрихкодДанныхBase64(ИсходныеДанные);
		ИсходныеДанные.Вставить("ФорматBase64", Истина);	
		СтруктураКодовМаркировки = ИнтеграцияИСМПТКВызовСервера.ПолучитьКодыМаркировки(ИсходныеДанные);   
		
		//Если удалось разобрать код, вернется структура. Если нет - текст сообщения об ошибке.
		Если ТипЗнч(СтруктураКодовМаркировки) = Тип("Строка") Тогда
			ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(СтруктураКодовМаркировки);
			Возврат;
		КонецЕсли;
		
		ОтказатьВДобавлении = Ложь;
		Если Не НайтиПоКодуИдентификации(СтруктураКодовМаркировки.КодИдентификации) = Неопределено Тогда 
			
			ОтказатьВДобавлении = Истина;
			
		ИначеЕсли ОбщегоНазначенияИСМПТК.ПроверитьЗначениеКонстанты("ПоддержкаДвойногоФорматаТранспортныхКодовИСМПТК")
			И СтруктураКодовМаркировки.ВидУпаковки = ПредопределенноеЗначение("Перечисление.ВидыУпаковокИСМПТК.Логистическая") Тогда
			
			//В этом случае в таблице документа может находиться уже преобразованный SSCC, соответствующий обрабатываемому в данный момент штрихкоду,
			//т.е. нужна специфическая проверка на дублирование данных кода
			ОтказатьВДобавлении = ПроверитьНаличиеSSCCВДокументе(СтруктураКодовМаркировки.КодИдентификации);
			
		КонецЕсли;
		
		Если ОтказатьВДобавлении Тогда
			ПараметрыОткрытия = СобытияФормИСМПТККлиент.ПараметрыОткрытияФормыНевозможностиДобавленияОтсканированного();
			ПараметрыОткрытия.Штрихкод    = ИсходныеДанные.Штрихкод;
			ПараметрыОткрытия.ТекстОшибки = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияКодМаркировкиУказанВДокументе();
			ОткрытьФорму(ОбщегоНазначенияИСМПТККлиент.ПолучитьИмяФормыИнформацияОНевозможностиДобавленияКМ(), ПараметрыОткрытия, ЭтаФорма);
			Возврат;
		КонецЕсли;
		
		Если Не СтруктураКодовМаркировки = Неопределено Тогда
			Если Не СтруктураКодовМаркировки.ВидУпаковки = ПредопределенноеЗначение("Перечисление.ВидыУпаковокИСМПТК.Потребительская") Тогда 
				//Проверяем, включено ли автоматическое получение данных с сервера по групповым упаковкам
				Если ИнтеграцияИСМПТКВызовСервера.ИспользоватьАвтоОпределениеЛогистическихКодовИСМПТК() Тогда
					ДобавитьНовыйЛогистическийКод(СтруктураКодовМаркировки); //Заполняем автоматически с сервера
				Иначе
					//Даем возможность указать данные вручную
					ПараметрыОткрытияФормы = Новый Структура("Номенклатура, СтруктураКодовМаркировки, Организация, ИнФСистема", 
															ИнтеграцияИСМПТКПереопределяемый.ПолучитьПустуюСсылкуНоменклатура(), 
															СтруктураКодовМаркировки, 
															Объект.Организация,
															"ИСМПТ");
					ОткрытьФорму("ОбщаяФорма.ФормаУточненияДанныхИСМПТК", ПараметрыОткрытияФормы, ЭтотОбъект,,,, Новый ОписаниеОповещения("ЗавершитьДобавлениеКодаМаркировки", ЭтотОбъект), РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
				КонецЕсли;
			Иначе
				//Для потребительских заполняем напрямую
				ДобавитьНовыйКод(СтруктураКодовМаркировки);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция НайтиПоКодуИдентификации(КодИдентификации)
	
	СтруктураПоиска = Новый Структура("КодИдентификации", КодИдентификации);
	
	НайденныеСтроки = Объект.Марки.НайтиСтроки(СтруктураПоиска);
	
	Если НайденныеСтроки.Количество() > 0 Тогда
		Возврат НайденныеСтроки;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура ДобавитьНовыйКод(СтруктураКодовМаркировки)
	
	СообщенияОбОшибках = Новый Соответствие();
	ДанныеНоменклатуры = ПолучитьНоменклатуруПоШтрихкоду(СтруктураКодовМаркировки.EAN, СообщенияОбОшибках);
	Если ТипЗнч(ДанныеНоменклатуры) = Тип("Структура") Тогда
		Номенклатура = ДанныеНоменклатуры.Номенклатура;
	Иначе
		Номенклатура = ДанныеНоменклатуры;
	КонецЕсли;
	Если Не СообщенияОбОшибках.Количество() = 0 Тогда
		Для Каждого СообщениеОшибка Из СообщенияОбОшибках Цикл 
			ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(СообщениеОшибка.Значение);
		КонецЦикла;
	КонецЕсли;
	
	ВидПродукцииКода = ПолучитьВидПродукцииПоНоменклатуре(Номенклатура);
	Если ЗначениеЗаполнено(ВидПродукцииКода)
		И ВидПродукцииКода = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИСМПТК.ЛекарственныеПрепараты") 
		И Не СтруктураКодовМаркировки.ВидУпаковки = ПредопределенноеЗначение("Перечисление.ВидыУпаковокИСМПТК.Логистическая") Тогда
		
		ТекстСообщения = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияКМПринадлежитНоменклатуреСОсобенностямиУчетаСПараметрами() + " "
					   + РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияДокументНеПредназначенДляРаботыСЭтойТГ();
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%НаименованиеПодсистемы%", РаботаСТекстамиИСМПТККлиентСервер.НаименованиеИСМПТ());
		ТекстСообщения = ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(ТекстСообщения, Номенклатура, ВидПродукцииКода); 
		ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
		Возврат;
		
	ИначеЕсли Не ЗначениеЗаполнено(Номенклатура) Тогда
		
		ТекстСообщения = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияДобавитьНовыйКМНеНайденаНоменклатура();
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ШтрихкодЕАН%", СтруктураКодовМаркировки.EAN);
		ТекстСообщения = ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(ТекстСообщения, СтруктураКодовМаркировки.КодИдентификации);
		ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
		
		ТекстСообщенияВЖурнал = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияДобавитьНовыйКМНеНайденаНоменклатураВЖурнал();
		ТекстСообщенияВЖурнал = СтрЗаменить(ТекстСообщенияВЖурнал, "%СсылкаДокументМаркировки%", ?(Не Объект.Ссылка.Пустая(), Объект.Ссылка, ""));
		ТекстСообщенияВЖурнал = СтрЗаменить(ТекстСообщенияВЖурнал, "%ШтрихкодЕАН%", СтруктураКодовМаркировки.EAN);
		ИмяСобытия = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияЗаголовокЗагрузкаКМВДокументахСервиса();
		ОбщегоНазначенияИСМПТКВызовСервера.СоздатьЗаписьЖурналаРегистрации(ИмяСобытия, "Предупреждение",,, ТекстСообщенияВЖурнал);
		
	ИначеЕсли Не ЗначениеЗаполнено(ВидПродукцииКода)
		И Не СтруктураКодовМаркировки.ВидУпаковки = ПредопределенноеЗначение("Перечисление.ВидыУпаковокИСМПТК.Логистическая") Тогда
		
		ТекстСообщения = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияДобавитьНовыйКМНеОпределенВидНоменклатуры();
		ТекстСообщения = ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(ТекстСообщения, СтруктураКодовМаркировки.КодИдентификации, Номенклатура);
		ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
		
		ТекстСообщенияВЖурнал = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияДобавитьНовыйКМНеОпределенВидНоменклатурыВЖурнал();
		ТекстСообщенияВЖурнал = СтрЗаменить(ТекстСообщенияВЖурнал, "%СсылкаДокументМаркировки%", ?(Не Объект.Ссылка.Пустая(), Объект.Ссылка, ""));
		ТекстСообщенияВЖурнал = СтрЗаменить(ТекстСообщенияВЖурнал, "%ШтрихкодЕАН%", 	   СтруктураКодовМаркировки.EAN);
		ТекстСообщенияВЖурнал = СтрЗаменить(ТекстСообщенияВЖурнал, "%НаименованиеТовара%", Номенклатура);
		ИмяСобытия = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияЗаголовокЗагрузкаКМВДокументахСервиса();
		ОбщегоНазначенияИСМПТКВызовСервера.СоздатьЗаписьЖурналаРегистрации(ИмяСобытия, "Предупреждение",,, ТекстСообщенияВЖурнал);
		
	КонецЕсли;
		
	Если Не ЗначениеЗаполнено(Номенклатура) Тогда 
		
		ДанныеДляСопоставленияНоменклатуры = Новый Структура(); //передается в параметрах открытия формы подбора
		Операция = "СопоставлениеНоменклатуры";
		
		ИсходныеДанные = Новый Структура("Количество, Штрихкод", 1, СтруктураКодовМаркировки.КодИдентификации);
		ДанныеДляСопоставленияНоменклатуры.Вставить("ИсходныеДанные", ИсходныеДанные); //содержит структуру "Количество, Штрихкод", где штрихкод это отсканированный КМ
		
		ШтрихкодыКСопоставлению = Новый Массив();
		ДанныеШтрихкода = Новый Структура("Количество, Штрихкод", 1, СтруктураКодовМаркировки.EAN);
		ШтрихкодыКСопоставлению.Добавить(ДанныеШтрихкода);
		ДанныеДляСопоставленияНоменклатуры.Вставить("ШтрихкодыКСопоставлению", ШтрихкодыКСопоставлению); //содержит массив, где каждый элемент - структура "Количество, Штрихкод", где штрихкод - это EAN из КМ, который необходимо проверить по регистру Штрихкодов
				
		ПараметрыОткрытияФормы = Новый Структура("ДанныеДляСопоставленияНоменклатуры, Операция, НеизвестныеШтрихкоды, СтруктураКодовМаркировки, Направление", ДанныеДляСопоставленияНоменклатуры, Операция, ШтрихкодыКСопоставлению, СтруктураКодовМаркировки, Объект.Направление);
		ОбработкаОповещенияПодборНоменклатуры = Новый ОписаниеОповещения("ОбработатьКодМаркировки", ЭтотОбъект);
		РежимОткрытия = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
		ОткрытьФорму("Обработка.РозничноеВыбытиеМаркированнойПродукцииИСМПТК.Форма.ПоискНоменклатурыПоШтрихкоду", ПараметрыОткрытияФормы, ЭтотОбъект,,,, ОбработкаОповещенияПодборНоменклатуры, РежимОткрытия);
				
	ИначеЕсли Объект.Товары.НайтиСтроки(Новый Структура("Номенклатура", Номенклатура)).Количество() = 0
		И Объект.Марки.НайтиСтроки(Новый Структура("Номенклатура", Номенклатура)).Количество() = 0
		И ЗначениеЗаполнено(Объект.ДокументОснование) Тогда
		
		ТекстВопроса = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияЭтогоТовараНетВДокументеОснования()
					 + Символы.ПС
					 + РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияВопросДобавитьКМВДокумент();
		ТекстВопроса = ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(ТекстВопроса, Номенклатура);
		
		ИзменитьДокументОснованиеЗавершение = Новый ОписаниеОповещения("ДобавитьНовуюНоменклатуру", ЭтаФорма, Новый Структура("СтруктураКодовМаркировки, Номенклатура", СтруктураКодовМаркировки, Номенклатура));
		ПоказатьВопрос(ИзменитьДокументОснованиеЗавершение, ТекстВопроса, РежимДиалогаВопрос.ОКОтмена);
		
	Иначе
		
		СтруктураКодовМаркировки.Вставить("Номенклатура", Номенклатура);
		ЗавершитьДобавлениеКодаМаркировки(СтруктураКодовМаркировки);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьНовыйЛогистическийКод(СтруктураКодовМаркировки)
	
	ЗавершениеПолучитьДанныеПоГрупповомуКодуМаркировки = Новый ОписаниеОповещения("ЗавершениеПолучитьДанныеПоГрупповомуКодуМаркировки", ЭтаФорма, СтруктураКодовМаркировки);
	ПолучитьКлючАвторизации(ЗавершениеПолучитьДанныеПоГрупповомуКодуМаркировки);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершениеПолучитьДанныеПоГрупповомуКодуМаркировки(РезультатВыполнения, Параметры) Экспорт
	
	ИнтеграцияИСМПТККлиент.ЗавершениеПолучитьДанныеПоГрупповомуКодуМаркировки_Общая(ЭтаФорма, РезультатВыполнения, Параметры);
		
КонецПроцедуры

&НаСервере
Функция ПолучитьНоменклатуруПоШтрихкоду(EAN, СообщенияОбОшибках = Неопределено)
	
	Если СообщенияОбОшибках = Неопределено Тогда
		//Не во всех местах вызова функции нужно выводить пользователю сообщения, поэтому заменяеям на коллекцию-пустышку
		СообщенияОбОшибках = Новый Соответствие();
	КонецЕсли;
	
	Возврат ОбщегоНазначенияИСМПТКПереопределяемый.ПолучитьДанныеНоменклатурыИзРегистраШтрихкодовПоШтрихкоду(, EAN,, СообщенияОбОшибках);
	
КонецФункции

&НаСервере
Функция ПолучитьВидПродукцииПоНоменклатуре(Номенклатура)
	
	Возврат ОбщегоНазначенияИСМПТКПереопределяемый.ПолучитьВидПродукцииПоНоменклатуре(Номенклатура);
	
КонецФункции

&НаКлиенте
Процедура ЗавершитьДобавлениеКодаМаркировки(СтруктураКодовМаркировки = Неопределено, ПараметрКоманды = Неопределено) Экспорт
	
	Если Не СтруктураКодовМаркировки = Неопределено Тогда 
		
		Если ЗначениеЗаполнено(СтруктураКодовМаркировки.Номенклатура) 
			И Не ЗначениеЗаполнено(СтруктураКодовМаркировки.ВидПродукции) Тогда
			
			ВидПродукции = РозничноеВыбытиеИСМПТККлиент.ПолучитьВидПродукцииПоНоменклатуре(СтруктураКодовМаркировки.Номенклатура);
			СтруктураКодовМаркировки.ВидПродукции = ВидПродукции;
		КонецЕсли;
		
		ДобавитьКодМаркировкиВДерево(СтруктураКодовМаркировки.Номенклатура, СтруктураКодовМаркировки);
		
		НоваяСтрока = Объект.Марки.Добавить();
		НоваяСтрока.КодМаркировки 	 = СтруктураКодовМаркировки.КодМаркировки;
		НоваяСтрока.КодИдентификации = СтруктураКодовМаркировки.КодИдентификации;
		НоваяСтрока.GTIN 			 = СтруктураКодовМаркировки.GTIN;
		Если СтруктураКодовМаркировки.ВидУпаковки = ПредопределенноеЗначение("Перечисление.ВидыУпаковокИСМПТК.Групповая") Тогда 
			НоваяСтрока.GTINВерхнегоУровня = СтруктураКодовМаркировки.GTINВерхнегоУровня;
		КонецЕсли;
		НоваяСтрока.EAN 		 = СтруктураКодовМаркировки.EAN;
		НоваяСтрока.Номенклатура = СтруктураКодовМаркировки.Номенклатура;
		НоваяСтрока.Количество 	 = СтруктураКодовМаркировки.Количество;
		НоваяСтрока.ВидУпаковки	 = СтруктураКодовМаркировки.ВидУпаковки;
		НоваяСтрока.ВидПродукции = СтруктураКодовМаркировки.ВидПродукции;
		
		Если Не ЗначениеЗаполнено(Объект.ТоварнаяГруппа) Тогда 
			Объект.ТоварнаяГруппа = НоваяСтрока.ВидПродукции;
		КонецЕсли;
				
		Для Каждого Строка ИЗ ДеревоМаркированнойПродукции.ПолучитьЭлементы() Цикл
			Элементы.ДеревоМаркированнойПродукции.Развернуть(Строка.ПолучитьИдентификатор(), Истина);
		КонецЦикла;
		
		//Проверяем состояние кода маркировки и выводим предупреждение, если с кодом что-то не так
		Если ИнтеграцияИСМПТКВызовСервера.ИспользоватьАвтоПроверкаВалидностиКодаИСМПТК() Тогда
			ДополнительныеПараметры = Новый Структура("КодИдентификации", СтруктураКодовМаркировки.КодИдентификации);
			ТокенАвторизацииВрем = Неопределено;
			//отложено: вывод сообщения с результатом запроса статуса
			ЗавершениеПроверитьСостояниеКМПриДобавленииНаСервере = Новый ОписаниеОповещения("ЗавершениеПроверитьСостояниеКМПриДобавленииНаСервере", ЭтаФорма, ДополнительныеПараметры);
			//предварительный запрос токена
			ПолучитьКлючАвторизации(ЗавершениеПроверитьСостояниеКМПриДобавленииНаСервере, Истина);
			
		КонецЕсли;
		
		Если Не Объект.Итоги.Количество() = 0
			И Элементы.ГруппаИтоги.Видимость Тогда
			ТекстСообщения = НСтр("ru = 'Изменились данные кодов маркировки: требуется актуализировать Итоги.'");
			ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;
		Модифицированность = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьКодМаркировкиВДерево(Номенклатура, СтруктураКодовМаркировки) Экспорт
	
	Если Номенклатура = Неопределено Тогда
		//Нужен ссылочный тип, чтобы дерево построилось корректно
		Номенклатура = ОбщегоНазначенияИСМПТКПереопределяемый.ПолучитьПустуюСсылкуНоменклатура();
	КонецЕсли;
	
	НайденнаяСтрока = НайтиЗначениеЭлементаДереваПоНоменклатуре(Номенклатура, ДеревоМаркированнойПродукции);
	
	Если Не НайденнаяСтрока = Неопределено Тогда
		
		Если СтруктураКодовМаркировки.ВидУпаковки = Перечисления.ВидыУпаковокИСМПТК.Потребительская Тогда 
			КоличествоПодобранно = 1;
		Иначе 
			КоличествоПодобранно = СтруктураКодовМаркировки.Количество;
		КонецЕсли;
		
		НоваяСтрокаКод = НайденнаяСтрока.ПолучитьЭлементы().Добавить();
		
		//Поддержка двойного формата кодов SSCC
		ВыполнялосьПреобразованиеКМ = ?(Параметры.Свойство("ВыполнялосьПреобразованиеКМ"), Параметры.ВыполнялосьПреобразованиеКМ, Ложь);
		КодИдентификации 			= ?(Параметры.Свойство("КодИдентификации"), Параметры.КодИдентификации, СтруктураКодовМаркировки.КодИдентификации); 
		Если ВыполнялосьПреобразованиеКМ Тогда
			НоваяСтрокаКод.КодМаркировки    = РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйКлиентСервер.ШтрихкодВBase64(КодИдентификации);
			НоваяСтрокаКод.КодИдентификации = КодИдентификации;
		Иначе
			НоваяСтрокаКод.КодМаркировки    = СтруктураКодовМаркировки.КодМаркировки;
			НоваяСтрокаКод.КодИдентификации = СтруктураКодовМаркировки.КодИдентификации;
		КонецЕсли;
		//////
		
		НоваяСтрокаКод.GTIN = СтруктураКодовМаркировки.GTIN;
		Если СтруктураКодовМаркировки.ВидУпаковки = ПредопределенноеЗначение("Перечисление.ВидыУпаковокИСМПТК.Групповая") Тогда 
			НоваяСтрокаКод.GTINВерхнегоУровня = СтруктураКодовМаркировки.GTINВерхнегоУровня;
		КонецЕсли;
		
		НоваяСтрокаКод.Количество = 0;
		НоваяСтрокаКод.КоличествоПодобранно	= КоличествоПодобранно;
		
		НайденнаяСтрока.КоличествоПодобранно = НайденнаяСтрока.КоличествоПодобранно + НоваяСтрокаКод.КоличествоПодобранно;
		НоваяСтрокаКод.ВидУпаковки  = СтруктураКодовМаркировки.ВидУпаковки;
		НоваяСтрокаКод.ВидПродукции = СтруктураКодовМаркировки.ВидПродукции;
					
	Иначе
		
		ЭлементыДерева = ДеревоМаркированнойПродукции.ПолучитьЭлементы();
		
		НоваяСтрокаНоменклатура = ЭлементыДерева.Добавить();
		НоваяСтрокаНоменклатура.Номенклатура = Номенклатура;
		
		Если ЗначениеЗаполнено(СтруктураКодовМаркировки.КодИдентификации) Тогда 
			НоваяСтрокаКод = НоваяСтрокаНоменклатура.ПолучитьЭлементы().Добавить();
			НоваяСтрокаКод.КодМаркировки 	  = СтруктураКодовМаркировки.КодМаркировки;
			НоваяСтрокаКод.КодИдентификации   = СтруктураКодовМаркировки.КодИдентификации;
			НоваяСтрокаКод.GTIN 			  = СтруктураКодовМаркировки.GTIN;
			Если СтруктураКодовМаркировки.ВидУпаковки = ПредопределенноеЗначение("Перечисление.ВидыУпаковокИСМПТК.Групповая") Тогда 
				НоваяСтрокаКод.GTINВерхнегоУровня = СтруктураКодовМаркировки.GTINВерхнегоУровня;
			КонецЕсли;
			
			Если Не ЗначениеЗаполнено(СтруктураКодовМаркировки.Количество) Тогда 
				НоваяСтрокаКод.КоличествоПодобранно	= ?(СтруктураКодовМаркировки.ВидУпаковки = Перечисления.ВидыУпаковокИСМПТК.Потребительская, 1, 0);
			Иначе 
				НоваяСтрокаКод.КоличествоПодобранно	= СтруктураКодовМаркировки.Количество;
			КонецЕсли;
			
			НоваяСтрокаНоменклатура.КоличествоПодобранно = НоваяСтрокаКод.КоличествоПодобранно;
			
			НоваяСтрокаКод.ВидУпаковки 	= СтруктураКодовМаркировки.ВидУпаковки;
			НоваяСтрокаКод.ВидПродукции = СтруктураКодовМаркировки.ВидПродукции;
				
		КонецЕсли;
		
		НоваяСтрокаНоменклатура.ВидУпаковки = Перечисления.ВидыУпаковокИСМПТК.ПустаяСсылка();
		
		Если СтруктураКодовМаркировки.Свойство("КоличествоИсточник") Тогда 
			НоваяСтрокаНоменклатура.Количество	= СтруктураКодовМаркировки.КоличествоИсточник;
		Иначе 
			НоваяСтрокаКод.Количество = 0;
		КонецЕсли;
		
		ЕдиницаИзмерения = ИнтеграцияИСМПТКПереопределяемый.ПолучитьБазовуюЕдиницуИзмерения(Номенклатура);
		НоваяСтрокаНоменклатура.ЕдиницаИзмерения = ЕдиницаИзмерения;
		
		ИнтерфейсИСМПТККлиентСервер.УстановитьИндексКартинкиТипаУпаковки(НоваяСтрокаНоменклатура);
		
	КонецЕсли;
	
	Если Не НоваяСтрокаКод = Неопределено Тогда
		ИнтерфейсИСМПТККлиентСервер.УстановитьИндексКартинкиТипаУпаковки(НоваяСтрокаКод);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция НайтиЗначениеЭлементаДереваПоНоменклатуре(Номенклатура, Дерево)
	
	НайденныйЭлемент = Неопределено;
	
	ЭлементыВетвиДерева = Дерево.ПолучитьЭлементы();
	Для Каждого ЭлементДерева Из ЭлементыВетвиДерева Цикл
		Если ЭлементДерева.Номенклатура = Номенклатура Тогда
			НайденныйЭлемент = ЭлементДерева;
		КонецЕсли;
	КонецЦикла;
	
	Возврат НайденныйЭлемент;
	
КонецФункции

&НаСервере
Функция ПолучитьСтруктуруКодовМаркировки()
	
	СтруктураКодовМаркировки = Новый Структура;
	СтруктураКодовМаркировки.Вставить("КодМаркировки", "");
	СтруктураКодовМаркировки.Вставить("КодИдентификации", "");
	СтруктураКодовМаркировки.Вставить("GTIN", "");
	СтруктураКодовМаркировки.Вставить("КоличествоИсточник", 0);
	СтруктураКодовМаркировки.Вставить("Количество", 0);
	СтруктураКодовМаркировки.Вставить("ВидУпаковки", Перечисления.ВидыУпаковокИСМПТК.ПустаяСсылка());
	
	Возврат СтруктураКодовМаркировки;
	
КонецФункции

#КонецОбласти

#Область РаботаСТСД

#Область ЗагрузкаИзТСД

&НаКлиенте
Процедура ЗагрузитьИзТСДПослеАвторизации(РезультатАвторизации, Штрихкоды) Экспорт
	
	Подключаемый_ПолученыДанныеИзТСД(Штрихкоды, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПолученыДанныеИзТСД(Штрихкоды, АвторизацияЗапрашивалась = Неопределено) Экспорт
	
	Если Штрихкоды.Количество() = 0 Тогда
		ПоказатьПредупреждение( ,РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияВДанныхИзТСДНетИнформацииОКодахМаркировки());
		Возврат;
	КонецЕсли;
	
	СобытияФормИСМПТККлиент.ОповеститьОНачалеОбработкиДанныхТСД();
	ПараметрыСканирования = РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйКлиент.ПараметрыСканирования(ЭтотОбъект);
	СобытияФормИСМПТККлиент.ПреобразоватьШтрихкодыТСДВBase64(Штрихкоды);
	ЗагрузкаДанныхТСД = ОбработатьПолученныеДанныеТСДНаСервере(Штрихкоды, ПараметрыСканирования, Неопределено);
	
	ОбработатьПолученныеДанныеТСД();
	
КонецПроцедуры

&НаСервере
Функция ОбработатьПолученныеДанныеТСДНаСервере(ШтрихкодыТСД, ПараметрыСканирования, КэшированныеЗначения)
	
	Результат = РаботаСДокументамиИСМПТК.ОбработатьПолученныеДанныеТСДВДокументе(ЭтотОбъект, ШтрихкодыТСД, ПараметрыСканирования);
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Асинх Процедура ОбработатьПолученныеДанныеТСД()
	
	Если ЗагрузкаДанныхТСД = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	МассивКодовМаркировки = Новый Массив;
	
	Для НомерСтроки = 0 По ЗагрузкаДанныхТСД.Всего - 1 Цикл
		Штрихкод = ЗагрузкаДанныхТСД.ШтрихкодыТСД[НомерСтроки];
		ДанныеШтрихкода = Новый Структура("ШтрихКод, ФорматBase64, Количество", Штрихкод.Штрихкод, Ложь, 1);
		РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйКлиентСервер.ЗакодироватьШтрихкодДанныхBase64(ДанныеШтрихкода);
		Если Не РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйКлиентСервер.ПроверкаФорматаТранспортногоКодаПройденаУспешно(ДанныеШтрихкода, Истина) Тогда
			Продолжить;
		КонецЕсли;
		МассивКодовМаркировки.Добавить(ДанныеШтрихкода);
	КонецЦикла;
	
	СтруктураПараметров = Новый Структура("ФормаОбъекта, МассивКодовМаркировки", ЭтотОбъект, МассивКодовМаркировки);
	
	Токен = Неопределено;
	Если ИнтеграцияИСМПТКВызовСервера.ИспользоватьАвтоОпределениеЛогистическихКодовИСМПТК() Тогда 
		Токен = Ждать ИнтеграцияИСМПТККлиент.ПолучитьТокенАвторизации(Объект.Организация);
		ИнтеграцияИСМПТККлиент.ЗагрузитьКодыМаркировкиИзТСДЗавершение(Токен, СтруктураПараметров);
	Иначе
		ИнтеграцияИСМПТККлиент.ЗагрузитьКодыМаркировкиИзТСДЗавершение(Неопределено, СтруктураПараметров);
	КонецЕсли;
	
	Если ИнтеграцияИСМПТКВызовСервера.ИспользоватьАвтоПроверкаВалидностиКодаИСМПТК() Тогда 
		
		Если Не ЗначениеЗаполнено(Объект.Организация) Тогда
			ТекстСообщения = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияВключенАвтозапросНужнаОрганизацияДляВыполнения("АвтоПроверкаВалидностиКодаИСМПТК");
			ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
			Возврат;
		КонецЕсли;
		
		//После заполнения ТЧ проверяем коды еще одним запросом
		Если Токен = Неопределено Тогда 
			Токен = Ждать ИнтеграцияИСМПТККлиент.ПолучитьТокенАвторизации(Объект.Организация);
		КонецЕсли;
		ЗапроситьДанныеОСостоянииКодовСписком(Токен);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область МобильноеПриложение

&НаКлиенте
Процедура МобильноеПриложениеЗагрузитьТовары(Команда)
	
	ОчиститьСообщения();
	Если ИнтеграцияИСМПТКВызовСервера.ИспользоватьАвтоПроверкаВалидностиКодаИСМПТК() 
		И Не ЗначениеЗаполнено(Объект.Организация) Тогда
		ТекстСообщения = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияВключенАвтозапросНужнаОрганизацияДляВыполнения("АвтоПроверкаВалидностиКодаИСМПТК");
		ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	ОповещениеПослеВыбораЭлемента = Новый ОписаниеОповещения("МобильноеПриложениеЗагрузитьТоварыОбработкаВыбора", ЭтотОбъект);
	Список = РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйВызовСервера.МобильноеПриложениеЗагрузитьТоварыНаСервере();
	Список.ПоказатьОтметкуЭлементов(ОповещениеПослеВыбораЭлемента, РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияВыборДокументаДляЗагрузки());
	
КонецПроцедуры

&НаКлиенте
Процедура МобильноеПриложениеЗагрузитьТоварыОбработкаВыбора(Элемент, Параметры) Экспорт
	
	РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйКлиент.МобильноеПриложениеЗагрузитьТоварыОбработкаВыбораОбщая(ЭтотОбъект, Элемент, Параметры);
	
КонецПроцедуры

#КонецОбласти

#Область ВыводИзОборота

&НаСервере
Функция ПолучитьУВИО() Экспорт
	
	Запрос = Новый Запрос();
	Запрос.Текст =  "ВЫБРАТЬ
	|	УведомлениеОВыводеИзОборотаИСМПТК.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.УведомлениеОВыводеИзОборотаИСМПТК КАК УведомлениеОВыводеИзОборотаИСМПТК
	|ГДЕ
	|	УведомлениеОВыводеИзОборотаИСМПТК.ДокументОснование = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Возврат Выборка.Ссылка;
	КонецЦикла;
	
	Возврат ПредопределенноеЗначение("Документ.УведомлениеОВыводеИзОборотаИСМПТК.ПустаяСсылка");
	
КонецФункции

#КонецОбласти

#Область КомандыРедактированияСтроки

#Область ПотребительскиеИГрупповыеКМ

&НаКлиенте
Процедура ПодобратьНоменклатуруИЗарегистрироватьGTIN(Команда)
	
	//1. Просим записать документ
	//2. Перебираем ТЧ Марки:
	//   отбираем все строки с НЕ транспортными кодами, у которых заполнены GTINВерхнегоУровня, но не заполнена номенклатура.
	// Это будут потребительские коды, у которых не удалось опознать номенклатуру,
	// а также групповые КМ, у которых не определилась номенклатура верхнего уровня, т.е. по коду товара самой групповой упаковки (блока).
	//3. Открываем форму обработки ПоискНоменклатурыПоШтрихкоду с передачей параметра Операция = "РегистрацияШтрихкодовСписком"
	//4. В форме назначается номенклатура, при закрытии должна списком регистрироваться информация по ШК.
	//5. В обработчике события закрытия формы обработки дозаполнеям ТЧ Марок, модифицируем документ, перестраиваем дерево кодов.
	
	Если Объект.Марки.Количество() = 0 Тогда
		ТексСообщения = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияВДокументеНетДанныхКодовМаркировки();
		ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТексСообщения);
		Возврат;
	КонецЕсли;
		
	//Проверяем, записан ли документ
	ТекстВопроса = "";
	Если НЕ ЗначениеЗаполнено(ЭтаФорма.Параметры.Ключ) ИЛИ ЭтаФорма.Модифицированность Тогда
		ТекстВопроса = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияВопросЗаписбДокументаПередНачаломРегистрацииШтрихкода();
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекстВопроса) Тогда
		
		Режим = РежимДиалогаВопрос.ДаНет;
		Оповещение   = Новый ОписаниеОповещения("ПослеЗакрытияВопросаПодобратьНоменклатуруИЗарегистрироватьGTIN", ЭтотОбъект);
		ПоказатьВопрос(Оповещение, ТекстВопроса, Режим, 0);
		
	Иначе
		
		//Переходим к отбору штрихкодов, требующих регистрации
		ПродолжитьПодборНоменклатурыИРегистрацииШтрихкодов();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияВопросаПодобратьНоменклатуруИЗарегистрироватьGTIN(Результат, Параметры) Экспорт

	Если Результат = КодВозвратаДиалога.Да Тогда
		
		Попытка
			// выполняем запись документа
			ПараметрыЗаписи = Новый Структура("РежимЗаписи", РежимЗаписиДокумента.Запись);
			Если ЭтаФорма.Записать(ПараметрыЗаписи) Тогда
				//Переходим к отбору штрихкодов, требующих регистрации
				ПродолжитьПодборНоменклатурыИРегистрацииШтрихкодов();
			КонецЕсли;
			
		Исключение
			
			ТекстСообщения = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияНеУдалосьЗаписатьДокументМаркировки()
			 			   + Символы.ПС
						   + КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
			ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения, , , "Форма.Объект");
			
		КонецПопытки;
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПродолжитьПодборНоменклатурыИРегистрацииШтрихкодов()
	
	//Отбираем из ТЧ Марки все строки, у которых заполнен GTIN, но не заполнена номенклатура:
	//для таких позиций необходимо сформировать список штрихкодов к регистрации с группировкой по GTIN.
	ШтрихкодыКСопоставлению = ПодготовитьДанныеДляРегистрацииНоменклатуры();
	
	//Открываем форму подбора и регистрации с передачей неопознанных штрихкодов
	ДанныеДляСопоставленияНоменклатуры = Новый Структура(); //передается в параметрах открытия формы подбора
	Операция = "РегистрацияШтрихкодовСписком";
			
	ДанныеДляСопоставленияНоменклатуры.Вставить("ШтрихкодыКСопоставлению", ШтрихкодыКСопоставлению); //содержит массив, где каждый элемент - структура "Количество, Штрихкод", где штрихкод - это EAN из строка ТЧ Марки, который необходимо зарегистрировать
	
	ПараметрыОткрытияФормы = Новый Структура("ДанныеДляСопоставленияНоменклатуры, Операция, НеизвестныеШтрихкоды, СтруктураКодовМаркировки, Направление", ДанныеДляСопоставленияНоменклатуры, Операция, ШтрихкодыКСопоставлению, Неопределено, Объект.Направление);
	ОбработкаОповещенияПодборНоменклатуры = Новый ОписаниеОповещения("ПодборНоменклатурыИРегистрацииШтрихкодовПослеЗакрытияФормы", ЭтотОбъект);
	РежимОткрытия = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
	ОткрытьФорму("Обработка.РозничноеВыбытиеМаркированнойПродукцииИСМПТК.Форма.ПоискНоменклатурыПоШтрихкоду", ПараметрыОткрытияФормы, ЭтотОбъект,,,, ОбработкаОповещенияПодборНоменклатуры, РежимОткрытия);
		
КонецПроцедуры

&НаСервере
Функция ПодготовитьДанныеДляРегистрацииНоменклатуры()
	
	ТаблицаДляПроверки = Объект.Марки.Выгрузить(, "GTINВерхнегоУровня, Номенклатура, ВидУпаковки");
	ТаблицаДляПроверки.Свернуть("GTINВерхнегоУровня, Номенклатура, ВидУпаковки");
	
	ШтрихкодыКСопоставлению = Новый Массив();
	СообщенияОбОшибках = Новый Соответствие();
	Для Каждого ЭлементМассива Из ТаблицаДляПроверки Цикл
		Если ЭлементМассива.ВидУпаковки = ПредопределенноеЗначение("Перечисление.ВидыУпаковокИСМПТК.Групповая")
			Или ЭлементМассива.ВидУпаковки = ПредопределенноеЗначение("Перечисление.ВидыУпаковокИСМПТК.Потребительская") Тогда
			//Нужно проверить: если это входящий АПП и в момент получения некоторые ШК товаров из этого документа
			//не были зар-ны в базе, в ТЧ Марки поле Номенклатура будет пустым даже после регистрации этих ШК.
			//Поэтому дополнительно проверяем по регистру.
			ЕАН = РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйКлиентСервер.EANПоGTIN(ЭлементМассива.GTINВерхнегоУровня);
			ДанныеНоменклатуры = ПолучитьНоменклатуруПоШтрихкоду(ЕАН, СообщенияОбОшибках);
			Если Не ДанныеНоменклатуры = Неопределено
				И ЗначениеЗаполнено(ДанныеНоменклатуры.Номенклатура) Тогда 
				//Этот ШК не нужно регистрировать
				Продолжить;
			КонецЕсли;			
			ДанныеШтрихкода = Новый Структура("Количество, Штрихкод", 1, РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйКлиентСервер.EANПоGTIN(ЭлементМассива.GTINВерхнегоУровня));
			ШтрихкодыКСопоставлению.Добавить(ДанныеШтрихкода);
		КонецЕсли;
	КонецЦикла;
	Если Не СообщенияОбОшибках.Количество() = 0 Тогда
		Для Каждого СообщениеОшибка Из СообщенияОбОшибках Цикл 
			ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(СообщениеОшибка.Значение);
		КонецЦикла;
	КонецЕсли;
	
	Возврат ШтрихкодыКСопоставлению;
	
КонецФункции

&НаКлиенте
Процедура ПодборНоменклатурыИРегистрацииШтрихкодовПослеЗакрытияФормы(ИсходныеДанные, ДополнительныеПараметры = Неопределено) Экспорт

	Если Не ИсходныеДанные.Свойство("ШтрихкодыНоменклатуры") Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ИсходныеДанные.ШтрихкодыНоменклатуры.Количество() = 0 Тогда
		Если Объект.Направление = ПредопределенноеЗначение("Перечисление.НаправленияДокументовИСМПТК.Исходящий") Тогда
			Если ИсходныеДанные.ОтложенныеТовары.Количество() = 0 Тогда 
				//Все ШК были успешно отработаны, заполняем полностью
				Для Каждого НовыйШтрикход Из ИсходныеДанные.ШтрихкодыНоменклатуры Цикл
					Номенклатура = НовыйШтрикход.Номенклатура;
					Штрихкод 	 = НовыйШтрикход.Штрихкод;
					
					ОбработатьСтрокиТаблицыПослеПодбораНаСервере(Номенклатура, Штрихкод);
					Модифицированность = Истина;
				КонецЦикла;
			Иначе
				//Некоторые товары (КМ) не были подобраны, их заполнять не нужно. Выполняем проверки и исключаем такие ШК
				ШтрихкодыДляИсключения = Новый Массив();
				Для Каждого ИсключаемыйШК Из ИсходныеДанные.ОтложенныеТовары Цикл
					ШтрихкодыДляИсключения.Добавить(ИсключаемыйШК.Штрихкод);
				КонецЦикла;

				Для Каждого НовыйШтрикход Из ИсходныеДанные.ШтрихкодыНоменклатуры Цикл
					Номенклатура = НовыйШтрикход.Номенклатура;
					Штрихкод 	 = НовыйШтрикход.Штрихкод;
					Если ШтрихкодыДляИсключения.Найти(Штрихкод) = Неопределено Тогда
						ОбработатьСтрокиТаблицыПослеПодбораНаСервере(Номенклатура, Штрихкод);
						Модифицированность = Истина;	
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		Иначе
			ЭтаФорма.Прочитать();
		КонецЕсли;
	КонецЕсли;
	
	СформироватьДеревоКодовМаркировки();
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьСтрокиТаблицыПослеПодбораНаСервере(Номенклатура, Штрихкод)
	
	GTINВерхнегоУровня = РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйКлиентСервер.GTINПоШтрихкодуEAN(Штрихкод);
	НайденныеСтрокиТаблицы = Объект.Марки.НайтиСтроки(Новый Структура("GTINВерхнегоУровня", GTINВерхнегоУровня));
	
	Для Каждого Строка Из НайденныеСтрокиТаблицы Цикл
		Строка.Номенклатура = Номенклатура;
	КонецЦикла;
  	
КонецПроцедуры

#КонецОбласти

#Область ТранспортныеКМ

&НаКлиенте
Процедура РедактироватьСтрокиТранспортныеКоды(Команда)
	
	//1. Просим записать документ
	//2. Перебираем ТЧ Марки:
	//   отбираем все строки с транспортными и групповыми кодами.
	//3. Открываем форму обработки ПоискНоменклатурыПоШтрихкоду с передачей параметра Операция = "РаботаСТранспортнымиКодами"
	//4. В форме можно указать номенклатуру, а также GTIN. 
	//5. В обработчике события закрытия формы обработки дозаполнеям ТЧ Марок, модифицируем документ, перестраиваем дерево кодов.
	
	Если Объект.Марки.Количество() = 0 Тогда
		ТексСообщения = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияВДокументеНетДанныхКодовМаркировки();
		ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТексСообщения);
		Возврат;
	КонецЕсли;
	
	//Проверяем, записан ли документ
	ТекстВопроса = "";
	Если НЕ ЗначениеЗаполнено(ЭтаФорма.Параметры.Ключ) ИЛИ ЭтаФорма.Модифицированность Тогда
		ТекстВопроса = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияВопросЗаписбДокументаПередНачаломРегистрацииШтрихкода();
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекстВопроса) Тогда
		
		Режим = РежимДиалогаВопрос.ДаНет;
		Оповещение   = Новый ОписаниеОповещения("ПослеЗакрытияВопросаРедактироватьСтрокиТранспортныеКоды", ЭтотОбъект);
		ПоказатьВопрос(Оповещение, ТекстВопроса, Режим, 0);
		
	Иначе
		
		//Переходим к отбору упаковок
		ПродолжитьРедактироватьСтрокиТранспортныеКоды();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияВопросаРедактироватьСтрокиТранспортныеКоды(Результат, Параметры) Экспорт

	Если Результат = КодВозвратаДиалога.Да Тогда
		
		Попытка
			// выполняем запись документа
			ПараметрыЗаписи = Новый Структура("РежимЗаписи", РежимЗаписиДокумента.Запись);
			Если ЭтаФорма.Записать(ПараметрыЗаписи) Тогда
				//Переходим к отбору упаковок
				ПродолжитьРедактироватьСтрокиТранспортныеКоды();
			КонецЕсли;
			
		Исключение
			
			ТекстСообщения = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияНеУдалосьЗаписатьДокументМаркировки()
			 			   + Символы.ПС
						   + КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
			ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения, , , "Форма.Объект");
			
		КонецПопытки;
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПродолжитьРедактироватьСтрокиТранспортныеКоды()
	
	//Отбираем из ТЧ Марки все строки, у которых не заполнен GTIN, либо заполнен некорректно, либо заполнен, но не заполнена номенклатура:
	//для таких позиций необходимо сформировать список штрихкодов к указанию данных вручную.
	ШтрихкодыКСопоставлению = ПодготовитьДанныеДляРедактированияСтрокТранспортныхУпаковок();
	
	//Открываем форму подбора и регистрации с передачей неопознанных штрихкодов
	ДанныеДляСопоставленияНоменклатуры = Новый Структура(); //передается в параметрах открытия формы подбора
	Операция = "РаботаСТранспортнымиКодами";
			
	ДанныеДляСопоставленияНоменклатуры.Вставить("ШтрихкодыКСопоставлению", ШтрихкодыКСопоставлению); 
	
	ПараметрыОткрытияФормы = Новый Структура("ДанныеДляСопоставленияНоменклатуры, Операция, НеизвестныеШтрихкоды, СтруктураКодовМаркировки, Направление", ДанныеДляСопоставленияНоменклатуры, Операция, ШтрихкодыКСопоставлению, Неопределено,  Объект.Направление);
	ОбработкаОповещенияПодборНоменклатуры = Новый ОписаниеОповещения("РедактированиеСтрокТранспортныхКодовПослеЗакрытияФормы", ЭтотОбъект);
	РежимОткрытия = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
	ОткрытьФорму("Обработка.РозничноеВыбытиеМаркированнойПродукцииИСМПТК.Форма.ПоискНоменклатурыПоШтрихкоду", ПараметрыОткрытияФормы, ЭтотОбъект,,,, ОбработкаОповещенияПодборНоменклатуры, РежимОткрытия);
		
КонецПроцедуры

&НаСервере
Функция ПодготовитьДанныеДляРедактированияСтрокТранспортныхУпаковок()
	
	ШтрихкодыКСопоставлению = Новый Массив();
	
	//1. Обрабатываем транспортные коды
	ШтрихкодыКСопоставлениюТранспортные = Новый Массив();	
	ПараметрыОтбора = Новый Структура("ВидУпаковки", ПредопределенноеЗначение("Перечисление.ВидыУпаковокИСМПТК.Логистическая"));
	ТаблицаУпаковок = Объект.Марки.НайтиСтроки(ПараметрыОтбора);
	
	СообщенияОбОшибках = Новый Соответствие();
	Для Каждого ЭлементМассива Из ТаблицаУпаковок Цикл
		
		ДанныеУпаковки = Новый Структура();
		ДанныеУпаковки.Вставить("Штрихкод", 	ЭлементМассива.КодИдентификации); 
		ДанныеУпаковки.Вставить("Номенклатура", ЭлементМассива.Номенклатура);
		ДанныеУпаковки.Вставить("GTIN", 	    ЭлементМассива.GTIN);
		ДанныеУпаковки.Вставить("Количество",   ЭлементМассива.Количество);
		ДанныеУпаковки.Вставить("ВидПродукции", ЭлементМассива.ВидПродукции);
		ДанныеУпаковки.Вставить("ВидУпаковки",  ЭлементМассива.ВидУпаковки);
		
		ДанныеПоШтрихкоду = ОбщегоНазначенияИСМПТКПереопределяемый.ПолучитьДанныеНоменклатурыИзРегистраШтрихкодовПоШтрихкоду(, ЭлементМассива.EAN, ЭлементМассива.Номенклатура, СообщенияОбОшибках); 
		Если НЕ ДанныеПоШтрихкоду = Неопределено Тогда
			ДанныеУпаковки.Вставить("Характеристика", ДанныеПоШтрихкоду.Характеристика);
		Иначе
			ДанныеУпаковки.Вставить("Характеристика", "");
		КонецЕсли;
			
		ШтрихкодыКСопоставлениюТранспортные.Добавить(ДанныеУпаковки);
		
	КонецЦикла;
	Если Не СообщенияОбОшибках.Количество() = 0 Тогда
		Для Каждого СообщениеОшибка Из СообщенияОбОшибках Цикл 
			ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(СообщениеОшибка.Значение);
		КонецЦикла;
	КонецЕсли;
	
	//2. Обрабатываем групповые коды
	ШтрихкодыКСопоставлениюГрупповые = Новый Массив();	
	ПараметрыОтбора = Новый Структура("ВидУпаковки", ПредопределенноеЗначение("Перечисление.ВидыУпаковокИСМПТК.Групповая"));
	ТаблицаУпаковок = Объект.Марки.НайтиСтроки(ПараметрыОтбора);
		
	Для Каждого ЭлементМассива Из ТаблицаУпаковок Цикл
		
		ДанныеУпаковки = Новый Структура();
		ДанныеУпаковки.Вставить("Штрихкод", 	ЭлементМассива.КодИдентификации); 
		ДанныеУпаковки.Вставить("Номенклатура", Неопределено);  //Для групповых упаковок Номенклатура в данном случае не важна, т.к. она относится к верхнему уровню, а сейчас работаем с нижним (вложенный товар)
		ДанныеУпаковки.Вставить("GTIN", 	    ЭлементМассива.GTIN);
		ДанныеУпаковки.Вставить("Количество",   ЭлементМассива.Количество);
		ДанныеУпаковки.Вставить("ВидПродукции", ЭлементМассива.ВидПродукции);
		ДанныеУпаковки.Вставить("Характеристика", "");
		ДанныеУпаковки.Вставить("ВидУпаковки",  ЭлементМассива.ВидУпаковки);
					
		ШтрихкодыКСопоставлениюГрупповые.Добавить(ДанныеУпаковки);
		
	КонецЦикла;
	
	//3.Формируем общие данные
	ШтрихкодыКСопоставлению.Добавить(ШтрихкодыКСопоставлениюТранспортные);
	ШтрихкодыКСопоставлению.Добавить(ШтрихкодыКСопоставлениюГрупповые);
	
	Возврат ШтрихкодыКСопоставлению;
	
КонецФункции

&НаКлиенте
Процедура РедактированиеСтрокТранспортныхКодовПослеЗакрытияФормы(ИсходныеДанные, ДополнительныеПараметры = Неопределено) Экспорт

	Если Не ИсходныеДанные.Свойство("ШтрихкодыНоменклатуры") Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ИсходныеДанные.ШтрихкодыНоменклатуры.Количество() = 0 Тогда
		Если Объект.Направление = ПредопределенноеЗначение("Перечисление.НаправленияДокументовИСМПТК.Исходящий") Тогда
			ЗаполнитьТаблицуМарок(ИсходныеДанные.ШтрихкодыНоменклатуры);
			Модифицированность = Истина;
		Иначе
			ЭтаФорма.Прочитать();
		КонецЕсли;
	КонецЕсли;
	
	СформироватьДеревоКодовМаркировки();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТаблицуМарок(МассивДанныхУпаковок)
	
	Для Каждого Элемент Из МассивДанныхУпаковок Цикл
		
		КодИдентификации = Элемент.КодИдентификации;
		ДанныеУпаковки   = Элемент.ДанныеУпаковки;
		
		ИзменилсяИдентификаторКода = ?(Элемент.Свойство("ИзменилсяИдентификаторКода"), Элемент.ИзменилсяИдентификаторКода, Ложь);
		ПреобразованныйКод = КодИдентификации; //этот код будет использован для перезаполнения данных в таблице документа
		Если ИзменилсяИдентификаторКода Тогда
			//Было выполнено преобразование формата транспортного кода SSCC (18 <> 20 символов)
			//Возвращаем исходное значение, чтобы найти нужную строку в таблице документа
			Если СтрДлина(КодИдентификации) = 18 Тогда
				КодИдентификации = "00" + КодИдентификации;
			ИначеЕсли СтрДлина(КодИдентификации) = 20 Тогда
				КодИдентификации = Сред(КодИдентификации, 3);
			КонецЕсли;
		КонецЕсли;
				
		НайденныеСтрокиТаблицы = Объект.Марки.НайтиСтроки(Новый Структура("КодИдентификации", КодИдентификации));
		Для Каждого Строка Из НайденныеСтрокиТаблицы Цикл
			Если Строка.ВидУпаковки = ПредопределенноеЗначение("Перечисление.ВидыУпаковокИСМПТК.Логистическая") Тогда
				ЗаполнитьЗначенияСвойств(Строка, ДанныеУпаковки);
				Если ИзменилсяИдентификаторКода Тогда
					Строка.КодИдентификации = ПреобразованныйКод;
					Строка.КодМаркировки	= РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйКлиентСервер.ШтрихкодВBase64(ПреобразованныйКод);
				КонецЕсли;
			Иначе
				ЗаполнитьЗначенияСвойств(Строка, ДанныеУпаковки,, "Номенклатура"); //Для групповой Ном-ра заполняется по верхнему уровню, а здесь обрабатывается нижний (вложенные товары)
			КонецЕсли;
		КонецЦикла;
		
	КонецЦикла;	
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ПроверкаСостоянияКодаНаСервере

&НаКлиенте
Процедура ПроверитьСостояниеКодовНаСервере(Команда)
	
	//Проверяем данные таблицы
	Если Объект.Марки.Количество() = 0 Тогда
		ТекстОшибки = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияВТаблицеМаркиОтсутствуютКодыМаркировки(); 
		ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстОшибки);
		Возврат;
	КонецЕсли;

	Если Не ЗначениеЗаполнено(Объект.Организация) Тогда
		ТекстОшибки = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияНеЗаполненаОрганизацияКомандаПроверитьСостояниеКМ();
		ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстОшибки);
		Возврат;
	КонецЕсли;
	
	ТокенАвторизацииВрем = Неопределено;
	ЗавершениеПроверитьСостояниеКодовНаСервере = Новый ОписаниеОповещения("ЗавершениеПроверитьСостояниеКодовНаСервере", ЭтаФорма);
	ПолучитьКлючАвторизации(ЗавершениеПроверитьСостояниеКодовНаСервере, Истина);
	
КонецПроцедуры

//Выполнить запрос состояния КМ с сервера списком.
//Используется из команд ручной проверки статусов, загрузки из файла, ТСД и Мобильного приложения.
&НаСервере
Процедура ЗавершениеПроверитьСостояниеКодовНаСервере(РезультатВыполнения, Параметры) Экспорт
	
	ТокенАвторизацииВрем = ?(ЗначениеЗаполнено(РезультатВыполнения), РезультатВыполнения, Неопределено);
	
	//Если по какой-то причине не удалось выполнить получение Токена, то и запрос на проверку статуса КМ не выполнялся,
	//об этом нужно предупредить и отметить непроверенные коды.
	Если ТокенАвторизацииВрем = Неопределено Тогда 
		ТекстСообщения = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияНевозможноВыполнитьПроверкуСтатусаКМ_ВФоне();
		ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	ЗапроситьДанныеОСостоянииКодовСписком(ТокенАвторизацииВрем);
	
КонецПроцедуры

&НаСервере
Процедура ЗапроситьДанныеОСостоянииКодовСписком(ТокенАвторизации = Неопределено)
	
	МассивКМ = Новый Массив();
	Для Каждого СтрокаМарка Из Объект.Марки Цикл
		МассивКМ.Добавить(СтрокаМарка.КодИдентификации);	
	КонецЦикла;
	
	ОтветСервераСостояниеКМ = ИнтеграцияИСМПТК.ЗапроситьДанныеОСостоянииКМ(МассивКМ, Объект.Организация, ТокенАвторизации);
	ОбработатьОтветСервераПоСостояниюКМ(МассивКМ, ОтветСервераСостояниеКМ);	
	
КонецПроцедуры

//Выполнить запрос состояния конкретного КМ при его добавлении.
//
&НаСервере
Процедура ЗавершениеПроверитьСостояниеКМПриДобавленииНаСервере(РезультатВыполнения, Параметры) Экспорт
	
	ТокенАвторизацииВрем = ?(ЗначениеЗаполнено(РезультатВыполнения), РезультатВыполнения, Неопределено);
	
	//Если по какой-то причине не удалось выполнить получение Токена, то и запрос на проверку статуса КМ не выполнялся,
	//об этом нужно предупредить и отметить непроверенные коды.
	Если ТокенАвторизацииВрем = Неопределено Тогда 
		ТекстСообщения = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияНевозможноВыполнитьПроверкуСтатусаКМ_ВФоне();
		ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	МассивКМ = Новый Массив();
	МассивКМ.Добавить(Параметры.КодИдентификации);
	
	ОтветСервераСостояниеКМ = ИнтеграцияИСМПТК.ЗапроситьДанныеОСостоянииКМ(МассивКМ, Объект.Организация, ТокенАвторизацииВрем);
	ОбработатьОтветСервераПоСостояниюКМ(МассивКМ, ОтветСервераСостояниеКМ);
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьОтветСервераПоСостояниюКМ(МассивКМ, ОтветСервераСостояниеКМ)
	
	НовоеСоответствиеСтатусов = Неопределено;
	ИнтеграцияИСМПТК.ОбработатьОтветСервераПоСостояниюКМ_Общая(ЭтаФорма, МассивКМ, ОтветСервераСостояниеКМ, "АктПриемаПередачи", НовоеСоответствиеСтатусов);
	
	//Заполняем статус проверки в дереве по данным запроса сервера
	ЭлементыВетвиДерева = ДеревоМаркированнойПродукции.ПолучитьЭлементы();
	Для Каждого ЭлементДерева Из ЭлементыВетвиДерева Цикл
		Если Не ЗначениеЗаполнено(ЭлементДерева.КодИдентификации) Тогда
			Для Каждого ЭлементНижнийУровень Из ЭлементДерева.ПолучитьЭлементы() Цикл
				Если Не ЭлементНижнийУровень.Ошибочный Тогда //Значение по умолчанию - ложь. Если стоит Истина, значит код уже проверен - сохранеям этот признак.
					ЭлементНижнийУровень.Ошибочный = ?(НовоеСоответствиеСтатусов.Получить(ЭлементНижнийУровень.КодИдентификации) = Неопределено, Ложь, НовоеСоответствиеСтатусов.Получить(ЭлементНижнийУровень.КодИдентификации));
				КонецЕсли;
			КонецЦикла;
		Иначе
			Если Не ЭлементДерева.Ошибочный Тогда 
				ЭлементДерева.Ошибочный = ?(НовоеСоответствиеСтатусов.Получить(ЭлементДерева.КодИдентификации) = Неопределено, Ложь, НовоеСоответствиеСтатусов.Получить(ЭлементДерева.КодИдентификации));
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
			
КонецПроцедуры

&НаКлиенте
Процедура СообщитьОНевозможностиВыполнитьПроверкуСтатусаКМ(РежимЗапроса) Экспорт

	Если РежимЗапроса = "Ручной" Тогда
		ТекстСообщения = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияНевозможноВыполнитьПроверкуСтатусаКМ_Вручную();
	Иначе	
		ТекстСообщения = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияНевозможноВыполнитьПроверкуСтатусаКМ_ВФоне();
	КонецЕсли;
	ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
	
КонецПроцедуры

#КонецОбласти

#Область ЭтапыОформления

&НаКлиенте
Процедура ЭтапОформленияПриИзменении(Элемент)

	УправлениеФормой();
	
КонецПроцедуры

&НаКлиенте
Процедура ЭтапОформленияОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

#КонецОбласти

#Область СвязьСАктамиПриемаПередачи

&НаКлиенте
Процедура ЗаполнитьСведенияОСвязанныхДокументах()
	
	ЭтаФорма.ПредставлениеАктКорректировка = Неопределено;
	ЭтаФорма.ПредставлениеАктИсходный 	   = Неопределено;
	ЭтаФорма.ПредставлениеУведомлениеОРасхождении = Неопределено;
	
	Если Объект.ТипАкта = ПредопределенноеЗначение("Перечисление.ВидыДокументаИСМПТК.Исходный") Тогда
		Если ЗначениеЗаполнено(Объект.Идентификатор) Тогда
			Если ЗначениеЗаполнено(Объект.ИдентификаторАППИсправленный) Тогда
				// Этим способом ищем связанный документ, когда в текущем документе у нас заполнен его идентификатор.
				СсылкаИсправленныйАПП = НайтиДокументПоИдентификатору(ОбщегоНазначенияИСМПТКВызовСервера.ИмяДокументаАктПриемаПередачиИСМПТК(), Объект.ИдентификаторАППИсправленный);
			Иначе
				// Этим способом ищем связанный документ, когда в текущем документе его идентификатор не заполнен, 
				// т.к. связанный документ его еще не получил (он создан в базе, но не отправлен на сервер).
				// При этом искать корректировку имеет смысл только для уже зарегистрированного АПП исходного.
				СсылкаИсправленныйАПП = НайтиДокументПоИдентификаторуОтОбратного("ИдентификаторАППИсправленный");
			КонецЕсли;
			Если Не ЗначениеЗаполнено(СсылкаИсправленныйАПП) Тогда
				СтруктураПоиска = Новый Структура("ИмяДокумента, ИмяПараметра, ВидДокумента", 
												  ОбщегоНазначенияИСМПТКВызовСервера.ИмяДокументаАктПриемаПередачиИСМПТК(),
												  "НомерИСМПТ",
												  ПредопределенноеЗначение("Перечисление.ВидыДокументаИСМПТК.Исправленный")); 
				СсылкаИсправленныйАПП = НайтиДокументПоНомеру(СтруктураПоиска, Объект.НомерИСМПТ);
			КонецЕсли;
			СформироватьПредставлениеСвязанногоДокумента(ЭтаФорма, СсылкаИсправленныйАПП, "ПредставлениеАктКорректировка");
		КонецЕсли;
	Иначе
		Если ЗначениеЗаполнено(Объект.ИдентификаторАПППервичный) Тогда
			СсылкаИсходныйАПП = НайтиДокументПоИдентификатору(ОбщегоНазначенияИСМПТКВызовСервера.ИмяДокументаАктПриемаПередачиИСМПТК(), Объект.ИдентификаторАПППервичный);
		Иначе
			СсылкаИсходныйАПП = НайтиДокументПоИдентификаторуОтОбратного("ИдентификаторАПППервичный");
		КонецЕсли;
		Если Не ЗначениеЗаполнено(СсылкаИсходныйАПП) Тогда
			СтруктураПоиска = Новый Структура("ИмяДокумента, ИмяПараметра, ВидДокумента", 
											  ОбщегоНазначенияИСМПТКВызовСервера.ИмяДокументаАктПриемаПередачиИСМПТК(),
											  "НомерИСМПТ",
											  ПредопределенноеЗначение("Перечисление.ВидыДокументаИСМПТК.Исходный")); 
			СсылкаИсходныйАПП = НайтиДокументПоНомеру(СтруктураПоиска, Объект.РегистрационныйНомерСвязанногоАкта);
		КонецЕсли;
		СформироватьПредставлениеСвязанногоДокумента(ЭтаФорма, СсылкаИсходныйАПП, "ПредставлениеАктИсходный");
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.ИдентификаторУведОРасхождениях) Тогда
		СсылкаУведОРасхождениях = НайтиДокументПоИдентификатору(ОбщегоНазначенияИСМПТКВызовСервера.ИмяДокументаУведомлениеОРасхожденииИСМПТК(), Объект.ИдентификаторУведОРасхождениях);
	Иначе
		СсылкаУведОРасхождениях = НайтиДокументПоИдентификаторуОтОбратного("ИдентификаторУведОРасхождениях");
	КонецЕсли;
	СформироватьПредставлениеСвязанногоДокумента(ЭтаФорма, СсылкаУведОРасхождениях, "ПредставлениеУведомлениеОРасхождении");
	
	УправлениеФормой();
	
КонецПроцедуры

&НаСервере
Функция НайтиДокументПоИдентификатору(ИмяДокумента, ИдентификаторДокумента)
	
	Возврат РаботаСДокументамиИСМПТК.НайтиДокументПоИдентификаторуДляУстановкиСвязи(ИмяДокумента, ИдентификаторДокумента);
	
КонецФункции 

&НаСервере
Функция НайтиДокументПоИдентификаторуОтОбратного(ИмяРеквизитаИдентификатора)
	
	СтруктураДанныхДляПоиска = РаботаСДокументамиИСМПТК.ПолучитьПустуюСтруктураДляПоискаДокументаПоИдентификаторуОтОбратного();
	
	СтруктураДанныхДляПоиска.ИдентификаторДокумента = Объект.Идентификатор;
	
	Если ИмяРеквизитаИдентификатора = "ИдентификаторАППИсправленный" Тогда
		СтруктураДанныхДляПоиска.ИмяДокументаДляЗапроса	  = ОбщегоНазначенияИСМПТКВызовСервера.ИмяДокументаАктПриемаПередачиИСМПТК();
		СтруктураДанныхДляПоиска.ИмяРеквизитаВидДокумента = "ТипАкта";
		СтруктураДанныхДляПоиска.ОтборПоВидуДокумента		= Истина;
		СтруктураДанныхДляПоиска.ИмяРеквизитаИдентификатора = "ИдентификаторАПППервичный";
		СтруктураДанныхДляПоиска.НаправлениеДокументаДляЗапроса = Объект.Направление;
		СтруктураДанныхДляПоиска.ВидДокументаДляЗапроса = ПредопределенноеЗначение("Перечисление.ВидыДокументаИСМПТК.Исправленный");
		
	ИначеЕсли ИмяРеквизитаИдентификатора = "ПредставлениеАктИсходный" Тогда
		СтруктураДанныхДляПоиска.ИмяДокументаДляЗапроса	  = ОбщегоНазначенияИСМПТКВызовСервера.ИмяДокументаАктПриемаПередачиИСМПТК();
		СтруктураДанныхДляПоиска.ИмяРеквизитаВидДокумента = "ТипАкта";
		СтруктураДанныхДляПоиска.ОтборПоВидуДокумента		= Истина;
		СтруктураДанныхДляПоиска.ИмяРеквизитаИдентификатора = "ИдентификаторАППИсправленный";
		СтруктураДанныхДляПоиска.НаправлениеДокументаДляЗапроса = Объект.Направление;
		СтруктураДанныхДляПоиска.ВидДокументаДляЗапроса = ПредопределенноеЗначение("Перечисление.ВидыДокументаИСМПТК.Исходный");
		
	Иначе
	    СтруктураДанныхДляПоиска.ИмяДокументаДляЗапроса	  = ОбщегоНазначенияИСМПТКВызовСервера.ИмяДокументаУведомлениеОРасхожденииИСМПТК();
		СтруктураДанныхДляПоиска.ИмяРеквизитаВидДокумента = Неопределено;
		СтруктураДанныхДляПоиска.ОтборПоВидуДокумента	  = Ложь;
		Если Объект.ТипАкта = ПредопределенноеЗначение("Перечисление.ВидыДокументаИСМПТК.Исходный") Тогда
			СтруктураДанныхДляПоиска.ИмяРеквизитаИдентификатора = "ИдентификаторАПППервичный";
		Иначе
			СтруктураДанныхДляПоиска.ИмяРеквизитаИдентификатора = "ИдентификаторАППИсправленный";
		КонецЕсли;
		Если Объект.Направление = ПредопределенноеЗначение("Перечисление.НаправленияДокументовИСМПТК.Исходящий") Тогда
			СтруктураДанныхДляПоиска.НаправлениеДокументаДляЗапроса = ПредопределенноеЗначение("Перечисление.НаправленияДокументовИСМПТК.Входящий");
		Иначе
			СтруктураДанныхДляПоиска.НаправлениеДокументаДляЗапроса = ПредопределенноеЗначение("Перечисление.НаправленияДокументовИСМПТК.Исходящий");
		КонецЕсли;
		СтруктураДанныхДляПоиска.ВидДокументаДляЗапроса = Неопределено;
	КонецЕсли;

	Возврат РаботаСДокументамиИСМПТК.НайтиСвязанныйДокументПоИдентификаторуОтОбратного(СтруктураДанныхДляПоиска);
	
КонецФункции

&НаСервере
Функция НайтиДокументПоНомеру(СтруктураПоиска, НомерДляПоиска)
	
	Возврат РаботаСДокументамиИСМПТК.НайтиДокументИСПоНомеру(НомерДляПоиска, СтруктураПоиска);
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура СформироватьПредставлениеСвязанногоДокумента(Форма, СсылкаДокумент, ИмяЭлемента)
	
	Если ЗначениеЗаполнено(СсылкаДокумент) Тогда
		Форма[ИмяЭлемента] = СсылкаДокумент;
		Если ОбщегоНазначенияИСМПТКВызовСервера.ЗначениеРеквизитаОбъекта(СсылкаДокумент, "ПометкаУдаления") Тогда
			Форма.Элементы[ИмяЭлемента].ЦветТекста = ОбщегоНазначенияИСМПТККлиентСервер.ЦветКрасный();
		Иначе
			Форма.Элементы[ИмяЭлемента].ЦветТекста = ОбщегоНазначенияИСМПТККлиентСервер.ЦветСиний();
		КонецЕсли;
		
		Если ИмяЭлемента = "ПредставлениеУведомлениеОРасхождении" Тогда
			Форма.УведомлениеОРасхожденияхНомерИСМПТ = ИнтеграцияИСМПТКПереопределяемый.ЗначениеРеквизитаОбъекта(СсылкаДокумент, "НомерИСМПТ"); 
		ИначеЕсли ИмяЭлемента = "ПредставлениеАктКорректировка" Тогда
			Форма.АктКорректировкаНомерИСМПТ = ИнтеграцияИСМПТКПереопределяемый.ЗначениеРеквизитаОбъекта(СсылкаДокумент, "НомерИСМПТ"); 
		КонецЕсли;
	Иначе
		Форма[ИмяЭлемента] = РаботаСТекстамиИСМПТККлиентСервер.ПредставлениеНеНайден();
		Форма.Элементы[ИмяЭлемента].ЦветТекста = ОбщегоНазначенияИСМПТККлиентСервер.ЦветКрасный();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеАктИсходныйНажатие(Элемент, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(ПредставлениеАктИсходный) Тогда
		СтандартнаяОбработка = Ложь;
		ПоказатьЗначение(, СсылкаИсходныйАПП);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеАктКорректировкаНажатие(Элемент, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(ПредставлениеАктКорректировка) Тогда
		СтандартнаяОбработка = Ложь;
		ПоказатьЗначение(, СсылкаИсправленныйАПП);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеУведомлениеОРасхожденииНажатие(Элемент, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(ПредставлениеУведомлениеОРасхождении) Тогда
		СтандартнаяОбработка = Ложь;
		ПоказатьЗначение(, СсылкаУведОРасхождениях);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьПолейСвязанныхДокументов()

	Первичный = Объект.ТипАкта = ПредопределенноеЗначение("Перечисление.ВидыДокументаИСМПТК.Исходный");
	
	// Информация об АПП исходном
	ОбщегоНазначенияИСМПТККлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "СвязанныйАктПриемаПередачиИсходный", 
																	   "Видимость", Не Первичный И ((ЗначениеЗаполнено(ПредставлениеАктИсходный) 
																					И НЕ ПредставлениеАктИсходный = РаботаСТекстамиИСМПТККлиентСервер.ПредставлениеНеНайден()) 
																					ИЛИ ЗначениеЗаполнено(Объект.ИдентификаторАПППервичный)));
	// Информация об АПП исправленном
	ОбщегоНазначенияИСМПТККлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "СвязанныйАктПриемаПередачиИсправленный",
																	   "Видимость", Первичный И ((ЗначениеЗаполнено(ПредставлениеАктКорректировка) 
																					И НЕ ПредставлениеАктКорректировка = РаботаСТекстамиИСМПТККлиентСервер.ПредставлениеНеНайден())
																					ИЛИ ЗначениеЗаполнено(Объект.ИдентификаторАППИсправленный)));
	// Информация об УОР
	ОбщегоНазначенияИСМПТККлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "СвязанноеУведомлениеОРасхождениях",
																	   "Видимость", (ЗначениеЗаполнено(ПредставлениеУведомлениеОРасхождении) 
																					И НЕ ПредставлениеУведомлениеОРасхождении = РаботаСТекстамиИСМПТККлиентСервер.ПредставлениеНеНайден()) 
																					ИЛИ ЗначениеЗаполнено(Объект.ИдентификаторУведОРасхождениях));
	
КонецПроцедуры

#КонецОбласти

#Область ПодключаемыеКоманды

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	
	ОбщегоНазначенияИСМПТККлиентПереопределяемый.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
	
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат) Экспорт
	
	ОбщегоНазначенияИСМПТКПереопределяемый.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	
	ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.ОбновитьКоманды(ЭтотОбъект, Объект);
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти

#Область ЗаполнениеТоварнойГруппы

&НаКлиенте
Процедура ТоварнаяГруппаПриИзменении(Элемент)
	
	УправлениеФормой();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТоварнуюГруппуВНовомДокументе() 
	
	ВключенУчетТабака = ОбщегоНазначенияИСМПТК.ПроверитьЗначениеКонстанты("ВестиУчетМаркируемогоТабакаИСМПТК");
	ВключенУчетОбуви  = ОбщегоНазначенияИСМПТК.ПроверитьЗначениеКонстанты("ВестиУчетМаркируемойОбувиИСМПТК");
	
	ВключенаПередачаЦен = ИнтеграцияИСМПТККлиентСервер.ПередаватьЦеновыеПоказателиВДокументахИСМПТК();
	
	Если ВключенУчетОбуви И ВключенУчетТабака Тогда 
		Если ВключенаПередачаЦен Тогда
			Элементы.ТоварнаяГруппа.РежимВыбораИзСписка = Истина;
			Элементы.ТоварнаяГруппа.СписокВыбора.Очистить();
			Элементы.ТоварнаяГруппа.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ВидыПродукцииИСМПТК.Табачная"));
			Элементы.ТоварнаяГруппа.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ВидыПродукцииИСМПТК.Обувная"));
		КонецЕсли;
	ИначеЕсли НЕ ВключенУчетОбуви И НЕ ВключенУчетТабака Тогда
		
		ТекстСообщения = НСтр("ru = 'Внимание! В базе не включен учет маркировки товарных групп ИС МПТ! Некоторые механизмы документа будут работать некорректно. Настройте учет товарных групп в форме настроек сервиса маркировки.'");	
		ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
		Если ВключенаПередачаЦен Тогда
			Элементы.ТоварнаяГруппа.РежимВыбораИзСписка = Ложь;
			Элементы.ТоварнаяГруппа.СписокВыбора.Очистить();
		КонецЕсли;		
	Иначе
		Если Объект.Ссылка.Пустая() И Не ЗначениеЗаполнено(Объект.ТоварнаяГруппа) Тогда
			Если ВключенУчетОбуви Тогда
				Объект.ТоварнаяГруппа = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИСМПТК.Обувная");
			Иначе
				Объект.ТоварнаяГруппа = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИСМПТК.Табачная");
			КонецЕсли;
		КонецЕсли;
		Элементы.ТоварнаяГруппа.РежимВыбораИзСписка = Ложь;
		Элементы.ТоварнаяГруппа.СписокВыбора.Очистить();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область РаботаСИтогами

&НаКлиенте
Процедура ПересчитатьСуммовыеПоказателиВИтогах(ТолькоТекущуюСтроку = Ложь)
	
	Если Объект.Итоги.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если ТолькоТекущуюСтроку Тогда
		
		ТекущиеДанные = Элементы.Итоги.ТекущиеДанные;
		СтавкаЧислом = ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.ПолучитьСтавкуНДСЧислом(ТекущиеДанные.СтавкаНДС);
		ТекущиеДанные.СтавкаНДСЧисло = СтавкаЧислом;
		
		Если ЗначениеЗаполнено(ТекущиеДанные.Цена) Тогда
			
			ТекущиеДанные.СуммаБезНДС = ТекущиеДанные.Цена * ТекущиеДанные.Количество;
			
			Если СтавкаЧислом = 0 Тогда 
				ТекущиеДанные.СуммаНДС = 0;
			Иначе
				ТекущиеДанные.СуммаНДС = ТекущиеДанные.СуммаБезНДС * СтавкаЧислом / 100;
			КонецЕсли;
			ТекущиеДанные.Сумма = ТекущиеДанные.СуммаНДС + ТекущиеДанные.СуммаБезНДС;			
		КонецЕсли;
		
	Иначе 
		Для Каждого СтрокаТЧ Из Объект.Итоги Цикл
			СтавкаЧислом = ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.ПолучитьСтавкуНДСЧислом(СтрокаТЧ.СтавкаНДС);
			СтрокаТЧ.СтавкаНДСЧисло = СтавкаЧислом;
			Если ЗначениеЗаполнено(СтрокаТЧ.Цена) Тогда
				СтрокаТЧ.СуммаБезНДС = СтрокаТЧ.Цена * СтрокаТЧ.Количество;
						
				Если СтавкаЧислом = 0 Тогда 
					СтрокаТЧ.СуммаНДС = 0;
				Иначе
					СтрокаТЧ.СуммаНДС = СтрокаТЧ.СуммаБезНДС * СтавкаЧислом / 100;
				КонецЕсли;
				СтрокаТЧ.Сумма = СтрокаТЧ.СуммаНДС + СтрокаТЧ.СуммаБезНДС;			
			Иначе
				ТекстСообщения = НСтр("ru = 'В строке №%1 не указана цена, расчет суммовых показателей для этой строки не может быть выполнен в данный момент. Укажите цену в строке.'");
				ТекстСообщения = ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(ТекстСообщения, СтрокаТЧ.НомерСтроки);
				ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);	
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Асинх Процедура ЗаполнитьИтоги(Команда)
	
	//Выполняется в несколько этапов:
	//1. По данным ТЧ Марки с сервера запрашивается состав ГТИН и количество в пачках по каждому из них (с учетом вложенности упаковок);
	//2. По данным ГТИН подбирается номенклатура, из карточки товара заполняется ставка НДС и код ТН ВЭД;
	//3. При наличии документа-основания дополняется информация о ценах;
	//4. При наличии информации о ценах рассчитываются суммы в итогах.
		
	//Проверки на наличие необходимых для обращения к серверу данных
	Если Не ЗначениеЗаполнено(Объект.Организация) Тогда
		ТекстСообщения = НСтр("ru = 'В документе не указана Организация на странице ""Прочее""! Данные организации необходимы для выполнения запроса данных с сервера ИС ЦЭДМ.'");
		ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;
	Если Объект.Марки.Количество() = 0 Тогда
		ТекстСообщения = НСтр("ru = 'В документе отсутствует информация о кодах маркировки, расчет итогов невозможен.'");
		ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
		Если Не Объект.Итоги.Количество() = 0 Тогда
			Объект.Итоги.Очистить();
			Модифицированность = Истина;
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	Если Модифицированность Тогда
		ТекстВопроса = НСтр("ru = 'Для выполнения операции требуется записать документ. Продолжить?'");	
		ЗаполнитьИтогиПослеВопроса = Новый ОписаниеОповещения("ЗаполнитьИтогиПослеВопроса", ЭтаФорма);
		ПоказатьВопрос(ЗаполнитьИтогиПослеВопроса, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	Иначе
		//Получим токен авторизации перед продолжением
		Ждать ИнтеграцияИСМПТККлиент.ПолучитьТокенАвторизации(Объект.Организация, "АктПриемаПередачиИСМПТК");
		ВыполнитьРасчетИтоговыхПоказателей();
		ПересчитатьСуммовыеПоказателиВИтогах();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Асинх Процедура ЗаполнитьИтогиПослеВопроса(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		Попытка
			ЭтотОбъект.Записать();
		Исключение 
			
			Если Объект.Ссылка.Пустая() Тогда
				ПредставлениеПолное = ОбщегоНазначенияИСМПТКВызовСервера.ПолучитьИмяИПредставлениеПоСсылке(Объект.Ссылка).Синоним;
			Иначе
				ПредставлениеПолное = Объект.Ссылка;
			КонецЕсли;
			
			ТекстОшибки = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияОшибкаПриЗаписиДокументаСПараметромСмотриЖурналРегистрации();
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ДанныеДокумента%", ПредставлениеПолное);
			
			ИмяСобытия  = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияИмяСобытияЗаписьДокумента();
			ИмяСобытия  = СтрЗаменить(ИмяСобытия, "%ЗаписываемыйДокумент%", ПредставлениеПолное);
			ОбщегоНазначенияИСМПТКВызовСервера.СоздатьЗаписьЖурналаРегистрации(ИмяСобытия, "Ошибка",,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
			ВызватьИсключение ТекстОшибки;
		КонецПопытки;
		
		Если Объект.ТипАкта = ПредопределенноеЗначение("Перечисление.ВидыДокументаИСМПТК.Исходный") Тогда
			//Получим токен авторизации перед продолжением
			Ждать ИнтеграцияИСМПТККлиент.ПолучитьТокенАвторизации(Объект.Организация, "АктПриемаПередачиИСМПТК");
			ВыполнитьРасчетИтоговыхПоказателей();
		Иначе
			ЗаполнитьИтогиИзПервичногоАктаНаСервере();
		КонецЕсли;
		ПересчитатьСуммовыеПоказателиВИтогах();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ВыполнитьРасчетИтоговыхПоказателей()
	
	ТаблицаПрошлыхЗначений = Объект.Итоги.Выгрузить();
	Объект.Итоги.Очистить();
	
	//Выполняем запрос вложенностей со стороны сервера для получения списка
	//всех GTIN и количества в минимальных единицах
	ТаблицаИтогов = ИнтеграцияИСМПТК.ПолучитьТаблицуКодовGTIN(Объект.Марки.Выгрузить(), Объект.Организация, Истина);

	//Дополняем даныне сервера информацией по номенклатуре
	//и заполняем ТЧ Итоги
	Для Каждого СтрокаТЧ Из ТаблицаИтогов Цикл
		НоваяСтрока = Объект.Итоги.Добавить();
		НоваяСтрока.GTIN = СтрокаТЧ.Ключ;
		НоваяСтрока.Количество = СтрокаТЧ.Значение;
		
		НоваяСтрока.EAN = РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйКлиентСерверПовтИсп.ШтрихкодEANИзGTIN(СтрокаТЧ.Ключ);
		
		ДанныеНоменклатуры = ПолучитьНоменклатуруПоШтрихкоду(НоваяСтрока.EAN);
		Если ТипЗнч(ДанныеНоменклатуры) = Тип("Структура") Тогда
			Номенклатура   = ДанныеНоменклатуры.Номенклатура;
			Характеристика = ДанныеНоменклатуры.Характеристика;
			НоваяСтрока.Номенклатура = Номенклатура;
			НоваяСтрока.Характеристика = Характеристика;
			НоваяСтрока.КодТНВЭД = РаботаСДокументамиИСМПТКПереопределяемый.ПолучитьКодТНВЭДПоНоменклатуре(Номенклатура);
			НоваяСтрока.СтавкаНДС = ОбщегоНазначенияИСМПТКВызовСервера.ПолучитьСтавкуНДСПоНоменклатуре(Номенклатура);
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(Объект.ДокументОснование) Тогда 
			СтарыеДанные = ТаблицаПрошлыхЗначений.НайтиСтроки(Новый Структура("GTIN", НоваяСтрока.GTIN));
			Если Не СтарыеДанные.Количество() = 0 Тогда
				НоваяСтрока.КодТНВЭД  = СтарыеДанные[0].КодТНВЭД;
				НоваяСтрока.СтавкаНДС = СтарыеДанные[0].СтавкаНДС;
				Если Не ЗначениеЗаполнено(НоваяСтрока.Номенклатура) Тогда
					НоваяСтрока.Номенклатура = СтарыеДанные[0].Номенклатура;
				КонецЕсли;
				Если Не ЗначениеЗаполнено(НоваяСтрока.Характеристика) Тогда
					НоваяСтрока.Характеристика = СтарыеДанные[0].Характеристика;
				КонецЕсли;
			КонецЕсли;		
		КонецЕсли;
	КонецЦикла;
	
	//При наличии связанного документа-основания сразу подтягиваем информацию по ценам
	Если ЗначениеЗаполнено(Объект.ДокументОснование) Тогда
		СоответствиеЦен = ПолучитьИнформациюОЦенахИзОснования();
		Для Каждого СтрокаТЧ Из Объект.Итоги Цикл
			ДанныеШК = СоответствиеЦен.Получить(СтрокаТЧ.EAN);
			Если НЕ ДанныеШК = Неопределено Тогда
				СтрокаТЧ.Цена = ДанныеШК.Цена;
				СтрокаТЧ.СтавкаНДС = ДанныеШК.СтавкаНДС;
			Иначе
				ТекстСообщения = НСтр("ru = 'Для GTIN %1 не удалось определить цену по данным документа-основания. Ее необходимо указать самостоятельно.'");
				ТекстСообщения = ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(ТекстСообщения, СтрокаТЧ.GTIN);
				ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);	
			КонецЕсли;
		КонецЦикла;
	Иначе
		Для Каждого СтрокаТЧ Из Объект.Итоги Цикл
			СтарыеДанные = ТаблицаПрошлыхЗначений.НайтиСтроки(Новый Структура("GTIN", СтрокаТЧ.GTIN));
			Если Не СтарыеДанные.Количество() = 0 Тогда
				СтрокаТЧ.Цена = СтарыеДанные[0].Цена;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Модифицированность = Истина;

КонецПроцедуры

&НаСервере
Функция ПолучитьИнформациюОЦенахИзОснования()

	ТаблЗнач = Объект.Итоги.Выгрузить(,"EAN");
	СоответствиеЦен = РаботаСДокументамиИСМПТКПереопределяемый.ПолучитьИнформациюОЦенахИзОснованияИСМПТ(Объект.ДокументОснование, ТаблЗнач);
	Возврат СоответствиеЦен;
	
КонецФункции

&НаКлиенте
Асинх Процедура ЗаполнитьИтогиПоПервичномуАПП(Команда)
	
	//Выполняется в несколько этапов:
	//1. По данным ТЧ Марки с сервера запрашивается состав ГТИН и количество в пачках по каждому из них (с учетом вложенности упаковок);
	//2. По данным ГТИН подбирается номенклатура, из карточки товара заполняется ставка НДС и код ТН ВЭД;
	//3. Из первичного АПП получается информация о ценах, ставках НДС и кодах ТН ВЭД;
	//4. Рассчитываются суммы в итогах.
	
	//Получим токен авторизации перед продолжением
	Ждать ИнтеграцияИСМПТККлиент.ПолучитьТокенАвторизации(Объект.Организация, "АктПриемаПередачиИСМПТК");
	
	Если Модифицированность Тогда
		ТекстВопроса = НСтр("ru = 'Для выполнения операции требуется записать документ. Продолжить?'");	
		ЗаполнитьИтогиПослеВопроса = Новый ОписаниеОповещения("ЗаполнитьИтогиПослеВопроса", ЭтаФорма);
		ПоказатьВопрос(ЗаполнитьИтогиПослеВопроса, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	Иначе
		ЗаполнитьИтогиИзПервичногоАктаНаСервере();
		ПересчитатьСуммовыеПоказателиВИтогах();
	КонецЕсли;
		
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьИтогиИзПервичногоАктаНаСервере()
	
	Объект.Итоги.Очистить();
	
	//Выполняем запрос вложенностей со стороны сервера для получения списка
	//всех GTIN и количества в минимальных единицах
	ТаблицаИтогов = ИнтеграцияИСМПТК.ПолучитьТаблицуКодовGTIN(Объект.Марки.Выгрузить(), Объект.Организация, Истина);
	
	ИтогиПервичногоАПП = РаботаСДокументамиИСМПТК.ПолучитьТаблицуИтоговПервичногоДокумента(Объект.ИдентификаторАПППервичный);
	
	//Дополняем даныне сервера информацией по номенклатуре
	//и заполняем ТЧ Итоги
	Для Каждого СтрокаТЧ Из ТаблицаИтогов Цикл
		НоваяСтрока = Объект.Итоги.Добавить();
		НоваяСтрока.GTIN = СтрокаТЧ.Ключ;
		НоваяСтрока.Количество = СтрокаТЧ.Значение;
		НоваяСтрока.EAN = РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйКлиентСерверПовтИсп.ШтрихкодEANИзGTIN(СтрокаТЧ.Ключ);
		
		СтрокаИзПервичного = ИтогиПервичногоАПП.НайтиСтроки(Новый Структура("GTIN", НоваяСтрока.GTIN));
		Если Не СтрокаИзПервичного.Количество() = 0 Тогда
			НоваяСтрока.Номенклатура = СтрокаИзПервичного[0].Номенклатура;
			НоваяСтрока.Характеристика = СтрокаИзПервичного[0].Характеристика;
			НоваяСтрока.КодТНВЭД = СтрокаИзПервичного[0].КодТНВЭД;
			НоваяСтрока.СтавкаНДС = СтрокаИзПервичного[0].СтавкаНДС;
			НоваяСтрока.СтавкаНДСЧисло = СтрокаИзПервичного[0].СтавкаНДСЧисло;
			НоваяСтрока.Цена = СтрокаИзПервичного[0].Цена;
		КонецЕсли;
	КонецЦикла;
	
	Модифицированность = Истина;

КонецПроцедуры

&НаСервере
Процедура НастроитьВидимостьИтоговыхПолей()
	
	Исходящий 	= Объект.Направление = ПредопределенноеЗначение("Перечисление.НаправленияДокументовИСМПТК.Исходящий");
	НеОтправлен = Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыДокументовИСМПТК.Черновик");
	Первичный 	= Объект.ТипАкта = ПредопределенноеЗначение("Перечисление.ВидыДокументаИСМПТК.Исходный");
	
	ВключенУчетТабака   = ОбщегоНазначенияИСМПТК.ПроверитьЗначениеКонстанты("ВестиУчетМаркируемогоТабакаИСМПТК");
	ВключенУчетОбуви    = ОбщегоНазначенияИСМПТК.ПроверитьЗначениеКонстанты("ВестиУчетМаркируемойОбувиИСМПТК");
	ВключенаПередачаЦен = ИнтеграцияИСМПТККлиентСервер.ПередаватьЦеновыеПоказателиВДокументахИСМПТК();
	ИспользуютсяХарактеристики = ОбщегоНазначенияИСМПТКПереопределяемый.ПроверитьИспользованиеХарактеристик();
	
	//////// Товарная группа ////////
	ОбщегоНазначенияИСМПТККлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ТоварнаяГруппа", "Видимость", (Исходящий Или ЗначениеЗаполнено(Объект.ТоварнаяГруппа)) И ВключенаПередачаЦен);
	ОбщегоНазначенияИСМПТККлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ТоварнаяГруппа", "ТолькоПросмотр", НЕ (ВключенУчетОбуви И ВключенУчетТабака) Или Не Исходящий);
											
	//////// Таблица Итоги ////////
	ОбщегоНазначенияИСМПТККлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГруппаИтоги", "Видимость", ВключенаПередачаЦен);
	ОбщегоНазначенияИСМПТККлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ИтогиХарактеристика", "Видимость", ИспользуютсяХарактеристики);
	
	//Команда расчета итогов в первичном Акте
	ОбщегоНазначенияИСМПТККлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГруппаКомандыРасчетаИтоговПервичный", "Видимость", Исходящий И Первичный);
	ОбщегоНазначенияИСМПТККлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ЗаполнитьИтоги", "Доступность", НеОтправлен);
	
	//Команды расчета итогов в корректировочном Акте
	ОбщегоНазначенияИСМПТККлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГруппаКомандыРасчетаИтоговКорректировка", "Видимость", Исходящий И Не Первичный);
	ОбщегоНазначенияИСМПТККлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ЗаполнитьИтогиКорректировочный", "Доступность", ЗначениеЗаполнено(Объект.ДокументОснование));	
	ОбщегоНазначенияИСМПТККлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ЗаполнитьИтогиПоПервичномуАПП", "Доступность", НеОтправлен);
	
	ОбщегоНазначенияИСМПТККлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "Итоги", "ТолькоПросмотр", (Не Исходящий) ИЛИ (Исходящий И Не НеОтправлен));
									   
КонецПроцедуры

#КонецОбласти