
&НаКлиенте
Перем СоответствиеИдентификаторовРазвернутыхСтрокДерева;

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	Если Параметры.Свойство("ТаблицаКодовМаркировки") Тогда
		ЗаполнитьТаблицуКодовМаркировки(Параметры.ТаблицаКодовМаркировки);
	КонецЕсли;
	
	Если Параметры.Свойство("Организация") Тогда
		Организация = Параметры.Организация;
	КонецЕсли;
	
	//Мобильное приложение
	Если ПравоДоступа("Просмотр", Метаданные.РегистрыСведений.НастройкиПодключенияМобильноеПриложениеИСМПТК) Тогда
		ИспользоватьПриложение = Константы.ИспользоватьМобильноеПриложениеИСМПТК.Получить();
		ОбщегоНазначенияИСМПТККлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ДеревоКодовМаркировкиПолученныхЗагрузитьКодыМаркировкиИзМобильногоПриложения", "Видимость", ИспользоватьПриложение);
	КонецЕсли;

	СобытияФормИСМПТКПереопределяемый.ПриСозданииНаСервере(ЭтотОбъект, Отказ, СтандартнаяОбработка);
	СобытияФормИСМПТКПереопределяемый.ПриСозданииНаСервере_НастроитьПодключаемоеОборудование(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ОбщегоНазначенияИСМПТККлиентПереопределяемый.НачатьПодключениеОборудованиеПриОткрытииФормы(ЭтаФорма, "СканерШтрихкода");
	
	СоответствиеИдентификаторовРазвернутыхСтрокДерева = Новый Соответствие;
	ЗаполнитьДеревоКодовМаркировки();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	Если ЗавершениеРаботы Тогда
		Возврат;
	КонецЕсли;
	
	Если ПеренестиВДокумент Тогда
		АдресРасхожденийВХранилище = АдресСтруктурыРасхожденийВХранилище();
	Иначе
		АдресРасхожденийВХранилище = Неопределено;
	КонецЕсли;
	
	Если АдресРасхожденийВХранилище <> Неопределено Тогда
		Структура = Новый Структура("АдресРасхожденийВХранилище", АдресРасхожденийВХранилище);
		ИнтеграцияИСМПТККлиент.ОповеститьФормы("ЗакрытиеФормыСверкиТоваров", Структура);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура СохранитьИПеренести(Команда)
	
	ПеренестиВДокумент = Истина;
	Закрыть(КодВозвратаДиалога.OK);
	
КонецПроцедуры

&НаКлиенте
Процедура РазвернутьСоставКодовИдентификации(Команда)
	
	ЗавершениеПолучитьДанныеПоГрупповымКодамМаркировки = Новый ОписаниеОповещения("ЗавершениеПолучитьДанныеПоГрупповымКодамМаркировки", ЭтаФорма);
	ПолучитьКлючАвторизации(ЗавершениеПолучитьДанныеПоГрупповымКодамМаркировки);
	
КонецПроцедуры

&НаКлиенте
Процедура РазвернутьКодИдентификации(Команда)
	
	ЗавершениеПолучитьДанныеПоГрупповомуКодуМаркировки = Новый ОписаниеОповещения("ЗавершениеПолучитьДанныеПоГрупповомуКодуМаркировки", ЭтаФорма);
	ПолучитьКлючАвторизации(ЗавершениеПолучитьДанныеПоГрупповомуКодуМаркировки);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если Источник = "ПодключаемоеОборудование" И ВводДоступен() Тогда
		Если ИмяСобытия = "ScanData" Тогда
			ОбработкаСобытияСканераОбщая(Параметр);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВнешнееСобытие(Источник, Событие, Данные)
	
	Если Не СобытияФормИСМПТККлиентПереопределяемый.ОбрабатыватьВнешнееСобытиеТО() Тогда 
		Возврат;
	КонецЕсли;
	
	Параметр = Новый Массив;
	Параметр.Добавить(Данные);
	Параметр.Добавить(Неопределено);
	
	Если ВводДоступен() Тогда
		Если Событие = "Штрихкод" ИЛИ Событие = "ПолученШтрихкод" Тогда
			ОбработкаСобытияСканераОбщая(Параметр);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьДанныеИзТСД(Команда)
	
	ОчиститьСообщения();
	ОбщегоНазначенияИСМПТККлиентПереопределяемый.НачатьЗагрузкуДанныеИзТСД(Новый ОписаниеОповещения("ЗагрузитьИзТСДЗавершение", ЭтотОбъект), УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаСобытияСканераОбщая(Параметр)
	
	Если Не РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйКлиентСервер.ПроверкаФорматаТранспортногоКодаПройденаУспешно(РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйКлиент.ПреобразоватьДанныеСоСканераВСтруктуру(Параметр)) Тогда
		Возврат;
	КонецЕсли;
	ОбработатьКодМаркировки(РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйКлиент.ПреобразоватьДанныеСоСканераВСтруктуру(Параметр));	
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийДеревоКодовМаркировкиПолученных

&НаКлиенте
Процедура ДеревоКодовМаркировкиПолученныхПодобранПриИзменении(Элемент)
	
	ТекущаяСтрока     = Элементы.ДеревоКодовМаркировкиПолученных.ТекущаяСтрока;
	ОтмеченныйЭлемент = ДеревоКодовМаркировкиПолученных.НайтиПоИдентификатору(ТекущаяСтрока);
	
	Если ОтмеченныйЭлемент.СтатусКодаПослеСверки = ПредопределенноеЗначение("Перечисление.СтатусыСверкиКодаИСМПТК.Добавлен") Тогда
		//У Добавленных КМ признак не изменяем
		ОтмеченныйЭлемент.Подобран = Не ОтмеченныйЭлемент.Подобран;
		Возврат;
	КонецЕсли;
	
	Если Не ПроверитьВозможностьКорректировкиЭлементаДерева(ОтмеченныйЭлемент, ОтмеченныйЭлемент.Подобран) Тогда 
		ОтмеченныйЭлемент.Подобран = Не ОтмеченныйЭлемент.Подобран;
	Иначе 
		ОтметитьПодчиненныеЭлементыДерева(ОтмеченныйЭлемент,  ОтмеченныйЭлемент.Подобран);
		ОтметитьРодительскийЭлементыДерева(ОтмеченныйЭлемент, ОтмеченныйЭлемент.Подобран);
	КонецЕсли;
	
	Если Не ОтмеченныйЭлемент.СтатусКодаПослеСверки = ПредопределенноеЗначение("Перечисление.СтатусыСверкиКодаИСМПТК.Добавлен") Тогда
		Если ОтмеченныйЭлемент.Подобран Тогда
			ОтмеченныйЭлемент.СтатусКодаПослеСверки = ПредопределенноеЗначение("Перечисление.СтатусыСверкиКодаИСМПТК.Найден");
		Иначе
			ОтмеченныйЭлемент.СтатусКодаПослеСверки = ПредопределенноеЗначение("Перечисление.СтатусыСверкиКодаИСМПТК.НеНайден");
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СвернутьВсеДерево(Команда)
	
	СвернутьРазвернутьДеревоКодов(ДеревоКодовМаркировкиПолученных.ПолучитьЭлементы(), Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура РазвернутьВсеДерево(Команда)
	
	СвернутьРазвернутьДеревоКодов(ДеревоКодовМаркировкиПолученных.ПолучитьЭлементы(), Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура СвернутьРазвернутьДеревоКодов(ДервероЭлементов, Развернуть)
	
	Для Каждого Элемент Из ДервероЭлементов Цикл
		
		ВложенныеЭлементы = Элемент.ПолучитьЭлементы();
		
        Если ВложенныеЭлементы.Количество() > 0 Тогда
			
			СвернутьРазвернутьДеревоКодов(ВложенныеЭлементы, Развернуть);

            Если Развернуть = Истина Тогда
                Элементы.ДеревоКодовМаркировкиПолученных.Развернуть(Элемент.ПолучитьИдентификатор());
            Иначе
                Элементы.ДеревоКодовМаркировкиПолученных.Свернуть(Элемент.ПолучитьИдентификатор());
			КонецЕсли;
			
        КонецЕсли;
    КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьВсе(Команда)
	
	ЭлементыДерева = ДеревоКодовМаркировкиПолученных.ПолучитьЭлементы();
	
	Для Каждого СтрокаТЧ Из ЭлементыДерева Цикл
		
		СтрокаТЧ.Подобран = Истина;
		
		ОтметитьПодчиненныеЭлементыДерева(СтрокаТЧ,  Истина);
		ОтметитьРодительскийЭлементыДерева(СтрокаТЧ, Истина);
		
		Если СтрокаТЧ.СтатусКодаПослеСверки = ПредопределенноеЗначение("Перечисление.СтатусыСверкиКодаИСМПТК.НеНайден") Тогда
			СтрокатЧ.СтатусКодаПослеСверки = ПредопределенноеЗначение("Перечисление.СтатусыСверкиКодаИСМПТК.Найден"); 
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ИсключитьВсе(Команда)
	
	ЭлементыДерева = ДеревоКодовМаркировкиПолученных.ПолучитьЭлементы();
	
	Для Каждого СтрокаТЧ Из ЭлементыДерева Цикл
		
		Если СтрокаТЧ.СтатусКодаПослеСверки = ПредопределенноеЗначение("Перечисление.СтатусыСверкиКодаИСМПТК.Добавлен") Тогда
			Продолжить; //У добавленных кодов не снимаем признак, они всегда должны быть подтвержденными
		КонецЕсли;
		
		СтрокаТЧ.Подобран = Ложь;
		
		ОтметитьПодчиненныеЭлементыДерева(СтрокаТЧ,  Ложь);
		ОтметитьРодительскийЭлементыДерева(СтрокаТЧ, Ложь);
		
		Если СтрокаТЧ.СтатусКодаПослеСверки = ПредопределенноеЗначение("Перечисление.СтатусыСверкиКодаИСМПТК.Найден") Тогда
			СтрокатЧ.СтатусКодаПослеСверки = ПредопределенноеЗначение("Перечисление.СтатусыСверкиКодаИСМПТК.НеНайден"); 
		КонецЕсли;
		
	КонецЦикла;

КонецПроцедуры

#КонецОбласти

#Область Штрихкодирование

&НаКлиенте
Процедура ПоискПоШтрихкодуВыполнить(Команда)
	
	ОчиститьСообщения();
	Оповещение = Новый ОписаниеОповещения("ПоискПоШтрихкодуЗавершение", ЭтотОбъект);
	СобытияФормИСМПТККлиент.ПоказатьВводШтрихкода(Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоискПоШтрихкодуЗавершение(ДанныеШтрихкода, ДополнительныеПараметры) Экспорт
	
	Если Не РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйКлиентСервер.ПроверкаФорматаТранспортногоКодаПройденаУспешно(ДанныеШтрихкода) Тогда
		Возврат;
	КонецЕсли;
	
	ОбработатьКодМаркировки(ДанныеШтрихкода);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьКодМаркировки(ИсходныеДанные, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если ИсходныеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыСканирования = РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйКлиент.ПараметрыСканирования(ЭтотОбъект);
	
	Если ИсходныеДанные.Свойство("ФормаПоискаНоменклатуры_Успешно") Тогда
		
		//Обработчик после того, как была вызвана форма проверки и подбора номенклатуры (для регистрации ШК)
		Если ИсходныеДанные.ФормаПоискаНоменклатуры_Успешно Тогда
			
			ТекстУведомления = НСтр("ru = 'Зарегистрирован новый штрихкод номенклатуры.'");
			ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстУведомления);
			Номенклатура = ПолучитьДанныеНоменклатурыПоШтрихкоду(ИсходныеДанные.СтруктураКодовМаркировки.EAN);
			ИсходныеДанные.СтруктураКодовМаркировки.Вставить("Номенклатура", Номенклатура);
			
			Если Не НайтиПоКодуИдентификации(ИсходныеДанные.СтруктураКодовМаркировки.КодИдентификации) Тогда 
				ЗадатьВопросИПродолжитьДобавлениеКМ(ИсходныеДанные.СтруктураКодовМаркировки);
			КонецЕсли;
		
		Иначе
			ТекстОшибки = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияОтказДобавленияКодаНеОпределенаНоменклатура();
			ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстОшибки);
			Возврат;
		КонецЕсли;
		
	Иначе
		
		//Для передачи на сервер КМ, в составе которого есть символы GS (29), требуется дополнительное кодирование
		РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйКлиентСервер.ЗакодироватьШтрихкодДанныхBase64(ИсходныеДанные);
		ИсходныеДанные.Вставить("ФорматBase64", Истина);
		СтруктураКодовМаркировки = ИнтеграцияИСМПТКВызовСервера.ПолучитьКодыМаркировки(ИсходныеДанные);   
		
		//Если удалось разобрать код, вернется структура. Если нет - текст сообщения об ошибке.
		Если ТипЗнч(СтруктураКодовМаркировки) = Тип("Строка") Тогда
			ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(СтруктураКодовМаркировки);
			Возврат;
		КонецЕсли;
		
		Номенклатура = ПолучитьДанныеНоменклатурыПоШтрихкоду(СтруктураКодовМаркировки.EAN);
 		Если Не ЗначениеЗаполнено(Номенклатура) 
			И Не СтруктураКодовМаркировки.ВидУпаковки = ПредопределенноеЗначение("Перечисление.ВидыУпаковокИСМПТК.Логистическая") Тогда
			
			//Открываем форму подбора номенклатуры и регистрации ШК
			ДанныеДляСопоставленияНоменклатуры = Новый Структура(); //передается в параметрах открытия формы подбора
			Операция = "СопоставлениеНоменклатуры";
			
			ИсходныеДанные = Новый Структура("Количество, Штрихкод", 1, СтруктураКодовМаркировки.КодИдентификации);
			ДанныеДляСопоставленияНоменклатуры.Вставить("ИсходныеДанные", ИсходныеДанные); //содержит структуру "Количество, Штрихкод", где штрихкод это отсканированный КМ
			
			ШтрихкодыКСопоставлению = Новый Массив();
			ДанныеШтрихкода 		= Новый Структура("Количество, Штрихкод", 1, СтруктураКодовМаркировки.EAN);
			ШтрихкодыКСопоставлению.Добавить(ДанныеШтрихкода);
			ДанныеДляСопоставленияНоменклатуры.Вставить("ШтрихкодыКСопоставлению", ШтрихкодыКСопоставлению); //содержит массив, где каждый элемент - структура "Количество, Штрихкод", где штрихкод - это EAN из КМ, который необходимо проверить по регистру Штрихкодов
			
			ПараметрыОткрытияФормы  = Новый Структура("ДанныеДляСопоставленияНоменклатуры, Операция, НеизвестныеШтрихкоды, СтруктураКодовМаркировки, Направление", ДанныеДляСопоставленияНоменклатуры, Операция, ШтрихкодыКСопоставлению, СтруктураКодовМаркировки, ПредопределенноеЗначение("Перечисление.НаправленияДокументовИСМПТК.Входящий"));
			ОбработкаОповещенияПодборНоменклатуры = Новый ОписаниеОповещения("ОбработатьКодМаркировки", ЭтотОбъект);
			РежимОткрытия = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
			
			ОткрытьФорму("Обработка.РозничноеВыбытиеМаркированнойПродукцииИСМПТК.Форма.ПоискНоменклатурыПоШтрихкоду", ПараметрыОткрытияФормы, ЭтотОбъект,,,, ОбработкаОповещенияПодборНоменклатуры, РежимОткрытия);
			
		Иначе
			
			Если Не НайтиПоКодуИдентификации(СтруктураКодовМаркировки.КодИдентификации) Тогда 
				
				СтруктураКодовМаркировки.Вставить("Номенклатура", Номенклатура);
				ЗадатьВопросИПродолжитьДобавлениеКМ(СтруктураКодовМаркировки);
				
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьДанныеНоменклатурыПоШтрихкоду(Штрихкод)
	
	ДанныеНоменклатуры = ПолучитьНоменклатуруПоШтрихкоду(Штрихкод);
	Если ТипЗнч(ДанныеНоменклатуры) = Тип("Структура") Тогда
		Номенклатура = ДанныеНоменклатуры.Номенклатура;
	Иначе
		Номенклатура = ДанныеНоменклатуры;
	КонецЕсли;
	
	Возврат Номенклатура;
	
КонецФункции

&НаКлиенте
Процедура ЗадатьВопросИПродолжитьДобавлениеКМ(СтруктураКодовМаркировки) Экспорт
	
	ТекстВопроса = НСтр("ru = 'Указанный код идентификации %1 отсутствует в сверяемом Акте приема/передачи.'")
				 + Символы.ПС
				 + НСтр("ru = 'Код будет добавлен в список со статусом сверки ""Добавлен"".'");
	ТекстВопроса = ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(ТекстВопроса, СтруктураКодовМаркировки.КодИдентификации);
	
	ДобавитьИдентификаторЗавершение = Новый ОписаниеОповещения("ДобавитьИдентификаторЗавершение", ЭтаФорма, Новый Структура("СтруктураКодовМаркировки", СтруктураКодовМаркировки));
	ПоказатьВопрос(ДобавитьИдентификаторЗавершение, ТекстВопроса, РежимДиалогаВопрос.ОКОтмена);
	
	Возврат;
				
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура ЗагрузитьИзТСДЗавершение(РезультатВыполнения, ДополнительныеПараметры) Экспорт
	
	СобытияФормИСМПТККлиентПереопределяемый.ПриПолученииДанныхИзТСД(
	Новый ОписаниеОповещения("Подключаемый_ПолученыДанныеИзТСД", ЭтотОбъект),
	ЭтотОбъект, РезультатВыполнения);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьИзТСДЗавершениеТокен(РезультатВыполнения, ДополнительныеПараметры) Экспорт
	
	ОбщегоНазначенияИСМПТККлиентПереопределяемый.НачатьЗагрузкуДанныеИзТСД(Новый ОписаниеОповещения("ЗагрузитьИзТСДЗавершение", ЭтотОбъект), УникальныйИдентификатор);
		
КонецПроцедуры

&НаКлиенте
Функция АдресСтруктурыРасхожденийВХранилище()
	
	АдресВХранилище = Неопределено;
	
	Если ПеренестиВДокумент Тогда
		
		Расхождения 	= СформироватьСтруктуруРасхождений();
		АдресВХранилище = ПоместитьВоВременноеХранилище(Расхождения);
	
	КонецЕсли;
	
	Возврат АдресВХранилище;
	
КонецФункции

&НаКлиенте
Функция СформироватьСтруктуруРасхождений()
	
	СтруктураРасхождений = Новый Соответствие;
	ПолучитьСтруктуруРасхождений(СтруктураРасхождений);
	Возврат СтруктураРасхождений;

КонецФункции

&НаКлиенте
Процедура ПолучитьСтруктуруРасхождений(СтруктураРасхождений)
	
	//Установка статусов:
	//- коды, присутствующие в исходном Акте и отмеченные галочкой, получат статус «Найден»;
	//- коды, присутствующие в исходном Акте и не отмеченные галочкой, получат статус «Не найден»;
	//- коды, добавленные в форме сверки, получат статус «Добавлен»;
	//- коды, удаленные в форме сверки, получат статус «Исключен». 

	КодыПервогоУровня = ДеревоКодовМаркировкиПолученных.ПолучитьЭлементы(); //ДеревоКодовМаркировкиПолученных - текущая таблица кодов в форме сверки.
		
	Для Каждого СтрокаВерхнегоУровня Из КодыПервогоУровня Цикл
		
		СтруктураРасхождений.Вставить(СтрокаВерхнегоУровня.КодИдентификации, СтрокаВерхнегоУровня.СтатусКодаПослеСверки);
				
	КонецЦикла;
		
КонецПроцедуры

&НаКлиенте
Функция ПроверитьПодуровниКодовМаркировки(ЭлементДерева, СтруктураРасхождений) 
	
	СтруктураВложенности = ЭлементДерева.ПолучитьЭлементы();
	//Начинаем обход уровня
	Для Каждого СтрокаТЧ Из СтруктураВложенности Цикл
		
		Если СтрокаТЧ.Подобран Тогда
			СтруктураРасхождений.Вставить(СтрокаТЧ.КодИдентификации, ПредопределенноеЗначение("Перечисление.СтатусыСверкиКодаИСМПТК.Найден"));
		Иначе
			Если СтрокаТЧ.ПолучитьЭлементы().Количество() > 0 Тогда
				ПроверитьПодуровниКодовМаркировки(СтрокаТЧ, СтруктураРасхождений);
			Иначе
				СтруктураРасхождений.Вставить(СтрокаТЧ.КодИдентификации, ПредопределенноеЗначение("Перечисление.СтатусыСверкиКодаИСМПТК.НеНайден"));
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецФункции

&НаКлиенте
Функция ЕстьПодобранныеВложенныеКоды(ЭлементДерева)

	ЕстьВложенные = Ложь;
	
	ВложенныеЭлемены = ЭлементДерева.ПолучитьЭлементы();
	Для Каждого ВложенныйЭлемент Из ВложенныеЭлемены Цикл
		Если ВложенныйЭлемент.Подобран Тогда
			ЕстьВложенные = Истина;
			Прервать;
		ИначеЕсли ВложенныйЭлемент.ПолучитьЭлементы().Количество() = 0 Тогда 
			ЕстьВложенные = ЕстьПодобранныеВложенныеКоды(ВложенныйЭлемент);
		КонецЕсли;
	КонецЦикла;
	
	Возврат ЕстьВложенные;
			
КонецФункции

&НаСервере
Процедура ПостроитьДеревоРасхождений(ЭлементДерева, СтруктураРасхождений, Подобран = Истина, Статус)

	ВложенныеЭлемены = ЭлементДерева.ПолучитьЭлементы();
	Для Каждого ВложенныйЭлемент Из ВложенныеЭлемены Цикл
		Если Не ВложенныйЭлемент.Подобран = Подобран Тогда
			Если ВложенныйЭлемент.ПолучитьЭлементы().Количество() = 0 Тогда 
				СтруктураРасхождений.Вставить(ВложенныйЭлемент.КодИдентификации, Статус);
			Иначе
				ПостроитьДеревоРасхождений(ВложенныйЭлемент, СтруктураРасхождений, Подобран, Статус);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
			
КонецПроцедуры
	
&НаКлиенте
Процедура ДобавитьИдентификаторЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.ОК Тогда
		
		СтруктураКодовМаркировки = ДополнительныеПараметры.СтруктураКодовМаркировки;
		ДобавитьКодИдентификацииВДерево(СтруктураКодовМаркировки);
		
		ВосстановитьОтображениеДереваЗначений();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВосстановитьОтображениеДереваЗначений() 
	
	//Для Каждого ЭлементСоответствия Из СоответствиеИдентификаторовРазвернутыхСтрокДерева Цикл
	//	Элементы.ДеревоКодовМаркировкиПолученных.Развернуть(ЭлементСоответствия.Значение);
	//КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Функция НайтиПоКодуИдентификации(КодИдентификации)
	
	НайденныйЭлемент = НайтиЗначениеЭлементаДереваПоКодуИдентификации(КодИдентификации, ДеревоКодовМаркировкиПолученных);
	
	Если Не НайденныйЭлемент = Неопределено Тогда
		НайденныйЭлемент.Подобран = Истина;
		Если НайденныйЭлемент.СтатусКодаПослеСверки = ПредопределенноеЗначение("Перечисление.СтатусыСверкиКодаИСМПТК.НеНайден") Тогда
			НайденныйЭлемент.СтатусКодаПослеСверки = ПредопределенноеЗначение("Перечисление.СтатусыСверкиКодаИСМПТК.Найден");
		ИначеЕсли НайденныйЭлемент.СтатусКодаПослеСверки = ПредопределенноеЗначение("Перечисление.СтатусыСверкиКодаИСМПТК.Найден") Тогда
			ТекстСообщения = НСтр("ru='Наличие данного кода маркировки уже подтверждено.'");
			ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);			
		ИначеЕсли НайденныйЭлемент.СтатусКодаПослеСверки = ПредопределенноеЗначение("Перечисление.СтатусыСверкиКодаИСМПТК.Добавлен") Тогда
			ТекстСообщения = НСтр("ru='Данный код маркировки уже добавлен в список.'");
			ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;
		РазвернутьЭлементДерева(НайденныйЭлемент);
		ОтметитьПодчиненныеЭлементыДерева(НайденныйЭлемент);
		Элементы.ДеревоКодовМаркировкиПолученных.ТекущаяСтрока = НайденныйЭлемент.ПолучитьИдентификатор();
	КонецЕсли;
	
	Возврат Не НайденныйЭлемент = Неопределено;
	
КонецФункции

&НаКлиенте
Процедура РазвернутьЭлементДерева(ЭлементДерева)
	
	Элементы.ДеревоКодовМаркировкиПолученных.Развернуть(ЭлементДерева.ПолучитьИдентификатор(), Ложь);
	
	ЭлементРодитель = ЭлементДерева.ПолучитьРодителя();
	
	Если Не ЭлементРодитель = Неопределено Тогда 
		РазвернутьЭлементДерева(ЭлементРодитель);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция НайтиЗначениеЭлементаДереваПоКодуИдентификации(КодИдентификации, Дерево)
	
	НайденныйЭлемент = Неопределено;
	
	ЭлементыВетвиДерева = Дерево.ПолучитьЭлементы();
	Для Каждого ЭлементДерева Из ЭлементыВетвиДерева Цикл
		
		Если Не ЭлементДерева.КодИдентификации = КодИдентификации Тогда 
			НайденныйЭлемент = НайтиЗначениеЭлементаДереваПоКодуИдентификации(КодИдентификации, ЭлементДерева);
		Иначе 
			Возврат ЭлементДерева;
		КонецЕсли;
		
		Если Не НайденныйЭлемент = Неопределено Тогда 
			Возврат НайденныйЭлемент;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат НайденныйЭлемент;
	
КонецФункции

&НаКлиенте
Процедура ОтметитьПодчиненныеЭлементыДерева(ЭлементДерева, Отметка = Истина)
	
	ЭлементыПодчинённые = ЭлементДерева.ПолучитьЭлементы();
	Для Каждого ПодчиненныйЭлемент Из ЭлементыПодчинённые Цикл 
		ПодчиненныйЭлемент.Подобран = Отметка;
		Если Не ЭлементДерева.СтатусКодаПослеСверки = ПредопределенноеЗначение("Перечисление.СтатусыСверкиКодаИСМПТК.Добавлен") Тогда
			Если Отметка Тогда
				ПодчиненныйЭлемент.СтатусКодаПослеСверки = ПредопределенноеЗначение("Перечисление.СтатусыСверкиКодаИСМПТК.Найден");
			Иначе
				ПодчиненныйЭлемент.СтатусКодаПослеСверки = ПредопределенноеЗначение("Перечисление.СтатусыСверкиКодаИСМПТК.НеНайден");
			КонецЕсли;
		КонецЕсли;
		ОтметитьПодчиненныеЭлементыДерева(ПодчиненныйЭлемент, Отметка);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Функция ПроверитьВозможностьКорректировкиЭлементаДерева(ЭлементДерева, Отметка = Истина)
	
	Если Не Отметка Тогда
		
		ЭлементРодитель = ЭлементДерева.ПолучитьРодителя();
		
		Если Не ЭлементРодитель = Неопределено И ЭлементРодитель.Подобран Тогда
			Возврат Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Процедура ОтметитьРодительскийЭлементыДерева(ЭлементДерева, Отметка = Истина)
	
	ЭлементРодитель = ЭлементДерева.ПолучитьРодителя();
	Если Не ЭлементРодитель = Неопределено Тогда
		
		ЭлементыГруппыРодителя = ЭлементРодитель.ПолучитьЭлементы();
		
		ОдноСостояние = Истина;
		
		Для Каждого ЭлементГруппы Из ЭлементыГруппыРодителя Цикл
			Если Не ЭлементГруппы.Подобран = Отметка Тогда 
				ОдноСостояние = Ложь;
			КонецЕсли;
		КонецЦикла;
		
		ЭлементРодитель.Подобран = ?(ОдноСостояние, Отметка, ЭлементРодитель.Подобран);
		Если Не ЭлементРодитель.СтатусКодаПослеСверки = ПредопределенноеЗначение("Перечисление.СтатусыСверкиКодаИСМПТК.Добавлен") Тогда
			Если ЭлементРодитель.Подобран Тогда
				ЭлементРодитель.СтатусКодаПослеСверки = ПредопределенноеЗначение("Перечисление.СтатусыСверкиКодаИСМПТК.Найден");
			Иначе
				ЭлементРодитель.СтатусКодаПослеСверки = ПредопределенноеЗначение("Перечисление.СтатусыСверкиКодаИСМПТК.НеНайден");
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьКодыМаркировкиИзФайла(Команда)
	
	ИнтеграцияИСМПТККлиент.ЗагрузитьКодыМаркировкиИзФайла(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьПроцедуруФоновоВыполнено(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияОперацияОтменена());
		Возврат;
	ИначеЕсли Результат.Статус = "Ошибка" Тогда
		ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(Результат.ПодробноеПредставлениеОшибки);
	ИначеЕсли Результат.Статус = "Выполнено" Тогда
		МассивКодов = ОбработатьРезультатЗагрузкиКодов(Результат.АдресРезультата);
		Если Не МассивКодов = Неопределено Тогда
			Для Каждого СтруктураКодаМаркировки Из МассивКодов Цикл 
				Если Не НайтиПоКодуИдентификации(СтруктураКодаМаркировки.КодИдентификации) Тогда
					ДобавитьКодИдентификацииВДерево(СтруктураКодаМаркировки);
				КонецЕсли;
			КонецЦикла;
			ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияОперацияЗагрузкиКМЗавершена());
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ОбработатьРезультатЗагрузкиКодов(АдресРезультата)
	
	РезультатЗадания = ПолучитьИзВременногоХранилища(АдресРезультата);
	
	Если РезультатЗадания.Свойство("МассивОшибок") И Не РезультатЗадания.МассивОшибок.Количество() = 0 Тогда
		Для Каждого ТекстОшибки Из РезультатЗадания.МассивОшибок Цикл 
			ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстОшибки);
		КонецЦикла;
	КонецЕсли;
	
	Если РезультатЗадания.Успешно И НЕ РезультатЗадания.ТаблицаПолученныхКодов.Количество() = 0 Тогда
		Возврат РаботаСДокументамиИСМПТКПереопределяемый.ТаблицаЗначенийВМассив(РезультатЗадания.ТаблицаПолученныхКодов);
	Иначе 
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

&НаСервере
функция ПолучитьНоменклатуруПоШтрихкоду(EAN, СообщенияОбОшибках = Неопределено)
	
	Если СообщенияОбОшибках = Неопределено Тогда
		СообщенияОбОшибках = Новый Соответствие();
	КонецЕсли;
	
	Возврат ОбщегоНазначенияИСМПТКПереопределяемый.ПолучитьДанныеНоменклатурыИзРегистраШтрихкодовПоШтрихкоду(, EAN,,СообщенияОбОшибках);
	
КонецФункции

&НаКлиенте
Процедура ПолучитьКлючАвторизации(СобытиеПослеАвторизации) Экспорт
	
	ИнтерфейсИСМПТККлиент.ПолучитьКлючАвторизацииОбщая(СобытиеПослеАвторизации, "");
		
КонецПроцедуры

&НаСервере
Процедура ЗавершениеПолучитьДанныеПоГрупповымКодамМаркировки(РезультатВыполнения, Параметры) Экспорт
	
	ЭлементыДерева = ДеревоКодовМаркировкиПолученных.ПолучитьЭлементы();
	
	Для Каждого ЭлементДерева Из ЭлементыДерева Цикл
		
		Если ЭлементДерева.ВидУпаковки = Перечисления.ВидыУпаковокИСМПТК.Логистическая Тогда
						
			ТокенАвторизации = ?(ЗначениеЗаполнено(РезультатВыполнения), РезультатВыполнения, Неопределено);
			ИнформацияПоКоду = ЭлементДерева.КодИдентификации;
			
			СтруктураЗапрос = Новый Структура("Штрихкод, ВидУпаковки, ВидПродукции, ФорматBase64", ИнформацияПоКоду, ЭлементДерева.ВидУпаковки, ЭлементДерева.ВидПродукции, Ложь);
			ДанныеПоГрупповомуКоду = ИнтеграцияИСМПТК.ЗапроситьДанныеОбАгрегацииКМ(СтруктураЗапрос, Организация, ТокенАвторизации);
			
			Если ЗначениеЗаполнено(ДанныеПоГрупповомуКоду.ТекстОшибки) Тогда
				ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ДанныеПоГрупповомуКоду.ТекстОшибки);
			Иначе
				
				Дерево = РеквизитФормыВЗначение("ДеревоКодовМаркировкиПолученных");
				НайденнаяСтрока = Дерево.Строки.Найти(ЭлементДерева.КодИдентификации, "КодИдентификации", Истина);
				
				Если Не НайденнаяСтрока = Неопределено Тогда 
					НайденнаяСтрока.Строки.Очистить();
					СформироватьДеревоКодовМаркировки(ИнтеграцияИСМПТКВызовСервера.ПолучитьИнформациюПоСоставуГрупповогоКода(ДанныеПоГрупповомуКоду, ИнформацияПоКоду, НайденнаяСтрока.ВидУпаковки), НайденнаяСтрока.Строки);
					ЗначениеВРеквизитФормы(Дерево, "ДеревоКодовМаркировкиПолученных");
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗавершениеПолучитьДанныеПоГрупповомуКодуМаркировки(РезультатВыполнения, Параметры) Экспорт
	
	ТекущаяСтрока = Элементы.ДеревоКодовМаркировкиПолученных.ТекущаяСтрока;
	ТекущийЭлементДерева = ДеревоКодовМаркировкиПолученных.НайтиПоИдентификатору(ТекущаяСтрока);
	
	Если Не ТекущийЭлементДерева.ВидУпаковки = Перечисления.ВидыУпаковокИСМПТК.Логистическая Тогда 
		ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(НСтр("ru = 'Получить вложенные коды можно только для транспортной упаковки!'"));
	Иначе
		
		ТокенАвторизации = ?(ЗначениеЗаполнено(РезультатВыполнения), РезультатВыполнения, Неопределено);
		
		ИнформацияПоКоду = ТекущийЭлементДерева.КодИдентификации;
		
		СтруктураЗапрос = Новый Структура("Штрихкод, ВидУпаковки, ВидПродукции, ФорматBase64", ИнформацияПоКоду, ТекущийЭлементДерева.ВидУпаковки, ТекущийЭлементДерева.ВидПродукции, Ложь);
		
		ДанныеПоГрупповомуКоду = ИнтеграцияИСМПТК.ЗапроситьДанныеОбАгрегацииКМ(СтруктураЗапрос, Организация, ТокенАвторизации);
		
		Если ЗначениеЗаполнено(ДанныеПоГрупповомуКоду.ТекстОшибки) Тогда
			
			ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ДанныеПоГрупповомуКоду.ТекстОшибки);
			
		Иначе
			
			Дерево = РеквизитФормыВЗначение("ДеревоКодовМаркировкиПолученных");
			НайденнаяСтрока = Дерево.Строки.Найти(ТекущийЭлементДерева.КодИдентификации, "КодИдентификации", Истина);
			
			Если Не НайденнаяСтрока = Неопределено Тогда 
				НайденнаяСтрока.Строки.Очистить();
				СформироватьДеревоКодовМаркировки(ИнтеграцияИСМПТКВызовСервера.ПолучитьИнформациюПоСоставуГрупповогоКода(ДанныеПоГрупповомуКоду, ИнформацияПоКоду, НайденнаяСтрока.ВидУпаковки), НайденнаяСтрока.Строки);
				ЗначениеВРеквизитФормы(Дерево, "ДеревоКодовМаркировкиПолученных");
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция СформироватьДеревоКодовМаркировки(ВложенныеКоды, ТекущаяВетка)
	
	СтруктураКода = Новый Структура("Штрихкод");
	НоваяВетка 	  = Неопределено;
	
	Если ВложенныеКоды = Неопределено Тогда
		Возврат 1;
	КонецЕсли;
	
	Для Каждого ВложенныйКод Из ВложенныеКоды Цикл
		Если ТипЗнч(ВложенныйКод) = Тип("Строка") Тогда
			
			СтруктураКода.Штрихкод = ВложенныйКод;
			ДанныеКода = ИнтеграцияИСМПТКВызовСервера.ПолучитьКодыМаркировки(СтруктураКода);  
			
			//Если удалось разобрать код, вернется структура. Если нет - текст сообщения об ошибке.
			Если ТипЗнч(ДанныеКода) = Тип("Строка") Тогда
				ТекстОшибки = НСтр("ru = 'Не удалось разобрать код маркировки %1, он не был добавлен в документ.'");
				ТекстОшибки = ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(ТекстОшибки, ВложенныйКод);
				ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстОшибки);
				Продолжить;
			КонецЕсли;
			
			ДобавитьНовуюВеткуДерева(ТекущаяВетка, ВложенныйКод, ДанныеКода, Ложь, НоваяВетка);
			
		Иначе
			
			СтруктураКода.Штрихкод = ВложенныйКод.Ключ;
			ДанныеКода = ИнтеграцияИСМПТКВызовСервера.ПолучитьКодыМаркировки(СтруктураКода);   
			
			//Если удалось разобрать код, вернется структура. Если нет - текст сообщения об ошибке.
			Если ТипЗнч(ДанныеКода) = Тип("Строка") Тогда
				ТекстОшибки = НСтр("ru = 'Не удалось разобрать код маркировки, %1 он не был добавлен в документ.'");
				ТекстОшибки = ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(ТекстОшибки, ВложенныйКод.Ключ);
				ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстОшибки);
				Продолжить;
			КонецЕсли;
			
			ДобавитьНовуюВеткуДерева(ТекущаяВетка, ВложенныйКод, ДанныеКода, Истина, НоваяВетка);
			Если Не ВложенныйКод.Значение.Количество() = 0 Тогда
				СформироватьДеревоКодовМаркировки(ВложенныйКод.Значение, НоваяВетка.Строки);
			КонецЕсли;
			
		КонецЕсли;
		
		ИнтерфейсИСМПТККлиентСервер.УстановитьИндексКартинкиТипаУпаковки(НоваяВетка);
		
	КонецЦикла;
	
КонецФункции

&НаСервере
Процедура ДобавитьНовуюВеткуДерева(ТекущаяВетка, ВложенныйКод, ДанныеКода, ИспользоватьВложенный, НоваяВетка)
	
	Номенклатура = ПолучитьНоменклатуруПоДаннымШтрихкода(ДанныеКода.ВидУпаковки, ДанныеКода.EAN, ДанныеКода.GTINВерхнегоУровня);
	Если ИспользоватьВложенный Тогда
		ПредставлениеКодаМаркировки = ВложенныйКод.Ключ + ?(Не ЗначениеЗаполнено(Номенклатура), "", " (" + Номенклатура.Наименование + ")");
	Иначе
		ПредставлениеКодаМаркировки = ВложенныйКод + ?(Не ЗначениеЗаполнено(Номенклатура), "", " (" + Номенклатура.Наименование + ")");
	КонецЕсли;
	
	НоваяВетка = ТекущаяВетка.Добавить();
	НоваяВетка.КодИдентификации	= ?(ИспользоватьВложенный, ВложенныйКод.Ключ, ВложенныйКод);
	НоваяВетка.ПредставлениеКодаМаркировки = ПредставлениеКодаМаркировки;
	НоваяВетка.Номенклатура		= Номенклатура;
	НоваяВетка.ВидУпаковки		= ДанныеКода.ВидУпаковки;
	НоваяВетка.ВидПродукции		= ДанныеКода.ВидПродукции;
	НоваяВетка.Количество		= 1;
	
	Если ТекущаяВетка.Родитель.СтатусКодаПослеСверки = ПредопределенноеЗначение("Перечисление.СтатусыСверкиКодаИСМПТК.Добавлен") Тогда
		НоваяВетка.СтатусКодаПослеСверки = ПредопределенноеЗначение("Перечисление.СтатусыСверкиКодаИСМПТК.Добавлен"); 
		НоваяВетка.Подобран = Истина;
	Иначе
		НоваяВетка.СтатусКодаПослеСверки = ПредопределенноеЗначение("Перечисление.СтатусыСверкиКодаИСМПТК.НеНайден"); 
		НоваяВетка.Подобран = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьНоменклатуруПоДаннымШтрихкода(ВидУпаковки, EAN, GTINВерхнегоУровня)
	
	Если ВидУпаковки = ПредопределенноеЗначение("Перечисление.ВидыУпаковокИСМПТК.Групповая") Тогда
		//Определяем ном-ру для блоков по верхнему уровню. Если ведется учет через одну ном-ру и упаковки, товар будет тот же, что для нижнего уровня.
		//Но если это разные ном-ры (блок и пачка), то подобрать нужно именно блок.
		EANВерхнегоУровня  = РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйКлиентСервер.EANПоGTIN(GTINВерхнегоУровня);
		ДанныеНоменклатуры = ПолучитьНоменклатуруПоШтрихкоду(EANВерхнегоУровня);
	Иначе
		ДанныеНоменклатуры = ПолучитьНоменклатуруПоШтрихкоду(EAN);
	КонецЕсли;
	
	Если ТипЗнч(ДанныеНоменклатуры) = Тип("Структура") Тогда
		Номенклатура = ДанныеНоменклатуры.Номенклатура;
	Иначе
		Номенклатура = ДанныеНоменклатуры;
	КонецЕсли;
			
	Возврат Номенклатура;
	
КонецФункции

&НаСервере
Функция ЗаполнитьТаблицуКодовМаркировки(МассивКодов)
	
	ТаблицаКодовМаркировки.Очистить();
	СтруктураКода = Новый Структура("Штрихкод");
	
	Для Каждого ВложенныйКод Из МассивКодов Цикл
		
		СтруктураКода.Штрихкод = ВложенныйКод;
		ДанныеКода = ИнтеграцияИСМПТКВызовСервера.ПолучитьКодыМаркировки(СтруктураКода);  
		
		//Если удалось разобрать код, вернется структура. Если нет - текст сообщения об ошибке.
		Если ТипЗнч(ДанныеКода) = Тип("Строка") Тогда
			ТекстОшибки = НСтр("ru = 'Не удалось разобрать код маркировки %1, он не был добавлен в документ.'");
			ТекстОшибки = ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(ТекстОшибки, ВложенныйКод);
			ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстОшибки);
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока = ТаблицаКодовМаркировки.Добавить();
		НоваяСтрока.КодИдентификации = ВложенныйКод;
		НоваяСтрока.ВидУпаковки		 = ДанныеКода.ВидУпаковки;
		НоваяСтрока.Количество		 = 1;
		НоваяСтрока.ВидПродукции	 = ДанныеКода.ВидПродукции;
		НоваяСтрока.СтатусКодаПослеСверки = ПредопределенноеЗначение("Перечисление.СтатусыСверкиКодаИСМПТК.НеНайден");
		
	КонецЦикла;
	
КонецФункции

&НаСервере
Функция ЗаполнитьДеревоКодовМаркировки()
	
	Дерево = РеквизитФормыВЗначение("ДеревоКодовМаркировкиПолученных");
	Дерево.Строки.Очистить();
	СтруктураКода = Новый Структура("Штрихкод");
	
	Для Каждого СтрокаКодаМаркировки Из ТаблицаКодовМаркировки Цикл
		
		СтруктураКода.Штрихкод = СтрокаКодаМаркировки.КодИдентификации;
		ДанныеКода = ИнтеграцияИСМПТКВызовСервера.ПолучитьКодыМаркировки(СтруктураКода);    
		
		//Если удалось разобрать код, вернется структура. Если нет - текст сообщения об ошибке.
		Если ТипЗнч(ДанныеКода) = Тип("Строка") Тогда
			ТекстОшибки = НСтр("ru = 'Не удалось разобрать код маркировки %1, он не был добавлен в документ.'");
			ТекстОшибки = ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(ТекстОшибки, СтрокаКодаМаркировки.КодИдентификации);
			ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстОшибки);
			Продолжить;
		КонецЕсли;
		
		Если ДанныеКода.ВидУпаковки = ПредопределенноеЗначение("Перечисление.ВидыУпаковокИСМПТК.Групповая") Тогда
			//Определяем ном-ру для блоков по верхнему уровню. Если ведется учет через одну ном-ру и упаковки, товар будет тот же, что для нижнего уровня.
			//Но если это разные ном-ры (блок и пачка), то подобрать нужно именно блок.
			EANВерхнегоУровня  = РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйКлиентСервер.EANПоGTIN(ДанныеКода.GTINВерхнегоУровня);
			ДанныеНоменклатуры = ПолучитьНоменклатуруПоШтрихкоду(EANВерхнегоУровня);
		Иначе
			ДанныеНоменклатуры = ПолучитьНоменклатуруПоШтрихкоду(ДанныеКода.EAN);
		КонецЕсли;		
		
		Если ТипЗнч(ДанныеНоменклатуры) = Тип("Структура") Тогда
			Номенклатура = ДанныеНоменклатуры.Номенклатура;
		Иначе
			Номенклатура = ДанныеНоменклатуры;
		КонецЕсли;
		
		ПредставлениеКодаМаркировки = СтрокаКодаМаркировки.КодИдентификации + ?(Не ЗначениеЗаполнено(Номенклатура), "", " (" + Номенклатура.Наименование + ")");
		
		НоваяВетка = Дерево.Строки.Добавить();
		НоваяВетка.КодИдентификации = СтрокаКодаМаркировки.КодИдентификации;
		НоваяВетка.ПредставлениеКодаМаркировки = ПредставлениеКодаМаркировки;
		НоваяВетка.Номенклатура = Номенклатура;
		НоваяВетка.ВидУпаковки	= ДанныеКода.ВидУпаковки;
		НоваяВетка.Количество	= 1;
		НоваяВетка.ВидПродукции = СтрокаКодаМаркировки.ВидПродукции;
		НоваяВетка.СтатусКодаПослеСверки = ПредопределенноеЗначение("Перечисление.СтатусыСверкиКодаИСМПТК.НеНайден");
		
		Если ДанныеКода.ВидУпаковки = ПредопределенноеЗначение("Перечисление.ВидыУпаковокИСМПТК.Логистическая") Тогда
			GTIN = "";
			GTINВерхнегоУровня = "";
		ИначеЕсли ДанныеКода.ВидУпаковки = ПредопределенноеЗначение("Перечисление.ВидыУпаковокИСМПТК.Групповая") Тогда 
			GTIN = "";
			GTINВерхнегоУровня = ДанныеКода.GTINВерхнегоУровня;
		ИначеЕсли ДанныеКода.ВидУпаковки = ПредопределенноеЗначение("Перечисление.ВидыУпаковокИСМПТК.Потребительская") Тогда 
			GTIN = ДанныеКода.GTIN;
			GTINВерхнегоУровня = ДанныеКода.GTINВерхнегоУровня;
		КонецЕсли;
			
		НоваяВетка.GTIN = GTIN;
		НоваяВетка.GTINВерхнегоУровня = GTINВерхнегоУровня;
		
		ИнтерфейсИСМПТККлиентСервер.УстановитьИндексКартинкиТипаУпаковки(НоваяВетка);
		
	КонецЦикла;
	
	ЗначениеВРеквизитФормы(Дерево, "ДеревоКодовМаркировкиПолученных");
	
КонецФункции

&НаСервере
Функция ДобавитьКодИдентификацииВДерево(СтруктураКодовМаркировки)
	
	ЭлементыДерева = ДеревоКодовМаркировкиПолученных.ПолучитьЭлементы();
	НовыйЭлемент   = ЭлементыДерева.Добавить();
	
	ПредставлениеКодаМаркировки = СтруктураКодовМаркировки.КодИдентификации + ?(Не ЗначениеЗаполнено(СтруктураКодовМаркировки.Номенклатура), "", " (" + СтруктураКодовМаркировки.Номенклатура.Наименование + ")");
	
	НовыйЭлемент.КодИдентификации = СтруктураКодовМаркировки.КодИдентификации;
	НовыйЭлемент.КодМаркировки	  = СтруктураКодовМаркировки.КодМаркировки;
	НовыйЭлемент.Номенклатура	  = СтруктураКодовМаркировки.Номенклатура;
	НовыйЭлемент.ВидУпаковки	  = СтруктураКодовМаркировки.ВидУпаковки;
	НовыйЭлемент.ПредставлениеКодаМаркировки = ПредставлениеКодаМаркировки;
	НовыйЭлемент.Количество	   = 1;
	НовыйЭлемент.ВидПродукции  = СтруктураКодовМаркировки.ВидПродукции;
	НовыйЭлемент.Подобран	   = Истина;
	НовыйЭлемент.СтатусКодаПослеСверки = ПредопределенноеЗначение("Перечисление.СтатусыСверкиКодаИСМПТК.Добавлен");
	
	ИнтерфейсИСМПТККлиентСервер.УстановитьИндексКартинкиТипаУпаковки(НовыйЭлемент);

КонецФункции

&НаКлиенте
Процедура ДеревоКодовМаркировкиПолученныхПередУдалением(Элемент, Отказ)
	
	Если Не Элементы.ДеревоКодовМаркировкиПолученных.ТекущиеДанные.СтатусКодаПослеСверки = ПредопределенноеЗначение("Перечисление.СтатусыСверкиКодаИСМПТК.Добавлен") Тогда
		//Добавленные коды просто удаляем - их могли отсканировать по ошибке, они не числятся в полученном документе.
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОповеститьОПроблемеЗапросаВалидностиКМ() Экспорт
	
	//Если по какой-то причине не удалось выполнить получение Токена, то и запрос на проверку статуса КМ не выполнялся,
	//об этом нужно предупредить и отметить непроверенные коды.
	Если ТокенАвторизации = Неопределено Тогда 
		СообщитьОНевозможностиВыполнитьПроверкуСтатусаКМ("Фоновый");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СообщитьОНевозможностиВыполнитьПроверкуСтатусаКМ(РежимЗапроса) Экспорт

	Если РежимЗапроса = "Ручной" Тогда
		ТекстСообщения = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияНевозможноВыполнитьПроверкуСтатусаКМ_Вручную();
	Иначе	
		ТекстСообщения = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияНевозможноВыполнитьПроверкуСтатусаКМ_ВФоне();
	КонецЕсли;
	ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
	
КонецПроцедуры

#КонецОбласти

#Область РаботаСТСД

#Область ЗагрузкаИзТСД

&НаКлиенте
Процедура ЗагрузитьИзТСДПослеАвторизации(РезультатАвторизации, Штрихкоды) Экспорт
	
	Подключаемый_ПолученыДанныеИзТСД(Штрихкоды, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПолученыДанныеИзТСД(Штрихкоды, АвторизацияЗапрашивалась = Неопределено) Экспорт
	
	Если Штрихкоды.Количество() = 0 Тогда
		
		ПоказатьПредупреждение( ,РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияВДанныхИзТСДНетИнформацииОКодахМаркировки());
		Возврат;
		
	КонецЕсли;
	
	СобытияФормИСМПТККлиент.ОповеститьОНачалеОбработкиДанныхТСД();
	ПараметрыСканирования = РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйКлиент.ПараметрыСканирования(ЭтотОбъект);
	СобытияФормИСМПТККлиент.ПреобразоватьШтрихкодыТСДВBase64(Штрихкоды);
	ЗагрузкаДанныхТСД = ОбработатьПолученныеДанныеТСДНаСервере(Штрихкоды, ПараметрыСканирования, Неопределено);
	
	ОбработатьПолученныеДанныеТСД();
	
КонецПроцедуры

&НаСервере
Функция ОбработатьПолученныеДанныеТСДНаСервере(ШтрихкодыТСД, ПараметрыСканирования, КэшированныеЗначения)
	
	Результат = РаботаСДокументамиИСМПТК.ОбработатьПолученныеДанныеТСДВДокументе(ЭтотОбъект, ШтрихкодыТСД, ПараметрыСканирования);
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ОбработатьПолученныеДанныеТСД()
	
	Если ЗагрузкаДанныхТСД = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	МассивКодовМаркировки = Новый Массив;
	
	Для НомерСтроки = 0 По ЗагрузкаДанныхТСД.Всего - 1 Цикл
		Штрихкод = ЗагрузкаДанныхТСД.ШтрихкодыТСД[НомерСтроки];
		ДанныеШтрихкода = Новый Структура("ШтрихКод, ФорматBase64, Количество", Штрихкод.Штрихкод, Ложь, 1);
		РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйКлиентСервер.ЗакодироватьШтрихкодДанныхBase64(ДанныеШтрихкода);
		МассивКодовМаркировки.Добавить(ДанныеШтрихкода);
	КонецЦикла;
	
	СтруктураПараметров = Новый Структура("ФормаОбъекта, МассивКодовМаркировки", ЭтотОбъект, МассивКодовМаркировки);
	
	//Если ИнтеграцияИСМПТКВызовСервера.ИспользоватьАвтоОпределениеЛогистическихКодовИСМПТК() Тогда 
	//	ИнтеграцияИСМПТККлиент.ЗагрузитьКодыМаркировкиИзТСДЗавершение(ИнтеграцияИСМПТККлиент.ПолучитьТокенАвторизации(Организация), СтруктураПараметров);
	//Иначе
		ИнтеграцияИСМПТККлиент.ЗагрузитьКодыМаркировкиИзТСДЗавершение(Неопределено, СтруктураПараметров);
	//КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ИдентификаторыSSCC

&НаКлиенте
Процедура ДобавитьИдентификаторSSCC(Команда)
	
	ТекСтрока = Элементы.ДеревоКодовМаркировкиПолученных.ТекущиеДанные;
	Если ПроверкаВыделенныхСтрок() 
		И ТексТрока.СтатусКодаПослеСверки = ПредопределенноеЗначение("Перечисление.СтатусыСверкиКодаИСМПТК.Добавлен") Тогда
		РедактироватьИдентификаторSSCCНаСервере("Добавить");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьИдентификаторSSCC(Команда)
	
	ТекСтрока = Элементы.ДеревоКодовМаркировкиПолученных.ТекущиеДанные;
	Если ПроверкаВыделенныхСтрок() 
		И ТексТрока.СтатусКодаПослеСверки = ПредопределенноеЗначение("Перечисление.СтатусыСверкиКодаИСМПТК.Добавлен") Тогда
		РедактироватьИдентификаторSSCCНаСервере("Удалить");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ПроверкаВыделенныхСтрок()
	
	КоличествоВыделенныхСтрок = Элементы.ДеревоКодовМаркировкиПолученных.ВыделенныеСтроки.Количество();
	Если КоличествоВыделенныхСтрок = 0 Тогда
		ТекстСообщения = НСтр("ru = 'Строки не выбраны.'");
		ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
		Возврат Ложь;
	КонецЕсли;
	Возврат Истина;
	
КонецФункции

&НаСервере
Процедура РедактироватьИдентификаторSSCCНаСервере(Действие)
	
	ВыделенныеСтроки = Элементы.ДеревоКодовМаркировкиПолученных.ВыделенныеСтроки;
	
	Для Каждого Идентификатор Из ВыделенныеСтроки Цикл
		
		СтрокаТЧ = ДеревоКодовМаркировкиПолученных.НайтиПоИдентификатору(Идентификатор);
		Если Действие = "Добавить" Тогда
			Если СтрДлина(СтрокаТЧ.КодИдентификации) = 18 Тогда
				СтрокаТЧ.КодИдентификации = "00" + СтрокаТЧ.КодИдентификации;
			КонецЕсли;
		Иначе
			Если СтрДлина(СтрокаТЧ.КодИдентификации) = 20 Тогда
				СтрокаТЧ.КодИдентификации = Сред(СтрокаТЧ.КодИдентификации, 3);
			КонецЕсли;	
		КонецЕсли;
		
		ПредставлениеКодаМаркировки = СтрокаТЧ.КодИдентификации + ?(Не ЗначениеЗаполнено(СтрокаТЧ.Номенклатура), "", " (" + СтрокаТЧ.Номенклатура.Наименование + ")");
		СтрокаТЧ.ПредставлениеКодаМаркировки = ПредставлениеКодаМаркировки;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область МобильноеПриложение

&НаКлиенте
Процедура МобильноеПриложениеЗагрузитьТовары(Команда)
	
	ОповещениеПослеВыбораЭлемента = Новый ОписаниеОповещения("МобильноеПриложениеЗагрузитьТоварыОбработкаВыбора", ЭтотОбъект);
	Список = РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйВызовСервера.МобильноеПриложениеЗагрузитьТоварыНаСервере();
	Список.ПоказатьОтметкуЭлементов(ОповещениеПослеВыбораЭлемента, РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияВыборДокументаДляЗагрузки());
	
КонецПроцедуры

&НаКлиенте
Процедура МобильноеПриложениеЗагрузитьТоварыОбработкаВыбора(Элемент, Параметры) Экспорт
	
	РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйКлиент.МобильноеПриложениеЗагрузитьТоварыОбработкаВыбораОбщая(ЭтотОбъект, Элемент, Параметры);
	
КонецПроцедуры

#КонецОбласти