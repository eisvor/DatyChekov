
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;

	Если Не ОбщегоНазначенияИСМПТКВызовСервера.ПроверитьЗначениеКонстанты("ВестиУчетПоСкладамИСЦЭДМ") Тогда
		Элементы.Поставщик.ВыбиратьТип = Ложь;
		Если Объект.Ссылка.Пустая() Тогда
			Объект.Поставщик = РаботаСДокументамиИСМПТКПереопределяемый.ПолучитьПустоеЗначениеСтруктурнойЕдиницы();
		КонецЕсли;
	КонецЕсли;
	
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("ПрефиксыЭлементовФормы", "АгрегированныеКМ");
	СобытияФормИСМПТКПереопределяемый.ПриСозданииНаСервере_НастроитьПодключаемоеОборудование(ЭтаФорма, ДополнительныеПараметры);
	
	Если Объект.Ссылка.Пустая() Тогда
	
		Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыДокументовИСЦЭДМ.НеОпределен");
		ЗаполнитьВидПродукцииИОграничитьВидимостьПоФОУчета();
		Объект.Автор = ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.ТекущийПользователь();
		
		Если Параметры.ЗначенияЗаполнения.Свойство("Организация") Тогда
			Если ТипЗнч(Параметры.ЗначенияЗаполнения.Организация) = Тип("СправочникСсылка.СкладыИСЦЭДМ") Тогда
				Объект.Поставщик   = Параметры.ЗначенияЗаполнения.Организация;
				Объект.ПоставщикИдентификационныйНомер = Объект.Поставщик.ИИНБИНСклада;
				Объект.Организация = Объект.Поставщик.Организация;
			Иначе
				СтруктураДанных = ПолучитьРеквизитыОрганизацииКонтрагента(Параметры.ЗначенияЗаполнения.Организация, "Поставщик");
				Объект.Организация = Параметры.ЗначенияЗаполнения.Организация;
				Объект.Поставщик   = Параметры.ЗначенияЗаполнения.Организация;
				ЗаполнитьЗначенияСвойств(Объект, СтруктураДанных); 
			КонецЕсли;
		КонецЕсли;
		
	Иначе
		//Справочные поля заполняем по последнему добавленному КМ в таблице
		ЗаполнитьНоменклатураХарактеристикаСправочно();
	КонецЕсли;
			
	ЗаполнитьСлужебныеРеквизитыПоНоменклатуре();
	
	СобытияФормИСМПТКПереопределяемый.ЗаполнитьПризнакИспользованияХарактеристик(Объект.АгрегированныеКМ);
	СобытияФормИСМПТКПереопределяемый.ПриСозданииНаСервере(ЭтотОбъект, Отказ, СтандартнаяОбработка);
	
	ПриЧтенииСозданииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	ПриЧтенииСозданииНаСервере();
	СобытияФормИСМПТКПереопределяемый.ПриЧтенииНаСервере(ТекущийОбъект, ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииСозданииНаСервере()

	УправлениеФормой();
	ИнтерфейсИСМПТК.УстановитьЗаголовокФормыДокумента(, Объект.Ссылка, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	СобытияФормИСМПТККлиентПереопределяемый.ПриОткрытии(ЭтотОбъект, Отказ);
	
	ОбщегоНазначенияИСМПТККлиентПереопределяемый.НачатьОбновлениеКоманд(ЭтотОбъект);
	ОбщегоНазначенияИСМПТККлиентПереопределяемый.НачатьПодключениеОборудованиеПриОткрытииФормы(ЭтаФорма, "СканерШтрихкода");
		
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если Источник = "ПодключаемоеОборудование" И ВводДоступен() Тогда
		Если ИмяСобытия = "ScanData" Тогда
			//В зависимости от того, сканируют код агрегата или код вложенной позиции - разная обработка значения
			Если Не ЭтаФорма.ТекущийЭлемент = Неопределено Тогда
				ОбработкаСобытияСканераОбщая(Параметр, ЭтаФорма.ТекущийЭлемент.Имя);
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли ИмяСобытия = РаботаСДокументамиИСМПТККлиентСервер.ИмяСобытияЗаписьАгрегацияВнеПроизводстваИСЦЭДМ() Тогда
		
		Если НЕ Объект.Ссылка.Пустая() Тогда
			ЭтаФорма.Прочитать();
		КонецЕсли;
				
	Иначе
		РаботаСДокументамиИСМПТККлиентПереопределяемый.ОбработкаОповещенияДокументыИСМПТ(ЭтаФорма, Объект.Ссылка, ИмяСобытия, Параметр, Источник);
	КонецЕсли;
	
	СобытияФормИСМПТККлиентПереопределяемый.ОбработкаОповещения(ЭтотОбъект, ИмяСобытия, Параметр, Источник);
	УправлениеФормой();
	
КонецПроцедуры

&НаКлиенте
Процедура ВнешнееСобытие(Источник, Событие, Данные)
	
	Если Не СобытияФормИСМПТККлиентПереопределяемый.ОбрабатыватьВнешнееСобытиеТО() Тогда 
		Возврат;
	КонецЕсли;
	
	Параметр = Новый Массив;
	Параметр.Добавить(Данные);
	Параметр.Добавить(Неопределено);
	
	Если ВводДоступен() Тогда
		Если Событие = "Штрихкод" ИЛИ Событие = "ПолученШтрихкод" Тогда
			//В зависимости от того, сканируют код агрегата или код вложенной позиции - разная обработка значения
			Если Не ЭтаФорма.ТекущийЭлемент = Неопределено Тогда
				ОбработкаСобытияСканераОбщая(Параметр, ЭтаФорма.ТекущийЭлемент.Имя);
			КонецЕсли;
		КонецЕсли;
	Иначе
		РаботаСДокументамиИСМПТККлиентПереопределяемый.ОбработкаОповещенияДокументыИСМПТ(ЭтаФорма, Объект.Ссылка, Событие, Параметр, Источник);		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	СобытияФормИСМПТКПереопределяемый.ЗаполнитьПризнакИспользованияХарактеристик(Объект.АгрегированныеКМ);
	ИнтерфейсИСМПТК.УстановитьЗаголовокФормыДокумента(, Объект.Ссылка, ЭтаФорма);
	УправлениеФормой();
	СобытияФормИСМПТКПереопределяемый.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	СобытияФормИСМПТККлиентПереопределяемый.ПослеЗаписи(ЭтаФорма, ПараметрыЗаписи);
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	СобытияФормИСМПТКПереопределяемый.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	СобытияФормИСМПТККлиентПереопределяемый.ПередЗаписью(ЭтотОбъект, Отказ, ПараметрыЗаписи);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаСобытияСканераОбщая(Параметр, ЗаполняемыйЭлемент = "АгрегированныеКМ")
	
	ОчиститьСообщения();
	Если Не Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыДокументовИСЦЭДМ.НеОпределен") Тогда
		ТекстСообщения = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияУказаниеКМТолькоВЧерновике();
		ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
	Иначе
		Если Не РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйКлиентСервер.ПроверкаФорматаТранспортногоКодаПройденаУспешно(РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйКлиент.ПреобразоватьДанныеСоСканераВСтруктуру(Параметр)) Тогда
			Возврат;
		КонецЕсли;
		ОбработатьКодМаркировки(РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйКлиент.ПреобразоватьДанныеСоСканераВСтруктуру(Параметр),, ЗаполняемыйЭлемент);
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ПоискПоШтрихкодуВыполнить(Команда)
	
	ОчиститьСообщения();
	Если ИнтеграцияИСМПТКВызовСервера.ИспользоватьАвтоЗапросДопИнформацииЦЭДМ() 
		И Не ЗначениеЗаполнено(Объект.Организация) Тогда
		ТекстСообщения = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияВключенАвтозапросНужнаОрганизацияДляВыполнения("АвтоЗаполнениеДополнительнойИнформацииПоКодамИСЦЭДМ");
		ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;	
	                                                          
	Оповещение = Новый ОписаниеОповещения("ПоискПоШтрихкодуЗавершение", ЭтотОбъект);
	СобытияФормИСМПТККлиент.ПоказатьВводШтрихкода(Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьКодыМаркировкиИзФайла(Команда)
	
	ОчиститьСообщения();
	Если ИнтеграцияИСМПТКВызовСервера.ИспользоватьАвтоЗапросДопИнформацииЦЭДМ() 
		И Не ЗначениеЗаполнено(Объект.Организация) Тогда
		ТекстСообщения = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияВключенАвтозапросНужнаОрганизацияДляВыполнения("АвтоЗаполнениеДополнительнойИнформацииПоКодамИСЦЭДМ");
		ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;

	ИнтеграцияИСМПТККлиент.ЗагрузитьКодыМаркировкиИзФайла(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьКодыМаркировкиИзФайлаСРазделителями(Команда)
	
	ОчиститьСообщения();
	Если ИнтеграцияИСМПТКВызовСервера.ИспользоватьАвтоЗапросДопИнформацииЦЭДМ() 
		И Не ЗначениеЗаполнено(Объект.Организация) Тогда
		ТекстСообщения = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияВключенАвтозапросНужнаОрганизацияДляВыполнения("АвтоЗаполнениеДополнительнойИнформацииПоКодамИСЦЭДМ");
		ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	ЗагрузитьКодыМаркировкиИзФайлаСРазделителямиПродолжение();
				
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьКодыМаркировкиИзФайлаСРазделителямиПродолжение()
	
	ТекстВопроса = НСтр("ru = 'Если выбранный файл CSV содержит информацию по нескольким агрегациям, будут загружены только данные первой упаковки из списка.'")
				 + Символы.ПС + НСтр("ru = 'Для корректной загрузки такого файла необходимо воспользоваться обработкой группового создания Агрегаций.'")
				 + Символы.ПС + НСтр("ru = 'Продолжить загрузку?'");
				 		
	ЗагрузитьКодыМаркировкиИзФайлаСРазделителямиПослеВопроса = Новый ОписаниеОповещения("ЗагрузитьКодыМаркировкиИзФайлаСРазделителямиПослеВопроса", ЭтотОбъект);
	ПоказатьВопрос(ЗагрузитьКодыМаркировкиИзФайлаСРазделителямиПослеВопроса, ТекстВопроса, РежимДиалогаВопрос.ОКОтмена);
		
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьКодыМаркировкиИзФайлаСРазделителямиПослеВопроса(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.ОК Тогда
		
		ДиалогВыбораФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
		ДиалогВыбораФайла.Заголовок = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияЗаголовокВыборФайла();
		ДиалогВыбораФайла.Фильтр = "CSV (Comma-Separated Values)(*.csv)|*.csv";
		ДиалогВыбораФайла.ИндексФильтра = 0;
		ДиалогВыбораФайла.ПредварительныйПросмотр = Ложь;
		ДиалогВыбораФайла.ПроверятьСуществованиеФайла = Истина;
		ДиалогВыбораФайла.МножественныйВыбор = Ложь;
		
		Оповещение = Новый ОписаниеОповещения("ЗагрузитьКодыМаркировкиИзФайлаСРазделителямиЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ДиалогВыбораФайла.Показать(Оповещение);
	
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьКодыМаркировкиВФайл(Команда)
	
	Если Не ЗначениеЗаполнено(Объект.КодАгрегата) Тогда
		ТекстОшибки = НСтр("ru = 'Не заполнен код агрегата, выгрузка в указанном формате невозможна.'");
		ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстОшибки);
		Возврат;
	КонецЕсли;
	
	ДиалогВыбораФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Сохранение);
	ДиалогВыбораФайла.Заголовок = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияЗаголовокВыборФайла();
	ДиалогВыбораФайла.Фильтр 	= "CSV (Comma-Separated Values)(*.csv)|*.csv";
	ДиалогВыбораФайла.ИндексФильтра = 0;
	ДиалогВыбораФайла.ПредварительныйПросмотр 	  = Ложь;
	ДиалогВыбораФайла.ПроверятьСуществованиеФайла = Истина;
	ДиалогВыбораФайла.МножественныйВыбор 		  = Ложь;
		
	Оповещение = Новый ОписаниеОповещения("ВыгрузитьКодыМаркировкиВФайлЗавершение", ЭтотОбъект);
	ДиалогВыбораФайла.Показать(Оповещение);
		
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьДанныеВExcel(Команда)
	
	Если Не ЗначениеЗаполнено(Объект.КодАгрегата) Тогда
		ТекстОшибки = НСтр("ru = 'Не заполнен код агрегата, выгрузка в указанном формате невозможна.'");
		ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстОшибки);
		Возврат;
	КонецЕсли;
	
	ДиалогВыбораФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Сохранение);
	ДиалогВыбораФайла.Заголовок = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияЗаголовокВыборФайла();
	ДиалогВыбораФайла.Фильтр 	= "Все поддерживаемые форматы файлов(*.xls;*.xlsx;)|*.xls;*.xlsx;|Книга Excel 97 (*.xls)|*.xls|Книга Excel 2007 (*.xlsx)|*.xlsx";
	ДиалогВыбораФайла.ИндексФильтра = 0;
	ДиалогВыбораФайла.ПредварительныйПросмотр 	  = Ложь;
	ДиалогВыбораФайла.ПроверятьСуществованиеФайла = Истина;
	ДиалогВыбораФайла.МножественныйВыбор		  = Ложь;
	
	Оповещение = Новый ОписаниеОповещения("СоздатьФайлXLS", ЭтотОбъект);
	ДиалогВыбораФайла.Показать(Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьДанныеИзТСД(Команда)
	
	ОчиститьСообщения();
	Если ИнтеграцияИСМПТКВызовСервера.ИспользоватьАвтоЗапросДопИнформацииЦЭДМ() 
		И Не ЗначениеЗаполнено(Объект.Организация) Тогда
		ТекстСообщения = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияВключенАвтозапросНужнаОрганизацияДляВыполнения("АвтоЗаполнениеДополнительнойИнформацииПоКодамИСЦЭДМ");
		ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	ОбщегоНазначенияИСМПТККлиентПереопределяемый.НачатьЗагрузкуДанныеИзТСД(Новый ОписаниеОповещения("ЗагрузитьИзТСДЗавершение", ЭтотОбъект), УникальныйИдентификатор);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.Организация)
		И Не ЗначениеЗаполнено(Объект.Поставщик) 
		И Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыДокументовИСЦЭДМ.НеОпределен") Тогда
		
		ТекстВопроса = НСтр("ru = 'Выполнить заполнение данных поставщика данными организации?'");
		ОрганизацияПриИзмененииЗавершение = Новый ОписаниеОповещения("ОрганизацияПриИзмененииЗавершение", ЭтаФорма);
		ПоказатьВопрос(ОрганизацияПриИзмененииЗавершение, ТекстВопроса, РежимДиалогаВопрос.ДаНет);	
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзмененииЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		ОрганизацияПриИзмененииНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОрганизацияПриИзмененииНаСервере()
	
	Объект.Поставщик = Объект.Организация;
	СтруктураДанных = ПолучитьРеквизитыОрганизацииКонтрагента(Объект.Поставщик, "Поставщик");
	ЗаполнитьЗначенияСвойств(Объект, СтруктураДанных, "ПоставщикИдентификационныйНомер");
	
КонецПроцедуры

&НаКлиенте
Процедура ПоставщикПриИзменении(Элемент)
	
	Если Не Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыДокументовИСЦЭДМ.НеОпределен") Тогда
		Возврат;
	КонецЕсли;
	Если Не ЗначениеЗаполнено(Объект.Поставщик) Тогда
		Объект.ПоставщикИдентификационныйНомер = "";
		Возврат;
	КонецЕсли;
	
	ПоставщикПриИзмененииНаСервере();
	УправлениеФормой();
	
КонецПроцедуры

&НаСервере
Процедура ПоставщикПриИзмененииНаСервере()
	
	Если ТипЗнч(Объект.Поставщик) = Тип("СправочникСсылка.СкладыИСЦЭДМ") Тогда
		Объект.ПоставщикИдентификационныйНомер = Объект.Поставщик.ИИНБИНСклада;
	Иначе		
		СтруктураДанных = ПолучитьРеквизитыОрганизацииКонтрагента(Объект.Поставщик, "Поставщик");
		ЗаполнитьЗначенияСвойств(Объект, СтруктураДанных, "ПоставщикИдентификационныйНомер");
		
		Если ОбщегоНазначенияИСМПТКВызовСервера.ПроверитьЗначениеКонстанты("ВестиУчетПоСкладамИСЦЭДМ") Тогда
			// Поле Организаци выводится на форму
			Если Не ЗначениеЗаполнено(Объект.Организация) Тогда 
				Объект.Организация = Объект.Поставщик;
			ИначеЕсли Не Объект.Организация = Объект.Поставщик Тогда
				ТекстСообщения = НСтр("ru = 'Указанная в документе организация не соответствует выбранному поставщику!'");	
				ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
			КонецЕсли;
		Иначе
			// Поле скрыто
			Объект.Организация = Объект.Поставщик;
		КонецЕсли;
		
	КонецЕсли;	
			
КонецПроцедуры

&НаКлиенте
Процедура ПоставщикОчистка(Элемент, СтандартнаяОбработка)
	
	Объект.ПоставщикИдентификационныйНомер = "";
	
КонецПроцедуры

&НаКлиенте
Процедура АгрегированныеКМПослеУдаления(Элемент)
	
	//Справочные поля заполняем по последнему добавленному КМ в таблице
	ЗаполнитьНоменклатураХарактеристикаСправочно();
			
КонецПроцедуры

&НаКлиенте
Процедура АгрегированныеКМПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Отказ = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура АгрегированныеКМНоменклатураПриИзменении(Элемент)
	
	ЗаполнитьСлужебныеРеквизитыПоНоменклатуре();
	
КонецПроцедуры

&НаКлиенте
Процедура КодАгрегатаОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Объект.КодАгрегата) Тогда
		ВыполнитьПроверкуКодаАгрегата();
	КонецЕсли;			
	
КонецПроцедуры

#КонецОбласти

#Область Штрихкодирование

&НаКлиенте
Процедура ОбработатьКодМаркировки(ИсходныеДанные, ДополнительныеПараметры = Неопределено, ЗаполняемыйЭлемент) Экспорт
	
	Если ИсходныеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	//Для передачи на сервер КМ, в составе которого есть символы GS (29), требуется дополнительное кодирование
	РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйКлиентСервер.ЗакодироватьШтрихкодДанныхBase64(ИсходныеДанные);
	ИсходныеДанные.Вставить("ФорматBase64", Истина);
	СтруктураКодовМаркировки = ИнтеграцияИСМПТКВызовСервера.ПолучитьКодыМаркировки(ИсходныеДанные);   
	
	Если Не СтруктураКодовМаркировки = Неопределено Тогда 
		
		Если ЗаполняемыйЭлемент = "АгрегированныеКМ" Тогда 
			Если Не НайтиПоКодуИдентификации(СтруктураКодовМаркировки.КодИдентификации) = Неопределено Тогда 
				
				ПараметрыОткрытия = СобытияФормИСМПТККлиент.ПараметрыОткрытияФормыНевозможностиДобавленияОтсканированного();
				ПараметрыОткрытия.Штрихкод    = ИсходныеДанные.Штрихкод;
				ПараметрыОткрытия.ТекстОшибки = НСтр("ru = 'Данный код маркировки уже указан в составе вложенных товаров!'");
				ОткрытьФорму(ОбщегоНазначенияИСМПТККлиент.ПолучитьИмяФормыИнформацияОНевозможностиДобавленияКМ(), ПараметрыОткрытия, ЭтаФорма);
				Возврат;
			КонецЕсли;
		КонецЕсли;
		
		ДобавитьНовыйКод(СтруктураКодовМаркировки, ЗаполняемыйЭлемент);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Функция НайтиПоКодуИдентификации(КодИдентификации)
	
	СтруктураПоиска = Новый Структура("КодИдентификации", КодИдентификации);
	НайденныеСтроки = Объект.АгрегированныеКМ.НайтиСтроки(СтруктураПоиска);
	
	Если НайденныеСтроки.Количество() > 0 Тогда
		Возврат НайденныеСтроки;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура ПоискПоШтрихкодуЗавершение(ДанныеШтрихкода, ДополнительныеПараметры) Экспорт
	
	//Команда обрабатывает ввод в ТЧ Вложенных товаров
	Если Не РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйКлиентСервер.ПроверкаФорматаТранспортногоКодаПройденаУспешно(ДанныеШтрихкода) Тогда
		Возврат;
	КонецЕсли;
	
	ОбработатьКодМаркировки(ДанныеШтрихкода,, "АгрегированныеКМ");
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьНовыйКод(СтруктураКодовМаркировки, ЗаполняемыйЭлемент = "АгрегированныеКМ")
	
	СообщенияОбОшибках = Новый Соответствие();
	Если Не СтруктураКодовМаркировки = Неопределено Тогда 
		
		Если СтруктураКодовМаркировки.ВидУпаковки = ПредопределенноеЗначение("Перечисление.ВидыУпаковокИСМПТК.Логистическая") Тогда
			ЗначНоменклатура   = Неопределено;
			ЗначХарактеристика = Неопределено;
			ЗначВидПродукции   = Объект.ВидПродукции; //у транспортного кода определить невозможно
		Иначе
			ДанныеНоменклатуры = ПолучитьНоменклатуруПоШтрихкоду(СтруктураКодовМаркировки.EAN, СообщенияОбОшибках);
			Если ТипЗнч(ДанныеНоменклатуры) = Тип("Структура") Тогда
				ЗначНоменклатура   = ДанныеНоменклатуры.Номенклатура;
				ЗначХарактеристика = ДанныеНоменклатуры.Характеристика;
			Иначе
				ЗначНоменклатура   = ДанныеНоменклатуры;
				ЗначХарактеристика = Неопределено;
			КонецЕсли;
			Если Не СообщенияОбОшибках.Количество() = 0 Тогда
				Для Каждого СообщениеОшибка Из СообщенияОбОшибках Цикл 
					ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(СообщениеОшибка.Значение);
				КонецЦикла;
			КонецЕсли;
			
			//ЗначВидПродукции = СтруктураКодовМаркировки.ВидПродукции;
		КонецЕсли;
		
		//Если Не ЗначениеЗаполнено(ЗначВидПродукции) Тогда
			ЗначВидПродукции = ПолучитьВидПродукцииПоНоменклатуре(ЗначНоменклатура);
		//КонецЕсли;

		Если Не СтруктураКодовМаркировки.ВидУпаковки = ПредопределенноеЗначение("Перечисление.ВидыУпаковокИСМПТК.Логистическая") Тогда
			Если ЗначениеЗаполнено(ЗначВидПродукции)
				И Не ЗначВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИСМПТК.ЛекарственныеПрепараты") Тогда
							
				ТекстСообщения = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияКМПринадлежитНоменклатуреСОсобенностямиУчетаСПараметрами() + " "
						   	   + РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияДокументНеПредназначенДляРаботыСЭтойТГ();
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%НаименованиеПодсистемы%", РаботаСТекстамиИСМПТККлиентСервер.НаименованиеИСЦЭДМ());
				ТекстСообщения = ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(ТекстСообщения, ЗначНоменклатура, ЗначВидПродукции); 
				ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
				Возврат;
				
			ИначеЕсли Не ЗначениеЗаполнено(ЗначНоменклатура) Тогда
			
				ТекстСообщения = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияДобавитьНовыйКМНеНайденаНоменклатура();
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ШтрихкодЕАН%", СтруктураКодовМаркировки.EAN);
				ТекстСообщения = ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(ТекстСообщения, СтруктураКодовМаркировки.КодИдентификации);
				ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
				
				ТекстСообщенияВЖурнал = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияДобавитьНовыйКМНеНайденаНоменклатураВЖурнал();
				ТекстСообщенияВЖурнал = СтрЗаменить(ТекстСообщенияВЖурнал, "%СсылкаДокументМаркировки%", ?(Не Объект.Ссылка.Пустая(), Объект.Ссылка, ""));
				ТекстСообщенияВЖурнал = СтрЗаменить(ТекстСообщенияВЖурнал, "%ШтрихкодЕАН%", СтруктураКодовМаркировки.EAN);
				ИмяСобытия = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияЗаголовокЗагрузкаКМВДокументахСервиса();
				ОбщегоНазначенияИСМПТКВызовСервера.СоздатьЗаписьЖурналаРегистрации(ИмяСобытия, "Предупреждение",,, ТекстСообщенияВЖурнал);
				
			ИначеЕсли Не ЗначениеЗаполнено(ЗначВидПродукции) Тогда
								
				ТекстСообщения = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияДобавитьНовыйКМНеОпределенВидНоменклатуры();
				ТекстСообщения = ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(ТекстСообщения, СтруктураКодовМаркировки.КодИдентификации, ЗначНоменклатура);
				ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
				
				ТекстСообщенияВЖурнал = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияДобавитьНовыйКМНеОпределенВидНоменклатурыВЖурнал();
				ТекстСообщенияВЖурнал = СтрЗаменить(ТекстСообщенияВЖурнал, "%СсылкаДокументМаркировки%", ?(Не Объект.Ссылка.Пустая(), Объект.Ссылка, ""));
				ТекстСообщенияВЖурнал = СтрЗаменить(ТекстСообщенияВЖурнал, "%ШтрихкодЕАН%", 	   СтруктураКодовМаркировки.EAN);
				ТекстСообщенияВЖурнал = СтрЗаменить(ТекстСообщенияВЖурнал, "%НаименованиеТовара%", ЗначНоменклатура);
				ИмяСобытия = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияЗаголовокЗагрузкаКМВДокументахСервиса();
				ОбщегоНазначенияИСМПТКВызовСервера.СоздатьЗаписьЖурналаРегистрации(ИмяСобытия, "Предупреждение",,, ТекстСообщенияВЖурнал);
						
			КонецЕсли;
		КонецЕсли;
		
		Если ЗаполняемыйЭлемент = "АгрегированныеКМ" Тогда
			//Добавление вложенной позиции
			НоваяСтрока = Объект.АгрегированныеКМ.Добавить();
			НоваяСтрока.КодИдентификации = СтруктураКодовМаркировки.КодИдентификации;
			Если Не РозничноеВыбытиеИСМПТККлиент.ЭтоСтрокаФорматаBase64(СтруктураКодовМаркировки.КодМаркировки) Тогда
				КодМаркировки = РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйКлиентСервер.ШтрихкодВBase64(СтруктураКодовМаркировки.КодМаркировки);
			Иначе
				КодМаркировки = СтруктураКодовМаркировки.КодМаркировки;
			КонецЕсли;			
			НоваяСтрока.КодМаркировки  = КодМаркировки;
			НоваяСтрока.Номенклатура   = ЗначНоменклатура;
			НоваяСтрока.Характеристика = ЗначХарактеристика;
			НоваяСтрока.GTIN = СтруктураКодовМаркировки.GTIN;
			Если СтруктураКодовМаркировки.Свойство("GTINВерхнегоУровня") Тогда 
				НоваяСтрока.GTINВерхнегоУровня  = СтруктураКодовМаркировки.GTINВерхнегоУровня;
			КонецЕсли;
			НоваяСтрока.EAN = СтруктураКодовМаркировки.EAN;
			НоваяСтрока.ВидПродукции = ЗначВидПродукции;
			
			//Справочные поля заполняем по последнему добавленному КМ в таблице
			ЗаполнитьНоменклатураХарактеристикаСправочно();
			
			//Проверяем состояние кода маркировки и выводим предупреждение, если с кодом что-то не так
			Если ИнтеграцияИСМПТКВызовСервера.ИспользоватьАвтоЗапросДопИнформацииЦЭДМ() 
				И ЗначениеЗаполнено(Объект.Организация) Тогда
				ПолучитьДополнительныеСведенияПоКодамВИСЦЭДМНаСервере();
			КонецЕсли;
		Иначе
			Объект.КодАгрегата = РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйКлиентСервер.Base64ВШтрихкод(СтруктураКодовМаркировки.КодМаркировки);
		КонецЕсли;				
		
		ЗаполнитьСлужебныеРеквизитыПоНоменклатуре();
		Модифицированность = Истина;
		УправлениеФормой();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьПроцедуруФоновоВыполнено(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияОперацияОтменена());
		Возврат;
	ИначеЕсли Результат.Статус = "Ошибка" Тогда
		ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(Результат.ПодробноеПредставлениеОшибки);
	ИначеЕсли Результат.Статус = "Выполнено" Тогда
		
		// обрабатываем результат
		Модифицированность = Истина;
		
		Если ОбработатьРезультатЗагрузкиКодов(Результат.АдресРезультата) Тогда
			
			Модифицированность = Истина;
			ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияОперацияЗагрузкиКМЗавершена());
			
			Если ИнтеграцияИСМПТКВызовСервера.ИспользоватьАвтоЗапросДопИнформацииЦЭДМ() 
				И ЗначениеЗаполнено(Объект.Организация) Тогда 
				ПолучитьДополнительныеСведенияПоКодамВИСЦЭДМНаСервере();
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	УправлениеФормой();
	
КонецПроцедуры

&НаСервере
Функция ОбработатьРезультатЗагрузкиКодов(АдресРезультата)
	
	РезультатЗадания      = ПолучитьИзВременногоХранилища(АдресРезультата);
	КоличествоЗагруженных = РезультатЗадания.ТаблицаПолученныхКодов.Количество();
	
	Если РезультатЗадания.Свойство("МассивОшибок") И Не РезультатЗадания.МассивОшибок.Количество() = 0 Тогда
		Для Каждого ТекстОшибки Из РезультатЗадания.МассивОшибок Цикл 
			ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстОшибки);
		КонецЦикла;
	КонецЕсли;
	
	Если РезультатЗадания.Успешно И НЕ КоличествоЗагруженных = 0 Тогда
		СкорректироватьДанныеГрупповыхУпаковок(РезультатЗадания.ТаблицаПолученныхКодов);
		
		Для Каждого Строка Из РезультатЗадания.ТаблицаПолученныхКодов Цикл
			Если Не ЗначениеЗаполнено(Строка.Номенклатура)
				И Не Строка.ВидУпаковки = ПредопределенноеЗначение("Перечисление.ВидыУпаковокИСМПТК.Логистическая") Тогда
				// Если не смогли определить номенклатуру - КМ добавляем, но обращаем внимание пользователя на проблему с ним.
				ТекстСообщения = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияОбработкаСпискаКМНеНайденаНоменклатура();
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ШтрихкодЕАН%", Строка.EAN);
				ТекстСообщения = ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(ТекстСообщения, Строка.КодИдентификации);
				ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
				
				ТекстСообщенияВЖурнал = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияОбработкаСпискаКМНеНайденаНоменклатураВЖурнал();
				ТекстСообщенияВЖурнал = СтрЗаменить(ТекстСообщенияВЖурнал, "%СсылкаДокументМаркировки%", ?(Не Объект.Ссылка.Пустая(), Объект.Ссылка, ""));
				ТекстСообщенияВЖурнал = СтрЗаменить(ТекстСообщенияВЖурнал, "%ШтрихкодЕАН%", Строка.EAN);
				ИмяСобытия = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияЗаголовокЗагрузкаКМВДокументахСервиса();
				ОбщегоНазначенияИСМПТКВызовСервера.СоздатьЗаписьЖурналаРегистрации(ИмяСобытия, "Предупреждение",,, ТекстСообщенияВЖурнал);
			КонецЕсли;
					
			Если ЗначениеЗаполнено(Строка.Номенклатура)
				И Не ЗначениеЗаполнено(Строка.ВидПродукции) Тогда
				
				//Если товар определили, но не смогли понять товарную группу - добавляем, но предупреждаем.
				ТекстСообщения = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияОбработкаСпискаКМНеОпределенВидНоменклатуры();
				ТекстСообщения = ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(ТекстСообщения, Строка.КодИдентификации, Строка.Номенклатура);
				ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
				
				ТекстСообщенияВЖурнал = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияОбработкаСпискаКМНеОпределенВидНоменклатурыВЖурнал();
				ТекстСообщенияВЖурнал = СтрЗаменить(ТекстСообщенияВЖурнал, "%СсылкаДокументМаркировки%", ?(Не Объект.Ссылка.Пустая(), Объект.Ссылка, ""));
				ТекстСообщенияВЖурнал = СтрЗаменить(ТекстСообщенияВЖурнал, "%ШтрихкодЕАН%", 	   Строка.EAN);
				ТекстСообщенияВЖурнал = СтрЗаменить(ТекстСообщенияВЖурнал, "%НаименованиеТовара%", Строка.Номенклатура);
				ИмяСобытия = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияЗаголовокЗагрузкаКМВДокументахСервиса();
				ОбщегоНазначенияИСМПТКВызовСервера.СоздатьЗаписьЖурналаРегистрации(ИмяСобытия, "Предупреждение",,, ТекстСообщенияВЖурнал);
				
			ИначеЕсли ЗначениеЗаполнено(Строка.Номенклатура)
				И Не Строка.ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИСМПТК.ЛекарственныеПрепараты") Тогда
				
				//Если товар определили, но он не подходит этому документу - сообщаем и код не добавляем.
				ТекстСообщения = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияОбработкаСпискаКМНеСоответствуетВидуПродукцииДокумента(); 
				ТекстСообщения = ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(
								 ТекстСообщения,
								 Строка.КодИдентификации,
								 Строка.Номенклатура,
								 Строка.ВидПродукции);
				ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
				Продолжить;
				
			КонецЕсли;
					
			НайденныеСтроки = Объект.АгрегированныеКМ.НайтиСтроки(Новый Структура("КодИдентификации", Строка.КодИдентификации));
			Если НайденныеСтроки.Количество() = 0 Тогда
				ЗаполнитьЗначенияСвойств(Объект.АгрегированныеКМ.Добавить(), Строка);
			КонецЕсли;
		КонецЦикла;
		//Справочные поля заполняем по последнему добавленному КМ в таблице
		ЗаполнитьНоменклатураХарактеристикаСправочно(); 
		Возврат Истина;
	Иначе 
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

&НаСервере
Процедура СкорректироватьДанныеГрупповыхУпаковок(ТаблицаПолученныхКодов)
	
	Для Каждого СтрокаТЧ Из ТаблицаПолученныхКодов Цикл 
		Если Не ЗначениеЗаполнено(СтрокаТЧ.GTIN) И СтрокаТЧ.ВидУпаковки = Перечисления.ВидыУпаковокИСМПТК.Групповая Тогда 
			СтрокаТЧ.GTIN = СтрокаТЧ.GTINВерхнегоУровня;
		КонецЕсли;
	КонецЦикла;
		
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьКодыМаркировкиИзФайлаСРазделителямиЗавершение(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	
	Если НЕ ДополнительныеПараметры = Неопределено Тогда 
		НужноОчиститьКодАгрегата = ДополнительныеПараметры.НужноОчиститьКодАгрегата;
	Иначе
		НужноОчиститьКодАгрегата = Ложь;
	КонецЕсли;
	
	Если Не ВыбранныеФайлы = Неопределено Тогда
		
		ПрочитанныйФайл = Новый ТекстовыйДокумент;
		ПрочитанныйФайл.Прочитать(ВыбранныеФайлы[0]);
		
		СтруктураКода = Новый Структура("Штрихкод, Количество", "", 1);
		КодАгрегатаПредыдущий  = "";
		СписокВложенныхТоваров = Новый СписокЗначений;
		ОшибкаЗагрузки 		   = Ложь;
		
		Для НомерСтроки = 1 По ПрочитанныйФайл.КоличествоСтрок() Цикл
			
			СтрокаФайла = ПрочитанныйФайл.ПолучитьСтроку(НомерСтроки);
			
			ПозицияРазделителя = СтрНайти(СтрокаФайла, ",");
			Если ПозицияРазделителя = 0 Тогда
				ОшибкаЗагрузки = Истина;
				ТекстОшибки    = НСтр("ru = 'Указанный файл не соответствует ожидаемой структуре, загрузка данных не была произведена!'");
				ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстОшибки);
				Прервать;
			КонецЕсли;
				
			КодАгрегатаИзСтроки   = Лев(СтрокаФайла,  ПозицияРазделителя - 1);
			КодМаркировкиИзСтроки = Сред(СтрокаФайла, ПозицияРазделителя + 1);
			
			Если КодАгрегатаИзСтроки = КодАгрегатаПредыдущий ИЛИ НомерСтроки = 1 Тогда
				СписокВложенныхТоваров.Добавить(КодМаркировкиИзСтроки);
				КодАгрегатаПредыдущий = КодАгрегатаИзСтроки;
			Иначе
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
		Если Не ОшибкаЗагрузки Тогда 
			
			КодАгрегацииBase64 = РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйКлиентСервер.ШтрихкодВBase64(КодАгрегатаПредыдущий); //Код агрегата в кодировке
			Для Каждого СтрокаКМ Из СписокВложенныхТоваров Цикл
				ДанныеШК = Новый Структура("Штрихкод, Количество, ФорматBase64", РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйКлиентСервер.ШтрихкодВBase64(СтрокаКМ.Значение), 1, Истина);
				ДобавитьКодМаркировкиИзФайла(ДанныеШК);
			КонецЦикла;
				
			//Если код агрегата - DataMatrix, разделяем его на КМ и КИ. Если SSCC - оставляем без изменений
			ИсходныеДанные = Новый Структура();
			ИсходныеДанные.Вставить("Штрихкод", 	КодАгрегацииBase64);
			ИсходныеДанные.Вставить("ФорматBase64", Истина);
			СтруктураКодовМаркировки = ИнтеграцияИСМПТКВызовСервера.ПолучитьКодыМаркировки(ИсходныеДанные);
			
			Если Не ТипЗнч(СтруктураКодовМаркировки) = Тип("Строка") Тогда 
				//Удалось разобрать код, значит это групповая упаковка
				Объект.КодАгрегата = СтруктураКодовМаркировки.КодИдентификации;
			Иначе
				//Это SSCC 
				Объект.КодАгрегата = РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйКлиентСервер.Base64ВШтрихкод(КодАгрегацииBase64);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьКодыМаркировкиВФайлЗавершение(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	
	Если Не ВыбранныеФайлы = Неопределено Тогда
		
		НовыйТекстовыйДокумент = Новый ТекстовыйДокумент;
				
		Для Каждого СтрокаТЧ Из Объект.АгрегированныеКМ Цикл
			СтрокаЗагрузки = Объект.КодАгрегата + "," + СтрокаТЧ.КодИдентификации;
			НовыйТекстовыйДокумент.ДобавитьСтроку(СтрокаЗагрузки);
		КонецЦикла;
		
		НовыйТекстовыйДокумент.Записать(ВыбранныеФайлы[0]);
				
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура СоздатьФайлXLS(ВыбранныеФайлы, ДополнительныеПараметрым) Экспорт
	
	Если Не ВыбранныеФайлы = Неопределено Тогда
		
		ТабличныйДокумент = Новый ТабличныйДокумент;
		Итератор = 1;
		Для Каждого СтрокаТЧ Из Объект.АгрегированныеКМ Цикл
			
			КодТовара    = СтрокаТЧ.КодИдентификации;
			КодДляЗаписи = Объект.КодАгрегата + "," + КодТовара;
						
			ТабличныйДокумент.Область("R" + Формат(Итератор,"ЧГ=0") + "C1").Текст = КодДляЗаписи;
			Итератор = Итератор + 1;
		КонецЦикла;
		
		ТабличныйДокумент.Записать(ВыбранныеФайлы[0], ТипФайлаТабличногоДокумента.XLS97);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьКодМаркировкиИзФайла(ИсходныеДанные)
	
	СтруктураКодовМаркировки = ИнтеграцияИСМПТКВызовСервера.ПолучитьКодыМаркировки(ИсходныеДанные);   
	
	//Если удалось разобрать код, вернется структура. Если нет - текст сообщения об ошибке.
	Если ТипЗнч(СтруктураКодовМаркировки) = Тип("Строка") Тогда
		ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(СтруктураКодовМаркировки);
		Возврат;
	КонецЕсли;
	
	ТекстОшибки = "";
	
	Если Не НайтиПоКодуИдентификации(СтруктураКодовМаркировки.КодИдентификации) = Неопределено Тогда	
		
		ТекстОшибки = НСтр("ru = 'Код маркировки %1 не был добавлен, поскольку уже присутствует в документе!'");
		ТекстОшибки = ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(ТекстОшибки, СтруктураКодовМаркировки.КодИдентификации); 
		ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстОшибки);
		
	Иначе
		
		ДобавитьНовыйКод(СтруктураКодовМаркировки);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьРеквизитыОрганизацииКонтрагента(Ссылка, Реквизит) Экспорт
	
	Возврат ИнтеграцияИСМПТКПереопределяемый.ПолучитьРеквизитыОрганизацииКонтрагента(Ссылка, Реквизит);
	
КонецФункции

&НаСервере
Функция ПолучитьВидПродукцииПоНоменклатуре(Номенклатура)
	
	Возврат ОбщегоНазначенияИСМПТКПереопределяемый.ПолучитьВидПродукцииПоНоменклатуре(Номенклатура);
	
КонецФункции

&НаСервере
Процедура УправлениеФормой() 
	
	//Редактирование формы
	РазрешенТолькоПросмотр = Объект.Статус <> ПредопределенноеЗначение("Перечисление.СтатусыДокументовИСЦЭДМ.НеОпределен");
	
	//Генерация SSCC
	Если ПравоДоступа("Просмотр", Метаданные.РегистрыСведений.ШтрихкодыSSCCИСМПТК) Тогда
		ОбщегоНазначенияИСМПТККлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГруппаSSCCБиблиотека", 
																		   "Доступность", ЗначениеЗаполнено(Объект.Организация) И Не РазрешенТолькоПросмотр);
	Иначе
		ОбщегоНазначенияИСМПТККлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГруппаSSCCБиблиотека", 
																		   "Видимость", Ложь);
	КонецЕсли;
		
	ОбщегоНазначенияИСМПТККлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "УпаковкиКодАгрегатаПоискПоШтрихкоду", 
																	   "Доступность", Не РазрешенТолькоПросмотр);
	
	//Общее
	ОбщегоНазначенияИСМПТККлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "АгрегированныеКМ",
																	   "ТолькоПросмотр", РазрешенТолькоПросмотр);
	ОбщегоНазначенияИСМПТККлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "Упаковки",
																	   "ТолькоПросмотр", РазрешенТолькоПросмотр);
	ОбщегоНазначенияИСМПТККлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГруппаШапка",
																	   "ТолькоПросмотр", РазрешенТолькоПросмотр);
	//Агрегаты
	ОбщегоНазначенияИСМПТККлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГруппаКодыАгрегацииСписком",
																	   "ТолькоПросмотр", РазрешенТолькоПросмотр);
	ОбщегоНазначенияИСМПТККлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГруппаКодыАгрегации",
																	   "ТолькоПросмотр", РазрешенТолькоПросмотр);
	//Команды ТЧ
	ОбщегоНазначенияИСМПТККлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "АгрегированныеКМПоискПоШтрихкоду",
																	   "Доступность", Не РазрешенТолькоПросмотр);
	ОбщегоНазначенияИСМПТККлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ТоварыЗагрузитьДанныеИзТСД",
																	   "Доступность", Не РазрешенТолькоПросмотр);
	ОбщегоНазначенияИСМПТККлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "АгрегированныеКМЗагрузитьКодыМаркировкиИзФайла",
																	   "Доступность", Не РазрешенТолькоПросмотр);
	ОбщегоНазначенияИСМПТККлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "АгрегированныеКМЗагрузитьКодыМаркировкиИзФайлаСРазделителями",
																	   "Доступность", Не РазрешенТолькоПросмотр);
	
	//Характеристики
	ХарактеристикиИспользуются = ИнтеграцияИСМПТКПереопределяемый.ПроверитьИспользованиеХарактеристик();
	Если ХарактеристикиИспользуются Тогда //в целом по конфигурации 
		Если ЗначениеЗаполнено(Характеристика) Тогда //у конкретной номенклатуры в этой форме
			ОбщегоНазначенияИСМПТККлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "Характеристика",
																			   "Видимость", ХарактеристикиИспользуются);
		Иначе
			ОбщегоНазначенияИСМПТККлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "Характеристика",
																			   "Видимость", Ложь);
		КонецЕсли;	
	КонецЕсли;
		
	//Отражение в учете
	ДокументМожноОтразитьВБазе = РаботаСДокументамиИСМПТКПереопределяемый.ПроверитьВозможностьОтраженияДокументаВУчете(ОбщегоНазначенияИСМПТКВызовСервера.ИмяДокументаАгрегацияВнеПроизводстваИСЦЭДМ());
	ОбщегоНазначенияИСМПТККлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ФормаГруппаОтражение",
																	   "Видимость", ДокументМожноОтразитьВБазе);
	ОбщегоНазначенияИСМПТККлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ПредставлениеДокументаОснования",
																	   "Видимость", ДокументМожноОтразитьВБазе);
	
	//Мобильное приложение
	ИспользоватьПриложение = Константы.ИспользоватьМобильноеПриложениеИСМПТК.Получить();
	Если Не ИспользоватьПриложение Тогда
		ОбщегоНазначенияИСМПТККлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "АгрегированныеКМЗагрузитьКодыМаркировкиИзМобильногоПриложения",
																		   "Видимость", Ложь);
	Иначе
		ОбщегоНазначенияИСМПТККлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "АгрегированныеКМЗагрузитьКодыМаркировкиИзМобильногоПриложения",
																		   "Доступность", Не РазрешенТолькоПросмотр);
	КонецЕсли;
	
	//ТЧ Ошибки выводится только если в ней есть какие-то записи
	ОбщегоНазначенияИСМПТККлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "Ошибки", 
																	   "Видимость", ?(Объект.Ошибки.Количество() = 0, Ложь, Истина));
	
	ВедетсяУчетПоСкладам = ОбщегоНазначенияИСМПТКВызовСервера.ПроверитьЗначениеКонстанты("ВестиУчетПоСкладамИСЦЭДМ");
	ОбщегоНазначенияИСМПТККлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "Организация",
																	   "Видимость", ВедетсяУчетПоСкладам);
	
	СобытияФормИСМПТКПереопределяемый.УстановитьУсловноеОформлениеХарактеристикНоменклатуры(ЭтаФорма, "АгрегированныеКМХарактеристика","Объект.АгрегированныеКМ.ХарактеристикиИспользуются");
	УстановитьВидимостьКнопокИзмененияСтатуса();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСлужебныеРеквизитыПоНоменклатуре()
	
	ПараметрыЗаполненияРеквизитов = Новый Структура;
	ПараметрыЗаполненияРеквизитов.Вставить("ЗаполнитьПризнакХарактеристикиИспользуются",
											Новый Структура("Номенклатура", "ХарактеристикиИспользуются"));
											
	СобытияФормИСМПТКПереопределяемый.ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВКоллекции(Объект.АгрегированныеКМ, ПараметрыЗаполненияРеквизитов);
		
КонецПроцедуры

&НаСервере
функция ПолучитьНоменклатуруПоШтрихкоду(EAN, СообщенияОбОшибках = Неопределено)
	
	Если СообщенияОбОшибках = Неопределено Тогда
		//Не во всех местах вызова функции нужно выводить пользователю сообщения, поэтому заменяеям на коллекцию-пустышку
		СообщенияОбОшибках = Новый Соответствие();
	КонецЕсли;
	
	НоменклатураЗнач = Неопределено;
	
	НайденныеСтроки = Объект.АгрегированныеКМ.НайтиСтроки(Новый Структура("EAN", EAN));
	Если Не НайденныеСтроки.Количество() = 0 Тогда 
		НоменклатураЗнач   = НайденныеСтроки[0].Номенклатура;
		ХарактеристикаЗнач = НайденныеСтроки[0].Характеристика;
		ВосстановленныеДанные = Новый Структура("Номенклатура, Характеристика", НоменклатураЗнач, ХарактеристикаЗнач);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(НоменклатураЗнач) Тогда 
		Возврат ВосстановленныеДанные;
	Иначе
		Возврат ОбщегоНазначенияИСМПТКПереопределяемый.ПолучитьДанныеНоменклатурыИзРегистраШтрихкодовПоШтрихкоду(, EAN,, СообщенияОбОшибках);
	КонецЕсли;
	
КонецФункции

&НаСервере
Процедура УстановитьВидимостьКнопокИзмененияСтатуса()
	
	НеОтправлен = Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыДокументовИСЦЭДМ.НеОпределен");
	
	//ОбщегоНазначенияИСМПТККлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ФормаДокументАгрегацияВнеПроизводстваИСЦЭДМОтправить", 
	//															"Видимость", НеОтправлен);
	//ОбщегоНазначенияИСМПТККлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ФормаДокументАгрегацияВнеПроизводстваИСЦЭДМИзменитьСоставКодов", 
	//															"Видимость", Не НеОтправлен);
	ОбщегоНазначенияИСМПТККлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ФормаОбщаяКомандаПроверитьИСМПТК", "Видимость", НеОтправлен);
		
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьВидПродукцииИОграничитьВидимостьПоФОУчета()
	
	Объект.ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИСМПТК.ЛекарственныеПрепараты");
	Объект.ВидУпаковки  = ПредопределенноеЗначение("Перечисление.ВидыУпаковокИСМПТК.Логистическая");
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьНоменклатураХарактеристикаСправочно()
	
	КоличествоКодов = Объект.АгрегированныеКМ.Количество();
	Если Не КоличествоКодов = 0 Тогда
		Номенклатура   = Объект.АгрегированныеКМ[КоличествоКодов - 1].Номенклатура;
		Характеристика = Объект.АгрегированныеКМ[КоличествоКодов - 1].Характеристика;
	Иначе
		Номенклатура   = "";
		Характеристика = "";
	КонецЕсли;
	УправлениеФормой()
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьПроверкуКодаАгрегата(ЕстьОшибки = Ложь)
	
	КодАгрегатаBase64 = ОбщегоНазначенияИСМПТКВызовСервера.СтрокуВBase64(Объект.КодАгрегата);
	ДанныеПроверки = Новый Структура("Штрихкод, Количество, ФорматBase64", КодАгрегатаBase64, 1, Истина); 
	Если Не РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйКлиентСервер.ПроверкаФорматаТранспортногоКодаПройденаУспешно(ДанныеПроверки, Ложь) Тогда
		ТекстСообщения = НСтр("ru = 'Введенный Код упаковки не соответствует установленному формату!'");
		ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
		ЕстьОшибки = Истина;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область РаботаСТСД

&НаКлиенте
Процедура ЗагрузитьИзТСДЗавершение(РезультатВыполнения, ДополнительныеПараметры) Экспорт
	
	СобытияФормИСМПТККлиентПереопределяемый.ПриПолученииДанныхИзТСД(Новый ОписаниеОповещения("Подключаемый_ПолученыДанныеИзТСД", ЭтотОбъект), ЭтотОбъект, РезультатВыполнения);
		
КонецПроцедуры 

&НаКлиенте
Процедура ЗагрузитьИзТСДПослеАвторизации(РезультатАвторизации, Штрихкоды) Экспорт
	
	Подключаемый_ПолученыДанныеИзТСД(Штрихкоды, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПолученыДанныеИзТСД(Штрихкоды, АвторизацияЗапрашивалась = Неопределено) Экспорт
	
	Если Штрихкоды.Количество() = 0 Тогда
		
		ПоказатьПредупреждение( ,РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияВДанныхИзТСДНетИнформацииОКодахМаркировки());
		Возврат;
		
	КонецЕсли;
	
	СобытияФормИСМПТККлиент.ОповеститьОНачалеОбработкиДанныхТСД();
	ПараметрыСканирования = РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйКлиент.ПараметрыСканирования(ЭтотОбъект);
	СобытияФормИСМПТККлиент.ПреобразоватьШтрихкодыТСДВBase64(Штрихкоды);
	ЗагрузкаДанныхТСД = ОбработатьПолученныеДанныеТСДНаСервере(Штрихкоды, ПараметрыСканирования, Неопределено);
	
	ОбработатьПолученныеДанныеТСД();
	
КонецПроцедуры

&НаСервере
Функция ОбработатьПолученныеДанныеТСДНаСервере(ШтрихкодыТСД, ПараметрыСканирования, КэшированныеЗначения)
	
	Результат = РаботаСДокументамиИСМПТК.ОбработатьПолученныеДанныеТСДВДокументе(ЭтотОбъект, ШтрихкодыТСД, ПараметрыСканирования);
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ОбработатьПолученныеДанныеТСД()
	
	Если ЗагрузкаДанныхТСД = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	МассивКодовМаркировки = Новый Массив;
	
	Для НомерСтроки = 0 По ЗагрузкаДанныхТСД.Всего - 1 Цикл
		Штрихкод = ЗагрузкаДанныхТСД.ШтрихкодыТСД[НомерСтроки];
		ДанныеШтрихкода = Новый Структура("ШтрихКод, ФорматBase64, Количество", Штрихкод.Штрихкод, Ложь, 1);
		РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйКлиентСервер.ЗакодироватьШтрихкодДанныхBase64(ДанныеШтрихкода);
		МассивКодовМаркировки.Добавить(ДанныеШтрихкода);
	КонецЦикла;
	
	СтруктураПараметров = Новый Структура("ФормаОбъекта, МассивКодовМаркировки", ЭтотОбъект, МассивКодовМаркировки);
	
	ИнтеграцияИСМПТККлиент.ЗагрузитьКодыМаркировкиИзТСДЗавершение(Неопределено, СтруктураПараметров);
	
КонецПроцедуры

#КонецОбласти

#Область SSCC

&НаКлиенте
Процедура СгенерироватьШтрихкодПослеВопроса() Экспорт
	
	ПередаваемыеПараметры = Новый Структура;
	ПередаваемыеПараметры.Вставить("ТипУпаковки",  ПредопределенноеЗначение("Перечисление.ТипыУпаковокИСМПТК.МонотоварнаяУпаковка"));
	ПередаваемыеПараметры.Вставить("ТипШтрихкода", ПредопределенноеЗначение("Перечисление.ТипыШтрихкодовИСМПТК.SSCC"));
	ПередаваемыеПараметры.Вставить("Организация",  Объект.Организация);
	ПередаваемыеПараметры.Вставить("ВидПродукции", Объект.ВидПродукции);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОбработкаГенерацииШтрихкода", ЭтотОбъект);
	
	ОткрытьФорму("Обработка.ГенерацияШтрихкодовИСМПТК.Форма.ФормаГенерацииSSCC", ПередаваемыеПараметры, ЭтотОбъект, УникальныйИдентификатор,,,
		ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры
	
&НаКлиенте
Процедура ОбработкаГенерацииШтрихкода(Результат, ДополнительныеПараметры) Экспорт
	
	Если НЕ Результат = Неопределено Тогда
		Если ТипЗнч(Результат) = Тип("Структура") Тогда 
			Штрихкод = Результат.Штрихкод;
		Иначе
			Штрихкод = Результат;
		КонецЕсли;
		
		Объект.КодАгрегата = Штрихкод;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область МобильноеПриложение

&НаКлиенте
Процедура МобильноеПриложениеЗагрузитьТовары(Команда)
	
	ОчиститьСообщения();
	Если ИнтеграцияИСМПТКВызовСервера.ИспользоватьАвтоЗапросДопИнформацииЦЭДМ() 
		И Не ЗначениеЗаполнено(Объект.Организация) Тогда
		ТекстСообщения = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияВключенАвтозапросНужнаОрганизацияДляВыполнения("АвтоЗаполнениеДополнительнойИнформацииПоКодамИСЦЭДМ");
		ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	ОповещениеПослеВыбораЭлемента = Новый ОписаниеОповещения("МобильноеПриложениеЗагрузитьТоварыОбработкаВыбора", ЭтотОбъект);
	Список = РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйВызовСервера.МобильноеПриложениеЗагрузитьТоварыНаСервере();
	Список.ПоказатьОтметкуЭлементов(ОповещениеПослеВыбораЭлемента, РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияВыборДокументаДляЗагрузки());
	
КонецПроцедуры

&НаКлиенте
Процедура МобильноеПриложениеЗагрузитьТоварыОбработкаВыбора(Элемент, Параметры) Экспорт
	
	РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйКлиент.МобильноеПриложениеЗагрузитьТоварыОбработкаВыбораОбщая(ЭтотОбъект, Элемент, Параметры);

КонецПроцедуры

#КонецОбласти

#Область ПолучениеДополнительнойИнформацииПоКоду

&НаКлиенте
Процедура ПолучитьДополнительныеСведенияПоКодамВИСЦЭДМ(Команда)
	
	ОчиститьСообщения();
	
	ЕстьОшибки = Ложь;
	Если Не ЗначениеЗаполнено(Объект.ПоставщикИдентификационныйНомер) Тогда
		ТекстСообщения = НСтр("ru = 'Для запроса информации с сервера необходимо указать ИИН/БИН организации.'");
		ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);	
	КонецЕсли;
	Если Объект.АгрегированныеКМ.Количество() = 0 Тогда
		ТекстСообщения = НСтр("ru = 'В таблице ""Вложенные товары"" отсутствуют сведения о кодах маркировки.'")
					   + " " + РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияВыполнениеКомандыНевозможно(); 
		ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);	
	КонецЕсли;  
	Если ЕстьОшибки Тогда
		Возврат;
	КонецЕсли;
		
 	ПолучитьДополнительныеСведенияПоКодамВИСЦЭДМНаСервере();
		
КонецПроцедуры

&НаСервере
Процедура ПолучитьДополнительныеСведенияПоКодамВИСЦЭДМНаСервере(КодИдентификации = Неопределено, СтруктураКодовМаркировки = Неопределено)
	
	Если ЗначениеЗаполнено(Объект.Организация) Тогда 
		УПользователяЕстьНастройкаОбмена = ИнтерфейсИСМПТК.ПроверитьНаличиеНастройкиПодключенияУПользователя(Объект.Организация);
		Если Не УПользователяЕстьНастройкаОбмена Тогда
			ТекстСообщения = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияНеОбнаруженоПрофиляДоступаЦЭДМПроверьтеНастройкиСервисаСПараметром();
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%РазделАдминистрирование%", ОбщегоНазначенияИСМПТКВызовСервераПереопределяемый.ПолучитьПредставлениеРазделАдминистрирование());
			ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);	
			Возврат;
		КонецЕсли;
	Иначе
		ТекстСообщения = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияНужноУказатьОрганизациюДляАвторизацииВСистемеЦЭДМ();
		ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);	
		Возврат;
	КонецЕсли;
		
	МассивДляЗапросаИнформации = Новый Массив();
	Если КодИдентификации = Неопределено Тогда
	//Выполняем для всей таблицы	
		Для Каждого Строка Из Объект.АгрегированныеКМ Цикл
			МассивДляЗапросаИнформации.Добавить(Строка.КодИдентификации);
		КонецЦикла;
	Иначе
		МассивДляЗапросаИнформации.Добавить(КодИдентификации);
	КонецЕсли;
	
	ИнформацияОКодах = ИнтеграцияИСМПТК.ПолучитьДополнительныеСведенияОКодахМаркировки(МассивДляЗапросаИнформации, Объект.Организация);
	Если Не ИнформацияОКодах = Неопределено Тогда
		
		Для Каждого СтрокаТЧ Из Объект.АгрегированныеКМ Цикл
			
			Если ЗначениеЗаполнено(КодИдентификации) Тогда
				//Проверять по данным сервера нужно не всю ТЧ
				Если Не СтрокаТЧ.КодИдентификации = КодИдентификации Тогда
					Продолжить;
				КонецЕсли;
			КонецЕсли;
			
			НайденныйОтвет = ИнформацияОКодах.Получить(СтрокаТЧ.КодИдентификации);
			Если НайденныйОтвет = Неопределено Тогда
				ТекстСообщения = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияИнформацияОКодеНеНайденаНаСервереСПараметром();
				ТекстСообщения = ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(ТекстСообщения, СтрокаТЧ.КодИдентификации);
				ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
			Иначе
				//Заполняем недостающие данные
				СтрокаТЧ.СрокГодности = НайденныйОтвет.СрокГодности;
				СтрокаТЧ.НомерПартии  = НайденныйОтвет.НомерПартии;
								
				Если Не СтруктураКодовМаркировки = Неопределено Тогда
					Если Не СтруктураКодовМаркировки.Свойство("СрокГодности") Тогда
						СтруктураКодовМаркировки.Вставить("СрокГодности", НайденныйОтвет.СрокГодности);
					КонецЕсли;
					Если Не СтруктураКодовМаркировки.Свойство("НомерПартии") Тогда
						СтруктураКодовМаркировки.Вставить("НомерПартии", НайденныйОтвет.НомерПартии);
					КонецЕсли;
				КонецЕсли;
								
				//Проверяем статус кода и соответствие владельца
				Ошибочный = Ложь;
				ВыполнитьПроверкуСтатусаИВладельцаПоДаннымЦЭДМ(СтрокаТЧ.КодИдентификации, НайденныйОтвет.СтатусКМ, НайденныйОтвет.БИНВладельца, Ошибочный);
				СтрокаТЧ.Ошибочный = Ошибочный;

			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ВыполнитьПроверкуСтатусаИВладельцаПоДаннымЦЭДМ(КодИдентификации, СтатусСервер, ВладелецСервер, Ошибочный)
	
	Ошибочный = Ложь;
	МассивДопустимыхСтатусовКМ = ИнтеграцияИСМПТК.ДопустимыеСтатусыКМДляДокументаИСЦЭДМ("АгрегацияВнеПроизводства");
	Если МассивДопустимыхСтатусовКМ.Найти(СтатусСервер) = Неопределено Тогда 
		ТекстСообщения = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияКодИмеетСтатусЗапрещенныйВДокументеМогутБытьПроблемы();
		ТекстСообщения = ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(ТекстСообщения, КодИдентификации, ?(ЗначениеЗаполнено(СтатусСервер), СтатусСервер, "Не определен"));
		ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
		Ошибочный = Истина;
	КонецЕсли;
	
	Если Не Объект.ПоставщикИдентификационныйНомер = ВладелецСервер Тогда
		Если ОбщегоНазначенияИСМПТКВызовСервера.ПроверитьЗначениеКонстанты("ВестиУчетПоСкладамИСЦЭДМ") Тогда
			ТекстСообщения = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияОрганизацияИлиСкладНеВладелецКодаМогутБытьПроблемыПриОтправке();
		Иначе
			ТекстСообщения = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияОрганизацияНеВладелецКодаМогутБытьПроблемыПриОтправке();
		КонецЕсли;
		ТекстСообщения = ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(ТекстСообщения, КодИдентификации, ВладелецСервер);
		ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
		Ошибочный = Истина;
	КонецЕсли; 
			
КонецПроцедуры

#КонецОбласти

#Область ОтражениеВУчете

&НаКлиентеНаСервереБезКонтекста
Процедура СформироватьПредставлениеДокументаОснования(Форма)
	
	Если ЗначениеЗаполнено(Форма.Объект.ДокументОснование) Тогда
		Форма.ПредставлениеДокументаОснования = Форма.Объект.ДокументОснование;
		Форма.Элементы.ПредставлениеДокументаОснования.ЦветТекста = ОбщегоНазначенияИСМПТККлиентСервер.ЦветСиний();
	Иначе
		Форма.ПредставлениеДокументаОснования = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияДокументНеОтраженВУчете();
		Форма.Элементы.ПредставлениеДокументаОснования.ЦветТекста = ОбщегоНазначенияИСМПТККлиентСервер.ЦветКрасный();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеДокументаОснованияНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если ЗначениеЗаполнено(Объект.ДокументОснование) Тогда
		ПоказатьЗначение(, Объект.ДокументОснование);
	Иначе
		Кнопки = Новый СписокЗначений;
		Кнопки.Добавить("Создать", РаботаСТекстамиИСМПТККлиентСервер.ТекстКомандыСоздать());
		Кнопки.Добавить("Выбрать", РаботаСТекстамиИСМПТККлиентСервер.ТекстКомандыВыбрать());
		Кнопки.Добавить("Отмена",  РаботаСТекстамиИСМПТККлиентСервер.ТекстКомандыОтмена());
		ОтразитьДокументВУчетеЗавершение = Новый ОписаниеОповещения("ОтразитьДокументВУчетеЗавершение", ЭтаФорма);
		Если Модифицированность Тогда
			ПоказатьВопрос(ОтразитьДокументВУчетеЗавершение, РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияВопросОтразитьДокументВУчетеСпредварительнойЗаписью(), Кнопки);
		Иначе
			ПоказатьВопрос(ОтразитьДокументВУчетеЗавершение, РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияВопросОтразитьДокументВУчете(), Кнопки);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтразитьДокументВУчетеЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если Модифицированность Тогда
		Попытка
			ЭтотОбъект.Записать();
		Исключение 
			
			Если Объект.Ссылка.Пустая() Тогда
				ПредставлениеПолное = ОбщегоНазначенияИСМПТКВызовСервера.ПолучитьИмяИПредставлениеПоСсылке(Объект.Ссылка).Синоним;
			Иначе
				ПредставлениеПолное = Объект.Ссылка;
			КонецЕсли;
			
			ТекстОшибки = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияОшибкаПриЗаписиДокументаСПараметромСмотриЖурналРегистрации();
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ДанныеДокумента%", ПредставлениеПолное);
			
			ИмяСобытия  = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияИмяСобытияЗаписьДокумента();
			ИмяСобытия  = СтрЗаменить(ИмяСобытия, "%ЗаписываемыйДокумент%", ПредставлениеПолное);
			ОбщегоНазначенияИСМПТКВызовСервера.СоздатьЗаписьЖурналаРегистрации(ИмяСобытия, "Ошибка",,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
			ВызватьИсключение ТекстОшибки;
		КонецПопытки;
	КонецЕсли;
	
	Если РезультатВопроса = "Выбрать" Тогда
		ВыбратьДокументОснование();
	ИначеЕсли РезультатВопроса = "Создать" Тогда
		СоздатьДокументОснованиеНаКлиентеПослеЗаписи(КодВозвратаДиалога.ОК, Неопределено);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДокументОснованиеВыбрать(Команда)
	
	ВыбратьДокументОснование();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьДокументОснование()
	
	ДокументыВыбора = РаботаСДокументамиИСМПТККлиентСерверПереопределяемый.ПолучитьСписокДокументовОснованияДляАгрегацииВнеПроизводстваИСЦЭДМ(,"Выбрать");
	
	Если ДокументыВыбора.Количество() > 1 Тогда
		
		ПараметрыФормы = Новый Структура();
		ПараметрыФормы.Вставить("ДокументыВыбора", ДокументыВыбора);
					
		Оповещение = Новый ОписаниеОповещения("ВыборДокументаОснованияЗавершение", ЭтотОбъект);
		ОткрытьФорму("ОбщаяФорма.ФормаВыбораДокументаОснованияИСМПТК", ПараметрыФормы,,,,,Оповещение,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	ИначеЕсли ДокументыВыбора.Количество() = 1 Тогда
		
		ВыбранныйДокумент = ДокументыВыбора[0].Значение;
		ВыборДокументаОснованияЗавершение(ВыбранныйДокумент, Неопределено);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыборДокументаОснованияЗавершение(ВыбранныйДокумент, ДополнительныеПараметры) Экспорт
	
	Если ВыбранныйДокумент <> "" И ТипЗнч(ВыбранныйДокумент) <> Тип("Неопределено") Тогда
		
		ИмяДокумента = ВыбранныйДокумент;
		
		СтруктураОтбора = Новый Структура();
		Если ЗначениеЗаполнено(Объект.Организация) Тогда
			СтруктураОтбора.Вставить("Организация", Объект.Организация);
		КонецЕсли;
		
		ДопПараметрыДляОтбора = Новый Структура("ИмяДокумента", ИмяДокумента);
		РаботаСДокументамиИСМПТККлиентПереопределяемый.ДополнитьСтруктуруОтбораПервичногоДокумента(СтруктураОтбора, Объект, ДопПараметрыДляОтбора);
		
		СтруктураПараметров = Новый Структура("Отбор, РежимВыбора, МножественныйВыбор", СтруктураОтбора, Истина, Ложь);
		
		ИмяФормыВыбора = "Документ." + ИмяДокумента + ".ФормаВыбора"; 
		ОткрытьФорму(ИмяФормыВыбора, СтруктураПараметров , ЭтаФорма,,,,, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьДокументОснование(Команда)
	
	Если ЗначениеЗаполнено(Объект.ДокументОснование) Тогда
		ПоказатьЗначение(, Объект.ДокументОснование);
	Иначе
		Действие = РаботаСДокументамиИСМПТККлиентСервер.ДействиеОткрыть();
		ПоказатьПредупреждение(, РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияОтказДокументНеОтраженВУчете(Действие));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтсоединитьДокументОснование(Команда)
	
	Если ЗначениеЗаполнено(Объект.ДокументОснование) Тогда
		Объект.ДокументОснование = Неопределено;
		СформироватьПредставлениеДокументаОснования(ЭтаФорма);
		Модифицированность = Истина;
	Иначе
		Действие = РаботаСДокументамиИСМПТККлиентСервер.ДействиеОтсоединить();
		ПоказатьПредупреждение(, РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияОтказДокументНеОтраженВУчете(Действие));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДокументОснованиеСоздать(Команда)
	
	Если Объект.Ссылка.Пустая() ИЛИ ЭтаФорма.Модифицированность Тогда
		
		СоздатьДокументОснованиеНаКлиентеПослеЗаписи = Новый ОписаниеОповещения("СоздатьДокументОснованиеНаКлиентеПослеЗаписи", ЭтаФорма);	
		ИнтеграцияИСМПТККлиент.ВопросЗаписатьОбъектПередВыполнением(СоздатьДокументОснованиеНаКлиентеПослеЗаписи);
		
	Иначе
		
		СоздатьДокументОснованиеНаКлиентеПослеЗаписи(КодВозвратаДиалога.ОК, Неопределено);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьДокументОснованиеНаКлиентеПослеЗаписи(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.ОК Тогда
		
		ДокументыВыбора = РаботаСДокументамиИСМПТККлиентСерверПереопределяемый.ПолучитьСписокДокументовОснованияДляАгрегацииВнеПроизводстваИСЦЭДМ(,"Создать");
		
		Если ДокументыВыбора.Количество() > 1 Тогда
			
			ПараметрыФормы = Новый Структура();
			ПараметрыФормы.Вставить("ДокументыВыбора", ДокументыВыбора);
			
			Оповещение = Новый ОписаниеОповещения("СозданиеДокументаОснованияЗавершение", ЭтотОбъект);
			ОткрытьФорму("ОбщаяФорма.ФормаВыбораДокументаОснованияИСМПТК", ПараметрыФормы,,,,,Оповещение, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
			
		ИначеЕсли ДокументыВыбора.Количество() = 1 Тогда
			
			ВыбранныйДокумент = ДокументыВыбора[0].Значение;
			СозданиеДокументаОснованияЗавершение(ВыбранныйДокумент, Неопределено);
			
		КонецЕсли;
	КонецЕсли;
			
КонецПроцедуры

&НаКлиенте
Процедура СозданиеДокументаОснованияЗавершение(ВыбранныйДокумент, ДополнительныеПараметры) Экспорт
	
	Если Не ВыбранныйДокумент = Неопределено Тогда
		Массив = Новый Массив;
		Массив.Добавить(Объект.Ссылка);
		
		ДанныеДляСоздания = Новый Структура();
		ДанныеДляСоздания.Вставить("ИсходныйДокумент", 	  Массив);
		ДанныеДляСоздания.Вставить("СоздаваемыйДокумент", ВыбранныйДокумент);

		РаботаСДокументамиИСМПТККлиент.СоздатьПервичныйДокументИСЦЭДМ(ДанныеДляСоздания);
		СформироватьПредставлениеДокументаОснования(ЭтаФорма);
		Модифицированность = Истина;
	КонецЕсли;
			
КонецПроцедуры

#КонецОбласти

#Область ПодключаемыеКоманды

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	
	ОбщегоНазначенияИСМПТККлиентПереопределяемый.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
	
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат) Экспорт
	
	ОбщегоНазначенияИСМПТКПереопределяемый.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	
	ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.ОбновитьКоманды(ЭтотОбъект, Объект);
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти