
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Пропускаем инициализацию, чтобы гарантировать получение формы при передаче параметра "АвтоТест".
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	НастроитьДоступностьСпособовУчета();
	
	Если Не Записано Тогда
		РассчитыватьСебестоимостьЗаданием = Запись.РассчитыватьСебестоимостьРегламентнымЗаданием;
		ПриСозданииЧтенииНаСервере();
	КонецЕсли;
	
	НастроитьДоступностьОбновлятьСтоимостьРегламентнымЗаданием();
	НастроитьДоступностьРаспределенияУслуг();
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	Записано = Истина;
	Элементы.ДекорацияПодсказка.Видимость = Истина;
	ПриСозданииЧтенииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	Запись.РассчитыватьСебестоимостьРегламентнымЗаданием = РассчитыватьСебестоимостьЗаданием;
	
	Запись.РаспределятьСтоимостьУслуг = ЗначениеЗаполнено(ПравилоРаспределения);
	Запись.ПравилоРаспределения = ПравилоРаспределения;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ОбновлятьРегламентнымЗаданиемПриИзменении(Элемент)
	
	Модифицированность = Истина;
	ИзменитьРасписаниеОбменаНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура СпособУчетаПриИзменении(Элемент)
	
	СпособУчетаПриИзмененииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ПравилоРаспределенияПриИзменении(Элемент)
	
	Модифицированность = Истина;
КонецПроцедуры

#КонецОбласти

#Область КомандыФормы

&НаКлиенте
Процедура НастроитьРасписание(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ИзменитьРасписаниеОбмена", ЭтотОбъект);
	
	ОткрытьНастройкуРасписанияОбмена(ОписаниеОповещения, РасписаниеОбмена);
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ИзменитьИспользованиеЗадания(ИмяЗадания, Использование)
	
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("Метаданные", ИмяЗадания);
	РегЗадание = РегламентныеЗаданияСервер.НайтиЗадания(ПараметрыОтбора)[0];

	ПараметрыЗадания = Новый Структура;
	ПараметрыЗадания.Вставить("Использование", Использование);
	РегламентныеЗаданияСервер.ИзменитьЗадание(РегЗадание.УникальныйИдентификатор, ПараметрыЗадания);
	
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("Метаданные", ИмяЗадания);
	РегЗадание = РегламентныеЗаданияСервер.НайтиЗадания(ПараметрыОтбора)[0];
	
	Элемент = Элементы[ИмяЗадания];
	УстановитьТекстНадписиРегламентнойНастройки(РегЗадание, Элемент);
	
КонецПроцедуры

&НаСервере
Процедура ИзменитьРасписаниеЗадания(ИмяЗадания, РасписаниеРегламентногоЗадания)
	
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("Метаданные", ИмяЗадания);
	РегЗадание = РегламентныеЗаданияСервер.НайтиЗадания(ПараметрыОтбора)[0];

	ПараметрыЗадания = Новый Структура;
	ПараметрыЗадания.Вставить("Расписание", РасписаниеРегламентногоЗадания);
	РегламентныеЗаданияСервер.ИзменитьЗадание(РегЗадание.УникальныйИдентификатор, ПараметрыЗадания);
	
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("Метаданные", ИмяЗадания);
	РегЗадание = РегламентныеЗаданияСервер.НайтиЗадания(ПараметрыОтбора)[0];
	
	Элемент = Элементы[ИмяЗадания];
	УстановитьТекстНадписиРегламентнойНастройки(РегЗадание, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьРасписаниеОбмена(РасписаниеЗадания, ДополнительныеПараметры) Экспорт
	
	Если РасписаниеЗадания = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	РасписаниеОбмена = РасписаниеЗадания;
	
	ИзменитьРасписаниеОбменаНаСервере();
КонецПроцедуры

&НаСервере
Процедура ИзменитьРасписаниеОбменаНаСервере()
	
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("Метаданные", "РасчетСебестоимости");
	
	ЗаданияОбмена = РегламентныеЗаданияСервер.НайтиЗадания(ПараметрыОтбора);
	
	Если ЗаданияОбмена.Количество() = 0 Тогда
		ПараметрыЗадания = Новый Структура;
		ПараметрыЗадания.Вставить("Метаданные", Метаданные.РегламентныеЗадания.РасчетСебестоимости);
		ЗаданиеОбмена = РегламентныеЗаданияСервер.ДобавитьЗадание(ПараметрыЗадания);
		Если ЗаданиеОбмена = Неопределено Тогда
			ЗаписьЖурналаРегистрации(
				НСтр("ru='Расчет себестоимости'"),
				УровеньЖурналаРегистрации.Ошибка,
				Метаданные.РегламентныеЗадания.РасчетСебестоимости,,
				НСтр("ru='Не удалось создать регламентное задание расчета себестоимости'"));
			
			РасписаниеОбмена = Неопределено;
			РассчитыватьСебестоимостьЗаданием = Ложь;
		Иначе
			РасписаниеОбмена = ЗаданиеОбмена.Расписание;
			РассчитыватьСебестоимостьЗаданием = ЗаданиеОбмена.Использование;
		КонецЕсли;
	ИначеЕсли ЗаданияОбмена.Количество() <> 1 Тогда
		ЗаписьЖурналаРегистрации(
			НСтр("ru='Расчет себестоимости'"),
			УровеньЖурналаРегистрации.Ошибка,
			Метаданные.РегламентныеЗадания.РасчетСебестоимости,,
			НСтр("ru='Не найдено регламентное задание расчета себестоимости'"));
			
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Не найдено регламентное задание расчета себестоимости'"));
		ОбменПоРасписанию = Ложь;
	Иначе
		ИзменитьИспользованиеЗадания("РасчетСебестоимости", РассчитыватьСебестоимостьЗаданием);
		Если РасписаниеОбмена = Неопределено Тогда
			РасписаниеОбмена = ЗаданияОбмена[0].Расписание;
		КонецЕсли;
		ИзменитьРасписаниеЗадания("РасчетСебестоимости", РасписаниеОбмена);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура НастроитьДоступностьОбновлятьСтоимостьРегламентнымЗаданием()
	
	Если Запись.СпособУчета = Перечисления.СпособыУчетаСебестоимости.АвтономныйУчетСредняяВзвешенная Тогда
		Элементы.ОбновлятьРегламентнымЗаданием.ТолькоПросмотр = Ложь;
		Элементы.РасчетСебестоимости.Доступность = РассчитыватьСебестоимостьЗаданием;
	Иначе
		РассчитыватьСебестоимостьЗаданием = Ложь;
		Элементы.ОбновлятьРегламентнымЗаданием.ТолькоПросмотр = Истина;
		Элементы.РасчетСебестоимости.Доступность = Ложь;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура НастроитьДоступностьСпособовУчета()
	
	КомментарийСпособУчетаСебестоимости = "";
	ИспользоватьСинхронизациюДанных = Константы.ИспользоватьСинхронизациюДанных.Получить();
	
	Если НЕ ИспользоватьСинхронизациюДанных Тогда
		
		КомментарийСпособУчетаСебестоимости = НСтр("ru = 'Не возможен выбор ""Принимать из управляющей системы"":
		|- выключена синхронизация данных в разделе ""Синхронизация данных""
		|- нет действующих обменов с УТ.'");
		
	ИначеЕсли ИспользоватьСинхронизациюДанных И НЕ Константы.ИспользуетсяОбменСУправлениемТорговлей.Получить() Тогда
		
		КомментарийСпособУчетаСебестоимости = НСтр("ru = 'Не возможен выбор ""Принимать из управляющей системы"":
		|- нет действующих обменов с УТ.'");
		
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(КомментарийСпособУчетаСебестоимости) Тогда
		
		Элементы.СпособУчета.ОтображениеПодсказки = ОтображениеПодсказки.Кнопка;
		Элементы.СпособУчета.Подсказка = КомментарийСпособУчетаСебестоимости;
		
		ЭлементСпискаПриниматьИзУТ = Элементы.СпособУчета.СписокВыбора.НайтиПоЗначению(
			Перечисления.СпособыУчетаСебестоимости.ПриниматьИзУправляющейСистемы);
		
		Если НЕ ЭлементСпискаПриниматьИзУТ = Неопределено Тогда
			Элементы.СпособУчета.СписокВыбора.Удалить(ЭлементСпискаПриниматьИзУТ);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура НастроитьДоступностьРаспределенияУслуг()
	
	Элементы.ПравилоРаспределения.ТолькоПросмотр =
		Запись.СпособУчета = Перечисления.СпособыУчетаСебестоимости.ПриниматьИзУправляющейСистемы;
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьНастройкуРасписанияОбмена(ОписаниеОповещения, РасписаниеРегламентногоЗадания)
	
	Если РасписаниеРегламентногоЗадания = Неопределено Тогда
		РасписаниеРегламентногоЗадания = Новый РасписаниеРегламентногоЗадания;
	КонецЕсли;
	
	Диалог = Новый ДиалогРасписанияРегламентногоЗадания(РасписаниеРегламентногоЗадания);
	Диалог.Показать(ОписаниеОповещения);
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьТекстЗаголовкаИРасписанияРегламентнойНастройки(Задание, ТекстРасписания, РасписаниеАктивно) Экспорт
	
	РасписаниеАктивно = Ложь;
	
	Если Задание = Неопределено Тогда
		
		ТекстРасписания = НСтр("ru = '<Расписание не задано>'");
		
	Иначе
		
		Если Задание.Использование Тогда
			РасписаниеАктивно = Истина;
			ТекстРасписания = СтрШаблон(НСтр("ru = 'Расписание: %1'"), Строка(Задание.Расписание));
		Иначе
			ТекстРасписания = СтрШаблон(НСтр("ru = 'Расписание (НЕ АКТИВНО): %1'"), Строка(Задание.Расписание));
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ПриСозданииЧтенииНаСервере()
	
	Если Запись.СпособУчета = Перечисления.СпособыУчетаСебестоимости.АвтономныйУчетСредняяВзвешенная Тогда
		ПрочитатьРасписаниеОбменаНаСервере();
	Иначе
		ЗаданиеОбмена = Неопределено;
		РасписаниеОбмена = Неопределено;
		РассчитыватьСебестоимостьЗаданием = Ложь;
	КонецЕсли;
	
	Если Запись.СпособУчета = Перечисления.СпособыУчетаСебестоимости.ПриниматьИзУправляющейСистемы Тогда
		ПравилоРаспределения = "";
	Иначе
		ПравилоРаспределения = Запись.ПравилоРаспределения;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ПрочитатьРасписаниеОбменаНаСервере()
	
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("Метаданные", "РасчетСебестоимости");
	
	ЗаданияОбмена = РегламентныеЗаданияСервер.НайтиЗадания(ПараметрыОтбора);
	
	Если ЗаданияОбмена.Количество() = 0 Тогда
		ПараметрыЗадания = Новый Структура;
		ПараметрыЗадания.Вставить("Метаданные", Метаданные.РегламентныеЗадания.РасчетСебестоимости);
		ЗаданиеОбмена = РегламентныеЗаданияСервер.ДобавитьЗадание(ПараметрыЗадания);
		Если ЗаданиеОбмена = Неопределено Тогда
			ЗаписьЖурналаРегистрации(
				НСтр("ru='Расчет себестоимости'"),
				УровеньЖурналаРегистрации.Ошибка,
				Метаданные.РегламентныеЗадания.РасчетСебестоимости,,
				НСтр("ru='Не удалось создать регламентное задание расчета себестоимости'"));
			
			РасписаниеОбмена = Неопределено;
			РассчитыватьСебестоимостьЗаданием = Ложь;
		Иначе
			РасписаниеОбмена = ЗаданиеОбмена.Расписание;
			РассчитыватьСебестоимостьЗаданием = ЗаданиеОбмена.Использование;
		КонецЕсли;
	ИначеЕсли ЗаданияОбмена.Количество() <> 1 Тогда
		ЗаписьЖурналаРегистрации(
			НСтр("ru='Расчет себестоимости'"),
			УровеньЖурналаРегистрации.Ошибка,
			Метаданные.РегламентныеЗадания.РасчетСебестоимости,,
			НСтр("ru='Не найдено регламентное задание расчета себестоимости'"));
			
		ЗаданиеОбмена     = Неопределено;
		РасписаниеОбмена  = Неопределено;
		РассчитыватьСебестоимостьЗаданием = Ложь;
	Иначе
		ЗаданиеОбмена     = ЗаданияОбмена[0];
		РасписаниеОбмена  = ЗаданиеОбмена.Расписание;
		РассчитыватьСебестоимостьЗаданием = ЗаданиеОбмена.Использование;
	КонецЕсли;
	
	Элементы.РасчетСебестоимости.Доступность = РассчитыватьСебестоимостьЗаданием;
	УстановитьТекстНадписиРегламентнойНастройки(ЗаданиеОбмена, Элементы.РасчетСебестоимости);
	
КонецПроцедуры

&НаСервере
Процедура СпособУчетаПриИзмененииНаСервере()
	
	мРассчитыватьСебестоимостьЗаданием = РассчитыватьСебестоимостьЗаданием;

	НастроитьДоступностьОбновлятьСтоимостьРегламентнымЗаданием();
	
	Если НЕ мРассчитыватьСебестоимостьЗаданием = РассчитыватьСебестоимостьЗаданием Тогда
		Если НЕ РассчитыватьСебестоимостьЗаданием Тогда
			ИзменитьРасписаниеОбменаНаСервере();
		КонецЕсли;
	КонецЕсли;
	
	Если Запись.СпособУчета = Перечисления.СпособыУчетаСебестоимости.ПриниматьИзУправляющейСистемы Тогда
		ПравилоРаспределения = "";
	КонецЕсли;
	
	НастроитьДоступностьРаспределенияУслуг();
КонецПроцедуры

&НаСервере
Процедура УстановитьТекстНадписиРегламентнойНастройки(Задание, Элемент)
	
	Перем ТекстРасписания;
	
	ПолучитьТекстЗаголовкаИРасписанияРегламентнойНастройки(Задание, ТекстРасписания, РассчитыватьСебестоимостьЗаданием);
	Элемент.Заголовок = ТекстРасписания;
	Элемент.Доступность = РассчитыватьСебестоимостьЗаданием;
КонецПроцедуры

#КонецОбласти