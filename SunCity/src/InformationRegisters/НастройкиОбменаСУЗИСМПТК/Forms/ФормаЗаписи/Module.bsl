#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	ЗаписьДублируется = Ложь;
	ПроверкаВыполнена = Ложь;
	
	АдресСУЗКонстанта = ИнтеграцияИСМПТК.ПолучитьАдресаСерверовИС().АдресСУЗ;
	АдресСУЗ 		  = ИнтеграцияИСМПТК.ОбработатьАдресИСМПТКонстанта(АдресСУЗКонстанта);
	
	Если Запись.ИсходныйКлючЗаписи.Пустой() Тогда
		
		Если НЕ СтрНайти(АдресСУЗКонстанта, "https://") = 0 Тогда
			Запись.Порт    = 443;
			Запись.Таймаут = 60;
			Запись.ИспользоватьЗащищенноеСоединение = Истина;
		Иначе
			Запись.Порт    = 80;
			Запись.Таймаут = 60;
			Запись.ИспользоватьЗащищенноеСоединение = Ложь;
		КонецЕсли;
		Запись.Адрес = АдресСУЗ; 
		Запись.ОбменНаСервере = Истина;
		Элементы.ДекорацияПараметрыНеСоответствуют.Видимость = Ложь;
		
	Иначе
		
		Элементы.ДекорацияПараметрыНеСоответствуют.Видимость  = Запись.Адрес <> АдресСУЗ;
		Элементы.ДекорацияПараметрыНеСоответствуют.ЦветТекста = ОбщегоНазначенияИСМПТККлиентСервер.ЦветКрасный();
		
	КонецЕсли;
	
	СобытияФормИСМПТКПереопределяемый.ПриСозданииНаСервере(ЭтотОбъект, Отказ, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)

	Если ЗначениеЗаполнено(Запись.Адрес)
		И ЗначениеЗаполнено(Запись.Порт)
		И ЗначениеЗаполнено(Запись.Токен) Тогда
		СброситьПроверкуПодключения(3);
	Иначе
		Элементы.СтраницыПроверкаПодключения.ТекущаяСтраница = Элементы.СтраницыПроверкаПодключения.ПодчиненныеЭлементы.ПроверкаНеПодключенияНеВыполнялась;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	СобытияФормИСМПТККлиентПереопределяемый.ОбработкаОповещения(ЭтотОбъект, ИмяСобытия, Параметр, Источник);
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.УправлениеДоступом
	СобытияФормИСМПТКПереопределяемый.ПриЧтенииНаСервере(ТекущийОбъект, ЭтотОбъект);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	СобытияФормИСМПТККлиентПереопределяемый.ПередЗаписью(ЭтотОбъект, Отказ, ПараметрыЗаписи);
	
	Отказ = ЗаписьДублируется;
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.УправлениеДоступом
	СобытияФормИСМПТКПереопределяемый.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)

	УстановитьПривилегированныйРежим(Истина);
	
	ТекстЗапроса = "ВЫБРАТЬ
	|	НастройкиОбменаСУЗИСМПТК.Организация КАК Организация,
	|	НастройкиОбменаСУЗИСМПТК.СтанцияУправленияЗаказами КАК СтанцияУправленияЗаказами,
	|	НастройкиОбменаСУЗИСМПТК.Токен КАК Токен,
	|	НастройкиОбменаСУЗИСМПТК.Адрес КАК Адрес
	|ИЗ
	|	РегистрСведений.НастройкиОбменаСУЗИСМПТК КАК НастройкиОбменаСУЗИСМПТК
	|ГДЕ
	|";
	ТекстОрганизация = "НастройкиОбменаСУЗИСМПТК.Организация = &Организация
						|";
	ТекстТокен 	 = "НастройкиОбменаСУЗИСМПТК.Токен = &Токен";
	ТекстСтанция = "НастройкиОбменаСУЗИСМПТК.СтанцияУправленияЗаказами = &Станция
					|	И НастройкиОбменаСУЗИСМПТК.Организация <> &Организация";
	
	//1. Проверяем, что Токен уникален
	Запрос = Новый Запрос();
	Запрос.Текст = ТекстЗапроса + ТекстТокен; 
	Запрос.УстановитьПараметр("Токен",		 Запись.Токен);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Если Не Запись.ИсходныйКлючЗаписи.Пустой()
			И Запись.Организация = Выборка.Организация
			И Запись.СтанцияУправленияЗаказами = Выборка.СтанцияУправленияЗаказами Тогда
			//Редактируем старую запись, не проверяем совпадение самой по себе
			Продолжить;
		 КонецЕсли;	
		
		ТекстСообщения = НСтр("ru = 'Токен ""%ТокенПодключения%"" уже используется в другой настройке подключения для организации %НаименованиеОрганизации% и Станции управления заказами ""%НаименованиеСУЗ%""!'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ТокенПодключения%",		  Запись.Токен); 
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%НаименованиеОрганизации%", Выборка.Организация);
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%НаименованиеСУЗ%",		  Выборка.СтанцияУправленияЗаказами);
		ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
		Отказ = Истина;
	КонецЦикла;
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	//2. Проверяем, что у Организации только 1 настройка для сервера
	Запрос = Новый Запрос();
	Запрос.Текст = ТекстЗапроса + ТекстОрганизация;
	Запрос.УстановитьПараметр("Организация", Запись.Организация);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Если Не Запись.ИсходныйКлючЗаписи.Пустой()
			И Запись.Организация = Выборка.Организация
			И Запись.СтанцияУправленияЗаказами = Выборка.СтанцияУправленияЗаказами Тогда
			//Редактируем старую запись, не проверяем совпадение самой по себе
			Продолжить;
		 КонецЕсли;
		//Для одной организации допускается наличие второй настройки в регситре только если она относится к другому адресу СУЗ
		Если Выборка.Адрес = Запись.Адрес Тогда
			ТекстСообщения = НСтр("ru = 'Для организации %НаименованиеОрганизации% уже зарегистрирована настройка подключения к серверу СУЗ по адресу %АдресСервера%!'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%НаименованиеОрганизации%", Запись.Организация);
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%АдресСервера%", 			  Запись.Адрес);
			ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
			Отказ = Истина;
		КонецЕсли;
	КонецЦикла;
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	//3. Проверяем, что СУЗ не используется в других настройках (по другим Организациям) 
	Запрос = Новый Запрос();
	Запрос.Текст = ТекстЗапроса + ТекстСтанция;
	Запрос.УстановитьПараметр("Организация", Запись.Организация);
	Запрос.УстановитьПараметр("Станция", 	 Запись.СтанцияУправленияЗаказами);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Не Выборка.Количество() = 0 Тогда
		Выборка.Следующий();
		ТекстСообщения = НСтр("ru = 'Для Станции управления заказами ""%НаименованиеСтанции%"" уже зарегистрирована настройка подключения к серверу СУЗ по адресу %АдресСервера% для организации %НаименованиеОрганизации%!'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%НаименованиеСтанции%", 	  Запись.СтанцияУправленияЗаказами); 
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%АдресСервера%", 			  Запись.Адрес);
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%НаименованиеОрганизации%", Выборка.Организация);
		ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура ТокенПриИзменении(Элемент)
	
	ПроверкаВыполнена = Ложь;
		
КонецПроцедуры

&НаКлиенте
Процедура СтанцияУправленияЗаказамиПриИзменении(Элемент)
	
	ПроверкаВыполнена = Ложь;
	ОчиститьСообщения();
	ПроверитьДублированиеЗаписи();
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	ПроверкаВыполнена = Ложь;
	ОчиститьСообщения();
	ПроверитьДублированиеЗаписи();
	
КонецПроцедуры

&НаКлиенте
Процедура ГруппаВыполняетсяПроверкаПодключенияКСУЗНадписьОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	ОбработатьНавигационнуюСсылку(НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ГруппаНетСвязиССУЗНадписьОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	ОбработатьНавигационнуюСсылку(НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ГруппаПодключениеНастроеноКорректноНадписьОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	ОбработатьНавигационнуюСсылку(НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ГруппаГруппаПроверкаНеПодключенияНеВыполняласьНадписьОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	ОбработатьНавигационнуюСсылку(НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ВыполнитьПроверку(Команда)
	
	СброситьПроверкуПодключения();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура СброситьПроверкуПодключения(ИнтервалОжидания = 1)
	
	ПодключениеНастроеноКорректно = Ложь;
	Элементы.СтраницыПроверкаПодключения.ТекущаяСтраница = Элементы.СтраницыПроверкаПодключения.ПодчиненныеЭлементы.ВыполняетсяПроверкаПодключенияКСУЗ;
	ПодключитьОбработчикОжидания("ПроверкаПодключениеКСУЗОбработчикОжидания", ИнтервалОжидания, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверкаПодключениеКСУЗОбработчикОжидания()
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ОтображатьСообщенияОбОшибках", Ложь);
	
	ПроверитьПодключениеСУЗ(Новый ОписаниеОповещения("ПослеПроверкиПодключенияСУЗ", ЭтотОбъект, ДополнительныеПараметры), 1);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьПодключениеСУЗ(ОписаниеОповещения, Таймаут)
	
	Результат = ПроверитьПодключениеСУЗНаСервере();
	ВыполнитьОбработкуОповещения(ОписаниеОповещения, Результат);
	
КонецПроцедуры

&НаКлиенте
Функция ПроверитьПодключениеСУЗНаКлиенте()
	
	Возврат Новый Структура("ТекстОшибки, ОтветПолучен", НСтр("ru = 'Невозможно выполнить проверку подключения: недостаточно данных для проверки.'"), Ложь);
	
КонецФункции

&НаСервере
Функция ПроверитьПодключениеСУЗНаСервере()
	
	ВозвращаемоеЗначение = Новый Структура;
	ВозвращаемоеЗначение.Вставить("ЗапросОтправлен");
	ВозвращаемоеЗначение.Вставить("ОтветПолучен");
	ВозвращаемоеЗначение.Вставить("КодСостояния");
	ВозвращаемоеЗначение.Вставить("ТекстОшибки");
	
	ПараметрыСУЗ = ИнтеграцияИСМПТК.НоваяНастройкаОбменаСУЗ();
	ПараметрыСУЗ.Токен   = Запись.Токен;
	ПараметрыСУЗ.Сервер  = Запись.Адрес;
	ПараметрыСУЗ.Порт 	 = Запись.Порт;
	ПараметрыСУЗ.Таймаут = Запись.Таймаут;
	ПараметрыСУЗ.ИспользоватьЗащищенноеСоединение = Запись.ИспользоватьЗащищенноеСоединение;
	
	ДанныеНастройкиСУЗ = ОбщегоНазначенияИСМПТК.ЗначенияРеквизитовОбъекта(Запись.СтанцияУправленияЗаказами, "Идентификатор", Истина);
	ПараметрыСУЗ.Идентификатор = ДанныеНастройкиСУЗ.Идентификатор;
	
	МассивИспользуемыхВидовПродукции = ОбщегоНазначенияИСМПТК.УчитываемыеВидыМаркируемойПродукции();
	
	Если Не МассивИспользуемыхВидовПродукции.Количество() = 0 Тогда
		
		//При наличии нескольких товарных групп проверяем по первой
		СтруктураРезультат = ИнтеграцияИСМПТК.ПроверитьДоступностьСУЗ_V2(МассивИспользуемыхВидовПродукции[0], ПараметрыСУЗ);
		
		ЗаполнитьЗначенияСвойств(ВозвращаемоеЗначение, СтруктураРезультат.РезультатОтправкиЗапроса);
		ВозвращаемоеЗначение.ТекстОшибки = УдалитьНедопустимыеСимволыИзСтроки(СтруктураРезультат.ТекстОшибки);
		
	Иначе
		//При отсутсутствии настроек товарных групп подключаться некуда
		Возврат Новый Структура("ТекстОшибки, ОтветПолучен", 
								НСтр("ru = 'Невозможно выполнить проверку подключения: недостаточно данных для проверки.'"), Ложь);
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

&НаСервере
Функция УдалитьНедопустимыеСимволыИзСтроки(Знач ДанныеСтроки)
	
	Пока Истина Цикл
		
		ПозицияНедопустимогоСимвола = ИнтеграцияИСМПТКПереопределяемый.ПозицияНедопустимогоСимвола(ДанныеСтроки);
		Если ПозицияНедопустимогоСимвола = 0 Тогда
			Прервать
		КонецЕсли;
		ДанныеСтроки = Лев(ДанныеСтроки, ПозицияНедопустимогоСимвола - 1) + Сред(ДанныеСтроки, ПозицияНедопустимогоСимвола + 1);
		
	КонецЦикла;
	
	Возврат ДанныеСтроки;
	
КонецФункции

&НаКлиенте
Процедура ПослеПроверкиПодключенияСУЗ(РезультатПроверки, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если РезультатПроверки = Неопределено Тогда
		
		ПодключениеНастроеноКорректно = Истина;
		Элементы.СтраницыПроверкаПодключения.ТекущаяСтраница = Элементы.СтраницыПроверкаПодключения.ПодчиненныеЭлементы.ПроверкаПодключенияНедоступна;
		ПроверкаВыполнена = Ложь;
		
	ИначеЕсли РезультатПроверки.ОтветПолучен = Истина И РезультатПроверки.КодСостояния = 200 Тогда
		
		ПодключениеНастроеноКорректно = Истина;
		Элементы.СтраницыПроверкаПодключения.ТекущаяСтраница = Элементы.СтраницыПроверкаПодключения.ПодчиненныеЭлементы.ПроверкаПодключенияКорректно;
		ПроверкаВыполнена = Истина;
	Иначе
		
		Если ДополнительныеПараметры.ОтображатьСообщенияОбОшибках Тогда
			ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(РезультатПроверки.ТекстОшибки);
		КонецЕсли;
		ПроверкаВыполнена = Ложь;
		Элементы.СтраницыПроверкаПодключения.ТекущаяСтраница = Элементы.СтраницыПроверкаПодключения.ПодчиненныеЭлементы.НетСвязиССУЗ;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьНавигационнуюСсылку(Знач НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ОтображатьСообщенияОбОшибках", Истина);
	
	Если НавигационнаяСсылкаФорматированнойСтроки = "ПроверитьПодключениеКСУЗ"
		Или НавигационнаяСсылкаФорматированнойСтроки = "Повторить" Тогда
		
		СтандартнаяОбработка = Ложь;
		ПроверитьПодключениеСУЗ(Новый ОписаниеОповещения("ПослеПроверкиПодключенияСУЗ", ЭтотОбъект, ДополнительныеПараметры), Запись.Таймаут);
		
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ПроверитьДублированиеЗаписи()
	
	Если Не ЗначениеЗаполнено(Запись.Организация)
		Или Не ЗначениеЗаполнено(Запись.СтанцияУправленияЗаказами) Тогда 
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос();
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	1 КАК Поле1
	|ИЗ
	|	РегистрСведений.НастройкиОбменаСУЗИСМПТК КАК НастройкиОбменаСУЗИСМПТК
	|ГДЕ
	|	НастройкиОбменаСУЗИСМПТК.Организация = &Организация
	|	И НастройкиОбменаСУЗИСМПТК.СтанцияУправленияЗаказами = &СУЗ";	
	
	Запрос.УстановитьПараметр("Организация", Запись.Организация);
	Запрос.УстановитьПараметр("СУЗ", 		 Запись.СтанцияУправленияЗаказами);
	
	Если НЕ Запрос.Выполнить().Пустой() Тогда
		ТекстСообщения = НСтр("ru = 'Настройка обмена для организации %НаименованиеОрганизации% с СУЗ ""%НаименованиеСтанции%"" уже существует!'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%НаименованиеОрганизации%", Запись.Организация);
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%НаименованиеСтанции%", 	  Запись.СтанцияУправленияЗаказами);
		ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
		ЗаписьДублируется = Истина;
	Иначе
		ЗаписьДублируется = Ложь;
	КонецЕсли;
	
КонецПроцедуры
	
#КонецОбласти