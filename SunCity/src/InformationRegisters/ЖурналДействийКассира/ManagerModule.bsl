#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
	
#Область ПрограммныйИнтерфейс

// Записывает действие, выполненное на рабочем месте кассира
//
// Параметры:
//  ПараметрыОперации - Структура - 
//				см. "ИнтерфейсРМКСлужебныйКлиентСервер.ПодготовитьПараметрыОперацииНаРабочемМестеКассира"
//
Процедура ЗарегистрироватьОперацию(ПараметрыОперации) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	НомерСеансаОперации = Неопределено;
	ПараметрыОперации.Свойство("НомерСеанса", НомерСеансаОперации);
	Если Не ЗначениеЗаполнено(НомерСеансаОперации) Тогда
		НомерСеансаОперации = НомерСеансаИнформационнойБазы();
	КонецЕсли;
	
	ДатаРегистрации
			= ПолучитьСвободнуюДатуВремяРегистрации(ПараметрыОперации.РабочееМесто, ПараметрыОперации.ТорговыйОбъект);
	МенеджерЗаписи = РегистрыСведений.ЖурналДействийКассира.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.ДатаВремяОперации = ДатаРегистрации;
	МенеджерЗаписи.РабочееМесто = ПараметрыОперации.РабочееМесто;
	МенеджерЗаписи.ТорговыйОбъект = ПараметрыОперации.ТорговыйОбъект;
	МенеджерЗаписи.ОперацияСЧеком = ПараметрыОперации.РегистрируемаяОперация;
	МенеджерЗаписи.Кассир = ПараметрыОперации.Кассир;
	МенеджерЗаписи.Пользователь = ПараметрыОперации.ПользовательБД;
	МенеджерЗаписи.НомерСеанса = НомерСеансаОперации;
	Если ЗначениеЗаполнено(ПараметрыОперации.Чек) Тогда
		МенеджерЗаписи.ЧекККМ = ПараметрыОперации.Чек;
	КонецЕсли;
	МенеджерЗаписи.Сумма = ПараметрыОперации.Сумма;
	
	МенеджерЗаписи.Записать();
	
КонецПроцедуры

// Удаляет устаревшие записи журнала действий кассира
//
// Параметры:
//  РабочееМесто - ОпределяемыйТип.РабочееМестоРМК.
//  СрокХранения - ОпределяемыйТип.ПериодХраненияИсторииРМК.
//
Процедура ОчиститьУстаревшиеДанные(РабочееМесто, СрокХранения) Экспорт
	
	ПограничнаяДата = ВычислитьПограничнуюДатуПоСрокуХранения(СрокХранения);
	Если ПограничнаяДата = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ЖурналДействийКассира.ДатаВремяОперации КАК ДатаВремяОперации
	|ИЗ
	|	РегистрСведений.ЖурналДействийКассира КАК ЖурналДействийКассира
	|ГДЕ
	|	ЖурналДействийКассира.ДатаВремяОперации < &ПограничнаяДата
	|	И ЖурналДействийКассира.РабочееМесто В (&РабочееМесто)";
	Запрос.УстановитьПараметр("ПограничнаяДата", ПограничнаяДата);
	Запрос.УстановитьПараметр("РабочееМесто", РабочееМесто);
	РезультатЗапроса = Запрос.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда
		БылаОшибка = Ложь;
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() И Не БылаОшибка Цикл
			
			НачатьТранзакцию();
			Попытка
				БлокировкаЖурналаДействий = Новый БлокировкаДанных;
				ЭлементБлокировки = БлокировкаЖурналаДействий.Добавить("РегистрСведений.ЖурналДействийКассира");
				ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
				ЭлементБлокировки.УстановитьЗначение("ДатаВремяОперации", Выборка.ДатаВремяОперации);
				ЭлементБлокировки.УстановитьЗначение("РабочееМесто", РабочееМесто);
				БлокировкаЖурналаДействий.Заблокировать();
				
				УдалитьЗаписиНаДату(Выборка.ДатаВремяОперации, РабочееМесто);
				
				ЗафиксироватьТранзакцию();
			Исключение
				ОтменитьТранзакцию();
		
				ЗаписьЖурналаРегистрации(
					НСтр("ru = 'Не удалось зарегистрировать аварийные завершения чеков.'", ОбщегоНазначения.КодОсновногоЯзыка()),
					УровеньЖурналаРегистрации.Ошибка,
					Метаданные.РегистрыСведений.ЖурналДействийКассира, ,
					ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
				БылаОшибка = Истина;
			КонецПопытки;
			
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

// Возвращает операции действий с чеком, относящиеся к начале работы с чеком
//
// Возвращаемое значение:
//  - Массив из ПеречислениеСсылка.ОперацииРабочегоМестаКассира
//
Функция ПолучитьОперацииДействийОткрытияЧека() Экспорт
	
	РезультатФункции = Новый Массив;
	
	РезультатФункции.Добавить(Перечисления.ОперацииРабочегоМестаКассира.НачалоПродажи);
	РезультатФункции.Добавить(Перечисления.ОперацииРабочегоМестаКассира.НачалоВозврата);
	РезультатФункции.Добавить(Перечисления.ОперацииРабочегоМестаКассира.НачалоВозвратаСкупки);
	РезультатФункции.Добавить(Перечисления.ОперацииРабочегоМестаКассира.НачалоКоррекции);
	РезультатФункции.Добавить(Перечисления.ОперацииРабочегоМестаКассира.НачалоСкупки);
	РезультатФункции.Добавить(Перечисления.ОперацииРабочегоМестаКассира.ОткрытиеОтложенногоЧека);
	
	Возврат РезультатФункции;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ПолучитьСвободнуюДатуВремяРегистрации(РабочееМесто, ТорговыйОбъект)
	
	ДатаВремяРегистрации = ТекущаяДатаСеанса();
	ЗапросДаты = Новый Запрос;
	ЗапросДаты.Текст =
	"ВЫБРАТЬ
	|	МАКСИМУМ(ЖурналДействийКассира.ДатаВремяОперации) КАК ДатаВремяОперации
	|ИЗ
	|	РегистрСведений.ЖурналДействийКассира КАК ЖурналДействийКассира
	|ГДЕ
	|	ЖурналДействийКассира.ДатаВремяОперации >= &ДатаВремяОперации
	|	И ЖурналДействийКассира.ТорговыйОбъект = &ТорговыйОбъект
	|	И ЖурналДействийКассира.РабочееМесто = &РабочееМесто";
	ЗапросДаты.УстановитьПараметр("ДатаВремяОперации", ДатаВремяРегистрации);
	ЗапросДаты.УстановитьПараметр("ТорговыйОбъект", ТорговыйОбъект);
	ЗапросДаты.УстановитьПараметр("РабочееМесто", РабочееМесто);
	
	РезультатЗапроса = ЗапросДаты.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда
		Выборка = РезультатЗапроса.Выбрать();
		Если Выборка.Следующий() И ЗначениеЗаполнено(Выборка.ДатаВремяОперации) Тогда
			ДатаВремяРегистрации = Выборка.ДатаВремяОперации + 1;
		КонецЕсли;
	КонецЕсли;
	Возврат ДатаВремяРегистрации;
	
КонецФункции

Процедура УдалитьЗаписиНаДату(ДатаОперации, РабочееМесто)
	
	ОтборПоДате = Новый Структура("ДатаВремяОперации", ДатаОперации);
	ВыборкаЗаписей = РегистрыСведений.ЖурналДействийКассира.Выбрать(ОтборПоДате);
	Пока ВыборкаЗаписей.Следующий() Цикл
		
		Если ВыборкаЗаписей.РабочееМесто = РабочееМесто Тогда
			МенеджерЗаписи = ВыборкаЗаписей.ПолучитьМенеджерЗаписи();
			МенеджерЗаписи.Удалить();
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ВычислитьПограничнуюДатуПоСрокуХранения(СрокХранения)
	
	РезультатФункции = Неопределено;
	ДатаТекущая = ТекущаяДатаСеанса();
	Сутки = 86400;
	ДнейНедели = 7;
	ДнейВДекаде = 10;
	МесяцевВКвартале = 3;
	МесяцевВПолугодии = 6;
	МесяцевВГоду = 12;
	Если ОбщегоНазначенияРМК.ЭтоСрокХраненияГод(СрокХранения) Тогда
		РезультатФункции = ДобавитьМесяц(ДатаТекущая, -1 * МесяцевВГоду);
	ИначеЕсли ОбщегоНазначенияРМК.ЭтоСрокХраненияПолугодие(СрокХранения) Тогда
		РезультатФункции = ДобавитьМесяц(ДатаТекущая, -1 * МесяцевВПолугодии);
	ИначеЕсли ОбщегоНазначенияРМК.ЭтоСрокХраненияКвартал(СрокХранения) Тогда
		РезультатФункции = ДобавитьМесяц(ДатаТекущая, -1 * МесяцевВКвартале);
	ИначеЕсли ОбщегоНазначенияРМК.ЭтоСрокХраненияМесяц(СрокХранения) Тогда
		РезультатФункции = ДобавитьМесяц(ДатаТекущая, -1);
	ИначеЕсли ОбщегоНазначенияРМК.ЭтоСрокХраненияДекада(СрокХранения) Тогда
		РезультатФункции = ДатаТекущая - ДнейВДекаде * Сутки;
	ИначеЕсли ОбщегоНазначенияРМК.ЭтоСрокХраненияНеделя(СрокХранения) Тогда
		РезультатФункции = ДатаТекущая - ДнейНедели * Сутки;
	ИначеЕсли ОбщегоНазначенияРМК.ЭтоСрокХраненияДень(СрокХранения) Тогда
		РезультатФункции = ДатаТекущая - Сутки;
	КонецЕсли;
	Если Не РезультатФункции = Неопределено Тогда
		РезультатФункции = НачалоДня(РезультатФункции);
	КонецЕсли;
	
	Возврат РезультатФункции;
	
КонецФункции

#КонецОбласти

#КонецЕсли