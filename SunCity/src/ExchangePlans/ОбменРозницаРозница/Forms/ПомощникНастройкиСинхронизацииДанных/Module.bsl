
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ПроверитьВозможностьИспользованияФормы(Отказ);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ИнициализироватьРеквизитыФормы();
	
	ИнициализироватьСвойстваФормы();
	
	ОбновитьНаименованиеКомандФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	УстановитьПорядковыйНомерПерехода(1);
	
	ОбновитьПодсказкуТипУзла();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	ОбновитьДанныеОбъекта(ВыбранноеЗначение);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура ИнформацияПоВыбраннымМагазинамНажатие(Элемент)
	
	КоллекцияФильтров = Новый Массив;
	
	ФильтрМагазин = Новый Структура;
	ФильтрМагазин.Вставить("РеквизитОтбора", "Ссылка");
	ФильтрМагазин.Вставить("Условие", "<>");
	ФильтрМагазин.Вставить("ИмяПараметра", "МагазинИсключение"); 
	ФильтрМагазин.Вставить("ЗначениеПараметра", Магазин);
	КоллекцияФильтров.Добавить(ФильтрМагазин);
	
	ФильтрСкладУправляющейСистемы = Новый Структура;
	ФильтрСкладУправляющейСистемы.Вставить("РеквизитОтбора", "СкладУправляющейСистемы");
	ФильтрСкладУправляющейСистемы.Вставить("Условие", "=");
	ФильтрСкладУправляющейСистемы.Вставить("ИмяПараметра", "СкладУправляющейСистемы"); 
	ФильтрСкладУправляющейСистемы.Вставить("ЗначениеПараметра", Ложь);
	КоллекцияФильтров.Добавить(ФильтрСкладУправляющейСистемы);
	
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("ИмяЭлементаФормыДляЗаполнения",          "МагазиныИнформативныхОстатков");
	ПараметрыФормы.Вставить("ИмяРеквизитаЭлементаФормыДляЗаполнения", "Магазин");
	ПараметрыФормы.Вставить("ИмяТаблицыВыбора",                       "Справочник.Магазины");
	ПараметрыФормы.Вставить("ЗаголовокФормыВыбора",                   НСтр("ru = 'Выберите магазины информативных остатков:'"));
	ПараметрыФормы.Вставить("МассивВыбранныхЗначений",                СформироватьМассивВыбранныхЗначений(ПараметрыФормы));
	ПараметрыФормы.Вставить("ПараметрыВнешнегоСоединения",            Неопределено);
	ПараметрыФормы.Вставить("КоллекцияФильтров",                      КоллекцияФильтров);
	
	ОткрытьФорму("ОбщаяФорма.ФормаВыбораДополнительныхУсловий",
		ПараметрыФормы,
		ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура МагазинПриИзменении(Элемент)
	
	МагазинПриИзмененииНаСервере();
	ОбновитьНаименованиеКомандФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура ТипУзлаПриИзменении(Элемент)
	ОбновитьПодсказкуТипУзла();
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура КомандаДалее(Команда)
	ИзменитьПорядковыйНомерПерехода(+1);
КонецПроцедуры

&НаКлиенте
Процедура КомандаНазад(Команда)
	
	ИзменитьПорядковыйНомерПерехода(-1);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаГотово(Команда)
	
	Закрыть();
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаОтмена(Команда)
	
	Закрыть();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ОбработчикиСобытийПереходов

////////////////////////////////////////////////////////////////////////////////
// Переопределяемая часть - Обработчики событий переходов.

&НаКлиенте
Функция Подключаемый_СтраницаТипУзла_ПриПереходеДалее(Отказ)
	
	СтраницаТипУзла_ПриПереходеДалееНаСервере();
	
	Возврат Неопределено;
	
КонецФункции

&НаКлиенте
Функция Подключаемый_СтраницаПараметрыПодчиненныйУзел_ПриОткрытии(Отказ, ПропуститьСтраницу, ЭтоПереходДалее)
	
	Элементы.ВыгружатьИнформативныеОстаткиПоСкладам.Видимость = ВариантНастройки = "ПоРабочемуМесту";
	
	СтраницаПараметрыПодчиненныйУзел_ПриОткрытииНаСервере();
	
	Возврат Неопределено;
	
КонецФункции

&НаКлиенте
Функция Подключаемый_СтраницаПараметрыПодчиненныйУзел_ПриПереходеДалее(Отказ)
	
	Если НЕ ЗначениеЗаполнено(Магазин) Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(
			НСтр("ru = 'Не заполнен ""Магазин""'"), ,
			"Магазин", ,
			Отказ);
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

&НаКлиенте
Функция Подключаемый_СтраницаПараметрыГлавныйУзел_ПриПереходеДалее(Отказ)
	
	Если НЕ ЗначениеЗаполнено(РабочееМесто) Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(
			НСтр("ru = 'Не заполнено ""Рабочее место""'"), ,
			"РабочееМесто", ,
			Отказ);
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

&НаКлиенте
Функция Подключаемый_СтраницаОжидание_ДлительнаяОперация(Отказ, ПерейтиДалее)
	
	ПерейтиДалее = Ложь;
	
	ПриНачалеСохраненияНастройки();
	
	Возврат Неопределено;
	
КонецФункции

#КонецОбласти

#Область СохранениеНастройкиСинхронизации

&НаКлиенте
Процедура ПриНачалеСохраненияНастройки()
	
	ПродолжитьОжидание = Истина;
	ПриНачалеСохраненияНастройкиСинхронизацииНаСервере(ПродолжитьОжидание);
	
	Если ПродолжитьОжидание Тогда
		ИнициализироватьПараметрыОбработчикаОжидания(
			ПараметрыОбработчикаОжиданияСохраненияНастроек);
			
		ПодключитьОбработчикОжидания("ПриОжиданииСохраненияНастройки",
			ПараметрыОбработчикаОжиданияСохраненияНастроек.ТекущийИнтервал, Истина);
	Иначе
		ПриЗавершенииСохраненияНастройки();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОжиданииСохраненияНастройки()
	
	ПродолжитьОжидание = Ложь;
	ПриОжиданииСохраненияНастройкиНаСервере(ПараметрыОбработчикаСохраненияНастроек, ПродолжитьОжидание);
	
	Если ПродолжитьОжидание Тогда
		ОбновитьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжиданияСохраненияНастроек);
		
		ПодключитьОбработчикОжидания("ПриОжиданииСохраненияНастройки",
			ПараметрыОбработчикаОжиданияСохраненияНастроек.ТекущийИнтервал, Истина);
	Иначе
		ПриЗавершенииСохраненияНастройки();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗавершенииСохраненияНастройки()
	
	ПараметрыОбработчикаОжиданияСохраненияНастроек = Неопределено;
	
	Отказ = Ложь;
	СообщениеОбОшибке = "";
	ПриЗавершенииСохраненияНастройкиНаСервере(Отказ, СообщениеОбОшибке);
	
	Если Отказ Тогда
		ИзменитьПорядковыйНомерПерехода(-1);
		ОбщегоНазначенияКлиент.СообщитьПользователю(СообщениеОбОшибке);
	Иначе
		ЗарегистрироватьДанныеКВыгрузке();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриНачалеСохраненияНастройкиСинхронизацииНаСервере(ПродолжитьОжидание)
	
	НастройкиСинхронизации = Новый Структура;
	НастройкиСинхронизации.Вставить("УзелОбмена",       УзелОбмена);
	НастройкиСинхронизации.Вставить("ДанныеЗаполнения", Новый Структура);
	
	НастройкиСинхронизации.ДанныеЗаполнения.Вставить("ВыгружатьИнформативныеОстаткиПоСкладам",    ВыгружатьИнформативныеОстаткиПоСкладам);
	НастройкиСинхронизации.ДанныеЗаполнения.Вставить("ДатаНачалаВыгрузкиДокументов",              ДатаНачалаВыгрузкиДокументов);
	НастройкиСинхронизации.ДанныеЗаполнения.Вставить("РабочееМесто",                              РабочееМесто);
	НастройкиСинхронизации.ДанныеЗаполнения.Вставить("ПодчиненныйУзел",                           ПодчиненныйУзел);
	НастройкиСинхронизации.ДанныеЗаполнения.Вставить("РежимВыгрузкиИнформативныхОстатков",        РежимВыгрузкиИнформативныхОстатков);
	НастройкиСинхронизации.ДанныеЗаполнения.Вставить("СформироватьДокументВводаОстатков",         СформироватьДокументВводаОстатков);
	
	ТаблицаМагазины = ПланыОбмена.ОбменРозницаРозница.ПустаяСсылка().Магазины.Выгрузить();
	СтрокаМагазинов = ТаблицаМагазины.Добавить();
	СтрокаМагазинов.Магазин = Магазин;
	
	НастройкиСинхронизации.ДанныеЗаполнения.Вставить("Магазины",                      ТаблицаМагазины);
	НастройкиСинхронизации.ДанныеЗаполнения.Вставить("МагазиныИнформативныхОстатков", МагазиныИнформативныхОстатков.Выгрузить());
	
	ПараметрыОбработчикаСохраненияНастроек = Неопределено;
	ОбменДаннымиСервер.ПриНачалеСохраненияНастроекСинхронизации(
		НастройкиСинхронизации, ПараметрыОбработчикаСохраненияНастроек, ПродолжитьОжидание);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ПриОжиданииСохраненияНастройкиНаСервере(ПараметрыОбработчика, ПродолжитьОжидание)
	
	ОбменДаннымиСервер.ПриОжиданииСохраненияНастроекСинхронизации(
		ПараметрыОбработчика, ПродолжитьОжидание);
	
КонецПроцедуры

&НаСервере
Процедура ПриЗавершенииСохраненияНастройкиНаСервере(Отказ, СообщениеОбОшибке)
	
	СтатусЗавершения = Неопределено;
	ОбменДаннымиСервер.ПриЗавершенииСохраненияНастроекСинхронизации(
		ПараметрыОбработчикаСохраненияНастроек, СтатусЗавершения);
	ПараметрыОбработчикаСохраненияНастроек = Неопределено;
		
	Если СтатусЗавершения.Отказ Тогда
		Отказ = Истина;
		СообщениеОбОшибке = СтатусЗавершения.СообщениеОбОшибке;
		Возврат;
	Иначе
		
		Если Не СтатусЗавершения.Результат.НастройкиСохранены Тогда
			Отказ = Истина;
			СообщениеОбОшибке = СтатусЗавершения.Результат.СообщениеОбОшибке;
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания)
	
	ПараметрыОбработчикаОжидания = Новый Структура;
	ПараметрыОбработчикаОжидания.Вставить("МинимальныйИнтервал", 1);
	ПараметрыОбработчикаОжидания.Вставить("МаксимальныйИнтервал", 15);
	ПараметрыОбработчикаОжидания.Вставить("ТекущийИнтервал", 1);
	ПараметрыОбработчикаОжидания.Вставить("КоэффициентУвеличенияИнтервала", 1.4);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания)
	
	ПараметрыОбработчикаОжидания.ТекущийИнтервал = Мин(ПараметрыОбработчикаОжидания.МаксимальныйИнтервал,
		Окр(ПараметрыОбработчикаОжидания.ТекущийИнтервал * ПараметрыОбработчикаОжидания.КоэффициентУвеличенияИнтервала, 1));
	
КонецПроцедуры

#КонецОбласти

#Область РегистрацияИзменений

&НаКлиенте
Процедура ЗарегистрироватьДанныеКВыгрузке()
	
	Элементы.ДекорацияОжиданиеНадпись.Заголовок = НСтр("ru = 'Выполняется регистрация данных.
		|Пожалуйста, подождите...'");
	
	ДлительнаяОперация = НачатьРегистрациюДанныхКВыгрузкеНаСервере();
	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
	ПараметрыОжидания.ВыводитьОкноОжидания = Ложь;
	ОповещениеОЗавершении = Новый ОписаниеОповещения("ЗарегистрироватьДанныеКВыгрузкеЗавершение", ЭтотОбъект);
	ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, ОповещениеОЗавершении, ПараметрыОжидания);
КонецПроцедуры

&НаСервере
Функция НачатьРегистрациюДанныхКВыгрузкеНаСервере()
	
	КодУзла  = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(УзелОбмена, "Код");
	Магазины = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Магазин);
	
	ПараметрыПроцедуры = Новый Структура;
	ПараметрыПроцедуры.Вставить("СформироватьДокументВводаОстатков", СформироватьДокументВводаОстатков);
	// Параметры формирования остатков.
	ПараметрыПроцедуры.Вставить("УзелОбмена",                   УзелОбмена);
	ПараметрыПроцедуры.Вставить("КодУзла",                      КодУзла);
	ПараметрыПроцедуры.Вставить("ДатаНачалаВыгрузкиДокументов", ДатаНачалаВыгрузкиДокументов);
	ПараметрыПроцедуры.Вставить("Магазины",                     Магазины);
	ПараметрыПроцедуры.Вставить("Комментарий",                  "");
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	Возврат ДлительныеОперации.ВыполнитьВФоне("ПланыОбмена.ОбменРозницаРозница.ЗарегистрироватьДанныеДляНачальнойВыгрузки", 
		ПараметрыПроцедуры, ПараметрыВыполнения);
КонецФункции

&НаКлиенте
Процедура ЗарегистрироватьДанныеКВыгрузкеЗавершение(РезультатФоновогоЗадания, ДополнительныеПараметры) Экспорт
	
	Если РезультатФоновогоЗадания = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если РезультатФоновогоЗадания.Статус = "Выполнено" Тогда
		ИзменитьПорядковыйНомерПерехода(+1);
	Иначе
		ИзменитьПорядковыйНомерПерехода(-1);
		ОбщегоНазначенияКлиент.СообщитьПользователю(РезультатФоновогоЗадания.ПодробноеПредставлениеОшибки);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ИнициализацияФормыПриСоздании

&НаСервере
Процедура ПроверитьВозможностьИспользованияФормы(Отказ = Ложь)
	
	// Обязательно должны быть переданы параметры помощника настройки синхронизации.
	Если Не Параметры.Свойство("УзелОбмена")
		Или Не ЗначениеЗаполнено(Параметры.УзелОбмена) Тогда
		ТекстСообщения = НСтр("ru = 'Форма не предназначена для непосредственного использования.'");
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, , , , Отказ);
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ИнициализироватьРеквизитыФормы()
	
	УзелОбмена = Параметры.УзелОбмена;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ЭтотУзел", УзелОбмена);
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ОбменРозницаРозница.ВариантНастройки КАК ВариантНастройки,
		|	ОбменРозницаРозница.ВыгружатьИнформативныеОстаткиПоСкладам КАК ВыгружатьИнформативныеОстаткиПоСкладам,
		|	ОбменРозницаРозница.ДатаНачалаВыгрузкиДокументов КАК ДатаНачалаВыгрузкиДокументов,
		|	ОбменРозницаРозница.РабочееМесто КАК РабочееМесто,
		|	ОбменРозницаРозница.ПодчиненныйУзел КАК ПодчиненныйУзел,
		|	ОбменРозницаРозница.РежимВыгрузкиИнформативныхОстатков КАК РежимВыгрузкиИнформативныхОстатков,
		|	ОбменРозницаРозница.Магазины.(
		|		Магазин КАК Магазин
		|	) КАК Магазины,
		|	ОбменРозницаРозница.МагазиныИнформативныхОстатков.(
		|		Магазин КАК Магазин
		|	) КАК МагазиныИнформативныхОстатков
		|ИЗ
		|	ПланОбмена.ОбменРозницаРозница КАК ОбменРозницаРозница
		|ГДЕ
		|	ОбменРозницаРозница.Ссылка = &ЭтотУзел";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, Выборка,
			"ВариантНастройки,
			|ВыгружатьИнформативныеОстаткиПоСкладам,
			|ДатаНачалаВыгрузкиДокументов,
			|ПодчиненныйУзел,
			|РабочееМесто,
			|РежимВыгрузкиИнформативныхОстатков");
		
		Если НЕ Выборка.Магазины.Пустой() Тогда
			Магазин = Выборка.Магазины.Выгрузить()[0].Магазин;
		КонецЕсли;
		
	КонецЕсли;
	
	ЗаполнитьТаблицуПереходов();
	
КонецПроцедуры

&НаСервере
Процедура ИнициализироватьСвойстваФормы()
	
	Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Настройка синхронизации данных с ""%1""'"),
		УзелОбмена);
	
КонецПроцедуры

#КонецОбласти

#Область СценарииРаботыПомощника

&НаСервере
Функция ДобавитьСтрокуТаблицыПереходов(ИмяОсновнойСтраницы, ИмяСтраницыНавигации, ИмяСтраницыДекорации = "")
	
	СтрокаПереходов = ТаблицаПереходов.Добавить();
	СтрокаПереходов.ПорядковыйНомерПерехода = ТаблицаПереходов.Количество();
	СтрокаПереходов.ИмяОсновнойСтраницы = ИмяОсновнойСтраницы;
	СтрокаПереходов.ИмяСтраницыНавигации = ИмяСтраницыНавигации;
	СтрокаПереходов.ИмяСтраницыДекорации = ИмяСтраницыДекорации;
	
	Возврат СтрокаПереходов;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьТаблицуПереходов()
	
	ТаблицаПереходов.Очистить();
	
	Если НЕ СтандартныеПодсистемыСервер.ЭтоБазоваяВерсияКонфигурации() Тогда
		НовыйПереход = ДобавитьСтрокуТаблицыПереходов("СтраницаТипУзла", "СтраницаНавигацияНачало");
		НовыйПереход.ИмяОбработчикаПриПереходеДалее = "СтраницаТипУзла_ПриПереходеДалее";
	КонецЕсли;
	
	Если ПодчиненныйУзел Тогда
		НовыйПереход = ДобавитьСтрокуТаблицыПереходов("СтраницаПараметрыПодчиненныйУзел", "СтраницаНавигацияПродолжение");
		НовыйПереход.ИмяОбработчикаПриОткрытии      = "СтраницаПараметрыПодчиненныйУзел_ПриОткрытии";
		НовыйПереход.ИмяОбработчикаПриПереходеДалее = "СтраницаПараметрыПодчиненныйУзел_ПриПереходеДалее";
		
		Если ВариантНастройки = "ПоМагазину" Тогда
			НовыйПереход = ДобавитьСтрокуТаблицыПереходов("СтраницаФормированиеОстатков", "СтраницаНавигацияПродолжение");
		КонецЕсли;
	Иначе
		Если ВариантНастройки = "ПоРабочемуМесту" Тогда
			НовыйПереход = ДобавитьСтрокуТаблицыПереходов("СтраницаПараметрыГлавныйУзел", "СтраницаНавигацияПродолжение");
			НовыйПереход.ИмяОбработчикаПриПереходеДалее = "СтраницаПараметрыГлавныйУзел_ПриПереходеДалее";
		КонецЕсли;
	КонецЕсли;
	
	НовыйПереход = ДобавитьСтрокуТаблицыПереходов("СтраницаОжидание", "СтраницаНавигацияПродолжение");
	НовыйПереход.ДлительнаяОперация = Истина;
	НовыйПереход.ИмяОбработчикаДлительнойОперации = "СтраницаОжидание_ДлительнаяОперация";
	
	НовыйПереход = ДобавитьСтрокуТаблицыПереходов("СтраницаЗавершение", "СтраницаНавигацияОкончание");
	
КонецПроцедуры

#КонецОбласти

#Область ДополнительныеОбработчикиПереходов

////////////////////////////////////////////////////////////////////////////////
// Поставляемая часть

&НаКлиенте
Процедура ИзменитьПорядковыйНомерПерехода(Итератор)
	
	ОчиститьСообщения();
	
	УстановитьПорядковыйНомерПерехода(ПорядковыйНомерПерехода + Итератор);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьПорядковыйНомерПерехода(Знач Значение)
	
	ЭтоПереходДалее = (Значение > ПорядковыйНомерПерехода);
	
	ПорядковыйНомерПерехода = Значение;
	
	Если ПорядковыйНомерПерехода < 0 Тогда
		
		ПорядковыйНомерПерехода = 0;
		
	КонецЕсли;
	
	ПорядковыйНомерПереходаПриИзменении(ЭтоПереходДалее);
	
КонецПроцедуры

&НаКлиенте
Процедура ПорядковыйНомерПереходаПриИзменении(Знач ЭтоПереходДалее)
	
	// Выполняем обработчики событий перехода.
	ВыполнитьОбработчикиСобытийПерехода(ЭтоПереходДалее);
	
	// Устанавливаем отображение страниц.
	СтрокиПереходаТекущие = ТаблицаПереходов.НайтиСтроки(Новый Структура("ПорядковыйНомерПерехода", ПорядковыйНомерПерехода));
	
	Если СтрокиПереходаТекущие.Количество() = 0 Тогда
		ВызватьИсключение НСтр("ru = 'Не определена страница для отображения.'");
	КонецЕсли;
	
	СтрокаПереходаТекущая = СтрокиПереходаТекущие[0];
	
	Элементы.ПанельОсновная.ТекущаяСтраница  = Элементы[СтрокаПереходаТекущая.ИмяОсновнойСтраницы];
	Элементы.ПанельНавигации.ТекущаяСтраница = Элементы[СтрокаПереходаТекущая.ИмяСтраницыНавигации];
	
	Элементы.ПанельНавигации.ТекущаяСтраница.Доступность = Не (ЭтоПереходДалее И СтрокаПереходаТекущая.ДлительнаяОперация);
	
	// Устанавливаем текущую кнопку по умолчанию.
	КнопкаДалее = ПолучитьКнопкуФормыПоИмениКоманды(Элементы.ПанельНавигации.ТекущаяСтраница, "КомандаДалее");
	
	Если КнопкаДалее <> Неопределено Тогда
		
		КнопкаДалее.КнопкаПоУмолчанию = Истина;
		
	Иначе
		
		КнопкаГотово = ПолучитьКнопкуФормыПоИмениКоманды(Элементы.ПанельНавигации.ТекущаяСтраница, "КомандаГотово");
		
		Если КнопкаГотово <> Неопределено Тогда
			
			КнопкаГотово.КнопкаПоУмолчанию = Истина;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЭтоПереходДалее И СтрокаПереходаТекущая.ДлительнаяОперация Тогда
		
		ПодключитьОбработчикОжидания("ВыполнитьОбработчикДлительнойОперации", 0.1, Истина);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьОбработчикиСобытийПерехода(Знач ЭтоПереходДалее)
	
	// Обработчики событий переходов.
	Если ЭтоПереходДалее Тогда
		
		СтрокиПерехода = ТаблицаПереходов.НайтиСтроки(Новый Структура("ПорядковыйНомерПерехода", ПорядковыйНомерПерехода - 1));
		
		Если СтрокиПерехода.Количество() > 0 Тогда
			
			СтрокаПерехода = СтрокиПерехода[0];
			
			// Обработчик ПриПереходеДалее.
			Если Не ПустаяСтрока(СтрокаПерехода.ИмяОбработчикаПриПереходеДалее)
				И Не СтрокаПерехода.ДлительнаяОперация Тогда
				
				ИмяПроцедуры = "Подключаемый_[ИмяОбработчика](Отказ)";
				ИмяПроцедуры = СтрЗаменить(ИмяПроцедуры, "[ИмяОбработчика]", СтрокаПерехода.ИмяОбработчикаПриПереходеДалее);
				
				Отказ = Ложь;
				
				Результат = Вычислить(ИмяПроцедуры);
				
				Если Отказ Тогда
					
					ПорядковыйНомерПерехода = ПорядковыйНомерПерехода - 1;
					Возврат;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
		
		СтрокиПерехода = ТаблицаПереходов.НайтиСтроки(Новый Структура("ПорядковыйНомерПерехода", ПорядковыйНомерПерехода + 1));
		
		Если СтрокиПерехода.Количество() > 0 Тогда
			
			СтрокаПерехода = СтрокиПерехода[0];
			
			// Обработчик ПриПереходеНазад.
			Если Не ПустаяСтрока(СтрокаПерехода.ИмяОбработчикаПриПереходеНазад)
				И Не СтрокаПерехода.ДлительнаяОперация Тогда
				
				ИмяПроцедуры = "Подключаемый_[ИмяОбработчика](Отказ)";
				ИмяПроцедуры = СтрЗаменить(ИмяПроцедуры, "[ИмяОбработчика]", СтрокаПерехода.ИмяОбработчикаПриПереходеНазад);
				
				Отказ = Ложь;
				
				Результат = Вычислить(ИмяПроцедуры);
				
				Если Отказ Тогда
					
					ПорядковыйНомерПерехода = ПорядковыйНомерПерехода + 1;
					Возврат;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	СтрокиПереходаТекущие = ТаблицаПереходов.НайтиСтроки(Новый Структура("ПорядковыйНомерПерехода", ПорядковыйНомерПерехода));
	
	Если СтрокиПереходаТекущие.Количество() = 0 Тогда
		ВызватьИсключение НСтр("ru = 'Не определена страница для отображения.'");
	КонецЕсли;
	
	СтрокаПереходаТекущая = СтрокиПереходаТекущие[0];
	
	Если СтрокаПереходаТекущая.ДлительнаяОперация И Не ЭтоПереходДалее Тогда
		
		УстановитьПорядковыйНомерПерехода(ПорядковыйНомерПерехода - 1);
		Возврат;
	КонецЕсли;
	
	// обработчик ПриОткрытии
	Если Не ПустаяСтрока(СтрокаПереходаТекущая.ИмяОбработчикаПриОткрытии) Тогда
		
		ИмяПроцедуры = "Подключаемый_[ИмяОбработчика](Отказ, ПропуститьСтраницу, ЭтоПереходДалее)";
		ИмяПроцедуры = СтрЗаменить(ИмяПроцедуры, "[ИмяОбработчика]", СтрокаПереходаТекущая.ИмяОбработчикаПриОткрытии);
		
		Отказ = Ложь;
		ПропуститьСтраницу = Ложь;
		
		Результат = Вычислить(ИмяПроцедуры);
		
		Если Отказ Тогда
			
			ПорядковыйНомерПерехода = ПорядковыйНомерПерехода - 1;
			Возврат;
			
		ИначеЕсли ПропуститьСтраницу Тогда
			
			Если ЭтоПереходДалее Тогда
				
				УстановитьПорядковыйНомерПерехода(ПорядковыйНомерПерехода + 1);
				Возврат;
				
			Иначе
				
				УстановитьПорядковыйНомерПерехода(ПорядковыйНомерПерехода - 1);
				Возврат;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьОбработчикДлительнойОперации()
	
	СтрокиПереходаТекущие = ТаблицаПереходов.НайтиСтроки(Новый Структура("ПорядковыйНомерПерехода", ПорядковыйНомерПерехода));
	
	Если СтрокиПереходаТекущие.Количество() = 0 Тогда
		ВызватьИсключение НСтр("ru = 'Не определена страница для отображения.'");
	КонецЕсли;
	
	СтрокаПереходаТекущая = СтрокиПереходаТекущие[0];
	
	// Обработчик ОбработкаДлительнойОперации.
	Если Не ПустаяСтрока(СтрокаПереходаТекущая.ИмяОбработчикаДлительнойОперации) Тогда
		
		ИмяПроцедуры = "Подключаемый_[ИмяОбработчика](Отказ, ПерейтиДалее)";
		ИмяПроцедуры = СтрЗаменить(ИмяПроцедуры, "[ИмяОбработчика]", СтрокаПереходаТекущая.ИмяОбработчикаДлительнойОперации);
		
		Отказ = Ложь;
		ПерейтиДалее = Истина;
		
		Результат = Вычислить(ИмяПроцедуры);
		
		Если Отказ Тогда
			
			ПорядковыйНомерПерехода = ПорядковыйНомерПерехода - 1;
			Возврат;
			
		ИначеЕсли ПерейтиДалее Тогда
			
			УстановитьПорядковыйНомерПерехода(ПорядковыйНомерПерехода + 1);
			Возврат;
			
		КонецЕсли;
		
	Иначе
		
		УстановитьПорядковыйНомерПерехода(ПорядковыйНомерПерехода + 1);
		Возврат;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьКнопкуФормыПоИмениКоманды(ЭлементФормы, ИмяКоманды)
	
	Для Каждого Элемент Из ЭлементФормы.ПодчиненныеЭлементы Цикл
		
		Если ТипЗнч(Элемент) = Тип("ГруппаФормы") Тогда
			
			ЭлементФормыПоИмениКоманды = ПолучитьКнопкуФормыПоИмениКоманды(Элемент, ИмяКоманды);
			
			Если ЭлементФормыПоИмениКоманды <> Неопределено Тогда
				
				Возврат ЭлементФормыПоИмениКоманды;
				
			КонецЕсли;
			
		ИначеЕсли ТипЗнч(Элемент) = Тип("КнопкаФормы")
			И СтрНайти(Элемент.ИмяКоманды, ИмяКоманды) > 0 Тогда
			
			Возврат Элемент;
			
		Иначе
			
			Продолжить;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции

#КонецОбласти

#Область Прочие

&НаСервере
Функция СформироватьМассивВыбранныхЗначений(ПараметрыФормы)
	
	МассивВыбранныхЗначений = Новый Массив;
	
	Если РежимВыгрузкиИнформативныхОстатков = Перечисления.РежимыВыгрузкиИнформативныхОстатков.ИндивидуальнаяНастройка Тогда
		ТабличнаяЧасть           = ЭтотОбъект[ПараметрыФормы.ИмяЭлементаФормыДляЗаполнения];
		ТаблицаВыбранныхЗначений = ТабличнаяЧасть.Выгрузить(,ПараметрыФормы.ИмяРеквизитаЭлементаФормыДляЗаполнения);
		МассивВыбранныхЗначений  = ТаблицаВыбранныхЗначений.ВыгрузитьКолонку(ПараметрыФормы.ИмяРеквизитаЭлементаФормыДляЗаполнения);
	ИначеЕсли РежимВыгрузкиИнформативныхОстатков = Перечисления.РежимыВыгрузкиИнформативныхОстатков.ВыгружатьПоВсемМагазинам Тогда
		ИсключаемыеМагазины = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Магазин);
		МассивВыбранныхЗначений = ОбменДаннымиРТ.ДоступныеМагазиныИнформативныхОстатков(ИсключаемыеМагазины);
	КонецЕсли;
	
	Возврат МассивВыбранныхЗначений;

КонецФункции

&НаКлиенте
Процедура ОбновитьПодсказкуТипУзла()
	
	ТекстПодсказки = "";
	Если ПодчиненныйУзел Тогда
		Если ВариантНастройки = "ПоМагазину" Тогда
			ТекстПодсказки = НСтр("ru = 'В узел передаются данные с наложением фильтров по магазину.'");
		ИначеЕсли ВариантНастройки = "ПоРабочемуМесту" Тогда
			ТекстПодсказки = НСтр("ru = 'В узел передаются данные с наложением фильтров по магазину и рабочему месту.'");
		КонецЕсли;
	Иначе
		// Консолидирующий узел.
		ТекстПодсказки = НСтр("ru = 'В узел передаются все данные текущей информационной базы для обобщения.'");
	КонецЕсли;
	
	Элементы.Тип.РасширеннаяПодсказка.Заголовок = ТекстПодсказки;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьДанныеОбъекта(СтруктураПараметров)
	
	ЭтотОбъект[СтруктураПараметров.ИмяТаблицыДляЗаполнения].Очистить();
	
	ТаблицаВоВременномХранилище = ПолучитьИзВременногоХранилища(СтруктураПараметров.АдресТаблицыВоВременномХранилище);
	СписокВыбранныхЗначений = ТаблицаВоВременномХранилище.ВыгрузитьКолонку("Представление");
	
	Если СписокВыбранныхЗначений.Количество() > 0 Тогда
		
		ИсключаемыеМагазины = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Магазин);
		ДоступныеМагазиныИнформативныхОстатков = ОбменДаннымиРТ.ДоступныеМагазиныИнформативныхОстатков(ИсключаемыеМагазины);
		
		Если ОбщегоНазначения.КоллекцииИдентичны(ДоступныеМагазиныИнформативныхОстатков, СписокВыбранныхЗначений) Тогда
			РежимВыгрузкиИнформативныхОстатков = Перечисления.РежимыВыгрузкиИнформативныхОстатков.ВыгружатьПоВсемМагазинам;
		Иначе
			РежимВыгрузкиИнформативныхОстатков = Перечисления.РежимыВыгрузкиИнформативныхОстатков.ИндивидуальнаяНастройка;
			ОбщегоНазначенияКлиентСервер.ДополнитьТаблицуИзМассива(
				ЭтотОбъект[СтруктураПараметров.ИмяТаблицыДляЗаполнения],
				СписокВыбранныхЗначений,
				СтруктураПараметров.ИмяКолонкиДляЗаполнения);
		КонецЕсли;
	Иначе
		РежимВыгрузкиИнформативныхОстатков = Перечисления.РежимыВыгрузкиИнформативныхОстатков.НеВыгружать;
	КонецЕсли;
	
	ОбновитьНаименованиеКомандФормы();

КонецПроцедуры

&НаСервере
Процедура ОбновитьНаименованиеКомандФормы()
	
	ТекстЗаголовка = НСтр("ru = 'Выгружать информативные остатки по складам магазина: %1'");
	Элементы.ВыгружатьИнформативныеОстаткиПоСкладам.Заголовок = СтрШаблон(ТекстЗаголовка, Строка(Магазин));
	
	// Обновим заголовок надписи по выбранным магазинам.
	ВыбранныеМагазины = МагазиныИнформативныхОстатков.Выгрузить().ВыгрузитьКолонку("Магазин");
	
	ТекстЗаголовка = ПланыОбмена.ОбменРозницаРозница.ЗаголовокКомандыИнформативныхОстатков(
		РежимВыгрузкиИнформативныхОстатков, ВыбранныеМагазины);
		
	Элементы.ИнформацияПоВыбраннымМагазинам.Заголовок = ТекстЗаголовка;
	
КонецПроцедуры

&НаСервере
Процедура МагазинПриИзмененииНаСервере()
	
	Если ВариантНастройки = "ПоРабочемуМесту" Тогда
		ИспользуетсяНесколькоСкладов = Справочники.Склады.ИспользуетсяНесколькоСкладов(Магазин);
		Элементы.ВыгружатьИнформативныеОстаткиПоСкладам.Доступность = ИспользуетсяНесколькоСкладов;
		Если НЕ ИспользуетсяНесколькоСкладов Тогда
			ВыгружатьИнформативныеОстаткиПоСкладам = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	// Проверим магазин шапки на вхождение в магазины информативных остатков.
	Если РежимВыгрузкиИнформативныхОстатков = Перечисления.РежимыВыгрузкиИнформативныхОстатков.ИндивидуальнаяНастройка Тогда
		ТаблицаЗначенийМагазины = МагазиныИнформативныхОстатков.Выгрузить();
		
		СтрокаМагазин = ТаблицаЗначенийМагазины.Найти(Магазин, "Магазин");
		Если НЕ СтрокаМагазин = Неопределено Тогда
			ТаблицаЗначенийМагазины.Удалить(СтрокаМагазин);
		КонецЕсли;
		
		МагазиныИнформативныхОстатков.Загрузить(ТаблицаЗначенийМагазины);
		
		// Если удалили последний в таблице магазин
		Если МагазиныИнформативныхОстатков.Количество() = 0 Тогда
			РежимВыгрузкиИнформативныхОстатков = Перечисления.РежимыВыгрузкиИнформативныхОстатков.НеВыгружать;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СтраницаТипУзла_ПриПереходеДалееНаСервере()
	
	// Обновим таблицу переходов.
	ЗаполнитьТаблицуПереходов();
	
	СформироватьДокументВводаОстатков = Ложь;
	Если ПодчиненныйУзел Тогда
		Если НЕ ЗначениеЗаполнено(ДатаНачалаВыгрузкиДокументов) Тогда
			ДатаНачалаВыгрузкиДокументов = НачалоДня(ТекущаяДатаСеанса());
		КонецЕсли;
		Если ВариантНастройки = "ПоМагазину" Тогда
			СформироватьДокументВводаОстатков = Истина;
		КонецЕсли;
	Иначе
		ДатаНачалаВыгрузкиДокументов = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СтраницаПараметрыПодчиненныйУзел_ПриОткрытииНаСервере()
	Если ВариантНастройки = "ПоРабочемуМесту" Тогда
		ИспользуетсяНесколькоСкладов = Справочники.Склады.ИспользуетсяНесколькоСкладов(Магазин);
		Элементы.ВыгружатьИнформативныеОстаткиПоСкладам.Доступность = ИспользуетсяНесколькоСкладов;
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#КонецОбласти