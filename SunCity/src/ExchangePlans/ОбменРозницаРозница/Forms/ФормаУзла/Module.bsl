#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ВызватьИсключение НСтр("ru = 'Использование плана обмена не предусмотрено.'");
	
	Если НЕ Объект.ЭтотУзел Тогда
		ЗаполнитьМагазины();
	КонецЕсли;
	
	// Обработчик подсистемы запрета редактирования реквизитов объектов
	ЗапретРедактированияРеквизитовОбъектов.ЗаблокироватьРеквизиты(ЭтотОбъект);
	
	УстановитьВидимостьДоступность();
	
	ОбновитьНаименованиеКомандФормы();
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	Если Объект.ЭтотУзел
		ИЛИ НЕ Объект.ПодчиненныйУзел Тогда
		Возврат;
	КонецЕсли;
	
	// Заполним магазины.
	ТекущийОбъект.Магазины.Очистить();
	
	СтрокаМагазинов = ТекущийОбъект.Магазины.Добавить();
	СтрокаМагазинов.Магазин = Магазин;
	
КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	ОбменДаннымиСервер.ФормаУзлаПриЗаписиНаСервере(ТекущийОбъект, Отказ);
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	Если СформироватьДокументВводаОстатков Тогда
		ДлительнаяОперация = НачатьРегистрациюДанныхКВыгрузкеНаСервере();
		ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
		ПараметрыОжидания.ТекстСообщения = НСтр("ru = 'Выполняется формирование документа ввода остатков для узла.'");
		ОповещениеОЗавершении = Новый ОписаниеОповещения("ЗарегистрироватьДанныеКВыгрузкеЗавершение", ЭтотОбъект);
		ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, ОповещениеОЗавершении, ПараметрыОжидания);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	// Обработчик подсистемы запрета редактирования реквизитов объектов
	ЗапретРедактированияРеквизитовОбъектов.ЗаблокироватьРеквизиты(ЭтотОбъект);
	
	// Зарегистрируем информативные остатки при изменении настройки.
	Если ОбновитьИнформативныеОстаткиПоСкладам Тогда
		ПланыОбмена.ЗарегистрироватьИзменения(Объект.Ссылка, Метаданные.РегистрыСведений.ИнформативныеОстаткиТоваровПоСкладам);
	КонецЕсли;
	Если ОбновитьИнформативныеОстаткиПоМагазинам Тогда
		ПланыОбмена.ЗарегистрироватьИзменения(Объект.Ссылка, Метаданные.РегистрыСведений.ИнформативныеОстаткиТоваровПоМагазинам);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	Оповестить("Запись_УзелПланаОбмена");
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	Если Объект.ЭтотУзел ИЛИ НЕ Объект.ПодчиненныйУзел Тогда
		ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(ПроверяемыеРеквизиты, "Магазин");
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	ОбновитьДанныеОбъекта(ВыбранноеЗначение);
	Модифицированность = Истина;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ТипПриИзменении(Элемент)
	УстановитьВидимостьДоступность();
КонецПроцедуры

&НаКлиенте
Процедура МагазинПриИзменении(Элемент)
	
	МагазинПриИзмененииНаСервере();
	ОбновитьНаименованиеКомандФормы();
	УстановитьВидимостьДоступность();
	
	Если Объект.ВариантНастройки = "ПоМагазину" Тогда
		
		ТекстВопроса = НСтр("ru = 'Изменение магазина может привести к нарушению целостности данных базы-корреспондента.
			|Рекомендуется сформировать документ ввода остатков для узла.
			|При этом будут заново зарегистрированы все данные к обмену.'");
		
		ПоказатьВопросФормированиеДокументаВводОстатков(ТекстВопроса);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаНачалаВыгрузкиДокументовПриИзменении(Элемент)
	
	Если Объект.ВариантНастройки = "ПоМагазину" Тогда
		
		ТекстВопроса = НСтр("ru = 'Изменение даты начала синхронизации может привести к нарушению целостности данных базы-корреспондента.
			|Рекомендуется сформировать документ ввода остатков для узла.
			|При этом будут заново зарегистрированы все данные к обмену.'");
		
		ПоказатьВопросФормированиеДокументаВводОстатков(ТекстВопроса);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИнформацияПоВыбраннымМагазинамНажатие(Элемент)
	
	КоллекцияФильтров = Новый Массив;
	
	ФильтрМагазин = Новый Структура;
	ФильтрМагазин.Вставить("РеквизитОтбора", "Ссылка");
	ФильтрМагазин.Вставить("Условие", "<>");
	ФильтрМагазин.Вставить("ИмяПараметра", "МагазинИсключение"); 
	ФильтрМагазин.Вставить("ЗначениеПараметра", Магазин);
	КоллекцияФильтров.Добавить(ФильтрМагазин);
	
	ФильтрСкладУправляющейСистемы = Новый Структура;
	ФильтрСкладУправляющейСистемы.Вставить("РеквизитОтбора", "СкладУправляющейСистемы");
	ФильтрСкладУправляющейСистемы.Вставить("Условие", "=");
	ФильтрСкладУправляющейСистемы.Вставить("ИмяПараметра", "СкладУправляющейСистемы"); 
	ФильтрСкладУправляющейСистемы.Вставить("ЗначениеПараметра", Ложь);
	КоллекцияФильтров.Добавить(ФильтрСкладУправляющейСистемы);
	
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("ИмяЭлементаФормыДляЗаполнения",          "МагазиныИнформативныхОстатков");
	ПараметрыФормы.Вставить("ИмяРеквизитаЭлементаФормыДляЗаполнения", "Магазин");
	ПараметрыФормы.Вставить("ИмяТаблицыВыбора",                       "Справочник.Магазины");
	ПараметрыФормы.Вставить("ЗаголовокФормыВыбора",                   НСтр("ru = 'Выберите магазины информативных остатков:'"));
	ПараметрыФормы.Вставить("МассивВыбранныхЗначений",                СформироватьМассивВыбранныхЗначений(ПараметрыФормы));
	ПараметрыФормы.Вставить("ПараметрыВнешнегоСоединения",            Неопределено);
	ПараметрыФормы.Вставить("КоллекцияФильтров",                      КоллекцияФильтров);
	
	ОткрытьФорму("ОбщаяФорма.ФормаВыбораДополнительныхУсловий",
		ПараметрыФормы,
		ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура ВыгружатьИнформативныеОстаткиПоСкладамПриИзменении(Элемент)
	ОбновитьИнформативныеОстаткиПоСкладам = Истина;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

// Обработчик команды, создаваемой механизмом запрета редактирования ключевых реквизитов.
//
&НаКлиенте
Процедура Подключаемый_РазрешитьРедактированиеРеквизитовОбъекта(Команда)
	
	ЗапретРедактированияРеквизитовОбъектовКлиент.РазрешитьРедактированиеРеквизитовОбъекта(ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ЗаполнитьМагазины()
	
	Магазины = Объект.Магазины.Выгрузить();
	Если Магазины.Количество() > 0 Тогда
		Магазин = Магазины[0].Магазин;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция СформироватьМассивВыбранныхЗначений(ПараметрыФормы)
	
	МассивВыбранныхЗначений = Новый Массив;
	
	Если Объект.РежимВыгрузкиИнформативныхОстатков = Перечисления.РежимыВыгрузкиИнформативныхОстатков.ИндивидуальнаяНастройка Тогда
		ТабличнаяЧасть           = Объект[ПараметрыФормы.ИмяЭлементаФормыДляЗаполнения];
		ТаблицаВыбранныхЗначений = ТабличнаяЧасть.Выгрузить(,ПараметрыФормы.ИмяРеквизитаЭлементаФормыДляЗаполнения);
		МассивВыбранныхЗначений  = ТаблицаВыбранныхЗначений.ВыгрузитьКолонку(ПараметрыФормы.ИмяРеквизитаЭлементаФормыДляЗаполнения);
	ИначеЕсли Объект.РежимВыгрузкиИнформативныхОстатков = Перечисления.РежимыВыгрузкиИнформативныхОстатков.ВыгружатьПоВсемМагазинам Тогда
		ИсключаемыеМагазины = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Магазин);
		МассивВыбранныхЗначений = ОбменДаннымиРТ.ДоступныеМагазиныИнформативныхОстатков(ИсключаемыеМагазины);
	КонецЕсли;
	
	Возврат МассивВыбранныхЗначений;

КонецФункции

&НаСервере
Процедура МагазинПриИзмененииНаСервере()
	
	Если Объект.ВариантНастройки = "ПоРабочемуМесту"
		И НЕ Справочники.Склады.ИспользуетсяНесколькоСкладов(Магазин) Тогда
		Объект.ВыгружатьИнформативныеОстаткиПоСкладам = Ложь;
	КонецЕсли;
	
	// Проверим магазин шапки на вхождение в магазины информативных остатков.
	Если Объект.РежимВыгрузкиИнформативныхОстатков = Перечисления.РежимыВыгрузкиИнформативныхОстатков.ИндивидуальнаяНастройка Тогда
		ТаблицаЗначенийМагазины = Объект.МагазиныИнформативныхОстатков.Выгрузить();
		
		СтрокаМагазин = ТаблицаЗначенийМагазины.Найти(Магазин, "Магазин");
		Если НЕ СтрокаМагазин = Неопределено Тогда
			ТаблицаЗначенийМагазины.Удалить(СтрокаМагазин);
		КонецЕсли;
		
		Объект.МагазиныИнформативныхОстатков.Загрузить(ТаблицаЗначенийМагазины);
		
		// Если удалили последний в таблице магазин
		Если Объект.МагазиныИнформативныхОстатков.Количество() = 0 Тогда
			Объект.РежимВыгрузкиИнформативныхОстатков = Перечисления.РежимыВыгрузкиИнформативныхОстатков.НеВыгружать;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьДоступность()
	
	Если Объект.ЭтотУзел Тогда
		Элементы.ПравилаОтправкиДанных.Видимость = Ложь;
		Элементы.Тип.Видимость = Ложь;
		Возврат;
	КонецЕсли;
	
	ВидимостьПравилОтправки = Истина;
	ПоРабочемуМесту = Объект.ВариантНастройки = "ПоРабочемуМесту";
	Если Объект.ПодчиненныйУзел Тогда
		Элементы.ПанельНастроек.ТекущаяСтраница = Элементы.СтраницаПараметрыПодчиненныйУзел;
		
		Элементы.ВыгружатьИнформативныеОстаткиПоСкладам.Видимость = ПоРабочемуМесту;
		Элементы.РабочееМесто.Видимость = ПоРабочемуМесту;
		
		Если ПоРабочемуМесту Тогда
			ИспользуетсяНесколькоСкладов = Справочники.Склады.ИспользуетсяНесколькоСкладов(Магазин);
			Элементы.ВыгружатьИнформативныеОстаткиПоСкладам.Доступность = ИспользуетсяНесколькоСкладов;
			
			ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
				Элементы,
				"РабочееМесто",
				"Видимость",
				ЗначениеЗаполнено(Объект.РабочееМесто));
		КонецЕсли;
		
	Иначе
		// Консолидирующий узел.
		Элементы.ПанельНастроек.ТекущаяСтраница = Элементы.СтраницаПараметрыГлавныйУзел;
		
		Если НЕ ПоРабочемуМесту Тогда
			ВидимостьПравилОтправки = Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
	Элементы.ПравилаОтправкиДанных.Видимость = ВидимостьПравилОтправки;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьНаименованиеКомандФормы()
	
	ТекстЗаголовка = НСтр("ru = 'Выгружать информативные остатки по складам магазина: %1'");
	Элементы.ВыгружатьИнформативныеОстаткиПоСкладам.Заголовок = СтрШаблон(ТекстЗаголовка, Строка(Магазин));
	
	// Обновим заголовок надписи по выбранным магазинам.
	ВыбранныеМагазины = Объект.МагазиныИнформативныхОстатков.Выгрузить().ВыгрузитьКолонку("Магазин");
	
	ТекстЗаголовка = ПланыОбмена.ОбменРозницаРозница.ЗаголовокКомандыИнформативныхОстатков(
		Объект.РежимВыгрузкиИнформативныхОстатков, ВыбранныеМагазины);
		
	Элементы.ИнформацияПоВыбраннымМагазинам.Заголовок = ТекстЗаголовка;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьДанныеОбъекта(СтруктураПараметров)
	
	Объект[СтруктураПараметров.ИмяТаблицыДляЗаполнения].Очистить();
	
	ОбновитьИнформативныеОстаткиПоМагазинам = Истина;
	
	ТаблицаВоВременномХранилище = ПолучитьИзВременногоХранилища(СтруктураПараметров.АдресТаблицыВоВременномХранилище);
	СписокВыбранныхЗначений = ТаблицаВоВременномХранилище.ВыгрузитьКолонку("Представление");
	
	Если СписокВыбранныхЗначений.Количество() > 0 Тогда
		ИсключаемыеМагазины = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Магазин);
		ДоступныеМагазиныИнформативныхОстатков = ОбменДаннымиРТ.ДоступныеМагазиныИнформативныхОстатков(ИсключаемыеМагазины);
		
		Если ОбщегоНазначения.КоллекцииИдентичны(ДоступныеМагазиныИнформативныхОстатков, СписокВыбранныхЗначений) Тогда
			Объект.РежимВыгрузкиИнформативныхОстатков = Перечисления.РежимыВыгрузкиИнформативныхОстатков.ВыгружатьПоВсемМагазинам;
		Иначе
			Объект.РежимВыгрузкиИнформативныхОстатков = Перечисления.РежимыВыгрузкиИнформативныхОстатков.ИндивидуальнаяНастройка;
			ОбщегоНазначенияКлиентСервер.ДополнитьТаблицуИзМассива(
				Объект[СтруктураПараметров.ИмяТаблицыДляЗаполнения],
				СписокВыбранныхЗначений,
				СтруктураПараметров.ИмяКолонкиДляЗаполнения);
		КонецЕсли;
	Иначе
		Объект.РежимВыгрузкиИнформативныхОстатков = Перечисления.РежимыВыгрузкиИнформативныхОстатков.НеВыгружать;
	КонецЕсли;
	
	ОбновитьНаименованиеКомандФормы();

КонецПроцедуры

&НаКлиенте
Процедура ПоказатьВопросФормированиеДокументаВводОстатков(ТекстВопроса)
	
	Элементы.СформироватьДокументВводаОстатков.Видимость = Истина;
	
	Кнопки = Новый СписокЗначений;
	Кнопки.Добавить(КодВозвратаДиалога.Да, НСтр("ru = 'Сформировать'"));
	Кнопки.Добавить(КодВозвратаДиалога.Нет, НСтр("ru = 'Отмена'"));
	
	Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВопроса", ЭтотОбъект, Параметры);
	ПоказатьВопрос(Оповещение, ТекстВопроса, Кнопки);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияВопроса(Результат, Параметры) Экспорт
	СформироватьДокументВводаОстатков = Результат = КодВозвратаДиалога.Да;
КонецПроцедуры

&НаСервере
Функция НачатьРегистрациюДанныхКВыгрузкеНаСервере()
	
	Магазины = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Магазин);
	
	ПараметрыПроцедуры = Новый Структура;
	ПараметрыПроцедуры.Вставить("СформироватьДокументВводаОстатков", СформироватьДокументВводаОстатков);
	// Параметры формирования остатков.
	ПараметрыПроцедуры.Вставить("УзелОбмена",                   Объект.Ссылка);
	ПараметрыПроцедуры.Вставить("КодУзла",                      Объект.Код);
	ПараметрыПроцедуры.Вставить("ДатаНачалаВыгрузкиДокументов", Объект.ДатаНачалаВыгрузкиДокументов);
	ПараметрыПроцедуры.Вставить("Магазины",                     Магазины);
	ПараметрыПроцедуры.Вставить("Комментарий",                  "");
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	Возврат ДлительныеОперации.ВыполнитьВФоне("ПланыОбмена.ОбменРозницаРозница.ЗарегистрироватьДанныеДляНачальнойВыгрузки", 
		ПараметрыПроцедуры, ПараметрыВыполнения);
КонецФункции

&НаКлиенте
Процедура ЗарегистрироватьДанныеКВыгрузкеЗавершение(РезультатФоновогоЗадания, ДополнительныеПараметры) Экспорт
	
	Если РезультатФоновогоЗадания = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЗарегистрироватьДанныеКВыгрузкеЗавершениеНаСервере(РезультатФоновогоЗадания);
	
	Если РезультатФоновогоЗадания.Статус = "Выполнено" Тогда
		СформироватьДокументВводаОстатков = Ложь;
		Элементы.СформироватьДокументВводаОстатков.Видимость = Ложь;
	Иначе
		Модифицированность = Истина;
		ТекстСообщения = НСтр("ru = 'Формирование документа ""Ввод начальных остатков узла"" не было выполнено.
			|Рекомендуется повторно записать узел.'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		Если РезультатФоновогоЗадания.Статус = "Ошибка" Тогда
			ВызватьИсключение РезультатФоновогоЗадания.КраткоеПредставлениеОшибки;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗарегистрироватьДанныеКВыгрузкеЗавершениеНаСервере(РезультатФоновогоЗадания)
	
	Если РезультатФоновогоЗадания.Статус = "Ошибка" Тогда
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'Обмен данными.Загрузка данных'", ОбщегоНазначения.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка,,,
			РезультатФоновогоЗадания.ПодробноеПредставлениеОшибки);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти