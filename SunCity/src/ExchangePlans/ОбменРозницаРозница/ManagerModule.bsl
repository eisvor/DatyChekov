#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Позволяет переопределить настройки плана обмена, заданные по умолчанию.
// Значения настроек по умолчанию см. в ОбменДаннымиСервер.НастройкиПланаОбменаПоУмолчанию.
// 
// Параметры:
//  Настройки - Структура - настройки плана обмена по умолчанию, см. ОбменДаннымиСервер.НастройкиПланаОбменаПоУмолчанию,
//                          описание возвращаемого значения функции.
//
Процедура ПриПолученииНастроек(Настройки) Экспорт
	
	Настройки.ПланОбменаИспользуетсяВМоделиСервиса = Истина;
	
	Настройки.Алгоритмы.ПриПолученииВариантовНастроекОбмена      = Истина;
	Настройки.Алгоритмы.ПриПолученииОписанияВариантаНастройки    = Истина;
	Настройки.Алгоритмы.ПриПодключенииККорреспонденту            = Истина;
	Настройки.Алгоритмы.ПриСохраненииНастроекСинхронизацииДанных = Истина;
	
	Настройки.ИмяКонфигурацииИсточника = Метаданные.Имя;
	
КонецПроцедуры

// Заполняет коллекцию вариантов настроек, предусмотренных для плана обмена.
// 
// Параметры:
//  ВариантыНастроекОбмена - ТаблицаЗначений - коллекция вариантов настроек обмена, см. описание возвращаемого значения
//                                       функции НастройкиПланаОбменаПоУмолчанию общего модуля ОбменДаннымиСервер.
//  ПараметрыКонтекста     - Структура - см. ОбменДаннымиСервер.ПараметрыКонтекстаПолученияВариантовНастроек,
//                                       описание возвращаемого значения функции.
//
Процедура ПриПолученииВариантовНастроекОбмена(ВариантыНастроекОбмена, ПараметрыКонтекста) Экспорт
	
	ВариантНастройки = ВариантыНастроекОбмена.Добавить();
	ВариантНастройки.ИдентификаторНастройки = "ПоМагазину";
	ВариантНастройки.КорреспондентВМоделиСервиса   = Истина;
	ВариантНастройки.КорреспондентВЛокальномРежиме = Истина;
	
	ВариантНастройки = ВариантыНастроекОбмена.Добавить();
	ВариантНастройки.ИдентификаторНастройки = "ПоРабочемуМесту";
	ВариантНастройки.КорреспондентВМоделиСервиса   = Истина;
	ВариантНастройки.КорреспондентВЛокальномРежиме = Истина;
	
КонецПроцедуры

// Заполняет набор параметров, определяющих вариант настройки обмена.
// 
// Параметры:
//  ОписаниеВарианта       - Структура - набор варианта настройки по умолчанию,
//                                       см. ОбменДаннымиСервер.ОписаниеВариантаНастройкиОбменаПоУмолчанию,
//                                       описание возвращаемого значения.
//  ИдентификаторНастройки - Строка    - идентификатор варианта настройки обмена.
//  ПараметрыКонтекста     - Структура - см. ОбменДаннымиСервер.ПараметрыКонтекстаПолученияОписанияВариантаНастройки,
//                                       описание возвращаемого значения функции.
//
Процедура ПриПолученииОписанияВариантаНастройки(ОписаниеВарианта, ИдентификаторНастройки, ПараметрыКонтекста) Экспорт
	
	КраткаяИнформацияПоОбмену = "";
	ЗаголовокКоманды          = "";
	ЗаголовокПомощника        = "";
	ЗаголовокУзла             = "";
	Если ИдентификаторНастройки = "ПоМагазину" Тогда
		КраткаяИнформацияПоОбмену = НСтр("ru = 'Позволяет синхронизировать данные с конфигурацией ""1С:Розница"" в сервисе с установкой отборов по магазину.
			|Для настройки синхронизации конфигурации должны быть одной версии и иметь идентичную структуру метаданных.'");
		
		ЗаголовокКоманды   = НСтр("ru = 'Розница, ред. 2.3 в сервисе (По магазину)'");
		ЗаголовокПомощника = НСтр("ru = 'Синхронизация данных с 1С:Розница (настройка)'");
		ЗаголовокУзла      = НСтр("ru = 'Синхронизация данных с 1С:Розница (По магазину)'");
	ИначеЕсли ИдентификаторНастройки = "ПоРабочемуМесту" Тогда
		КраткаяИнформацияПоОбмену = НСтр("ru = 'Позволяет синхронизировать данные с конфигурацией ""1С:Розница"" в сервисе с установкой отборов по рабочему месту.
			|Для настройки синхронизации конфигурации должны быть одной версии и иметь идентичную структуру метаданных.'");
		
		ЗаголовокКоманды   = НСтр("ru = 'Розница, ред. 2.3 в сервисе (По рабочему месту)'");
		ЗаголовокПомощника = НСтр("ru = 'Синхронизация данных с 1С:Розница (настройка)'");
		ЗаголовокУзла      = НСтр("ru = 'Синхронизация данных с 1С:Розница (По рабочему месту)'");
	КонецЕсли;
	
	ОписаниеВарианта.КраткаяИнформацияПоОбмену = КраткаяИнформацияПоОбмену;
	
	ОписаниеВарианта.ЗаголовокКомандыДляСозданияНовогоОбменаДанными = ЗаголовокКоманды;
	ОписаниеВарианта.ЗаголовокПомощникаСозданияОбмена               = ЗаголовокПомощника;
	ОписаниеВарианта.ЗаголовокУзлаПланаОбмена                       = ЗаголовокУзла;
	
	ОписаниеВарианта.ИмяФормыПомощникаНастройкиСинхронизацииДанных =
		"ПланОбмена.ОбменРозницаРозница.Форма.ПомощникНастройкиСинхронизацииДанных";
	
	ИспользуемыеТранспортыСообщенийОбмена = Новый Массив;
	ИспользуемыеТранспортыСообщенийОбмена.Добавить(Перечисления.ВидыТранспортаСообщенийОбмена.WS);

	ОписаниеВарианта.ИспользуемыеТранспортыСообщенийОбмена = ИспользуемыеТранспортыСообщенийОбмена;
	
	ОписаниеВарианта.НаименованиеКонфигурацииКорреспондента = ЗаголовокКоманды;
	
	ОписаниеВарианта.ОбщиеДанныеУзлов  = ОбщиеДанныеУзлов();
	
	ОписаниеВарианта.ПодробнаяИнформацияПоОбмену = "ПланОбмена.ОбменРозницаРозница.Форма.ПодробнаяИнформация";
	
КонецПроцедуры

// Обработчик события при подключении к корреспонденту.
// Событие возникает при успешном подключении к корреспонденту и получении версии конфигурации корреспондента
// при настройке обмена с использованием помощника через прямое подключение
// или при подключении к корреспонденту через Интернет.
// В обработчике можно проанализировать версию корреспондента и,
// если настройка обмена не поддерживается с корреспондентом указанной версии, то вызвать исключение.
//
// Параметры:
//  ВерсияКорреспондента - Строка - версия конфигурации корреспондента, например, "2.3.2.1".
//
Процедура ПриПодключенииККорреспонденту(ВерсияКорреспондента) Экспорт
	ВерсияИБ = Метаданные.Версия;
	Если НЕ ВерсияКорреспондента = ВерсияИБ Тогда
		ТекстСообщения = НСтр("ru = 'Синхронизация данных поддерживается только между конфигурациями с одинаковыми версиями.
			|Версия текущей конфигурации: %1, версия корреспондента: %2.'");
		ВызватьИсключение (СтрШаблон(ТекстСообщения, ВерсияИБ, ВерсияКорреспондента));
	КонецЕсли;
КонецПроцедуры

// Заполняет узел обмена настройками отправки и получения данных (ограничения передачи данных и значения по умолчанию).
//
// Параметры:
//  Корреспондент - ПланОбменаОбъект - узел плана обмена, соответствующий корреспонденту.
//  ДанныеЗаполнения - Структура - структура с данными для заполнения настроек отправки и получения данных.
//
Процедура ПриСохраненииНастроекСинхронизацииДанных(Корреспондент, ДанныеЗаполнения) Экспорт
	
	ЗаполнитьЗначенияСвойств(Корреспондент, ДанныеЗаполнения, 
		"ВыгружатьИнформативныеОстаткиПоСкладам,
		|ДатаНачалаВыгрузкиДокументов,
		|РабочееМесто,
		|ПодчиненныйУзел,
		|РежимВыгрузкиИнформативныхОстатков");
	
	Корреспондент.Магазины.Загрузить(ДанныеЗаполнения.Магазины);
	Корреспондент.МагазиныИнформативныхОстатков.Загрузить(ДанныеЗаполнения.МагазиныИнформативныхОстатков);
	
КонецПроцедуры

// См. ЗапретРедактированияРеквизитовОбъектовПереопределяемый.ПриОпределенииОбъектовСЗаблокированнымиРеквизитами.
//
Функция ПолучитьБлокируемыеРеквизитыОбъекта() Экспорт

	Результат = Новый Массив;
	Результат.Добавить("Магазины; Магазин");
	Результат.Добавить("ПодчиненныйУзел; Тип");
	
	Возврат Результат;

КонецФункции

#КонецОбласти


#Область СлужебныеПроцедурыИФункции

// Возвращает имена реквизитов и табличных частей плана обмена, перечисленных через запятую,
// которые являются общими для пары обменивающихся конфигураций.
//
// Возвращаемое значение:
//	Строка - Имена реквизитов, разделенные запятыми.
//
Функция ОбщиеДанныеУзлов()
	
	Возврат "ДатаНачалаВыгрузкиДокументов, Магазины";
	
КонецФункции

Процедура ЗарегистрироватьДанныеДляНачальнойВыгрузки(Параметры, АдресРезультата) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);

	Если Параметры.СформироватьДокументВводаОстатков Тогда
		// При формировании документа Ввода остатков регистрируем данные без признака первоначальной выгрузки,
		// чтобы при синхронизации было выгружено "удаление" для объектов, не прошедших фильтр.
		Документы.ВводНачальныхОстатковУзла.СформироватьДокументВводаОстатковДляУзла(Параметры);
		ПланыОбмена.ЗарегистрироватьИзменения(Параметры.УзелОбмена);
	Иначе
		ОбменДаннымиСервер.ЗарегистрироватьДанныеДляНачальнойВыгрузки(Параметры.УзелОбмена);
	КонецЕсли;
	
	Результат = Новый Структура;
	Результат.Вставить("ДанныеЗарегистрированы", Истина);
	
	ПоместитьВоВременноеХранилище(Результат, АдресРезультата);
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

Функция ЗаголовокКомандыИнформативныхОстатков(РежимВыгрузкиИнформативныхОстатков, ВыбранныеМагазины) Экспорт
	
	НовыйЗаголовокКоманды = "";
	Если РежимВыгрузкиИнформативныхОстатков = Перечисления.РежимыВыгрузкиИнформативныхОстатков.ВыгружатьПоВсемМагазинам Тогда
		
		НовыйЗаголовокКоманды = НСтр("ru = 'Выгружать информативные остатки по всем магазинам.'");
		
	ИначеЕсли РежимВыгрузкиИнформативныхОстатков = Перечисления.РежимыВыгрузкиИнформативныхОстатков.ИндивидуальнаяНастройка Тогда
		
		Если ВыбранныеМагазины.Количество() = 1 Тогда
			
			ТекстЗаголовка = НСтр("ru = 'Выгружать информативные остатки по магазину: %1.'");
			НовыйЗаголовокКоманды = СтрШаблон(ТекстЗаголовка,
				ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВыбранныеМагазины[0], "Наименование"));

		Иначе
			НовыйЗаголовокКоманды = НСтр("ru = 'Выгружать информативные остатки по выбранным магазинам.'");
		КонецЕсли;
		
	Иначе
		НовыйЗаголовокКоманды = НСтр("ru = 'Информативные остатки по магазинам не выгружаются.'");
	КонецЕсли;
	
	Возврат НовыйЗаголовокКоманды;
	
КонецФункции

#КонецОбласти

#КонецЕсли