#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

#Область ПроцедурыИФункцииБсп

#Область НастройкиПоУмолчанию

// Возвращает строковое представление варианта синхронизации документов,
// в зависимости от установленного режима выгрузки документов; 
//
// Возвращаемое значение:
//  Строка, неограниченной длины - строковое представление варианта выгрузки документов.
//
Функция ОпределитьВариантСинхронизацииДокументов(РежимВыгрузкиДокументов) Экспорт
	
	ВариантСинхронизацииДокументов = "";
	
	Если РежимВыгрузкиДокументов = Перечисления.РежимыВыгрузкиОбъектовОбмена.ВыгружатьПоУсловию Тогда
		ВариантСинхронизацииДокументов = "АвтоматическаяСинхронизация"
	ИначеЕсли РежимВыгрузкиДокументов = Перечисления.РежимыВыгрузкиОбъектовОбмена.ВыгружатьВручную Тогда
		ВариантСинхронизацииДокументов = "ИнтерактивнаяСинхронизация"
	ИначеЕсли РежимВыгрузкиДокументов = Перечисления.РежимыВыгрузкиОбъектовОбмена.НеВыгружать Тогда
		ВариантСинхронизацииДокументов = "НеСинхронизировать"
	КонецЕсли;
	
	Возврат ВариантСинхронизацииДокументов;
	
КонецФункции

// Возвращает строковое представление варианта синхронизации справочников,
// в зависимости от установленного режима выгрузки справочников; 
//
// Возвращаемое значение:
//  Строка, неограниченной длины - строковое представление варианта выгрузки справочников.
//
Функция ОпределитьВариантСинхронизацииСправочников(РежимВыгрузкиСправочников) Экспорт
	
	ВариантСинхронизацииСправочников = "";
	
	Если РежимВыгрузкиСправочников = Перечисления.РежимыВыгрузкиОбъектовОбмена.ВыгружатьПоУсловию Тогда
		ВариантСинхронизацииСправочников = "АвтоматическаяСинхронизация";
	ИначеЕсли РежимВыгрузкиСправочников = Перечисления.РежимыВыгрузкиОбъектовОбмена.ВыгружатьПриНеобходимости Тогда
		ВариантСинхронизацииСправочников = "СинхронизироватьПоНеобходимости";
	ИначеЕсли РежимВыгрузкиСправочников = Перечисления.РежимыВыгрузкиОбъектовОбмена.НеВыгружать Тогда
		ВариантСинхронизацииСправочников = "НеСинхронизировать";
	КонецЕсли;
	
	Возврат ВариантСинхронизацииСправочников;
	
КонецФункции

#КонецОбласти

#Область ПереопределяемаяНастройкаДополненияВыгрузки

// Предназначена для настройки вариантов интерактивной настройки выгрузки по сценарию узла.
// Для настройки необходимо установить значения свойств параметров в необходимые значения.
//
// Параметры:
//     Получатель - ПланОбменаСсылка - Узел, для которого производится настройка.
//     Параметры  - Структура        - Параметры для изменения. Содержит поля:
//
//         ВариантБезДополнения - Структура     - настройки типового варианта "Не добавлять".
//                                                Содержит поля:
//             Использование - Булево - флаг разрешения использования варианта. По умолчанию Истина.
//             Порядок       - Число  - порядок размещения варианта на форме помощника, сверху вниз. По умолчанию 1.
//             Заголовок     - Строка - позволяет переопределить название типового варианта.
//             Пояснение     - Строка - позволяет переопределить текст пояснения варианта для пользователя.
//
//         ВариантВсеДокументы - Структура      - настройки типового варианта "Добавить все документы за период".
//                                                Содержит поля:
//             Использование - Булево - флаг разрешения использования варианта. По умолчанию Истина.
//             Порядок       - Число  - порядок размещения варианта на форме помощника, сверху вниз. По умолчанию 2.
//             Заголовок     - Строка - позволяет переопределить название типового варианта.
//             Пояснение     - Строка - позволяет переопределить текст пояснения варианта для пользователя.
//
//         ВариантПроизвольныйОтбор - Структура - настройки типового варианта "Добавить данные с произвольным отбором".
//                                                Содержит поля:
//             Использование - Булево - флаг разрешения использования варианта. По умолчанию Истина.
//             Порядок       - Число  - порядок размещения варианта на форме помощника, сверху вниз. По умолчанию 3.
//             Заголовок     - Строка - позволяет переопределить название типового варианта.
//             Пояснение     - Строка - позволяет переопределить текст пояснения варианта для пользователя.
//
//         ВариантДополнительно - Структура     - настройки дополнительного варианта по сценарию узла.
//                                                Содержит поля:
//             Использование            - Булево            - флаг разрешения использования варианта. По умолчанию Ложь.
//             Порядок                  - Число             - порядок размещения варианта на форме помощника, сверху
//                                                            вниз. По умолчанию 4.
//             Заголовок                - Строка            - название варианта для отображения на форме.
//             ИмяФормыОтбора           - Строка            - Имя формы, вызываемой для редактирования настроек.
//             ЗаголовокКомандыФормы    - Строка            - Заголовок для отрисовки на форме команды открытия формы
//                                                            настроек.
//             ИспользоватьПериодОтбора - Булево            - флаг того, что необходим общий отбор по периоду. По
//                                                            умолчанию Ложь.
//             ПериодОтбора             - СтандартныйПериод - значение периода общего отбора, предлагаемого по
//                                                            умолчанию.
//
//             Отбор                    - ТаблицаЗначений   - содержит строки с описанием подробных отборов по сценарию
//                                                            узла.
//                                                            Содержит колонки:
//                 ПолноеИмяМетаданных - Строка                - полное имя метаданных регистрируемого объекта, отбор
//                                                               которого описывает строка.
//                                                               Например "Документ._ДемоПоступлениеТоваров". Можно
//                                                               использовать специальные  значения "ВсеДокументы" и
//                                                               "ВсеСправочники" для отбора соответственно всех
//                                                               документов и всех справочников, регистрирующихся на
//                                                               узле Получатель.
//                 ВыборПериода        - Булево                - флаг того, что данная строка описывает отбор с общим
//                                                               периодом.
//                 Период              - СтандартныйПериод     - значение периода общего отбора для метаданных строки,
//                                                               предлагаемого по умолчанию.
//                 Отбор               - ОтборКомпоновкиДанных - отбор по умолчанию. Поля отбора формируются в
//                                                               соответствии с общим правилами формирования полей
//                                                               компоновки. Например, для указания отбора по реквизиту
//                                                               документа "Организация", необходимо использовать поле
//                                                               "Ссылка.Организация".
Процедура НастроитьИнтерактивнуюВыгрузку(Получатель, Параметры) Экспорт
	
	Если Получатель.РежимВыгрузкиДокументов = Перечисления.РежимыВыгрузкиОбъектовОбмена.НеВыгружать 
		И Получатель.РежимВыгрузкиСправочников = Перечисления.РежимыВыгрузкиОбъектовОбмена.НеВыгружать Тогда
		
		Параметры.ВариантВсеДокументы.Использование      = Ложь;
		Параметры.ВариантБезДополнения.Использование     = Ложь;
		Параметры.ВариантПроизвольныйОтбор.Использование = Ложь;
		Параметры.ВариантДополнительно.Использование     = Ложь;
		
	Иначе
		
		// Отключаем вариант "ВариантВсеДокументы".
		
		Параметры.ВариантВсеДокументы.Использование      = Ложь;
		
		// Настраиваем вариант "Без дополнения".
		Параметры.ВариантБезДополнения.Использование = Истина;
		Параметры.ВариантБезДополнения.Порядок       = 3;
		Параметры.ВариантБезДополнения.Заголовок     = НСтр("ru = 'Не добавлять документы к отправке'") 
			+ Символы.ПС 
			+ "Отправлять только нормативно-справочную информацию, измененную с момента последней отправки.";
		
		// Настраиваем вариант "Произвольный отбор".
		Параметры.ВариантПроизвольныйОтбор.Использование = Истина;
		Параметры.ВариантПроизвольныйОтбор.Порядок       = 2;
		
		Если Получатель.ПравилаОтправкиДокументов = "НеСинхронизировать" Тогда
			Параметры.ВариантПроизвольныйОтбор.Заголовок = НСтр("ru = 'Добавить справочники'");
		Иначе
			Параметры.ВариантПроизвольныйОтбор.Заголовок = НСтр("ru = 'Добавить произвольные справочники и документы'");
		КонецЕсли;
		
		Если Не Получатель.ПравилаОтправкиДокументов = "НеСинхронизировать" Тогда
			// Вычисляем и устанавливаем параметры сценария.
			ПараметрыПоУмолчанию = ПараметрыВыгрузкиПоУмолчанию(Получатель);
			
			// Настраиваем вариант "Дополнительно" по сценарию узла.
			Параметры.ВариантДополнительно.Использование            = Истина;
			Параметры.ВариантДополнительно.Порядок                  = 1;
			Параметры.ВариантДополнительно.Заголовок                = НСтр("ru='Отправить все документы'");
			Параметры.ВариантДополнительно.ИмяФормыОтбора           = "ПланОбмена.СинхронизацияДанныхЧерезУниверсальныйФормат.Форма.НастройкаВыгрузки";
			Параметры.ВариантДополнительно.ЗаголовокКомандыФормы    = НСтр("ru='Выбрать организации для отбора'");
			Параметры.ВариантДополнительно.ИспользоватьПериодОтбора = Истина;
			Параметры.ВариантДополнительно.ПериодОтбора             = ПараметрыПоУмолчанию.Период;
			
			// Добавляем строка настройки отбора.
			СтрокаОтбора = Параметры.ВариантДополнительно.Отбор.Добавить();
			СтрокаОтбора.ПолноеИмяМетаданных = "ВсеДокументы";
			СтрокаОтбора.ВыборПериода = Истина;
			СтрокаОтбора.Период       = ПараметрыПоУмолчанию.Период;
			СтрокаОтбора.Отбор        = ПараметрыПоУмолчанию.Отбор;
		Иначе
			Параметры.ВариантДополнительно.Использование            = Ложь;
		КонецЕсли;
		
	КонецЕсли;
		
КонецПроцедуры

// Возвращает представление отбора для варианта дополнения выгрузки по сценарию узла.
// См. описание "ВариантДополнительно" в процедуре "НастроитьИнтерактивнуюВыгрузку".
//
// Параметры:
//     Получатель - ПланОбменаСсылка - Узел, для которого определяется представление отбора.
//     Параметры  - Структура        - Характеристики отбора. Содержит поля:
//         ИспользоватьПериодОтбора - Булево            - флаг того, что необходимо использовать общий отбор по периоду.
//         ПериодОтбора             - СтандартныйПериод - значение периода общего отбора.
//         Отбор                    - ТаблицаЗначений   - содержит строки с описанием подробных отборов по сценарию
//                                                        узла.
//                                                        Содержит колонки:
//                 ПолноеИмяМетаданных - Строка                - полное имя метаданных регистрируемого объекта, отбор
//                                                               которого описывает строка.
//                                                               Например "Документ._ДемоПоступлениеТоваров". Могут
//                                                               быть использованы специальные  значения "ВсеДокументы"
//                                                               и "ВсеСправочники" для отбора соответственно всех
//                                                               документов и всех справочников, регистрирующихся на
//                                                               узле Получатель.
//                 ВыборПериода        - Булево                - флаг того, что данная строка описывает отбор с общим
//                                                               периодом.
//                 Период              - СтандартныйПериод     - значение периода общего отбора для метаданных строки.
//                 Отбор               - ОтборКомпоновкиДанных - поля отбора. Поля отбора формируются в соответствии с
//                                                               общим правилами формирования полей компоновки.
//                                                               Например, для указания отбора по реквизиту документа
//                                                               "Организация", будет использовано поле
//                                                               "Ссылка.Организация".
//
// Возвращаемое значение: 
//     Строка - описание отбора.
//
Функция ПредставлениеОтбораИнтерактивнойВыгрузки(Получатель, Параметры) Экспорт
	
	Если Параметры.ИспользоватьПериодОтбора Тогда
		Если ЗначениеЗаполнено(Параметры.ПериодОтбора) Тогда
			ОписаниеПериода = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='за период: %1'"), НРег(Параметры.ПериодОтбора));
		Иначе
			ДатаНачалаВыгрузки = Получатель.ДатаНачалаВыгрузкиДокументов;
			Если ЗначениеЗаполнено(ДатаНачалаВыгрузки) Тогда
				ОписаниеПериода = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru='начиная с даты начала отправки документов: %1'"), Формат(ДатаНачалаВыгрузки, "ДЛФ=DD"));
			Иначе
				ОписаниеПериода = НСтр("ru='за весь период учета'");
			КонецЕсли;
		КонецЕсли;
	Иначе
		ОписаниеПериода = "";
	КонецЕсли;
	
	СписокОрганизаций = ОрганизацииОтбораИнтерактивнойВыгрузки(Параметры.Отбор);
	
	Если СписокОрганизаций.Количество()=0 Тогда
		ОписаниеОтбораОрганизации = НСтр("ru='по всем организациям'");
	Иначе
		ОписаниеОтбораОрганизации = "";
		Для Каждого Элемент Из СписокОрганизаций Цикл
			ОписаниеОтбораОрганизации = ОписаниеОтбораОрганизации+ ", " + Элемент.Представление;
		КонецЦикла;
		ОписаниеОтбораОрганизации = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='с отбором по организациям: %1'"), СокрЛП(Сред(ОписаниеОтбораОрганизации, 2)));
	КонецЕсли;

	Возврат СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru='Будут отправлены все документы %1,
		         |%2'"),
		ОписаниеПериода,  ОписаниеОтбораОрганизации);
	
КонецФункции

// Расчет параметров выгрузки по умолчанию.
//
// Параметры:
//     Получатель - ПланОбменаСсылка - Узел, для которого производится настройка.
//
// Возвращаемое значение - Структура - содержит поля:
//     ПредставлениеОтбора - Строка - текстовое описание отбора по умолчанию.
//     Период              - СтандартныйПериод     - значение периода общего отбора по умолчанию.
//     Отбор               - ОтборКомпоновкиДанных - отбор.
//
Функция ПараметрыВыгрузкиПоУмолчанию(Получатель)
	
	Результат = Новый Структура;
	
	// Период по умолчанию
	Результат.Вставить("Период", Новый СтандартныйПериод);
	Результат.Период.Вариант = ВариантСтандартногоПериода.ПрошлыйМесяц;
	
	// Отбор по умолчанию и его представление.
	КомпоновщикОтбора = Новый КомпоновщикНастроекКомпоновкиДанных;
	Результат.Вставить("Отбор", КомпоновщикОтбора.Настройки.Отбор);
	
	// Общее представление, период не включаем, так как в этом сценарии поле периода будет редактироваться отдельно.
	Результат.Вставить( "ПредставлениеОтбора", 
	                    СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
	                    НСтр("ru='Будут отправлены все документы за %1'"),
	                    НРег(Строка(Результат.Период.Вариант))));
	
	Возврат Результат;
КонецФункции

// Возвращает список организаций по таблице отбора (см "ПредставлениеОтбораИнтерактивнойВыгрузки").
// Также используется из демонстрационной формы "НастройкаВыгрузки" этого плана обмена.
//
// Параметры:
//     ТаблицаОтбора - ТаблицаЗначений   - содержит строки с описанием подробных отборов по сценарию узла. Содержит.
//                                         колонки:
//         ПолноеИмяМетаданных - Строка
//         ВыборПериода        - Булево
//         Период              - СтандартныйПериод
//         Отбор               - ОтборКомпоновкиДанных
//
// Возвращаемое значение:
//     СписокЗначений - значение - ссылка на организацию, представление - наименование.
//
Функция ОрганизацииОтбораИнтерактивнойВыгрузки(Знач ТаблицаОтбора) Экспорт
	
	Результат = Новый СписокЗначений;
	
	Если ТаблицаОтбора.Количество()=0 Или ТаблицаОтбора[0].Отбор.Элементы.Количество()=0 Тогда
		// Нет данных отбора
		Возврат Результат;
	КонецЕсли;
		
	// Мы знаем состав отбора, так как помещали туда сами - или из "НастроитьИнтерактивнуюВыгрузку"
	// или как результат редактирования в форме.
	
	СтрокаДанных = ТаблицаОтбора[0].Отбор.Элементы[0];
	Отобранные   = СтрокаДанных.ПравоеЗначение;
	ТипКоллекции = ТипЗнч(Отобранные);
	
	Если ТипКоллекции=Тип("СписокЗначений") Тогда
		Для Каждого Элемент Из Отобранные Цикл
			ДобавитьСписокОрганизаций(Результат, Элемент.Значение);
		КонецЦикла;
		
	ИначеЕсли ТипКоллекции=Тип("Массив") Тогда
		ДобавитьСписокОрганизаций(Результат, Отобранные);
		 
	ИначеЕсли ТипКоллекции=Тип("СправочникСсылка.Организации") Тогда
		Если Результат.НайтиПоЗначению(Отобранные)=Неопределено Тогда
			Результат.Добавить(Отобранные, Отобранные.Наименование);
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Добавляет в список организаций коллекцию.
//
// Параметры:
//     Список      - СписокЗначений - дополняемый список.
//     Организации - коллекция организаций.
// 
Процедура ДобавитьСписокОрганизаций(Список, Знач Организации)
	
	Для Каждого Организация Из Организации Цикл
		
		Если ТипЗнч(Организация)=Тип("Массив") Тогда
			ДобавитьСписокОрганизаций(Список, Организация);
			Продолжить;
		КонецЕсли;
		
		Если Список.НайтиПоЗначению(Организация)=Неопределено Тогда
			Список.Добавить(Организация, Организация.Наименование);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ПриПолученииНастроек

// Позволяет переопределить настройки плана обмена, заданные по умолчанию.
// Значения настроек по умолчанию см. в ОбменДаннымиСервер.НастройкиПланаОбменаПоУмолчанию.
// 
// Параметры:
//      Настройки - Структура - Содержит настройки по умолчанию.
//      ИдентификаторНастройки          - Строка - имя дополнительной настройки обмена.
//
Процедура ПриПолученииНастроек(Настройки) Экспорт
	
	Настройки.ИмяКонфигурацииИсточника = "Розница";
	
	Настройки.ПредупреждатьОНесоответствииВерсийПравилОбмена = Ложь;
	Настройки.ПланОбменаИспользуетсяВМоделиСервиса = Истина;
	Настройки.ЭтоПланОбменаXDTO = Истина;
	Настройки.Глобальный = Истина;
	Настройки.ФорматОбмена = "http://v8.1c.ru/edi/edi_stnd/EnterpriseData";
	
	ВерсииФормата = Новый Соответствие;
	ДоступныеВерсииФорматаОбмена(ВерсииФормата);
	
	Настройки.ВерсииФорматаОбмена = ВерсииФормата;
	
	Настройки.Алгоритмы.ПриПолученииВариантовНастроекОбмена = Истина;
	Настройки.Алгоритмы.ПриПолученииОписанияВариантаНастройки = Истина;
	Настройки.Алгоритмы.НастроитьИнтерактивнуюВыгрузку = Истина;
	Настройки.Алгоритмы.ПредставлениеОтбораИнтерактивнойВыгрузки = Истина;
	
КонецПроцедуры

// Заполняет коллекцию вариантов настроек, предусмотренных для плана обмена.
// 
// Параметры:
//  ВариантыНастроекОбмена - ТаблицаЗначений - коллекция вариантов настроек обмена, см. описание возвращаемого значения
//                                       функции НастройкиПланаОбменаПоУмолчанию общего модуля ОбменДаннымиСервер.
//  ПараметрыКонтекста     - Структура - см. ОбменДаннымиСервер.ПараметрыКонтекстаПолученияВариантовНастроек,
//                                       описание возвращаемого значения функции.
//
Процедура ПриПолученииВариантовНастроекОбмена(ВариантыНастроекОбмена, ПараметрыКонтекста) Экспорт
	
	ВариантНастройки = ВариантыНастроекОбмена.Добавить();
	ВариантНастройки.ИдентификаторНастройки        = "ОбменУниверсальный";
	ВариантНастройки.КорреспондентВМоделиСервиса   = Истина;
	ВариантНастройки.КорреспондентВЛокальномРежиме = Истина;
	
КонецПроцедуры

// Заполняет набор параметров, определяющих вариант настройки обмена.
// 
// Параметры:
//  ОписаниеВарианта       - Структура - набор варианта настройки по умолчанию,
//                                       см. ОбменДаннымиСервер.ОписаниеВариантаНастройкиОбменаПоУмолчанию,
//                                       описание возвращаемого значения.
//  ИдентификаторНастройки - Строка    - идентификатор варианта настройки обмена.
//  ПараметрыКонтекста     - Структура - см. ОбменДаннымиСервер.ПараметрыКонтекстаПолученияОписанияВариантаНастройки,
//                                       описание возвращаемого значения функции.
//
Процедура ПриПолученииОписанияВариантаНастройки(ОписаниеВарианта, ИдентификаторНастройки, ПараметрыКонтекста) Экспорт
	
	Если ИдентификаторНастройки = "ОбменКасса" Тогда
		ОписаниеВарианта.ИмяКонфигурацииКорреспондента = "Касса";
		ОписаниеВарианта.ЗаголовокКомандыДляСозданияНовогоОбменаДанными = НСтр("ru = '1С:Касса'");
		ОписаниеВарианта.ЗаголовокПомощникаСозданияОбмена =               НСтр("ru = 'Настройка синхронизации с программой ""1С:Касса""'");
		ОписаниеВарианта.ЗаголовокУзлаПланаОбмена =                       НСтр("ru = 'Синхронизация с программой ""1С:Касса""'");
		ОписаниеВарианта.НаименованиеКонфигурацииКорреспондента =         НСтр("ru = '1С:Касса'");
	ИначеЕсли ИдентификаторНастройки = "ОбменМК" Тогда
		ОписаниеВарианта.ИмяКонфигурацииКорреспондента = "МобильнаяКасса";
		ОписаниеВарианта.ЗаголовокКомандыДляСозданияНовогоОбменаДанными = НСтр("ru = '1С:Мобильная касса'");
		ОписаниеВарианта.ЗаголовокПомощникаСозданияОбмена =               НСтр("ru = 'Настройка синхронизации с программой ""1С:Мобильная касса""'");
		ОписаниеВарианта.ЗаголовокУзлаПланаОбмена =                       НСтр("ru = 'Синхронизация с программой ""1С:Мобильная касса""'");
		ОписаниеВарианта.НаименованиеКонфигурацииКорреспондента =         НСтр("ru = '1С:Мобильная касса'");
	ИначеЕсли ИдентификаторНастройки = "ОбменБП30" Тогда
		ОписаниеВарианта.ИмяКонфигурацииКорреспондента = "БухгалтерияПредприятия";
		ОписаниеВарианта.ЗаголовокКомандыДляСозданияНовогоОбменаДанными = НСтр("ru = 'Бухгалтерия предприятия, ред. 3.0 (EnterpriseData)'");
		ОписаниеВарианта.ЗаголовокПомощникаСозданияОбмена =               НСтр("ru = 'Настройка синхронизации с программой ""Бухгалтерия предприятия, редакция. 3.0""'");
		ОписаниеВарианта.ЗаголовокУзлаПланаОбмена =                       НСтр("ru = 'Синхронизация с программой ""Бухгалтерия предприятия, редакция 3.0""'");
		ОписаниеВарианта.НаименованиеКонфигурацииКорреспондента =         НСтр("ru = 'Бухгалтерия предприятия, редакция 3.0'");
	Иначе
		ОписаниеВарианта.ЗаголовокКомандыДляСозданияНовогоОбменаДанными = 	НСтр("ru = 'Другая программа'");
		ОписаниеВарианта.ЗаголовокПомощникаСозданияОбмена = 				НСтр("ru = 'Настройка синхронизации данных через универсальный формат'");
		ОписаниеВарианта.ЗаголовокУзлаПланаОбмена = 						НСтр("ru = 'Синхронизация данных через универсальный формат'");
		ОписаниеВарианта.НаименованиеКонфигурацииКорреспондента = 			НСтр("ru = 'Другая программа'");
		ОписаниеВарианта.ИмяКонфигурацииКорреспондента = 					НСтр("ru = 'ДругаяПрограмма'");
	КонецЕсли;

	ОписаниеВарианта.ИспользоватьПомощникСозданияОбменаДанными = Истина;
	
	ОписаниеВарианта.ИспользуемыеТранспортыСообщенийОбмена = ИспользуемыеТранспортыСообщенийОбмена(ИдентификаторНастройки);
	
	Если ИдентификаторНастройки = "ОбменБП30" Тогда
		КраткаяИнформацияПоОбмену = НСтр("ru = 'Данная настройка позволит синхронизировать данные между программами ""%1""
		|и ""Бухгалтерия предприятия, ред. 3.0"".  В синхронизации участвуют документы и нормативно-справочная информация.'");

	ИначеЕсли ИдентификаторНастройки = "ОбменКасса" Тогда
		КраткаяИнформацияПоОбмену = НСтр("ru = 'Данная настройка позволит синхронизировать данные между программами ""%1""
		|и ""1С:Касса"". В синхронизации участвуют документы и нормативно-справочная информация.'");
		
	ИначеЕсли ИдентификаторНастройки = "ОбменМК" Тогда
		КраткаяИнформацияПоОбмену = НСтр("ru = 'Данная настройка позволит синхронизировать данные между программами ""%1""
		|и ""1С:Мобильная касса"". В синхронизации участвуют документы и нормативно-справочная информация.'");
		
	
	Иначе
		КраткаяИнформацияПоОбмену = НСтр("ru = 'Позволяет синхронизировать данные между любыми программами, поддерживающими универсальный формат обмена ""Enterprise Data"".'");
	КонецЕсли;
	
	КраткаяИнформацияПоОбмену = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
                     КраткаяИнформацияПоОбмену, Метаданные.Синоним);
					 
	ОписаниеВарианта.КраткаяИнформацияПоОбмену 		= КраткаяИнформацияПоОбмену;
	ОписаниеВарианта.ИмяФайлаНастроекДляПриемника 	= НСтр("ru = 'Синхронизация данных через универсальный формат'");
	ОписаниеВарианта.ПодробнаяИнформацияПоОбмену 	= "ПланОбмена.СинхронизацияДанныхЧерезУниверсальныйФормат.Форма.ПодробнаяИнформация";
	
	ОписаниеВарианта.ОбщиеДанныеУзлов = ОбщиеДанныеУзлов();
КонецПроцедуры

// Возвращает режим запуска, в случае интерактивного инициирования синхронизации.
// Возвращаемые значения АвтоматическаяСинхронизация Или ИнтерактивнаяСинхронизация.
// На основании этих значений запускается либо помощник интерактивного обмена, либо автообмен.
Функция РежимЗапускаСинхронизацииДанных(УзелИнформационнойБазы) Экспорт

	Если УзелИнформационнойБазы.ПравилаОтправкиДокументов = "АвтоматическаяСинхронизация"
		Или (УзелИнформационнойБазы.ПравилаОтправкиДокументов = "НеСинхронизировать" 
		И УзелИнформационнойБазы.ПравилаОтправкиСправочников = "АвтоматическаяСинхронизация") Тогда
		
		Возврат "АвтоматическаяСинхронизация";
		
	Иначе
		
		Возврат "ИнтерактивнаяСинхронизация";
		
	КонецЕсли;
	
КонецФункции

// Возвращает сценарий работы помощника интерактивного сопоставления
// НеОтправлять, ИнтерактивнаяСинхронизацияДокументов, ИнтерактивнаяСинхронизацияСправочников либо пустую строку.
Функция ИнициализироватьСценарийРаботыПомощникаИнтерактивногоОбмена(УзелИнформационнойБазы) Экспорт
	
	Если УзелИнформационнойБазы.ПравилаОтправкиДокументов = "ИнтерактивнаяСинхронизация" Тогда
		
		Возврат "ИнтерактивнаяСинхронизацияДокументов";
		
	ИначеЕсли УзелИнформационнойБазы.ПравилаОтправкиДокументов = "НеСинхронизировать"
		И УзелИнформационнойБазы.ПравилаОтправкиСправочников = "НеСинхронизировать" Тогда
		
		Возврат "НеОтправлять";
		
	ИначеЕсли (УзелИнформационнойБазы.ПравилаОтправкиДокументов = "НеСинхронизировать"
		И УзелИнформационнойБазы.ПравилаОтправкиСправочников = "СинхронизироватьПоНеобходимости")
		ИЛИ УзелИнформационнойБазы.ПравилаОтправкиСправочников = "АвтоматическаяСинхронизация" Тогда
		
		Возврат "ИнтерактивнаяСинхронизацияСправочников";
		
	КонецЕсли;
	
КонецФункции

// Возвращает имена реквизитов и табличных частей плана обмена, перечисленных через запятую,
// которые являются общими для пары обменивающихся конфигураций.
//
// Параметры:
//	ВерсияКорреспондента - Строка - Номер версии корреспондента. Используется, например, для разного
//									состава общих данных узлов в зависимости от версии корреспондента.
//	ИмяФормы - Строка - Имя используемой формы настройки значений по умолчанию.
//						Возможно, например, использование различных форм для разных версий корреспондента.
//
// Возвращаемое значение:
//	Строка - Список имен реквизитов.
//
Функция ОбщиеДанныеУзлов()
	
	Возврат "ИспользоватьОтборПоОрганизациям, РежимВыгрузкиПриНеобходимости";
	
КонецФункции

// Возвращает массив используемых транспортов сообщений для этого плана обмена
//
// 1. Например, если план обмена поддерживает только два транспорта сообщений FILE и FTP,
// то тело функции следует определить следующим образом:
//
//	Результат = Новый Массив;
//	Результат.Добавить(Перечисления.ВидыТранспортаСообщенийОбмена.FILE);
//	Результат.Добавить(Перечисления.ВидыТранспортаСообщенийОбмена.FTP);
//	Возврат Результат;
//
// 2. Например, если план обмена поддерживает все транспорты сообщений, определенных в конфигурации,
// то тело функции следует определить следующим образом:
//
//	Возврат ОбменДаннымиСервер.ВсеТранспортыСообщенийОбменаКонфигурации();
//
// Возвращаемое значение:
//  Массив - массив содержит значения перечисления ВидыТранспортаСообщенийОбмена.
//
Функция ИспользуемыеТранспортыСообщенийОбмена(ИдентификаторНастройки="")
	
	Результат = Новый Массив;
	
	Если НЕ ИдентификаторНастройки = "ОбменМК" Тогда
		Результат.Добавить(Перечисления.ВидыТранспортаСообщенийОбмена.WS);
	КонецЕсли;
	
	Результат.Добавить(Перечисления.ВидыТранспортаСообщенийОбмена.FILE);
	
	Если НЕ ИдентификаторНастройки = "ОбменКасса" И НЕ ИдентификаторНастройки = "ОбменМК" Тогда
		Если Не СтандартныеПодсистемыСервер.ЭтоБазоваяВерсияКонфигурации() Тогда
			Результат.Добавить(Перечисления.ВидыТранспортаСообщенийОбмена.FTP);
			Результат.Добавить(Перечисления.ВидыТранспортаСообщенийОбмена.EMAIL);
			Результат.Добавить(Перечисления.ВидыТранспортаСообщенийОбмена.COM);
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область ПрочиеПроцедурыИФункции

Функция ПолучитьПредставлениеКонфигурацииКорреспондента(КраткоеИмяКонфигурации) Экспорт
	КраткоеИмяКонфигурации = СокрЛП(КраткоеИмяКонфигурации);
	Если КраткоеИмяКонфигурации = "БухгалтерияПредприятия" Тогда
		Возврат НСтр("ru = 'Бухгалтерия предприятия, ред.3.0'");
	ИначеЕсли КраткоеИмяКонфигурации = "УправлениеПредприятием" Тогда
		Возврат НСтр("ru = '1С:ERP Управление предприятием, ред.2.0'");
	Иначе
		Возврат "";
	КонецЕсли;
КонецФункции

// Процедура ИзменитьВерсиюФорматаОбмена
//
// Описание:
//
//
// Параметры (название, тип, дифференцированное значение)
//
Процедура ИзменитьВерсиюФорматаОбмена(Параметры) Экспорт
	
	ФлагОшибки = Ложь;
	
	Запрос = Новый Запрос("ВЫБРАТЬ
		|	СинхронизацияДанныхЧерезУниверсальныйФормат.Ссылка КАК УзелПланаОбмена
		|ИЗ
		|	ПланОбмена.СинхронизацияДанныхЧерезУниверсальныйФормат КАК СинхронизацияДанныхЧерезУниверсальныйФормат
		|ГДЕ
		|	СинхронизацияДанныхЧерезУниверсальныйФормат.ПометкаУдаления = ЛОЖЬ
		|	И СинхронизацияДанныхЧерезУниверсальныйФормат.ЭтотУзел = ЛОЖЬ
		|");
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		НачатьТранзакцию();
		
		Попытка
			
			Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки = Блокировка.Добавить("ПланОбмена.СинхронизацияДанныхЧерезУниверсальныйФормат");
			ЭлементБлокировки.УстановитьЗначение("Ссылка", Выборка.УзелПланаОбмена);
			Блокировка.Заблокировать();
			
			УзелПланаОбменаОбъект = Выборка.УзелПланаОбмена.ПолучитьОбъект();
			Если Не ЗначениеЗаполнено(УзелПланаОбменаОбъект.ВерсияФорматаОбмена)
				Или УзелПланаОбменаОбъект.ВерсияФорматаОбмена = "1.0.beta"
				Или УзелПланаОбменаОбъект.ВерсияФорматаОбмена = "1.0" Тогда
				УзелПланаОбменаОбъект.ВерсияФорматаОбмена   = "1.2";	
			УзелПланаОбменаОбъект.ОбменДанными.Загрузка = Истина;
			УзелПланаОбменаОбъект.Записать();
			КонецЕсли; 
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			
			ТекстСообщения = НСтр("ru = 'Не удалось обработать: %УзелПланаОбмена% по причине: %Причина%'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%УзелПланаОбмена%", Выборка.УзелПланаОбмена);
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Причина%", ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
			ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Предупреждение,
				Метаданные.ПланыОбмена.СинхронизацияДанныхЧерезУниверсальныйФормат, Выборка.УзелПланаОбмена, ТекстСообщения);
				
			ФлагОшибки = Истина;
			
		КонецПопытки;
		
	КонецЦикла;
	
	Параметры.ОбработкаЗавершена = Не ФлагОшибки;
	
КонецПроцедуры

#КонецОбласти

#Область ОбменЧерезФормат

// Возвращает структуру доступных для данного плана обмена версий формата обмена.
//
// Параметры:
//  ВерсииФормата - Соответствие - Соответствие, в которое необходимо поместить доступные версии формата.
//
// Возвращаемое значение:
//  ВерсииФормата - Соответствие - пара ключ и значение, где в качестве ключа устанавливается доступная версия формата,
//                  а в качестве значения модуль с обработчиками данных соответствующей версии формата.
//
Процедура ДоступныеВерсииФорматаОбмена(ВерсииФормата)
	
	ВерсииФормата = Новый Соответствие;

	ВерсииФормата.Вставить("1.2", МенеджерОбменаЧерезУниверсальныйФормат_1_6);
	ВерсииФормата.Вставить("1.3", МенеджерОбменаЧерезУниверсальныйФормат_1_6);
	ВерсииФормата.Вставить("1.4", МенеджерОбменаЧерезУниверсальныйФормат_1_6);
	ВерсииФормата.Вставить("1.5", МенеджерОбменаЧерезУниверсальныйФормат_1_6);
	ВерсииФормата.Вставить("1.6", МенеджерОбменаЧерезУниверсальныйФормат_1_6);
	ВерсииФормата.Вставить("1.7", МенеджерОбменаЧерезУниверсальныйФормат);
	ВерсииФормата.Вставить("1.8", МенеджерОбменаЧерезУниверсальныйФормат);
	ВерсииФормата.Вставить("1.10", МенеджерОбменаЧерезУниверсальныйФормат);
	ВерсииФормата.Вставить("1.14", МенеджерОбменаЧерезУниверсальныйФормат);
	ВерсииФормата.Вставить("1.15", МенеджерОбменаЧерезУниверсальныйФормат);
	ВерсииФормата.Вставить("1.16", МенеджерОбменаЧерезУниверсальныйФормат);
	ВерсииФормата.Вставить("1.17", МенеджерОбменаЧерезУниверсальныйФормат);
	
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	СинхронизацияДанныхЧерезУниверсальныйФормат.ПутьКМенеджеруОбмена,
		|	СинхронизацияДанныхЧерезУниверсальныйФормат.ВерсияФорматаОбмена
		|ИЗ
		|	ПланОбмена.СинхронизацияДанныхЧерезУниверсальныйФормат КАК СинхронизацияДанныхЧерезУниверсальныйФормат
		|ГДЕ
		|	СинхронизацияДанныхЧерезУниверсальныйФормат.ПутьКМенеджеруОбмена <> """"");
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		ИмяОбработки = Выборка.ПутьКМенеджеруОбмена;
		
		ДанныеОбработки = Новый ДвоичныеДанные(ИмяОбработки);
		АдресОбработки  = ПоместитьВоВременноеХранилище(ДанныеОбработки);
		
		Если ОбщегоНазначения.ЕстьЗащитаОтОпасныхДействий() Тогда
			
			ИмяОбработки = ВнешниеОбработки.Подключить(АдресОбработки, , ,
				ОбщегоНазначения.ОписаниеЗащитыБезПредупреждений());
				
		Иначе
			ИмяОбработки = ВнешниеОбработки.Подключить(АдресОбработки);
		КонецЕсли;
		
		МенеджерОбмена = ВнешниеОбработки.Создать(ИмяОбработки);
		
		ВерсииФормата.Вставить(Выборка.ВерсияФорматаОбмена, МенеджерОбмена);
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ПереходНаУниверсальныйФормат

// Функция-обертка, выполняет подготовку параметров и вызывает основную функцию 
// (см. ВыполнитьПереходНаСинхронизациюДанныхЧерезУниверсальныйФормат).
// Вызывается при первом обмене по настройке синхронизации данных через универсальный формат
//  через COM-соединение.
//
// Параметры:
//  ПараметрыНастройкиСинхронизацииДанных - Структура - сведения о настройке синхронизации, с которой происходит переход: 
//  * Код - Строка, Код настройки.
//  * ВариантНастройки - Строка, вариант настройки синхронизации данных через универсальный формат базы-корреспондента.
//  * Ошибка - булево, признак ошибки при выполнении функции.
//  * СообщениеОбОшибке - строка, текст сообщения об ошибке.
//
// Возвращаемое значение:
//  Ссылка на настройку синхронизации данных через универсальный формат (при успешном выполнении перехода),
//  Неопределено (в случае критичных ошибок, возникших в процессе перехода).
Функция ПереходНаСинхронизациюЧерезУниверсальныйФорматВнешнееСоединение(ПараметрыНастройкиСинхронизацииДанных) Экспорт
	
	КодНастройки = ПараметрыНастройкиСинхронизацииДанных.Код;
	Если НЕ ЗначениеЗаполнено(КодНастройки) Тогда
		ПараметрыНастройкиСинхронизацииДанных.Ошибка = Истина;
		ТекстСообщения = НСтр("ru = 'Не указан префикс базы-корреспондента'");
		ПараметрыНастройкиСинхронизацииДанных.СообщениеОбОшибке = ТекстСообщения;
		Возврат Неопределено;
	КонецЕсли;
	ИмяПланаОбменаСтаройНастройки = ИмяПланаОбменаСтаройНастройки(КодНастройки);
	Если НЕ ЗначениеЗаполнено(ИмяПланаОбменаСтаройНастройки) Тогда
		ПараметрыНастройкиСинхронизацииДанных.Ошибка = Истина;
		НСтрока = НСтр("ru = 'Не обнаружен узел плана обмена с кодом: %1.'");
		ПараметрыНастройкиСинхронизацииДанных.СообщениеОбОшибке = 
								СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтрока, КодНастройки);
		Возврат Неопределено;
	КонецЕсли;
	
	Если Метаданные.ПланыОбмена.Найти(ИмяПланаОбменаСтаройНастройки) = Неопределено Тогда
		ПараметрыНастройкиСинхронизацииДанных.Ошибка = Истина;
		НСтрока = НСтр("ru = 'Не обнаружен план обмена: %1.'");
		ПараметрыНастройкиСинхронизацииДанных.СообщениеОбОшибке = 
								СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтрока, ИмяПланаОбменаСтаройНастройки);
		Возврат Неопределено;
	КонецЕсли;
	
	НастройкаСинхронизацииДанных = ПланыОбмена[ИмяПланаОбменаСтаройНастройки].НайтиПоКоду(КодНастройки);
	Если НЕ ЗначениеЗаполнено(НастройкаСинхронизацииДанных) Тогда
		ПараметрыНастройкиСинхронизацииДанных.Ошибка = Истина;
		НСтрока = НСтр("ru = 'Не найден узел корреспондента для плана обмена: %1, код: %2.'");
		ПараметрыНастройкиСинхронизацииДанных.СообщениеОбОшибке = 
					СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтрока, 
												ИмяПланаОбменаСтаройНастройки, 
												КодНастройки);
		
		Возврат Неопределено;
	КонецЕсли;
	Возврат ВыполнитьПереходНаСинхронизациюДанныхЧерезУниверсальныйФормат(НастройкаСинхронизацииДанных);
	
КонецФункции

// Функция-обертка, выполняет подготовку параметров и вызывает основную функцию 
// (см. ВыполнитьПереходНаСинхронизациюДанныхЧерезУниверсальныйФормат).
// Вызывается при транспорте Интернет: корреспондент выполнил переход на универсальный формат,
//  а текущая ИБ нет. 
//
// Параметры:
//  КодУзла - Строка, Код настройки.
//  Ошибка - булево, признак ошибки при выполнении функции.
//
// Возвращаемое значение:
//  Ссылка на настройку синхронизации данных через универсальный формат (при успешном выполнении перехода),
//  Неопределено (в случае критичных ошибок, возникших в процессе перехода).
Функция ПереходНаСинхронизациюЧерезУниверсальныйФорматИнтернет(КодУзла, Ошибка) Экспорт
	
	ИмяПланаОбменаСтаройНастройки = "";
	ИмяПланаОбменаДляПерехода = ИмяПланаОбменаСтаройНастройки(КодУзла);
	НастройкаСинхронизацииЧерезУниверсальныйФормат = Неопределено;
	Если ИмяПланаОбменаДляПерехода <> "" Тогда
		НастройкаСинхронизацииДанных = ПланыОбмена[ИмяПланаОбменаДляПерехода].НайтиПоКоду(КодУзла);
		Если НЕ НастройкаСинхронизацииДанных.Пустая() Тогда
			ПланОбменаМенеджер = ПланыОбмена.СинхронизацияДанныхЧерезУниверсальныйФормат;
			Попытка
				НастройкаСинхронизацииЧерезУниверсальныйФормат = 
					ПланОбменаМенеджер.ВыполнитьПереходНаСинхронизациюДанныхЧерезУниверсальныйФормат(НастройкаСинхронизацииДанных);
				УзелНеНайден = Ложь;
			Исключение
				Ошибка = Истина;
				ВызватьИсключение;
			КонецПопытки;
		КонецЕсли;
	КонецЕсли;
	Возврат НастройкаСинхронизацииЧерезУниверсальныйФормат;
	
КонецФункции

// Функция возвращает имя плана обмена старой настройки,
//  соответствующее варианту настройки в синхронизации данных через универсальный формат.
//
// Параметр: ВариантНастройки (строка)
// Возвращаемое значение - строка (имя плана обмена).
Функция ИмяПланаОбменаСтаройНастройки(КодУзлаПланаОбмена) Экспорт
	
	ИмяПланаОбменаДляПерехода = "ОбменРозницаБухгалтерияПредприятия30";
	Если Метаданные.ПланыОбмена.Найти(ИмяПланаОбменаДляПерехода) <> Неопределено Тогда
		Если ЗначениеЗаполнено(ПланыОбмена[ИмяПланаОбменаДляПерехода].НайтиПоКоду(КодУзлаПланаОбмена)) Тогда
			Возврат ИмяПланаОбменаДляПерехода;
		КонецЕсли;
	КонецЕсли;
	ИмяПланаОбменаДляПерехода = "ОбменУправлениеТорговлейРозница";
	Если Метаданные.ПланыОбмена.Найти(ИмяПланаОбменаДляПерехода) <> Неопределено Тогда
		Если ЗначениеЗаполнено(ПланыОбмена[ИмяПланаОбменаДляПерехода].НайтиПоКоду(КодУзлаПланаОбмена)) Тогда
			Возврат ИмяПланаОбменаДляПерехода;
		КонецЕсли;
	КонецЕсли;
	ИмяПланаОбменаДляПерехода = "ОбменРозницаУправлениеНебольшойФирмой";
	Если Метаданные.ПланыОбмена.Найти(ИмяПланаОбменаДляПерехода) <> Неопределено Тогда
		Если ЗначениеЗаполнено(ПланыОбмена[ИмяПланаОбменаДляПерехода].НайтиПоКоду(КодУзлаПланаОбмена)) Тогда
			Возврат ИмяПланаОбменаДляПерехода;
		КонецЕсли;
	КонецЕсли;
	
	Возврат "";	
	
КонецФункции

// Функция выполняет переход с существующей настройки синхронизации данных 
//  на настройку синхронизации данных через универсальный формат.
//
// Параметры:
//  НастройкаСинхронизацииДанных - Ссылка на настройку синхронизации данных, с которой выполняется переход.
// 
// Возвращаемое значение:
//  Ссылка на настройку синхронизации данных через универсальный формат (при успешном выполнении перехода).
//  Неопределено (в случае критичных ошибок, возникших в процессе перехода).
Функция ВыполнитьПереходНаСинхронизациюДанныхЧерезУниверсальныйФормат(НастройкаСинхронизацииДанных) Экспорт
	
	НастройкаСинхронизацииЧерезУниверсальныйФормат = Неопределено;
	КодНастройки = НастройкаСинхронизацииДанных.Код;
	ИмяПланаОбменаСтаройНастройки = НастройкаСинхронизацииДанных.Метаданные().Имя;
	
	ОбновитьПовторноИспользуемыеЗначения();
	
	// Поиск или создание настройки синхронизации через универсальный формат.
	Запрос = Новый Запрос("ВЫБРАТЬ ПЕРВЫЕ 1
		|	СинхронизацияДанныхЧерезУниверсальныйФормат.Ссылка
		|ИЗ 
		|	ПланОбмена.СинхронизацияДанныхЧерезУниверсальныйФормат КАК СинхронизацияДанныхЧерезУниверсальныйФормат
		|ГДЕ 
		|	НЕ СинхронизацияДанныхЧерезУниверсальныйФормат.ЭтотУзел 
		|	И СинхронизацияДанныхЧерезУниверсальныйФормат.Код = &КодНастройки");
	
	Запрос.УстановитьПараметр("КодНастройки", КодНастройки);
	РезультатЗапроса = Запрос.Выполнить();
	
	ИмяСобытияЖурналРегистрации = НСтр("ru = 'Переход на синхронизацию данных через универсальный формат'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
	
	Сообщение = НСтр("ru = 'Начало перехода'");
	ЗаписьЖурналаРегистрации(ИмяСобытияЖурналРегистрации, УровеньЖурналаРегистрации.Информация, , , Сообщение);

	Сообщение = НСтр("ru = 'Создание новой настройки синхронизации данных'");
	ЗаписьЖурналаРегистрации(ИмяСобытияЖурналРегистрации, УровеньЖурналаРегистрации.Информация, , , Сообщение);
	
	НачатьТранзакцию();
	
	Попытка
		
		Если Не РезультатЗапроса.Пустой() Тогда
			
			Выборка = РезультатЗапроса.Выбрать();
			Выборка.Следующий();
			НоваяНастройкаОбъект = Выборка.Ссылка.ПолучитьОбъект();
			
		Иначе
			// Создание новой настройки.
			НоваяНастройкаОбъект = ПланыОбмена.СинхронизацияДанныхЧерезУниверсальныйФормат.СоздатьУзел();
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(НоваяНастройкаОбъект, НастройкаСинхронизацииДанных,,
			"НомерОтправленного, НомерПринятого, ПометкаУдаления");
		
		Если ИмяПланаОбменаСтаройНастройки = "ОбменРозницаБухгалтерияПредприятия30" Тогда
			ВариантНастройки = "ОбменБП30";
		ИначеЕсли ИмяПланаОбменаСтаройНастройки = "ОбменРозницаУправлениеНебольшойФирмой" Тогда
			ВариантНастройки = "ОбменУНФ";
		ИначеЕсли ИмяПланаОбменаСтаройНастройки = "ОбменУправлениеТорговлейРозница" Тогда
			ВариантНастройки = "ОбменУТ";
		КонецЕсли;
		
		НоваяНастройкаОбъект.ВариантНастройки = ВариантНастройки;
		НоваяНастройкаОбъект.ПравилаОтправкиСправочников = "АвтоматическаяСинхронизация";
		НоваяНастройкаОбъект.ПравилаОтправкиДокументов = "АвтоматическаяСинхронизация";
		
		ЕстьОрганизации = Ложь;
		МетаданныеСтаройНастройки = Метаданные.ПланыОбмена[ИмяПланаОбменаСтаройНастройки];
		Если МетаданныеСтаройНастройки.ТабличныеЧасти.Найти("Организации") <> Неопределено Тогда
			
			НоваяНастройкаОбъект.Организации.Очистить();
			
			Для Каждого СтрокаОрганизации Из НастройкаСинхронизацииДанных.Организации Цикл
				НоваяСтрокаОрганизации = НоваяНастройкаОбъект.Организации.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрокаОрганизации, СтрокаОрганизации);
			КонецЦикла;
			
		КонецЕсли;
		
		ДоступныеВерсииФормата = Новый Соответствие;
		ДоступныеВерсииФорматаОбмена(ДоступныеВерсииФормата);
		
		Для Каждого КлючИЗначение Из ДоступныеВерсииФормата Цикл
			НоваяНастройкаОбъект.ВерсияФорматаОбмена = КлючИЗначение.Ключ;
		КонецЦикла;
		
		НоваяНастройкаОбъект.Записать();
		
		НастройкаСинхронизацииЧерезУниверсальныйФормат = НоваяНастройкаОбъект.Ссылка;
		
		КодПредопределенногоУзла = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПланыОбмена.СинхронизацияДанныхЧерезУниверсальныйФормат.ЭтотУзел(), "Код");
		Если СтрДлина(КодПредопределенногоУзла) = 36 Тогда
			СтруктураЗаписи = Новый Структура;
			СтруктураЗаписи.Вставить("Корреспондент", НастройкаСинхронизацииЧерезУниверсальныйФормат);
			СтруктураЗаписи.Вставить("КодУзла",
				ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПланыОбмена[ИмяПланаОбменаСтаройНастройки].ЭтотУзел(), "Код"));
			ОбменДаннымиСлужебный.ОбновитьЗаписьВРегистрСведений(СтруктураЗаписи, "ПсевдонимыПредопределенныхУзлов");
		КонецЕсли;
		
		// Регистрация изменений.
		Сообщение = НСтр("ru = 'Регистрация изменений'");
		ЗаписьЖурналаРегистрации(ИмяСобытияЖурналРегистрации, УровеньЖурналаРегистрации.Информация, , , Сообщение);

		ВыполнитьРегистрациюИзменений(НастройкаСинхронизацииДанных, НастройкаСинхронизацииЧерезУниверсальныйФормат);
		
		// Настройки транспорта.
		Сообщение = НСтр("ru = 'Заполнение настроек транспорта сообщений'");
		ЗаписьЖурналаРегистрации(ИмяСобытияЖурналРегистрации, УровеньЖурналаРегистрации.Информация, , , Сообщение);

		ВыгружатьСообщениеПослеПерехода = Ложь;
		ОбработатьНастройкиТранспортаСообщенийОбмена(НастройкаСинхронизацииДанных, 
													НастройкаСинхронизацииЧерезУниверсальныйФормат, 
													ВыгружатьСообщениеПослеПерехода);

		// Дата запрета изменения.
		Сообщение = НСтр("ru = 'Заполнение настроек запрета изменения данных'");
		ЗаписьЖурналаРегистрации(ИмяСобытияЖурналРегистрации, УровеньЖурналаРегистрации.Информация, , , Сообщение);

		ОбработатьДатыЗапретаИзменения(НастройкаСинхронизацииДанных, НастройкаСинхронизацииЧерезУниверсальныйФормат);
		
		// Сценарии обменов данными.
		Сообщение = НСтр("ru = 'Заполнение сценариев обмена данными'");
		ЗаписьЖурналаРегистрации(ИмяСобытияЖурналРегистрации, УровеньЖурналаРегистрации.Информация, , , Сообщение);

		ОбработатьСценарииОбменовДанными(НастройкаСинхронизацииДанных, НастройкаСинхронизацииЧерезУниверсальныйФормат);
		
		//  ПубличныеИдентификаторыСинхронизируемыхОбъектов и ДанныеОбъектовДляРегистрацииВОбменах.
		ОбработатьСоответствияОбъектовИнформационныхБаз(НастройкаСинхронизацииДанных, 
														НастройкаСинхронизацииЧерезУниверсальныйФормат);
		
		// Заполнение настроек главного узла.
		Сообщение = НСтр("ru = 'Заполнение настроек главного узла'");
		ЗаписьЖурналаРегистрации(ИмяСобытияЖурналРегистрации, УровеньЖурналаРегистрации.Информация, , , Сообщение);

		ЭтотУзелСсылка = ПланыОбмена.СинхронизацияДанныхЧерезУниверсальныйФормат.ЭтотУзел();
		КодЭтогоУзла = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЭтотУзелСсылка, "Код");
		
		Если Не ЗначениеЗаполнено(КодЭтогоУзла) Тогда
			
			СтарыйГлавныйУзел = ПланыОбмена[ИмяПланаОбменаСтаройНастройки].ЭтотУзел();
			НовыйГлавныйУзел = ЭтотУзелСсылка.ПолучитьОбъект();
			
			ЗаполнитьЗначенияСвойств(НовыйГлавныйУзел, СтарыйГлавныйУзел,,
				"НомерОтправленного, НомерПринятого, ПометкаУдаления");
			
			Если МетаданныеСтаройНастройки.ТабличныеЧасти.Найти("Организации") <> Неопределено Тогда
				
				НовыйГлавныйУзел.Организации.Очистить();
				
				Для Каждого СтрокаОрганизации Из СтарыйГлавныйУзел.Организации Цикл
					НоваяСтрокаОрганизации = НовыйГлавныйУзел.Организации.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрокаОрганизации, СтрокаОрганизации);
				КонецЦикла;
				
			КонецЕсли;
			
			НовыйГлавныйУзел.Записать();
			
		КонецЕсли;
		
		Сообщение = НСтр("ru = 'Заполнение результатов обмена данными'");
		ЗаписьЖурналаРегистрации(ИмяСобытияЖурналРегистрации, УровеньЖурналаРегистрации.Информация, , , Сообщение);
		ОбработатьРезультатыОбменаДанными(НастройкаСинхронизацииДанных, НастройкаСинхронизацииЧерезУниверсальныйФормат);
		
		Если Не НастройкаСинхронизацииДанных.ПометкаУдаления Тогда
			Сообщение = НСтр("ru = 'Пометка на удаление старой настройки'");
			ЗаписьЖурналаРегистрации(ИмяСобытияЖурналРегистрации, УровеньЖурналаРегистрации.Информация, , , Сообщение);
			НастройкаСинхронизацииДанных.ПолучитьОбъект().УстановитьПометкуУдаления(Истина);
		КонецЕсли;
		
		ПланыОбмена.УдалитьРегистрациюИзменений(НастройкаСинхронизацииДанных);
	
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		
		Сообщение = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЗаписьЖурналаРегистрации(ИмяСобытияЖурналРегистрации, УровеньЖурналаРегистрации.Ошибка, , , Сообщение);
		
		ВызватьИсключение;
	КонецПопытки;
	
	// Обновление правил обмена при необходимости.
	Запрос = Новый Запрос("ВЫБРАТЬ ПЕРВЫЕ 2
		|	СинхронизацияДанныхЧерезУниверсальныйФормат.Ссылка
		|ИЗ 
		|	ПланОбмена.СинхронизацияДанныхЧерезУниверсальныйФормат КАК СинхронизацияДанныхЧерезУниверсальныйФормат
		|ГДЕ 
		|	НЕ СинхронизацияДанныхЧерезУниверсальныйФормат.ЭтотУзел");
	
	Если Запрос.Выполнить().Выгрузить().Количество() < 2 Тогда
		// Была создана первая настройка для этого плана обмена, правила еще не актуализированы.
		ОбменДаннымиСервер.ВыполнитьОбновлениеПравилДляОбменаДанными();
	КонецЕсли;
	
	Если ВыгружатьСообщениеПослеПерехода Тогда
		
		// Выгрузка сообщения по новой настройке обмена.
		Отказ = Ложь;
		
		ОбменДаннымиСервер.ВыполнитьДействиеОбменаДляУзлаИнформационнойБазы(Отказ, 
			НастройкаСинхронизацииЧерезУниверсальныйФормат,
			Перечисления.ДействияПриОбмене.ВыгрузкаДанных);
			
		Если Отказ Тогда
			Сообщение = НСтр("ru = 'Выгрузка данных через универсальный формат не выполнена.'");
			ЗаписьЖурналаРегистрации(ИмяСобытияЖурналРегистрации, УровеньЖурналаРегистрации.Ошибка, , , Сообщение);
		Иначе
			Сообщение = НСтр("ru = 'Выгрузка данных через универсальный формат.'");
			ЗаписьЖурналаРегистрации(ИмяСобытияЖурналРегистрации, УровеньЖурналаРегистрации.Информация, , , Сообщение);
		КонецЕсли;
		
	КонецЕсли;
	
	Сообщение = НСтр("ru = 'Окончание перехода'");
	
	ЗаписьЖурналаРегистрации(ИмяСобытияЖурналРегистрации, УровеньЖурналаРегистрации.Информация, , , Сообщение);
	
	Возврат НастройкаСинхронизацииЧерезУниверсальныйФормат;
	
КонецФункции

// Процедура копирует регистрацию изменений с одного узла на другой.
//
// Параметры:
//  СтарыйУзел - ссылка на узел плана обмена, который является источником сведений
//  НовыйУзел - ссылка на узел плана обмена, который является получателем сведений.
Процедура ВыполнитьРегистрациюИзменений(СтарыйУзел, НовыйУзел)
	
	СоставНовогоПланаОбмена = Метаданные.ПланыОбмена.СинхронизацияДанныхЧерезУниверсальныйФормат.Состав;
	
	НомерСообщения = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтарыйУзел, "НомерОтправленного");
	ВыборкаИзменений = ПланыОбмена.ВыбратьИзменения(СтарыйУзел, НомерСообщения);
	
	Пока ВыборкаИзменений.Следующий() Цикл
		
		ОбъектРегистрации = ВыборкаИзменений.Получить();
		
		Если ОбъектРегистрации = Неопределено Тогда
			Продолжить;
		ИначеЕсли ТипЗнч(ОбъектРегистрации) = Тип("УдалениеОбъекта") Тогда
			Если Не СоставНовогоПланаОбмена.Содержит(ОбъектРегистрации.Ссылка.Метаданные()) Тогда
				Продолжить;
			КонецЕсли;
		ИначеЕсли Не СоставНовогоПланаОбмена.Содержит(ОбъектРегистрации.Метаданные()) Тогда
			Продолжить;
		КонецЕсли;
		
		ПланыОбмена.ЗарегистрироватьИзменения(НовыйУзел, ОбъектРегистрации);
		
	КонецЦикла;
	
КонецПроцедуры

// Процедура переносит сведения о дате запрета изменения с одного узла на другой.
//
// Параметры:
//  СтарыйУзел - ссылка на узел плана обмена, который является источником сведений
//  НовыйУзел - ссылка на узел плана обмена, который является получателем сведений.
Процедура ОбработатьДатыЗапретаИзменения(СтарыйУзел, НовыйУзел)
	
	ДатыЗапрета = РегистрыСведений.ДатыЗапретаИзменения.СоздатьНаборЗаписей();
	ДатыЗапрета.Отбор.Пользователь.Установить(СтарыйУзел);
	ДатыЗапрета.Прочитать();
	
	ДатыЗапретаНовый = РегистрыСведений.ДатыЗапретаИзменения.СоздатьНаборЗаписей();
	ДатыЗапретаНовый.Отбор.Пользователь.Установить(НовыйУзел);
	
	Для Каждого ДатаЗапрета Из ДатыЗапрета Цикл
		
		ЗаписьНовая = ДатыЗапретаНовый.Добавить();
		ЗаписьНовая.Пользователь = НовыйУзел;
		ЗаполнитьЗначенияСвойств(ЗаписьНовая, ДатаЗапрета,,"Пользователь");
		
	КонецЦикла;
	
	ДатыЗапрета.Очистить();
	ДатыЗапрета.Записать();
	ДатыЗапретаНовый.Записать();
	
КонецПроцедуры

// Процедура переносит сведения о сценариях обменов данными с одного узла на другой.
//
// Параметры:
//  СтарыйУзел - ссылка на узел плана обмена, который является источником сведений
//  НовыйУзел - ссылка на узел плана обмена, который является получателем сведений.
Процедура ОбработатьСценарииОбменовДанными(СтарыйУзел, НовыйУзел)
	
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Ссылка
		|ИЗ 
		|	Справочник.СценарииОбменовДанными.НастройкиОбмена
		|ГДЕ 
		|	УзелИнформационнойБазы = &НастройкаСинхронизации
		|	И НЕ Ссылка.ПометкаУдаления");
	
	Запрос.УстановитьПараметр("НастройкаСинхронизации", СтарыйУзел);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		СценарийОбменаОбъект = Выборка.Ссылка.ПолучитьОбъект();
		СтруктураПоиска = Новый структура("УзелИнформационнойБазы", СтарыйУзел);
		СтрокиИсточникДанных = СценарийОбменаОбъект.НастройкиОбмена.НайтиСтроАки(СтруктураПоиска);
		
		Для Каждого СтрокаИсточникДанных Из СтрокиИсточникДанных Цикл
			СтрокаИсточникДанных.УзелИнформационнойБазы = НовыйУзел;
		КонецЦикла;
		
		СценарийОбменаОбъект.Записать();
		
	КонецЦикла;
	
КонецПроцедуры

// Процедура переносит сведения о соответствиях объектов информационных баз с одного узла на другой.
//
// Параметры:
//  СтарыйУзел - ссылка на узел плана обмена, который является источником сведений
//  НовыйУзел - ссылка на узел плана обмена, который является получателем сведений.
Процедура ОбработатьСоответствияОбъектовИнформационныхБаз(СтарыйУзел, НовыйУзел)
	
	// Заполнение ДанныеОбъектовДляРегистрацииВОбменах
	ИмяСобытияЖурналРегистрации = НСтр("ru = 'Переход на синхронизацию данных через универсальный формат.Данные для регистрации в обменах'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
	Сообщение = НСтр("ru = 'Заполнение данных для регистрации в обменах'");
	ЗаписьЖурналаРегистрации(ИмяСобытияЖурналРегистрации, УровеньЖурналаРегистрации.Информация,,, Сообщение);

	Запрос = Новый Запрос("ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	УникальныйИдентификаторИсточника КАК Ссылка
		|ИЗ
		|	РегистрСведений.СоответствияОбъектовИнформационныхБаз
		|ГДЕ 
		|	УзелИнформационнойБазы = &НастройкаСинхронизации");
	
	Запрос.УстановитьПараметр("НастройкаСинхронизации", СтарыйУзел);
	
	НаборЗаписейДанныеОбъектов = РегистрыСведений.ДанныеОбъектовДляРегистрацииВОбменах.СоздатьНаборЗаписей();
	НаборЗаписейДанныеОбъектов.Отбор.УзелИнформационнойБазы.Установить(НовыйУзел);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		НоваяЗаписьДанныеОбъектов = НаборЗаписейДанныеОбъектов.Добавить();
		НоваяЗаписьДанныеОбъектов.Ссылка = Выборка.Ссылка;
		НоваяЗаписьДанныеОбъектов.УзелИнформационнойБазы = НовыйУзел;
	КонецЦикла;
	
	НаборЗаписейДанныеОбъектов.Записать();
	
	// ПубличныеИдентификаторыСинхронизируемыхОбъектов - заполняются только на стороне БП,
	// так как их надо заполнить только для одного из корреспондентов.
	Если Найти(НРЕГ(Метаданные.Имя), "бухгалтерия") > 0 Тогда
		Запрос = Новый Запрос("ВЫБРАТЬ
			|	УникальныйИдентификаторИсточника КАК УИДИсточника,
			|	Количество(УникальныйИдентификаторПриемника) КАК КоличествоСсылок
			|ПОМЕСТИТЬ СоответствияОбъектовСОтбором
			|ИЗ 
			|	РегистрСведений.СоответствияОбъектовИнформационныхБаз
			|ГДЕ УзелИнформационнойБазы = &НастройкаСинхронизации 
			|	И УникальныйИдентификаторПриемника <> ВЫРАЗИТЬ("""" КАК Строка(36))
			|СГРУППИРОВАТЬ ПО УникальныйИдентификаторИсточника
			|;
			|ВЫБРАТЬ 
			|	СоответствияОбъектовСОтбором.УИДИсточника КАК УникальныйИдентификаторИсточника,
			|	СоответствияОбъектовИБ.УникальныйИдентификаторПриемника,
			|	СоответствияОбъектовИБ.ТипПриемника
			|ИЗ 
			|	СоответствияОбъектовСОтбором
			|ЛЕВОЕ СОЕДИНЕНИЕ 
			|	РегистрСведений.СоответствияОбъектовИнформационныхБаз КАК СоответствияОбъектовИБ 
			|ПО 
			|	СоответствияОбъектовИБ.УникальныйИдентификаторИсточника = СоответствияОбъектовСОтбором.УИДИсточника
			|	И СоответствияОбъектовИБ.УзелИнформационнойБазы = &НастройкаСинхронизации
			|	И СоответствияОбъектовИБ.УникальныйИдентификаторПриемника <> ВЫРАЗИТЬ("""" КАК Строка(36))
			|ГДЕ 
			|	СоответствияОбъектовСОтбором.КоличествоСсылок > 1 
			|	И СоответствияОбъектовИБ.УникальныйИдентификаторПриемника <> ВЫРАЗИТЬ("""" КАК Строка(36))
			|;
			|ВЫБРАТЬ 
			|	СоответствияОбъектовСОтбором.УИДИсточника КАК Ссылка,
			|	СоответствияОбъектовИБ.УникальныйИдентификаторПриемника КАК Идентификатор
			|ИЗ 
			|	СоответствияОбъектовСОтбором
			|ЛЕВОЕ СОЕДИНЕНИЕ 
			|	РегистрСведений.СоответствияОбъектовИнформационныхБаз КАК СоответствияОбъектовИБ 
			|ПО 
			|	СоответствияОбъектовИБ.УникальныйИдентификаторИсточника = СоответствияОбъектовСОтбором.УИДИсточника
			|	И СоответствияОбъектовИБ.УзелИнформационнойБазы = &НастройкаСинхронизации
			|	И СоответствияОбъектовИБ.УникальныйИдентификаторПриемника <> ВЫРАЗИТЬ("""" КАК Строка(36))
			|ГДЕ СоответствияОбъектовСОтбором.КоличествоСсылок = 1
			|");
		
		Запрос.УстановитьПараметр("НастройкаСинхронизации", СтарыйУзел);
		РезультатЗапроса = Запрос.ВыполнитьПакет();
		
		ИмяСобытияЖурналРегистрации = НСтр("ru = 'Переход на синхронизацию данных через универсальный формат.Заполнение публичных идентификаторов'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
		Сообщение = НСтр("ru = 'Формирование публичных идентификаторов - начало'");
		ЗаписьЖурналаРегистрации(ИмяСобытияЖурналРегистрации, УровеньЖурналаРегистрации.Информация, , , Сообщение);
		
		// Отображение ссылок "один ко многим"
		Если Не РезультатЗапроса[1].Пустой() Тогда
			
			Сообщение = НСтр("ru = 'Обнаружены записи, в которых одной ссылке на источник соответствуют несколько приемников'") 
						+ Символы.ПС + НСтр("ru = 'Эти записи обработаны не будут.'");
			ЗаписьЖурналаРегистрации(ИмяСобытияЖурналРегистрации, УровеньЖурналаРегистрации.Ошибка, , , Сообщение);
			
			Выборка = РезультатЗапроса[1].Выбрать();
			
			Пока Выборка.Следующий() Цикл
				НСтрока = НСтр("ru = 'Уникальный идентификатор источника: %1, Уникальный идентификатор приемника: %2, Тип приемника: %3'");
				Сообщение = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтрока, 
					Выборка.УникальныйИдентификаторИсточника, 
					Выборка.УникальныйИдентификаторПриемника, 
					Выборка.ТипПриемника);
				
				ЗаписьЖурналаРегистрации(ИмяСобытияЖурналРегистрации, УровеньЖурналаРегистрации.Ошибка, , , Сообщение);
				
			КонецЦикла;
			
		КонецЕсли;
		
		// Формирование записей в регистр Публичные идентификаторы
		СчетчикЗаписей = 0;
		Выборка = РезультатЗапроса[2].Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			// Проверка равенства идентификаторов
			ИдентификаторИсточникаСтрокой = СокрЛП(Выборка.Ссылка.УникальныйИдентификатор());
			
			Если ИдентификаторИсточникаСтрокой = СокрЛП(Выборка.Идентификатор) Тогда
				Продолжить;
			КонецЕсли;
			
			СчетчикЗаписей = СчетчикЗаписей + 1;
			СтруктураЗаписи = Новый Структура("УзелИнформационнойБазы, Ссылка, Идентификатор", 
				НовыйУзел, Выборка.Ссылка, Выборка.Идентификатор);
				
			ОбменДаннымиСлужебный.ДобавитьЗаписьВРегистрСведений(СтруктураЗаписи, 
				"ПубличныеИдентификаторыСинхронизируемыхОбъектов", Ложь);
			
		КонецЦикла;
		
		Сообщение = НСтр("ru = 'Формирование публичных идентификаторов завершено. Количество записей:'") 
			+ СчетчикЗаписей;
			
		ЗаписьЖурналаРегистрации(ИмяСобытияЖурналРегистрации, УровеньЖурналаРегистрации.Информация, , , Сообщение);
		
	КонецЕсли;
	
	// Очистка регистра СоответствиеОбъектовИнформационныхБаз
	НаборЗаписейСоответствиеОбъектов = РегистрыСведений.СоответствияОбъектовИнформационныхБаз.СоздатьНаборЗаписей();
	НаборЗаписейСоответствиеОбъектов.Отбор.УзелИнформационнойБазы.Установить(СтарыйУзел);
	НаборЗаписейСоответствиеОбъектов.Записать();
	
	Сообщение = НСтр("ru = 'Соответствие объектов информационных баз очищен'");
	
	ЗаписьЖурналаРегистрации(ИмяСобытияЖурналРегистрации, УровеньЖурналаРегистрации.Информация, , , Сообщение);

КонецПроцедуры

// Процедура переносит сведения о настройках транспорта сообщений с одного узла на другой.
//
// Параметры:
//  СтарыйУзел - ссылка на узел плана обмена, который является источником сведений
//  НовыйУзел - ссылка на узел плана обмена, который является получателем сведений
//  ВыгружатьСообщениеПослеПерехода - булево, признак того что после завершения перехода следует выгрузить
//   сообщение обмена по новой настройке. Устанавливается в ходе выполнения процедуры, если
//   вид транспорта по умолчанию - файловый ресурс, ftp или email.
Процедура ОбработатьНастройкиТранспортаСообщенийОбмена(СтарыйУзел, НовыйУзел, ВыгружатьСообщениеПослеПерехода)
	
	НастройкиТранспортаОбменаНовогоУзла = РегистрыСведений.НастройкиТранспортаОбменаДанными.СоздатьНаборЗаписей();
	НастройкиТранспортаОбменаНовогоУзла.Отбор.Корреспондент.Установить(НовыйУзел);
	
	НастройкиТранспортаОбменаСтарогоУзла = РегистрыСведений.НастройкиТранспортаОбменаДанными.СоздатьНаборЗаписей();
	НастройкиТранспортаОбменаСтарогоУзла.Отбор.Корреспондент.Установить(СтарыйУзел);
	НастройкиТранспортаОбменаСтарогоУзла.Прочитать();
	
	МассивДоступныеТранспортыСообщений = ИспользуемыеТранспортыСообщенийОбмена();
	
	Если НастройкиТранспортаОбменаСтарогоУзла.Количество()>0 Тогда
		
		НастройкиТранспортаОбменаНовогоУзла.Загрузить(НастройкиТранспортаОбменаСтарогоУзла.Выгрузить());
		
		Для Каждого НастройкаУзла Из НастройкиТранспортаОбменаНовогоУзла Цикл
			
			НастройкаУзла.Корреспондент = НовыйУзел;
			ВидТранспортаПоУмолчанию = НастройкаУзла.ВидТранспортаСообщенийОбменаПоУмолчанию;
			
			Если ВидТранспортаПоУмолчанию = Перечисления.ВидыТранспортаСообщенийОбмена.FILE
				Или ВидТранспортаПоУмолчанию = Перечисления.ВидыТранспортаСообщенийОбмена.EMAIL
				Или ВидТранспортаПоУмолчанию = Перечисления.ВидыТранспортаСообщенийОбмена.FTP Тогда
				ВыгружатьСообщениеПослеПерехода = Истина;
			КонецЕсли;
			
			Если МассивДоступныеТранспортыСообщений.Найти(ВидТранспортаПоУмолчанию) = Неопределено Тогда
				
				// Переопределение вида транспорта по умолчанию
				ВидПоУмолчанию = Неопределено;
				
				Если ЗначениеЗаполнено(НастройкаУзла.FILEКаталогОбменаИнформацией) Тогда
					ВидПоУмолчанию = Перечисления.ВидыТранспортаСообщенийОбмена.FILE;
				ИначеЕсли ЗначениеЗаполнено(НастройкаУзла.FTPСоединениеПуть) Тогда
					ВидПоУмолчанию = Перечисления.ВидыТранспортаСообщенийОбмена.FTP;
				ИначеЕсли ЗначениеЗаполнено(НастройкаУзла.EMAILУчетнаяЗапись) Тогда
					ВидПоУмолчанию = Перечисления.ВидыТранспортаСообщенийОбмена.EMAIL;
				КонецЕсли;
				
				НастройкаУзла.ВидТранспортаСообщенийОбменаПоУмолчанию = ВидПоУмолчанию;
				
				ИмяСобытияЖурналРегистрации = НСтр("ru = 'Переход на синхронизацию данных через универсальный формат.Заполнение настроек транспорта сообщений'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
				НСтрока = НСтр("ru = 'Используемое ранее подключение по умолчанию недоступно для синхронизации данных через универсальный формат (%1)'");
				Сообщение = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтрока, ВидТранспортаПоУмолчанию);
				
				ЗаписьЖурналаРегистрации(ИмяСобытияЖурналРегистрации, УровеньЖурналаРегистрации.Ошибка,,, Сообщение);
				
				Если ЗначениеЗаполнено(НастройкаУзла.ВидТранспортаСообщенийОбменаПоУмолчанию) Тогда
					
					НСтрока = НСтр("ru = 'Взамен назначено подключение по умолчанию: %1. Необходимо проверить корректность настроек транспорта сообщений'");
					Сообщение = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтрока, 
						НастройкаУзла.ВидТранспортаСообщенийОбменаПоУмолчанию);
					
				Иначе
					Сообщение = НСтр("ru = 'Подключение по умолчанию очищено. Необходимо выполнить настройку транспорта сообщений вручную'");
				КонецЕсли;
				
				ЗаписьЖурналаРегистрации(ИмяСобытияЖурналРегистрации, УровеньЖурналаРегистрации.Ошибка,,, Сообщение);
				
			КонецЕсли;
			
		КонецЦикла;
		
		НастройкиТранспортаОбменаСтарогоУзла.Очистить();
		НастройкиТранспортаОбменаСтарогоУзла.Записать();
		НастройкиТранспортаОбменаНовогоУзла.Записать();
		
	КонецЕсли;
	
	// Перенос паролей для доступа.
	УстановитьПривилегированныйРежим(Истина);
	Пароли = ОбщегоНазначения.ПрочитатьДанныеИзБезопасногоХранилища(СтарыйУзел, "COMПарольПользователя, FTPСоединениеПароль, WSПароль, ПарольАрхиваСообщенияОбмена", Истина);
	Если ЗначениеЗаполнено(Пароли.COMПарольПользователя) Тогда
		ОбщегоНазначения.ЗаписатьДанныеВБезопасноеХранилище(НовыйУзел, Пароли.COMПарольПользователя, "COMПарольПользователя");
	КонецЕсли;
	Если ЗначениеЗаполнено(Пароли.FTPСоединениеПароль) Тогда
		ОбщегоНазначения.ЗаписатьДанныеВБезопасноеХранилище(НовыйУзел, Пароли.FTPСоединениеПароль, "FTPСоединениеПароль");
	КонецЕсли;
	Если ЗначениеЗаполнено(Пароли.WSПароль) Тогда
		ОбщегоНазначения.ЗаписатьДанныеВБезопасноеХранилище(НовыйУзел, Пароли.WSПароль, "WSПароль");
	КонецЕсли;
	Если ЗначениеЗаполнено(Пароли.ПарольАрхиваСообщенияОбмена) Тогда
		ОбщегоНазначения.ЗаписатьДанныеВБезопасноеХранилище(НовыйУзел, Пароли.ПарольАрхиваСообщенияОбмена, "ПарольАрхиваСообщенияОбмена");
	КонецЕсли;
	УстановитьПривилегированныйРежим(Ложь);
	
	НастройкиУзловИБНовогоУзла = РегистрыСведений.ОбщиеНастройкиУзловИнформационныхБаз.СоздатьНаборЗаписей();
	НастройкиУзловИБНовогоУзла.Отбор.УзелИнформационнойБазы.Установить(НовыйУзел);
	
	НастройкиУзловИБСтарогоУзла = РегистрыСведений.ОбщиеНастройкиУзловИнформационныхБаз.СоздатьНаборЗаписей();
	НастройкиУзловИБСтарогоУзла.Отбор.УзелИнформационнойБазы.Установить(СтарыйУзел);
	НастройкиУзловИБСтарогоУзла.Прочитать();
	
	Если НастройкиУзловИБСтарогоУзла.Количество()>0 Тогда
		
		НастройкиУзловИБНовогоУзла.Загрузить(НастройкиУзловИБСтарогоУзла.Выгрузить());
		
		Для Каждого НастройкаУзла Из НастройкиУзловИБНовогоУзла Цикл
			НастройкаУзла.УзелИнформационнойБазы = НовыйУзел;
		КонецЦикла;
		
		НастройкиУзловИБСтарогоУзла.Очистить();
		НастройкиУзловИБСтарогоУзла.Записать();
		НастройкиУзловИБНовогоУзла.Записать();
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура переносит сведения о результатах обмена данными с одного узла на другой.
//
// Параметры:
//  СтарыйУзел - ссылка на узел плана обмена, который является источником сведений
//  НовыйУзел - ссылка на узел плана обмена, который является получателем сведений.
Процедура ОбработатьРезультатыОбменаДанными(СтарыйУзел, НовыйУзел)
	
	РезультатыОбмена = РегистрыСведений.РезультатыОбменаДанными.СоздатьНаборЗаписей();
	РезультатыОбмена.Прочитать();
	
	Для Каждого РезультатОбмена Из РезультатыОбмена Цикл
		
		Если РезультатОбмена.УзелИнформационнойБазы <> СтарыйУзел Тогда
			Продолжить;
		КонецЕсли;
		
		Если РезультатОбмена.Пропущена Тогда
			РезультатыОбмена.Удалить(РезультатОбмена);
			Продолжить;
		КонецЕсли;
		
		РезультатОбмена.УзелИнформационнойБазы = НовыйУзел;
		
	КонецЦикла;
	
	РезультатыОбмена.Записать();
	
КонецПроцедуры

// Процедура выполняет попытку перехода на новый обмен с существующего обмена.
//  Вызывается, если в ходе синхронизации данных получено сообщение не соответствующее формату "старого" обмена.
//
// Параметры:
//  НастройкаСинхронизацииДанных - ссылка на узел плана обмена, с которого выполняется переход на новый обмен
//  ОбменЧерезВнешнееСоединение - булево, признак того что текущий обмен выполняется через внешнее соединение.
Процедура ВыполнитьПереходНаНовыйОбмен(НастройкаСинхронизацииДанных, ОбменЧерезВнешнееСоединение = Ложь) Экспорт
	
	Попытка
		НастройкаСинхронизацииЧерезУниверсальныйФормат = 
				ВыполнитьПереходНаСинхронизациюДанныхЧерезУниверсальныйФормат(НастройкаСинхронизацииДанных);
	Исключение
		Возврат;
	КонецПопытки;
	// Передача сведений для обработки ВыполнениеОбменовДанными и ПомощникИнтерактивногоОбменаДанными
	ПередаваемоеЗначение = Новый Структура;
	ИмяПланаОбменаДляПереходаНаНовыйОбмен = НастройкаСинхронизацииЧерезУниверсальныйФормат.Метаданные().Имя;
	ПередаваемоеЗначение.Вставить("ИмяПланаОбменаДляПереходаНаНовыйОбмен", ИмяПланаОбменаДляПереходаНаНовыйОбмен);
	ПередаваемоеЗначение.Вставить("Код", НастройкаСинхронизацииЧерезУниверсальныйФормат.Код);
	
	ПередаваемыйТекст = "{ВыполненПереходНаНовыйОбмен}"+ОбщегоНазначения.ЗначениеВСтрокуXML(ПередаваемоеЗначение);
	ПолучитьСообщенияПользователю(Истина); // Удаление предыдущих сообщений.
	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ПередаваемыйТекст);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецЕсли