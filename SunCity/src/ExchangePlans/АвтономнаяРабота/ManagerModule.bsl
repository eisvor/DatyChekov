#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Позволяет переопределить настройки плана обмена, заданные по умолчанию.
// Значения настроек по умолчанию см. в ОбменДаннымиСервер.НастройкиПланаОбменаПоУмолчанию.
// 
// Параметры:
//	Настройки - Структура - Содержит настройки по умолчанию.
//
Процедура ПриПолученииНастроек(Настройки) Экспорт
	
	Настройки.ПланОбменаИспользуетсяВМоделиСервиса = Истина;
	Настройки.НазначениеПланаОбмена = "РИБСФильтром";

	Настройки.Алгоритмы.ПриПолученииОписанияВариантаНастройки = Истина;
	Настройки.Алгоритмы.ОписаниеОграниченийПередачиДанных     = Истина;
	
КонецПроцедуры

// Заполняет набор параметров, определяющих вариант настройки обмена.
// 
// Параметры:
//  ОписаниеВарианта       - Структура - набор варианта настройки по умолчанию,
//                                       см. ОбменДаннымиСервер.ОписаниеВариантаНастройкиОбменаПоУмолчанию,
//                                       описание возвращаемого значения.
//  ИдентификаторНастройки - Строка    - идентификатор варианта настройки обмена.
//  ПараметрыКонтекста     - Структура - см. ОбменДаннымиСервер.ПараметрыКонтекстаПолученияОписанияВариантаНастройки,
//                                       описание возвращаемого значения функции.
//
Процедура ПриПолученииОписанияВариантаНастройки(ОписаниеВарианта, ИдентификаторНастройки, ПараметрыКонтекста) Экспорт
	
	ОписаниеВарианта.ИспользоватьПомощникСозданияОбменаДанными = Ложь;

	ОписаниеВарианта.КраткаяИнформацияПоОбмену = НСтр("ru = 'Предназначен для обеспечения работы с приложением в автономном режиме.'");
	
	ОписаниеВарианта.ЗаголовокКомандыДляСозданияНовогоОбменаДанными = НСтр("ru='Автономная работа'");

	ОписаниеВарианта.ОбщиеДанныеУзлов = "Магазин, РабочееМесто, ВариантНастройки";
	
	ИспользуемыеТранспортыСообщенийОбмена = Новый Массив;
	ИспользуемыеТранспортыСообщенийОбмена.Добавить(Перечисления.ВидыТранспортаСообщенийОбмена.WS);
	ОписаниеВарианта.ИспользуемыеТранспортыСообщенийОбмена = ИспользуемыеТранспортыСообщенийОбмена;
	
	ОписаниеВарианта.ИмяФайлаНастроекДляПриемника = НСтр("ru = 'Настройки обмена автономного рабочего места'");
	
	ОписаниеВарианта.Отборы.Вставить("ВариантНастройки", "ПоРабочемуМесту");
	ОписаниеВарианта.Отборы.Вставить("ДатаНачалаВыгрузкиДокументов", НачалоГода(ТекущаяДатаСеанса()));
	ОписаниеВарианта.Отборы.Вставить("ВыгружатьИнформативныеОстаткиПоСкладам", Ложь);
	ОписаниеВарианта.Отборы.Вставить("СинхронизироватьТокеныАвторизацииИСМП", Ложь);
	
	ОписаниеВарианта.Отборы.Вставить("Магазин", ПараметрыСеанса.ТекущийМагазин);
	
	ОписаниеВарианта.Отборы.Вставить("РабочееМесто");
	
	СтруктураТабличнойЧастиМагазины = Новый Структура;
	СтруктураТабличнойЧастиМагазины.Вставить("Магазин", Новый Массив);
	
	СтруктураНастроек = Новый Структура;
	ОписаниеВарианта.Отборы.Вставить("РежимВыгрузкиИнформативныхОстатков", Перечисления.РежимыВыгрузкиИнформативныхОстатков.НеВыгружать);
	ОписаниеВарианта.Отборы.Вставить("Магазины",                           СтруктураТабличнойЧастиМагазины);
	ОписаниеВарианта.Отборы.Вставить("МагазиныИнформативныхОстатков",      СтруктураТабличнойЧастиМагазины);
	
КонецПроцедуры

// Возвращает строку описания ограничений миграции данных для пользователя.
// Прикладной разработчик на основе установленных отборов на узле должен сформировать 
// строку описания ограничений удобную для восприятия пользователем.
// 
// Параметры:
//  НастройкаОтборовНаУзле - Структура - структура отборов на узле плана обмена.
//  ВерсияКорреспондента   - Строка    - версия корреспондента.
//  ИдентификаторНастройки - Строка    - идентификатор варианта настройки обмена.
//
// Возвращаемое значение:
//  Строка - описание ограничений миграции данных для пользователя.
//
Функция ОписаниеОграниченийПередачиДанных(НастройкаОтборовНаУзле, ВерсияКорреспондента, ИдентификаторНастройки) Экспорт
	
	// Отбор по варианту настройки
	НСтрока = НСтр("ru = 'С вариантом настройки %1'");
	
	ПредставлениеНастройки = Новый Соответствие;
	ПредставлениеНастройки.Вставить("ПоМагазину", 		НСтр("ru = 'Автономный магазин'"));
	ПредставлениеНастройки.Вставить("ПоРабочемуМесту", 	НСтр("ru = 'Автономное место кассира'"));
	
	ПредставлениеКлюч = НастройкаОтборовНаУзле.ВариантНастройки;
	ОписаниеВариантНастройки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтрока, ПредставлениеНастройки[ПредставлениеКлюч]);
	
	ОписаниеДатаНачалаВыгрузкиДокументов = "";
	
	// Дата начала выгрузки документов.
	Если ЗначениеЗаполнено(НастройкаОтборовНаУзле.ДатаНачалаВыгрузкиДокументов) Тогда
		НСтрока = НСтр("ru = 'Начиная с %1'");
		ОписаниеДатаНачалаВыгрузкиДокументов = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтрока, Формат(НастройкаОтборовНаУзле.ДатаНачалаВыгрузкиДокументов, "ДЛФ=DD"));
	Иначе
		ОписаниеДатаНачалаВыгрузкиДокументов = НСтр("ru = 'За весь период ведения учета в программе'");
	КонецЕсли;
	
	// Отбор по магазину
	НСтрока = НСтр("ru = 'По магазину %1'");
	ОписаниеОтборПоМагазину = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтрока, НастройкаОтборовНаУзле.Магазин);
	
	// Отбор по Информативным остаткам
	ВыбранныеМагазины = НастройкаОтборовНаУзле.МагазиныИнформативныхОстатков.Магазин;
	
	Если НастройкаОтборовНаУзле.РежимВыгрузкиИнформативныхОстатков = Перечисления.РежимыВыгрузкиИнформативныхОстатков.ВыгружатьПоВсемМагазинам Тогда	
		
		ОписаниеОтборПоМагазинамИнформативныхОстатков = НСтр("ru = 'Информативные остатки товаров по всем магазинам'");

	ИначеЕсли НастройкаОтборовНаУзле.РежимВыгрузкиИнформативныхОстатков = Перечисления.РежимыВыгрузкиИнформативныхОстатков.ИндивидуальнаяНастройка Тогда
		
		Если ВыбранныеМагазины.Количество() = 1 Тогда
			СтрокаПредставленияОтбора = ВыбранныеМагазины[0];
			НСтрока = НСтр("ru = 'Информативные остатки товаров по магазину: %1'");
		Иначе
			СтрокаПредставленияОтбора = СтрСоединить(ВыбранныеМагазины, "; ");
			НСтрока = НСтр("ru = 'Информативные остатки товаров только по магазинам: %1'");
		КонецЕсли;
			ОписаниеОтборПоМагазинамИнформативныхОстатков = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтрока, СтрокаПредставленияОтбора);
	Иначе
		ОписаниеОтборПоМагазинамИнформативныхОстатков = НСтр("ru = 'Не выгружать информативные остатки товаров'");
	КонецЕсли;

	НСтрока = НСтр("ru = 'В автономное рабочее место выгружать документы и справочную информацию:
		|%1,
		|%2,
		|%3,
		|%4.'");
	
	МассивПараметров = Новый Массив;
	МассивПараметров.Добавить(ОписаниеВариантНастройки);
	МассивПараметров.Добавить(ОписаниеДатаНачалаВыгрузкиДокументов);
	МассивПараметров.Добавить(ОписаниеОтборПоМагазину);
	МассивПараметров.Добавить(ОписаниеОтборПоМагазинамИнформативныхОстатков);
		
	Возврат СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтрокуИзМассива(НСтрока, МассивПараметров);
	
КонецФункции

// СтандартныеПодсистемы.ГрупповоеИзменениеОбъектов

// Возвращает реквизиты объекта, которые не рекомендуется редактировать
// с помощью обработки группового изменения реквизитов.
//
// Возвращаемое значение:
//  Массив - список имен реквизитов объекта.
Функция РеквизитыНеРедактируемыеВГрупповойОбработке() Экспорт
	
	Результат = Новый Массив;
	Результат.Добавить("РегистрироватьИзменения");
	Возврат Результат;
	
КонецФункции

// Конец СтандартныеПодсистемы.ГрупповоеИзменениеОбъектов

// Возвращает описание блокируемых реквизитов.
//
// Возвращаемое значение:
//     Массив - содержит строки в формате ИмяРеквизита[;ИмяЭлементаФормы,...]
//              где ИмяРеквизита - имя реквизита объекта, ИмяЭлементаФормы - имя элемента формы, связанного с
//              реквизитом.
//
Функция ПолучитьБлокируемыеРеквизитыОбъекта() Экспорт

	Результат = Новый Массив;
	Результат.Добавить("ДатаНачалаВыгрузкиДокументов");
	Результат.Добавить("РабочееМесто");
	
	Возврат Результат;

КонецФункции

Процедура СформироватьДокументВводаОстатков(Параметры, АдресРезультата) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);

	// При формировании документа Ввода остатков регистрируем данные без признака первоначальной выгрузки,
	// чтобы при синхронизации было выгружено "удаление" для объектов, не прошедших фильтр.
	Документы.ВводНачальныхОстатковУзла.СформироватьДокументВводаОстатковДляУзла(Параметры);
	ПланыОбмена.ЗарегистрироватьИзменения(Параметры.УзелОбмена);
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

// Возвращает признак учета остатков по магазину в текущем узле АРМ.
//
// Параметры:
//  Магазин  - СправочникСсылка.Магазины - ссылка на элемент справочника Магазины.
//              для которого нужно вернуть признак учета
//
// Возвращаемое значение:
//   Булево   - Истина - для магазина ведется учет остатков в базе.
//              Ложь - для магазина не ведется учет остатков в базе.
//
Функция ВедетсяУчетОстатковМагазина(Магазин) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ПараметрыСеанса.ИспользуемыеПланыОбмена.Найти("АвтономнаяРабота") <> Неопределено
		И ПланыОбмена.ГлавныйУзел() <> Неопределено Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	АвтономнаяРаботаМагазины.Магазин
		|ИЗ
		|	ПланОбмена.АвтономнаяРабота.Магазины КАК АвтономнаяРаботаМагазины
		|ГДЕ
		|	АвтономнаяРаботаМагазины.Ссылка <> &ГлавныйУзел
		|	И НЕ АвтономнаяРаботаМагазины.Ссылка.ПометкаУдаления
		|	И АвтономнаяРаботаМагазины.Магазин = &Магазин";
		
		Запрос.УстановитьПараметр("ГлавныйУзел", ПланыОбмена.ГлавныйУзел());
		Запрос.УстановитьПараметр("Магазин", Магазин);
		
		Возврат НЕ Запрос.Выполнить().Пустой();
	Иначе
		Возврат Истина;
	
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Ложь);

КонецФункции

#КонецОбласти

#КонецЕсли