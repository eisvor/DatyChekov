#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий

Перем ОписаниеТиповОбъектовКПроведению;
Перем ОписаниеТиповОбъектовКФормированиюОстатков;
Перем ОписаниеТиповВводНачальныхОстатковУзла;
Перем ОписаниеТиповОтчетОРозничныхПродажах;
Перем ОписаниеТиповПеремещение;

Перем МассивОбъектовКПроведению;
Перем МассивОтчетовОРозничныхПродажах;
Перем МассивОбъектовКФормированиюОстатков;
Перем ТребуетсяПровестиВводНачальныхОстатковУзла;

Перем ЭтоГлавныйУзел;

Процедура ПередЗаписью(Отказ)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	МодульОбменДаннымиСервер = ОбщегоНазначения.ОбщийМодуль("ОбменДаннымиСервер");
	Если МодульОбменДаннымиСервер.НадоВыполнитьОбработчикПослеЗагрузкиДанных(ЭтотОбъект, Ссылка) Тогда
		ПослеЗагрузкиДанных(Отказ);
	Иначе
		Если Не ОбщегоНазначения.ЭтоАвтономноеРабочееМесто() Тогда
			ОбменДаннымиРТ.АктуализироватьЗаданияОбновленияИнформативныхОстатков(
				РежимВыгрузкиИнформативныхОстатков <> Перечисления.РежимыВыгрузкиИнформативныхОстатков.НеВыгружать,
				ВыгружатьИнформативныеОстаткиПоСкладам);
		КонецЕсли;
	КонецЕсли;
	
	Если Магазины.Количество() = 0 Тогда
		НоваяСтрока = Магазины.Добавить();
		НоваяСтрока.Магазин = Магазин;
	КонецЕсли;
		
КонецПроцедуры

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка)
	
	ИнициализироватьОбъект(ДанныеЗаполнения);
	
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	МассивНепроверяемыхРеквизитов = Новый Массив;
	ИмяУзла = ОбменДаннымиПовтИсп.ПолучитьИмяПланаОбмена(Ссылка);
	ПредопределенныйУзел = ОбменДаннымиПовтИсп.ПолучитьЭтотУзелПланаОбмена(ИмяУзла);
	
	Если (НЕ ЭтоНовый())
		И (ПредопределенныйУзел = Ссылка 
		ИЛИ ПланыОбмена.ГлавныйУзел() = Ссылка) Тогда
		
		МассивНепроверяемыхРеквизитов.Добавить("Магазин");
		МассивНепроверяемыхРеквизитов.Добавить("ВариантНастройки");
		
	КонецЕсли;
	
	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов);
	
КонецПроцедуры

Процедура ПриПолученииДанныхОтПодчиненного(ЭлементДанных, ПолучениеЭлемента, ОтправкаНазад)
	
	ТипЭлемента = ТипЗнч(ЭлементДанных);
	
	Если ВариантНастройки = "ПоРабочемуМесту"
 		И ОписаниеТиповОбъектовКПроведению.СодержитТип(ТипЭлемента) Тогда
		Если ЗначениеЗаполнено(ЭлементДанных.Ссылка) Тогда
			МассивОбъектовКПроведению.Добавить(ЭлементДанных.Ссылка);
		ИначеЕсли ЭлементДанных.Проведен Тогда
			ЭлементДанных.ОбменДанными.Отправитель = Ссылка;
			ЭлементДанных.ОбменДанными.Загрузка = Истина;
			ЭлементДанных.ДополнительныеСвойства.Вставить("ЗагрузкаДанныхИзРабочегоМеста");
			ЭлементДанных.Записать(РежимЗаписиДокумента.Запись);
			МассивОбъектовКПроведению.Добавить(ЭлементДанных.Ссылка);
		КонецЕсли;
	КонецЕсли;
	
	Если ВариантНастройки = "ПоМагазину"
		И ОписаниеТиповОбъектовКФормированиюОстатков.СодержитТип(ТипЭлемента) Тогда
		Если ЗначениеЗаполнено(ЭлементДанных.Ссылка) Тогда
			МассивОбъектовКФормированиюОстатков.Добавить(ЭлементДанных.Ссылка);
		ИначеЕсли ЭлементДанных.Проведен Тогда
			ЭлементДанных.ОбменДанными.Отправитель = Ссылка;
			ЭлементДанных.ОбменДанными.Загрузка = Истина;
			ЭлементДанных.Записать(РежимЗаписиДокумента.Запись);
			МассивОбъектовКФормированиюОстатков.Добавить(ЭлементДанных.Ссылка);
		КонецЕсли;
	КонецЕсли;
	
	Если ЭтоГлавныйУзел И ОписаниеТиповОтчетОРозничныхПродажах.СодержитТип(ТипЭлемента) Тогда
		Если ЭлементДанных.Проведен Тогда
			МассивОтчетовОРозничныхПродажах.Добавить(ЭлементДанных.Ссылка);
		КонецЕсли;
	КонецЕсли;
	
	Если ОписаниеТиповПеремещение.СодержитТип(ТипЭлемента) Тогда
		ОбновитьПеремещениеПоТТН(ЭлементДанных, ПолучениеЭлемента, ОтправкаНазад);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриПолученииДанныхОтГлавного(ЭлементДанных, ПолучениеЭлемента, ОтправкаНазад)
	
	ТипЭлемента = ТипЗнч(ЭлементДанных);
	
	Если ОписаниеТиповВводНачальныхОстатковУзла.СодержитТип(ТипЭлемента) Тогда
		ТребуетсяПровестиВводНачальныхОстатковУзла = Истина;
		ЭлементДанных.Узел = ПланыОбмена.АвтономнаяРабота.ЭтотУзел();
	КонецЕсли;

	Если ОписаниеТиповПеремещение.СодержитТип(ТипЭлемента) Тогда
		ОбновитьПеремещениеПоТТН(ЭлементДанных, ПолучениеЭлемента, ОтправкаНазад);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриОтправкеДанныхПодчиненному(ЭлементДанных, ОтправкаЭлемента, СозданиеНачальногоОбраза)
	
	Если СозданиеНачальногоОбраза
		И ВариантНастройки = "ПоМагазину"
		И НЕ ЭтотОбъект.ДополнительныеСвойства.Свойство("СформированДокументВводаОстатков") Тогда
		
		МагазиныУзла = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Магазин);
		
		// Параметры формирования остатков.	
		Параметры = Новый Структура;
		Параметры.Вставить("УзелОбмена",                   Ссылка);
		Параметры.Вставить("КодУзла",                      Код);
		Параметры.Вставить("ДатаНачалаВыгрузкиДокументов", ДатаНачалаВыгрузкиДокументов);
		Параметры.Вставить("Магазины",                     МагазиныУзла);
		Параметры.Вставить("Комментарий",                  "");
		
		УстановитьПривилегированныйРежим(Истина);

		// При формировании документа Ввода остатков регистрируем данные без признака первоначальной выгрузки,
		// чтобы при синхронизации было выгружено "удаление" для объектов, не прошедших фильтр.
		Документы.ВводНачальныхОстатковУзла.СформироватьДокументВводаОстатковДляУзла(Параметры);
		ПланыОбмена.ЗарегистрироватьИзменения(Ссылка);
		
		УстановитьПривилегированныйРежим(Ложь);
		
		ЭтотОбъект.ДополнительныеСвойства.Вставить("СформированДокументВводаОстатков");
		
	КонецЕсли;

КонецПроцедуры

Процедура ПослеЗагрузкиДанных(Отказ)
	
	Если ТребуетсяПровестиВводНачальныхОстатковУзла Тогда
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("УзелОбмена", ПланыОбмена.АвтономнаяРабота.ЭтотУзел());
		Запрос.Текст =
			"ВЫБРАТЬ
			|	ВводНачальныхОстатковУзла.Ссылка КАК ВводНачальныхОстатковУзла
			|ИЗ
			|	Документ.ВводНачальныхОстатковУзла КАК ВводНачальныхОстатковУзла
			|ГДЕ
			|	ВводНачальныхОстатковУзла.Узел = &УзелОбмена
			|	И НЕ ВводНачальныхОстатковУзла.ПометкаУдаления
			|
			|УПОРЯДОЧИТЬ ПО
			|	Дата УБЫВ";

		МассивДокументов = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ВводНачальныхОстатковУзла");
		
		Для Каждого ДокументСсылка Из МассивДокументов Цикл
			
			Если НЕ ДокументСсылка.Пустая()
				И ОбщегоНазначения.СсылкаСуществует(ДокументСсылка) Тогда
				
				Результат = ОбменДаннымиРТ.ВыполнитьПроведениеДокументаПриЗагрузке(ДокументСсылка, Ссылка);
				
				Если Результат.Свойство("Успешно") И НЕ Результат.Успешно Тогда
					ЗаписьЖурналаРегистрации(ОбменДаннымиСервер.СобытиеЖурналаРегистрацииОбменДанными(),
						УровеньЖурналаРегистрации.Предупреждение,,, Результат.ОписаниеОшибки);
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;

	Если МассивОбъектовКПроведению.Количество() > 0 Тогда
		
		Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ЧекККМ.Ссылка КАК Ссылка,
		|	ЧекККМ.Дата КАК Дата,
		|	ЧекККМ.МоментВремени КАК МоментВремени,
		|	ЧекККМ.Проведен КАК Проведен
		|ИЗ
		|	Документ.ЧекККМ КАК ЧекККМ
		|ГДЕ
		|	ЧекККМ.Ссылка В(&МассивОбъектовКПроведению)
		|
		|УПОРЯДОЧИТЬ ПО
		|	Дата,
		|	МоментВремени
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ОтчетОРозничныхПродажах.Ссылка КАК Ссылка,
		|	ОтчетОРозничныхПродажах.Дата КАК Дата,
		|	ОтчетОРозничныхПродажах.МоментВремени КАК МоментВремени,
		|	ОтчетОРозничныхПродажах.Проведен КАК Проведен
		|ИЗ
		|	Документ.ОтчетОРозничныхПродажах КАК ОтчетОРозничныхПродажах
		|ГДЕ
		|	ОтчетОРозничныхПродажах.Ссылка В(&МассивОбъектовКПроведению)
		|
		|УПОРЯДОЧИТЬ ПО
		|	ОтчетОРозничныхПродажах.Дата,
		|	ОтчетОРозничныхПродажах.МоментВремени");
		
		Запрос.УстановитьПараметр("МассивОбъектовКПроведению", МассивОбъектовКПроведению);
		РезультатЗапроса = Запрос.ВыполнитьПакет();
		
		Для Инд = 0 По 1 Цикл
			
			Если НЕ РезультатЗапроса[Инд].Пустой() Тогда
				
				Выборка = РезультатЗапроса[Инд].Выбрать();
				
				Пока Выборка.Следующий() Цикл
					
					Попытка
						
						ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
						
						Если Выборка.Проведен Тогда
							
							РежимЗаписи = РежимЗаписиДокумента.Проведение;
							
						Иначе	
							
							РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения;
							
						КонецЕсли;
						
						ДокументОбъект.ОбменДанными.Отправитель = Ссылка;
						ДокументОбъект.ДополнительныеСвойства.Вставить("ЗагрузкаДанныхИзРабочегоМеста");
						ДокументОбъект.Записать(РежимЗаписи);
						
					Исключение
						
						Инфо = ИнформацияОбОшибке();
						ТекстСообщенияОбОшибке = НСтр("ru = 'Ошибка при проведении документа: %1. 
						|При загрузке данных по рабочему месту: %2'");
						ТекстСообщенияОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщенияОбОшибке, КраткоеПредставлениеОшибки(Инфо), Ссылка);
						ЗаписьЖурналаРегистрации(НСтр("ru = 'Обмен данными.Загрузка данных'", ОбщегоНазначения.КодОсновногоЯзыка()), УровеньЖурналаРегистрации.Ошибка,,Инфо);
						
					КонецПопытки;
					
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если МассивОбъектовКФормированиюОстатков.Количество() > 0 Тогда
		
		Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ПеремещениеТоваров.Ссылка,
		|	ПеремещениеТоваров.Дата КАК Дата,
		|	ПеремещениеТоваров.МоментВремени КАК МоментВремени,
		|	ПеремещениеТоваров.Проведен
		|ИЗ
		|	Документ.ПеремещениеТоваров КАК ПеремещениеТоваров
		|ГДЕ
		|	ПеремещениеТоваров.Ссылка В(&МассивОбъектовКФормированиюОстатков)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	АктОРасхожденияхПриПриемкеТоваров.Ссылка,
		|	АктОРасхожденияхПриПриемкеТоваров.Дата,
		|	АктОРасхожденияхПриПриемкеТоваров.МоментВремени,
		|	АктОРасхожденияхПриПриемкеТоваров.Проведен
		|ИЗ
		|	Документ.АктОРасхожденияхПриПриемкеТоваров КАК АктОРасхожденияхПриПриемкеТоваров
		|ГДЕ
		|	АктОРасхожденияхПриПриемкеТоваров.Ссылка В(&МассивОбъектовКФормированиюОстатков)
		|
		|УПОРЯДОЧИТЬ ПО
		|	Дата,
		|	МоментВремени");
		
		Запрос.УстановитьПараметр("МассивОбъектовКФормированиюОстатков", МассивОбъектовКФормированиюОстатков);
		РезультатЗапроса = Запрос.Выполнить();
		
		Если НЕ РезультатЗапроса.Пустой() Тогда
			
			Выборка = РезультатЗапроса.Выбрать();
			
			Пока Выборка.Следующий() Цикл
				
				ТоварыНаСкладах = РегистрыНакопления.ТоварыНаСкладах.СоздатьНаборЗаписей();
				ТоварыНаСкладах.Отбор.Регистратор.Установить(Выборка.Ссылка);
				
				Если Выборка.Проведен Тогда
					
					ДополнительныеСвойстваОбъекта = Новый Структура;
					ПроведениеСервер.ИнициализироватьДополнительныеСвойстваДляПроведения(Выборка.Ссылка, ДополнительныеСвойстваОбъекта);
					
					Документы[Выборка.Ссылка.Метаданные().Имя].ИнициализироватьДанныеДокумента(Выборка.Ссылка, ДополнительныеСвойстваОбъекта);
					
					ТаблицаДвижений = ДополнительныеСвойстваОбъекта.ТаблицыДляДвижений.ТаблицаТоварыНаСкладах;
					
					Если ТаблицаДвижений.Колонки.Найти("Регистратор") = Неопределено Тогда
						ТаблицаДвижений.Колонки.Добавить("Регистратор");
						ТаблицаДвижений.ЗаполнитьЗначения(Выборка.Ссылка, "Регистратор");
					КонецЕсли;
					
					ТоварыНаСкладах.Загрузить(ТаблицаДвижений);
				КонецЕсли;
				
				Попытка
				
					ТоварыНаСкладах.ОбменДанными.Отправитель = Ссылка;
					ТоварыНаСкладах.Записать();
					
				Исключение
					
					Инфо = ИнформацияОбОшибке();
					ТекстСообщенияОбОшибке = НСтр("ru = 'Ошибка при формировании остатков документа: %1. 
					|При загрузке данных из магазина: %2'");
					ТекстСообщенияОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщенияОбОшибке, КраткоеПредставлениеОшибки(Инфо), Ссылка);
					ЗаписьЖурналаРегистрации(НСтр("ru = 'Обмен данными.Загрузка данных'", ОбщегоНазначения.КодОсновногоЯзыка()), УровеньЖурналаРегистрации.Ошибка,,Инфо);
					
				КонецПопытки;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЭтоГлавныйУзел Тогда
		БонусныеБаллыСервер.ПровестиОтчетыОПродажахПриОбмене(МассивОтчетовОРозничныхПродажах, Ссылка);
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбновитьПеремещениеПоТТН(ЭлементДанных, ПолучениеЭлемента, ОтправкаНазад)
	
	Если НЕ ЗначениеЗаполнено(ЭлементДанных.ТТНВходящаяЕГАИС) Тогда
		Если ЭлементДанных.ЭтоНовый() Тогда
			ИдентификаторПеремещения = СокрЛП(ЭлементДанных.ПолучитьСсылкуНового().УникальныйИдентификатор());
		Иначе
			ИдентификаторПеремещения = СокрЛП(ЭлементДанных.Ссылка.УникальныйИдентификатор());
		КонецЕсли;
		ТТН = ИнтеграцияЕГАИСРТ.НайтиТТНПоИдентификаторуПеремещения(ИдентификаторПеремещения);
		Если ЗначениеЗаполнено(ТТН) Тогда
			ЭлементДанных.ТТНВходящаяЕГАИС = ТТН;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ИнициализироватьОбъект(ДанныеЗаполнения)
	
	Если Не ДанныеЗаполнения = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДатаНачалаВыгрузкиДокументов = НачалоГода(ТекущаяДатаСеанса());

КонецПроцедуры

#КонецОбласти

МассивОбъектовКФормированиюОстатков = Новый Массив;
МассивОтчетовОРозничныхПродажах = Новый Массив;
МассивОбъектовКПроведению = Новый Массив;

ОписаниеТиповОбъектовКПроведению = Новый ОписаниеТипов("ДокументОбъект.ЧекККМ, ДокументОбъект.ОтчетОРозничныхПродажах");
ОписаниеТиповОбъектовКФормированиюОстатков = Новый ОписаниеТипов("ДокументОбъект.ПеремещениеТоваров, ДокументОбъект.АктОРасхожденияхПриПриемкеТоваров");
ОписаниеТиповВводНачальныхОстатковУзла = Новый ОписаниеТипов("ДокументОбъект.ВводНачальныхОстатковУзла");
ОписаниеТиповОтчетОРозничныхПродажах = Новый ОписаниеТипов("ДокументОбъект.ОтчетОРозничныхПродажах");
ОписаниеТиповПеремещение = Новый ОписаниеТипов("ДокументОбъект.ПеремещениеТоваров");

ТребуетсяПровестиВводНачальныхОстатковУзла = Ложь;
ЭтоГлавныйУзел = ПланыОбмена.ГлавныйУзел() = Неопределено;

#КонецЕсли
