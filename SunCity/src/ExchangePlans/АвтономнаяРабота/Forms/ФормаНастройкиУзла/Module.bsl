#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Пропускаем инициализацию, чтобы гарантировать получение формы при передаче параметра "АвтоТест".
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	ОбменДаннымиСервер.ФормаНастройкиУзлаПриСозданииНаСервере(ЭтаФорма, "АвтономнаяРабота");
	
	УстановитьВидимостьНаСервере();

	ОбновитьНаименованиеКомандФормы();
	
	ЗаполнитьРабочееМесто(ВариантНастройки);
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	ОбменДаннымиКлиент.ФормаНастройкиПередЗакрытием(Отказ, ЭтотОбъект, ЗавершениеРаботы);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьИЗакрыть(Команда)
	
	ОбменДаннымиКлиент.ФормаНастройкиУзлаКомандаЗакрытьФорму(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	ОбновитьДанныеОбъекта(ВыбранноеЗначение);
	Модифицированность = Истина;

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура РежимНастройкиОбменаПриИзменении(Элемент)
	
	УстановитьВидимостьНаСервере();
	
	ЗаполнитьРабочееМесто(ВариантНастройки);
	
КонецПроцедуры

&НаКлиенте
Процедура МагазинПриИзменении(Элемент)
	
	ПроверитьМагазинВТаблицеИнформативныхОстатков(Магазин);
	
	Магазины.Очистить();
	НоваяСтрокаМагазины = Магазины.Добавить();
	НоваяСтрокаМагазины.Магазин = Магазин;
	
	ОбновитьНаименованиеКомандФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура ИнформацияПоВыбраннымМагазинамНажатие(Элемент)
	
	МагазинИсключение = Новый Структура;
	МагазинИсключение.Вставить("РеквизитОтбора", "Ссылка");
	МагазинИсключение.Вставить("Условие", "<>");
	МагазинИсключение.Вставить("ИмяПараметра", "МагазинИсключение"); 
	МагазинИсключение.Вставить("ЗначениеПараметра", Магазин);
	
	КоллекцияФильтров = Новый Массив;
	КоллекцияФильтров.Добавить(МагазинИсключение);
	
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("ИмяЭлементаФормыДляЗаполнения",          "МагазиныИнформативныхОстатков");
	ПараметрыФормы.Вставить("ИмяРеквизитаЭлементаФормыДляЗаполнения", "Магазин");
	ПараметрыФормы.Вставить("ИмяТаблицыВыбора",                       "Справочник.Магазины");
	ПараметрыФормы.Вставить("ЗаголовокФормыВыбора",                   НСтр("ru = 'Выберите магазины информативных остатков:'"));
	ПараметрыФормы.Вставить("МассивВыбранныхЗначений",                СформироватьМассивВыбранныхЗначений(ПараметрыФормы));
	ПараметрыФормы.Вставить("ПараметрыВнешнегоСоединения",            Неопределено);
	ПараметрыФормы.Вставить("КоллекцияФильтров",                      КоллекцияФильтров);
	
	ОткрытьФорму("ОбщаяФорма.ФормаВыбораДополнительныхУсловий",
		ПараметрыФормы,
		ЭтаФорма);

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура УстановитьВидимостьНаСервере()
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ГруппаПоРабочемуМесту",
		"Видимость",
		ВариантНастройки = "ПоРабочемуМесту");

	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ГруппаТокеныАвторизацииИСМП",
		"Видимость",
		ПолучитьФункциональнуюОпцию("ВестиУчетМаркируемойПродукцииИСМП"));

КонецПроцедуры

&НаСервере
Функция СформироватьМассивВыбранныхЗначений(ПараметрыФормы)
	
	МассивВыбранныхЗначений = Новый Массив;
	
	Если РежимВыгрузкиИнформативныхОстатков = Перечисления.РежимыВыгрузкиИнформативныхОстатков.ИндивидуальнаяНастройка Тогда
		ТабличнаяЧасть           = ЭтаФорма[ПараметрыФормы.ИмяЭлементаФормыДляЗаполнения];
		ТаблицаВыбранныхЗначений = ТабличнаяЧасть.Выгрузить(,ПараметрыФормы.ИмяРеквизитаЭлементаФормыДляЗаполнения);
		МассивВыбранныхЗначений  = ТаблицаВыбранныхЗначений.ВыгрузитьКолонку(ПараметрыФормы.ИмяРеквизитаЭлементаФормыДляЗаполнения);
	ИначеЕсли РежимВыгрузкиИнформативныхОстатков = Перечисления.РежимыВыгрузкиИнформативныхОстатков.ВыгружатьПоВсемМагазинам Тогда
		МассивВыбранныхЗначений = ТаблицаМагазиновИнформативныхОстатков().ВыгрузитьКолонку("Магазин");
	КонецЕсли;
	
	Возврат МассивВыбранныхЗначений;

КонецФункции

&НаСервере
Процедура ОбновитьДанныеОбъекта(СтруктураПараметров)
	
	ЭтаФорма[СтруктураПараметров.ИмяТаблицыДляЗаполнения].Очистить();
	
	СписокВыбранныхЗначений = ПолучитьИзВременногоХранилища(СтруктураПараметров.АдресТаблицыВоВременномХранилище);
	СписокВыбранныхЗначений.Колонки.Представление.Имя = СтруктураПараметров.ИмяКолонкиДляЗаполнения;
	
	Если СписокВыбранныхЗначений.Количество() > 0 Тогда
		
		ТаблицаВсеМагазины = ТаблицаМагазиновИнформативныхОстатков();
		
		Если ОбщегоНазначения.КоллекцииИдентичны(ТаблицаВсеМагазины, СписокВыбранныхЗначений) Тогда
			РежимВыгрузкиИнформативныхОстатков = Перечисления.РежимыВыгрузкиИнформативныхОстатков.ВыгружатьПоВсемМагазинам;
			ЭтаФорма[СтруктураПараметров.ИмяТаблицыДляЗаполнения].Очистить();
		Иначе
			РежимВыгрузкиИнформативныхОстатков = Перечисления.РежимыВыгрузкиИнформативныхОстатков.ИндивидуальнаяНастройка;
			ЭтаФорма[СтруктураПараметров.ИмяТаблицыДляЗаполнения].Загрузить(СписокВыбранныхЗначений);
		КонецЕсли;
	Иначе
		ЭтаФорма[СтруктураПараметров.ИмяТаблицыДляЗаполнения].Очистить();
		РежимВыгрузкиИнформативныхОстатков = Перечисления.РежимыВыгрузкиИнформативныхОстатков.НеВыгружать;
	КонецЕсли;
	
	ОбновитьНаименованиеКомандФормы();

КонецПроцедуры

&НаСервере
Процедура ОбновитьНаименованиеКомандФормы()
	
	// Обновим заголовок надписи по выбранным магазинам.
	ВыбранныеМагазины = МагазиныИнформативныхОстатков.Выгрузить().ВыгрузитьКолонку("Магазин");
	
	Если РежимВыгрузкиИнформативныхОстатков = Перечисления.РежимыВыгрузкиИнформативныхОстатков.ВыгружатьПоВсемМагазинам Тогда
		
		НовыйЗаголовокКоманды = НСтр("ru = 'Выгружать информативные остатки по всем магазинам.'");
		
	ИначеЕсли РежимВыгрузкиИнформативныхОстатков = Перечисления.РежимыВыгрузкиИнформативныхОстатков.ИндивидуальнаяНастройка Тогда
		
		Если ВыбранныеМагазины.Количество() = 1 Тогда
			
				ТекстЗаголовка = НСтр("ru = 'Выгружать информативные остатки по магазину %1.'");
				НовыйЗаголовокКоманды = СтрШаблон(ТекстЗаголовка, ВыбранныеМагазины[0].Наименование);

		Иначе
			НовыйЗаголовокКоманды = НСтр("ru = 'Выгружать информативные остатки по выбранным магазинам.'");
		КонецЕсли;
		
	Иначе
		НовыйЗаголовокКоманды = НСтр("ru = 'Информативные остатки по магазинам не выгружаются.'");
	КонецЕсли;
		
	Элементы.ИнформацияПоВыбраннымМагазинам.Заголовок = НовыйЗаголовокКоманды;
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьМагазинВТаблицеИнформативныхОстатков(МагазинШапки)
	
	Если РежимВыгрузкиИнформативныхОстатков = Перечисления.РежимыВыгрузкиИнформативныхОстатков.ИндивидуальнаяНастройка Тогда
		ТаблицаЗначенийМагазины = МагазиныИнформативныхОстатков.Выгрузить();
		
		СтрокаМагазин = ТаблицаЗначенийМагазины.Найти(МагазинШапки, "Магазин");
		Если СтрокаМагазин <> Неопределено Тогда
			ТаблицаЗначенийМагазины.Удалить(СтрокаМагазин);
		КонецЕсли;
		
		МагазиныИнформативныхОстатков.Загрузить(ТаблицаЗначенийМагазины);
		
		// Если удалили последний в таблице магазин
		Если МагазиныИнформативныхОстатков.Количество() = 0 Тогда
			РежимВыгрузкиИнформативныхОстатков = Перечисления.РежимыВыгрузкиИнформативныхОстатков.НеВыгружать;
		КонецЕсли;
	КонецЕсли;
		
КонецПроцедуры

&НаСервере
Функция ТаблицаМагазиновИнформативныхОстатков()
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	Магазины.Ссылка КАК Магазин
	|ИЗ
	|	Справочник.Магазины КАК Магазины
	|ГДЕ
	|	Магазины.Ссылка <> &МагазинУзла
	|	И НЕ Магазины.СкладУправляющейСистемы");
	Запрос.УстановитьПараметр("МагазинУзла", Магазин);
	
	Возврат Запрос.Выполнить().Выгрузить();

КонецФункции

&НаСервере
Функция НаименованиеРабочегоМеста()
	
	Результат = НСтр("ru = 'Рабочее место: %1'");
	
	Возврат СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Результат, ПолноеИмяПользователя());
	
КонецФункции

&НаСервере
Процедура ЗаполнитьРабочееМесто(ВариантНастройки)
	
	Если ВариантНастройки = "ПоРабочемуМесту" Тогда
		
		КодРМ = "00000000-0000-0000-0000-000000000000";
		НаименованиеРМ = НаименованиеРабочегоМеста();
		
		Запрос = Новый Запрос("ВЫБРАТЬ ПЕРВЫЕ 1
		|	РабочиеМеста.Ссылка КАК РабочееМесто
		|ИЗ
		|	Справочник.РабочиеМеста КАК РабочиеМеста
		|ГДЕ
		|	РабочиеМеста.Код = &Код
		|	И РабочиеМеста.Наименование = &Наименование
		|	И НЕ РабочиеМеста.ПометкаУдаления
		|");
		Запрос.УстановитьПараметр("Код", КодРМ);
		Запрос.УстановитьПараметр("Наименование", НаименованиеРМ);
		
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			РабочееМесто = Выборка.РабочееМесто;
		Иначе		
			РабочееМестоУзла = Справочники.РабочиеМеста.СоздатьЭлемент();
			РабочееМестоУзла.Код = КодРМ;
			РабочееМестоУзла.Наименование = НаименованиеРМ;
			РабочееМестоУзла.Записать();
			
			РабочееМесто = РабочееМестоУзла.Ссылка;
		КонецЕсли;
	Иначе
		РабочееМесто = Справочники.РабочиеМеста.ПустаяСсылка();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти
