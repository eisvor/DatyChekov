#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;

	ЗапретРедактированияРеквизитовОбъектов.ЗаблокироватьРеквизиты(ЭтаФорма);
	
	// Для предопределенного узла этой информационной базы закладку "НастройкаФильтровРегистрации" не отображаем.
	Если ЭтоПредопределенныйУзелПланаОбмена() 
		ИЛИ ПланыОбмена.ГлавныйУзел() = Объект.Ссылка Тогда
			
		Элементы.НастройкаФильтровРегистрации.Видимость = Ложь;
		
	КонецЕсли;
	
	УстановитьВидимостьНаСервере();
	
	ОбновитьНаименованиеКомандФормы();

КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	Если Не ЭтоПредопределенныйУзелПланаОбмена() Тогда
		 
		ТекущийОбъект.Магазины.Очистить();
		НоваяСтрокаМагазины = ТекущийОбъект.Магазины.Добавить();
		НоваяСтрокаМагазины.Магазин = ТекущийОбъект.Магазин;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	ОбменДаннымиСервер.ФормаУзлаПриЗаписиНаСервере(ТекущийОбъект, Отказ);

КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	ЗапретРедактированияРеквизитовОбъектов.ЗаблокироватьРеквизиты(ЭтаФорма);
	
	// Зарегистрируем информативные остатки при изменении настройки.
	Если ОбновитьИнформативныеОстаткиПоСкладам Тогда
		ПланыОбмена.ЗарегистрироватьИзменения(Объект.Ссылка, Метаданные.РегистрыСведений.ИнформативныеОстаткиТоваровПоСкладам);
	КонецЕсли;
	Если ОбновитьИнформативныеОстаткиПоМагазинам Тогда
		ПланыОбмена.ЗарегистрироватьИзменения(Объект.Ссылка, Метаданные.РегистрыСведений.ИнформативныеОстаткиТоваровПоМагазинам);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	Если СформироватьДокументВводаОстатков Тогда
		ДлительнаяОперация = НачатьФормированиеВводаОстатковНаСервере();
		ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
		ПараметрыОжидания.ТекстСообщения = НСтр("ru = 'Выполняется формирование документа ввода остатков для узла.'");
		ОповещениеОЗавершении = Новый ОписаниеОповещения("ФормированиеВводаОстатковЗавершение", ЭтотОбъект);
		ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, ОповещениеОЗавершении, ПараметрыОжидания);
	КонецЕсли;
	
	ПослеЗаписиЗавершение(ПараметрыЗаписи);

КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	Оповестить("Запись_АвтономноеРабочееМесто");
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	ОбновитьДанныеОбъекта(ВыбранноеЗначение);
	Модифицированность = Истина;

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура РежимНастройкиОбменаПриИзменении(Элемент)
	
	УстановитьВидимостьНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура МагазинПриИзменении(Элемент)
	
	ПроверитьМагазинВТаблицеИнформативныхОстатков(Объект.Магазин);
	ОбновитьНаименованиеКомандФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгружатьИнформативныеОстаткиПоСкладамПриИзменении(Элемент)
	ОбновитьИнформативныеОстаткиПоСкладам = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ИнформацияПоВыбраннымМагазинамНажатие(Элемент)
	
	МагазинИсключение = Новый Структура;
	МагазинИсключение.Вставить("РеквизитОтбора", "Ссылка");
	МагазинИсключение.Вставить("Условие", "<>");
	МагазинИсключение.Вставить("ИмяПараметра", "МагазинИсключение"); 
	МагазинИсключение.Вставить("ЗначениеПараметра", Объект.Магазин);
	
	КоллекцияФильтров = Новый Массив;
	КоллекцияФильтров.Добавить(МагазинИсключение);
	
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("ИмяЭлементаФормыДляЗаполнения",          "МагазиныИнформативныхОстатков");
	ПараметрыФормы.Вставить("ИмяРеквизитаЭлементаФормыДляЗаполнения", "Магазин");
	ПараметрыФормы.Вставить("ИмяТаблицыВыбора",                       "Справочник.Магазины");
	ПараметрыФормы.Вставить("ЗаголовокФормыВыбора",                   НСтр("ru = 'Выберите магазины информативных остатков:'"));
	ПараметрыФормы.Вставить("МассивВыбранныхЗначений",                СформироватьМассивВыбранныхЗначений(ПараметрыФормы));
	ПараметрыФормы.Вставить("ПараметрыВнешнегоСоединения",            Неопределено);
	ПараметрыФормы.Вставить("КоллекцияФильтров",                      КоллекцияФильтров);
	
	ОткрытьФорму("ОбщаяФорма.ФормаВыбораДополнительныхУсловий",
		ПараметрыФормы,
		ЭтаФорма);

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

// Обработчик команды, создаваемой механизмом запрета редактирования ключевых реквизитов.
//
&НаКлиенте
Процедура Подключаемый_РазрешитьРедактированиеРеквизитовОбъекта(Команда)
	
	Если НЕ Объект.Ссылка.Пустая() 
		И НЕ ЭтоПредопределенныйУзелПланаОбмена() Тогда
		ЗапретРедактированияРеквизитовОбъектовКлиент.РазрешитьРедактированиеРеквизитовОбъекта(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Функция ЭтоПредопределенныйУзелПланаОбмена()

	ИмяУзла = ОбменДаннымиПовтИсп.ПолучитьИмяПланаОбмена(Объект.Ссылка);
	ПредопределенныйУзел = ОбменДаннымиПовтИсп.ПолучитьЭтотУзелПланаОбмена(ИмяУзла);

	Возврат ПредопределенныйУзел = Объект.Ссылка;

КонецФункции 

&НаСервере
Процедура УстановитьВидимостьНаСервере()
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ГруппаПоРабочемуМесту",
		"Видимость",
		Объект.ВариантНастройки = "ПоРабочемуМесту");
		
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"РежимНастройкиОбмена",
		"Доступность",
		Объект.Ссылка.Пустая());
		
	Если Не Объект.Ссылка.Пустая() Тогда
		ЭтаФорма.АвтоЗаголовок = Ложь;
		СписокВыбора = Элементы.РежимНастройкиОбмена.СписокВыбора;
		ЭтаФорма.Заголовок = СписокВыбора.НайтиПоЗначению(Объект.ВариантНастройки).Представление;
	КонецЕсли;
		
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"Магазин",
		"Доступность",
		Объект.Ссылка.Пустая());
		
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ГруппаТокеныАвторизацииИСМП",
		"Видимость",
		ПолучитьФункциональнуюОпцию("ВестиУчетМаркируемойПродукцииИСМП"));

КонецПроцедуры

&НаСервере
Функция СформироватьМассивВыбранныхЗначений(ПараметрыФормы)
	
	МассивВыбранныхЗначений = Новый Массив;
	
	Если Объект.РежимВыгрузкиИнформативныхОстатков = Перечисления.РежимыВыгрузкиИнформативныхОстатков.ИндивидуальнаяНастройка Тогда
		ТабличнаяЧасть           = Объект[ПараметрыФормы.ИмяЭлементаФормыДляЗаполнения];
		ТаблицаВыбранныхЗначений = ТабличнаяЧасть.Выгрузить(,ПараметрыФормы.ИмяРеквизитаЭлементаФормыДляЗаполнения);
		МассивВыбранныхЗначений  = ТаблицаВыбранныхЗначений.ВыгрузитьКолонку(ПараметрыФормы.ИмяРеквизитаЭлементаФормыДляЗаполнения);
	ИначеЕсли Объект.РежимВыгрузкиИнформативныхОстатков = Перечисления.РежимыВыгрузкиИнформативныхОстатков.ВыгружатьПоВсемМагазинам Тогда
		МассивВыбранныхЗначений = ТаблицаМагазиновИнформативныхОстатков().ВыгрузитьКолонку("Магазин");
	КонецЕсли;
	
	Возврат МассивВыбранныхЗначений;

КонецФункции

&НаСервере
Процедура ОбновитьДанныеОбъекта(СтруктураПараметров)
	
	Объект[СтруктураПараметров.ИмяТаблицыДляЗаполнения].Очистить();
	
	ОбновитьИнформативныеОстаткиПоМагазинам = Истина;

	СписокВыбранныхЗначений = ПолучитьИзВременногоХранилища(СтруктураПараметров.АдресТаблицыВоВременномХранилище);
	СписокВыбранныхЗначений.Колонки.Представление.Имя = СтруктураПараметров.ИмяКолонкиДляЗаполнения;
	
	Если СписокВыбранныхЗначений.Количество() > 0 Тогда
		
		ТаблицаВсеМагазины = ТаблицаМагазиновИнформативныхОстатков();
		
		Если ОбщегоНазначения.КоллекцииИдентичны(ТаблицаВсеМагазины, СписокВыбранныхЗначений) Тогда
			Объект.РежимВыгрузкиИнформативныхОстатков = Перечисления.РежимыВыгрузкиИнформативныхОстатков.ВыгружатьПоВсемМагазинам;
			Объект[СтруктураПараметров.ИмяТаблицыДляЗаполнения].Очистить();
		Иначе
			Объект.РежимВыгрузкиИнформативныхОстатков = Перечисления.РежимыВыгрузкиИнформативныхОстатков.ИндивидуальнаяНастройка;
			Объект[СтруктураПараметров.ИмяТаблицыДляЗаполнения].Загрузить(СписокВыбранныхЗначений);
		КонецЕсли;
	Иначе
		Объект[СтруктураПараметров.ИмяТаблицыДляЗаполнения].Очистить();
		Объект.РежимВыгрузкиИнформативныхОстатков = Перечисления.РежимыВыгрузкиИнформативныхОстатков.НеВыгружать;
	КонецЕсли;
	
	ОбновитьНаименованиеКомандФормы();

КонецПроцедуры

&НаСервере
Процедура ОбновитьНаименованиеКомандФормы()
	
	// Обновим заголовок надписи по выбранным магазинам.
	ВыбранныеМагазины = Объект.МагазиныИнформативныхОстатков.Выгрузить().ВыгрузитьКолонку("Магазин");
	
	Если Объект.РежимВыгрузкиИнформативныхОстатков = Перечисления.РежимыВыгрузкиИнформативныхОстатков.ВыгружатьПоВсемМагазинам Тогда
		
		НовыйЗаголовокКоманды = НСтр("ru = 'Выгружать информативные остатки по всем магазинам.'");
		
	ИначеЕсли Объект.РежимВыгрузкиИнформативныхОстатков = Перечисления.РежимыВыгрузкиИнформативныхОстатков.ИндивидуальнаяНастройка Тогда
		
		Если ВыбранныеМагазины.Количество() = 1 Тогда
			
				ТекстЗаголовка = НСтр("ru = 'Выгружать информативные остатки по магазину %1.'");
				НовыйЗаголовокКоманды = СтрШаблон(ТекстЗаголовка, ВыбранныеМагазины[0].Наименование);

		Иначе
			НовыйЗаголовокКоманды = НСтр("ru = 'Выгружать информативные остатки по выбранным магазинам.'");
		КонецЕсли;
		
	Иначе
		НовыйЗаголовокКоманды = НСтр("ru = 'Информативные остатки по магазинам не выгружаются.'");
	КонецЕсли;
		
	Элементы.ИнформацияПоВыбраннымМагазинам.Заголовок = НовыйЗаголовокКоманды;
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьМагазинВТаблицеИнформативныхОстатков(МагазинШапки)
	
	Если Объект.РежимВыгрузкиИнформативныхОстатков = Перечисления.РежимыВыгрузкиИнформативныхОстатков.ИндивидуальнаяНастройка Тогда
		ТаблицаЗначенийМагазины = Объект.МагазиныИнформативныхОстатков.Выгрузить();
		
		СтрокаМагазин = ТаблицаЗначенийМагазины.Найти(МагазинШапки, "Магазин");
		Если СтрокаМагазин <> Неопределено Тогда
			ТаблицаЗначенийМагазины.Удалить(СтрокаМагазин);
		КонецЕсли;
		
		Объект.МагазиныИнформативныхОстатков.Загрузить(ТаблицаЗначенийМагазины);
		
		// Если удалили последний в таблице магазин
		Если Объект.МагазиныИнформативныхОстатков.Количество() = 0 Тогда
			Объект.РежимВыгрузкиИнформативныхОстатков = Перечисления.РежимыВыгрузкиИнформативныхОстатков.НеВыгружать;
		КонецЕсли;
	КонецЕсли;
		
КонецПроцедуры

&НаСервере
Функция ТаблицаМагазиновИнформативныхОстатков()
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	Магазины.Ссылка КАК Магазин
	|ИЗ
	|	Справочник.Магазины КАК Магазины
	|ГДЕ
	|	Магазины.Ссылка <> &МагазинУзла
	|	И НЕ Магазины.СкладУправляющейСистемы");
	Запрос.УстановитьПараметр("МагазинУзла", Объект.Магазин);
	
	Возврат Запрос.Выполнить().Выгрузить();

КонецФункции

&НаКлиенте
Процедура ПоказатьВопросФормированиеДокументаВводОстатков(ТекстВопроса)
	
	Кнопки = Новый СписокЗначений;
	Кнопки.Добавить(КодВозвратаДиалога.Да, НСтр("ru = 'Сформировать'"));
	Кнопки.Добавить(КодВозвратаДиалога.Нет, НСтр("ru = 'Отмена'"));
	
	Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВопроса", ЭтотОбъект, Параметры);
	ПоказатьВопрос(Оповещение, ТекстВопроса, Кнопки);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияВопроса(Результат, Параметры) Экспорт
	
	СформироватьДокументВводаОстатков = Результат = КодВозвратаДиалога.Да;

	Записать(Новый Структура("ЗаписатьИЗакрыть"));
	
КонецПроцедуры

&НаСервере
Функция НачатьФормированиеВводаОстатковНаСервере()
	
	Магазины = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Объект.Магазин);
	
	// Параметры формирования остатков.	
	ПараметрыПроцедуры = Новый Структура;
	ПараметрыПроцедуры.Вставить("УзелОбмена",                   Объект.Ссылка);
	ПараметрыПроцедуры.Вставить("КодУзла",                      Объект.Код);
	ПараметрыПроцедуры.Вставить("ДатаНачалаВыгрузкиДокументов", Объект.ДатаНачалаВыгрузкиДокументов);
	ПараметрыПроцедуры.Вставить("Магазины",                     Магазины);
	ПараметрыПроцедуры.Вставить("Комментарий",                  "");
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	Возврат ДлительныеОперации.ВыполнитьВФоне("ПланыОбмена.АвтономнаяРабота.СформироватьДокументВводаОстатков", 
		ПараметрыПроцедуры, ПараметрыВыполнения);
КонецФункции

&НаКлиенте
Процедура ФормированиеВводаОстатковЗавершение(РезультатФоновогоЗадания, ДополнительныеПараметры) Экспорт
	
	Если РезультатФоновогоЗадания = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ФормированиеВводаОстатковЗавершениеНаСервере(РезультатФоновогоЗадания);
	
	Если РезультатФоновогоЗадания.Статус = "Выполнено" Тогда
		СформироватьДокументВводаОстатков = Ложь;
	Иначе
		Модифицированность = Истина;
		ТекстСообщения = НСтр("ru = 'Формирование документа ""Ввод начальных остатков узла"" не было выполнено.
			|Рекомендуется повторно записать узел.'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		Если РезультатФоновогоЗадания.Статус = "Ошибка" Тогда
			ВызватьИсключение РезультатФоновогоЗадания.КраткоеПредставлениеОшибки;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ФормированиеВводаОстатковЗавершениеНаСервере(РезультатФоновогоЗадания)
	
	Если РезультатФоновогоЗадания.Статус = "Ошибка" Тогда
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'Обмен данными.Загрузка данных'", ОбщегоНазначения.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка,,,
			РезультатФоновогоЗадания.ПодробноеПредставлениеОшибки);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьИЗакрыть(Команда)
	
	Если Модифицированность
		И Объект.ВариантНастройки = "ПоМагазину" Тогда
		
		ТекстВопроса = НСтр("ru = 'Документы, оформленные ранее даты начала выгрузки документов не будут выгружены.
			|Рекомендуется сформировать документ ввода остатков для узла.
			|При этом будут зарегистрированы все данные к обмену.'");
		
		ПоказатьВопросФормированиеДокументаВводОстатков(ТекстВопроса);
	Иначе
		Записать(Новый Структура("ЗаписатьИЗакрыть"));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписиЗавершение(ПараметрыЗаписи) Экспорт
	
	Если ПараметрыЗаписи.Свойство("ЗаписатьИЗакрыть") Тогда
		ПодключитьОбработчикОжидания("ЗакрытьФорму", 0.1, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытьФорму()
	
	Закрыть();
	
КонецПроцедуры

#КонецОбласти