#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Пропускаем инициализацию, чтобы гарантировать получение формы при передаче параметра "АвтоТест".
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	Если Параметры.Свойство("ПолучитьЗначенияПоУмолчанию") Тогда
		// Задание значений по умолчанию.
		Если Не ЗначениеЗаполнено(ДатаНачалаВыгрузкиДокументовРТ) Тогда
			ДатаНачалаВыгрузкиДокументовРТ = НачалоГода(ТекущаяДатаСеанса());
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(ДатаНачалаВыгрузкиДокументовБП) Тогда
			ДатаНачалаВыгрузкиДокументовБП = НачалоГода(ТекущаяДатаСеанса());
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(РежимВыгрузкиПриНеобходимости) Тогда
			РежимВыгрузкиПриНеобходимости = Перечисления.РежимыВыгрузкиОбъектовОбмена.ВыгружатьПриНеобходимости;
		КонецЕсли;
		
	КонецЕсли;
	
	Если Параметры.Свойство("ПараметрыПодключения") Тогда
		ПараметрыСоединения = Параметры.ПараметрыПодключения;
	КонецЕсли;
	
	Контекст = Новый Структура;

	Если Параметры.Настройки.Свойство("ОписаниеКонтекста") Тогда 
		Контекст.Вставить("ОписаниеКонтекста", Параметры.Настройки.ОписаниеКонтекста);
	Иначе
		Контекст.Вставить("ОписаниеКонтекста", "");
	КонецЕсли;
	
	// Заполним данные для источника.
	Если Параметры.Настройки.Свойство("НастройкаОтборовНаУзле") Тогда
		
		СтруктураНастроек = Параметры.Настройки.НастройкаОтборовНаУзле;
		
	КонецЕсли;
	
	Контекст.Вставить("НастройкаОтборовНаУзле", СтруктураНастроек);
	
	СоответствующиеРеквизиты = СтруктураСоответствияНастройкиОтборовРеквизитамФормы();

	ЗаполнитьДанныеФормы(СтруктураНастроек, СоответствующиеРеквизиты);
	
	// Заполним данные для приемника.
	Если Параметры.Настройки.Свойство("НастройкаОтборовНаУзлеБазыКорреспондента") Тогда
		
		СтруктураНастроек = Параметры.Настройки.НастройкаОтборовНаУзлеБазыКорреспондента;
		
	КонецЕсли;
	
	Контекст.Вставить("НастройкаОтборовНаУзлеБазыКорреспондента", СтруктураНастроек);
	
	СоответствующиеРеквизитыКорреспондента = СтруктураСоответствияНастройкиОтборовКорреспондентаРеквизитамФормы();

	ЗаполнитьДанныеФормы(СтруктураНастроек, СоответствующиеРеквизитыКорреспондента);
	
	ОбновитьНаименованиеКомандФормы();
	
	УстановитьВидимостьНаСервере();
	
	ПолучитьОписаниеКонтекста();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ЗарплатаВыплачиваетсяИзКассыВРозничнойОптовойСетиПриИзмененииЗначения();
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	ОбменДаннымиКлиент.ФормаНастройкиПередЗакрытием(Отказ, ЭтаФорма, ЗавершениеРаботы);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	ОбновитьДанныеОбъекта(ВыбранноеЗначение);
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьОтборПоОрганизациямРТПриИзменении(Элемент)
	
	УстановитьВидимостьНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьОтборПоОрганизациямБППриИзменении(Элемент)
	
	УстановитьВидимостьНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьОтборПоПодразделениямОрганизацииПриИзменении(Элемент)
	
	УстановитьВидимостьНаСервере();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ЗаписатьИЗакрыть(Команда)
	
	Если Не ЗаписатьИЗакрытьНаСервере() Тогда
		Возврат;
	КонецЕсли;
	
	Модифицированность = Ложь;
	
	Закрыть(Контекст)
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьСписокВыбранныхОрганизаций(Команда)
	
	ПараметрыФормы = Новый Структура();
	Если ТекущийЭлемент.Имя = "ОткрытьСписокВыбранныхОрганизацийРТ" Тогда
		
		ПараметрыФормы.Вставить("ИмяЭлементаФормыДляЗаполнения",          "ОрганизацииРТ");
		ПараметрыФормы.Вставить("ИмяРеквизитаЭлементаФормыДляЗаполнения", "Представление");
		ПараметрыФормы.Вставить("ПараметрыВнешнегоСоединения",            Неопределено);
		ПараметрыФормы.Вставить("КоллекцияФильтров",                      Неопределено);
		
	ИначеЕсли ТекущийЭлемент.Имя = "ОткрытьСписокВыбранныхОрганизацийБП" Тогда
		
		ПараметрыФормы.Вставить("ИмяЭлементаФормыДляЗаполнения",          "ОрганизацииБП");
		ПараметрыФормы.Вставить("ИмяРеквизитаЭлементаФормыДляЗаполнения", "УникальныйИдентификаторСсылки");
		ПараметрыФормы.Вставить("ПараметрыВнешнегоСоединения",            ПараметрыСоединения);
		
		ПараметрыФормы.Вставить("КоллекцияФильтров",                      Неопределено);
		
	Иначе
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы.Вставить("ИмяТаблицыВыбора",                       "Справочник.Организации");
	ПараметрыФормы.Вставить("ЗаголовокФормыВыбора",                   НСтр("ru = 'Выберете организации для отбора:'"));
	ПараметрыФормы.Вставить("МассивВыбранныхЗначений",                СформироватьМассивВыбранныхЗначений(ПараметрыФормы));
	
	ОткрытьФорму("ОбщаяФорма.ФормаВыбораДополнительныхУсловий",
		ПараметрыФормы,
		ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьСписокВыбранныхПодразделений(Команда)

	ПараметрыФормы = Новый Структура();
	
	ПараметрыФормы.Вставить("ИмяЭлементаФормыДляЗаполнения",          "ПодразделенияОрганизаций");
	ПараметрыФормы.Вставить("ИмяРеквизитаЭлементаФормыДляЗаполнения", "УникальныйИдентификаторСсылки");
	ПараметрыФормы.Вставить("ПараметрыВнешнегоСоединения",            ПараметрыСоединения);
	ПараметрыФормы.Вставить("КоллекцияФильтров",                      Неопределено);
	
	ПараметрыФормы.Вставить("ИмяТаблицыВыбора",                       "Справочник.ПодразделенияОрганизаций");
	ПараметрыФормы.Вставить("ЗаголовокФормыВыбора",                   НСтр("ru = 'Выберете организации для отбора:'"));
	ПараметрыФормы.Вставить("МассивВыбранныхЗначений",                СформироватьМассивВыбранныхЗначений(ПараметрыФормы));
	
	ОткрытьФорму("ОбщаяФорма.ФормаВыбораДополнительныхУсловий",
		ПараметрыФормы,
		ЭтаФорма);
	
	
КонецПроцедуры

&НаКлиенте
Процедура ЗарплатаВыплачиваетсяИзКассыВРозничнойОптовойСетиПриИзменении(Элемент)
	
	ЗарплатаВыплачиваетсяИзКассыВРозничнойОптовойСетиПриИзмененииЗначения()

КонецПроцедуры

&НаКлиенте
Процедура ПередаватьРозничныеЦеныПриИзменении(Элемент)
	
	Если НЕ ПередаватьРозничныеЦены Тогда
		ПередаватьЦеныХарактеристик = Ложь;
	КонецЕсли;
	
	УстановитьВидимостьНаСервере();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ПолучитьОписаниеКонтекста()
	
	// отбор по Организациям
	Если ИспользоватьОтборПоОрганизациямРТ Тогда
		КоллекцияЗначений = ОрганизацииРТ.Выгрузить().ВыгрузитьКолонку("Представление");
		ПредставлениеКоллекции = ПолучитьСокращенноеПредставлениеКоллекцииЗначений(КоллекцияЗначений);
		ОрганизацииРТОписание = НСтр("ru = 'Только по организациям:'") + Символы.ПС + ПредставлениеКоллекции;
	Иначе
		ОрганизацииРТОписание = НСтр("ru = 'По всем организациям.'");
	КонецЕсли;
	
	// Дата начала выгрузки документов.
	Если ЗначениеЗаполнено(ДатаНачалаВыгрузкиДокументовРТ) Тогда
		ДатаНачалаВыгрузкиДокументовРТОписание = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Данные будут синхронизироваться, начиная с %1'"),
			Формат(ДатаНачалаВыгрузкиДокументовРТ, "ДЛФ=DD"));
	Иначе
		ДатаНачалаВыгрузкиДокументовРТОписание = НСтр("ru = 'Данные будут синхронизироваться за весь период ведения учета'");
	КонецЕсли;
	
	// передача цен
	Если ПередаватьРозничныеЦены Тогда
		Если ПередаватьЦеныХарактеристик Тогда
			ПередаватьРозничныеЦеныОписание = НСтр("ru = 'Передавать розничные цены с учетом характеристик номенклатуры'");
		Иначе
			ПередаватьРозничныеЦеныОписание = НСтр("ru = 'Передавать розничные цены'");
		КонецЕсли;                                            		
	Иначе
		ПередаватьРозничныеЦеныОписание = НСтр("ru = 'Не передавать розничные цены'");
	КонецЕсли;

	НСтрока = НСтр("ru = 'Правила отправки данных из информационной базы ""Розница"" :
		|%1
		|%2
		|%3'");
		
	МассивПараметров = Новый Массив;
	МассивПараметров.Добавить(ОрганизацииРТОписание);
	МассивПараметров.Добавить(ДатаНачалаВыгрузкиДокументовРТОписание);
	МассивПараметров.Добавить(ПередаватьРозничныеЦеныОписание);
	
	ТекстОписанияРТ = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтрокуИзМассива(НСтрока, МассивПараметров);
	
	// отбор по Организациям
	Если ИспользоватьОтборПоОрганизациямБП Тогда
		КоллекцияЗначений = ОрганизацииБП.Выгрузить().ВыгрузитьКолонку("Представление");
		ПредставлениеКоллекции = ПолучитьСокращенноеПредставлениеКоллекцииЗначений(КоллекцияЗначений);
		ОрганизацииБПОписание = НСтр("ru = 'Только по организациям:'") + Символы.ПС + ПредставлениеКоллекции;
	Иначе
		ОрганизацииБПОписание = НСтр("ru = 'По всем организациям.'");
	КонецЕсли;
	
	// Дата начала выгрузки документов.
	Если ЗначениеЗаполнено(ДатаНачалаВыгрузкиДокументовБП) Тогда
		ДатаНачалаВыгрузкиДокументовБПОписание = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Данные будут синхронизироваться, начиная с %1'"),
			Формат(ДатаНачалаВыгрузкиДокументовБП, "ДЛФ=DD"));
	Иначе
		ДатаНачалаВыгрузкиДокументовБПОписание = НСтр("ru = 'Данные будут синхронизироваться за весь период ведения учета'");
	КонецЕсли;
	
	// передача НСИ
	Если ПередаватьНСИ Тогда
		ПередаватьНСИОписание = НСтр("ru = 'Передавать нормативно-справочную информацию'");
	Иначе
		ПередаватьНСИОписание = НСтр("ru = 'Не передавать нормативно-справочную информацию'");
	КонецЕсли;
	
	Если РазрешитьПроведениеДокументовПриЗагрузке Тогда
		 ПроведенияПриЗагрузкеОписание = НСтр("ru = 'Для новых документов, загружаемых в эту базу, проведение разрешено'");
	Иначе
		 ПроведенияПриЗагрузкеОписание = НСтр("ru = 'Для новых документов, загружаемых в эту базу, проведение запрещено'");
	КонецЕсли;
	
	Если ИспользоватьОтборПоПодразделениямОрганизации Тогда
		КоллекцияЗначений = ПодразделенияОрганизаций.Выгрузить().ВыгрузитьКолонку("Представление");
		ПредставлениеКоллекции = ПолучитьСокращенноеПредставлениеКоллекцииЗначений(КоллекцияЗначений);
		ПодразделенияОписание = НСтр("ru = 'только по подразделениям:'") + Символы.ПС + ПредставлениеКоллекции;
	Иначе
		ПодразделенияОписание = НСтр("ru = 'по всем подразделениям организаций'");
	КонецЕсли;
	
	Если ЗарплатаВыплачиваетсяИзКассыВРозничнойОптовойСети Тогда
		ВыплатаЗарплатыОписание = НСтр("ru = 'Заработная плата выплачивается из касс магазинов'") + " " + ПодразделенияОписание;
	Иначе
		ВыплатаЗарплатыОписание = НСтр("ru = 'Заработная плата не выплачивается из касс магазинов'");
	КонецЕсли;
	
	НСтрока = НСтр("ru = 'Правила отправки данных из информационной базы ""Бухгалтерия предприятия"" :
		|%1
		|%2
		|%3
		|%4
		|%5'");
		
	МассивПараметров = Новый Массив;
	МассивПараметров.Добавить(ОрганизацииБПОписание);
	МассивПараметров.Добавить(ДатаНачалаВыгрузкиДокументовБПОписание);
	МассивПараметров.Добавить(ПередаватьНСИОписание);
	МассивПараметров.Добавить(ПроведенияПриЗагрузкеОписание);
	МассивПараметров.Добавить(ВыплатаЗарплатыОписание);
	
	ТекстОписанияБП = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтрокуИзМассива(НСтрока, МассивПараметров);
	
	ОписаниеКонтекста = (""
		+ ТекстОписанияРТ
		+ Символы.ПС
		+ Символы.ПС
		+ ТекстОписанияБП);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗарплатаВыплачиваетсяИзКассыВРозничнойОптовойСетиПриИзмененииЗначения()
	
	Элементы.ГруппаТабличнаяЧастьПодразделения.Видимость = ЗарплатаВыплачиваетсяИзКассыВРозничнойОптовойСети;
	Элементы.ОписаниеУстановкаОтбораПоПодразделениямОрганизаций.Видимость = ЗарплатаВыплачиваетсяИзКассыВРозничнойОптовойСети;
	
КонецПроцедуры

Функция СтруктураСоответствияНастройкиОтборовРеквизитамФормы()
	
	СтруктураНастроек = Новый Структура;
	СтруктураНастроек.Вставить("ДатаНачалаВыгрузкиДокументов",			"ДатаНачалаВыгрузкиДокументовРТ");
	СтруктураНастроек.Вставить("ИспользоватьОтборПоОрганизациям",		"ИспользоватьОтборПоОрганизациямРТ");
	СтруктураНастроек.Вставить("ИспользоватьНачислениеЗарплаты",		"ИспользоватьНачислениеЗарплаты");
	СтруктураНастроек.Вставить("ПередаватьРозничныеЦены",				"ПередаватьРозничныеЦены");
	СтруктураНастроек.Вставить("ПередаватьЦеныХарактеристик",			"ПередаватьЦеныХарактеристик");
	СтруктураНастроек.Вставить("Организации",							"ОрганизацииРТ");
	
	Возврат СтруктураНастроек;
	
КонецФункции

&НаСервере
Функция СтруктураСоответствияНастройкиОтборовКорреспондентаРеквизитамФормы()
	
	СтруктураНастроек = Новый Структура;
	СтруктураНастроек.Вставить("ДатаНачалаВыгрузкиДокументов",					"ДатаНачалаВыгрузкиДокументовБП");
	СтруктураНастроек.Вставить("ИспользоватьОтборПоОрганизациям",				"ИспользоватьОтборПоОрганизациямБП");
	СтруктураНастроек.Вставить("ИспользоватьОтборПоПодразделениямОрганизации",	"ИспользоватьОтборПоПодразделениямОрганизации");
	СтруктураНастроек.Вставить("ПередаватьНСИ",									"ПередаватьНСИ");
	СтруктураНастроек.Вставить("ЗарплатаВыплачиваетсяИзКассыВРозничнойОптовойСети", "ЗарплатаВыплачиваетсяИзКассыВРозничнойОптовойСети");
	СтруктураНастроек.Вставить("РазрешитьПроведениеДокументовПриЗагрузке",		"РазрешитьПроведениеДокументовПриЗагрузке");
	СтруктураНастроек.Вставить("РежимВыгрузкиПриНеобходимости",					"РежимВыгрузкиПриНеобходимости");
	СтруктураНастроек.Вставить("Организации",									"ОрганизацииБП");
	СтруктураНастроек.Вставить("ПодразделенияОрганизаций",						"ПодразделенияОрганизаций");
	
	Возврат СтруктураНастроек;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьДанныеФормы(СтруктураНастроек, СоответствующиеРеквизиты)
	
	Для Каждого ЭлементНастройки Из СтруктураНастроек Цикл
		
		Если СоответствующиеРеквизиты.Свойство(ЭлементНастройки.Ключ) Тогда
			
			РеквизитФормы = ЭтаФорма[СоответствующиеРеквизиты[ЭлементНастройки.Ключ]];
			
			Если ТипЗнч(РеквизитФормы) = Тип("ДанныеФормыКоллекция") Тогда
				
				Если ТипЗнч(ЭлементНастройки.Значение) = Тип("Массив")
					И ЭлементНастройки.Значение.Количество() > 0 Тогда
					
					Таблица = ЭтаФорма[СоответствующиеРеквизиты[ЭлементНастройки.Ключ]].Выгрузить();
					
					Таблица.Очистить();
					
					Для Каждого СтрокаТаблицы Из ЭлементНастройки.Значение Цикл
						
						ЗаполнитьЗначенияСвойств(Таблица.Добавить(), СтрокаТаблицы);
						
					КонецЦикла;
					
					ЭтаФорма[СоответствующиеРеквизиты[ЭлементНастройки.Ключ]].Загрузить(Таблица);
					
				КонецЕсли;
				
			Иначе
				
				ЭтаФорма[СоответствующиеРеквизиты[ЭлементНастройки.Ключ]] = ЭлементНастройки.Значение;
				
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДанныеСтруктуры(СтруктураНастроек, СоответствующиеРеквизиты)
	
	Для Каждого ЭлементНастройки Из СтруктураНастроек Цикл
		
		Если СоответствующиеРеквизиты.Свойство(ЭлементНастройки.Ключ) Тогда
			
			РеквизитФормы = ЭтаФорма[СоответствующиеРеквизиты[ЭлементНастройки.Ключ]];
			
			Если ТипЗнч(РеквизитФормы) = Тип("ДанныеФормыКоллекция") Тогда
				
				ИмяТаблицы = ЭлементНастройки.Ключ;
				
				Таблица = Новый Массив;
				
				Для Каждого Элемент Из ЭтаФорма[СоответствующиеРеквизиты[ЭлементНастройки.Ключ]] Цикл
					
					СтрокаТаблицы = Новый Структура("Использовать, Представление, УникальныйИдентификаторСсылки");
					
					ЗаполнитьЗначенияСвойств(СтрокаТаблицы, Элемент);
					
					Таблица.Добавить(СтрокаТаблицы);
					
				КонецЦикла;
				
				СтруктураНастроек.Вставить(ИмяТаблицы, Таблица);
			
			Иначе
				
				СтруктураНастроек.Вставить(ЭлементНастройки.Ключ, ЭтаФорма[СоответствующиеРеквизиты[ЭлементНастройки.Ключ]]);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ЗаписатьИЗакрытьНаСервере()
	
	Если Не ПроверитьЗаполнение() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если Не ИспользоватьОтборПоОрганизациямРТ И ОрганизацииРТ.Количество() <> 0 Тогда
		ОрганизацииРТ.Очистить();
	ИначеЕсли ОрганизацииРТ.Количество() = 0 И ИспользоватьОтборПоОрганизациямРТ Тогда
		ИспользоватьОтборПоОрганизациямРТ = Ложь;
	КонецЕсли;
	
	Если Не ИспользоватьОтборПоОрганизациямБП И ОрганизацииБП.Количество() <> 0 Тогда
		ОрганизацииБП.Очистить();
	ИначеЕсли ОрганизацииБП.Количество() = 0 И ИспользоватьОтборПоОрганизациямБП Тогда
		ИспользоватьОтборПоОрганизациямБП = Ложь;
	КонецЕсли;
	
	// Сохраним введенные значения источника.
	СтруктураНастроек = Контекст.НастройкаОтборовНаУзле;
	ЗаполнитьДанныеСтруктуры(СтруктураНастроек, СоответствующиеРеквизиты);
	Контекст.Вставить("НастройкаОтборовНаУзле", СтруктураНастроек);
	
	// Сохраним введенные значения приемника.
	СтруктураНастроек = Контекст.НастройкаОтборовНаУзлеБазыКорреспондента;
	ЗаполнитьДанныеСтруктуры(СтруктураНастроек, СоответствующиеРеквизитыКорреспондента);
	Контекст.Вставить("НастройкаОтборовНаУзлеБазыКорреспондента", СтруктураНастроек);
	
	ПолучитьОписаниеКонтекста();
	Контекст.Вставить("ОписаниеКонтекста", ОписаниеКонтекста);

	Возврат Истина;

КонецФункции

&НаСервере
Функция СформироватьМассивВыбранныхЗначений(ПараметрыФормы)
	
	ТабличнаяЧасть           = ЭтаФорма[ПараметрыФормы.ИмяЭлементаФормыДляЗаполнения];
	ТаблицаВыбранныхЗначений = ТабличнаяЧасть.Выгрузить(,ПараметрыФормы.ИмяРеквизитаЭлементаФормыДляЗаполнения);
	МассивВыбранныхЗначений  = ТаблицаВыбранныхЗначений.ВыгрузитьКолонку(ПараметрыФормы.ИмяРеквизитаЭлементаФормыДляЗаполнения);
	
	Возврат МассивВыбранныхЗначений;
	
КонецФункции

&НаСервере
Процедура ОбновитьДанныеОбъекта(СтруктураПараметров)
	
	ЭтаФорма[СтруктураПараметров.ИмяТаблицыДляЗаполнения].Очистить();
	
	СписокВыбранныхЗначений = ПолучитьИзВременногоХранилища(СтруктураПараметров.АдресТаблицыВоВременномХранилище);
	
	Если СписокВыбранныхЗначений.Количество() > 0 Тогда
		СписокВыбранныхЗначений.Колонки.Идентификатор.Имя = "УникальныйИдентификаторСсылки";
		СписокВыбранныхЗначений.Колонки.Добавить("Использовать");
		СписокВыбранныхЗначений.ЗаполнитьЗначения( Истина, "Использовать");
		ЭтаФорма[СтруктураПараметров.ИмяТаблицыДляЗаполнения].Загрузить(СписокВыбранныхЗначений);
	КонецЕсли;
	
	ОбновитьНаименованиеКомандФормы();
	
КонецПроцедуры

// Возвращает сокращенное строковое представление коллекции значений.
// 
// Параметры:
//  Коллекция 						- массив или список значений.
//  МаксимальноеКоличествоЭлементов - число, максимальное количество элементов включаемое в представление.
//
// Возвращаемое значение:
//  Строка.
//
&НаСервере
Функция ПолучитьСокращенноеПредставлениеКоллекцииЗначений(Коллекция, МаксимальноеКоличествоЭлементов = 2) 
	
	СтрокаПредставления = "";
	
	КоличествоЗначений			 = Коллекция.Количество();
	КоличествоВыводимыхЭлементов = Мин(КоличествоЗначений, МаксимальноеКоличествоЭлементов);
	
	Если КоличествоВыводимыхЭлементов = 0 Тогда
		
		Возврат "";
		
	Иначе
		
		Для НомерЗначения = 1 По КоличествоВыводимыхЭлементов Цикл
			
			СтрокаПредставления = СтрокаПредставления + Коллекция.Получить(НомерЗначения - 1) + ", ";	
			
		КонецЦикла;
		
		СтрокаПредставления = Лев(СтрокаПредставления, СтрДлина(СтрокаПредставления) - 2);
		Если КоличествоЗначений > КоличествоВыводимыхЭлементов Тогда
			СтрокаПредставления = СтрокаПредставления + ", ... ";
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат СтрокаПредставления;
	
КонецФункции

&НаСервере
Процедура ОбновитьНаименованиеКомандФормы()
	
	// Обновим заголовок выбранных организаций конфигурации "Розница".
	Если ОрганизацииРТ.Количество() > 0 Тогда
		
		ВыбранныеОрганизации = ОрганизацииРТ.Выгрузить().ВыгрузитьКолонку("Представление");
		НовыйЗаголовокОрганизаций = СтрСоединить(ВыбранныеОрганизации);
		
	Иначе
		
		НовыйЗаголовокОрганизаций = НСтр("ru = 'Выбрать организации'");
		
	КонецЕсли;
	
	Элементы.ОткрытьСписокВыбранныхОрганизацийРТ.Заголовок = НовыйЗаголовокОрганизаций;
	
	// Обновим заголовок выбранных организаций конфигурации "Бухгалтерия предприятия".
	Если ОрганизацииБП.Количество() > 0 Тогда
		
		ВыбранныеОрганизации = ОрганизацииБП.Выгрузить().ВыгрузитьКолонку("Представление");
		НовыйЗаголовокОрганизаций = СтрСоединить(ВыбранныеОрганизации);
		
	Иначе
		
		НовыйЗаголовокОрганизаций = НСтр("ru = 'Выбрать организации'");
		
	КонецЕсли;
	
	Элементы.ОткрытьСписокВыбранныхОрганизацийБП.Заголовок = НовыйЗаголовокОрганизаций;
	
	// Обновим заголовок выбранных подразделений конфигурации "Бухгалтерия предприятия".
	Если ПодразделенияОрганизаций.Количество() > 0 Тогда
		
		ВыбранныеПодразделения		= ПодразделенияОрганизаций.Выгрузить().ВыгрузитьКолонку("Представление");
		НовыйЗаголовокПодразделений	= СтрСоединить(ВыбранныеПодразделения);
		
	Иначе
		
		НовыйЗаголовокПодразделений = НСтр("ru = 'Выбрать подразделения'");
		
	КонецЕсли;
	
	Элементы.ОткрытьСписокВыбранныхПодразделений.Заголовок = НовыйЗаголовокПодразделений;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьНаСервере()
	
	Элементы.ОткрытьСписокВыбранныхОрганизацийРТ.Видимость = ИспользоватьОтборПоОрганизациямРТ;
	Элементы.ОткрытьСписокВыбранныхОрганизацийБП.Видимость = ИспользоватьОтборПоОрганизациямБП;
	Элементы.ОткрытьСписокВыбранныхПодразделений.Видимость = ИспользоватьОтборПоПодразделениямОрганизации;
	Элементы.ПередаватьЦеныХарактеристик.Видимость = ПередаватьРозничныеЦены И ПолучитьФункциональнуюОпцию("ИспользоватьХарактеристикиНоменклатуры");

КонецПроцедуры

#КонецОбласти
